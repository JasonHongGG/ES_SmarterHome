
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e38  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001058  08011fc8  08011fc8  00012fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013020  08013020  0001518c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013020  08013020  00014020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013028  08013028  0001518c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013028  08013028  00014028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801302c  0801302c  0001402c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  08013030  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001518c  2**0
                  CONTENTS
 10 .bss          00014190  2000018c  2000018c  0001518c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001431c  2001431c  0001518c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001518c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026d11  00000000  00000000  000151bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000063dd  00000000  00000000  0003becd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020f8  00000000  00000000  000422b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001995  00000000  00000000  000443a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a80f  00000000  00000000  00045d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e9bb  00000000  00000000  0007054c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e45dd  00000000  00000000  0009ef07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001834e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000097e8  00000000  00000000  00183528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0018cd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011fb0 	.word	0x08011fb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	08011fb0 	.word	0x08011fb0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f001 fb45 	bl	8001c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8e1 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 fbd5 	bl	8000d88 <MX_GPIO_Init>
  MX_DMA_Init();
 80005de:	f000 fba3 	bl	8000d28 <MX_DMA_Init>
  MX_SPI1_Init();
 80005e2:	f000 fa2b 	bl	8000a3c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005e6:	f000 fb4b 	bl	8000c80 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005ea:	f000 fb73 	bl	8000cd4 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80005ee:	f000 f96f 	bl	80008d0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005f2:	f000 fb1b 	bl	8000c2c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80005f6:	f000 f93d 	bl	8000874 <MX_I2C1_Init>
  MX_TIM4_Init();
 80005fa:	f000 fa8b 	bl	8000b14 <MX_TIM4_Init>
  MX_SPI2_Init();
 80005fe:	f000 fa53 	bl	8000aa8 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000602:	f007 fce9 	bl	8007fd8 <MX_FATFS_Init>
  MX_I2S3_Init();
 8000606:	f000 f991 	bl	800092c <MX_I2S3_Init>
  MX_RTC_Init();
 800060a:	f000 f9bd 	bl	8000988 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // init
  Timer_Init(&huart2);
 800060e:	484c      	ldr	r0, [pc, #304]	@ (8000740 <main+0x174>)
 8000610:	f00f fb46 	bl	800fca0 <Timer_Init>
  Log_Init(&huart2);
 8000614:	484a      	ldr	r0, [pc, #296]	@ (8000740 <main+0x174>)
 8000616:	f00d ff7f 	bl	800e518 <Log_Init>
  MsgHandler_Init(&huart2);
 800061a:	4849      	ldr	r0, [pc, #292]	@ (8000740 <main+0x174>)
 800061c:	f000 fc9c 	bl	8000f58 <MsgHandler_Init>
  LCD2004_Init(&hi2c1, 0x4E, &huart2);
 8000620:	4a47      	ldr	r2, [pc, #284]	@ (8000740 <main+0x174>)
 8000622:	214e      	movs	r1, #78	@ 0x4e
 8000624:	4847      	ldr	r0, [pc, #284]	@ (8000744 <main+0x178>)
 8000626:	f00b f907 	bl	800b838 <LCD2004_Init>
  LED_Init();
 800062a:	f00b fa03 	bl	800ba34 <LED_Init>
  SD_Init(&huart2);
 800062e:	4844      	ldr	r0, [pc, #272]	@ (8000740 <main+0x174>)
 8000630:	f00e fa12 	bl	800ea58 <SD_Init>
  Shell_Init(&huart2);
 8000634:	4842      	ldr	r0, [pc, #264]	@ (8000740 <main+0x174>)
 8000636:	f00f f9f9 	bl	800fa2c <Shell_Init>
  ESP32_Init(&huart3, &huart2);
 800063a:	4941      	ldr	r1, [pc, #260]	@ (8000740 <main+0x174>)
 800063c:	4842      	ldr	r0, [pc, #264]	@ (8000748 <main+0x17c>)
 800063e:	f007 fb9d 	bl	8007d7c <ESP32_Init>

//  my_WM8978_Init();
  //OS Resource
  Timer_OS_Resources_Init();
 8000642:	f00f fb3d 	bl	800fcc0 <Timer_OS_Resources_Init>
  Log_OS_Resources_Init();
 8000646:	f00d ff77 	bl	800e538 <Log_OS_Resources_Init>
  MsgHandler_OS_Resources_Init();
 800064a:	f000 fc95 	bl	8000f78 <MsgHandler_OS_Resources_Init>
  LCD2004_OS_Resources_Init();
 800064e:	f00b f90f 	bl	800b870 <LCD2004_OS_Resources_Init>
  LED_OS_Resources_Init();
 8000652:	f00b fa01 	bl	800ba58 <LED_OS_Resources_Init>
  SD_OS_Resources_Init();
 8000656:	f00e fa11 	bl	800ea7c <SD_OS_Resources_Init>
  Shell_OS_Resources_Init();
 800065a:	f00f f9fb 	bl	800fa54 <Shell_OS_Resources_Init>
  ESP32_OS_Resources_Init();
 800065e:	f007 fba3 	bl	8007da8 <ESP32_OS_Resources_Init>


//   WM8978_Palyer();
  //Task
  xTaskCreate(ESP32Sender, "ESP32Sender", 128, NULL, 1, NULL);
 8000662:	2300      	movs	r3, #0
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2301      	movs	r3, #1
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	2280      	movs	r2, #128	@ 0x80
 800066e:	4937      	ldr	r1, [pc, #220]	@ (800074c <main+0x180>)
 8000670:	4837      	ldr	r0, [pc, #220]	@ (8000750 <main+0x184>)
 8000672:	f009 f8c5 	bl	8009800 <xTaskCreate>
  xTaskCreate(ESP32Receiver, "ESP32Receiver", 256, NULL, 2, NULL);
 8000676:	2300      	movs	r3, #0
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2302      	movs	r3, #2
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2300      	movs	r3, #0
 8000680:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000684:	4933      	ldr	r1, [pc, #204]	@ (8000754 <main+0x188>)
 8000686:	4834      	ldr	r0, [pc, #208]	@ (8000758 <main+0x18c>)
 8000688:	f009 f8ba 	bl	8009800 <xTaskCreate>
  xTaskCreate(LCDHandler, "LCDHandler", 256, NULL, 1, NULL);
 800068c:	2300      	movs	r3, #0
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	2301      	movs	r3, #1
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2300      	movs	r3, #0
 8000696:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800069a:	4930      	ldr	r1, [pc, #192]	@ (800075c <main+0x190>)
 800069c:	4830      	ldr	r0, [pc, #192]	@ (8000760 <main+0x194>)
 800069e:	f009 f8af 	bl	8009800 <xTaskCreate>
  xTaskCreate(ShellHandler, "ShellHandler", 512, NULL, 2, NULL);
 80006a2:	2300      	movs	r3, #0
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2302      	movs	r3, #2
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	2300      	movs	r3, #0
 80006ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006b0:	492c      	ldr	r1, [pc, #176]	@ (8000764 <main+0x198>)
 80006b2:	482d      	ldr	r0, [pc, #180]	@ (8000768 <main+0x19c>)
 80006b4:	f009 f8a4 	bl	8009800 <xTaskCreate>
  xTaskCreate(CommandReceiver, "CommandReceiver", 512, NULL, 3, NULL);
 80006b8:	2300      	movs	r3, #0
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	2303      	movs	r3, #3
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c6:	4929      	ldr	r1, [pc, #164]	@ (800076c <main+0x1a0>)
 80006c8:	4829      	ldr	r0, [pc, #164]	@ (8000770 <main+0x1a4>)
 80006ca:	f009 f899 	bl	8009800 <xTaskCreate>
  xTaskCreate(LEDHandler, "LEDHandler", 128, NULL, 1, NULL);
 80006ce:	2300      	movs	r3, #0
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	2301      	movs	r3, #1
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2300      	movs	r3, #0
 80006d8:	2280      	movs	r2, #128	@ 0x80
 80006da:	4926      	ldr	r1, [pc, #152]	@ (8000774 <main+0x1a8>)
 80006dc:	4826      	ldr	r0, [pc, #152]	@ (8000778 <main+0x1ac>)
 80006de:	f009 f88f 	bl	8009800 <xTaskCreate>
  xTaskCreate(LEDTask, "LEDTask", 128, NULL, 1, NULL);
 80006e2:	2300      	movs	r3, #0
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	2301      	movs	r3, #1
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2300      	movs	r3, #0
 80006ec:	2280      	movs	r2, #128	@ 0x80
 80006ee:	4923      	ldr	r1, [pc, #140]	@ (800077c <main+0x1b0>)
 80006f0:	4823      	ldr	r0, [pc, #140]	@ (8000780 <main+0x1b4>)
 80006f2:	f009 f885 	bl	8009800 <xTaskCreate>
  xTaskCreate(SDParseHandler, "SDParseHandler", 512, NULL, 1, NULL);
 80006f6:	2300      	movs	r3, #0
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	2301      	movs	r3, #1
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2300      	movs	r3, #0
 8000700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000704:	491f      	ldr	r1, [pc, #124]	@ (8000784 <main+0x1b8>)
 8000706:	4820      	ldr	r0, [pc, #128]	@ (8000788 <main+0x1bc>)
 8000708:	f009 f87a 	bl	8009800 <xTaskCreate>
  xTaskCreate(LogHandler, "LogHandler", 512, NULL, 3, NULL);
 800070c:	2300      	movs	r3, #0
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	2303      	movs	r3, #3
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2300      	movs	r3, #0
 8000716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800071a:	491c      	ldr	r1, [pc, #112]	@ (800078c <main+0x1c0>)
 800071c:	481c      	ldr	r0, [pc, #112]	@ (8000790 <main+0x1c4>)
 800071e:	f009 f86f 	bl	8009800 <xTaskCreate>
  xTaskCreate(SyncTimeHandler, "SyncTimeHandler", 512, NULL, 3, NULL);
 8000722:	2300      	movs	r3, #0
 8000724:	9301      	str	r3, [sp, #4]
 8000726:	2303      	movs	r3, #3
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2300      	movs	r3, #0
 800072c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000730:	4918      	ldr	r1, [pc, #96]	@ (8000794 <main+0x1c8>)
 8000732:	4819      	ldr	r0, [pc, #100]	@ (8000798 <main+0x1cc>)
 8000734:	f009 f864 	bl	8009800 <xTaskCreate>


//  xTaskCreate(WM8978_Demo, "WM8978_Demo", 512, NULL, 1, NULL);
  // xTaskCreate(NECHandler, "NECHandler", 128, NULL, 1, NULL);

  vTaskStartScheduler();
 8000738:	f009 f9d8 	bl	8009aec <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <main+0x170>
 8000740:	200004b8 	.word	0x200004b8
 8000744:	200001a8 	.word	0x200001a8
 8000748:	20000500 	.word	0x20000500
 800074c:	0801200c 	.word	0x0801200c
 8000750:	08007e19 	.word	0x08007e19
 8000754:	08012018 	.word	0x08012018
 8000758:	08007f41 	.word	0x08007f41
 800075c:	08012028 	.word	0x08012028
 8000760:	0800b9e5 	.word	0x0800b9e5
 8000764:	08012034 	.word	0x08012034
 8000768:	0800fa91 	.word	0x0800fa91
 800076c:	08012044 	.word	0x08012044
 8000770:	0800fbdd 	.word	0x0800fbdd
 8000774:	08012054 	.word	0x08012054
 8000778:	0800bac1 	.word	0x0800bac1
 800077c:	08012060 	.word	0x08012060
 8000780:	0800bb49 	.word	0x0800bb49
 8000784:	08012068 	.word	0x08012068
 8000788:	0800ed81 	.word	0x0800ed81
 800078c:	08012078 	.word	0x08012078
 8000790:	0800e76d 	.word	0x0800e76d
 8000794:	08012084 	.word	0x08012084
 8000798:	0800fd71 	.word	0x0800fd71

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	@ 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2230      	movs	r2, #48	@ 0x30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f00f ff04 	bl	80105b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	4b29      	ldr	r3, [pc, #164]	@ (800086c <SystemClock_Config+0xd0>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c8:	4a28      	ldr	r2, [pc, #160]	@ (800086c <SystemClock_Config+0xd0>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d0:	4b26      	ldr	r3, [pc, #152]	@ (800086c <SystemClock_Config+0xd0>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	4b23      	ldr	r3, [pc, #140]	@ (8000870 <SystemClock_Config+0xd4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a22      	ldr	r2, [pc, #136]	@ (8000870 <SystemClock_Config+0xd4>)
 80007e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <SystemClock_Config+0xd4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007f8:	230a      	movs	r3, #10
 80007fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	2310      	movs	r3, #16
 8000802:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	2302      	movs	r3, #2
 800080a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080c:	2300      	movs	r3, #0
 800080e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000810:	2308      	movs	r3, #8
 8000812:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000814:	2332      	movs	r3, #50	@ 0x32
 8000816:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000818:	2304      	movs	r3, #4
 800081a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800081c:	2307      	movs	r3, #7
 800081e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	f107 0320 	add.w	r3, r7, #32
 8000824:	4618      	mov	r0, r3
 8000826:	f003 fa59 	bl	8003cdc <HAL_RCC_OscConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000830:	f000 fb8b 	bl	8000f4a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000834:	230f      	movs	r3, #15
 8000836:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000838:	2302      	movs	r3, #2
 800083a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000840:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000844:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800084a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f003 fcba 	bl	80041cc <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800085e:	f000 fb74 	bl	8000f4a <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3750      	adds	r7, #80	@ 0x50
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_I2C1_Init+0x50>)
 800087a:	4a13      	ldr	r2, [pc, #76]	@ (80008c8 <MX_I2C1_Init+0x54>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_I2C1_Init+0x50>)
 8000880:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <MX_I2C1_Init+0x58>)
 8000882:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000890:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <MX_I2C1_Init+0x50>)
 8000892:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000896:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000898:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <MX_I2C1_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_I2C1_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a4:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <MX_I2C1_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <MX_I2C1_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <MX_I2C1_Init+0x50>)
 80008b2:	f002 f8d5 	bl	8002a60 <HAL_I2C_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008bc:	f000 fb45 	bl	8000f4a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200001a8 	.word	0x200001a8
 80008c8:	40005400 	.word	0x40005400
 80008cc:	000186a0 	.word	0x000186a0

080008d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_I2C2_Init+0x50>)
 80008d6:	4a13      	ldr	r2, [pc, #76]	@ (8000924 <MX_I2C2_Init+0x54>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_I2C2_Init+0x50>)
 80008dc:	4a12      	ldr	r2, [pc, #72]	@ (8000928 <MX_I2C2_Init+0x58>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_I2C2_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <MX_I2C2_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_I2C2_Init+0x50>)
 80008ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <MX_I2C2_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_I2C2_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <MX_I2C2_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_I2C2_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <MX_I2C2_Init+0x50>)
 800090e:	f002 f8a7 	bl	8002a60 <HAL_I2C_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000918:	f000 fb17 	bl	8000f4a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200001fc 	.word	0x200001fc
 8000924:	40005800 	.word	0x40005800
 8000928:	000186a0 	.word	0x000186a0

0800092c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000930:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <MX_I2S3_Init+0x54>)
 8000932:	4a14      	ldr	r2, [pc, #80]	@ (8000984 <MX_I2S3_Init+0x58>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000936:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <MX_I2S3_Init+0x54>)
 8000938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800093c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <MX_I2S3_Init+0x54>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000944:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <MX_I2S3_Init+0x54>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800094a:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <MX_I2S3_Init+0x54>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000950:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <MX_I2S3_Init+0x54>)
 8000952:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000956:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <MX_I2S3_Init+0x54>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <MX_I2S3_Init+0x54>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <MX_I2S3_Init+0x54>)
 8000966:	2201      	movs	r2, #1
 8000968:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_I2S3_Init+0x54>)
 800096c:	f002 fd16 	bl	800339c <HAL_I2S_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000976:	f000 fae8 	bl	8000f4a <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000250 	.word	0x20000250
 8000984:	40003c00 	.word	0x40003c00

08000988 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800099c:	2300      	movs	r3, #0
 800099e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009a0:	4b24      	ldr	r3, [pc, #144]	@ (8000a34 <MX_RTC_Init+0xac>)
 80009a2:	4a25      	ldr	r2, [pc, #148]	@ (8000a38 <MX_RTC_Init+0xb0>)
 80009a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009a6:	4b23      	ldr	r3, [pc, #140]	@ (8000a34 <MX_RTC_Init+0xac>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009ac:	4b21      	ldr	r3, [pc, #132]	@ (8000a34 <MX_RTC_Init+0xac>)
 80009ae:	227f      	movs	r2, #127	@ 0x7f
 80009b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009b2:	4b20      	ldr	r3, [pc, #128]	@ (8000a34 <MX_RTC_Init+0xac>)
 80009b4:	22ff      	movs	r2, #255	@ 0xff
 80009b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a34 <MX_RTC_Init+0xac>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009be:	4b1d      	ldr	r3, [pc, #116]	@ (8000a34 <MX_RTC_Init+0xac>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <MX_RTC_Init+0xac>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009ca:	481a      	ldr	r0, [pc, #104]	@ (8000a34 <MX_RTC_Init+0xac>)
 80009cc:	f003 ff92 	bl	80048f4 <HAL_RTC_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80009d6:	f000 fab8 	bl	8000f4a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 80009da:	2315      	movs	r3, #21
 80009dc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 54;
 80009de:	2336      	movs	r3, #54	@ 0x36
 80009e0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	4619      	mov	r1, r3
 80009f4:	480f      	ldr	r0, [pc, #60]	@ (8000a34 <MX_RTC_Init+0xac>)
 80009f6:	f004 f800 	bl	80049fa <HAL_RTC_SetTime>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000a00:	f000 faa3 	bl	8000f4a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000a04:	2303      	movs	r3, #3
 8000a06:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8000a08:	2306      	movs	r3, #6
 8000a0a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 11;
 8000a0c:	230b      	movs	r3, #11
 8000a0e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 25;
 8000a10:	2319      	movs	r3, #25
 8000a12:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a14:	463b      	mov	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	@ (8000a34 <MX_RTC_Init+0xac>)
 8000a1c:	f004 f8e5 	bl	8004bea <HAL_RTC_SetDate>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000a26:	f000 fa90 	bl	8000f4a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000358 	.word	0x20000358
 8000a38:	40002800 	.word	0x40002800

08000a3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a40:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <MX_SPI1_Init+0x64>)
 8000a42:	4a18      	ldr	r2, [pc, #96]	@ (8000aa4 <MX_SPI1_Init+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <MX_SPI1_Init+0x64>)
 8000a48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_SPI1_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a54:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <MX_SPI1_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <MX_SPI1_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <MX_SPI1_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <MX_SPI1_Init+0x64>)
 8000a68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <MX_SPI1_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <MX_SPI1_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <MX_SPI1_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a80:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <MX_SPI1_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <MX_SPI1_Init+0x64>)
 8000a88:	220a      	movs	r2, #10
 8000a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	@ (8000aa0 <MX_SPI1_Init+0x64>)
 8000a8e:	f004 fa3d 	bl	8004f0c <HAL_SPI_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a98:	f000 fa57 	bl	8000f4a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000378 	.word	0x20000378
 8000aa4:	40013000 	.word	0x40013000

08000aa8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000aac:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <MX_SPI2_Init+0x64>)
 8000aae:	4a18      	ldr	r2, [pc, #96]	@ (8000b10 <MX_SPI2_Init+0x68>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ab2:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <MX_SPI2_Init+0x64>)
 8000ab4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ab8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aba:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <MX_SPI2_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <MX_SPI2_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_SPI2_Init+0x64>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <MX_SPI2_Init+0x64>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_SPI2_Init+0x64>)
 8000ad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ad8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ada:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_SPI2_Init+0x64>)
 8000adc:	2230      	movs	r2, #48	@ 0x30
 8000ade:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <MX_SPI2_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_SPI2_Init+0x64>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aec:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <MX_SPI2_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_SPI2_Init+0x64>)
 8000af4:	220a      	movs	r2, #10
 8000af6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <MX_SPI2_Init+0x64>)
 8000afa:	f004 fa07 	bl	8004f0c <HAL_SPI_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b04:	f000 fa21 	bl	8000f4a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200003d0 	.word	0x200003d0
 8000b10:	40003800 	.word	0x40003800

08000b14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08e      	sub	sp, #56	@ 0x38
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b28:	f107 0320 	add.w	r3, r7, #32
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
 8000b40:	615a      	str	r2, [r3, #20]
 8000b42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b44:	4b37      	ldr	r3, [pc, #220]	@ (8000c24 <MX_TIM4_Init+0x110>)
 8000b46:	4a38      	ldr	r2, [pc, #224]	@ (8000c28 <MX_TIM4_Init+0x114>)
 8000b48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000b4a:	4b36      	ldr	r3, [pc, #216]	@ (8000c24 <MX_TIM4_Init+0x110>)
 8000b4c:	2253      	movs	r2, #83	@ 0x53
 8000b4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b50:	4b34      	ldr	r3, [pc, #208]	@ (8000c24 <MX_TIM4_Init+0x110>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8000b56:	4b33      	ldr	r3, [pc, #204]	@ (8000c24 <MX_TIM4_Init+0x110>)
 8000b58:	22ff      	movs	r2, #255	@ 0xff
 8000b5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5c:	4b31      	ldr	r3, [pc, #196]	@ (8000c24 <MX_TIM4_Init+0x110>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b62:	4b30      	ldr	r3, [pc, #192]	@ (8000c24 <MX_TIM4_Init+0x110>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b68:	482e      	ldr	r0, [pc, #184]	@ (8000c24 <MX_TIM4_Init+0x110>)
 8000b6a:	f004 fe21 	bl	80057b0 <HAL_TIM_Base_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000b74:	f000 f9e9 	bl	8000f4a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b82:	4619      	mov	r1, r3
 8000b84:	4827      	ldr	r0, [pc, #156]	@ (8000c24 <MX_TIM4_Init+0x110>)
 8000b86:	f005 f9a7 	bl	8005ed8 <HAL_TIM_ConfigClockSource>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000b90:	f000 f9db 	bl	8000f4a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b94:	4823      	ldr	r0, [pc, #140]	@ (8000c24 <MX_TIM4_Init+0x110>)
 8000b96:	f004 fecb 	bl	8005930 <HAL_TIM_PWM_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000ba0:	f000 f9d3 	bl	8000f4a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bac:	f107 0320 	add.w	r3, r7, #32
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481c      	ldr	r0, [pc, #112]	@ (8000c24 <MX_TIM4_Init+0x110>)
 8000bb4:	f005 fd9c 	bl	80066f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000bbe:	f000 f9c4 	bl	8000f4a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc2:	2360      	movs	r3, #96	@ 0x60
 8000bc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4812      	ldr	r0, [pc, #72]	@ (8000c24 <MX_TIM4_Init+0x110>)
 8000bda:	f005 f8bb 	bl	8005d54 <HAL_TIM_PWM_ConfigChannel>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000be4:	f000 f9b1 	bl	8000f4a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2208      	movs	r2, #8
 8000bec:	4619      	mov	r1, r3
 8000bee:	480d      	ldr	r0, [pc, #52]	@ (8000c24 <MX_TIM4_Init+0x110>)
 8000bf0:	f005 f8b0 	bl	8005d54 <HAL_TIM_PWM_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000bfa:	f000 f9a6 	bl	8000f4a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	220c      	movs	r2, #12
 8000c02:	4619      	mov	r1, r3
 8000c04:	4807      	ldr	r0, [pc, #28]	@ (8000c24 <MX_TIM4_Init+0x110>)
 8000c06:	f005 f8a5 	bl	8005d54 <HAL_TIM_PWM_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8000c10:	f000 f99b 	bl	8000f4a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c14:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <MX_TIM4_Init+0x110>)
 8000c16:	f000 fd0b 	bl	8001630 <HAL_TIM_MspPostInit>

}
 8000c1a:	bf00      	nop
 8000c1c:	3738      	adds	r7, #56	@ 0x38
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000428 	.word	0x20000428
 8000c28:	40000800 	.word	0x40000800

08000c2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	@ (8000c7c <MX_USART1_UART_Init+0x50>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c64:	f005 fdd4 	bl	8006810 <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c6e:	f000 f96c 	bl	8000f4a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000470 	.word	0x20000470
 8000c7c:	40011000 	.word	0x40011000

08000c80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c84:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	@ (8000cd0 <MX_USART2_UART_Init+0x50>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cb8:	f005 fdaa 	bl	8006810 <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cc2:	f000 f942 	bl	8000f4a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200004b8 	.word	0x200004b8
 8000cd0:	40004400 	.word	0x40004400

08000cd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_USART3_UART_Init+0x4c>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	@ (8000d24 <MX_USART3_UART_Init+0x50>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <MX_USART3_UART_Init+0x4c>)
 8000ce0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_USART3_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_USART3_UART_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <MX_USART3_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_USART3_UART_Init+0x4c>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <MX_USART3_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_USART3_UART_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_USART3_UART_Init+0x4c>)
 8000d0c:	f005 fd80 	bl	8006810 <HAL_UART_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d16:	f000 f918 	bl	8000f4a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000500 	.word	0x20000500
 8000d24:	40004800 	.word	0x40004800

08000d28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <MX_DMA_Init+0x5c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a13      	ldr	r2, [pc, #76]	@ (8000d84 <MX_DMA_Init+0x5c>)
 8000d38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_DMA_Init+0x5c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	200c      	movs	r0, #12
 8000d50:	f001 f8a4 	bl	8001e9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d54:	200c      	movs	r0, #12
 8000d56:	f001 f8bd 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	200d      	movs	r0, #13
 8000d60:	f001 f89c 	bl	8001e9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d64:	200d      	movs	r0, #13
 8000d66:	f001 f8b5 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2010      	movs	r0, #16
 8000d70:	f001 f894 	bl	8001e9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d74:	2010      	movs	r0, #16
 8000d76:	f001 f8ad 	bl	8001ed4 <HAL_NVIC_EnableIRQ>

}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	@ 0x30
 8000d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
 8000da2:	4b5e      	ldr	r3, [pc, #376]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a5d      	ldr	r2, [pc, #372]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b5b      	ldr	r3, [pc, #364]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	61bb      	str	r3, [r7, #24]
 8000db8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	4b57      	ldr	r3, [pc, #348]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a56      	ldr	r2, [pc, #344]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b54      	ldr	r3, [pc, #336]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b50      	ldr	r3, [pc, #320]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a4f      	ldr	r2, [pc, #316]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b4d      	ldr	r3, [pc, #308]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b49      	ldr	r3, [pc, #292]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a48      	ldr	r2, [pc, #288]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b46      	ldr	r3, [pc, #280]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	4b42      	ldr	r3, [pc, #264]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a41      	ldr	r2, [pc, #260]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a3a      	ldr	r2, [pc, #232]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000e34:	f043 0310 	orr.w	r3, r3, #16
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b38      	ldr	r3, [pc, #224]	@ (8000f1c <MX_GPIO_Init+0x194>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4835      	ldr	r0, [pc, #212]	@ (8000f20 <MX_GPIO_Init+0x198>)
 8000e4c:	f001 fdee 	bl	8002a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_CS_Pin|GPIO_PIN_0|Audio_RST_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	f240 4111 	movw	r1, #1041	@ 0x411
 8000e56:	4833      	ldr	r0, [pc, #204]	@ (8000f24 <MX_GPIO_Init+0x19c>)
 8000e58:	f001 fde8 	bl	8002a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RelayController_GPIO_Port, RelayController_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2140      	movs	r1, #64	@ 0x40
 8000e60:	482f      	ldr	r0, [pc, #188]	@ (8000f20 <MX_GPIO_Init+0x198>)
 8000e62:	f001 fde3 	bl	8002a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin RelayController_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|RelayController_Pin;
 8000e66:	2341      	movs	r3, #65	@ 0x41
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4828      	ldr	r0, [pc, #160]	@ (8000f20 <MX_GPIO_Init+0x198>)
 8000e7e:	f001 fc39 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e82:	2308      	movs	r3, #8
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e92:	2305      	movs	r3, #5
 8000e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4820      	ldr	r0, [pc, #128]	@ (8000f20 <MX_GPIO_Init+0x198>)
 8000e9e:	f001 fc29 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin PD0 Audio_RST_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|GPIO_PIN_0|Audio_RST_Pin;
 8000ea2:	f240 4311 	movw	r3, #1041	@ 0x411
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	481a      	ldr	r0, [pc, #104]	@ (8000f24 <MX_GPIO_Init+0x19c>)
 8000ebc:	f001 fc1a 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ec0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4814      	ldr	r0, [pc, #80]	@ (8000f28 <MX_GPIO_Init+0x1a0>)
 8000ed6:	f001 fc0d 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin;
 8000eda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000eec:	230a      	movs	r3, #10
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480c      	ldr	r0, [pc, #48]	@ (8000f28 <MX_GPIO_Init+0x1a0>)
 8000ef8:	f001 fbfc 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000efc:	2320      	movs	r3, #32
 8000efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <MX_GPIO_Init+0x19c>)
 8000f10:	f001 fbf0 	bl	80026f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f14:	bf00      	nop
 8000f16:	3730      	adds	r7, #48	@ 0x30
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020800 	.word	0x40020800
 8000f24:	40020c00 	.word	0x40020c00
 8000f28:	40020000 	.word	0x40020000

08000f2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f3c:	d101      	bne.n	8000f42 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f3e:	f000 feb1 	bl	8001ca4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4e:	b672      	cpsid	i
}
 8000f50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f52:	bf00      	nop
 8000f54:	e7fd      	b.n	8000f52 <Error_Handler+0x8>
	...

08000f58 <MsgHandler_Init>:
SemaphoreHandle_t msgHandlerRx;
SemaphoreHandle_t ReceiveMsgTimeoutMutex;
int ReceiveMsgTimeout = 10;

void MsgHandler_Init(UART_HandleTypeDef* shell_huart)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	msgHandler_shell_huart = shell_huart;
 8000f60:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <MsgHandler_Init+0x1c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200005a8 	.word	0x200005a8

08000f78 <MsgHandler_OS_Resources_Init>:

void MsgHandler_OS_Resources_Init()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	msgHandlerTx = xSemaphoreCreateMutex();
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f007 ff11 	bl	8008da4 <xQueueCreateMutex>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a07      	ldr	r2, [pc, #28]	@ (8000fa4 <MsgHandler_OS_Resources_Init+0x2c>)
 8000f86:	6013      	str	r3, [r2, #0]
	msgHandlerRx = xSemaphoreCreateMutex();
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f007 ff0b 	bl	8008da4 <xQueueCreateMutex>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a05      	ldr	r2, [pc, #20]	@ (8000fa8 <MsgHandler_OS_Resources_Init+0x30>)
 8000f92:	6013      	str	r3, [r2, #0]
	ReceiveMsgTimeoutMutex = xSemaphoreCreateMutex();
 8000f94:	2001      	movs	r0, #1
 8000f96:	f007 ff05 	bl	8008da4 <xQueueCreateMutex>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a03      	ldr	r2, [pc, #12]	@ (8000fac <MsgHandler_OS_Resources_Init+0x34>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200005ac 	.word	0x200005ac
 8000fa8:	200005b0 	.word	0x200005b0
 8000fac:	200005b4 	.word	0x200005b4

08000fb0 <SendChar>:

void SendChar(UART_HandleTypeDef* huart, const char c)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	70fb      	strb	r3, [r7, #3]
	SendMsg(huart, "%c", c);
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4903      	ldr	r1, [pc, #12]	@ (8000fd0 <SendChar+0x20>)
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f806 	bl	8000fd4 <SendMsg>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	08012094 	.word	0x08012094

08000fd4 <SendMsg>:

void SendMsg(UART_HandleTypeDef* huart, const char* fmt, ...)
{
 8000fd4:	b40e      	push	{r1, r2, r3}
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b085      	sub	sp, #20
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
	if(msgHandlerTx){
 8000fde:	4b23      	ldr	r3, [pc, #140]	@ (800106c <SendMsg+0x98>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d026      	beq.n	8001034 <SendMsg+0x60>
		if (xSemaphoreTake(msgHandlerTx, portMAX_DELAY) == pdPASS) {
 8000fe6:	4b21      	ldr	r3, [pc, #132]	@ (800106c <SendMsg+0x98>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f04f 31ff 	mov.w	r1, #4294967295
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f008 f970 	bl	80092d4 <xQueueSemaphoreTake>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d131      	bne.n	800105e <SendMsg+0x8a>
			static char send_data[256];
			va_list args;
			va_start(args, fmt);
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	60fb      	str	r3, [r7, #12]
			vsnprintf(send_data, sizeof(send_data), fmt, args);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001008:	4819      	ldr	r0, [pc, #100]	@ (8001070 <SendMsg+0x9c>)
 800100a:	f00f fac7 	bl	801059c <vsniprintf>
			va_end(args);
			HAL_UART_Transmit(huart, (uint8_t *)send_data, strlen(send_data), HAL_MAX_DELAY);
 800100e:	4818      	ldr	r0, [pc, #96]	@ (8001070 <SendMsg+0x9c>)
 8001010:	f7ff f8e8 	bl	80001e4 <strlen>
 8001014:	4603      	mov	r3, r0
 8001016:	b29a      	uxth	r2, r3
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	4914      	ldr	r1, [pc, #80]	@ (8001070 <SendMsg+0x9c>)
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f005 fc46 	bl	80068b0 <HAL_UART_Transmit>

			xSemaphoreGive(msgHandlerTx);
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <SendMsg+0x98>)
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	2300      	movs	r3, #0
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	f007 fed1 	bl	8008dd4 <xQueueGenericSend>
		vsnprintf(send_data, sizeof(send_data), fmt, args);
		va_end(args);
		HAL_UART_Transmit(huart, (uint8_t *)send_data, strlen(send_data), HAL_MAX_DELAY);

	}
}
 8001032:	e014      	b.n	800105e <SendMsg+0x8a>
		va_start(args, fmt);
 8001034:	f107 0320 	add.w	r3, r7, #32
 8001038:	60bb      	str	r3, [r7, #8]
		vsnprintf(send_data, sizeof(send_data), fmt, args);
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	69fa      	ldr	r2, [r7, #28]
 800103e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001042:	480c      	ldr	r0, [pc, #48]	@ (8001074 <SendMsg+0xa0>)
 8001044:	f00f faaa 	bl	801059c <vsniprintf>
		HAL_UART_Transmit(huart, (uint8_t *)send_data, strlen(send_data), HAL_MAX_DELAY);
 8001048:	480a      	ldr	r0, [pc, #40]	@ (8001074 <SendMsg+0xa0>)
 800104a:	f7ff f8cb 	bl	80001e4 <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	b29a      	uxth	r2, r3
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	4907      	ldr	r1, [pc, #28]	@ (8001074 <SendMsg+0xa0>)
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f005 fc29 	bl	80068b0 <HAL_UART_Transmit>
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001068:	b003      	add	sp, #12
 800106a:	4770      	bx	lr
 800106c:	200005ac 	.word	0x200005ac
 8001070:	200005b8 	.word	0x200005b8
 8001074:	200006b8 	.word	0x200006b8

08001078 <ReceiveChar>:

int ReceiveChar(UART_HandleTypeDef* huart, char* receive_data)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
	if (xSemaphoreTake(msgHandlerRx, portMAX_DELAY) == pdPASS) {
 8001082:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <ReceiveChar+0x5c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f04f 31ff 	mov.w	r1, #4294967295
 800108a:	4618      	mov	r0, r3
 800108c:	f008 f922 	bl	80092d4 <xQueueSemaphoreTake>
 8001090:	4603      	mov	r3, r0
 8001092:	2b01      	cmp	r3, #1
 8001094:	d119      	bne.n	80010ca <ReceiveChar+0x52>
		if (HAL_UART_Receive(huart, (uint8_t *)receive_data, 1, 500) == HAL_OK) {
 8001096:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800109a:	2201      	movs	r2, #1
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f005 fc91 	bl	80069c6 <HAL_UART_Receive>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d108      	bne.n	80010bc <ReceiveChar+0x44>
			xSemaphoreGive(msgHandlerRx);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <ReceiveChar+0x5c>)
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	2300      	movs	r3, #0
 80010b0:	2200      	movs	r2, #0
 80010b2:	2100      	movs	r1, #0
 80010b4:	f007 fe8e 	bl	8008dd4 <xQueueGenericSend>
			return HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	e007      	b.n	80010cc <ReceiveChar+0x54>
		}
		xSemaphoreGive(msgHandlerRx);
 80010bc:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <ReceiveChar+0x5c>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	2300      	movs	r3, #0
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	f007 fe85 	bl	8008dd4 <xQueueGenericSend>
	}

	return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200005b0 	.word	0x200005b0

080010d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <HAL_MspInit+0x4c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001124 <HAL_MspInit+0x4c>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <HAL_MspInit+0x4c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <HAL_MspInit+0x4c>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001102:	4a08      	ldr	r2, [pc, #32]	@ (8001124 <HAL_MspInit+0x4c>)
 8001104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001108:	6413      	str	r3, [r2, #64]	@ 0x40
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_MspInit+0x4c>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800

08001128 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	@ 0x30
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a33      	ldr	r2, [pc, #204]	@ (8001214 <HAL_I2C_MspInit+0xec>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d12d      	bne.n	80011a6 <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	4b32      	ldr	r3, [pc, #200]	@ (8001218 <HAL_I2C_MspInit+0xf0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a31      	ldr	r2, [pc, #196]	@ (8001218 <HAL_I2C_MspInit+0xf0>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b2f      	ldr	r3, [pc, #188]	@ (8001218 <HAL_I2C_MspInit+0xf0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	61bb      	str	r3, [r7, #24]
 8001164:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001166:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116c:	2312      	movs	r3, #18
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001178:	2304      	movs	r3, #4
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4619      	mov	r1, r3
 8001182:	4826      	ldr	r0, [pc, #152]	@ (800121c <HAL_I2C_MspInit+0xf4>)
 8001184:	f001 fab6 	bl	80026f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <HAL_I2C_MspInit+0xf0>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	4a21      	ldr	r2, [pc, #132]	@ (8001218 <HAL_I2C_MspInit+0xf0>)
 8001192:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001196:	6413      	str	r3, [r2, #64]	@ 0x40
 8001198:	4b1f      	ldr	r3, [pc, #124]	@ (8001218 <HAL_I2C_MspInit+0xf0>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011a4:	e031      	b.n	800120a <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001220 <HAL_I2C_MspInit+0xf8>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d12c      	bne.n	800120a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <HAL_I2C_MspInit+0xf0>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b8:	4a17      	ldr	r2, [pc, #92]	@ (8001218 <HAL_I2C_MspInit+0xf0>)
 80011ba:	f043 0302 	orr.w	r3, r3, #2
 80011be:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <HAL_I2C_MspInit+0xf0>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011cc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d2:	2312      	movs	r3, #18
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011de:	2304      	movs	r3, #4
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	480c      	ldr	r0, [pc, #48]	@ (800121c <HAL_I2C_MspInit+0xf4>)
 80011ea:	f001 fa83 	bl	80026f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <HAL_I2C_MspInit+0xf0>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	4a08      	ldr	r2, [pc, #32]	@ (8001218 <HAL_I2C_MspInit+0xf0>)
 80011f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_I2C_MspInit+0xf0>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
}
 800120a:	bf00      	nop
 800120c:	3730      	adds	r7, #48	@ 0x30
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40005400 	.word	0x40005400
 8001218:	40023800 	.word	0x40023800
 800121c:	40020400 	.word	0x40020400
 8001220:	40005800 	.word	0x40005800

08001224 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	@ 0x38
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a68      	ldr	r2, [pc, #416]	@ (80013f0 <HAL_I2S_MspInit+0x1cc>)
 8001250:	4293      	cmp	r3, r2
 8001252:	f040 80c8 	bne.w	80013e6 <HAL_I2S_MspInit+0x1c2>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001256:	2301      	movs	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800125a:	23c0      	movs	r3, #192	@ 0xc0
 800125c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800125e:	2302      	movs	r3, #2
 8001260:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4618      	mov	r0, r3
 8001268:	f003 fa02 	bl	8004670 <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001272:	f7ff fe6a 	bl	8000f4a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b5e      	ldr	r3, [pc, #376]	@ (80013f4 <HAL_I2S_MspInit+0x1d0>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	4a5d      	ldr	r2, [pc, #372]	@ (80013f4 <HAL_I2S_MspInit+0x1d0>)
 8001280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001284:	6413      	str	r3, [r2, #64]	@ 0x40
 8001286:	4b5b      	ldr	r3, [pc, #364]	@ (80013f4 <HAL_I2S_MspInit+0x1d0>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b57      	ldr	r3, [pc, #348]	@ (80013f4 <HAL_I2S_MspInit+0x1d0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a56      	ldr	r2, [pc, #344]	@ (80013f4 <HAL_I2S_MspInit+0x1d0>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b54      	ldr	r3, [pc, #336]	@ (80013f4 <HAL_I2S_MspInit+0x1d0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b50      	ldr	r3, [pc, #320]	@ (80013f4 <HAL_I2S_MspInit+0x1d0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a4f      	ldr	r2, [pc, #316]	@ (80013f4 <HAL_I2S_MspInit+0x1d0>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b4d      	ldr	r3, [pc, #308]	@ (80013f4 <HAL_I2S_MspInit+0x1d0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|I2S3_SD_Pin;
 80012ca:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012dc:	2306      	movs	r3, #6
 80012de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	4844      	ldr	r0, [pc, #272]	@ (80013f8 <HAL_I2S_MspInit+0x1d4>)
 80012e8:	f001 fa04 	bl	80026f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80012ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012fe:	2306      	movs	r3, #6
 8001300:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001306:	4619      	mov	r1, r3
 8001308:	483c      	ldr	r0, [pc, #240]	@ (80013fc <HAL_I2S_MspInit+0x1d8>)
 800130a:	f001 f9f3 	bl	80026f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800130e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8001320:	2305      	movs	r3, #5
 8001322:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001324:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001328:	4619      	mov	r1, r3
 800132a:	4833      	ldr	r0, [pc, #204]	@ (80013f8 <HAL_I2S_MspInit+0x1d4>)
 800132c:	f001 f9e2 	bl	80026f4 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001330:	4b33      	ldr	r3, [pc, #204]	@ (8001400 <HAL_I2S_MspInit+0x1dc>)
 8001332:	4a34      	ldr	r2, [pc, #208]	@ (8001404 <HAL_I2S_MspInit+0x1e0>)
 8001334:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001336:	4b32      	ldr	r3, [pc, #200]	@ (8001400 <HAL_I2S_MspInit+0x1dc>)
 8001338:	2200      	movs	r2, #0
 800133a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800133c:	4b30      	ldr	r3, [pc, #192]	@ (8001400 <HAL_I2S_MspInit+0x1dc>)
 800133e:	2240      	movs	r2, #64	@ 0x40
 8001340:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001342:	4b2f      	ldr	r3, [pc, #188]	@ (8001400 <HAL_I2S_MspInit+0x1dc>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001348:	4b2d      	ldr	r3, [pc, #180]	@ (8001400 <HAL_I2S_MspInit+0x1dc>)
 800134a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800134e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001350:	4b2b      	ldr	r3, [pc, #172]	@ (8001400 <HAL_I2S_MspInit+0x1dc>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001356:	4b2a      	ldr	r3, [pc, #168]	@ (8001400 <HAL_I2S_MspInit+0x1dc>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800135c:	4b28      	ldr	r3, [pc, #160]	@ (8001400 <HAL_I2S_MspInit+0x1dc>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001362:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <HAL_I2S_MspInit+0x1dc>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001368:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <HAL_I2S_MspInit+0x1dc>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800136e:	4824      	ldr	r0, [pc, #144]	@ (8001400 <HAL_I2S_MspInit+0x1dc>)
 8001370:	f000 fdbe 	bl	8001ef0 <HAL_DMA_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_I2S_MspInit+0x15a>
    {
      Error_Handler();
 800137a:	f7ff fde6 	bl	8000f4a <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a1f      	ldr	r2, [pc, #124]	@ (8001400 <HAL_I2S_MspInit+0x1dc>)
 8001382:	639a      	str	r2, [r3, #56]	@ 0x38
 8001384:	4a1e      	ldr	r2, [pc, #120]	@ (8001400 <HAL_I2S_MspInit+0x1dc>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream2;
 800138a:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <HAL_I2S_MspInit+0x1e4>)
 800138c:	4a1f      	ldr	r2, [pc, #124]	@ (800140c <HAL_I2S_MspInit+0x1e8>)
 800138e:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_2;
 8001390:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <HAL_I2S_MspInit+0x1e4>)
 8001392:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001396:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001398:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <HAL_I2S_MspInit+0x1e4>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <HAL_I2S_MspInit+0x1e4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013a4:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <HAL_I2S_MspInit+0x1e4>)
 80013a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013aa:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ac:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <HAL_I2S_MspInit+0x1e4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <HAL_I2S_MspInit+0x1e4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_NORMAL;
 80013b8:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <HAL_I2S_MspInit+0x1e4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013be:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <HAL_I2S_MspInit+0x1e4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013c4:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <HAL_I2S_MspInit+0x1e4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 80013ca:	480f      	ldr	r0, [pc, #60]	@ (8001408 <HAL_I2S_MspInit+0x1e4>)
 80013cc:	f000 fd90 	bl	8001ef0 <HAL_DMA_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_I2S_MspInit+0x1b6>
    {
      Error_Handler();
 80013d6:	f7ff fdb8 	bl	8000f4a <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s3_ext_rx);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <HAL_I2S_MspInit+0x1e4>)
 80013de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013e0:	4a09      	ldr	r2, [pc, #36]	@ (8001408 <HAL_I2S_MspInit+0x1e4>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80013e6:	bf00      	nop
 80013e8:	3738      	adds	r7, #56	@ 0x38
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40003c00 	.word	0x40003c00
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020000 	.word	0x40020000
 8001400:	20000298 	.word	0x20000298
 8001404:	40026088 	.word	0x40026088
 8001408:	200002f8 	.word	0x200002f8
 800140c:	40026040 	.word	0x40026040

08001410 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001418:	f107 0308 	add.w	r3, r7, #8
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a0c      	ldr	r2, [pc, #48]	@ (800145c <HAL_RTC_MspInit+0x4c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d111      	bne.n	8001454 <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001430:	2302      	movs	r3, #2
 8001432:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001434:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001438:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	4618      	mov	r0, r3
 8001440:	f003 f916 	bl	8004670 <HAL_RCCEx_PeriphCLKConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800144a:	f7ff fd7e 	bl	8000f4a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800144e:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <HAL_RTC_MspInit+0x50>)
 8001450:	2201      	movs	r2, #1
 8001452:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40002800 	.word	0x40002800
 8001460:	42470e3c 	.word	0x42470e3c

08001464 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	@ 0x30
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a32      	ldr	r2, [pc, #200]	@ (800154c <HAL_SPI_MspInit+0xe8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d12c      	bne.n	80014e0 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	4b31      	ldr	r3, [pc, #196]	@ (8001550 <HAL_SPI_MspInit+0xec>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	4a30      	ldr	r2, [pc, #192]	@ (8001550 <HAL_SPI_MspInit+0xec>)
 8001490:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001494:	6453      	str	r3, [r2, #68]	@ 0x44
 8001496:	4b2e      	ldr	r3, [pc, #184]	@ (8001550 <HAL_SPI_MspInit+0xec>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001550 <HAL_SPI_MspInit+0xec>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a29      	ldr	r2, [pc, #164]	@ (8001550 <HAL_SPI_MspInit+0xec>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b27      	ldr	r3, [pc, #156]	@ (8001550 <HAL_SPI_MspInit+0xec>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014be:	23e0      	movs	r3, #224	@ 0xe0
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ce:	2305      	movs	r3, #5
 80014d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	481e      	ldr	r0, [pc, #120]	@ (8001554 <HAL_SPI_MspInit+0xf0>)
 80014da:	f001 f90b 	bl	80026f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014de:	e031      	b.n	8001544 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001558 <HAL_SPI_MspInit+0xf4>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12c      	bne.n	8001544 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <HAL_SPI_MspInit+0xec>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	4a17      	ldr	r2, [pc, #92]	@ (8001550 <HAL_SPI_MspInit+0xec>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <HAL_SPI_MspInit+0xec>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <HAL_SPI_MspInit+0xec>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a10      	ldr	r2, [pc, #64]	@ (8001550 <HAL_SPI_MspInit+0xec>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <HAL_SPI_MspInit+0xec>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001522:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001534:	2305      	movs	r3, #5
 8001536:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	4807      	ldr	r0, [pc, #28]	@ (800155c <HAL_SPI_MspInit+0xf8>)
 8001540:	f001 f8d8 	bl	80026f4 <HAL_GPIO_Init>
}
 8001544:	bf00      	nop
 8001546:	3730      	adds	r7, #48	@ 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40013000 	.word	0x40013000
 8001550:	40023800 	.word	0x40023800
 8001554:	40020000 	.word	0x40020000
 8001558:	40003800 	.word	0x40003800
 800155c:	40020400 	.word	0x40020400

08001560 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a28      	ldr	r2, [pc, #160]	@ (8001620 <HAL_TIM_Base_MspInit+0xc0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d14a      	bne.n	8001618 <HAL_TIM_Base_MspInit+0xb8>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	4b27      	ldr	r3, [pc, #156]	@ (8001624 <HAL_TIM_Base_MspInit+0xc4>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	4a26      	ldr	r2, [pc, #152]	@ (8001624 <HAL_TIM_Base_MspInit+0xc4>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6413      	str	r3, [r2, #64]	@ 0x40
 8001592:	4b24      	ldr	r3, [pc, #144]	@ (8001624 <HAL_TIM_Base_MspInit+0xc4>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <HAL_TIM_Base_MspInit+0xc4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001624 <HAL_TIM_Base_MspInit+0xc4>)
 80015a8:	f043 0308 	orr.w	r3, r3, #8
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001624 <HAL_TIM_Base_MspInit+0xc4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <HAL_TIM_Base_MspInit+0xc4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	4a18      	ldr	r2, [pc, #96]	@ (8001624 <HAL_TIM_Base_MspInit+0xc4>)
 80015c4:	f043 0310 	orr.w	r3, r3, #16
 80015c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ca:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <HAL_TIM_Base_MspInit+0xc4>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	f003 0310 	and.w	r3, r3, #16
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015e8:	2302      	movs	r3, #2
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	480d      	ldr	r0, [pc, #52]	@ (8001628 <HAL_TIM_Base_MspInit+0xc8>)
 80015f4:	f001 f87e 	bl	80026f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015f8:	2301      	movs	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001608:	2302      	movs	r3, #2
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4806      	ldr	r0, [pc, #24]	@ (800162c <HAL_TIM_Base_MspInit+0xcc>)
 8001614:	f001 f86e 	bl	80026f4 <HAL_GPIO_Init>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	@ 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40000800 	.word	0x40000800
 8001624:	40023800 	.word	0x40023800
 8001628:	40020c00 	.word	0x40020c00
 800162c:	40021000 	.word	0x40021000

08001630 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a12      	ldr	r2, [pc, #72]	@ (8001698 <HAL_TIM_MspPostInit+0x68>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d11e      	bne.n	8001690 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	4b11      	ldr	r3, [pc, #68]	@ (800169c <HAL_TIM_MspPostInit+0x6c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a10      	ldr	r2, [pc, #64]	@ (800169c <HAL_TIM_MspPostInit+0x6c>)
 800165c:	f043 0308 	orr.w	r3, r3, #8
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <HAL_TIM_MspPostInit+0x6c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800166e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001672:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001680:	2302      	movs	r3, #2
 8001682:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	4619      	mov	r1, r3
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <HAL_TIM_MspPostInit+0x70>)
 800168c:	f001 f832 	bl	80026f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001690:	bf00      	nop
 8001692:	3720      	adds	r7, #32
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40000800 	.word	0x40000800
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020c00 	.word	0x40020c00

080016a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08e      	sub	sp, #56	@ 0x38
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a66      	ldr	r2, [pc, #408]	@ (800185c <HAL_UART_MspInit+0x1b8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d12c      	bne.n	8001720 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
 80016ca:	4b65      	ldr	r3, [pc, #404]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	4a64      	ldr	r2, [pc, #400]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 80016d0:	f043 0310 	orr.w	r3, r3, #16
 80016d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016d6:	4b62      	ldr	r3, [pc, #392]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	623b      	str	r3, [r7, #32]
 80016e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a5d      	ldr	r2, [pc, #372]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	61fb      	str	r3, [r7, #28]
 80016fc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016fe:	23c0      	movs	r3, #192	@ 0xc0
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800170e:	2307      	movs	r3, #7
 8001710:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001716:	4619      	mov	r1, r3
 8001718:	4852      	ldr	r0, [pc, #328]	@ (8001864 <HAL_UART_MspInit+0x1c0>)
 800171a:	f000 ffeb 	bl	80026f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800171e:	e099      	b.n	8001854 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a50      	ldr	r2, [pc, #320]	@ (8001868 <HAL_UART_MspInit+0x1c4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d12c      	bne.n	8001784 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
 800172e:	4b4c      	ldr	r3, [pc, #304]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	4a4b      	ldr	r2, [pc, #300]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 8001734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001738:	6413      	str	r3, [r2, #64]	@ 0x40
 800173a:	4b49      	ldr	r3, [pc, #292]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	4b45      	ldr	r3, [pc, #276]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a44      	ldr	r2, [pc, #272]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b42      	ldr	r3, [pc, #264]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001762:	230c      	movs	r3, #12
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176e:	2303      	movs	r3, #3
 8001770:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001772:	2307      	movs	r3, #7
 8001774:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800177a:	4619      	mov	r1, r3
 800177c:	483b      	ldr	r0, [pc, #236]	@ (800186c <HAL_UART_MspInit+0x1c8>)
 800177e:	f000 ffb9 	bl	80026f4 <HAL_GPIO_Init>
}
 8001782:	e067      	b.n	8001854 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a39      	ldr	r2, [pc, #228]	@ (8001870 <HAL_UART_MspInit+0x1cc>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d162      	bne.n	8001854 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b33      	ldr	r3, [pc, #204]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	4a32      	ldr	r2, [pc, #200]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 8001798:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800179c:	6413      	str	r3, [r2, #64]	@ 0x40
 800179e:	4b30      	ldr	r3, [pc, #192]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a2b      	ldr	r2, [pc, #172]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 80017b4:	f043 0308 	orr.w	r3, r3, #8
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b29      	ldr	r3, [pc, #164]	@ (8001860 <HAL_UART_MspInit+0x1bc>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017d8:	2307      	movs	r3, #7
 80017da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e0:	4619      	mov	r1, r3
 80017e2:	4824      	ldr	r0, [pc, #144]	@ (8001874 <HAL_UART_MspInit+0x1d0>)
 80017e4:	f000 ff86 	bl	80026f4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80017e8:	4b23      	ldr	r3, [pc, #140]	@ (8001878 <HAL_UART_MspInit+0x1d4>)
 80017ea:	4a24      	ldr	r2, [pc, #144]	@ (800187c <HAL_UART_MspInit+0x1d8>)
 80017ec:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80017ee:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <HAL_UART_MspInit+0x1d4>)
 80017f0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017f4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017f6:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <HAL_UART_MspInit+0x1d4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <HAL_UART_MspInit+0x1d4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001802:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <HAL_UART_MspInit+0x1d4>)
 8001804:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001808:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800180a:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <HAL_UART_MspInit+0x1d4>)
 800180c:	2200      	movs	r2, #0
 800180e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001810:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <HAL_UART_MspInit+0x1d4>)
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001816:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <HAL_UART_MspInit+0x1d4>)
 8001818:	2200      	movs	r2, #0
 800181a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800181c:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <HAL_UART_MspInit+0x1d4>)
 800181e:	2200      	movs	r2, #0
 8001820:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <HAL_UART_MspInit+0x1d4>)
 8001824:	2200      	movs	r2, #0
 8001826:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001828:	4813      	ldr	r0, [pc, #76]	@ (8001878 <HAL_UART_MspInit+0x1d4>)
 800182a:	f000 fb61 	bl	8001ef0 <HAL_DMA_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_UART_MspInit+0x194>
      Error_Handler();
 8001834:	f7ff fb89 	bl	8000f4a <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a0f      	ldr	r2, [pc, #60]	@ (8001878 <HAL_UART_MspInit+0x1d4>)
 800183c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800183e:	4a0e      	ldr	r2, [pc, #56]	@ (8001878 <HAL_UART_MspInit+0x1d4>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	210f      	movs	r1, #15
 8001848:	2027      	movs	r0, #39	@ 0x27
 800184a:	f000 fb27 	bl	8001e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800184e:	2027      	movs	r0, #39	@ 0x27
 8001850:	f000 fb40 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
}
 8001854:	bf00      	nop
 8001856:	3738      	adds	r7, #56	@ 0x38
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40011000 	.word	0x40011000
 8001860:	40023800 	.word	0x40023800
 8001864:	40020400 	.word	0x40020400
 8001868:	40004400 	.word	0x40004400
 800186c:	40020000 	.word	0x40020000
 8001870:	40004800 	.word	0x40004800
 8001874:	40020c00 	.word	0x40020c00
 8001878:	20000548 	.word	0x20000548
 800187c:	40026028 	.word	0x40026028

08001880 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08e      	sub	sp, #56	@ 0x38
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	4b34      	ldr	r3, [pc, #208]	@ (8001968 <HAL_InitTick+0xe8>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	4a33      	ldr	r2, [pc, #204]	@ (8001968 <HAL_InitTick+0xe8>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a0:	4b31      	ldr	r3, [pc, #196]	@ (8001968 <HAL_InitTick+0xe8>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018ac:	f107 0210 	add.w	r2, r7, #16
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 fea8 	bl	800460c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d103      	bne.n	80018ce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018c6:	f002 fe79 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 80018ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80018cc:	e004      	b.n	80018d8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018ce:	f002 fe75 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 80018d2:	4603      	mov	r3, r0
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018da:	4a24      	ldr	r2, [pc, #144]	@ (800196c <HAL_InitTick+0xec>)
 80018dc:	fba2 2303 	umull	r2, r3, r2, r3
 80018e0:	0c9b      	lsrs	r3, r3, #18
 80018e2:	3b01      	subs	r3, #1
 80018e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80018e6:	4b22      	ldr	r3, [pc, #136]	@ (8001970 <HAL_InitTick+0xf0>)
 80018e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018ec:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80018ee:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <HAL_InitTick+0xf0>)
 80018f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018f4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80018f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001970 <HAL_InitTick+0xf0>)
 80018f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fa:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80018fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <HAL_InitTick+0xf0>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001902:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <HAL_InitTick+0xf0>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001908:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <HAL_InitTick+0xf0>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800190e:	4818      	ldr	r0, [pc, #96]	@ (8001970 <HAL_InitTick+0xf0>)
 8001910:	f003 ff4e 	bl	80057b0 <HAL_TIM_Base_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800191a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800191e:	2b00      	cmp	r3, #0
 8001920:	d11b      	bne.n	800195a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001922:	4813      	ldr	r0, [pc, #76]	@ (8001970 <HAL_InitTick+0xf0>)
 8001924:	f003 ff94 	bl	8005850 <HAL_TIM_Base_Start_IT>
 8001928:	4603      	mov	r3, r0
 800192a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800192e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001932:	2b00      	cmp	r3, #0
 8001934:	d111      	bne.n	800195a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001936:	201c      	movs	r0, #28
 8001938:	f000 facc 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b0f      	cmp	r3, #15
 8001940:	d808      	bhi.n	8001954 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001942:	2200      	movs	r2, #0
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	201c      	movs	r0, #28
 8001948:	f000 faa8 	bl	8001e9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800194c:	4a09      	ldr	r2, [pc, #36]	@ (8001974 <HAL_InitTick+0xf4>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e002      	b.n	800195a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800195a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800195e:	4618      	mov	r0, r3
 8001960:	3738      	adds	r7, #56	@ 0x38
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	431bde83 	.word	0x431bde83
 8001970:	200007b8 	.word	0x200007b8
 8001974:	20000008 	.word	0x20000008

08001978 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM2 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* Disable TIM2 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_UPDATE);
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <HAL_SuspendTick+0x20>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <HAL_SuspendTick+0x20>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0201 	bic.w	r2, r2, #1
 800198a:	60da      	str	r2, [r3, #12]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	200007b8 	.word	0x200007b8

0800199c <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM2 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* Enable TIM2 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_ResumeTick+0x20>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <HAL_ResumeTick+0x20>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0201 	orr.w	r2, r2, #1
 80019ae:	60da      	str	r2, [r3, #12]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	200007b8 	.word	0x200007b8

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <NMI_Handler+0x4>

080019c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <HardFault_Handler+0x4>

080019d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <MemManage_Handler+0x4>

080019d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <BusFault_Handler+0x4>

080019e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <UsageFault_Handler+0x4>

080019e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80019fc:	4802      	ldr	r0, [pc, #8]	@ (8001a08 <DMA1_Stream1_IRQHandler+0x10>)
 80019fe:	f000 fc0f 	bl	8002220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000548 	.word	0x20000548

08001a0c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s3_ext_rx);
 8001a10:	4802      	ldr	r0, [pc, #8]	@ (8001a1c <DMA1_Stream2_IRQHandler+0x10>)
 8001a12:	f000 fc05 	bl	8002220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200002f8 	.word	0x200002f8

08001a20 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <DMA1_Stream5_IRQHandler+0x10>)
 8001a26:	f000 fbfb 	bl	8002220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000298 	.word	0x20000298

08001a34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a38:	4802      	ldr	r0, [pc, #8]	@ (8001a44 <TIM2_IRQHandler+0x10>)
 8001a3a:	f004 f89b 	bl	8005b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200007b8 	.word	0x200007b8

08001a48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <USART3_IRQHandler+0x10>)
 8001a4e:	f005 f8af 	bl	8006bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000500 	.word	0x20000500

08001a5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return 1;
 8001a60:	2301      	movs	r3, #1
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_kill>:

int _kill(int pid, int sig)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a76:	f00e fe83 	bl	8010780 <__errno>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2216      	movs	r2, #22
 8001a7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_exit>:

void _exit (int status)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ffe7 	bl	8001a6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a9e:	bf00      	nop
 8001aa0:	e7fd      	b.n	8001a9e <_exit+0x12>

08001aa2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e00a      	b.n	8001aca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	4601      	mov	r1, r0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	60ba      	str	r2, [r7, #8]
 8001ac0:	b2ca      	uxtb	r2, r1
 8001ac2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	dbf0      	blt.n	8001ab4 <_read+0x12>
  }

  return len;
 8001ad2:	687b      	ldr	r3, [r7, #4]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	e009      	b.n	8001b02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	60ba      	str	r2, [r7, #8]
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dbf1      	blt.n	8001aee <_write+0x12>
  }
  return len;
 8001b0a:	687b      	ldr	r3, [r7, #4]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_close>:

int _close(int file)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b3c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_isatty>:

int _isatty(int file)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b54:	2301      	movs	r3, #1
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b085      	sub	sp, #20
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b84:	4a14      	ldr	r2, [pc, #80]	@ (8001bd8 <_sbrk+0x5c>)
 8001b86:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <_sbrk+0x60>)
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b90:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d102      	bne.n	8001b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b98:	4b11      	ldr	r3, [pc, #68]	@ (8001be0 <_sbrk+0x64>)
 8001b9a:	4a12      	ldr	r2, [pc, #72]	@ (8001be4 <_sbrk+0x68>)
 8001b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9e:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d207      	bcs.n	8001bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bac:	f00e fde8 	bl	8010780 <__errno>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bba:	e009      	b.n	8001bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bbc:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc2:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	4a05      	ldr	r2, [pc, #20]	@ (8001be0 <_sbrk+0x64>)
 8001bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bce:	68fb      	ldr	r3, [r7, #12]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20020000 	.word	0x20020000
 8001bdc:	00000400 	.word	0x00000400
 8001be0:	20000800 	.word	0x20000800
 8001be4:	20014320 	.word	0x20014320

08001be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <SystemInit+0x20>)
 8001bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bf2:	4a05      	ldr	r2, [pc, #20]	@ (8001c08 <SystemInit+0x20>)
 8001bf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c10:	f7ff ffea 	bl	8001be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c14:	480c      	ldr	r0, [pc, #48]	@ (8001c48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c16:	490d      	ldr	r1, [pc, #52]	@ (8001c4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c18:	4a0d      	ldr	r2, [pc, #52]	@ (8001c50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c1c:	e002      	b.n	8001c24 <LoopCopyDataInit>

08001c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c22:	3304      	adds	r3, #4

08001c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c28:	d3f9      	bcc.n	8001c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c30:	e001      	b.n	8001c36 <LoopFillZerobss>

08001c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c34:	3204      	adds	r2, #4

08001c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c38:	d3fb      	bcc.n	8001c32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c3a:	f00e fda7 	bl	801078c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c3e:	f7fe fcc5 	bl	80005cc <main>
  bx  lr    
 8001c42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c4c:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8001c50:	08013030 	.word	0x08013030
  ldr r2, =_sbss
 8001c54:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8001c58:	2001431c 	.word	0x2001431c

08001c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c5c:	e7fe      	b.n	8001c5c <ADC_IRQHandler>
	...

08001c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca0 <HAL_Init+0x40>)
 8001c6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <HAL_Init+0x40>)
 8001c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <HAL_Init+0x40>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a07      	ldr	r2, [pc, #28]	@ (8001ca0 <HAL_Init+0x40>)
 8001c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c88:	2003      	movs	r0, #3
 8001c8a:	f000 f8fc 	bl	8001e86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8e:	200f      	movs	r0, #15
 8001c90:	f7ff fdf6 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c94:	f7ff fa20 	bl	80010d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023c00 	.word	0x40023c00

08001ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_IncTick+0x20>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <HAL_IncTick+0x24>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <HAL_IncTick+0x24>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	2000000c 	.word	0x2000000c
 8001cc8:	20000804 	.word	0x20000804

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	@ (8001ce0 <HAL_GetTick+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000804 	.word	0x20000804

08001ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff ffee 	bl	8001ccc <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d005      	beq.n	8001d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <HAL_Delay+0x44>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d0a:	bf00      	nop
 8001d0c:	f7ff ffde 	bl	8001ccc <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d8f7      	bhi.n	8001d0c <HAL_Delay+0x28>
  {
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000000c 	.word	0x2000000c

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	@ (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	@ (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db0b      	blt.n	8001dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4907      	ldr	r1, [pc, #28]	@ (8001dc8 <__NVIC_EnableIRQ+0x38>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2001      	movs	r0, #1
 8001db2:	fa00 f202 	lsl.w	r2, r0, r2
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000e100 	.word	0xe000e100

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	@ (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	@ (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	@ 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
         );
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	@ 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ff4c 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eae:	f7ff ff61 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001eb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	68b9      	ldr	r1, [r7, #8]
 8001eb8:	6978      	ldr	r0, [r7, #20]
 8001eba:	f7ff ffb1 	bl	8001e20 <NVIC_EncodePriority>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ff80 	bl	8001dcc <__NVIC_SetPriority>
}
 8001ecc:	bf00      	nop
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff54 	bl	8001d90 <__NVIC_EnableIRQ>
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001efc:	f7ff fee6 	bl	8001ccc <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e099      	b.n	8002040 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0201 	bic.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f2c:	e00f      	b.n	8001f4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f2e:	f7ff fecd 	bl	8001ccc <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b05      	cmp	r3, #5
 8001f3a:	d908      	bls.n	8001f4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2203      	movs	r2, #3
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e078      	b.n	8002040 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1e8      	bne.n	8001f2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	4b38      	ldr	r3, [pc, #224]	@ (8002048 <HAL_DMA_Init+0x158>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d107      	bne.n	8001fb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f023 0307 	bic.w	r3, r3, #7
 8001fce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d117      	bne.n	8002012 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00e      	beq.n	8002012 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fb01 	bl	80025fc <DMA_CheckFifoParam>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2240      	movs	r2, #64	@ 0x40
 8002004:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800200e:	2301      	movs	r3, #1
 8002010:	e016      	b.n	8002040 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fab8 	bl	8002590 <DMA_CalcBaseAndBitshift>
 8002020:	4603      	mov	r3, r0
 8002022:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002028:	223f      	movs	r2, #63	@ 0x3f
 800202a:	409a      	lsls	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	f010803f 	.word	0xf010803f

0800204c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002062:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_DMA_Start_IT+0x26>
 800206e:	2302      	movs	r3, #2
 8002070:	e040      	b.n	80020f4 <HAL_DMA_Start_IT+0xa8>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d12f      	bne.n	80020e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2202      	movs	r2, #2
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 fa4a 	bl	8002534 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a4:	223f      	movs	r2, #63	@ 0x3f
 80020a6:	409a      	lsls	r2, r3
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0216 	orr.w	r2, r2, #22
 80020ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0208 	orr.w	r2, r2, #8
 80020d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e005      	b.n	80020f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
 80020f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002108:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800210a:	f7ff fddf 	bl	8001ccc <HAL_GetTick>
 800210e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d008      	beq.n	800212e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2280      	movs	r2, #128	@ 0x80
 8002120:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e052      	b.n	80021d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0216 	bic.w	r2, r2, #22
 800213c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695a      	ldr	r2, [r3, #20]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800214c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	2b00      	cmp	r3, #0
 8002154:	d103      	bne.n	800215e <HAL_DMA_Abort+0x62>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215a:	2b00      	cmp	r3, #0
 800215c:	d007      	beq.n	800216e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0208 	bic.w	r2, r2, #8
 800216c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0201 	bic.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217e:	e013      	b.n	80021a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002180:	f7ff fda4 	bl	8001ccc <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b05      	cmp	r3, #5
 800218c:	d90c      	bls.n	80021a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2220      	movs	r2, #32
 8002192:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2203      	movs	r2, #3
 8002198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e015      	b.n	80021d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1e4      	bne.n	8002180 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ba:	223f      	movs	r2, #63	@ 0x3f
 80021bc:	409a      	lsls	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d004      	beq.n	80021fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2280      	movs	r2, #128	@ 0x80
 80021f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00c      	b.n	8002214 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2205      	movs	r2, #5
 80021fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0201 	bic.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800222c:	4b8e      	ldr	r3, [pc, #568]	@ (8002468 <HAL_DMA_IRQHandler+0x248>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a8e      	ldr	r2, [pc, #568]	@ (800246c <HAL_DMA_IRQHandler+0x24c>)
 8002232:	fba2 2303 	umull	r2, r3, r2, r3
 8002236:	0a9b      	lsrs	r3, r3, #10
 8002238:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224a:	2208      	movs	r2, #8
 800224c:	409a      	lsls	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d01a      	beq.n	800228c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d013      	beq.n	800228c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0204 	bic.w	r2, r2, #4
 8002272:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002278:	2208      	movs	r2, #8
 800227a:	409a      	lsls	r2, r3
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002284:	f043 0201 	orr.w	r2, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002290:	2201      	movs	r2, #1
 8002292:	409a      	lsls	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d012      	beq.n	80022c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00b      	beq.n	80022c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ae:	2201      	movs	r2, #1
 80022b0:	409a      	lsls	r2, r3
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ba:	f043 0202 	orr.w	r2, r3, #2
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c6:	2204      	movs	r2, #4
 80022c8:	409a      	lsls	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d012      	beq.n	80022f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00b      	beq.n	80022f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e4:	2204      	movs	r2, #4
 80022e6:	409a      	lsls	r2, r3
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f0:	f043 0204 	orr.w	r2, r3, #4
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fc:	2210      	movs	r2, #16
 80022fe:	409a      	lsls	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d043      	beq.n	8002390 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d03c      	beq.n	8002390 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231a:	2210      	movs	r2, #16
 800231c:	409a      	lsls	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d018      	beq.n	8002362 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d108      	bne.n	8002350 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d024      	beq.n	8002390 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	4798      	blx	r3
 800234e:	e01f      	b.n	8002390 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002354:	2b00      	cmp	r3, #0
 8002356:	d01b      	beq.n	8002390 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	4798      	blx	r3
 8002360:	e016      	b.n	8002390 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d107      	bne.n	8002380 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0208 	bic.w	r2, r2, #8
 800237e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002394:	2220      	movs	r2, #32
 8002396:	409a      	lsls	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4013      	ands	r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 808f 	beq.w	80024c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8087 	beq.w	80024c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b6:	2220      	movs	r2, #32
 80023b8:	409a      	lsls	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d136      	bne.n	8002438 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0216 	bic.w	r2, r2, #22
 80023d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695a      	ldr	r2, [r3, #20]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <HAL_DMA_IRQHandler+0x1da>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0208 	bic.w	r2, r2, #8
 8002408:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240e:	223f      	movs	r2, #63	@ 0x3f
 8002410:	409a      	lsls	r2, r3
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800242a:	2b00      	cmp	r3, #0
 800242c:	d07e      	beq.n	800252c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	4798      	blx	r3
        }
        return;
 8002436:	e079      	b.n	800252c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d01d      	beq.n	8002482 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10d      	bne.n	8002470 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002458:	2b00      	cmp	r3, #0
 800245a:	d031      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	4798      	blx	r3
 8002464:	e02c      	b.n	80024c0 <HAL_DMA_IRQHandler+0x2a0>
 8002466:	bf00      	nop
 8002468:	20000004 	.word	0x20000004
 800246c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d023      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4798      	blx	r3
 8002480:	e01e      	b.n	80024c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10f      	bne.n	80024b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0210 	bic.w	r2, r2, #16
 800249e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d032      	beq.n	800252e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d022      	beq.n	800251a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2205      	movs	r2, #5
 80024d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	3301      	adds	r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d307      	bcc.n	8002508 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f2      	bne.n	80024ec <HAL_DMA_IRQHandler+0x2cc>
 8002506:	e000      	b.n	800250a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002508:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
 800252a:	e000      	b.n	800252e <HAL_DMA_IRQHandler+0x30e>
        return;
 800252c:	bf00      	nop
    }
  }
}
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002550:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b40      	cmp	r3, #64	@ 0x40
 8002560:	d108      	bne.n	8002574 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002572:	e007      	b.n	8002584 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	60da      	str	r2, [r3, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	3b10      	subs	r3, #16
 80025a0:	4a14      	ldr	r2, [pc, #80]	@ (80025f4 <DMA_CalcBaseAndBitshift+0x64>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025aa:	4a13      	ldr	r2, [pc, #76]	@ (80025f8 <DMA_CalcBaseAndBitshift+0x68>)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d909      	bls.n	80025d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	1d1a      	adds	r2, r3, #4
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80025d0:	e007      	b.n	80025e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025da:	f023 0303 	bic.w	r3, r3, #3
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	aaaaaaab 	.word	0xaaaaaaab
 80025f8:	08012ccc 	.word	0x08012ccc

080025fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d11f      	bne.n	8002656 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d856      	bhi.n	80026ca <DMA_CheckFifoParam+0xce>
 800261c:	a201      	add	r2, pc, #4	@ (adr r2, 8002624 <DMA_CheckFifoParam+0x28>)
 800261e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002622:	bf00      	nop
 8002624:	08002635 	.word	0x08002635
 8002628:	08002647 	.word	0x08002647
 800262c:	08002635 	.word	0x08002635
 8002630:	080026cb 	.word	0x080026cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002638:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d046      	beq.n	80026ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002644:	e043      	b.n	80026ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800264e:	d140      	bne.n	80026d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002654:	e03d      	b.n	80026d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800265e:	d121      	bne.n	80026a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d837      	bhi.n	80026d6 <DMA_CheckFifoParam+0xda>
 8002666:	a201      	add	r2, pc, #4	@ (adr r2, 800266c <DMA_CheckFifoParam+0x70>)
 8002668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266c:	0800267d 	.word	0x0800267d
 8002670:	08002683 	.word	0x08002683
 8002674:	0800267d 	.word	0x0800267d
 8002678:	08002695 	.word	0x08002695
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      break;
 8002680:	e030      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002686:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d025      	beq.n	80026da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002692:	e022      	b.n	80026da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002698:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800269c:	d11f      	bne.n	80026de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026a2:	e01c      	b.n	80026de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d903      	bls.n	80026b2 <DMA_CheckFifoParam+0xb6>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d003      	beq.n	80026b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026b0:	e018      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
      break;
 80026b6:	e015      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00e      	beq.n	80026e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
      break;
 80026c8:	e00b      	b.n	80026e2 <DMA_CheckFifoParam+0xe6>
      break;
 80026ca:	bf00      	nop
 80026cc:	e00a      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
      break;
 80026ce:	bf00      	nop
 80026d0:	e008      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
      break;
 80026d2:	bf00      	nop
 80026d4:	e006      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
      break;
 80026d6:	bf00      	nop
 80026d8:	e004      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
      break;
 80026da:	bf00      	nop
 80026dc:	e002      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80026de:	bf00      	nop
 80026e0:	e000      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
      break;
 80026e2:	bf00      	nop
    }
  } 
  
  return status; 
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop

080026f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	@ 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	e16b      	b.n	80029e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002710:	2201      	movs	r2, #1
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	429a      	cmp	r2, r3
 800272a:	f040 815a 	bne.w	80029e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b01      	cmp	r3, #1
 8002738:	d005      	beq.n	8002746 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002742:	2b02      	cmp	r3, #2
 8002744:	d130      	bne.n	80027a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	2203      	movs	r2, #3
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800277c:	2201      	movs	r2, #1
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 0201 	and.w	r2, r3, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d017      	beq.n	80027e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	2203      	movs	r2, #3
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d123      	bne.n	8002838 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	08da      	lsrs	r2, r3, #3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3208      	adds	r2, #8
 80027f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	220f      	movs	r2, #15
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	08da      	lsrs	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3208      	adds	r2, #8
 8002832:	69b9      	ldr	r1, [r7, #24]
 8002834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0203 	and.w	r2, r3, #3
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80b4 	beq.w	80029e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	4b60      	ldr	r3, [pc, #384]	@ (8002a00 <HAL_GPIO_Init+0x30c>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002882:	4a5f      	ldr	r2, [pc, #380]	@ (8002a00 <HAL_GPIO_Init+0x30c>)
 8002884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002888:	6453      	str	r3, [r2, #68]	@ 0x44
 800288a:	4b5d      	ldr	r3, [pc, #372]	@ (8002a00 <HAL_GPIO_Init+0x30c>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002896:	4a5b      	ldr	r2, [pc, #364]	@ (8002a04 <HAL_GPIO_Init+0x310>)
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	089b      	lsrs	r3, r3, #2
 800289c:	3302      	adds	r3, #2
 800289e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	220f      	movs	r2, #15
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a52      	ldr	r2, [pc, #328]	@ (8002a08 <HAL_GPIO_Init+0x314>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d02b      	beq.n	800291a <HAL_GPIO_Init+0x226>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a51      	ldr	r2, [pc, #324]	@ (8002a0c <HAL_GPIO_Init+0x318>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d025      	beq.n	8002916 <HAL_GPIO_Init+0x222>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a50      	ldr	r2, [pc, #320]	@ (8002a10 <HAL_GPIO_Init+0x31c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d01f      	beq.n	8002912 <HAL_GPIO_Init+0x21e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a4f      	ldr	r2, [pc, #316]	@ (8002a14 <HAL_GPIO_Init+0x320>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d019      	beq.n	800290e <HAL_GPIO_Init+0x21a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4e      	ldr	r2, [pc, #312]	@ (8002a18 <HAL_GPIO_Init+0x324>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d013      	beq.n	800290a <HAL_GPIO_Init+0x216>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4d      	ldr	r2, [pc, #308]	@ (8002a1c <HAL_GPIO_Init+0x328>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00d      	beq.n	8002906 <HAL_GPIO_Init+0x212>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002a20 <HAL_GPIO_Init+0x32c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d007      	beq.n	8002902 <HAL_GPIO_Init+0x20e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a4b      	ldr	r2, [pc, #300]	@ (8002a24 <HAL_GPIO_Init+0x330>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d101      	bne.n	80028fe <HAL_GPIO_Init+0x20a>
 80028fa:	2307      	movs	r3, #7
 80028fc:	e00e      	b.n	800291c <HAL_GPIO_Init+0x228>
 80028fe:	2308      	movs	r3, #8
 8002900:	e00c      	b.n	800291c <HAL_GPIO_Init+0x228>
 8002902:	2306      	movs	r3, #6
 8002904:	e00a      	b.n	800291c <HAL_GPIO_Init+0x228>
 8002906:	2305      	movs	r3, #5
 8002908:	e008      	b.n	800291c <HAL_GPIO_Init+0x228>
 800290a:	2304      	movs	r3, #4
 800290c:	e006      	b.n	800291c <HAL_GPIO_Init+0x228>
 800290e:	2303      	movs	r3, #3
 8002910:	e004      	b.n	800291c <HAL_GPIO_Init+0x228>
 8002912:	2302      	movs	r3, #2
 8002914:	e002      	b.n	800291c <HAL_GPIO_Init+0x228>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <HAL_GPIO_Init+0x228>
 800291a:	2300      	movs	r3, #0
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	f002 0203 	and.w	r2, r2, #3
 8002922:	0092      	lsls	r2, r2, #2
 8002924:	4093      	lsls	r3, r2
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800292c:	4935      	ldr	r1, [pc, #212]	@ (8002a04 <HAL_GPIO_Init+0x310>)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	089b      	lsrs	r3, r3, #2
 8002932:	3302      	adds	r3, #2
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800293a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a28 <HAL_GPIO_Init+0x334>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800295e:	4a32      	ldr	r2, [pc, #200]	@ (8002a28 <HAL_GPIO_Init+0x334>)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002964:	4b30      	ldr	r3, [pc, #192]	@ (8002a28 <HAL_GPIO_Init+0x334>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002988:	4a27      	ldr	r2, [pc, #156]	@ (8002a28 <HAL_GPIO_Init+0x334>)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800298e:	4b26      	ldr	r3, [pc, #152]	@ (8002a28 <HAL_GPIO_Init+0x334>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a28 <HAL_GPIO_Init+0x334>)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a28 <HAL_GPIO_Init+0x334>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029dc:	4a12      	ldr	r2, [pc, #72]	@ (8002a28 <HAL_GPIO_Init+0x334>)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3301      	adds	r3, #1
 80029e6:	61fb      	str	r3, [r7, #28]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	2b0f      	cmp	r3, #15
 80029ec:	f67f ae90 	bls.w	8002710 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	3724      	adds	r7, #36	@ 0x24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40013800 	.word	0x40013800
 8002a08:	40020000 	.word	0x40020000
 8002a0c:	40020400 	.word	0x40020400
 8002a10:	40020800 	.word	0x40020800
 8002a14:	40020c00 	.word	0x40020c00
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40021400 	.word	0x40021400
 8002a20:	40021800 	.word	0x40021800
 8002a24:	40021c00 	.word	0x40021c00
 8002a28:	40013c00 	.word	0x40013c00

08002a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	807b      	strh	r3, [r7, #2]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a3c:	787b      	ldrb	r3, [r7, #1]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a42:	887a      	ldrh	r2, [r7, #2]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a48:	e003      	b.n	8002a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a4a:	887b      	ldrh	r3, [r7, #2]
 8002a4c:	041a      	lsls	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	619a      	str	r2, [r3, #24]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e12b      	b.n	8002cca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fe fb4e 	bl	8001128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2224      	movs	r2, #36	@ 0x24
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ab2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ac4:	f001 fd7a 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8002ac8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4a81      	ldr	r2, [pc, #516]	@ (8002cd4 <HAL_I2C_Init+0x274>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d807      	bhi.n	8002ae4 <HAL_I2C_Init+0x84>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4a80      	ldr	r2, [pc, #512]	@ (8002cd8 <HAL_I2C_Init+0x278>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	bf94      	ite	ls
 8002adc:	2301      	movls	r3, #1
 8002ade:	2300      	movhi	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e006      	b.n	8002af2 <HAL_I2C_Init+0x92>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4a7d      	ldr	r2, [pc, #500]	@ (8002cdc <HAL_I2C_Init+0x27c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	bf94      	ite	ls
 8002aec:	2301      	movls	r3, #1
 8002aee:	2300      	movhi	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e0e7      	b.n	8002cca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4a78      	ldr	r2, [pc, #480]	@ (8002ce0 <HAL_I2C_Init+0x280>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0c9b      	lsrs	r3, r3, #18
 8002b04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a6a      	ldr	r2, [pc, #424]	@ (8002cd4 <HAL_I2C_Init+0x274>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d802      	bhi.n	8002b34 <HAL_I2C_Init+0xd4>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3301      	adds	r3, #1
 8002b32:	e009      	b.n	8002b48 <HAL_I2C_Init+0xe8>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	4a69      	ldr	r2, [pc, #420]	@ (8002ce4 <HAL_I2C_Init+0x284>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	099b      	lsrs	r3, r3, #6
 8002b46:	3301      	adds	r3, #1
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b5a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	495c      	ldr	r1, [pc, #368]	@ (8002cd4 <HAL_I2C_Init+0x274>)
 8002b64:	428b      	cmp	r3, r1
 8002b66:	d819      	bhi.n	8002b9c <HAL_I2C_Init+0x13c>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1e59      	subs	r1, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b76:	1c59      	adds	r1, r3, #1
 8002b78:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b7c:	400b      	ands	r3, r1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_I2C_Init+0x138>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1e59      	subs	r1, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b90:	3301      	adds	r3, #1
 8002b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b96:	e051      	b.n	8002c3c <HAL_I2C_Init+0x1dc>
 8002b98:	2304      	movs	r3, #4
 8002b9a:	e04f      	b.n	8002c3c <HAL_I2C_Init+0x1dc>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d111      	bne.n	8002bc8 <HAL_I2C_Init+0x168>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1e58      	subs	r0, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	440b      	add	r3, r1
 8002bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e012      	b.n	8002bee <HAL_I2C_Init+0x18e>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	1e58      	subs	r0, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6859      	ldr	r1, [r3, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	0099      	lsls	r1, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bde:	3301      	adds	r3, #1
 8002be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf0c      	ite	eq
 8002be8:	2301      	moveq	r3, #1
 8002bea:	2300      	movne	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2C_Init+0x196>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e022      	b.n	8002c3c <HAL_I2C_Init+0x1dc>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10e      	bne.n	8002c1c <HAL_I2C_Init+0x1bc>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1e58      	subs	r0, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6859      	ldr	r1, [r3, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	440b      	add	r3, r1
 8002c0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c1a:	e00f      	b.n	8002c3c <HAL_I2C_Init+0x1dc>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1e58      	subs	r0, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	0099      	lsls	r1, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	6809      	ldr	r1, [r1, #0]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69da      	ldr	r2, [r3, #28]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6911      	ldr	r1, [r2, #16]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68d2      	ldr	r2, [r2, #12]
 8002c76:	4311      	orrs	r1, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	000186a0 	.word	0x000186a0
 8002cd8:	001e847f 	.word	0x001e847f
 8002cdc:	003d08ff 	.word	0x003d08ff
 8002ce0:	431bde83 	.word	0x431bde83
 8002ce4:	10624dd3 	.word	0x10624dd3

08002ce8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	817b      	strh	r3, [r7, #10]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cfc:	f7fe ffe6 	bl	8001ccc <HAL_GetTick>
 8002d00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	f040 80e0 	bne.w	8002ed0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	2319      	movs	r3, #25
 8002d16:	2201      	movs	r2, #1
 8002d18:	4970      	ldr	r1, [pc, #448]	@ (8002edc <HAL_I2C_Master_Transmit+0x1f4>)
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f964 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d26:	2302      	movs	r3, #2
 8002d28:	e0d3      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_I2C_Master_Transmit+0x50>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e0cc      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d007      	beq.n	8002d5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0201 	orr.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2221      	movs	r2, #33	@ 0x21
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2210      	movs	r2, #16
 8002d7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	893a      	ldrh	r2, [r7, #8]
 8002d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4a50      	ldr	r2, [pc, #320]	@ (8002ee0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002da0:	8979      	ldrh	r1, [r7, #10]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	6a3a      	ldr	r2, [r7, #32]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f89c 	bl	8002ee4 <I2C_MasterRequestWrite>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e08d      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002dcc:	e066      	b.n	8002e9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	6a39      	ldr	r1, [r7, #32]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fa22 	bl	800321c <I2C_WaitOnTXEFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00d      	beq.n	8002dfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d107      	bne.n	8002df6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06b      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d11b      	bne.n	8002e70 <HAL_I2C_Master_Transmit+0x188>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d017      	beq.n	8002e70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	6a39      	ldr	r1, [r7, #32]
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fa19 	bl	80032ac <I2C_WaitOnBTFFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00d      	beq.n	8002e9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d107      	bne.n	8002e98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e01a      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d194      	bne.n	8002dce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e000      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ed0:	2302      	movs	r3, #2
  }
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	00100002 	.word	0x00100002
 8002ee0:	ffff0000 	.word	0xffff0000

08002ee4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d006      	beq.n	8002f0e <I2C_MasterRequestWrite+0x2a>
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d003      	beq.n	8002f0e <I2C_MasterRequestWrite+0x2a>
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f0c:	d108      	bne.n	8002f20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	e00b      	b.n	8002f38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f24:	2b12      	cmp	r3, #18
 8002f26:	d107      	bne.n	8002f38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f84f 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00d      	beq.n	8002f6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f5e:	d103      	bne.n	8002f68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e035      	b.n	8002fd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f74:	d108      	bne.n	8002f88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f76:	897b      	ldrh	r3, [r7, #10]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f84:	611a      	str	r2, [r3, #16]
 8002f86:	e01b      	b.n	8002fc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f88:	897b      	ldrh	r3, [r7, #10]
 8002f8a:	11db      	asrs	r3, r3, #7
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f003 0306 	and.w	r3, r3, #6
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f063 030f 	orn	r3, r3, #15
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	490e      	ldr	r1, [pc, #56]	@ (8002fe0 <I2C_MasterRequestWrite+0xfc>)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f898 	bl	80030dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e010      	b.n	8002fd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fb6:	897b      	ldrh	r3, [r7, #10]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4907      	ldr	r1, [pc, #28]	@ (8002fe4 <I2C_MasterRequestWrite+0x100>)
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f888 	bl	80030dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	00010008 	.word	0x00010008
 8002fe4:	00010002 	.word	0x00010002

08002fe8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff8:	e048      	b.n	800308c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d044      	beq.n	800308c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003002:	f7fe fe63 	bl	8001ccc <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d302      	bcc.n	8003018 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d139      	bne.n	800308c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	0c1b      	lsrs	r3, r3, #16
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d10d      	bne.n	800303e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	43da      	mvns	r2, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	4013      	ands	r3, r2
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	e00c      	b.n	8003058 <I2C_WaitOnFlagUntilTimeout+0x70>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	43da      	mvns	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4013      	ands	r3, r2
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	429a      	cmp	r2, r3
 800305c:	d116      	bne.n	800308c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	f043 0220 	orr.w	r2, r3, #32
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e023      	b.n	80030d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	0c1b      	lsrs	r3, r3, #16
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b01      	cmp	r3, #1
 8003094:	d10d      	bne.n	80030b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	43da      	mvns	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4013      	ands	r3, r2
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	461a      	mov	r2, r3
 80030b0:	e00c      	b.n	80030cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	43da      	mvns	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4013      	ands	r3, r2
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d093      	beq.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ea:	e071      	b.n	80031d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030fa:	d123      	bne.n	8003144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800310a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003114:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	f043 0204 	orr.w	r2, r3, #4
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e067      	b.n	8003214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	d041      	beq.n	80031d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314c:	f7fe fdbe 	bl	8001ccc <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	429a      	cmp	r2, r3
 800315a:	d302      	bcc.n	8003162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d136      	bne.n	80031d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	d10c      	bne.n	8003186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	43da      	mvns	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4013      	ands	r3, r2
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	bf14      	ite	ne
 800317e:	2301      	movne	r3, #1
 8003180:	2300      	moveq	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	e00b      	b.n	800319e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	43da      	mvns	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	4013      	ands	r3, r2
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d016      	beq.n	80031d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031bc:	f043 0220 	orr.w	r2, r3, #32
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e021      	b.n	8003214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	0c1b      	lsrs	r3, r3, #16
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d10c      	bne.n	80031f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	43da      	mvns	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	4013      	ands	r3, r2
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf14      	ite	ne
 80031ec:	2301      	movne	r3, #1
 80031ee:	2300      	moveq	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e00b      	b.n	800320c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	43da      	mvns	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4013      	ands	r3, r2
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	bf14      	ite	ne
 8003206:	2301      	movne	r3, #1
 8003208:	2300      	moveq	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	f47f af6d 	bne.w	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003228:	e034      	b.n	8003294 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f886 	bl	800333c <I2C_IsAcknowledgeFailed>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e034      	b.n	80032a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003240:	d028      	beq.n	8003294 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003242:	f7fe fd43 	bl	8001ccc <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	429a      	cmp	r2, r3
 8003250:	d302      	bcc.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d11d      	bne.n	8003294 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003262:	2b80      	cmp	r3, #128	@ 0x80
 8003264:	d016      	beq.n	8003294 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	f043 0220 	orr.w	r2, r3, #32
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e007      	b.n	80032a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329e:	2b80      	cmp	r3, #128	@ 0x80
 80032a0:	d1c3      	bne.n	800322a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032b8:	e034      	b.n	8003324 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f83e 	bl	800333c <I2C_IsAcknowledgeFailed>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e034      	b.n	8003334 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d028      	beq.n	8003324 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d2:	f7fe fcfb 	bl	8001ccc <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d302      	bcc.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d11d      	bne.n	8003324 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d016      	beq.n	8003324 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003310:	f043 0220 	orr.w	r2, r3, #32
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e007      	b.n	8003334 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b04      	cmp	r3, #4
 8003330:	d1c3      	bne.n	80032ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003352:	d11b      	bne.n	800338c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800335c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	f043 0204 	orr.w	r2, r3, #4
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e128      	b.n	8003600 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a90      	ldr	r2, [pc, #576]	@ (8003608 <HAL_I2S_Init+0x26c>)
 80033c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7fd ff2b 	bl	8001224 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80033e4:	f023 030f 	bic.w	r3, r3, #15
 80033e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2202      	movs	r2, #2
 80033f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d060      	beq.n	80034bc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d102      	bne.n	8003408 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003402:	2310      	movs	r3, #16
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e001      	b.n	800340c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003408:	2320      	movs	r3, #32
 800340a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b20      	cmp	r3, #32
 8003412:	d802      	bhi.n	800341a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800341a:	2001      	movs	r0, #1
 800341c:	f001 fa0a 	bl	8004834 <HAL_RCCEx_GetPeriphCLKFreq>
 8003420:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800342a:	d125      	bne.n	8003478 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d010      	beq.n	8003456 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	fbb2 f2f3 	udiv	r2, r2, r3
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	461a      	mov	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003450:	3305      	adds	r3, #5
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	e01f      	b.n	8003496 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	461a      	mov	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003472:	3305      	adds	r3, #5
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	e00e      	b.n	8003496 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	461a      	mov	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003492:	3305      	adds	r3, #5
 8003494:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4a5c      	ldr	r2, [pc, #368]	@ (800360c <HAL_I2S_Init+0x270>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	08db      	lsrs	r3, r3, #3
 80034a0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	e003      	b.n	80034c4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80034bc:	2302      	movs	r3, #2
 80034be:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d902      	bls.n	80034d0 <HAL_I2S_Init+0x134>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	2bff      	cmp	r3, #255	@ 0xff
 80034ce:	d907      	bls.n	80034e0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d4:	f043 0210 	orr.w	r2, r3, #16
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e08f      	b.n	8003600 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	ea42 0103 	orr.w	r1, r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80034fe:	f023 030f 	bic.w	r3, r3, #15
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6851      	ldr	r1, [r2, #4]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6892      	ldr	r2, [r2, #8]
 800350a:	4311      	orrs	r1, r2
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68d2      	ldr	r2, [r2, #12]
 8003510:	4311      	orrs	r1, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6992      	ldr	r2, [r2, #24]
 8003516:	430a      	orrs	r2, r1
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003522:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d161      	bne.n	80035f0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a38      	ldr	r2, [pc, #224]	@ (8003610 <HAL_I2S_Init+0x274>)
 8003530:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a37      	ldr	r2, [pc, #220]	@ (8003614 <HAL_I2S_Init+0x278>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d101      	bne.n	8003540 <HAL_I2S_Init+0x1a4>
 800353c:	4b36      	ldr	r3, [pc, #216]	@ (8003618 <HAL_I2S_Init+0x27c>)
 800353e:	e001      	b.n	8003544 <HAL_I2S_Init+0x1a8>
 8003540:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	4932      	ldr	r1, [pc, #200]	@ (8003614 <HAL_I2S_Init+0x278>)
 800354c:	428a      	cmp	r2, r1
 800354e:	d101      	bne.n	8003554 <HAL_I2S_Init+0x1b8>
 8003550:	4a31      	ldr	r2, [pc, #196]	@ (8003618 <HAL_I2S_Init+0x27c>)
 8003552:	e001      	b.n	8003558 <HAL_I2S_Init+0x1bc>
 8003554:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003558:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800355c:	f023 030f 	bic.w	r3, r3, #15
 8003560:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a2b      	ldr	r2, [pc, #172]	@ (8003614 <HAL_I2S_Init+0x278>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d101      	bne.n	8003570 <HAL_I2S_Init+0x1d4>
 800356c:	4b2a      	ldr	r3, [pc, #168]	@ (8003618 <HAL_I2S_Init+0x27c>)
 800356e:	e001      	b.n	8003574 <HAL_I2S_Init+0x1d8>
 8003570:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003574:	2202      	movs	r2, #2
 8003576:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a25      	ldr	r2, [pc, #148]	@ (8003614 <HAL_I2S_Init+0x278>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <HAL_I2S_Init+0x1ea>
 8003582:	4b25      	ldr	r3, [pc, #148]	@ (8003618 <HAL_I2S_Init+0x27c>)
 8003584:	e001      	b.n	800358a <HAL_I2S_Init+0x1ee>
 8003586:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003596:	d003      	beq.n	80035a0 <HAL_I2S_Init+0x204>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d103      	bne.n	80035a8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80035a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	e001      	b.n	80035ac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80035b6:	4313      	orrs	r3, r2
 80035b8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80035c0:	4313      	orrs	r3, r2
 80035c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80035ca:	4313      	orrs	r3, r2
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	897b      	ldrh	r3, [r7, #10]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80035d8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a0d      	ldr	r2, [pc, #52]	@ (8003614 <HAL_I2S_Init+0x278>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d101      	bne.n	80035e8 <HAL_I2S_Init+0x24c>
 80035e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003618 <HAL_I2S_Init+0x27c>)
 80035e6:	e001      	b.n	80035ec <HAL_I2S_Init+0x250>
 80035e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035ec:	897a      	ldrh	r2, [r7, #10]
 80035ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	08003713 	.word	0x08003713
 800360c:	cccccccd 	.word	0xcccccccd
 8003610:	08003829 	.word	0x08003829
 8003614:	40003800 	.word	0x40003800
 8003618:	40003400 	.word	0x40003400

0800361c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003664:	881a      	ldrh	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	1c9a      	adds	r2, r3, #2
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10e      	bne.n	80036ac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800369c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ffb8 	bl	800361c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c6:	b292      	uxth	r2, r2
 80036c8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ce:	1c9a      	adds	r2, r3, #2
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10e      	bne.n	800370a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80036fa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ff93 	bl	8003630 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b086      	sub	sp, #24
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b04      	cmp	r3, #4
 800372c:	d13a      	bne.n	80037a4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d109      	bne.n	800374c <I2S_IRQHandler+0x3a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003742:	2b40      	cmp	r3, #64	@ 0x40
 8003744:	d102      	bne.n	800374c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff ffb4 	bl	80036b4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003752:	2b40      	cmp	r3, #64	@ 0x40
 8003754:	d126      	bne.n	80037a4 <I2S_IRQHandler+0x92>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 0320 	and.w	r3, r3, #32
 8003760:	2b20      	cmp	r3, #32
 8003762:	d11f      	bne.n	80037a4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003772:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003796:	f043 0202 	orr.w	r2, r3, #2
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff ff50 	bl	8003644 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d136      	bne.n	800381e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d109      	bne.n	80037ce <I2S_IRQHandler+0xbc>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c4:	2b80      	cmp	r3, #128	@ 0x80
 80037c6:	d102      	bne.n	80037ce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff ff45 	bl	8003658 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d122      	bne.n	800381e <I2S_IRQHandler+0x10c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	d11b      	bne.n	800381e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80037f4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003810:	f043 0204 	orr.w	r2, r3, #4
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff ff13 	bl	8003644 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800381e:	bf00      	nop
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a92      	ldr	r2, [pc, #584]	@ (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d101      	bne.n	8003846 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003842:	4b92      	ldr	r3, [pc, #584]	@ (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003844:	e001      	b.n	800384a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003846:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a8b      	ldr	r2, [pc, #556]	@ (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d101      	bne.n	8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003860:	4b8a      	ldr	r3, [pc, #552]	@ (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003862:	e001      	b.n	8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003864:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003874:	d004      	beq.n	8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	f040 8099 	bne.w	80039b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b02      	cmp	r3, #2
 8003888:	d107      	bne.n	800389a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f925 	bl	8003ae4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d107      	bne.n	80038b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f9c8 	bl	8003c44 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ba:	2b40      	cmp	r3, #64	@ 0x40
 80038bc:	d13a      	bne.n	8003934 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d035      	beq.n	8003934 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80038d2:	4b6e      	ldr	r3, [pc, #440]	@ (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038d4:	e001      	b.n	80038da <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80038d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4969      	ldr	r1, [pc, #420]	@ (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038e2:	428b      	cmp	r3, r1
 80038e4:	d101      	bne.n	80038ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80038e6:	4b69      	ldr	r3, [pc, #420]	@ (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038e8:	e001      	b.n	80038ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80038ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038ee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80038f2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003902:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003926:	f043 0202 	orr.w	r2, r3, #2
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff fe88 	bl	8003644 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b08      	cmp	r3, #8
 800393c:	f040 80c3 	bne.w	8003ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 80bd 	beq.w	8003ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800395a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a49      	ldr	r2, [pc, #292]	@ (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d101      	bne.n	800396a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003966:	4b49      	ldr	r3, [pc, #292]	@ (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003968:	e001      	b.n	800396e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800396a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4944      	ldr	r1, [pc, #272]	@ (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003976:	428b      	cmp	r3, r1
 8003978:	d101      	bne.n	800397e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800397a:	4b44      	ldr	r3, [pc, #272]	@ (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800397c:	e001      	b.n	8003982 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800397e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003982:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003986:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003988:	2300      	movs	r3, #0
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a2:	f043 0204 	orr.w	r2, r3, #4
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff fe4a 	bl	8003644 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039b0:	e089      	b.n	8003ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d107      	bne.n	80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f8be 	bl	8003b48 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d107      	bne.n	80039e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f8fd 	bl	8003be0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ec:	2b40      	cmp	r3, #64	@ 0x40
 80039ee:	d12f      	bne.n	8003a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d02a      	beq.n	8003a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a08:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d101      	bne.n	8003a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003a14:	4b1d      	ldr	r3, [pc, #116]	@ (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a16:	e001      	b.n	8003a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003a18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4919      	ldr	r1, [pc, #100]	@ (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a24:	428b      	cmp	r3, r1
 8003a26:	d101      	bne.n	8003a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a28:	4b18      	ldr	r3, [pc, #96]	@ (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a2a:	e001      	b.n	8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a30:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a34:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a42:	f043 0202 	orr.w	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff fdfa 	bl	8003644 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d136      	bne.n	8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d031      	beq.n	8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a07      	ldr	r2, [pc, #28]	@ (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d101      	bne.n	8003a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a6e:	4b07      	ldr	r3, [pc, #28]	@ (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a70:	e001      	b.n	8003a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4902      	ldr	r1, [pc, #8]	@ (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a7e:	428b      	cmp	r3, r1
 8003a80:	d106      	bne.n	8003a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003a82:	4b02      	ldr	r3, [pc, #8]	@ (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a84:	e006      	b.n	8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003a86:	bf00      	nop
 8003a88:	40003800 	.word	0x40003800
 8003a8c:	40003400 	.word	0x40003400
 8003a90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a98:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003aa8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab6:	f043 0204 	orr.w	r2, r3, #4
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fdc0 	bl	8003644 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ac4:	e000      	b.n	8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ac6:	bf00      	nop
}
 8003ac8:	bf00      	nop
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	1c99      	adds	r1, r3, #2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6251      	str	r1, [r2, #36]	@ 0x24
 8003af6:	881a      	ldrh	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d113      	bne.n	8003b3e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b24:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d106      	bne.n	8003b3e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff ffc9 	bl	8003ad0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	1c99      	adds	r1, r3, #2
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6251      	str	r1, [r2, #36]	@ 0x24
 8003b5a:	8819      	ldrh	r1, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd8 <I2SEx_TxISR_I2SExt+0x90>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d101      	bne.n	8003b6a <I2SEx_TxISR_I2SExt+0x22>
 8003b66:	4b1d      	ldr	r3, [pc, #116]	@ (8003bdc <I2SEx_TxISR_I2SExt+0x94>)
 8003b68:	e001      	b.n	8003b6e <I2SEx_TxISR_I2SExt+0x26>
 8003b6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b6e:	460a      	mov	r2, r1
 8003b70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d121      	bne.n	8003bce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a12      	ldr	r2, [pc, #72]	@ (8003bd8 <I2SEx_TxISR_I2SExt+0x90>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d101      	bne.n	8003b98 <I2SEx_TxISR_I2SExt+0x50>
 8003b94:	4b11      	ldr	r3, [pc, #68]	@ (8003bdc <I2SEx_TxISR_I2SExt+0x94>)
 8003b96:	e001      	b.n	8003b9c <I2SEx_TxISR_I2SExt+0x54>
 8003b98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	490d      	ldr	r1, [pc, #52]	@ (8003bd8 <I2SEx_TxISR_I2SExt+0x90>)
 8003ba4:	428b      	cmp	r3, r1
 8003ba6:	d101      	bne.n	8003bac <I2SEx_TxISR_I2SExt+0x64>
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bdc <I2SEx_TxISR_I2SExt+0x94>)
 8003baa:	e001      	b.n	8003bb0 <I2SEx_TxISR_I2SExt+0x68>
 8003bac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bb0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003bb4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ff81 	bl	8003ad0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40003800 	.word	0x40003800
 8003bdc:	40003400 	.word	0x40003400

08003be0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68d8      	ldr	r0, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf2:	1c99      	adds	r1, r3, #2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003bf8:	b282      	uxth	r2, r0
 8003bfa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d113      	bne.n	8003c3c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c22:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff ff4a 	bl	8003ad0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a20      	ldr	r2, [pc, #128]	@ (8003cd4 <I2SEx_RxISR_I2SExt+0x90>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d101      	bne.n	8003c5a <I2SEx_RxISR_I2SExt+0x16>
 8003c56:	4b20      	ldr	r3, [pc, #128]	@ (8003cd8 <I2SEx_RxISR_I2SExt+0x94>)
 8003c58:	e001      	b.n	8003c5e <I2SEx_RxISR_I2SExt+0x1a>
 8003c5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c5e:	68d8      	ldr	r0, [r3, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c64:	1c99      	adds	r1, r3, #2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003c6a:	b282      	uxth	r2, r0
 8003c6c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d121      	bne.n	8003cca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a12      	ldr	r2, [pc, #72]	@ (8003cd4 <I2SEx_RxISR_I2SExt+0x90>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d101      	bne.n	8003c94 <I2SEx_RxISR_I2SExt+0x50>
 8003c90:	4b11      	ldr	r3, [pc, #68]	@ (8003cd8 <I2SEx_RxISR_I2SExt+0x94>)
 8003c92:	e001      	b.n	8003c98 <I2SEx_RxISR_I2SExt+0x54>
 8003c94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	490d      	ldr	r1, [pc, #52]	@ (8003cd4 <I2SEx_RxISR_I2SExt+0x90>)
 8003ca0:	428b      	cmp	r3, r1
 8003ca2:	d101      	bne.n	8003ca8 <I2SEx_RxISR_I2SExt+0x64>
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd8 <I2SEx_RxISR_I2SExt+0x94>)
 8003ca6:	e001      	b.n	8003cac <I2SEx_RxISR_I2SExt+0x68>
 8003ca8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cb0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d106      	bne.n	8003cca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff ff03 	bl	8003ad0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40003800 	.word	0x40003800
 8003cd8:	40003400 	.word	0x40003400

08003cdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e267      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d075      	beq.n	8003de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003cfa:	4b88      	ldr	r3, [pc, #544]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d00c      	beq.n	8003d20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d06:	4b85      	ldr	r3, [pc, #532]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d112      	bne.n	8003d38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d12:	4b82      	ldr	r3, [pc, #520]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d1e:	d10b      	bne.n	8003d38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d20:	4b7e      	ldr	r3, [pc, #504]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d05b      	beq.n	8003de4 <HAL_RCC_OscConfig+0x108>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d157      	bne.n	8003de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e242      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d40:	d106      	bne.n	8003d50 <HAL_RCC_OscConfig+0x74>
 8003d42:	4b76      	ldr	r3, [pc, #472]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a75      	ldr	r2, [pc, #468]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e01d      	b.n	8003d8c <HAL_RCC_OscConfig+0xb0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCC_OscConfig+0x98>
 8003d5a:	4b70      	ldr	r3, [pc, #448]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a6f      	ldr	r2, [pc, #444]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	4b6d      	ldr	r3, [pc, #436]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a6c      	ldr	r2, [pc, #432]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	e00b      	b.n	8003d8c <HAL_RCC_OscConfig+0xb0>
 8003d74:	4b69      	ldr	r3, [pc, #420]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a68      	ldr	r2, [pc, #416]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	4b66      	ldr	r3, [pc, #408]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a65      	ldr	r2, [pc, #404]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7fd ff9a 	bl	8001ccc <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7fd ff96 	bl	8001ccc <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	@ 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e207      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	4b5b      	ldr	r3, [pc, #364]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0xc0>
 8003dba:	e014      	b.n	8003de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fd ff86 	bl	8001ccc <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fd ff82 	bl	8001ccc <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	@ 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e1f3      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd6:	4b51      	ldr	r3, [pc, #324]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0xe8>
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d063      	beq.n	8003eba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003df2:	4b4a      	ldr	r3, [pc, #296]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00b      	beq.n	8003e16 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dfe:	4b47      	ldr	r3, [pc, #284]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d11c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0a:	4b44      	ldr	r3, [pc, #272]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d116      	bne.n	8003e44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e16:	4b41      	ldr	r3, [pc, #260]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_RCC_OscConfig+0x152>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d001      	beq.n	8003e2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e1c7      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4937      	ldr	r1, [pc, #220]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e42:	e03a      	b.n	8003eba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d020      	beq.n	8003e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e4c:	4b34      	ldr	r3, [pc, #208]	@ (8003f20 <HAL_RCC_OscConfig+0x244>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e52:	f7fd ff3b 	bl	8001ccc <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e5a:	f7fd ff37 	bl	8001ccc <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e1a8      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e78:	4b28      	ldr	r3, [pc, #160]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4925      	ldr	r1, [pc, #148]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	600b      	str	r3, [r1, #0]
 8003e8c:	e015      	b.n	8003eba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8e:	4b24      	ldr	r3, [pc, #144]	@ (8003f20 <HAL_RCC_OscConfig+0x244>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fd ff1a 	bl	8001ccc <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e9c:	f7fd ff16 	bl	8001ccc <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e187      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eae:	4b1b      	ldr	r3, [pc, #108]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d036      	beq.n	8003f34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d016      	beq.n	8003efc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ece:	4b15      	ldr	r3, [pc, #84]	@ (8003f24 <HAL_RCC_OscConfig+0x248>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed4:	f7fd fefa 	bl	8001ccc <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003edc:	f7fd fef6 	bl	8001ccc <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e167      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eee:	4b0b      	ldr	r3, [pc, #44]	@ (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003ef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x200>
 8003efa:	e01b      	b.n	8003f34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003efc:	4b09      	ldr	r3, [pc, #36]	@ (8003f24 <HAL_RCC_OscConfig+0x248>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f02:	f7fd fee3 	bl	8001ccc <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f08:	e00e      	b.n	8003f28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0a:	f7fd fedf 	bl	8001ccc <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d907      	bls.n	8003f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e150      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	42470000 	.word	0x42470000
 8003f24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f28:	4b88      	ldr	r3, [pc, #544]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8003f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1ea      	bne.n	8003f0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8097 	beq.w	8004070 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f42:	2300      	movs	r3, #0
 8003f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f46:	4b81      	ldr	r3, [pc, #516]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10f      	bne.n	8003f72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	4b7d      	ldr	r3, [pc, #500]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	4a7c      	ldr	r2, [pc, #496]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8003f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f62:	4b7a      	ldr	r3, [pc, #488]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f72:	4b77      	ldr	r3, [pc, #476]	@ (8004150 <HAL_RCC_OscConfig+0x474>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d118      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f7e:	4b74      	ldr	r3, [pc, #464]	@ (8004150 <HAL_RCC_OscConfig+0x474>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a73      	ldr	r2, [pc, #460]	@ (8004150 <HAL_RCC_OscConfig+0x474>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8a:	f7fd fe9f 	bl	8001ccc <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f92:	f7fd fe9b 	bl	8001ccc <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e10c      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa4:	4b6a      	ldr	r3, [pc, #424]	@ (8004150 <HAL_RCC_OscConfig+0x474>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x2ea>
 8003fb8:	4b64      	ldr	r3, [pc, #400]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fbc:	4a63      	ldr	r2, [pc, #396]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fc4:	e01c      	b.n	8004000 <HAL_RCC_OscConfig+0x324>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x30c>
 8003fce:	4b5f      	ldr	r3, [pc, #380]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd2:	4a5e      	ldr	r2, [pc, #376]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8003fd4:	f043 0304 	orr.w	r3, r3, #4
 8003fd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fda:	4b5c      	ldr	r3, [pc, #368]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fde:	4a5b      	ldr	r2, [pc, #364]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fe6:	e00b      	b.n	8004000 <HAL_RCC_OscConfig+0x324>
 8003fe8:	4b58      	ldr	r3, [pc, #352]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fec:	4a57      	ldr	r2, [pc, #348]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8003fee:	f023 0301 	bic.w	r3, r3, #1
 8003ff2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff4:	4b55      	ldr	r3, [pc, #340]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff8:	4a54      	ldr	r2, [pc, #336]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8003ffa:	f023 0304 	bic.w	r3, r3, #4
 8003ffe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d015      	beq.n	8004034 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004008:	f7fd fe60 	bl	8001ccc <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400e:	e00a      	b.n	8004026 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004010:	f7fd fe5c 	bl	8001ccc <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800401e:	4293      	cmp	r3, r2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e0cb      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004026:	4b49      	ldr	r3, [pc, #292]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0ee      	beq.n	8004010 <HAL_RCC_OscConfig+0x334>
 8004032:	e014      	b.n	800405e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004034:	f7fd fe4a 	bl	8001ccc <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403a:	e00a      	b.n	8004052 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f7fd fe46 	bl	8001ccc <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e0b5      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004052:	4b3e      	ldr	r3, [pc, #248]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1ee      	bne.n	800403c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800405e:	7dfb      	ldrb	r3, [r7, #23]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d105      	bne.n	8004070 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004064:	4b39      	ldr	r3, [pc, #228]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	4a38      	ldr	r2, [pc, #224]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 800406a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800406e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80a1 	beq.w	80041bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800407a:	4b34      	ldr	r3, [pc, #208]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b08      	cmp	r3, #8
 8004084:	d05c      	beq.n	8004140 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d141      	bne.n	8004112 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408e:	4b31      	ldr	r3, [pc, #196]	@ (8004154 <HAL_RCC_OscConfig+0x478>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7fd fe1a 	bl	8001ccc <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409c:	f7fd fe16 	bl	8001ccc <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e087      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ae:	4b27      	ldr	r3, [pc, #156]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69da      	ldr	r2, [r3, #28]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c8:	019b      	lsls	r3, r3, #6
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	3b01      	subs	r3, #1
 80040d4:	041b      	lsls	r3, r3, #16
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	491b      	ldr	r1, [pc, #108]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004154 <HAL_RCC_OscConfig+0x478>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ea:	f7fd fdef 	bl	8001ccc <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fd fdeb 	bl	8001ccc <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e05c      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004104:	4b11      	ldr	r3, [pc, #68]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x416>
 8004110:	e054      	b.n	80041bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004112:	4b10      	ldr	r3, [pc, #64]	@ (8004154 <HAL_RCC_OscConfig+0x478>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7fd fdd8 	bl	8001ccc <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004120:	f7fd fdd4 	bl	8001ccc <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e045      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004132:	4b06      	ldr	r3, [pc, #24]	@ (800414c <HAL_RCC_OscConfig+0x470>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x444>
 800413e:	e03d      	b.n	80041bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d107      	bne.n	8004158 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e038      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
 800414c:	40023800 	.word	0x40023800
 8004150:	40007000 	.word	0x40007000
 8004154:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004158:	4b1b      	ldr	r3, [pc, #108]	@ (80041c8 <HAL_RCC_OscConfig+0x4ec>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d028      	beq.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d121      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d11a      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004188:	4013      	ands	r3, r2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800418e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004190:	4293      	cmp	r3, r2
 8004192:	d111      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	3b01      	subs	r3, #1
 80041a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d107      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e000      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800

080041cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0cc      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041e0:	4b68      	ldr	r3, [pc, #416]	@ (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d90c      	bls.n	8004208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b65      	ldr	r3, [pc, #404]	@ (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b63      	ldr	r3, [pc, #396]	@ (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0b8      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d020      	beq.n	8004256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004220:	4b59      	ldr	r3, [pc, #356]	@ (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4a58      	ldr	r2, [pc, #352]	@ (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800422a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004238:	4b53      	ldr	r3, [pc, #332]	@ (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4a52      	ldr	r2, [pc, #328]	@ (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004244:	4b50      	ldr	r3, [pc, #320]	@ (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	494d      	ldr	r1, [pc, #308]	@ (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d044      	beq.n	80042ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d107      	bne.n	800427a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	4b47      	ldr	r3, [pc, #284]	@ (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d119      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e07f      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d003      	beq.n	800428a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004286:	2b03      	cmp	r3, #3
 8004288:	d107      	bne.n	800429a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428a:	4b3f      	ldr	r3, [pc, #252]	@ (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e06f      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429a:	4b3b      	ldr	r3, [pc, #236]	@ (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e067      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042aa:	4b37      	ldr	r3, [pc, #220]	@ (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f023 0203 	bic.w	r2, r3, #3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	4934      	ldr	r1, [pc, #208]	@ (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042bc:	f7fd fd06 	bl	8001ccc <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c2:	e00a      	b.n	80042da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c4:	f7fd fd02 	bl	8001ccc <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e04f      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042da:	4b2b      	ldr	r3, [pc, #172]	@ (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 020c 	and.w	r2, r3, #12
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d1eb      	bne.n	80042c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042ec:	4b25      	ldr	r3, [pc, #148]	@ (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d20c      	bcs.n	8004314 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b22      	ldr	r3, [pc, #136]	@ (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b20      	ldr	r3, [pc, #128]	@ (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d001      	beq.n	8004314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e032      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004320:	4b19      	ldr	r3, [pc, #100]	@ (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4916      	ldr	r1, [pc, #88]	@ (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	4313      	orrs	r3, r2
 8004330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800433e:	4b12      	ldr	r3, [pc, #72]	@ (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	490e      	ldr	r1, [pc, #56]	@ (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004352:	f000 f821 	bl	8004398 <HAL_RCC_GetSysClockFreq>
 8004356:	4602      	mov	r2, r0
 8004358:	4b0b      	ldr	r3, [pc, #44]	@ (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	490a      	ldr	r1, [pc, #40]	@ (800438c <HAL_RCC_ClockConfig+0x1c0>)
 8004364:	5ccb      	ldrb	r3, [r1, r3]
 8004366:	fa22 f303 	lsr.w	r3, r2, r3
 800436a:	4a09      	ldr	r2, [pc, #36]	@ (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800436c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800436e:	4b09      	ldr	r3, [pc, #36]	@ (8004394 <HAL_RCC_ClockConfig+0x1c8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7fd fa84 	bl	8001880 <HAL_InitTick>

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40023c00 	.word	0x40023c00
 8004388:	40023800 	.word	0x40023800
 800438c:	08012cb4 	.word	0x08012cb4
 8004390:	20000004 	.word	0x20000004
 8004394:	20000008 	.word	0x20000008

08004398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800439c:	b094      	sub	sp, #80	@ 0x50
 800439e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043b0:	4b79      	ldr	r3, [pc, #484]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d00d      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0x40>
 80043bc:	2b08      	cmp	r3, #8
 80043be:	f200 80e1 	bhi.w	8004584 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_RCC_GetSysClockFreq+0x34>
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d003      	beq.n	80043d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80043ca:	e0db      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043cc:	4b73      	ldr	r3, [pc, #460]	@ (800459c <HAL_RCC_GetSysClockFreq+0x204>)
 80043ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043d0:	e0db      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043d2:	4b73      	ldr	r3, [pc, #460]	@ (80045a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80043d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043d6:	e0d8      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043d8:	4b6f      	ldr	r3, [pc, #444]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d063      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	099b      	lsrs	r3, r3, #6
 80043f4:	2200      	movs	r2, #0
 80043f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004400:	633b      	str	r3, [r7, #48]	@ 0x30
 8004402:	2300      	movs	r3, #0
 8004404:	637b      	str	r3, [r7, #52]	@ 0x34
 8004406:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800440a:	4622      	mov	r2, r4
 800440c:	462b      	mov	r3, r5
 800440e:	f04f 0000 	mov.w	r0, #0
 8004412:	f04f 0100 	mov.w	r1, #0
 8004416:	0159      	lsls	r1, r3, #5
 8004418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800441c:	0150      	lsls	r0, r2, #5
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	4621      	mov	r1, r4
 8004424:	1a51      	subs	r1, r2, r1
 8004426:	6139      	str	r1, [r7, #16]
 8004428:	4629      	mov	r1, r5
 800442a:	eb63 0301 	sbc.w	r3, r3, r1
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800443c:	4659      	mov	r1, fp
 800443e:	018b      	lsls	r3, r1, #6
 8004440:	4651      	mov	r1, sl
 8004442:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004446:	4651      	mov	r1, sl
 8004448:	018a      	lsls	r2, r1, #6
 800444a:	4651      	mov	r1, sl
 800444c:	ebb2 0801 	subs.w	r8, r2, r1
 8004450:	4659      	mov	r1, fp
 8004452:	eb63 0901 	sbc.w	r9, r3, r1
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800446a:	4690      	mov	r8, r2
 800446c:	4699      	mov	r9, r3
 800446e:	4623      	mov	r3, r4
 8004470:	eb18 0303 	adds.w	r3, r8, r3
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	462b      	mov	r3, r5
 8004478:	eb49 0303 	adc.w	r3, r9, r3
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800448a:	4629      	mov	r1, r5
 800448c:	024b      	lsls	r3, r1, #9
 800448e:	4621      	mov	r1, r4
 8004490:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004494:	4621      	mov	r1, r4
 8004496:	024a      	lsls	r2, r1, #9
 8004498:	4610      	mov	r0, r2
 800449a:	4619      	mov	r1, r3
 800449c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800449e:	2200      	movs	r2, #0
 80044a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044a8:	f7fb fefa 	bl	80002a0 <__aeabi_uldivmod>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4613      	mov	r3, r2
 80044b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044b4:	e058      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b6:	4b38      	ldr	r3, [pc, #224]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	099b      	lsrs	r3, r3, #6
 80044bc:	2200      	movs	r2, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	4611      	mov	r1, r2
 80044c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044c6:	623b      	str	r3, [r7, #32]
 80044c8:	2300      	movs	r3, #0
 80044ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80044cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044d0:	4642      	mov	r2, r8
 80044d2:	464b      	mov	r3, r9
 80044d4:	f04f 0000 	mov.w	r0, #0
 80044d8:	f04f 0100 	mov.w	r1, #0
 80044dc:	0159      	lsls	r1, r3, #5
 80044de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044e2:	0150      	lsls	r0, r2, #5
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4641      	mov	r1, r8
 80044ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80044ee:	4649      	mov	r1, r9
 80044f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004500:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004504:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004508:	ebb2 040a 	subs.w	r4, r2, sl
 800450c:	eb63 050b 	sbc.w	r5, r3, fp
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	00eb      	lsls	r3, r5, #3
 800451a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800451e:	00e2      	lsls	r2, r4, #3
 8004520:	4614      	mov	r4, r2
 8004522:	461d      	mov	r5, r3
 8004524:	4643      	mov	r3, r8
 8004526:	18e3      	adds	r3, r4, r3
 8004528:	603b      	str	r3, [r7, #0]
 800452a:	464b      	mov	r3, r9
 800452c:	eb45 0303 	adc.w	r3, r5, r3
 8004530:	607b      	str	r3, [r7, #4]
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800453e:	4629      	mov	r1, r5
 8004540:	028b      	lsls	r3, r1, #10
 8004542:	4621      	mov	r1, r4
 8004544:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004548:	4621      	mov	r1, r4
 800454a:	028a      	lsls	r2, r1, #10
 800454c:	4610      	mov	r0, r2
 800454e:	4619      	mov	r1, r3
 8004550:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004552:	2200      	movs	r2, #0
 8004554:	61bb      	str	r3, [r7, #24]
 8004556:	61fa      	str	r2, [r7, #28]
 8004558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800455c:	f7fb fea0 	bl	80002a0 <__aeabi_uldivmod>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4613      	mov	r3, r2
 8004566:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004568:	4b0b      	ldr	r3, [pc, #44]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	3301      	adds	r3, #1
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004578:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800457a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800457c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004580:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004582:	e002      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004584:	4b05      	ldr	r3, [pc, #20]	@ (800459c <HAL_RCC_GetSysClockFreq+0x204>)
 8004586:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800458a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800458c:	4618      	mov	r0, r3
 800458e:	3750      	adds	r7, #80	@ 0x50
 8004590:	46bd      	mov	sp, r7
 8004592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800
 800459c:	00f42400 	.word	0x00f42400
 80045a0:	007a1200 	.word	0x007a1200

080045a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a8:	4b03      	ldr	r3, [pc, #12]	@ (80045b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000004 	.word	0x20000004

080045bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045c0:	f7ff fff0 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045c4:	4602      	mov	r2, r0
 80045c6:	4b05      	ldr	r3, [pc, #20]	@ (80045dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	0a9b      	lsrs	r3, r3, #10
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	4903      	ldr	r1, [pc, #12]	@ (80045e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045d2:	5ccb      	ldrb	r3, [r1, r3]
 80045d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d8:	4618      	mov	r0, r3
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40023800 	.word	0x40023800
 80045e0:	08012cc4 	.word	0x08012cc4

080045e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045e8:	f7ff ffdc 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045ec:	4602      	mov	r2, r0
 80045ee:	4b05      	ldr	r3, [pc, #20]	@ (8004604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	0b5b      	lsrs	r3, r3, #13
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	4903      	ldr	r1, [pc, #12]	@ (8004608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045fa:	5ccb      	ldrb	r3, [r1, r3]
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004600:	4618      	mov	r0, r3
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40023800 	.word	0x40023800
 8004608:	08012cc4 	.word	0x08012cc4

0800460c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	220f      	movs	r2, #15
 800461a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800461c:	4b12      	ldr	r3, [pc, #72]	@ (8004668 <HAL_RCC_GetClockConfig+0x5c>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 0203 	and.w	r2, r3, #3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004628:	4b0f      	ldr	r3, [pc, #60]	@ (8004668 <HAL_RCC_GetClockConfig+0x5c>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004634:	4b0c      	ldr	r3, [pc, #48]	@ (8004668 <HAL_RCC_GetClockConfig+0x5c>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004640:	4b09      	ldr	r3, [pc, #36]	@ (8004668 <HAL_RCC_GetClockConfig+0x5c>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	08db      	lsrs	r3, r3, #3
 8004646:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800464e:	4b07      	ldr	r3, [pc, #28]	@ (800466c <HAL_RCC_GetClockConfig+0x60>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0207 	and.w	r2, r3, #7
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	601a      	str	r2, [r3, #0]
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40023800 	.word	0x40023800
 800466c:	40023c00 	.word	0x40023c00

08004670 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d105      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004694:	2b00      	cmp	r3, #0
 8004696:	d035      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004698:	4b62      	ldr	r3, [pc, #392]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800469e:	f7fd fb15 	bl	8001ccc <HAL_GetTick>
 80046a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046a4:	e008      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046a6:	f7fd fb11 	bl	8001ccc <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e0b0      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046b8:	4b5b      	ldr	r3, [pc, #364]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f0      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	019a      	lsls	r2, r3, #6
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	071b      	lsls	r3, r3, #28
 80046d0:	4955      	ldr	r1, [pc, #340]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046d8:	4b52      	ldr	r3, [pc, #328]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046da:	2201      	movs	r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046de:	f7fd faf5 	bl	8001ccc <HAL_GetTick>
 80046e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046e4:	e008      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046e6:	f7fd faf1 	bl	8001ccc <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e090      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f0      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8083 	beq.w	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	4b44      	ldr	r3, [pc, #272]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	4a43      	ldr	r2, [pc, #268]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800471c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004720:	6413      	str	r3, [r2, #64]	@ 0x40
 8004722:	4b41      	ldr	r3, [pc, #260]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800472e:	4b3f      	ldr	r3, [pc, #252]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a3e      	ldr	r2, [pc, #248]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004738:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800473a:	f7fd fac7 	bl	8001ccc <HAL_GetTick>
 800473e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004740:	e008      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004742:	f7fd fac3 	bl	8001ccc <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e062      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004754:	4b35      	ldr	r3, [pc, #212]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004760:	4b31      	ldr	r3, [pc, #196]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004764:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004768:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d02f      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	429a      	cmp	r2, r3
 800477c:	d028      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800477e:	4b2a      	ldr	r3, [pc, #168]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004786:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004788:	4b29      	ldr	r3, [pc, #164]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800478a:	2201      	movs	r2, #1
 800478c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800478e:	4b28      	ldr	r3, [pc, #160]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004794:	4a24      	ldr	r2, [pc, #144]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800479a:	4b23      	ldr	r3, [pc, #140]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d114      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80047a6:	f7fd fa91 	bl	8001ccc <HAL_GetTick>
 80047aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ac:	e00a      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ae:	f7fd fa8d 	bl	8001ccc <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047bc:	4293      	cmp	r3, r2
 80047be:	d901      	bls.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e02a      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c4:	4b18      	ldr	r3, [pc, #96]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0ee      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047dc:	d10d      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80047de:	4b12      	ldr	r3, [pc, #72]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80047ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047f2:	490d      	ldr	r1, [pc, #52]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	608b      	str	r3, [r1, #8]
 80047f8:	e005      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004800:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004804:	6093      	str	r3, [r2, #8]
 8004806:	4b08      	ldr	r3, [pc, #32]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004808:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004812:	4905      	ldr	r1, [pc, #20]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004814:	4313      	orrs	r3, r2
 8004816:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	42470068 	.word	0x42470068
 8004828:	40023800 	.word	0x40023800
 800482c:	40007000 	.word	0x40007000
 8004830:	42470e40 	.word	0x42470e40

08004834 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d13f      	bne.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004852:	4b24      	ldr	r3, [pc, #144]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800485a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d006      	beq.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004868:	d12f      	bne.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800486a:	4b1f      	ldr	r3, [pc, #124]	@ (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800486c:	617b      	str	r3, [r7, #20]
          break;
 800486e:	e02f      	b.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004870:	4b1c      	ldr	r3, [pc, #112]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004878:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800487c:	d108      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800487e:	4b19      	ldr	r3, [pc, #100]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004886:	4a19      	ldr	r2, [pc, #100]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004888:	fbb2 f3f3 	udiv	r3, r2, r3
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	e007      	b.n	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004890:	4b14      	ldr	r3, [pc, #80]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004898:	4a15      	ldr	r2, [pc, #84]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800489a:	fbb2 f3f3 	udiv	r3, r2, r3
 800489e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80048a0:	4b10      	ldr	r3, [pc, #64]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048a6:	099b      	lsrs	r3, r3, #6
 80048a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80048b4:	4b0b      	ldr	r3, [pc, #44]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048ba:	0f1b      	lsrs	r3, r3, #28
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c6:	617b      	str	r3, [r7, #20]
          break;
 80048c8:	e002      	b.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]
          break;
 80048ce:	bf00      	nop
        }
      }
      break;
 80048d0:	e000      	b.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80048d2:	bf00      	nop
    }
  }
  return frequency;
 80048d4:	697b      	ldr	r3, [r7, #20]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40023800 	.word	0x40023800
 80048e8:	00bb8000 	.word	0x00bb8000
 80048ec:	007a1200 	.word	0x007a1200
 80048f0:	00f42400 	.word	0x00f42400

080048f4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e073      	b.n	80049f2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	7f5b      	ldrb	r3, [r3, #29]
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d105      	bne.n	8004920 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fc fd78 	bl	8001410 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b10      	cmp	r3, #16
 8004932:	d055      	beq.n	80049e0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	22ca      	movs	r2, #202	@ 0xca
 800493a:	625a      	str	r2, [r3, #36]	@ 0x24
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2253      	movs	r2, #83	@ 0x53
 8004942:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fa49 	bl	8004ddc <RTC_EnterInitMode>
 800494a:	4603      	mov	r3, r0
 800494c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d12c      	bne.n	80049ae <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6812      	ldr	r2, [r2, #0]
 800495e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004966:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6899      	ldr	r1, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	68d2      	ldr	r2, [r2, #12]
 800498e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6919      	ldr	r1, [r3, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	041a      	lsls	r2, r3, #16
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fa50 	bl	8004e4a <RTC_ExitInitMode>
 80049aa:	4603      	mov	r3, r0
 80049ac:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d110      	bne.n	80049d6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80049c2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	22ff      	movs	r2, #255	@ 0xff
 80049dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80049de:	e001      	b.n	80049e4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80049e0:	2300      	movs	r3, #0
 80049e2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80049fa:	b590      	push	{r4, r7, lr}
 80049fc:	b087      	sub	sp, #28
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	7f1b      	ldrb	r3, [r3, #28]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_RTC_SetTime+0x1c>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e087      	b.n	8004b26 <HAL_RTC_SetTime+0x12c>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d126      	bne.n	8004a76 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d102      	bne.n	8004a3c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fa27 	bl	8004e94 <RTC_ByteToBcd2>
 8004a46:	4603      	mov	r3, r0
 8004a48:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	785b      	ldrb	r3, [r3, #1]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fa20 	bl	8004e94 <RTC_ByteToBcd2>
 8004a54:	4603      	mov	r3, r0
 8004a56:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a58:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	789b      	ldrb	r3, [r3, #2]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fa18 	bl	8004e94 <RTC_ByteToBcd2>
 8004a64:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a66:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	78db      	ldrb	r3, [r3, #3]
 8004a6e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	e018      	b.n	8004aa8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d102      	bne.n	8004a8a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2200      	movs	r2, #0
 8004a88:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	785b      	ldrb	r3, [r3, #1]
 8004a94:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a96:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004a9c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	78db      	ldrb	r3, [r3, #3]
 8004aa2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	22ca      	movs	r2, #202	@ 0xca
 8004aae:	625a      	str	r2, [r3, #36]	@ 0x24
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2253      	movs	r2, #83	@ 0x53
 8004ab6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f98f 	bl	8004ddc <RTC_EnterInitMode>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004ac2:	7cfb      	ldrb	r3, [r7, #19]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d120      	bne.n	8004b0a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004ad2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004ad6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004ae6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6899      	ldr	r1, [r3, #8]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f9a2 	bl	8004e4a <RTC_ExitInitMode>
 8004b06:	4603      	mov	r3, r0
 8004b08:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004b0a:	7cfb      	ldrb	r3, [r7, #19]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d102      	bne.n	8004b16 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	22ff      	movs	r2, #255	@ 0xff
 8004b1c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	771a      	strb	r2, [r3, #28]

  return status;
 8004b24:	7cfb      	ldrb	r3, [r7, #19]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd90      	pop	{r4, r7, pc}

08004b2e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b086      	sub	sp, #24
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004b60:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004b64:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	0c1b      	lsrs	r3, r3, #16
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	0a1b      	lsrs	r3, r3, #8
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	0d9b      	lsrs	r3, r3, #22
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d11a      	bne.n	8004be0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f98e 	bl	8004ed0 <RTC_Bcd2ToByte>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 f985 	bl	8004ed0 <RTC_Bcd2ToByte>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	461a      	mov	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	789b      	ldrb	r3, [r3, #2]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 f97c 	bl	8004ed0 <RTC_Bcd2ToByte>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	461a      	mov	r2, r3
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004bea:	b590      	push	{r4, r7, lr}
 8004bec:	b087      	sub	sp, #28
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	7f1b      	ldrb	r3, [r3, #28]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_RTC_SetDate+0x1c>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e071      	b.n	8004cea <HAL_RTC_SetDate+0x100>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10e      	bne.n	8004c36 <HAL_RTC_SetDate+0x4c>
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	785b      	ldrb	r3, [r3, #1]
 8004c1c:	f003 0310 	and.w	r3, r3, #16
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	785b      	ldrb	r3, [r3, #1]
 8004c28:	f023 0310 	bic.w	r3, r3, #16
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	330a      	adds	r3, #10
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d11c      	bne.n	8004c76 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	78db      	ldrb	r3, [r3, #3]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 f927 	bl	8004e94 <RTC_ByteToBcd2>
 8004c46:	4603      	mov	r3, r0
 8004c48:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	785b      	ldrb	r3, [r3, #1]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 f920 	bl	8004e94 <RTC_ByteToBcd2>
 8004c54:	4603      	mov	r3, r0
 8004c56:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c58:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	789b      	ldrb	r3, [r3, #2]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 f918 	bl	8004e94 <RTC_ByteToBcd2>
 8004c64:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c66:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	e00e      	b.n	8004c94 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	78db      	ldrb	r3, [r3, #3]
 8004c7a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	785b      	ldrb	r3, [r3, #1]
 8004c80:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c82:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004c88:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	22ca      	movs	r2, #202	@ 0xca
 8004c9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2253      	movs	r2, #83	@ 0x53
 8004ca2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f899 	bl	8004ddc <RTC_EnterInitMode>
 8004caa:	4603      	mov	r3, r0
 8004cac:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004cae:	7cfb      	ldrb	r3, [r7, #19]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10c      	bne.n	8004cce <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004cbe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004cc2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f8c0 	bl	8004e4a <RTC_ExitInitMode>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004cce:	7cfb      	ldrb	r3, [r7, #19]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d102      	bne.n	8004cda <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	22ff      	movs	r2, #255	@ 0xff
 8004ce0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]

  return status;
 8004ce8:	7cfb      	ldrb	r3, [r7, #19]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	371c      	adds	r7, #28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd90      	pop	{r4, r7, pc}

08004cf2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b086      	sub	sp, #24
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004d0c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004d10:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	0c1b      	lsrs	r3, r3, #16
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	0a1b      	lsrs	r3, r3, #8
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	0b5b      	lsrs	r3, r3, #13
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d11a      	bne.n	8004d86 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	78db      	ldrb	r3, [r3, #3]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 f8bb 	bl	8004ed0 <RTC_Bcd2ToByte>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	785b      	ldrb	r3, [r3, #1]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 f8b2 	bl	8004ed0 <RTC_Bcd2ToByte>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	461a      	mov	r2, r3
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	789b      	ldrb	r3, [r3, #2]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 f8a9 	bl	8004ed0 <RTC_Bcd2ToByte>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	461a      	mov	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a0d      	ldr	r2, [pc, #52]	@ (8004dd8 <HAL_RTC_WaitForSynchro+0x48>)
 8004da2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004da4:	f7fc ff92 	bl	8001ccc <HAL_GetTick>
 8004da8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004daa:	e009      	b.n	8004dc0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004dac:	f7fc ff8e 	bl	8001ccc <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004dba:	d901      	bls.n	8004dc0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e007      	b.n	8004dd0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0ee      	beq.n	8004dac <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	00017f5f 	.word	0x00017f5f

08004ddc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d122      	bne.n	8004e40 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e08:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e0a:	f7fc ff5f 	bl	8001ccc <HAL_GetTick>
 8004e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004e10:	e00c      	b.n	8004e2c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e12:	f7fc ff5b 	bl	8001ccc <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e20:	d904      	bls.n	8004e2c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2204      	movs	r2, #4
 8004e26:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d102      	bne.n	8004e40 <RTC_EnterInitMode+0x64>
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d1e8      	bne.n	8004e12 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e64:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 0320 	and.w	r3, r3, #32
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10a      	bne.n	8004e8a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff ff8b 	bl	8004d90 <HAL_RTC_WaitForSynchro>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d004      	beq.n	8004e8a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2204      	movs	r2, #4
 8004e84:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004ea2:	e005      	b.n	8004eb0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	3b0a      	subs	r3, #10
 8004eae:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	2b09      	cmp	r3, #9
 8004eb4:	d8f6      	bhi.n	8004ea4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	b2db      	uxtb	r3, r3
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004ede:	79fb      	ldrb	r3, [r7, #7]
 8004ee0:	091b      	lsrs	r3, r3, #4
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	4413      	add	r3, r2
 8004efe:	b2db      	uxtb	r3, r3
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e07b      	b.n	8005016 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d108      	bne.n	8004f38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f2e:	d009      	beq.n	8004f44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	61da      	str	r2, [r3, #28]
 8004f36:	e005      	b.n	8004f44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fc fa80 	bl	8001464 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc8:	ea42 0103 	orr.w	r1, r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	0c1b      	lsrs	r3, r3, #16
 8004fe2:	f003 0104 	and.w	r1, r3, #4
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	f003 0210 	and.w	r2, r3, #16
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005004:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b088      	sub	sp, #32
 8005022:	af00      	add	r7, sp, #0
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	603b      	str	r3, [r7, #0]
 800502a:	4613      	mov	r3, r2
 800502c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800502e:	f7fc fe4d 	bl	8001ccc <HAL_GetTick>
 8005032:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005034:	88fb      	ldrh	r3, [r7, #6]
 8005036:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b01      	cmp	r3, #1
 8005042:	d001      	beq.n	8005048 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005044:	2302      	movs	r3, #2
 8005046:	e12a      	b.n	800529e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <HAL_SPI_Transmit+0x36>
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e122      	b.n	800529e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_SPI_Transmit+0x48>
 8005062:	2302      	movs	r3, #2
 8005064:	e11b      	b.n	800529e <HAL_SPI_Transmit+0x280>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2203      	movs	r2, #3
 8005072:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	88fa      	ldrh	r2, [r7, #6]
 8005086:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	88fa      	ldrh	r2, [r7, #6]
 800508c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050b4:	d10f      	bne.n	80050d6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e0:	2b40      	cmp	r3, #64	@ 0x40
 80050e2:	d007      	beq.n	80050f4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050fc:	d152      	bne.n	80051a4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <HAL_SPI_Transmit+0xee>
 8005106:	8b7b      	ldrh	r3, [r7, #26]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d145      	bne.n	8005198 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005110:	881a      	ldrh	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511c:	1c9a      	adds	r2, r3, #2
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005126:	b29b      	uxth	r3, r3
 8005128:	3b01      	subs	r3, #1
 800512a:	b29a      	uxth	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005130:	e032      	b.n	8005198 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b02      	cmp	r3, #2
 800513e:	d112      	bne.n	8005166 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005144:	881a      	ldrh	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005150:	1c9a      	adds	r2, r3, #2
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005164:	e018      	b.n	8005198 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005166:	f7fc fdb1 	bl	8001ccc <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d803      	bhi.n	800517e <HAL_SPI_Transmit+0x160>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517c:	d102      	bne.n	8005184 <HAL_SPI_Transmit+0x166>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d109      	bne.n	8005198 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e082      	b.n	800529e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1c7      	bne.n	8005132 <HAL_SPI_Transmit+0x114>
 80051a2:	e053      	b.n	800524c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <HAL_SPI_Transmit+0x194>
 80051ac:	8b7b      	ldrh	r3, [r7, #26]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d147      	bne.n	8005242 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	330c      	adds	r3, #12
 80051bc:	7812      	ldrb	r2, [r2, #0]
 80051be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051d8:	e033      	b.n	8005242 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d113      	bne.n	8005210 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	7812      	ldrb	r2, [r2, #0]
 80051f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005204:	b29b      	uxth	r3, r3
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800520e:	e018      	b.n	8005242 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005210:	f7fc fd5c 	bl	8001ccc <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d803      	bhi.n	8005228 <HAL_SPI_Transmit+0x20a>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005226:	d102      	bne.n	800522e <HAL_SPI_Transmit+0x210>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d109      	bne.n	8005242 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e02d      	b.n	800529e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1c6      	bne.n	80051da <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	6839      	ldr	r1, [r7, #0]
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 fa59 	bl	8005708 <SPI_EndRxTxTransaction>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2220      	movs	r2, #32
 8005260:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10a      	bne.n	8005280 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800526a:	2300      	movs	r3, #0
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800529c:	2300      	movs	r3, #0
  }
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b08a      	sub	sp, #40	@ 0x28
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	607a      	str	r2, [r7, #4]
 80052b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052b4:	2301      	movs	r3, #1
 80052b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052b8:	f7fc fd08 	bl	8001ccc <HAL_GetTick>
 80052bc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052c4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80052cc:	887b      	ldrh	r3, [r7, #2]
 80052ce:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052d0:	7ffb      	ldrb	r3, [r7, #31]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d00c      	beq.n	80052f0 <HAL_SPI_TransmitReceive+0x4a>
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052dc:	d106      	bne.n	80052ec <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <HAL_SPI_TransmitReceive+0x46>
 80052e6:	7ffb      	ldrb	r3, [r7, #31]
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d001      	beq.n	80052f0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80052ec:	2302      	movs	r3, #2
 80052ee:	e17f      	b.n	80055f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <HAL_SPI_TransmitReceive+0x5c>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_SPI_TransmitReceive+0x5c>
 80052fc:	887b      	ldrh	r3, [r7, #2]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e174      	b.n	80055f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_SPI_TransmitReceive+0x6e>
 8005310:	2302      	movs	r3, #2
 8005312:	e16d      	b.n	80055f0 <HAL_SPI_TransmitReceive+0x34a>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b04      	cmp	r3, #4
 8005326:	d003      	beq.n	8005330 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2205      	movs	r2, #5
 800532c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	887a      	ldrh	r2, [r7, #2]
 8005340:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	887a      	ldrh	r2, [r7, #2]
 8005346:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	887a      	ldrh	r2, [r7, #2]
 8005352:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	887a      	ldrh	r2, [r7, #2]
 8005358:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005370:	2b40      	cmp	r3, #64	@ 0x40
 8005372:	d007      	beq.n	8005384 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005382:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800538c:	d17e      	bne.n	800548c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <HAL_SPI_TransmitReceive+0xf6>
 8005396:	8afb      	ldrh	r3, [r7, #22]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d16c      	bne.n	8005476 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a0:	881a      	ldrh	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ac:	1c9a      	adds	r2, r3, #2
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053c0:	e059      	b.n	8005476 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d11b      	bne.n	8005408 <HAL_SPI_TransmitReceive+0x162>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d016      	beq.n	8005408 <HAL_SPI_TransmitReceive+0x162>
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d113      	bne.n	8005408 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e4:	881a      	ldrh	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f0:	1c9a      	adds	r2, r3, #2
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b01      	cmp	r3, #1
 8005414:	d119      	bne.n	800544a <HAL_SPI_TransmitReceive+0x1a4>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800541a:	b29b      	uxth	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d014      	beq.n	800544a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800542a:	b292      	uxth	r2, r2
 800542c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005432:	1c9a      	adds	r2, r3, #2
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b01      	subs	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005446:	2301      	movs	r3, #1
 8005448:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800544a:	f7fc fc3f 	bl	8001ccc <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005456:	429a      	cmp	r2, r3
 8005458:	d80d      	bhi.n	8005476 <HAL_SPI_TransmitReceive+0x1d0>
 800545a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d009      	beq.n	8005476 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e0bc      	b.n	80055f0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1a0      	bne.n	80053c2 <HAL_SPI_TransmitReceive+0x11c>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d19b      	bne.n	80053c2 <HAL_SPI_TransmitReceive+0x11c>
 800548a:	e082      	b.n	8005592 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_SPI_TransmitReceive+0x1f4>
 8005494:	8afb      	ldrh	r3, [r7, #22]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d171      	bne.n	800557e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	330c      	adds	r3, #12
 80054a4:	7812      	ldrb	r2, [r2, #0]
 80054a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054c0:	e05d      	b.n	800557e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d11c      	bne.n	800550a <HAL_SPI_TransmitReceive+0x264>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d017      	beq.n	800550a <HAL_SPI_TransmitReceive+0x264>
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d114      	bne.n	800550a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	330c      	adds	r3, #12
 80054ea:	7812      	ldrb	r2, [r2, #0]
 80054ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b01      	cmp	r3, #1
 8005516:	d119      	bne.n	800554c <HAL_SPI_TransmitReceive+0x2a6>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d014      	beq.n	800554c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005548:	2301      	movs	r3, #1
 800554a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800554c:	f7fc fbbe 	bl	8001ccc <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005558:	429a      	cmp	r2, r3
 800555a:	d803      	bhi.n	8005564 <HAL_SPI_TransmitReceive+0x2be>
 800555c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005562:	d102      	bne.n	800556a <HAL_SPI_TransmitReceive+0x2c4>
 8005564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005566:	2b00      	cmp	r3, #0
 8005568:	d109      	bne.n	800557e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e038      	b.n	80055f0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d19c      	bne.n	80054c2 <HAL_SPI_TransmitReceive+0x21c>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800558c:	b29b      	uxth	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d197      	bne.n	80054c2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005592:	6a3a      	ldr	r2, [r7, #32]
 8005594:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f8b6 	bl	8005708 <SPI_EndRxTxTransaction>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d008      	beq.n	80055b4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e01d      	b.n	80055f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10a      	bne.n	80055d2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055bc:	2300      	movs	r3, #0
 80055be:	613b      	str	r3, [r7, #16]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80055ee:	2300      	movs	r3, #0
  }
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3728      	adds	r7, #40	@ 0x28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	4613      	mov	r3, r2
 8005606:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005608:	f7fc fb60 	bl	8001ccc <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	4413      	add	r3, r2
 8005616:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005618:	f7fc fb58 	bl	8001ccc <HAL_GetTick>
 800561c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800561e:	4b39      	ldr	r3, [pc, #228]	@ (8005704 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	015b      	lsls	r3, r3, #5
 8005624:	0d1b      	lsrs	r3, r3, #20
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	fb02 f303 	mul.w	r3, r2, r3
 800562c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800562e:	e054      	b.n	80056da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005636:	d050      	beq.n	80056da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005638:	f7fc fb48 	bl	8001ccc <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	429a      	cmp	r2, r3
 8005646:	d902      	bls.n	800564e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d13d      	bne.n	80056ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800565c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005666:	d111      	bne.n	800568c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005670:	d004      	beq.n	800567c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800567a:	d107      	bne.n	800568c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800568a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005690:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005694:	d10f      	bne.n	80056b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e017      	b.n	80056fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4013      	ands	r3, r2
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	bf0c      	ite	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	2300      	movne	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d19b      	bne.n	8005630 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20000004 	.word	0x20000004

08005708 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af02      	add	r7, sp, #8
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2201      	movs	r2, #1
 800571c:	2102      	movs	r1, #2
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f7ff ff6a 	bl	80055f8 <SPI_WaitFlagStateUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d007      	beq.n	800573a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572e:	f043 0220 	orr.w	r2, r3, #32
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e032      	b.n	80057a0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800573a:	4b1b      	ldr	r3, [pc, #108]	@ (80057a8 <SPI_EndRxTxTransaction+0xa0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a1b      	ldr	r2, [pc, #108]	@ (80057ac <SPI_EndRxTxTransaction+0xa4>)
 8005740:	fba2 2303 	umull	r2, r3, r2, r3
 8005744:	0d5b      	lsrs	r3, r3, #21
 8005746:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800574a:	fb02 f303 	mul.w	r3, r2, r3
 800574e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005758:	d112      	bne.n	8005780 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2200      	movs	r2, #0
 8005762:	2180      	movs	r1, #128	@ 0x80
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f7ff ff47 	bl	80055f8 <SPI_WaitFlagStateUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d016      	beq.n	800579e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005774:	f043 0220 	orr.w	r2, r3, #32
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e00f      	b.n	80057a0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	3b01      	subs	r3, #1
 800578a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005796:	2b80      	cmp	r3, #128	@ 0x80
 8005798:	d0f2      	beq.n	8005780 <SPI_EndRxTxTransaction+0x78>
 800579a:	e000      	b.n	800579e <SPI_EndRxTxTransaction+0x96>
        break;
 800579c:	bf00      	nop
  }

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	20000004 	.word	0x20000004
 80057ac:	165e9f81 	.word	0x165e9f81

080057b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e041      	b.n	8005846 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d106      	bne.n	80057dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fb fec2 	bl	8001560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3304      	adds	r3, #4
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f000 fc62 	bl	80060b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	d001      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e04e      	b.n	8005906 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a23      	ldr	r2, [pc, #140]	@ (8005914 <HAL_TIM_Base_Start_IT+0xc4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d022      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x80>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005892:	d01d      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x80>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1f      	ldr	r2, [pc, #124]	@ (8005918 <HAL_TIM_Base_Start_IT+0xc8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d018      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x80>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1e      	ldr	r2, [pc, #120]	@ (800591c <HAL_TIM_Base_Start_IT+0xcc>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d013      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x80>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005920 <HAL_TIM_Base_Start_IT+0xd0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00e      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x80>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005924 <HAL_TIM_Base_Start_IT+0xd4>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d009      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x80>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a19      	ldr	r2, [pc, #100]	@ (8005928 <HAL_TIM_Base_Start_IT+0xd8>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d004      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x80>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a18      	ldr	r2, [pc, #96]	@ (800592c <HAL_TIM_Base_Start_IT+0xdc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d111      	bne.n	80058f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b06      	cmp	r3, #6
 80058e0:	d010      	beq.n	8005904 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0201 	orr.w	r2, r2, #1
 80058f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f2:	e007      	b.n	8005904 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0201 	orr.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40010000 	.word	0x40010000
 8005918:	40000400 	.word	0x40000400
 800591c:	40000800 	.word	0x40000800
 8005920:	40000c00 	.word	0x40000c00
 8005924:	40010400 	.word	0x40010400
 8005928:	40014000 	.word	0x40014000
 800592c:	40001800 	.word	0x40001800

08005930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e041      	b.n	80059c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d106      	bne.n	800595c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f839 	bl	80059ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3304      	adds	r3, #4
 800596c:	4619      	mov	r1, r3
 800596e:	4610      	mov	r0, r2
 8005970:	f000 fba2 	bl	80060b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
	...

080059e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d109      	bne.n	8005a08 <HAL_TIM_PWM_Start+0x24>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	bf14      	ite	ne
 8005a00:	2301      	movne	r3, #1
 8005a02:	2300      	moveq	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	e022      	b.n	8005a4e <HAL_TIM_PWM_Start+0x6a>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d109      	bne.n	8005a22 <HAL_TIM_PWM_Start+0x3e>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	bf14      	ite	ne
 8005a1a:	2301      	movne	r3, #1
 8005a1c:	2300      	moveq	r3, #0
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	e015      	b.n	8005a4e <HAL_TIM_PWM_Start+0x6a>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d109      	bne.n	8005a3c <HAL_TIM_PWM_Start+0x58>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	bf14      	ite	ne
 8005a34:	2301      	movne	r3, #1
 8005a36:	2300      	moveq	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	e008      	b.n	8005a4e <HAL_TIM_PWM_Start+0x6a>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	bf14      	ite	ne
 8005a48:	2301      	movne	r3, #1
 8005a4a:	2300      	moveq	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e07c      	b.n	8005b50 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <HAL_TIM_PWM_Start+0x82>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a64:	e013      	b.n	8005a8e <HAL_TIM_PWM_Start+0xaa>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d104      	bne.n	8005a76 <HAL_TIM_PWM_Start+0x92>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a74:	e00b      	b.n	8005a8e <HAL_TIM_PWM_Start+0xaa>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d104      	bne.n	8005a86 <HAL_TIM_PWM_Start+0xa2>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a84:	e003      	b.n	8005a8e <HAL_TIM_PWM_Start+0xaa>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2201      	movs	r2, #1
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fe04 	bl	80066a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8005b58 <HAL_TIM_PWM_Start+0x174>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d004      	beq.n	8005ab0 <HAL_TIM_PWM_Start+0xcc>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a2c      	ldr	r2, [pc, #176]	@ (8005b5c <HAL_TIM_PWM_Start+0x178>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d101      	bne.n	8005ab4 <HAL_TIM_PWM_Start+0xd0>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e000      	b.n	8005ab6 <HAL_TIM_PWM_Start+0xd2>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ac8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a22      	ldr	r2, [pc, #136]	@ (8005b58 <HAL_TIM_PWM_Start+0x174>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d022      	beq.n	8005b1a <HAL_TIM_PWM_Start+0x136>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005adc:	d01d      	beq.n	8005b1a <HAL_TIM_PWM_Start+0x136>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8005b60 <HAL_TIM_PWM_Start+0x17c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d018      	beq.n	8005b1a <HAL_TIM_PWM_Start+0x136>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a1d      	ldr	r2, [pc, #116]	@ (8005b64 <HAL_TIM_PWM_Start+0x180>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d013      	beq.n	8005b1a <HAL_TIM_PWM_Start+0x136>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b68 <HAL_TIM_PWM_Start+0x184>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00e      	beq.n	8005b1a <HAL_TIM_PWM_Start+0x136>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a16      	ldr	r2, [pc, #88]	@ (8005b5c <HAL_TIM_PWM_Start+0x178>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d009      	beq.n	8005b1a <HAL_TIM_PWM_Start+0x136>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a18      	ldr	r2, [pc, #96]	@ (8005b6c <HAL_TIM_PWM_Start+0x188>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d004      	beq.n	8005b1a <HAL_TIM_PWM_Start+0x136>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a16      	ldr	r2, [pc, #88]	@ (8005b70 <HAL_TIM_PWM_Start+0x18c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d111      	bne.n	8005b3e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0307 	and.w	r3, r3, #7
 8005b24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b06      	cmp	r3, #6
 8005b2a:	d010      	beq.n	8005b4e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b3c:	e007      	b.n	8005b4e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f042 0201 	orr.w	r2, r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	40010400 	.word	0x40010400
 8005b60:	40000400 	.word	0x40000400
 8005b64:	40000800 	.word	0x40000800
 8005b68:	40000c00 	.word	0x40000c00
 8005b6c:	40014000 	.word	0x40014000
 8005b70:	40001800 	.word	0x40001800

08005b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d020      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01b      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0202 	mvn.w	r2, #2
 8005ba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fa5b 	bl	800607a <HAL_TIM_IC_CaptureCallback>
 8005bc4:	e005      	b.n	8005bd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fa4d 	bl	8006066 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fa5e 	bl	800608e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d020      	beq.n	8005c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01b      	beq.n	8005c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0204 	mvn.w	r2, #4
 8005bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fa35 	bl	800607a <HAL_TIM_IC_CaptureCallback>
 8005c10:	e005      	b.n	8005c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa27 	bl	8006066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fa38 	bl	800608e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d020      	beq.n	8005c70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01b      	beq.n	8005c70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0208 	mvn.w	r2, #8
 8005c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2204      	movs	r2, #4
 8005c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fa0f 	bl	800607a <HAL_TIM_IC_CaptureCallback>
 8005c5c:	e005      	b.n	8005c6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fa01 	bl	8006066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fa12 	bl	800608e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f003 0310 	and.w	r3, r3, #16
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d020      	beq.n	8005cbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f003 0310 	and.w	r3, r3, #16
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01b      	beq.n	8005cbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f06f 0210 	mvn.w	r2, #16
 8005c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2208      	movs	r2, #8
 8005c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f9e9 	bl	800607a <HAL_TIM_IC_CaptureCallback>
 8005ca8:	e005      	b.n	8005cb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f9db 	bl	8006066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f9ec 	bl	800608e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00c      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d007      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0201 	mvn.w	r2, #1
 8005cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fb f926 	bl	8000f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00c      	beq.n	8005d04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d007      	beq.n	8005d04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fd7c 	bl	80067fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00c      	beq.n	8005d28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d007      	beq.n	8005d28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f9bd 	bl	80060a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f003 0320 	and.w	r3, r3, #32
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00c      	beq.n	8005d4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d007      	beq.n	8005d4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f06f 0220 	mvn.w	r2, #32
 8005d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fd4e 	bl	80067e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e0ae      	b.n	8005ed0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b0c      	cmp	r3, #12
 8005d7e:	f200 809f 	bhi.w	8005ec0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d82:	a201      	add	r2, pc, #4	@ (adr r2, 8005d88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d88:	08005dbd 	.word	0x08005dbd
 8005d8c:	08005ec1 	.word	0x08005ec1
 8005d90:	08005ec1 	.word	0x08005ec1
 8005d94:	08005ec1 	.word	0x08005ec1
 8005d98:	08005dfd 	.word	0x08005dfd
 8005d9c:	08005ec1 	.word	0x08005ec1
 8005da0:	08005ec1 	.word	0x08005ec1
 8005da4:	08005ec1 	.word	0x08005ec1
 8005da8:	08005e3f 	.word	0x08005e3f
 8005dac:	08005ec1 	.word	0x08005ec1
 8005db0:	08005ec1 	.word	0x08005ec1
 8005db4:	08005ec1 	.word	0x08005ec1
 8005db8:	08005e7f 	.word	0x08005e7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68b9      	ldr	r1, [r7, #8]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 fa24 	bl	8006210 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0208 	orr.w	r2, r2, #8
 8005dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 0204 	bic.w	r2, r2, #4
 8005de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6999      	ldr	r1, [r3, #24]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	619a      	str	r2, [r3, #24]
      break;
 8005dfa:	e064      	b.n	8005ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68b9      	ldr	r1, [r7, #8]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fa74 	bl	80062f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699a      	ldr	r2, [r3, #24]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6999      	ldr	r1, [r3, #24]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	021a      	lsls	r2, r3, #8
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	619a      	str	r2, [r3, #24]
      break;
 8005e3c:	e043      	b.n	8005ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68b9      	ldr	r1, [r7, #8]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 fac9 	bl	80063dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0208 	orr.w	r2, r2, #8
 8005e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69da      	ldr	r2, [r3, #28]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0204 	bic.w	r2, r2, #4
 8005e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69d9      	ldr	r1, [r3, #28]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	61da      	str	r2, [r3, #28]
      break;
 8005e7c:	e023      	b.n	8005ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fb1d 	bl	80064c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69da      	ldr	r2, [r3, #28]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69da      	ldr	r2, [r3, #28]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69d9      	ldr	r1, [r3, #28]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	021a      	lsls	r2, r3, #8
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	61da      	str	r2, [r3, #28]
      break;
 8005ebe:	e002      	b.n	8005ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ec4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d101      	bne.n	8005ef4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	e0b4      	b.n	800605e <HAL_TIM_ConfigClockSource+0x186>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f2c:	d03e      	beq.n	8005fac <HAL_TIM_ConfigClockSource+0xd4>
 8005f2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f32:	f200 8087 	bhi.w	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f3a:	f000 8086 	beq.w	800604a <HAL_TIM_ConfigClockSource+0x172>
 8005f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f42:	d87f      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f44:	2b70      	cmp	r3, #112	@ 0x70
 8005f46:	d01a      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0xa6>
 8005f48:	2b70      	cmp	r3, #112	@ 0x70
 8005f4a:	d87b      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f4c:	2b60      	cmp	r3, #96	@ 0x60
 8005f4e:	d050      	beq.n	8005ff2 <HAL_TIM_ConfigClockSource+0x11a>
 8005f50:	2b60      	cmp	r3, #96	@ 0x60
 8005f52:	d877      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f54:	2b50      	cmp	r3, #80	@ 0x50
 8005f56:	d03c      	beq.n	8005fd2 <HAL_TIM_ConfigClockSource+0xfa>
 8005f58:	2b50      	cmp	r3, #80	@ 0x50
 8005f5a:	d873      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f5c:	2b40      	cmp	r3, #64	@ 0x40
 8005f5e:	d058      	beq.n	8006012 <HAL_TIM_ConfigClockSource+0x13a>
 8005f60:	2b40      	cmp	r3, #64	@ 0x40
 8005f62:	d86f      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f64:	2b30      	cmp	r3, #48	@ 0x30
 8005f66:	d064      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x15a>
 8005f68:	2b30      	cmp	r3, #48	@ 0x30
 8005f6a:	d86b      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f6c:	2b20      	cmp	r3, #32
 8005f6e:	d060      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x15a>
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d867      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d05c      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x15a>
 8005f78:	2b10      	cmp	r3, #16
 8005f7a:	d05a      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x15a>
 8005f7c:	e062      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f8e:	f000 fb69 	bl	8006664 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fa0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	609a      	str	r2, [r3, #8]
      break;
 8005faa:	e04f      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fbc:	f000 fb52 	bl	8006664 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fce:	609a      	str	r2, [r3, #8]
      break;
 8005fd0:	e03c      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f000 fac6 	bl	8006570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2150      	movs	r1, #80	@ 0x50
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fb1f 	bl	800662e <TIM_ITRx_SetConfig>
      break;
 8005ff0:	e02c      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ffe:	461a      	mov	r2, r3
 8006000:	f000 fae5 	bl	80065ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2160      	movs	r1, #96	@ 0x60
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fb0f 	bl	800662e <TIM_ITRx_SetConfig>
      break;
 8006010:	e01c      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800601e:	461a      	mov	r2, r3
 8006020:	f000 faa6 	bl	8006570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2140      	movs	r1, #64	@ 0x40
 800602a:	4618      	mov	r0, r3
 800602c:	f000 faff 	bl	800662e <TIM_ITRx_SetConfig>
      break;
 8006030:	e00c      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4619      	mov	r1, r3
 800603c:	4610      	mov	r0, r2
 800603e:	f000 faf6 	bl	800662e <TIM_ITRx_SetConfig>
      break;
 8006042:	e003      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	73fb      	strb	r3, [r7, #15]
      break;
 8006048:	e000      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800604a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006082:	bf00      	nop
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
	...

080060b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a46      	ldr	r2, [pc, #280]	@ (80061e4 <TIM_Base_SetConfig+0x12c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d013      	beq.n	80060f8 <TIM_Base_SetConfig+0x40>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060d6:	d00f      	beq.n	80060f8 <TIM_Base_SetConfig+0x40>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a43      	ldr	r2, [pc, #268]	@ (80061e8 <TIM_Base_SetConfig+0x130>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00b      	beq.n	80060f8 <TIM_Base_SetConfig+0x40>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a42      	ldr	r2, [pc, #264]	@ (80061ec <TIM_Base_SetConfig+0x134>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d007      	beq.n	80060f8 <TIM_Base_SetConfig+0x40>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a41      	ldr	r2, [pc, #260]	@ (80061f0 <TIM_Base_SetConfig+0x138>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d003      	beq.n	80060f8 <TIM_Base_SetConfig+0x40>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a40      	ldr	r2, [pc, #256]	@ (80061f4 <TIM_Base_SetConfig+0x13c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d108      	bne.n	800610a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	4313      	orrs	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a35      	ldr	r2, [pc, #212]	@ (80061e4 <TIM_Base_SetConfig+0x12c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d02b      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006118:	d027      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a32      	ldr	r2, [pc, #200]	@ (80061e8 <TIM_Base_SetConfig+0x130>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d023      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a31      	ldr	r2, [pc, #196]	@ (80061ec <TIM_Base_SetConfig+0x134>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d01f      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a30      	ldr	r2, [pc, #192]	@ (80061f0 <TIM_Base_SetConfig+0x138>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d01b      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a2f      	ldr	r2, [pc, #188]	@ (80061f4 <TIM_Base_SetConfig+0x13c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d017      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a2e      	ldr	r2, [pc, #184]	@ (80061f8 <TIM_Base_SetConfig+0x140>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d013      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a2d      	ldr	r2, [pc, #180]	@ (80061fc <TIM_Base_SetConfig+0x144>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00f      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a2c      	ldr	r2, [pc, #176]	@ (8006200 <TIM_Base_SetConfig+0x148>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00b      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a2b      	ldr	r2, [pc, #172]	@ (8006204 <TIM_Base_SetConfig+0x14c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d007      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a2a      	ldr	r2, [pc, #168]	@ (8006208 <TIM_Base_SetConfig+0x150>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d003      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a29      	ldr	r2, [pc, #164]	@ (800620c <TIM_Base_SetConfig+0x154>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d108      	bne.n	800617c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	4313      	orrs	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a10      	ldr	r2, [pc, #64]	@ (80061e4 <TIM_Base_SetConfig+0x12c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_Base_SetConfig+0xf8>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a12      	ldr	r2, [pc, #72]	@ (80061f4 <TIM_Base_SetConfig+0x13c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d103      	bne.n	80061b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d105      	bne.n	80061d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f023 0201 	bic.w	r2, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	611a      	str	r2, [r3, #16]
  }
}
 80061d6:	bf00      	nop
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40000400 	.word	0x40000400
 80061ec:	40000800 	.word	0x40000800
 80061f0:	40000c00 	.word	0x40000c00
 80061f4:	40010400 	.word	0x40010400
 80061f8:	40014000 	.word	0x40014000
 80061fc:	40014400 	.word	0x40014400
 8006200:	40014800 	.word	0x40014800
 8006204:	40001800 	.word	0x40001800
 8006208:	40001c00 	.word	0x40001c00
 800620c:	40002000 	.word	0x40002000

08006210 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f023 0201 	bic.w	r2, r3, #1
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800623e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0303 	bic.w	r3, r3, #3
 8006246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f023 0302 	bic.w	r3, r3, #2
 8006258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a20      	ldr	r2, [pc, #128]	@ (80062e8 <TIM_OC1_SetConfig+0xd8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <TIM_OC1_SetConfig+0x64>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a1f      	ldr	r2, [pc, #124]	@ (80062ec <TIM_OC1_SetConfig+0xdc>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d10c      	bne.n	800628e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f023 0308 	bic.w	r3, r3, #8
 800627a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f023 0304 	bic.w	r3, r3, #4
 800628c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a15      	ldr	r2, [pc, #84]	@ (80062e8 <TIM_OC1_SetConfig+0xd8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d003      	beq.n	800629e <TIM_OC1_SetConfig+0x8e>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a14      	ldr	r2, [pc, #80]	@ (80062ec <TIM_OC1_SetConfig+0xdc>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d111      	bne.n	80062c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	621a      	str	r2, [r3, #32]
}
 80062dc:	bf00      	nop
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	40010000 	.word	0x40010000
 80062ec:	40010400 	.word	0x40010400

080062f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	f023 0210 	bic.w	r2, r3, #16
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800631e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	021b      	lsls	r3, r3, #8
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f023 0320 	bic.w	r3, r3, #32
 800633a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	011b      	lsls	r3, r3, #4
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	4313      	orrs	r3, r2
 8006346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a22      	ldr	r2, [pc, #136]	@ (80063d4 <TIM_OC2_SetConfig+0xe4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_OC2_SetConfig+0x68>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a21      	ldr	r2, [pc, #132]	@ (80063d8 <TIM_OC2_SetConfig+0xe8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d10d      	bne.n	8006374 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800635e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	011b      	lsls	r3, r3, #4
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006372:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a17      	ldr	r2, [pc, #92]	@ (80063d4 <TIM_OC2_SetConfig+0xe4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d003      	beq.n	8006384 <TIM_OC2_SetConfig+0x94>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a16      	ldr	r2, [pc, #88]	@ (80063d8 <TIM_OC2_SetConfig+0xe8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d113      	bne.n	80063ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800638a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006392:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	4313      	orrs	r3, r2
 800639e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	621a      	str	r2, [r3, #32]
}
 80063c6:	bf00      	nop
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	40010000 	.word	0x40010000
 80063d8:	40010400 	.word	0x40010400

080063dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0303 	bic.w	r3, r3, #3
 8006412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	021b      	lsls	r3, r3, #8
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a21      	ldr	r2, [pc, #132]	@ (80064bc <TIM_OC3_SetConfig+0xe0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d003      	beq.n	8006442 <TIM_OC3_SetConfig+0x66>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a20      	ldr	r2, [pc, #128]	@ (80064c0 <TIM_OC3_SetConfig+0xe4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d10d      	bne.n	800645e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800645c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a16      	ldr	r2, [pc, #88]	@ (80064bc <TIM_OC3_SetConfig+0xe0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d003      	beq.n	800646e <TIM_OC3_SetConfig+0x92>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a15      	ldr	r2, [pc, #84]	@ (80064c0 <TIM_OC3_SetConfig+0xe4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d113      	bne.n	8006496 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800647c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	011b      	lsls	r3, r3, #4
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4313      	orrs	r3, r2
 8006494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	621a      	str	r2, [r3, #32]
}
 80064b0:	bf00      	nop
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	40010000 	.word	0x40010000
 80064c0:	40010400 	.word	0x40010400

080064c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	021b      	lsls	r3, r3, #8
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4313      	orrs	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800650e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	031b      	lsls	r3, r3, #12
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a12      	ldr	r2, [pc, #72]	@ (8006568 <TIM_OC4_SetConfig+0xa4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d003      	beq.n	800652c <TIM_OC4_SetConfig+0x68>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a11      	ldr	r2, [pc, #68]	@ (800656c <TIM_OC4_SetConfig+0xa8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d109      	bne.n	8006540 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006532:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	019b      	lsls	r3, r3, #6
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	621a      	str	r2, [r3, #32]
}
 800655a:	bf00      	nop
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	40010000 	.word	0x40010000
 800656c:	40010400 	.word	0x40010400

08006570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	f023 0201 	bic.w	r2, r3, #1
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800659a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f023 030a 	bic.w	r3, r3, #10
 80065ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	621a      	str	r2, [r3, #32]
}
 80065c2:	bf00      	nop
 80065c4:	371c      	adds	r7, #28
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b087      	sub	sp, #28
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	f023 0210 	bic.w	r2, r3, #16
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	031b      	lsls	r3, r3, #12
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800660a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	621a      	str	r2, [r3, #32]
}
 8006622:	bf00      	nop
 8006624:	371c      	adds	r7, #28
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800662e:	b480      	push	{r7}
 8006630:	b085      	sub	sp, #20
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	f043 0307 	orr.w	r3, r3, #7
 8006650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	609a      	str	r2, [r3, #8]
}
 8006658:	bf00      	nop
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800667e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	021a      	lsls	r2, r3, #8
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	431a      	orrs	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	4313      	orrs	r3, r2
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	609a      	str	r2, [r3, #8]
}
 8006698:	bf00      	nop
 800669a:	371c      	adds	r7, #28
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f003 031f 	and.w	r3, r3, #31
 80066b6:	2201      	movs	r2, #1
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a1a      	ldr	r2, [r3, #32]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	43db      	mvns	r3, r3
 80066c6:	401a      	ands	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a1a      	ldr	r2, [r3, #32]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 031f 	and.w	r3, r3, #31
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	fa01 f303 	lsl.w	r3, r1, r3
 80066dc:	431a      	orrs	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	621a      	str	r2, [r3, #32]
}
 80066e2:	bf00      	nop
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
	...

080066f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006704:	2302      	movs	r3, #2
 8006706:	e05a      	b.n	80067be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800672e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a21      	ldr	r2, [pc, #132]	@ (80067cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d022      	beq.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006754:	d01d      	beq.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a1d      	ldr	r2, [pc, #116]	@ (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d018      	beq.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a1b      	ldr	r2, [pc, #108]	@ (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d013      	beq.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a1a      	ldr	r2, [pc, #104]	@ (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00e      	beq.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a18      	ldr	r2, [pc, #96]	@ (80067dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d009      	beq.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a17      	ldr	r2, [pc, #92]	@ (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d004      	beq.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a15      	ldr	r2, [pc, #84]	@ (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d10c      	bne.n	80067ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	40010000 	.word	0x40010000
 80067d0:	40000400 	.word	0x40000400
 80067d4:	40000800 	.word	0x40000800
 80067d8:	40000c00 	.word	0x40000c00
 80067dc:	40010400 	.word	0x40010400
 80067e0:	40014000 	.word	0x40014000
 80067e4:	40001800 	.word	0x40001800

080067e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e042      	b.n	80068a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d106      	bne.n	800683c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fa ff34 	bl	80016a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2224      	movs	r2, #36	@ 0x24
 8006840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f001 f81d 	bl	8007894 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691a      	ldr	r2, [r3, #16]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695a      	ldr	r2, [r3, #20]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08a      	sub	sp, #40	@ 0x28
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	4613      	mov	r3, r2
 80068be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	d175      	bne.n	80069bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <HAL_UART_Transmit+0x2c>
 80068d6:	88fb      	ldrh	r3, [r7, #6]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e06e      	b.n	80069be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2221      	movs	r2, #33	@ 0x21
 80068ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068ee:	f7fb f9ed 	bl	8001ccc <HAL_GetTick>
 80068f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	88fa      	ldrh	r2, [r7, #6]
 80068fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006908:	d108      	bne.n	800691c <HAL_UART_Transmit+0x6c>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d104      	bne.n	800691c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006912:	2300      	movs	r3, #0
 8006914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	61bb      	str	r3, [r7, #24]
 800691a:	e003      	b.n	8006924 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006920:	2300      	movs	r3, #0
 8006922:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006924:	e02e      	b.n	8006984 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2200      	movs	r2, #0
 800692e:	2180      	movs	r1, #128	@ 0x80
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 fcf5 	bl	8007320 <UART_WaitOnFlagUntilTimeout>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d005      	beq.n	8006948 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2220      	movs	r2, #32
 8006940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e03a      	b.n	80069be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10b      	bne.n	8006966 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800695c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	3302      	adds	r3, #2
 8006962:	61bb      	str	r3, [r7, #24]
 8006964:	e007      	b.n	8006976 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	781a      	ldrb	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	3301      	adds	r3, #1
 8006974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800697a:	b29b      	uxth	r3, r3
 800697c:	3b01      	subs	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1cb      	bne.n	8006926 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2200      	movs	r2, #0
 8006996:	2140      	movs	r1, #64	@ 0x40
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 fcc1 	bl	8007320 <UART_WaitOnFlagUntilTimeout>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d005      	beq.n	80069b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e006      	b.n	80069be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80069b8:	2300      	movs	r3, #0
 80069ba:	e000      	b.n	80069be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80069bc:	2302      	movs	r3, #2
  }
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3720      	adds	r7, #32
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b08a      	sub	sp, #40	@ 0x28
 80069ca:	af02      	add	r7, sp, #8
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	4613      	mov	r3, r2
 80069d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	f040 8081 	bne.w	8006aea <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <HAL_UART_Receive+0x2e>
 80069ee:	88fb      	ldrh	r3, [r7, #6]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e079      	b.n	8006aec <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2222      	movs	r2, #34	@ 0x22
 8006a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a0c:	f7fb f95e 	bl	8001ccc <HAL_GetTick>
 8006a10:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	88fa      	ldrh	r2, [r7, #6]
 8006a16:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	88fa      	ldrh	r2, [r7, #6]
 8006a1c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a26:	d108      	bne.n	8006a3a <HAL_UART_Receive+0x74>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d104      	bne.n	8006a3a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006a30:	2300      	movs	r3, #0
 8006a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	61bb      	str	r3, [r7, #24]
 8006a38:	e003      	b.n	8006a42 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006a42:	e047      	b.n	8006ad4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	2120      	movs	r1, #32
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 fc66 	bl	8007320 <UART_WaitOnFlagUntilTimeout>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d005      	beq.n	8006a66 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e042      	b.n	8006aec <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10c      	bne.n	8006a86 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	3302      	adds	r3, #2
 8006a82:	61bb      	str	r3, [r7, #24]
 8006a84:	e01f      	b.n	8006ac6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a8e:	d007      	beq.n	8006aa0 <HAL_UART_Receive+0xda>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10a      	bne.n	8006aae <HAL_UART_Receive+0xe8>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d106      	bne.n	8006aae <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	e008      	b.n	8006ac0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	3b01      	subs	r3, #1
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1b2      	bne.n	8006a44 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	e000      	b.n	8006aec <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006aea:	2302      	movs	r3, #2
  }
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3720      	adds	r7, #32
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08c      	sub	sp, #48	@ 0x30
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	4613      	mov	r3, r2
 8006b00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d14a      	bne.n	8006ba4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006b14:	88fb      	ldrh	r3, [r7, #6]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e043      	b.n	8006ba6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006b2a:	88fb      	ldrh	r3, [r7, #6]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	68b9      	ldr	r1, [r7, #8]
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 fc4f 	bl	80073d4 <UART_Start_Receive_DMA>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006b3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d12c      	bne.n	8006b9e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d125      	bne.n	8006b98 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	613b      	str	r3, [r7, #16]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	613b      	str	r3, [r7, #16]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	330c      	adds	r3, #12
 8006b68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	e853 3f00 	ldrex	r3, [r3]
 8006b70:	617b      	str	r3, [r7, #20]
   return(result);
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f043 0310 	orr.w	r3, r3, #16
 8006b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	330c      	adds	r3, #12
 8006b80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b82:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	6a39      	ldr	r1, [r7, #32]
 8006b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e5      	bne.n	8006b62 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006b96:	e002      	b.n	8006b9e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ba2:	e000      	b.n	8006ba6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006ba4:	2302      	movs	r3, #2
  }
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3730      	adds	r7, #48	@ 0x30
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b0ba      	sub	sp, #232	@ 0xe8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006be6:	f003 030f 	and.w	r3, r3, #15
 8006bea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006bee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10f      	bne.n	8006c16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d009      	beq.n	8006c16 <HAL_UART_IRQHandler+0x66>
 8006c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fd81 	bl	8007716 <UART_Receive_IT>
      return;
 8006c14:	e25b      	b.n	80070ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 80de 	beq.w	8006ddc <HAL_UART_IRQHandler+0x22c>
 8006c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d106      	bne.n	8006c3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 80d1 	beq.w	8006ddc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00b      	beq.n	8006c5e <HAL_UART_IRQHandler+0xae>
 8006c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d005      	beq.n	8006c5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c56:	f043 0201 	orr.w	r2, r3, #1
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c62:	f003 0304 	and.w	r3, r3, #4
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00b      	beq.n	8006c82 <HAL_UART_IRQHandler+0xd2>
 8006c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c7a:	f043 0202 	orr.w	r2, r3, #2
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00b      	beq.n	8006ca6 <HAL_UART_IRQHandler+0xf6>
 8006c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d005      	beq.n	8006ca6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c9e:	f043 0204 	orr.w	r2, r3, #4
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006caa:	f003 0308 	and.w	r3, r3, #8
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d011      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x126>
 8006cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d105      	bne.n	8006cca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cce:	f043 0208 	orr.w	r2, r3, #8
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 81f2 	beq.w	80070c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ce4:	f003 0320 	and.w	r3, r3, #32
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d008      	beq.n	8006cfe <HAL_UART_IRQHandler+0x14e>
 8006cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf0:	f003 0320 	and.w	r3, r3, #32
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fd0c 	bl	8007716 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d08:	2b40      	cmp	r3, #64	@ 0x40
 8006d0a:	bf0c      	ite	eq
 8006d0c:	2301      	moveq	r3, #1
 8006d0e:	2300      	movne	r3, #0
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d103      	bne.n	8006d2a <HAL_UART_IRQHandler+0x17a>
 8006d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d04f      	beq.n	8006dca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fc14 	bl	8007558 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d3a:	2b40      	cmp	r3, #64	@ 0x40
 8006d3c:	d141      	bne.n	8006dc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3314      	adds	r3, #20
 8006d44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3314      	adds	r3, #20
 8006d66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006d76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d7a:	e841 2300 	strex	r3, r2, [r1]
 8006d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1d9      	bne.n	8006d3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d013      	beq.n	8006dba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d96:	4a7e      	ldr	r2, [pc, #504]	@ (8006f90 <HAL_UART_IRQHandler+0x3e0>)
 8006d98:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fb fa1c 	bl	80021dc <HAL_DMA_Abort_IT>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d016      	beq.n	8006dd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006db4:	4610      	mov	r0, r2
 8006db6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db8:	e00e      	b.n	8006dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f9a8 	bl	8007110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc0:	e00a      	b.n	8006dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f9a4 	bl	8007110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc8:	e006      	b.n	8006dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f9a0 	bl	8007110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006dd6:	e175      	b.n	80070c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd8:	bf00      	nop
    return;
 8006dda:	e173      	b.n	80070c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	f040 814f 	bne.w	8007084 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dea:	f003 0310 	and.w	r3, r3, #16
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 8148 	beq.w	8007084 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006df8:	f003 0310 	and.w	r3, r3, #16
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 8141 	beq.w	8007084 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e02:	2300      	movs	r3, #0
 8006e04:	60bb      	str	r3, [r7, #8]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	60bb      	str	r3, [r7, #8]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	60bb      	str	r3, [r7, #8]
 8006e16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e22:	2b40      	cmp	r3, #64	@ 0x40
 8006e24:	f040 80b6 	bne.w	8006f94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 8145 	beq.w	80070c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e46:	429a      	cmp	r2, r3
 8006e48:	f080 813e 	bcs.w	80070c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e5e:	f000 8088 	beq.w	8006f72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	330c      	adds	r3, #12
 8006e68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	330c      	adds	r3, #12
 8006e8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006e8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006e9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1d9      	bne.n	8006e62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3314      	adds	r3, #20
 8006eb4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006ebe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ec0:	f023 0301 	bic.w	r3, r3, #1
 8006ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3314      	adds	r3, #20
 8006ece:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006ed2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006ed6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006eda:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ede:	e841 2300 	strex	r3, r2, [r1]
 8006ee2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ee4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e1      	bne.n	8006eae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3314      	adds	r3, #20
 8006ef0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006efa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006efc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3314      	adds	r3, #20
 8006f0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f16:	e841 2300 	strex	r3, r2, [r1]
 8006f1a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1e3      	bne.n	8006eea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2220      	movs	r2, #32
 8006f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	330c      	adds	r3, #12
 8006f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f42:	f023 0310 	bic.w	r3, r3, #16
 8006f46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	330c      	adds	r3, #12
 8006f50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006f54:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006f56:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f5c:	e841 2300 	strex	r3, r2, [r1]
 8006f60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e3      	bne.n	8006f30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fb f8c5 	bl	80020fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2202      	movs	r2, #2
 8006f76:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 ff7f 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f8e:	e09b      	b.n	80070c8 <HAL_UART_IRQHandler+0x518>
 8006f90:	0800761f 	.word	0x0800761f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 808e 	beq.w	80070cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006fb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 8089 	beq.w	80070cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	330c      	adds	r3, #12
 8006fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	330c      	adds	r3, #12
 8006fda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006fde:	647a      	str	r2, [r7, #68]	@ 0x44
 8006fe0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fe4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e3      	bne.n	8006fba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3314      	adds	r3, #20
 8006ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffc:	e853 3f00 	ldrex	r3, [r3]
 8007000:	623b      	str	r3, [r7, #32]
   return(result);
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	f023 0301 	bic.w	r3, r3, #1
 8007008:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3314      	adds	r3, #20
 8007012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007016:	633a      	str	r2, [r7, #48]	@ 0x30
 8007018:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800701c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1e3      	bne.n	8006ff2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2220      	movs	r2, #32
 800702e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	330c      	adds	r3, #12
 800703e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	60fb      	str	r3, [r7, #12]
   return(result);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0310 	bic.w	r3, r3, #16
 800704e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	330c      	adds	r3, #12
 8007058:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800705c:	61fa      	str	r2, [r7, #28]
 800705e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	69b9      	ldr	r1, [r7, #24]
 8007062:	69fa      	ldr	r2, [r7, #28]
 8007064:	e841 2300 	strex	r3, r2, [r1]
 8007068:	617b      	str	r3, [r7, #20]
   return(result);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e3      	bne.n	8007038 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007076:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 ff05 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007082:	e023      	b.n	80070cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800708c:	2b00      	cmp	r3, #0
 800708e:	d009      	beq.n	80070a4 <HAL_UART_IRQHandler+0x4f4>
 8007090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fad2 	bl	8007646 <UART_Transmit_IT>
    return;
 80070a2:	e014      	b.n	80070ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80070a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00e      	beq.n	80070ce <HAL_UART_IRQHandler+0x51e>
 80070b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d008      	beq.n	80070ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fb12 	bl	80076e6 <UART_EndTransmit_IT>
    return;
 80070c2:	e004      	b.n	80070ce <HAL_UART_IRQHandler+0x51e>
    return;
 80070c4:	bf00      	nop
 80070c6:	e002      	b.n	80070ce <HAL_UART_IRQHandler+0x51e>
      return;
 80070c8:	bf00      	nop
 80070ca:	e000      	b.n	80070ce <HAL_UART_IRQHandler+0x51e>
      return;
 80070cc:	bf00      	nop
  }
}
 80070ce:	37e8      	adds	r7, #232	@ 0xe8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b09c      	sub	sp, #112	@ 0x70
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007130:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800713c:	2b00      	cmp	r3, #0
 800713e:	d172      	bne.n	8007226 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007140:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007142:	2200      	movs	r2, #0
 8007144:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007146:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	330c      	adds	r3, #12
 800714c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007150:	e853 3f00 	ldrex	r3, [r3]
 8007154:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800715c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800715e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	330c      	adds	r3, #12
 8007164:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007166:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007168:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800716c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800716e:	e841 2300 	strex	r3, r2, [r1]
 8007172:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1e5      	bne.n	8007146 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800717a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3314      	adds	r3, #20
 8007180:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007184:	e853 3f00 	ldrex	r3, [r3]
 8007188:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800718a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800718c:	f023 0301 	bic.w	r3, r3, #1
 8007190:	667b      	str	r3, [r7, #100]	@ 0x64
 8007192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	3314      	adds	r3, #20
 8007198:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800719a:	647a      	str	r2, [r7, #68]	@ 0x44
 800719c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071a2:	e841 2300 	strex	r3, r2, [r1]
 80071a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1e5      	bne.n	800717a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3314      	adds	r3, #20
 80071b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	623b      	str	r3, [r7, #32]
   return(result);
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80071c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3314      	adds	r3, #20
 80071cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80071ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80071d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e5      	bne.n	80071ae <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071e4:	2220      	movs	r2, #32
 80071e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d119      	bne.n	8007226 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	330c      	adds	r3, #12
 80071f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	e853 3f00 	ldrex	r3, [r3]
 8007200:	60fb      	str	r3, [r7, #12]
   return(result);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f023 0310 	bic.w	r3, r3, #16
 8007208:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800720a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	330c      	adds	r3, #12
 8007210:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007212:	61fa      	str	r2, [r7, #28]
 8007214:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	69b9      	ldr	r1, [r7, #24]
 8007218:	69fa      	ldr	r2, [r7, #28]
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	617b      	str	r3, [r7, #20]
   return(result);
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e5      	bne.n	80071f2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007228:	2200      	movs	r2, #0
 800722a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800722c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800722e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007230:	2b01      	cmp	r3, #1
 8007232:	d106      	bne.n	8007242 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007234:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007236:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007238:	4619      	mov	r1, r3
 800723a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800723c:	f000 fe26 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007240:	e002      	b.n	8007248 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007242:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007244:	f7ff ff50 	bl	80070e8 <HAL_UART_RxCpltCallback>
}
 8007248:	bf00      	nop
 800724a:	3770      	adds	r7, #112	@ 0x70
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2201      	movs	r2, #1
 8007262:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007268:	2b01      	cmp	r3, #1
 800726a:	d108      	bne.n	800727e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007270:	085b      	lsrs	r3, r3, #1
 8007272:	b29b      	uxth	r3, r3
 8007274:	4619      	mov	r1, r3
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 fe08 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800727c:	e002      	b.n	8007284 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f7ff ff3c 	bl	80070fc <HAL_UART_RxHalfCpltCallback>
}
 8007284:	bf00      	nop
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007294:	2300      	movs	r3, #0
 8007296:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072a8:	2b80      	cmp	r3, #128	@ 0x80
 80072aa:	bf0c      	ite	eq
 80072ac:	2301      	moveq	r3, #1
 80072ae:	2300      	movne	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b21      	cmp	r3, #33	@ 0x21
 80072be:	d108      	bne.n	80072d2 <UART_DMAError+0x46>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2200      	movs	r2, #0
 80072ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80072cc:	68b8      	ldr	r0, [r7, #8]
 80072ce:	f000 f91b 	bl	8007508 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072dc:	2b40      	cmp	r3, #64	@ 0x40
 80072de:	bf0c      	ite	eq
 80072e0:	2301      	moveq	r3, #1
 80072e2:	2300      	movne	r3, #0
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b22      	cmp	r3, #34	@ 0x22
 80072f2:	d108      	bne.n	8007306 <UART_DMAError+0x7a>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d005      	beq.n	8007306 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2200      	movs	r2, #0
 80072fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007300:	68b8      	ldr	r0, [r7, #8]
 8007302:	f000 f929 	bl	8007558 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800730a:	f043 0210 	orr.w	r2, r3, #16
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007312:	68b8      	ldr	r0, [r7, #8]
 8007314:	f7ff fefc 	bl	8007110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007318:	bf00      	nop
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	4613      	mov	r3, r2
 800732e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007330:	e03b      	b.n	80073aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007338:	d037      	beq.n	80073aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800733a:	f7fa fcc7 	bl	8001ccc <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	6a3a      	ldr	r2, [r7, #32]
 8007346:	429a      	cmp	r2, r3
 8007348:	d302      	bcc.n	8007350 <UART_WaitOnFlagUntilTimeout+0x30>
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e03a      	b.n	80073ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	d023      	beq.n	80073aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2b80      	cmp	r3, #128	@ 0x80
 8007366:	d020      	beq.n	80073aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b40      	cmp	r3, #64	@ 0x40
 800736c:	d01d      	beq.n	80073aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0308 	and.w	r3, r3, #8
 8007378:	2b08      	cmp	r3, #8
 800737a:	d116      	bne.n	80073aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800737c:	2300      	movs	r3, #0
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f000 f8e0 	bl	8007558 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2208      	movs	r2, #8
 800739c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e00f      	b.n	80073ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	4013      	ands	r3, r2
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	bf0c      	ite	eq
 80073ba:	2301      	moveq	r3, #1
 80073bc:	2300      	movne	r3, #0
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	461a      	mov	r2, r3
 80073c2:	79fb      	ldrb	r3, [r7, #7]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d0b4      	beq.n	8007332 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b098      	sub	sp, #96	@ 0x60
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	4613      	mov	r3, r2
 80073e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	88fa      	ldrh	r2, [r7, #6]
 80073ec:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2222      	movs	r2, #34	@ 0x22
 80073f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007400:	4a3e      	ldr	r2, [pc, #248]	@ (80074fc <UART_Start_Receive_DMA+0x128>)
 8007402:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007408:	4a3d      	ldr	r2, [pc, #244]	@ (8007500 <UART_Start_Receive_DMA+0x12c>)
 800740a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007410:	4a3c      	ldr	r2, [pc, #240]	@ (8007504 <UART_Start_Receive_DMA+0x130>)
 8007412:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007418:	2200      	movs	r2, #0
 800741a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800741c:	f107 0308 	add.w	r3, r7, #8
 8007420:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3304      	adds	r3, #4
 800742c:	4619      	mov	r1, r3
 800742e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	88fb      	ldrh	r3, [r7, #6]
 8007434:	f7fa fe0a 	bl	800204c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007438:	2300      	movs	r3, #0
 800743a:	613b      	str	r3, [r7, #16]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	613b      	str	r3, [r7, #16]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	613b      	str	r3, [r7, #16]
 800744c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d019      	beq.n	800748a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	330c      	adds	r3, #12
 800745c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800746c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	330c      	adds	r3, #12
 8007474:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007476:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007478:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800747c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e5      	bne.n	8007456 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3314      	adds	r3, #20
 8007490:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800749a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749c:	f043 0301 	orr.w	r3, r3, #1
 80074a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3314      	adds	r3, #20
 80074a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80074aa:	63ba      	str	r2, [r7, #56]	@ 0x38
 80074ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80074b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1e5      	bne.n	800748a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3314      	adds	r3, #20
 80074c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	617b      	str	r3, [r7, #20]
   return(result);
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3314      	adds	r3, #20
 80074dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80074de:	627a      	str	r2, [r7, #36]	@ 0x24
 80074e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	6a39      	ldr	r1, [r7, #32]
 80074e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e5      	bne.n	80074be <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3760      	adds	r7, #96	@ 0x60
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	08007125 	.word	0x08007125
 8007500:	08007251 	.word	0x08007251
 8007504:	0800728d 	.word	0x0800728d

08007508 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007508:	b480      	push	{r7}
 800750a:	b089      	sub	sp, #36	@ 0x24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	330c      	adds	r3, #12
 8007516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	e853 3f00 	ldrex	r3, [r3]
 800751e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007526:	61fb      	str	r3, [r7, #28]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	330c      	adds	r3, #12
 800752e:	69fa      	ldr	r2, [r7, #28]
 8007530:	61ba      	str	r2, [r7, #24]
 8007532:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007534:	6979      	ldr	r1, [r7, #20]
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	e841 2300 	strex	r3, r2, [r1]
 800753c:	613b      	str	r3, [r7, #16]
   return(result);
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1e5      	bne.n	8007510 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2220      	movs	r2, #32
 8007548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800754c:	bf00      	nop
 800754e:	3724      	adds	r7, #36	@ 0x24
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007558:	b480      	push	{r7}
 800755a:	b095      	sub	sp, #84	@ 0x54
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	330c      	adds	r3, #12
 8007566:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800756a:	e853 3f00 	ldrex	r3, [r3]
 800756e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007572:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	330c      	adds	r3, #12
 800757e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007580:	643a      	str	r2, [r7, #64]	@ 0x40
 8007582:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007586:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800758e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e5      	bne.n	8007560 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3314      	adds	r3, #20
 800759a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	e853 3f00 	ldrex	r3, [r3]
 80075a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	f023 0301 	bic.w	r3, r3, #1
 80075aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3314      	adds	r3, #20
 80075b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075bc:	e841 2300 	strex	r3, r2, [r1]
 80075c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1e5      	bne.n	8007594 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d119      	bne.n	8007604 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	330c      	adds	r3, #12
 80075d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	e853 3f00 	ldrex	r3, [r3]
 80075de:	60bb      	str	r3, [r7, #8]
   return(result);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f023 0310 	bic.w	r3, r3, #16
 80075e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	330c      	adds	r3, #12
 80075ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075f0:	61ba      	str	r2, [r7, #24]
 80075f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f4:	6979      	ldr	r1, [r7, #20]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	e841 2300 	strex	r3, r2, [r1]
 80075fc:	613b      	str	r3, [r7, #16]
   return(result);
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1e5      	bne.n	80075d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007612:	bf00      	nop
 8007614:	3754      	adds	r7, #84	@ 0x54
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f7ff fd69 	bl	8007110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800763e:	bf00      	nop
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007646:	b480      	push	{r7}
 8007648:	b085      	sub	sp, #20
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b21      	cmp	r3, #33	@ 0x21
 8007658:	d13e      	bne.n	80076d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007662:	d114      	bne.n	800768e <UART_Transmit_IT+0x48>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d110      	bne.n	800768e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007680:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	1c9a      	adds	r2, r3, #2
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	621a      	str	r2, [r3, #32]
 800768c:	e008      	b.n	80076a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	1c59      	adds	r1, r3, #1
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	6211      	str	r1, [r2, #32]
 8007698:	781a      	ldrb	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	3b01      	subs	r3, #1
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	4619      	mov	r1, r3
 80076ae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10f      	bne.n	80076d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80076c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	e000      	b.n	80076da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076d8:	2302      	movs	r3, #2
  }
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68da      	ldr	r2, [r3, #12]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff fce4 	bl	80070d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b08c      	sub	sp, #48	@ 0x30
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b22      	cmp	r3, #34	@ 0x22
 8007728:	f040 80ae 	bne.w	8007888 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007734:	d117      	bne.n	8007766 <UART_Receive_IT+0x50>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d113      	bne.n	8007766 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800773e:	2300      	movs	r3, #0
 8007740:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007746:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	b29b      	uxth	r3, r3
 8007750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007754:	b29a      	uxth	r2, r3
 8007756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007758:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775e:	1c9a      	adds	r2, r3, #2
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	629a      	str	r2, [r3, #40]	@ 0x28
 8007764:	e026      	b.n	80077b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800776a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800776c:	2300      	movs	r3, #0
 800776e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007778:	d007      	beq.n	800778a <UART_Receive_IT+0x74>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10a      	bne.n	8007798 <UART_Receive_IT+0x82>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d106      	bne.n	8007798 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	b2da      	uxtb	r2, r3
 8007792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007794:	701a      	strb	r2, [r3, #0]
 8007796:	e008      	b.n	80077aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	3b01      	subs	r3, #1
 80077bc:	b29b      	uxth	r3, r3
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	4619      	mov	r1, r3
 80077c2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d15d      	bne.n	8007884 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0220 	bic.w	r2, r2, #32
 80077d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80077e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	695a      	ldr	r2, [r3, #20]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0201 	bic.w	r2, r2, #1
 80077f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2220      	movs	r2, #32
 80077fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800780a:	2b01      	cmp	r3, #1
 800780c:	d135      	bne.n	800787a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	330c      	adds	r3, #12
 800781a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	613b      	str	r3, [r7, #16]
   return(result);
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f023 0310 	bic.w	r3, r3, #16
 800782a:	627b      	str	r3, [r7, #36]	@ 0x24
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	330c      	adds	r3, #12
 8007832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007834:	623a      	str	r2, [r7, #32]
 8007836:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	69f9      	ldr	r1, [r7, #28]
 800783a:	6a3a      	ldr	r2, [r7, #32]
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	61bb      	str	r3, [r7, #24]
   return(result);
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e5      	bne.n	8007814 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0310 	and.w	r3, r3, #16
 8007852:	2b10      	cmp	r3, #16
 8007854:	d10a      	bne.n	800786c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007856:	2300      	movs	r3, #0
 8007858:	60fb      	str	r3, [r7, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	60fb      	str	r3, [r7, #12]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	60fb      	str	r3, [r7, #12]
 800786a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fb0a 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
 8007878:	e002      	b.n	8007880 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff fc34 	bl	80070e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	e002      	b.n	800788a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	e000      	b.n	800788a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007888:	2302      	movs	r3, #2
  }
}
 800788a:	4618      	mov	r0, r3
 800788c:	3730      	adds	r7, #48	@ 0x30
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007898:	b0c0      	sub	sp, #256	@ 0x100
 800789a:	af00      	add	r7, sp, #0
 800789c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80078ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b0:	68d9      	ldr	r1, [r3, #12]
 80078b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	ea40 0301 	orr.w	r3, r0, r1
 80078bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	431a      	orrs	r2, r3
 80078cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	431a      	orrs	r2, r3
 80078d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	4313      	orrs	r3, r2
 80078dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80078ec:	f021 010c 	bic.w	r1, r1, #12
 80078f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80078fa:	430b      	orrs	r3, r1
 80078fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800790a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800790e:	6999      	ldr	r1, [r3, #24]
 8007910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	ea40 0301 	orr.w	r3, r0, r1
 800791a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800791c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	4b8f      	ldr	r3, [pc, #572]	@ (8007b60 <UART_SetConfig+0x2cc>)
 8007924:	429a      	cmp	r2, r3
 8007926:	d005      	beq.n	8007934 <UART_SetConfig+0xa0>
 8007928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	4b8d      	ldr	r3, [pc, #564]	@ (8007b64 <UART_SetConfig+0x2d0>)
 8007930:	429a      	cmp	r2, r3
 8007932:	d104      	bne.n	800793e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007934:	f7fc fe56 	bl	80045e4 <HAL_RCC_GetPCLK2Freq>
 8007938:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800793c:	e003      	b.n	8007946 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800793e:	f7fc fe3d 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8007942:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007950:	f040 810c 	bne.w	8007b6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007958:	2200      	movs	r2, #0
 800795a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800795e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007962:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007966:	4622      	mov	r2, r4
 8007968:	462b      	mov	r3, r5
 800796a:	1891      	adds	r1, r2, r2
 800796c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800796e:	415b      	adcs	r3, r3
 8007970:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007972:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007976:	4621      	mov	r1, r4
 8007978:	eb12 0801 	adds.w	r8, r2, r1
 800797c:	4629      	mov	r1, r5
 800797e:	eb43 0901 	adc.w	r9, r3, r1
 8007982:	f04f 0200 	mov.w	r2, #0
 8007986:	f04f 0300 	mov.w	r3, #0
 800798a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800798e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007996:	4690      	mov	r8, r2
 8007998:	4699      	mov	r9, r3
 800799a:	4623      	mov	r3, r4
 800799c:	eb18 0303 	adds.w	r3, r8, r3
 80079a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079a4:	462b      	mov	r3, r5
 80079a6:	eb49 0303 	adc.w	r3, r9, r3
 80079aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80079be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80079c2:	460b      	mov	r3, r1
 80079c4:	18db      	adds	r3, r3, r3
 80079c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80079c8:	4613      	mov	r3, r2
 80079ca:	eb42 0303 	adc.w	r3, r2, r3
 80079ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80079d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80079d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80079d8:	f7f8 fc62 	bl	80002a0 <__aeabi_uldivmod>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4b61      	ldr	r3, [pc, #388]	@ (8007b68 <UART_SetConfig+0x2d4>)
 80079e2:	fba3 2302 	umull	r2, r3, r3, r2
 80079e6:	095b      	lsrs	r3, r3, #5
 80079e8:	011c      	lsls	r4, r3, #4
 80079ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80079f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80079fc:	4642      	mov	r2, r8
 80079fe:	464b      	mov	r3, r9
 8007a00:	1891      	adds	r1, r2, r2
 8007a02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007a04:	415b      	adcs	r3, r3
 8007a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a0c:	4641      	mov	r1, r8
 8007a0e:	eb12 0a01 	adds.w	sl, r2, r1
 8007a12:	4649      	mov	r1, r9
 8007a14:	eb43 0b01 	adc.w	fp, r3, r1
 8007a18:	f04f 0200 	mov.w	r2, #0
 8007a1c:	f04f 0300 	mov.w	r3, #0
 8007a20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a2c:	4692      	mov	sl, r2
 8007a2e:	469b      	mov	fp, r3
 8007a30:	4643      	mov	r3, r8
 8007a32:	eb1a 0303 	adds.w	r3, sl, r3
 8007a36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a3a:	464b      	mov	r3, r9
 8007a3c:	eb4b 0303 	adc.w	r3, fp, r3
 8007a40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007a54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	18db      	adds	r3, r3, r3
 8007a5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a5e:	4613      	mov	r3, r2
 8007a60:	eb42 0303 	adc.w	r3, r2, r3
 8007a64:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a6e:	f7f8 fc17 	bl	80002a0 <__aeabi_uldivmod>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4611      	mov	r1, r2
 8007a78:	4b3b      	ldr	r3, [pc, #236]	@ (8007b68 <UART_SetConfig+0x2d4>)
 8007a7a:	fba3 2301 	umull	r2, r3, r3, r1
 8007a7e:	095b      	lsrs	r3, r3, #5
 8007a80:	2264      	movs	r2, #100	@ 0x64
 8007a82:	fb02 f303 	mul.w	r3, r2, r3
 8007a86:	1acb      	subs	r3, r1, r3
 8007a88:	00db      	lsls	r3, r3, #3
 8007a8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a8e:	4b36      	ldr	r3, [pc, #216]	@ (8007b68 <UART_SetConfig+0x2d4>)
 8007a90:	fba3 2302 	umull	r2, r3, r3, r2
 8007a94:	095b      	lsrs	r3, r3, #5
 8007a96:	005b      	lsls	r3, r3, #1
 8007a98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a9c:	441c      	add	r4, r3
 8007a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007aa8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007aac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007ab0:	4642      	mov	r2, r8
 8007ab2:	464b      	mov	r3, r9
 8007ab4:	1891      	adds	r1, r2, r2
 8007ab6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007ab8:	415b      	adcs	r3, r3
 8007aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007abc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007ac0:	4641      	mov	r1, r8
 8007ac2:	1851      	adds	r1, r2, r1
 8007ac4:	6339      	str	r1, [r7, #48]	@ 0x30
 8007ac6:	4649      	mov	r1, r9
 8007ac8:	414b      	adcs	r3, r1
 8007aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007acc:	f04f 0200 	mov.w	r2, #0
 8007ad0:	f04f 0300 	mov.w	r3, #0
 8007ad4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007ad8:	4659      	mov	r1, fp
 8007ada:	00cb      	lsls	r3, r1, #3
 8007adc:	4651      	mov	r1, sl
 8007ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ae2:	4651      	mov	r1, sl
 8007ae4:	00ca      	lsls	r2, r1, #3
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4603      	mov	r3, r0
 8007aec:	4642      	mov	r2, r8
 8007aee:	189b      	adds	r3, r3, r2
 8007af0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007af4:	464b      	mov	r3, r9
 8007af6:	460a      	mov	r2, r1
 8007af8:	eb42 0303 	adc.w	r3, r2, r3
 8007afc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b14:	460b      	mov	r3, r1
 8007b16:	18db      	adds	r3, r3, r3
 8007b18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	eb42 0303 	adc.w	r3, r2, r3
 8007b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007b2a:	f7f8 fbb9 	bl	80002a0 <__aeabi_uldivmod>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4b0d      	ldr	r3, [pc, #52]	@ (8007b68 <UART_SetConfig+0x2d4>)
 8007b34:	fba3 1302 	umull	r1, r3, r3, r2
 8007b38:	095b      	lsrs	r3, r3, #5
 8007b3a:	2164      	movs	r1, #100	@ 0x64
 8007b3c:	fb01 f303 	mul.w	r3, r1, r3
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	3332      	adds	r3, #50	@ 0x32
 8007b46:	4a08      	ldr	r2, [pc, #32]	@ (8007b68 <UART_SetConfig+0x2d4>)
 8007b48:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4c:	095b      	lsrs	r3, r3, #5
 8007b4e:	f003 0207 	and.w	r2, r3, #7
 8007b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4422      	add	r2, r4
 8007b5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b5c:	e106      	b.n	8007d6c <UART_SetConfig+0x4d8>
 8007b5e:	bf00      	nop
 8007b60:	40011000 	.word	0x40011000
 8007b64:	40011400 	.word	0x40011400
 8007b68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b7e:	4642      	mov	r2, r8
 8007b80:	464b      	mov	r3, r9
 8007b82:	1891      	adds	r1, r2, r2
 8007b84:	6239      	str	r1, [r7, #32]
 8007b86:	415b      	adcs	r3, r3
 8007b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b8e:	4641      	mov	r1, r8
 8007b90:	1854      	adds	r4, r2, r1
 8007b92:	4649      	mov	r1, r9
 8007b94:	eb43 0501 	adc.w	r5, r3, r1
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	f04f 0300 	mov.w	r3, #0
 8007ba0:	00eb      	lsls	r3, r5, #3
 8007ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ba6:	00e2      	lsls	r2, r4, #3
 8007ba8:	4614      	mov	r4, r2
 8007baa:	461d      	mov	r5, r3
 8007bac:	4643      	mov	r3, r8
 8007bae:	18e3      	adds	r3, r4, r3
 8007bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007bb4:	464b      	mov	r3, r9
 8007bb6:	eb45 0303 	adc.w	r3, r5, r3
 8007bba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007bce:	f04f 0200 	mov.w	r2, #0
 8007bd2:	f04f 0300 	mov.w	r3, #0
 8007bd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007bda:	4629      	mov	r1, r5
 8007bdc:	008b      	lsls	r3, r1, #2
 8007bde:	4621      	mov	r1, r4
 8007be0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007be4:	4621      	mov	r1, r4
 8007be6:	008a      	lsls	r2, r1, #2
 8007be8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007bec:	f7f8 fb58 	bl	80002a0 <__aeabi_uldivmod>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4b60      	ldr	r3, [pc, #384]	@ (8007d78 <UART_SetConfig+0x4e4>)
 8007bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8007bfa:	095b      	lsrs	r3, r3, #5
 8007bfc:	011c      	lsls	r4, r3, #4
 8007bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007c10:	4642      	mov	r2, r8
 8007c12:	464b      	mov	r3, r9
 8007c14:	1891      	adds	r1, r2, r2
 8007c16:	61b9      	str	r1, [r7, #24]
 8007c18:	415b      	adcs	r3, r3
 8007c1a:	61fb      	str	r3, [r7, #28]
 8007c1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c20:	4641      	mov	r1, r8
 8007c22:	1851      	adds	r1, r2, r1
 8007c24:	6139      	str	r1, [r7, #16]
 8007c26:	4649      	mov	r1, r9
 8007c28:	414b      	adcs	r3, r1
 8007c2a:	617b      	str	r3, [r7, #20]
 8007c2c:	f04f 0200 	mov.w	r2, #0
 8007c30:	f04f 0300 	mov.w	r3, #0
 8007c34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c38:	4659      	mov	r1, fp
 8007c3a:	00cb      	lsls	r3, r1, #3
 8007c3c:	4651      	mov	r1, sl
 8007c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c42:	4651      	mov	r1, sl
 8007c44:	00ca      	lsls	r2, r1, #3
 8007c46:	4610      	mov	r0, r2
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	4642      	mov	r2, r8
 8007c4e:	189b      	adds	r3, r3, r2
 8007c50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c54:	464b      	mov	r3, r9
 8007c56:	460a      	mov	r2, r1
 8007c58:	eb42 0303 	adc.w	r3, r2, r3
 8007c5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c6c:	f04f 0200 	mov.w	r2, #0
 8007c70:	f04f 0300 	mov.w	r3, #0
 8007c74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007c78:	4649      	mov	r1, r9
 8007c7a:	008b      	lsls	r3, r1, #2
 8007c7c:	4641      	mov	r1, r8
 8007c7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c82:	4641      	mov	r1, r8
 8007c84:	008a      	lsls	r2, r1, #2
 8007c86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007c8a:	f7f8 fb09 	bl	80002a0 <__aeabi_uldivmod>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	4611      	mov	r1, r2
 8007c94:	4b38      	ldr	r3, [pc, #224]	@ (8007d78 <UART_SetConfig+0x4e4>)
 8007c96:	fba3 2301 	umull	r2, r3, r3, r1
 8007c9a:	095b      	lsrs	r3, r3, #5
 8007c9c:	2264      	movs	r2, #100	@ 0x64
 8007c9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ca2:	1acb      	subs	r3, r1, r3
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	3332      	adds	r3, #50	@ 0x32
 8007ca8:	4a33      	ldr	r2, [pc, #204]	@ (8007d78 <UART_SetConfig+0x4e4>)
 8007caa:	fba2 2303 	umull	r2, r3, r2, r3
 8007cae:	095b      	lsrs	r3, r3, #5
 8007cb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007cb4:	441c      	add	r4, r3
 8007cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cba:	2200      	movs	r2, #0
 8007cbc:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cbe:	677a      	str	r2, [r7, #116]	@ 0x74
 8007cc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007cc4:	4642      	mov	r2, r8
 8007cc6:	464b      	mov	r3, r9
 8007cc8:	1891      	adds	r1, r2, r2
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	415b      	adcs	r3, r3
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cd4:	4641      	mov	r1, r8
 8007cd6:	1851      	adds	r1, r2, r1
 8007cd8:	6039      	str	r1, [r7, #0]
 8007cda:	4649      	mov	r1, r9
 8007cdc:	414b      	adcs	r3, r1
 8007cde:	607b      	str	r3, [r7, #4]
 8007ce0:	f04f 0200 	mov.w	r2, #0
 8007ce4:	f04f 0300 	mov.w	r3, #0
 8007ce8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007cec:	4659      	mov	r1, fp
 8007cee:	00cb      	lsls	r3, r1, #3
 8007cf0:	4651      	mov	r1, sl
 8007cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cf6:	4651      	mov	r1, sl
 8007cf8:	00ca      	lsls	r2, r1, #3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	4603      	mov	r3, r0
 8007d00:	4642      	mov	r2, r8
 8007d02:	189b      	adds	r3, r3, r2
 8007d04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d06:	464b      	mov	r3, r9
 8007d08:	460a      	mov	r2, r1
 8007d0a:	eb42 0303 	adc.w	r3, r2, r3
 8007d0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	f04f 0300 	mov.w	r3, #0
 8007d24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007d28:	4649      	mov	r1, r9
 8007d2a:	008b      	lsls	r3, r1, #2
 8007d2c:	4641      	mov	r1, r8
 8007d2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d32:	4641      	mov	r1, r8
 8007d34:	008a      	lsls	r2, r1, #2
 8007d36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007d3a:	f7f8 fab1 	bl	80002a0 <__aeabi_uldivmod>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4b0d      	ldr	r3, [pc, #52]	@ (8007d78 <UART_SetConfig+0x4e4>)
 8007d44:	fba3 1302 	umull	r1, r3, r3, r2
 8007d48:	095b      	lsrs	r3, r3, #5
 8007d4a:	2164      	movs	r1, #100	@ 0x64
 8007d4c:	fb01 f303 	mul.w	r3, r1, r3
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	011b      	lsls	r3, r3, #4
 8007d54:	3332      	adds	r3, #50	@ 0x32
 8007d56:	4a08      	ldr	r2, [pc, #32]	@ (8007d78 <UART_SetConfig+0x4e4>)
 8007d58:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5c:	095b      	lsrs	r3, r3, #5
 8007d5e:	f003 020f 	and.w	r2, r3, #15
 8007d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4422      	add	r2, r4
 8007d6a:	609a      	str	r2, [r3, #8]
}
 8007d6c:	bf00      	nop
 8007d6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d72:	46bd      	mov	sp, r7
 8007d74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d78:	51eb851f 	.word	0x51eb851f

08007d7c <ESP32_Init>:
extern SemaphoreHandle_t ReceiveMsgTimeoutMutex;
extern QueueHandle_t xShellQueue;
char ESP32_reveice_data[100];

void ESP32_Init(UART_HandleTypeDef* eps32_huart, UART_HandleTypeDef* log_huart)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
	eps32_TxRx_huart = eps32_huart;
 8007d86:	4a06      	ldr	r2, [pc, #24]	@ (8007da0 <ESP32_Init+0x24>)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6013      	str	r3, [r2, #0]
	esp32_log_huart = log_huart;
 8007d8c:	4a05      	ldr	r2, [pc, #20]	@ (8007da4 <ESP32_Init+0x28>)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	6013      	str	r3, [r2, #0]
}
 8007d92:	bf00      	nop
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20000808 	.word	0x20000808
 8007da4:	2000080c 	.word	0x2000080c

08007da8 <ESP32_OS_Resources_Init>:

void ESP32_OS_Resources_Init()
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
	xESP32Queue = xQueueCreate(4, sizeof(ESP32MsgStruct));
 8007dac:	2200      	movs	r2, #0
 8007dae:	2164      	movs	r1, #100	@ 0x64
 8007db0:	2004      	movs	r0, #4
 8007db2:	f000 ff7d 	bl	8008cb0 <xQueueGenericCreate>
 8007db6:	4603      	mov	r3, r0
 8007db8:	4a12      	ldr	r2, [pc, #72]	@ (8007e04 <ESP32_OS_Resources_Init+0x5c>)
 8007dba:	6013      	str	r3, [r2, #0]
	xESP32ReceiverQueue = xQueueCreate(4, sizeof(ESP32MsgStruct));
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	2164      	movs	r1, #100	@ 0x64
 8007dc0:	2004      	movs	r0, #4
 8007dc2:	f000 ff75 	bl	8008cb0 <xQueueGenericCreate>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8007e08 <ESP32_OS_Resources_Init+0x60>)
 8007dca:	6013      	str	r3, [r2, #0]
	xESP32Mutex = xSemaphoreCreateMutex();
 8007dcc:	2001      	movs	r0, #1
 8007dce:	f000 ffe9 	bl	8008da4 <xQueueCreateMutex>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8007e0c <ESP32_OS_Resources_Init+0x64>)
 8007dd6:	6013      	str	r3, [r2, #0]

	// 啟動 Idle-Line DMA 接收
    HAL_UARTEx_ReceiveToIdle_DMA(eps32_TxRx_huart,
 8007dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8007e10 <ESP32_OS_Resources_Init+0x68>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2264      	movs	r2, #100	@ 0x64
 8007dde:	490d      	ldr	r1, [pc, #52]	@ (8007e14 <ESP32_OS_Resources_Init+0x6c>)
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe fe87 	bl	8006af4 <HAL_UARTEx_ReceiveToIdle_DMA>
                                 (uint8_t*)ESP32_reveice_data,
                                 sizeof(ESP32_reveice_data));
    // 啟用半滿中斷 (選擇性，用於即時 debug)
    // __HAL_DMA_ENABLE_IT(eps32_TxRx_huart->hdmarx, DMA_IT_HT);
	__HAL_DMA_DISABLE_IT(eps32_TxRx_huart->hdmarx, DMA_IT_HT);
 8007de6:	4b0a      	ldr	r3, [pc, #40]	@ (8007e10 <ESP32_OS_Resources_Init+0x68>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	4b07      	ldr	r3, [pc, #28]	@ (8007e10 <ESP32_OS_Resources_Init+0x68>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 0208 	bic.w	r2, r2, #8
 8007dfc:	601a      	str	r2, [r3, #0]
}
 8007dfe:	bf00      	nop
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	20000810 	.word	0x20000810
 8007e08:	20000814 	.word	0x20000814
 8007e0c:	20000818 	.word	0x20000818
 8007e10:	20000808 	.word	0x20000808
 8007e14:	2000081c 	.word	0x2000081c

08007e18 <ESP32Sender>:

void ESP32Sender(void *pvParameters)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b09c      	sub	sp, #112	@ 0x70
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  ESP32MsgStruct esp32Msg;
  while (1)
  {
	if (xQueueReceive(xESP32Queue, &esp32Msg, portMAX_DELAY) == pdPASS) {
 8007e20:	4b16      	ldr	r3, [pc, #88]	@ (8007e7c <ESP32Sender+0x64>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f107 010c 	add.w	r1, r7, #12
 8007e28:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f001 f96f 	bl	8009110 <xQueueReceive>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d11c      	bne.n	8007e72 <ESP32Sender+0x5a>
	  	if (xSemaphoreTake(ReceiveMsgTimeoutMutex, portMAX_DELAY) == pdPASS) {
 8007e38:	4b11      	ldr	r3, [pc, #68]	@ (8007e80 <ESP32Sender+0x68>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8007e40:	4618      	mov	r0, r3
 8007e42:	f001 fa47 	bl	80092d4 <xQueueSemaphoreTake>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d10a      	bne.n	8007e62 <ESP32Sender+0x4a>
			ReceiveMsgTimeout = HAL_MAX_DELAY;
 8007e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e84 <ESP32Sender+0x6c>)
 8007e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e52:	601a      	str	r2, [r3, #0]

			xSemaphoreGive(ReceiveMsgTimeoutMutex);
 8007e54:	4b0a      	ldr	r3, [pc, #40]	@ (8007e80 <ESP32Sender+0x68>)
 8007e56:	6818      	ldr	r0, [r3, #0]
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	f000 ffb9 	bl	8008dd4 <xQueueGenericSend>
		}
	  	SendMsg(eps32_TxRx_huart, esp32Msg.msg);
 8007e62:	4b09      	ldr	r3, [pc, #36]	@ (8007e88 <ESP32Sender+0x70>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f107 020c 	add.w	r2, r7, #12
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7f9 f8b1 	bl	8000fd4 <SendMsg>
	}

	vTaskDelay(pdMS_TO_TICKS(500));
 8007e72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007e76:	f001 fe03 	bl	8009a80 <vTaskDelay>
	if (xQueueReceive(xESP32Queue, &esp32Msg, portMAX_DELAY) == pdPASS) {
 8007e7a:	e7d1      	b.n	8007e20 <ESP32Sender+0x8>
 8007e7c:	20000810 	.word	0x20000810
 8007e80:	200005b4 	.word	0x200005b4
 8007e84:	20000000 	.word	0x20000000
 8007e88:	20000808 	.word	0x20000808

08007e8c <HAL_UARTEx_RxEventCallback>:
  }
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b09c      	sub	sp, #112	@ 0x70
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	807b      	strh	r3, [r7, #2]
  if (huart == eps32_TxRx_huart)
 8007e98:	4b25      	ldr	r3, [pc, #148]	@ (8007f30 <HAL_UARTEx_RxEventCallback+0xa4>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d141      	bne.n	8007f26 <HAL_UARTEx_RxEventCallback+0x9a>
  {
    ESP32MsgStruct msg;
	memset(msg.msg, 0, sizeof(msg.msg));
 8007ea2:	f107 0308 	add.w	r3, r7, #8
 8007ea6:	2264      	movs	r2, #100	@ 0x64
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f008 fb84 	bl	80105b8 <memset>
    memcpy(msg.msg, ESP32_reveice_data, Size);
 8007eb0:	887a      	ldrh	r2, [r7, #2]
 8007eb2:	f107 0308 	add.w	r3, r7, #8
 8007eb6:	491f      	ldr	r1, [pc, #124]	@ (8007f34 <HAL_UARTEx_RxEventCallback+0xa8>)
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f008 fc96 	bl	80107ea <memcpy>
    msg.msg[Size] = '\0';
 8007ebe:	887b      	ldrh	r3, [r7, #2]
 8007ec0:	3370      	adds	r3, #112	@ 0x70
 8007ec2:	443b      	add	r3, r7
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f803 2c68 	strb.w	r2, [r3, #-104]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	66fb      	str	r3, [r7, #108]	@ 0x6c
	xQueueSendFromISR(xESP32ReceiverQueue, &msg, &xHigherPriorityTaskWoken);
 8007ece:	4b1a      	ldr	r3, [pc, #104]	@ (8007f38 <HAL_UARTEx_RxEventCallback+0xac>)
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8007ed6:	f107 0108 	add.w	r1, r7, #8
 8007eda:	2300      	movs	r3, #0
 8007edc:	f001 f87c 	bl	8008fd8 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8007ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d007      	beq.n	8007ef6 <HAL_UARTEx_RxEventCallback+0x6a>
 8007ee6:	4b15      	ldr	r3, [pc, #84]	@ (8007f3c <HAL_UARTEx_RxEventCallback+0xb0>)
 8007ee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	f3bf 8f6f 	isb	sy

	memset(ESP32_reveice_data, 0, sizeof(ESP32_reveice_data));
 8007ef6:	2264      	movs	r2, #100	@ 0x64
 8007ef8:	2100      	movs	r1, #0
 8007efa:	480e      	ldr	r0, [pc, #56]	@ (8007f34 <HAL_UARTEx_RxEventCallback+0xa8>)
 8007efc:	f008 fb5c 	bl	80105b8 <memset>
    HAL_UARTEx_ReceiveToIdle_DMA(eps32_TxRx_huart,
 8007f00:	4b0b      	ldr	r3, [pc, #44]	@ (8007f30 <HAL_UARTEx_RxEventCallback+0xa4>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2264      	movs	r2, #100	@ 0x64
 8007f06:	490b      	ldr	r1, [pc, #44]	@ (8007f34 <HAL_UARTEx_RxEventCallback+0xa8>)
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fe fdf3 	bl	8006af4 <HAL_UARTEx_ReceiveToIdle_DMA>
                                 (uint8_t*)ESP32_reveice_data,
                                 sizeof(ESP32_reveice_data));
	__HAL_DMA_DISABLE_IT(eps32_TxRx_huart->hdmarx, DMA_IT_HT);
 8007f0e:	4b08      	ldr	r3, [pc, #32]	@ (8007f30 <HAL_UARTEx_RxEventCallback+0xa4>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	4b05      	ldr	r3, [pc, #20]	@ (8007f30 <HAL_UARTEx_RxEventCallback+0xa4>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0208 	bic.w	r2, r2, #8
 8007f24:	601a      	str	r2, [r3, #0]
	
  }
}
 8007f26:	bf00      	nop
 8007f28:	3770      	adds	r7, #112	@ 0x70
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	20000808 	.word	0x20000808
 8007f34:	2000081c 	.word	0x2000081c
 8007f38:	20000814 	.word	0x20000814
 8007f3c:	e000ed04 	.word	0xe000ed04

08007f40 <ESP32Receiver>:
//     vTaskDelay(pdMS_TO_TICKS(2));
//   }
// }

void ESP32Receiver(void *pvParameters)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b0ce      	sub	sp, #312	@ 0x138
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f4a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007f4e:	6018      	str	r0, [r3, #0]
  ESP32MsgStruct rxMsg;
  while (1)
  {
    if (xQueueReceive(xESP32ReceiverQueue, &rxMsg, portMAX_DELAY) == pdPASS)
 8007f50:	4b1c      	ldr	r3, [pc, #112]	@ (8007fc4 <ESP32Receiver+0x84>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8007f58:	f04f 32ff 	mov.w	r2, #4294967295
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f001 f8d7 	bl	8009110 <xQueueReceive>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d127      	bne.n	8007fb8 <ESP32Receiver+0x78>
    {
    	SendMsg(esp32_log_huart, "\r\nReceive : ESP32: %s\r\n", rxMsg.msg);
 8007f68:	4b17      	ldr	r3, [pc, #92]	@ (8007fc8 <ESP32Receiver+0x88>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8007f70:	4916      	ldr	r1, [pc, #88]	@ (8007fcc <ESP32Receiver+0x8c>)
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7f9 f82e 	bl	8000fd4 <SendMsg>
		
    	ShellMsgStruct shellMsg;
    	strncpy(shellMsg.msg, rxMsg.msg, sizeof(rxMsg.msg)-1);
 8007f78:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8007f7c:	f107 030c 	add.w	r3, r7, #12
 8007f80:	2263      	movs	r2, #99	@ 0x63
 8007f82:	4618      	mov	r0, r3
 8007f84:	f008 fb31 	bl	80105ea <strncpy>
    	shellMsg.msg[sizeof(shellMsg.msg)-1] = '\0';
 8007f88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7
    	if (xQueueSend(xShellQueue, &shellMsg, 0) != pdPASS) {
 8007f96:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd0 <ESP32Receiver+0x90>)
 8007f98:	6818      	ldr	r0, [r3, #0]
 8007f9a:	f107 010c 	add.w	r1, r7, #12
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f000 ff17 	bl	8008dd4 <xQueueGenericSend>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d005      	beq.n	8007fb8 <ESP32Receiver+0x78>
			SendMsg(esp32_log_huart, "\r\ESP32Receiver: Queue full or error.\r\n");
 8007fac:	4b06      	ldr	r3, [pc, #24]	@ (8007fc8 <ESP32Receiver+0x88>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4908      	ldr	r1, [pc, #32]	@ (8007fd4 <ESP32Receiver+0x94>)
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7f9 f80e 	bl	8000fd4 <SendMsg>
		}
    }
    vTaskDelay(pdMS_TO_TICKS(500));
 8007fb8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007fbc:	f001 fd60 	bl	8009a80 <vTaskDelay>
    if (xQueueReceive(xESP32ReceiverQueue, &rxMsg, portMAX_DELAY) == pdPASS)
 8007fc0:	e7c6      	b.n	8007f50 <ESP32Receiver+0x10>
 8007fc2:	bf00      	nop
 8007fc4:	20000814 	.word	0x20000814
 8007fc8:	2000080c 	.word	0x2000080c
 8007fcc:	08012098 	.word	0x08012098
 8007fd0:	20013d38 	.word	0x20013d38
 8007fd4:	080120b0 	.word	0x080120b0

08007fd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007fdc:	4904      	ldr	r1, [pc, #16]	@ (8007ff0 <MX_FATFS_Init+0x18>)
 8007fde:	4805      	ldr	r0, [pc, #20]	@ (8007ff4 <MX_FATFS_Init+0x1c>)
 8007fe0:	f006 fa8a 	bl	800e4f8 <FATFS_LinkDriver>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	4b03      	ldr	r3, [pc, #12]	@ (8007ff8 <MX_FATFS_Init+0x20>)
 8007fea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007fec:	bf00      	nop
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	20000884 	.word	0x20000884
 8007ff4:	20000010 	.word	0x20000010
 8007ff8:	20000880 	.word	0x20000880

08007ffc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008000:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008002:	4618      	mov	r0, r3
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	4603      	mov	r3, r0
 8008014:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	4618      	mov	r0, r3
 800801a:	f000 f9d7 	bl	80083cc <USER_SPI_initialize>
 800801e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008020:	4618      	mov	r0, r3
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	4603      	mov	r3, r0
 8008030:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8008032:	79fb      	ldrb	r3, [r7, #7]
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fab5 	bl	80085a4 <USER_SPI_status>
 800803a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	607a      	str	r2, [r7, #4]
 800804e:	603b      	str	r3, [r7, #0]
 8008050:	4603      	mov	r3, r0
 8008052:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8008054:	7bf8      	ldrb	r0, [r7, #15]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	68b9      	ldr	r1, [r7, #8]
 800805c:	f000 fab8 	bl	80085d0 <USER_SPI_read>
 8008060:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b084      	sub	sp, #16
 800806e:	af00      	add	r7, sp, #0
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	603b      	str	r3, [r7, #0]
 8008076:	4603      	mov	r3, r0
 8008078:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800807a:	7bf8      	ldrb	r0, [r7, #15]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	68b9      	ldr	r1, [r7, #8]
 8008082:	f000 fb0b 	bl	800869c <USER_SPI_write>
 8008086:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	603a      	str	r2, [r7, #0]
 800809a:	71fb      	strb	r3, [r7, #7]
 800809c:	460b      	mov	r3, r1
 800809e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80080a0:	79b9      	ldrb	r1, [r7, #6]
 80080a2:	79fb      	ldrb	r3, [r7, #7]
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 fb74 	bl	8008794 <USER_SPI_ioctl>
 80080ac:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
	...

080080b8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80080c0:	f7f9 fe04 	bl	8001ccc <HAL_GetTick>
 80080c4:	4603      	mov	r3, r0
 80080c6:	4a04      	ldr	r2, [pc, #16]	@ (80080d8 <SPI_Timer_On+0x20>)
 80080c8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80080ca:	4a04      	ldr	r2, [pc, #16]	@ (80080dc <SPI_Timer_On+0x24>)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6013      	str	r3, [r2, #0]
}
 80080d0:	bf00      	nop
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	2000088c 	.word	0x2000088c
 80080dc:	20000890 	.word	0x20000890

080080e0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80080e4:	f7f9 fdf2 	bl	8001ccc <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	4b06      	ldr	r3, [pc, #24]	@ (8008104 <SPI_Timer_Status+0x24>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	1ad2      	subs	r2, r2, r3
 80080f0:	4b05      	ldr	r3, [pc, #20]	@ (8008108 <SPI_Timer_Status+0x28>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	bf34      	ite	cc
 80080f8:	2301      	movcc	r3, #1
 80080fa:	2300      	movcs	r3, #0
 80080fc:	b2db      	uxtb	r3, r3
}
 80080fe:	4618      	mov	r0, r3
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	2000088c 	.word	0x2000088c
 8008108:	20000890 	.word	0x20000890

0800810c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af02      	add	r7, sp, #8
 8008112:	4603      	mov	r3, r0
 8008114:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008116:	f107 020f 	add.w	r2, r7, #15
 800811a:	1df9      	adds	r1, r7, #7
 800811c:	2332      	movs	r3, #50	@ 0x32
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	2301      	movs	r3, #1
 8008122:	4804      	ldr	r0, [pc, #16]	@ (8008134 <xchg_spi+0x28>)
 8008124:	f7fd f8bf 	bl	80052a6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8008128:	7bfb      	ldrb	r3, [r7, #15]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	200003d0 	.word	0x200003d0

08008138 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008138:	b590      	push	{r4, r7, lr}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	e00a      	b.n	800815e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	18d4      	adds	r4, r2, r3
 800814e:	20ff      	movs	r0, #255	@ 0xff
 8008150:	f7ff ffdc 	bl	800810c <xchg_spi>
 8008154:	4603      	mov	r3, r0
 8008156:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3301      	adds	r3, #1
 800815c:	60fb      	str	r3, [r7, #12]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	429a      	cmp	r2, r3
 8008164:	d3f0      	bcc.n	8008148 <rcvr_spi_multi+0x10>
	}
}
 8008166:	bf00      	nop
 8008168:	bf00      	nop
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	bd90      	pop	{r4, r7, pc}

08008170 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	b29a      	uxth	r2, r3
 800817e:	f04f 33ff 	mov.w	r3, #4294967295
 8008182:	6879      	ldr	r1, [r7, #4]
 8008184:	4803      	ldr	r0, [pc, #12]	@ (8008194 <xmit_spi_multi+0x24>)
 8008186:	f7fc ff4a 	bl	800501e <HAL_SPI_Transmit>
}
 800818a:	bf00      	nop
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	200003d0 	.word	0x200003d0

08008198 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80081a0:	f7f9 fd94 	bl	8001ccc <HAL_GetTick>
 80081a4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80081aa:	20ff      	movs	r0, #255	@ 0xff
 80081ac:	f7ff ffae 	bl	800810c <xchg_spi>
 80081b0:	4603      	mov	r3, r0
 80081b2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	2bff      	cmp	r3, #255	@ 0xff
 80081b8:	d007      	beq.n	80081ca <wait_ready+0x32>
 80081ba:	f7f9 fd87 	bl	8001ccc <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d8ef      	bhi.n	80081aa <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
 80081cc:	2bff      	cmp	r3, #255	@ 0xff
 80081ce:	bf0c      	ite	eq
 80081d0:	2301      	moveq	r3, #1
 80081d2:	2300      	movne	r3, #0
 80081d4:	b2db      	uxtb	r3, r3
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80081e4:	2201      	movs	r2, #1
 80081e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80081ea:	4804      	ldr	r0, [pc, #16]	@ (80081fc <despiselect+0x1c>)
 80081ec:	f7fa fc1e 	bl	8002a2c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80081f0:	20ff      	movs	r0, #255	@ 0xff
 80081f2:	f7ff ff8b 	bl	800810c <xchg_spi>

}
 80081f6:	bf00      	nop
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	40020c00 	.word	0x40020c00

08008200 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008200:	b580      	push	{r7, lr}
 8008202:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008204:	2200      	movs	r2, #0
 8008206:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800820a:	480a      	ldr	r0, [pc, #40]	@ (8008234 <spiselect+0x34>)
 800820c:	f7fa fc0e 	bl	8002a2c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008210:	20ff      	movs	r0, #255	@ 0xff
 8008212:	f7ff ff7b 	bl	800810c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008216:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800821a:	f7ff ffbd 	bl	8008198 <wait_ready>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <spiselect+0x28>
 8008224:	2301      	movs	r3, #1
 8008226:	e002      	b.n	800822e <spiselect+0x2e>

	despiselect();
 8008228:	f7ff ffda 	bl	80081e0 <despiselect>
	return 0;	/* Timeout */
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	40020c00 	.word	0x40020c00

08008238 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008242:	20c8      	movs	r0, #200	@ 0xc8
 8008244:	f7ff ff38 	bl	80080b8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008248:	20ff      	movs	r0, #255	@ 0xff
 800824a:	f7ff ff5f 	bl	800810c <xchg_spi>
 800824e:	4603      	mov	r3, r0
 8008250:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008252:	7bfb      	ldrb	r3, [r7, #15]
 8008254:	2bff      	cmp	r3, #255	@ 0xff
 8008256:	d104      	bne.n	8008262 <rcvr_datablock+0x2a>
 8008258:	f7ff ff42 	bl	80080e0 <SPI_Timer_Status>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1f2      	bne.n	8008248 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	2bfe      	cmp	r3, #254	@ 0xfe
 8008266:	d001      	beq.n	800826c <rcvr_datablock+0x34>
 8008268:	2300      	movs	r3, #0
 800826a:	e00a      	b.n	8008282 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7ff ff62 	bl	8008138 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008274:	20ff      	movs	r0, #255	@ 0xff
 8008276:	f7ff ff49 	bl	800810c <xchg_spi>
 800827a:	20ff      	movs	r0, #255	@ 0xff
 800827c:	f7ff ff46 	bl	800810c <xchg_spi>

	return 1;						/* Function succeeded */
 8008280:	2301      	movs	r3, #1
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b084      	sub	sp, #16
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008296:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800829a:	f7ff ff7d 	bl	8008198 <wait_ready>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <xmit_datablock+0x1e>
 80082a4:	2300      	movs	r3, #0
 80082a6:	e01e      	b.n	80082e6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80082a8:	78fb      	ldrb	r3, [r7, #3]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7ff ff2e 	bl	800810c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80082b0:	78fb      	ldrb	r3, [r7, #3]
 80082b2:	2bfd      	cmp	r3, #253	@ 0xfd
 80082b4:	d016      	beq.n	80082e4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80082b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7ff ff58 	bl	8008170 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80082c0:	20ff      	movs	r0, #255	@ 0xff
 80082c2:	f7ff ff23 	bl	800810c <xchg_spi>
 80082c6:	20ff      	movs	r0, #255	@ 0xff
 80082c8:	f7ff ff20 	bl	800810c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80082cc:	20ff      	movs	r0, #255	@ 0xff
 80082ce:	f7ff ff1d 	bl	800810c <xchg_spi>
 80082d2:	4603      	mov	r3, r0
 80082d4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
 80082d8:	f003 031f 	and.w	r3, r3, #31
 80082dc:	2b05      	cmp	r3, #5
 80082de:	d001      	beq.n	80082e4 <xmit_datablock+0x5a>
 80082e0:	2300      	movs	r3, #0
 80082e2:	e000      	b.n	80082e6 <xmit_datablock+0x5c>
	}
	return 1;
 80082e4:	2301      	movs	r3, #1
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b084      	sub	sp, #16
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	4603      	mov	r3, r0
 80082f6:	6039      	str	r1, [r7, #0]
 80082f8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80082fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	da0e      	bge.n	8008320 <send_cmd+0x32>
		cmd &= 0x7F;
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008308:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800830a:	2100      	movs	r1, #0
 800830c:	2037      	movs	r0, #55	@ 0x37
 800830e:	f7ff ffee 	bl	80082ee <send_cmd>
 8008312:	4603      	mov	r3, r0
 8008314:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d901      	bls.n	8008320 <send_cmd+0x32>
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	e051      	b.n	80083c4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008320:	79fb      	ldrb	r3, [r7, #7]
 8008322:	2b0c      	cmp	r3, #12
 8008324:	d008      	beq.n	8008338 <send_cmd+0x4a>
		despiselect();
 8008326:	f7ff ff5b 	bl	80081e0 <despiselect>
		if (!spiselect()) return 0xFF;
 800832a:	f7ff ff69 	bl	8008200 <spiselect>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d101      	bne.n	8008338 <send_cmd+0x4a>
 8008334:	23ff      	movs	r3, #255	@ 0xff
 8008336:	e045      	b.n	80083c4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8008338:	79fb      	ldrb	r3, [r7, #7]
 800833a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800833e:	b2db      	uxtb	r3, r3
 8008340:	4618      	mov	r0, r3
 8008342:	f7ff fee3 	bl	800810c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	0e1b      	lsrs	r3, r3, #24
 800834a:	b2db      	uxtb	r3, r3
 800834c:	4618      	mov	r0, r3
 800834e:	f7ff fedd 	bl	800810c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	0c1b      	lsrs	r3, r3, #16
 8008356:	b2db      	uxtb	r3, r3
 8008358:	4618      	mov	r0, r3
 800835a:	f7ff fed7 	bl	800810c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	0a1b      	lsrs	r3, r3, #8
 8008362:	b2db      	uxtb	r3, r3
 8008364:	4618      	mov	r0, r3
 8008366:	f7ff fed1 	bl	800810c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	b2db      	uxtb	r3, r3
 800836e:	4618      	mov	r0, r3
 8008370:	f7ff fecc 	bl	800810c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8008374:	2301      	movs	r3, #1
 8008376:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008378:	79fb      	ldrb	r3, [r7, #7]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <send_cmd+0x94>
 800837e:	2395      	movs	r3, #149	@ 0x95
 8008380:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8008382:	79fb      	ldrb	r3, [r7, #7]
 8008384:	2b08      	cmp	r3, #8
 8008386:	d101      	bne.n	800838c <send_cmd+0x9e>
 8008388:	2387      	movs	r3, #135	@ 0x87
 800838a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	4618      	mov	r0, r3
 8008390:	f7ff febc 	bl	800810c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8008394:	79fb      	ldrb	r3, [r7, #7]
 8008396:	2b0c      	cmp	r3, #12
 8008398:	d102      	bne.n	80083a0 <send_cmd+0xb2>
 800839a:	20ff      	movs	r0, #255	@ 0xff
 800839c:	f7ff feb6 	bl	800810c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80083a0:	230a      	movs	r3, #10
 80083a2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80083a4:	20ff      	movs	r0, #255	@ 0xff
 80083a6:	f7ff feb1 	bl	800810c <xchg_spi>
 80083aa:	4603      	mov	r3, r0
 80083ac:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80083ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	da05      	bge.n	80083c2 <send_cmd+0xd4>
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	73fb      	strb	r3, [r7, #15]
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1f0      	bne.n	80083a4 <send_cmd+0xb6>

	return res;							/* Return received response */
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80083cc:	b590      	push	{r4, r7, lr}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <USER_SPI_initialize+0x14>
 80083dc:	2301      	movs	r3, #1
 80083de:	e0d6      	b.n	800858e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80083e0:	4b6d      	ldr	r3, [pc, #436]	@ (8008598 <USER_SPI_initialize+0x1cc>)
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <USER_SPI_initialize+0x2a>
 80083ee:	4b6a      	ldr	r3, [pc, #424]	@ (8008598 <USER_SPI_initialize+0x1cc>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	e0cb      	b.n	800858e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80083f6:	4b69      	ldr	r3, [pc, #420]	@ (800859c <USER_SPI_initialize+0x1d0>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8008400:	4b66      	ldr	r3, [pc, #408]	@ (800859c <USER_SPI_initialize+0x1d0>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8008408:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800840a:	230a      	movs	r3, #10
 800840c:	73fb      	strb	r3, [r7, #15]
 800840e:	e005      	b.n	800841c <USER_SPI_initialize+0x50>
 8008410:	20ff      	movs	r0, #255	@ 0xff
 8008412:	f7ff fe7b 	bl	800810c <xchg_spi>
 8008416:	7bfb      	ldrb	r3, [r7, #15]
 8008418:	3b01      	subs	r3, #1
 800841a:	73fb      	strb	r3, [r7, #15]
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1f6      	bne.n	8008410 <USER_SPI_initialize+0x44>

	ty = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8008426:	2100      	movs	r1, #0
 8008428:	2000      	movs	r0, #0
 800842a:	f7ff ff60 	bl	80082ee <send_cmd>
 800842e:	4603      	mov	r3, r0
 8008430:	2b01      	cmp	r3, #1
 8008432:	f040 808b 	bne.w	800854c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8008436:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800843a:	f7ff fe3d 	bl	80080b8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800843e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8008442:	2008      	movs	r0, #8
 8008444:	f7ff ff53 	bl	80082ee <send_cmd>
 8008448:	4603      	mov	r3, r0
 800844a:	2b01      	cmp	r3, #1
 800844c:	d151      	bne.n	80084f2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800844e:	2300      	movs	r3, #0
 8008450:	73fb      	strb	r3, [r7, #15]
 8008452:	e00d      	b.n	8008470 <USER_SPI_initialize+0xa4>
 8008454:	7bfc      	ldrb	r4, [r7, #15]
 8008456:	20ff      	movs	r0, #255	@ 0xff
 8008458:	f7ff fe58 	bl	800810c <xchg_spi>
 800845c:	4603      	mov	r3, r0
 800845e:	461a      	mov	r2, r3
 8008460:	f104 0310 	add.w	r3, r4, #16
 8008464:	443b      	add	r3, r7
 8008466:	f803 2c08 	strb.w	r2, [r3, #-8]
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	3301      	adds	r3, #1
 800846e:	73fb      	strb	r3, [r7, #15]
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	2b03      	cmp	r3, #3
 8008474:	d9ee      	bls.n	8008454 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8008476:	7abb      	ldrb	r3, [r7, #10]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d167      	bne.n	800854c <USER_SPI_initialize+0x180>
 800847c:	7afb      	ldrb	r3, [r7, #11]
 800847e:	2baa      	cmp	r3, #170	@ 0xaa
 8008480:	d164      	bne.n	800854c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8008482:	bf00      	nop
 8008484:	f7ff fe2c 	bl	80080e0 <SPI_Timer_Status>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d007      	beq.n	800849e <USER_SPI_initialize+0xd2>
 800848e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008492:	20a9      	movs	r0, #169	@ 0xa9
 8008494:	f7ff ff2b 	bl	80082ee <send_cmd>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1f2      	bne.n	8008484 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800849e:	f7ff fe1f 	bl	80080e0 <SPI_Timer_Status>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d051      	beq.n	800854c <USER_SPI_initialize+0x180>
 80084a8:	2100      	movs	r1, #0
 80084aa:	203a      	movs	r0, #58	@ 0x3a
 80084ac:	f7ff ff1f 	bl	80082ee <send_cmd>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d14a      	bne.n	800854c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80084b6:	2300      	movs	r3, #0
 80084b8:	73fb      	strb	r3, [r7, #15]
 80084ba:	e00d      	b.n	80084d8 <USER_SPI_initialize+0x10c>
 80084bc:	7bfc      	ldrb	r4, [r7, #15]
 80084be:	20ff      	movs	r0, #255	@ 0xff
 80084c0:	f7ff fe24 	bl	800810c <xchg_spi>
 80084c4:	4603      	mov	r3, r0
 80084c6:	461a      	mov	r2, r3
 80084c8:	f104 0310 	add.w	r3, r4, #16
 80084cc:	443b      	add	r3, r7
 80084ce:	f803 2c08 	strb.w	r2, [r3, #-8]
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
 80084d4:	3301      	adds	r3, #1
 80084d6:	73fb      	strb	r3, [r7, #15]
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	2b03      	cmp	r3, #3
 80084dc:	d9ee      	bls.n	80084bc <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80084de:	7a3b      	ldrb	r3, [r7, #8]
 80084e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <USER_SPI_initialize+0x120>
 80084e8:	230c      	movs	r3, #12
 80084ea:	e000      	b.n	80084ee <USER_SPI_initialize+0x122>
 80084ec:	2304      	movs	r3, #4
 80084ee:	737b      	strb	r3, [r7, #13]
 80084f0:	e02c      	b.n	800854c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80084f2:	2100      	movs	r1, #0
 80084f4:	20a9      	movs	r0, #169	@ 0xa9
 80084f6:	f7ff fefa 	bl	80082ee <send_cmd>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d804      	bhi.n	800850a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8008500:	2302      	movs	r3, #2
 8008502:	737b      	strb	r3, [r7, #13]
 8008504:	23a9      	movs	r3, #169	@ 0xa9
 8008506:	73bb      	strb	r3, [r7, #14]
 8008508:	e003      	b.n	8008512 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800850a:	2301      	movs	r3, #1
 800850c:	737b      	strb	r3, [r7, #13]
 800850e:	2301      	movs	r3, #1
 8008510:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8008512:	bf00      	nop
 8008514:	f7ff fde4 	bl	80080e0 <SPI_Timer_Status>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d007      	beq.n	800852e <USER_SPI_initialize+0x162>
 800851e:	7bbb      	ldrb	r3, [r7, #14]
 8008520:	2100      	movs	r1, #0
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff fee3 	bl	80082ee <send_cmd>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1f2      	bne.n	8008514 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800852e:	f7ff fdd7 	bl	80080e0 <SPI_Timer_Status>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d007      	beq.n	8008548 <USER_SPI_initialize+0x17c>
 8008538:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800853c:	2010      	movs	r0, #16
 800853e:	f7ff fed6 	bl	80082ee <send_cmd>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <USER_SPI_initialize+0x180>
				ty = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800854c:	4a14      	ldr	r2, [pc, #80]	@ (80085a0 <USER_SPI_initialize+0x1d4>)
 800854e:	7b7b      	ldrb	r3, [r7, #13]
 8008550:	7013      	strb	r3, [r2, #0]
	despiselect();
 8008552:	f7ff fe45 	bl	80081e0 <despiselect>

	if (ty) {			/* OK */
 8008556:	7b7b      	ldrb	r3, [r7, #13]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d012      	beq.n	8008582 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800855c:	4b0f      	ldr	r3, [pc, #60]	@ (800859c <USER_SPI_initialize+0x1d0>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8008566:	4b0d      	ldr	r3, [pc, #52]	@ (800859c <USER_SPI_initialize+0x1d0>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f042 0210 	orr.w	r2, r2, #16
 800856e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8008570:	4b09      	ldr	r3, [pc, #36]	@ (8008598 <USER_SPI_initialize+0x1cc>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	b2db      	uxtb	r3, r3
 8008576:	f023 0301 	bic.w	r3, r3, #1
 800857a:	b2da      	uxtb	r2, r3
 800857c:	4b06      	ldr	r3, [pc, #24]	@ (8008598 <USER_SPI_initialize+0x1cc>)
 800857e:	701a      	strb	r2, [r3, #0]
 8008580:	e002      	b.n	8008588 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8008582:	4b05      	ldr	r3, [pc, #20]	@ (8008598 <USER_SPI_initialize+0x1cc>)
 8008584:	2201      	movs	r2, #1
 8008586:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8008588:	4b03      	ldr	r3, [pc, #12]	@ (8008598 <USER_SPI_initialize+0x1cc>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	b2db      	uxtb	r3, r3
}
 800858e:	4618      	mov	r0, r3
 8008590:	3714      	adds	r7, #20
 8008592:	46bd      	mov	sp, r7
 8008594:	bd90      	pop	{r4, r7, pc}
 8008596:	bf00      	nop
 8008598:	20000024 	.word	0x20000024
 800859c:	200003d0 	.word	0x200003d0
 80085a0:	20000888 	.word	0x20000888

080085a4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	4603      	mov	r3, r0
 80085ac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80085ae:	79fb      	ldrb	r3, [r7, #7]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <USER_SPI_status+0x14>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e002      	b.n	80085be <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80085b8:	4b04      	ldr	r3, [pc, #16]	@ (80085cc <USER_SPI_status+0x28>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	b2db      	uxtb	r3, r3
}
 80085be:	4618      	mov	r0, r3
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	20000024 	.word	0x20000024

080085d0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60b9      	str	r1, [r7, #8]
 80085d8:	607a      	str	r2, [r7, #4]
 80085da:	603b      	str	r3, [r7, #0]
 80085dc:	4603      	mov	r3, r0
 80085de:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d102      	bne.n	80085ec <USER_SPI_read+0x1c>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d101      	bne.n	80085f0 <USER_SPI_read+0x20>
 80085ec:	2304      	movs	r3, #4
 80085ee:	e04d      	b.n	800868c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80085f0:	4b28      	ldr	r3, [pc, #160]	@ (8008694 <USER_SPI_read+0xc4>)
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <USER_SPI_read+0x32>
 80085fe:	2303      	movs	r3, #3
 8008600:	e044      	b.n	800868c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8008602:	4b25      	ldr	r3, [pc, #148]	@ (8008698 <USER_SPI_read+0xc8>)
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	f003 0308 	and.w	r3, r3, #8
 800860a:	2b00      	cmp	r3, #0
 800860c:	d102      	bne.n	8008614 <USER_SPI_read+0x44>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	025b      	lsls	r3, r3, #9
 8008612:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d111      	bne.n	800863e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800861a:	6879      	ldr	r1, [r7, #4]
 800861c:	2011      	movs	r0, #17
 800861e:	f7ff fe66 	bl	80082ee <send_cmd>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d129      	bne.n	800867c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8008628:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800862c:	68b8      	ldr	r0, [r7, #8]
 800862e:	f7ff fe03 	bl	8008238 <rcvr_datablock>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d021      	beq.n	800867c <USER_SPI_read+0xac>
			count = 0;
 8008638:	2300      	movs	r3, #0
 800863a:	603b      	str	r3, [r7, #0]
 800863c:	e01e      	b.n	800867c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800863e:	6879      	ldr	r1, [r7, #4]
 8008640:	2012      	movs	r0, #18
 8008642:	f7ff fe54 	bl	80082ee <send_cmd>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d117      	bne.n	800867c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800864c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008650:	68b8      	ldr	r0, [r7, #8]
 8008652:	f7ff fdf1 	bl	8008238 <rcvr_datablock>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00a      	beq.n	8008672 <USER_SPI_read+0xa2>
				buff += 512;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008662:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	3b01      	subs	r3, #1
 8008668:	603b      	str	r3, [r7, #0]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1ed      	bne.n	800864c <USER_SPI_read+0x7c>
 8008670:	e000      	b.n	8008674 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8008672:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8008674:	2100      	movs	r1, #0
 8008676:	200c      	movs	r0, #12
 8008678:	f7ff fe39 	bl	80082ee <send_cmd>
		}
	}
	despiselect();
 800867c:	f7ff fdb0 	bl	80081e0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	bf14      	ite	ne
 8008686:	2301      	movne	r3, #1
 8008688:	2300      	moveq	r3, #0
 800868a:	b2db      	uxtb	r3, r3
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	20000024 	.word	0x20000024
 8008698:	20000888 	.word	0x20000888

0800869c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	607a      	str	r2, [r7, #4]
 80086a6:	603b      	str	r3, [r7, #0]
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d102      	bne.n	80086b8 <USER_SPI_write+0x1c>
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <USER_SPI_write+0x20>
 80086b8:	2304      	movs	r3, #4
 80086ba:	e063      	b.n	8008784 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80086bc:	4b33      	ldr	r3, [pc, #204]	@ (800878c <USER_SPI_write+0xf0>)
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <USER_SPI_write+0x32>
 80086ca:	2303      	movs	r3, #3
 80086cc:	e05a      	b.n	8008784 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80086ce:	4b2f      	ldr	r3, [pc, #188]	@ (800878c <USER_SPI_write+0xf0>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <USER_SPI_write+0x44>
 80086dc:	2302      	movs	r3, #2
 80086de:	e051      	b.n	8008784 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80086e0:	4b2b      	ldr	r3, [pc, #172]	@ (8008790 <USER_SPI_write+0xf4>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	f003 0308 	and.w	r3, r3, #8
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d102      	bne.n	80086f2 <USER_SPI_write+0x56>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	025b      	lsls	r3, r3, #9
 80086f0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d110      	bne.n	800871a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	2018      	movs	r0, #24
 80086fc:	f7ff fdf7 	bl	80082ee <send_cmd>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d136      	bne.n	8008774 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8008706:	21fe      	movs	r1, #254	@ 0xfe
 8008708:	68b8      	ldr	r0, [r7, #8]
 800870a:	f7ff fdbe 	bl	800828a <xmit_datablock>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d02f      	beq.n	8008774 <USER_SPI_write+0xd8>
			count = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	603b      	str	r3, [r7, #0]
 8008718:	e02c      	b.n	8008774 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800871a:	4b1d      	ldr	r3, [pc, #116]	@ (8008790 <USER_SPI_write+0xf4>)
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	f003 0306 	and.w	r3, r3, #6
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <USER_SPI_write+0x92>
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	2097      	movs	r0, #151	@ 0x97
 800872a:	f7ff fde0 	bl	80082ee <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800872e:	6879      	ldr	r1, [r7, #4]
 8008730:	2019      	movs	r0, #25
 8008732:	f7ff fddc 	bl	80082ee <send_cmd>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d11b      	bne.n	8008774 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800873c:	21fc      	movs	r1, #252	@ 0xfc
 800873e:	68b8      	ldr	r0, [r7, #8]
 8008740:	f7ff fda3 	bl	800828a <xmit_datablock>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00a      	beq.n	8008760 <USER_SPI_write+0xc4>
				buff += 512;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008750:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	3b01      	subs	r3, #1
 8008756:	603b      	str	r3, [r7, #0]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1ee      	bne.n	800873c <USER_SPI_write+0xa0>
 800875e:	e000      	b.n	8008762 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8008760:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8008762:	21fd      	movs	r1, #253	@ 0xfd
 8008764:	2000      	movs	r0, #0
 8008766:	f7ff fd90 	bl	800828a <xmit_datablock>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <USER_SPI_write+0xd8>
 8008770:	2301      	movs	r3, #1
 8008772:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8008774:	f7ff fd34 	bl	80081e0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	bf14      	ite	ne
 800877e:	2301      	movne	r3, #1
 8008780:	2300      	moveq	r3, #0
 8008782:	b2db      	uxtb	r3, r3
}
 8008784:	4618      	mov	r0, r3
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	20000024 	.word	0x20000024
 8008790:	20000888 	.word	0x20000888

08008794 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08c      	sub	sp, #48	@ 0x30
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	603a      	str	r2, [r7, #0]
 800879e:	71fb      	strb	r3, [r7, #7]
 80087a0:	460b      	mov	r3, r1
 80087a2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <USER_SPI_ioctl+0x1a>
 80087aa:	2304      	movs	r3, #4
 80087ac:	e15a      	b.n	8008a64 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80087ae:	4baf      	ldr	r3, [pc, #700]	@ (8008a6c <USER_SPI_ioctl+0x2d8>)
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	f003 0301 	and.w	r3, r3, #1
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <USER_SPI_ioctl+0x2c>
 80087bc:	2303      	movs	r3, #3
 80087be:	e151      	b.n	8008a64 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80087c6:	79bb      	ldrb	r3, [r7, #6]
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	f200 8136 	bhi.w	8008a3a <USER_SPI_ioctl+0x2a6>
 80087ce:	a201      	add	r2, pc, #4	@ (adr r2, 80087d4 <USER_SPI_ioctl+0x40>)
 80087d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d4:	080087e9 	.word	0x080087e9
 80087d8:	080087fd 	.word	0x080087fd
 80087dc:	08008a3b 	.word	0x08008a3b
 80087e0:	080088a9 	.word	0x080088a9
 80087e4:	0800899f 	.word	0x0800899f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80087e8:	f7ff fd0a 	bl	8008200 <spiselect>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 8127 	beq.w	8008a42 <USER_SPI_ioctl+0x2ae>
 80087f4:	2300      	movs	r3, #0
 80087f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80087fa:	e122      	b.n	8008a42 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80087fc:	2100      	movs	r1, #0
 80087fe:	2009      	movs	r0, #9
 8008800:	f7ff fd75 	bl	80082ee <send_cmd>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	f040 811d 	bne.w	8008a46 <USER_SPI_ioctl+0x2b2>
 800880c:	f107 030c 	add.w	r3, r7, #12
 8008810:	2110      	movs	r1, #16
 8008812:	4618      	mov	r0, r3
 8008814:	f7ff fd10 	bl	8008238 <rcvr_datablock>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 8113 	beq.w	8008a46 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8008820:	7b3b      	ldrb	r3, [r7, #12]
 8008822:	099b      	lsrs	r3, r3, #6
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b01      	cmp	r3, #1
 8008828:	d111      	bne.n	800884e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800882a:	7d7b      	ldrb	r3, [r7, #21]
 800882c:	461a      	mov	r2, r3
 800882e:	7d3b      	ldrb	r3, [r7, #20]
 8008830:	021b      	lsls	r3, r3, #8
 8008832:	4413      	add	r3, r2
 8008834:	461a      	mov	r2, r3
 8008836:	7cfb      	ldrb	r3, [r7, #19]
 8008838:	041b      	lsls	r3, r3, #16
 800883a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800883e:	4413      	add	r3, r2
 8008840:	3301      	adds	r3, #1
 8008842:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	029a      	lsls	r2, r3, #10
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	e028      	b.n	80088a0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800884e:	7c7b      	ldrb	r3, [r7, #17]
 8008850:	f003 030f 	and.w	r3, r3, #15
 8008854:	b2da      	uxtb	r2, r3
 8008856:	7dbb      	ldrb	r3, [r7, #22]
 8008858:	09db      	lsrs	r3, r3, #7
 800885a:	b2db      	uxtb	r3, r3
 800885c:	4413      	add	r3, r2
 800885e:	b2da      	uxtb	r2, r3
 8008860:	7d7b      	ldrb	r3, [r7, #21]
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	b2db      	uxtb	r3, r3
 8008866:	f003 0306 	and.w	r3, r3, #6
 800886a:	b2db      	uxtb	r3, r3
 800886c:	4413      	add	r3, r2
 800886e:	b2db      	uxtb	r3, r3
 8008870:	3302      	adds	r3, #2
 8008872:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8008876:	7d3b      	ldrb	r3, [r7, #20]
 8008878:	099b      	lsrs	r3, r3, #6
 800887a:	b2db      	uxtb	r3, r3
 800887c:	461a      	mov	r2, r3
 800887e:	7cfb      	ldrb	r3, [r7, #19]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	441a      	add	r2, r3
 8008884:	7cbb      	ldrb	r3, [r7, #18]
 8008886:	029b      	lsls	r3, r3, #10
 8008888:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800888c:	4413      	add	r3, r2
 800888e:	3301      	adds	r3, #1
 8008890:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8008892:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008896:	3b09      	subs	r3, #9
 8008898:	69fa      	ldr	r2, [r7, #28]
 800889a:	409a      	lsls	r2, r3
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80088a6:	e0ce      	b.n	8008a46 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80088a8:	4b71      	ldr	r3, [pc, #452]	@ (8008a70 <USER_SPI_ioctl+0x2dc>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	f003 0304 	and.w	r3, r3, #4
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d031      	beq.n	8008918 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80088b4:	2100      	movs	r1, #0
 80088b6:	208d      	movs	r0, #141	@ 0x8d
 80088b8:	f7ff fd19 	bl	80082ee <send_cmd>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f040 80c3 	bne.w	8008a4a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80088c4:	20ff      	movs	r0, #255	@ 0xff
 80088c6:	f7ff fc21 	bl	800810c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80088ca:	f107 030c 	add.w	r3, r7, #12
 80088ce:	2110      	movs	r1, #16
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7ff fcb1 	bl	8008238 <rcvr_datablock>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 80b6 	beq.w	8008a4a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80088de:	2330      	movs	r3, #48	@ 0x30
 80088e0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80088e4:	e007      	b.n	80088f6 <USER_SPI_ioctl+0x162>
 80088e6:	20ff      	movs	r0, #255	@ 0xff
 80088e8:	f7ff fc10 	bl	800810c <xchg_spi>
 80088ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80088f0:	3b01      	subs	r3, #1
 80088f2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80088f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1f3      	bne.n	80088e6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80088fe:	7dbb      	ldrb	r3, [r7, #22]
 8008900:	091b      	lsrs	r3, r3, #4
 8008902:	b2db      	uxtb	r3, r3
 8008904:	461a      	mov	r2, r3
 8008906:	2310      	movs	r3, #16
 8008908:	fa03 f202 	lsl.w	r2, r3, r2
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8008916:	e098      	b.n	8008a4a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8008918:	2100      	movs	r1, #0
 800891a:	2009      	movs	r0, #9
 800891c:	f7ff fce7 	bl	80082ee <send_cmd>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	f040 8091 	bne.w	8008a4a <USER_SPI_ioctl+0x2b6>
 8008928:	f107 030c 	add.w	r3, r7, #12
 800892c:	2110      	movs	r1, #16
 800892e:	4618      	mov	r0, r3
 8008930:	f7ff fc82 	bl	8008238 <rcvr_datablock>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 8087 	beq.w	8008a4a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800893c:	4b4c      	ldr	r3, [pc, #304]	@ (8008a70 <USER_SPI_ioctl+0x2dc>)
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	f003 0302 	and.w	r3, r3, #2
 8008944:	2b00      	cmp	r3, #0
 8008946:	d012      	beq.n	800896e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8008948:	7dbb      	ldrb	r3, [r7, #22]
 800894a:	005b      	lsls	r3, r3, #1
 800894c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8008950:	7dfa      	ldrb	r2, [r7, #23]
 8008952:	09d2      	lsrs	r2, r2, #7
 8008954:	b2d2      	uxtb	r2, r2
 8008956:	4413      	add	r3, r2
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	7e7b      	ldrb	r3, [r7, #25]
 800895c:	099b      	lsrs	r3, r3, #6
 800895e:	b2db      	uxtb	r3, r3
 8008960:	3b01      	subs	r3, #1
 8008962:	fa02 f303 	lsl.w	r3, r2, r3
 8008966:	461a      	mov	r2, r3
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	e013      	b.n	8008996 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800896e:	7dbb      	ldrb	r3, [r7, #22]
 8008970:	109b      	asrs	r3, r3, #2
 8008972:	b29b      	uxth	r3, r3
 8008974:	f003 031f 	and.w	r3, r3, #31
 8008978:	3301      	adds	r3, #1
 800897a:	7dfa      	ldrb	r2, [r7, #23]
 800897c:	00d2      	lsls	r2, r2, #3
 800897e:	f002 0218 	and.w	r2, r2, #24
 8008982:	7df9      	ldrb	r1, [r7, #23]
 8008984:	0949      	lsrs	r1, r1, #5
 8008986:	b2c9      	uxtb	r1, r1
 8008988:	440a      	add	r2, r1
 800898a:	3201      	adds	r2, #1
 800898c:	fb02 f303 	mul.w	r3, r2, r3
 8008990:	461a      	mov	r2, r3
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800899c:	e055      	b.n	8008a4a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800899e:	4b34      	ldr	r3, [pc, #208]	@ (8008a70 <USER_SPI_ioctl+0x2dc>)
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	f003 0306 	and.w	r3, r3, #6
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d051      	beq.n	8008a4e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80089aa:	f107 020c 	add.w	r2, r7, #12
 80089ae:	79fb      	ldrb	r3, [r7, #7]
 80089b0:	210b      	movs	r1, #11
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7ff feee 	bl	8008794 <USER_SPI_ioctl>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d149      	bne.n	8008a52 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80089be:	7b3b      	ldrb	r3, [r7, #12]
 80089c0:	099b      	lsrs	r3, r3, #6
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d104      	bne.n	80089d2 <USER_SPI_ioctl+0x23e>
 80089c8:	7dbb      	ldrb	r3, [r7, #22]
 80089ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d041      	beq.n	8008a56 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	623b      	str	r3, [r7, #32]
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80089e2:	4b23      	ldr	r3, [pc, #140]	@ (8008a70 <USER_SPI_ioctl+0x2dc>)
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	f003 0308 	and.w	r3, r3, #8
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d105      	bne.n	80089fa <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80089ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f0:	025b      	lsls	r3, r3, #9
 80089f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f6:	025b      	lsls	r3, r3, #9
 80089f8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80089fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089fc:	2020      	movs	r0, #32
 80089fe:	f7ff fc76 	bl	80082ee <send_cmd>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d128      	bne.n	8008a5a <USER_SPI_ioctl+0x2c6>
 8008a08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a0a:	2021      	movs	r0, #33	@ 0x21
 8008a0c:	f7ff fc6f 	bl	80082ee <send_cmd>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d121      	bne.n	8008a5a <USER_SPI_ioctl+0x2c6>
 8008a16:	2100      	movs	r1, #0
 8008a18:	2026      	movs	r0, #38	@ 0x26
 8008a1a:	f7ff fc68 	bl	80082ee <send_cmd>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d11a      	bne.n	8008a5a <USER_SPI_ioctl+0x2c6>
 8008a24:	f247 5030 	movw	r0, #30000	@ 0x7530
 8008a28:	f7ff fbb6 	bl	8008198 <wait_ready>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d013      	beq.n	8008a5a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8008a32:	2300      	movs	r3, #0
 8008a34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8008a38:	e00f      	b.n	8008a5a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8008a3a:	2304      	movs	r3, #4
 8008a3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008a40:	e00c      	b.n	8008a5c <USER_SPI_ioctl+0x2c8>
		break;
 8008a42:	bf00      	nop
 8008a44:	e00a      	b.n	8008a5c <USER_SPI_ioctl+0x2c8>
		break;
 8008a46:	bf00      	nop
 8008a48:	e008      	b.n	8008a5c <USER_SPI_ioctl+0x2c8>
		break;
 8008a4a:	bf00      	nop
 8008a4c:	e006      	b.n	8008a5c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008a4e:	bf00      	nop
 8008a50:	e004      	b.n	8008a5c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008a52:	bf00      	nop
 8008a54:	e002      	b.n	8008a5c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008a56:	bf00      	nop
 8008a58:	e000      	b.n	8008a5c <USER_SPI_ioctl+0x2c8>
		break;
 8008a5a:	bf00      	nop
	}

	despiselect();
 8008a5c:	f7ff fbc0 	bl	80081e0 <despiselect>

	return res;
 8008a60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3730      	adds	r7, #48	@ 0x30
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	20000024 	.word	0x20000024
 8008a70:	20000888 	.word	0x20000888

08008a74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f103 0208 	add.w	r2, r3, #8
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f04f 32ff 	mov.w	r2, #4294967295
 8008a8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f103 0208 	add.w	r2, r3, #8
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f103 0208 	add.w	r2, r3, #8
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ac2:	bf00      	nop
 8008ac4:	370c      	adds	r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b085      	sub	sp, #20
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	689a      	ldr	r2, [r3, #8]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	601a      	str	r2, [r3, #0]
}
 8008b0a:	bf00      	nop
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b16:	b480      	push	{r7}
 8008b18:	b085      	sub	sp, #20
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2c:	d103      	bne.n	8008b36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	e00c      	b.n	8008b50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	3308      	adds	r3, #8
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	e002      	b.n	8008b44 <vListInsert+0x2e>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d2f6      	bcs.n	8008b3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	685a      	ldr	r2, [r3, #4]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	1c5a      	adds	r2, r3, #1
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	601a      	str	r2, [r3, #0]
}
 8008b7c:	bf00      	nop
 8008b7e:	3714      	adds	r7, #20
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	6892      	ldr	r2, [r2, #8]
 8008b9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	6852      	ldr	r2, [r2, #4]
 8008ba8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d103      	bne.n	8008bbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	689a      	ldr	r2, [r3, #8]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	1e5a      	subs	r2, r3, #1
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10b      	bne.n	8008c08 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008c02:	bf00      	nop
 8008c04:	bf00      	nop
 8008c06:	e7fd      	b.n	8008c04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008c08:	f002 fa0e 	bl	800b028 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c14:	68f9      	ldr	r1, [r7, #12]
 8008c16:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008c18:	fb01 f303 	mul.w	r3, r1, r3
 8008c1c:	441a      	add	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	68f9      	ldr	r1, [r7, #12]
 8008c3c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008c3e:	fb01 f303 	mul.w	r3, r1, r3
 8008c42:	441a      	add	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	22ff      	movs	r2, #255	@ 0xff
 8008c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	22ff      	movs	r2, #255	@ 0xff
 8008c54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d114      	bne.n	8008c88 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d01a      	beq.n	8008c9c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	3310      	adds	r3, #16
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f001 f9b0 	bl	8009fd0 <xTaskRemoveFromEventList>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d012      	beq.n	8008c9c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008c76:	4b0d      	ldr	r3, [pc, #52]	@ (8008cac <xQueueGenericReset+0xd0>)
 8008c78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	e009      	b.n	8008c9c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	3310      	adds	r3, #16
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7ff fef1 	bl	8008a74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	3324      	adds	r3, #36	@ 0x24
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7ff feec 	bl	8008a74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c9c:	f002 f9f6 	bl	800b08c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ca0:	2301      	movs	r3, #1
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	e000ed04 	.word	0xe000ed04

08008cb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b08a      	sub	sp, #40	@ 0x28
 8008cb4:	af02      	add	r7, sp, #8
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10b      	bne.n	8008cdc <xQueueGenericCreate+0x2c>
	__asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	613b      	str	r3, [r7, #16]
}
 8008cd6:	bf00      	nop
 8008cd8:	bf00      	nop
 8008cda:	e7fd      	b.n	8008cd8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d102      	bne.n	8008ce8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	61fb      	str	r3, [r7, #28]
 8008ce6:	e004      	b.n	8008cf2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	fb02 f303 	mul.w	r3, r2, r3
 8008cf0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	3350      	adds	r3, #80	@ 0x50
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f002 fab8 	bl	800b26c <pvPortMalloc>
 8008cfc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00d      	beq.n	8008d20 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	3350      	adds	r3, #80	@ 0x50
 8008d0c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d0e:	79fa      	ldrb	r2, [r7, #7]
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	4613      	mov	r3, r2
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	68b9      	ldr	r1, [r7, #8]
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f000 f805 	bl	8008d2a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d20:	69bb      	ldr	r3, [r7, #24]
	}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3720      	adds	r7, #32
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b084      	sub	sp, #16
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	60f8      	str	r0, [r7, #12]
 8008d32:	60b9      	str	r1, [r7, #8]
 8008d34:	607a      	str	r2, [r7, #4]
 8008d36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d103      	bne.n	8008d46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	69ba      	ldr	r2, [r7, #24]
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	e002      	b.n	8008d4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d58:	2101      	movs	r1, #1
 8008d5a:	69b8      	ldr	r0, [r7, #24]
 8008d5c:	f7ff ff3e 	bl	8008bdc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	78fa      	ldrb	r2, [r7, #3]
 8008d64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d68:	bf00      	nop
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00e      	beq.n	8008d9c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008d90:	2300      	movs	r3, #0
 8008d92:	2200      	movs	r2, #0
 8008d94:	2100      	movs	r1, #0
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f81c 	bl	8008dd4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008d9c:	bf00      	nop
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	4603      	mov	r3, r0
 8008dac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008dae:	2301      	movs	r3, #1
 8008db0:	617b      	str	r3, [r7, #20]
 8008db2:	2300      	movs	r3, #0
 8008db4:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008db6:	79fb      	ldrb	r3, [r7, #7]
 8008db8:	461a      	mov	r2, r3
 8008dba:	6939      	ldr	r1, [r7, #16]
 8008dbc:	6978      	ldr	r0, [r7, #20]
 8008dbe:	f7ff ff77 	bl	8008cb0 <xQueueGenericCreate>
 8008dc2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f7ff ffd3 	bl	8008d70 <prvInitialiseMutex>

		return xNewQueue;
 8008dca:	68fb      	ldr	r3, [r7, #12]
	}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b08e      	sub	sp, #56	@ 0x38
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
 8008de0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008de2:	2300      	movs	r3, #0
 8008de4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10b      	bne.n	8008e08 <xQueueGenericSend+0x34>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008e02:	bf00      	nop
 8008e04:	bf00      	nop
 8008e06:	e7fd      	b.n	8008e04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d103      	bne.n	8008e16 <xQueueGenericSend+0x42>
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <xQueueGenericSend+0x46>
 8008e16:	2301      	movs	r3, #1
 8008e18:	e000      	b.n	8008e1c <xQueueGenericSend+0x48>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10b      	bne.n	8008e38 <xQueueGenericSend+0x64>
	__asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e32:	bf00      	nop
 8008e34:	bf00      	nop
 8008e36:	e7fd      	b.n	8008e34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d103      	bne.n	8008e46 <xQueueGenericSend+0x72>
 8008e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d101      	bne.n	8008e4a <xQueueGenericSend+0x76>
 8008e46:	2301      	movs	r3, #1
 8008e48:	e000      	b.n	8008e4c <xQueueGenericSend+0x78>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10b      	bne.n	8008e68 <xQueueGenericSend+0x94>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	623b      	str	r3, [r7, #32]
}
 8008e62:	bf00      	nop
 8008e64:	bf00      	nop
 8008e66:	e7fd      	b.n	8008e64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e68:	f001 fa52 	bl	800a310 <xTaskGetSchedulerState>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d102      	bne.n	8008e78 <xQueueGenericSend+0xa4>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d101      	bne.n	8008e7c <xQueueGenericSend+0xa8>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e000      	b.n	8008e7e <xQueueGenericSend+0xaa>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10b      	bne.n	8008e9a <xQueueGenericSend+0xc6>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	61fb      	str	r3, [r7, #28]
}
 8008e94:	bf00      	nop
 8008e96:	bf00      	nop
 8008e98:	e7fd      	b.n	8008e96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e9a:	f002 f8c5 	bl	800b028 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d302      	bcc.n	8008eb0 <xQueueGenericSend+0xdc>
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d129      	bne.n	8008f04 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008eb0:	683a      	ldr	r2, [r7, #0]
 8008eb2:	68b9      	ldr	r1, [r7, #8]
 8008eb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008eb6:	f000 fb35 	bl	8009524 <prvCopyDataToQueue>
 8008eba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d010      	beq.n	8008ee6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec6:	3324      	adds	r3, #36	@ 0x24
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f001 f881 	bl	8009fd0 <xTaskRemoveFromEventList>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d013      	beq.n	8008efc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8008fd4 <xQueueGenericSend+0x200>)
 8008ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	e00a      	b.n	8008efc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d007      	beq.n	8008efc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008eec:	4b39      	ldr	r3, [pc, #228]	@ (8008fd4 <xQueueGenericSend+0x200>)
 8008eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008efc:	f002 f8c6 	bl	800b08c <vPortExitCritical>
				return pdPASS;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e063      	b.n	8008fcc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d103      	bne.n	8008f12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f0a:	f002 f8bf 	bl	800b08c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	e05c      	b.n	8008fcc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d106      	bne.n	8008f26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f18:	f107 0314 	add.w	r3, r7, #20
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f001 f8bb 	bl	800a098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f22:	2301      	movs	r3, #1
 8008f24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f26:	f002 f8b1 	bl	800b08c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f2a:	f000 fe2d 	bl	8009b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f2e:	f002 f87b 	bl	800b028 <vPortEnterCritical>
 8008f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f38:	b25b      	sxtb	r3, r3
 8008f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3e:	d103      	bne.n	8008f48 <xQueueGenericSend+0x174>
 8008f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f4e:	b25b      	sxtb	r3, r3
 8008f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f54:	d103      	bne.n	8008f5e <xQueueGenericSend+0x18a>
 8008f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f5e:	f002 f895 	bl	800b08c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f62:	1d3a      	adds	r2, r7, #4
 8008f64:	f107 0314 	add.w	r3, r7, #20
 8008f68:	4611      	mov	r1, r2
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f001 f8aa 	bl	800a0c4 <xTaskCheckForTimeOut>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d124      	bne.n	8008fc0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f78:	f000 fbcc 	bl	8009714 <prvIsQueueFull>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d018      	beq.n	8008fb4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f84:	3310      	adds	r3, #16
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	4611      	mov	r1, r2
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 ffce 	bl	8009f2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f92:	f000 fb57 	bl	8009644 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f96:	f000 fe05 	bl	8009ba4 <xTaskResumeAll>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f47f af7c 	bne.w	8008e9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8008fd4 <xQueueGenericSend+0x200>)
 8008fa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fa8:	601a      	str	r2, [r3, #0]
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	e772      	b.n	8008e9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008fb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fb6:	f000 fb45 	bl	8009644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fba:	f000 fdf3 	bl	8009ba4 <xTaskResumeAll>
 8008fbe:	e76c      	b.n	8008e9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008fc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fc2:	f000 fb3f 	bl	8009644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fc6:	f000 fded 	bl	8009ba4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008fca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3738      	adds	r7, #56	@ 0x38
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	e000ed04 	.word	0xe000ed04

08008fd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b08e      	sub	sp, #56	@ 0x38
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
 8008fe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10b      	bne.n	8009008 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009002:	bf00      	nop
 8009004:	bf00      	nop
 8009006:	e7fd      	b.n	8009004 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d103      	bne.n	8009016 <xQueueGenericSendFromISR+0x3e>
 800900e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <xQueueGenericSendFromISR+0x42>
 8009016:	2301      	movs	r3, #1
 8009018:	e000      	b.n	800901c <xQueueGenericSendFromISR+0x44>
 800901a:	2300      	movs	r3, #0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10b      	bne.n	8009038 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	623b      	str	r3, [r7, #32]
}
 8009032:	bf00      	nop
 8009034:	bf00      	nop
 8009036:	e7fd      	b.n	8009034 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2b02      	cmp	r3, #2
 800903c:	d103      	bne.n	8009046 <xQueueGenericSendFromISR+0x6e>
 800903e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009042:	2b01      	cmp	r3, #1
 8009044:	d101      	bne.n	800904a <xQueueGenericSendFromISR+0x72>
 8009046:	2301      	movs	r3, #1
 8009048:	e000      	b.n	800904c <xQueueGenericSendFromISR+0x74>
 800904a:	2300      	movs	r3, #0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10b      	bne.n	8009068 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	61fb      	str	r3, [r7, #28]
}
 8009062:	bf00      	nop
 8009064:	bf00      	nop
 8009066:	e7fd      	b.n	8009064 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009068:	f002 f8be 	bl	800b1e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800906c:	f3ef 8211 	mrs	r2, BASEPRI
 8009070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	61ba      	str	r2, [r7, #24]
 8009082:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009084:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009086:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800908c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009090:	429a      	cmp	r2, r3
 8009092:	d302      	bcc.n	800909a <xQueueGenericSendFromISR+0xc2>
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	2b02      	cmp	r3, #2
 8009098:	d12c      	bne.n	80090f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800909a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	68b9      	ldr	r1, [r7, #8]
 80090a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090aa:	f000 fa3b 	bl	8009524 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80090ae:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80090b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b6:	d112      	bne.n	80090de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d016      	beq.n	80090ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c2:	3324      	adds	r3, #36	@ 0x24
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 ff83 	bl	8009fd0 <xTaskRemoveFromEventList>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00e      	beq.n	80090ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00b      	beq.n	80090ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	601a      	str	r2, [r3, #0]
 80090dc:	e007      	b.n	80090ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80090e2:	3301      	adds	r3, #1
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	b25a      	sxtb	r2, r3
 80090e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80090ee:	2301      	movs	r3, #1
 80090f0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80090f2:	e001      	b.n	80090f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090f4:	2300      	movs	r3, #0
 80090f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80090f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090fa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009102:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009106:	4618      	mov	r0, r3
 8009108:	3738      	adds	r7, #56	@ 0x38
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
	...

08009110 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b08c      	sub	sp, #48	@ 0x30
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800911c:	2300      	movs	r3, #0
 800911e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10b      	bne.n	8009142 <xQueueReceive+0x32>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	623b      	str	r3, [r7, #32]
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	e7fd      	b.n	800913e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d103      	bne.n	8009150 <xQueueReceive+0x40>
 8009148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <xQueueReceive+0x44>
 8009150:	2301      	movs	r3, #1
 8009152:	e000      	b.n	8009156 <xQueueReceive+0x46>
 8009154:	2300      	movs	r3, #0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10b      	bne.n	8009172 <xQueueReceive+0x62>
	__asm volatile
 800915a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	61fb      	str	r3, [r7, #28]
}
 800916c:	bf00      	nop
 800916e:	bf00      	nop
 8009170:	e7fd      	b.n	800916e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009172:	f001 f8cd 	bl	800a310 <xTaskGetSchedulerState>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d102      	bne.n	8009182 <xQueueReceive+0x72>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d101      	bne.n	8009186 <xQueueReceive+0x76>
 8009182:	2301      	movs	r3, #1
 8009184:	e000      	b.n	8009188 <xQueueReceive+0x78>
 8009186:	2300      	movs	r3, #0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10b      	bne.n	80091a4 <xQueueReceive+0x94>
	__asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	61bb      	str	r3, [r7, #24]
}
 800919e:	bf00      	nop
 80091a0:	bf00      	nop
 80091a2:	e7fd      	b.n	80091a0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80091a4:	f001 ff40 	bl	800b028 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d01f      	beq.n	80091f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091b4:	68b9      	ldr	r1, [r7, #8]
 80091b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091b8:	f000 fa1e 	bl	80095f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091be:	1e5a      	subs	r2, r3, #1
 80091c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00f      	beq.n	80091ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ce:	3310      	adds	r3, #16
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fefd 	bl	8009fd0 <xTaskRemoveFromEventList>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d007      	beq.n	80091ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80091dc:	4b3c      	ldr	r3, [pc, #240]	@ (80092d0 <xQueueReceive+0x1c0>)
 80091de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	f3bf 8f4f 	dsb	sy
 80091e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80091ec:	f001 ff4e 	bl	800b08c <vPortExitCritical>
				return pdPASS;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e069      	b.n	80092c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d103      	bne.n	8009202 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091fa:	f001 ff47 	bl	800b08c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091fe:	2300      	movs	r3, #0
 8009200:	e062      	b.n	80092c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009204:	2b00      	cmp	r3, #0
 8009206:	d106      	bne.n	8009216 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009208:	f107 0310 	add.w	r3, r7, #16
 800920c:	4618      	mov	r0, r3
 800920e:	f000 ff43 	bl	800a098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009212:	2301      	movs	r3, #1
 8009214:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009216:	f001 ff39 	bl	800b08c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800921a:	f000 fcb5 	bl	8009b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800921e:	f001 ff03 	bl	800b028 <vPortEnterCritical>
 8009222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009224:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009228:	b25b      	sxtb	r3, r3
 800922a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800922e:	d103      	bne.n	8009238 <xQueueReceive+0x128>
 8009230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009232:	2200      	movs	r2, #0
 8009234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800923e:	b25b      	sxtb	r3, r3
 8009240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009244:	d103      	bne.n	800924e <xQueueReceive+0x13e>
 8009246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800924e:	f001 ff1d 	bl	800b08c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009252:	1d3a      	adds	r2, r7, #4
 8009254:	f107 0310 	add.w	r3, r7, #16
 8009258:	4611      	mov	r1, r2
 800925a:	4618      	mov	r0, r3
 800925c:	f000 ff32 	bl	800a0c4 <xTaskCheckForTimeOut>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d123      	bne.n	80092ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009268:	f000 fa3e 	bl	80096e8 <prvIsQueueEmpty>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d017      	beq.n	80092a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009274:	3324      	adds	r3, #36	@ 0x24
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	4611      	mov	r1, r2
 800927a:	4618      	mov	r0, r3
 800927c:	f000 fe56 	bl	8009f2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009280:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009282:	f000 f9df 	bl	8009644 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009286:	f000 fc8d 	bl	8009ba4 <xTaskResumeAll>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d189      	bne.n	80091a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009290:	4b0f      	ldr	r3, [pc, #60]	@ (80092d0 <xQueueReceive+0x1c0>)
 8009292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009296:	601a      	str	r2, [r3, #0]
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	e780      	b.n	80091a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80092a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092a4:	f000 f9ce 	bl	8009644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092a8:	f000 fc7c 	bl	8009ba4 <xTaskResumeAll>
 80092ac:	e77a      	b.n	80091a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80092ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092b0:	f000 f9c8 	bl	8009644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092b4:	f000 fc76 	bl	8009ba4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092ba:	f000 fa15 	bl	80096e8 <prvIsQueueEmpty>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f43f af6f 	beq.w	80091a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80092c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3730      	adds	r7, #48	@ 0x30
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	e000ed04 	.word	0xe000ed04

080092d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08e      	sub	sp, #56	@ 0x38
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80092de:	2300      	movs	r3, #0
 80092e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80092e6:	2300      	movs	r3, #0
 80092e8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10b      	bne.n	8009308 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	623b      	str	r3, [r7, #32]
}
 8009302:	bf00      	nop
 8009304:	bf00      	nop
 8009306:	e7fd      	b.n	8009304 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00b      	beq.n	8009328 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	61fb      	str	r3, [r7, #28]
}
 8009322:	bf00      	nop
 8009324:	bf00      	nop
 8009326:	e7fd      	b.n	8009324 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009328:	f000 fff2 	bl	800a310 <xTaskGetSchedulerState>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d102      	bne.n	8009338 <xQueueSemaphoreTake+0x64>
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d101      	bne.n	800933c <xQueueSemaphoreTake+0x68>
 8009338:	2301      	movs	r3, #1
 800933a:	e000      	b.n	800933e <xQueueSemaphoreTake+0x6a>
 800933c:	2300      	movs	r3, #0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10b      	bne.n	800935a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	61bb      	str	r3, [r7, #24]
}
 8009354:	bf00      	nop
 8009356:	bf00      	nop
 8009358:	e7fd      	b.n	8009356 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800935a:	f001 fe65 	bl	800b028 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800935e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009362:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009366:	2b00      	cmp	r3, #0
 8009368:	d024      	beq.n	80093b4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800936a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936c:	1e5a      	subs	r2, r3, #1
 800936e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009370:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d104      	bne.n	8009384 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800937a:	f001 f98b 	bl	800a694 <pvTaskIncrementMutexHeldCount>
 800937e:	4602      	mov	r2, r0
 8009380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009382:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00f      	beq.n	80093ac <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800938c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800938e:	3310      	adds	r3, #16
 8009390:	4618      	mov	r0, r3
 8009392:	f000 fe1d 	bl	8009fd0 <xTaskRemoveFromEventList>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d007      	beq.n	80093ac <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800939c:	4b54      	ldr	r3, [pc, #336]	@ (80094f0 <xQueueSemaphoreTake+0x21c>)
 800939e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093ac:	f001 fe6e 	bl	800b08c <vPortExitCritical>
				return pdPASS;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e098      	b.n	80094e6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d112      	bne.n	80093e0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80093ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00b      	beq.n	80093d8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	617b      	str	r3, [r7, #20]
}
 80093d2:	bf00      	nop
 80093d4:	bf00      	nop
 80093d6:	e7fd      	b.n	80093d4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80093d8:	f001 fe58 	bl	800b08c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093dc:	2300      	movs	r3, #0
 80093de:	e082      	b.n	80094e6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d106      	bne.n	80093f4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093e6:	f107 030c 	add.w	r3, r7, #12
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 fe54 	bl	800a098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093f0:	2301      	movs	r3, #1
 80093f2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093f4:	f001 fe4a 	bl	800b08c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093f8:	f000 fbc6 	bl	8009b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093fc:	f001 fe14 	bl	800b028 <vPortEnterCritical>
 8009400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009402:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009406:	b25b      	sxtb	r3, r3
 8009408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940c:	d103      	bne.n	8009416 <xQueueSemaphoreTake+0x142>
 800940e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009410:	2200      	movs	r2, #0
 8009412:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009418:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800941c:	b25b      	sxtb	r3, r3
 800941e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009422:	d103      	bne.n	800942c <xQueueSemaphoreTake+0x158>
 8009424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009426:	2200      	movs	r2, #0
 8009428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800942c:	f001 fe2e 	bl	800b08c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009430:	463a      	mov	r2, r7
 8009432:	f107 030c 	add.w	r3, r7, #12
 8009436:	4611      	mov	r1, r2
 8009438:	4618      	mov	r0, r3
 800943a:	f000 fe43 	bl	800a0c4 <xTaskCheckForTimeOut>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d132      	bne.n	80094aa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009444:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009446:	f000 f94f 	bl	80096e8 <prvIsQueueEmpty>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d026      	beq.n	800949e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d109      	bne.n	800946c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009458:	f001 fde6 	bl	800b028 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800945c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	4618      	mov	r0, r3
 8009462:	f000 ff73 	bl	800a34c <xTaskPriorityInherit>
 8009466:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009468:	f001 fe10 	bl	800b08c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800946c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800946e:	3324      	adds	r3, #36	@ 0x24
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	4611      	mov	r1, r2
 8009474:	4618      	mov	r0, r3
 8009476:	f000 fd59 	bl	8009f2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800947a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800947c:	f000 f8e2 	bl	8009644 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009480:	f000 fb90 	bl	8009ba4 <xTaskResumeAll>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	f47f af67 	bne.w	800935a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800948c:	4b18      	ldr	r3, [pc, #96]	@ (80094f0 <xQueueSemaphoreTake+0x21c>)
 800948e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	e75d      	b.n	800935a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800949e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80094a0:	f000 f8d0 	bl	8009644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094a4:	f000 fb7e 	bl	8009ba4 <xTaskResumeAll>
 80094a8:	e757      	b.n	800935a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80094aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80094ac:	f000 f8ca 	bl	8009644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094b0:	f000 fb78 	bl	8009ba4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80094b6:	f000 f917 	bl	80096e8 <prvIsQueueEmpty>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f43f af4c 	beq.w	800935a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80094c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00d      	beq.n	80094e4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80094c8:	f001 fdae 	bl	800b028 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80094cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80094ce:	f000 f811 	bl	80094f4 <prvGetDisinheritPriorityAfterTimeout>
 80094d2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80094d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80094da:	4618      	mov	r0, r3
 80094dc:	f001 f83e 	bl	800a55c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80094e0:	f001 fdd4 	bl	800b08c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3738      	adds	r7, #56	@ 0x38
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	e000ed04 	.word	0xe000ed04

080094f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009500:	2b00      	cmp	r3, #0
 8009502:	d006      	beq.n	8009512 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f1c3 0305 	rsb	r3, r3, #5
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	e001      	b.n	8009516 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009516:	68fb      	ldr	r3, [r7, #12]
	}
 8009518:	4618      	mov	r0, r3
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009530:	2300      	movs	r3, #0
 8009532:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009538:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10d      	bne.n	800955e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d14d      	bne.n	80095e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	4618      	mov	r0, r3
 8009550:	f000 ff7c 	bl	800a44c <xTaskPriorityDisinherit>
 8009554:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	609a      	str	r2, [r3, #8]
 800955c:	e043      	b.n	80095e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d119      	bne.n	8009598 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6858      	ldr	r0, [r3, #4]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800956c:	461a      	mov	r2, r3
 800956e:	68b9      	ldr	r1, [r7, #8]
 8009570:	f007 f93b 	bl	80107ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	685a      	ldr	r2, [r3, #4]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800957c:	441a      	add	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	685a      	ldr	r2, [r3, #4]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	429a      	cmp	r2, r3
 800958c:	d32b      	bcc.n	80095e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	605a      	str	r2, [r3, #4]
 8009596:	e026      	b.n	80095e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	68d8      	ldr	r0, [r3, #12]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095a0:	461a      	mov	r2, r3
 80095a2:	68b9      	ldr	r1, [r7, #8]
 80095a4:	f007 f921 	bl	80107ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	68da      	ldr	r2, [r3, #12]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095b0:	425b      	negs	r3, r3
 80095b2:	441a      	add	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	68da      	ldr	r2, [r3, #12]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d207      	bcs.n	80095d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	689a      	ldr	r2, [r3, #8]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095cc:	425b      	negs	r3, r3
 80095ce:	441a      	add	r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d105      	bne.n	80095e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d002      	beq.n	80095e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	3b01      	subs	r3, #1
 80095e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80095ee:	697b      	ldr	r3, [r7, #20]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3718      	adds	r7, #24
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009606:	2b00      	cmp	r3, #0
 8009608:	d018      	beq.n	800963c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	68da      	ldr	r2, [r3, #12]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009612:	441a      	add	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68da      	ldr	r2, [r3, #12]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	429a      	cmp	r2, r3
 8009622:	d303      	bcc.n	800962c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	68d9      	ldr	r1, [r3, #12]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009634:	461a      	mov	r2, r3
 8009636:	6838      	ldr	r0, [r7, #0]
 8009638:	f007 f8d7 	bl	80107ea <memcpy>
	}
}
 800963c:	bf00      	nop
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800964c:	f001 fcec 	bl	800b028 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009656:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009658:	e011      	b.n	800967e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800965e:	2b00      	cmp	r3, #0
 8009660:	d012      	beq.n	8009688 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	3324      	adds	r3, #36	@ 0x24
 8009666:	4618      	mov	r0, r3
 8009668:	f000 fcb2 	bl	8009fd0 <xTaskRemoveFromEventList>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009672:	f000 fd8b 	bl	800a18c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	3b01      	subs	r3, #1
 800967a:	b2db      	uxtb	r3, r3
 800967c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800967e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009682:	2b00      	cmp	r3, #0
 8009684:	dce9      	bgt.n	800965a <prvUnlockQueue+0x16>
 8009686:	e000      	b.n	800968a <prvUnlockQueue+0x46>
					break;
 8009688:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	22ff      	movs	r2, #255	@ 0xff
 800968e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009692:	f001 fcfb 	bl	800b08c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009696:	f001 fcc7 	bl	800b028 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096a2:	e011      	b.n	80096c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d012      	beq.n	80096d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	3310      	adds	r3, #16
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 fc8d 	bl	8009fd0 <xTaskRemoveFromEventList>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d001      	beq.n	80096c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80096bc:	f000 fd66 	bl	800a18c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80096c0:	7bbb      	ldrb	r3, [r7, #14]
 80096c2:	3b01      	subs	r3, #1
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	dce9      	bgt.n	80096a4 <prvUnlockQueue+0x60>
 80096d0:	e000      	b.n	80096d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80096d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	22ff      	movs	r2, #255	@ 0xff
 80096d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80096dc:	f001 fcd6 	bl	800b08c <vPortExitCritical>
}
 80096e0:	bf00      	nop
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096f0:	f001 fc9a 	bl	800b028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d102      	bne.n	8009702 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80096fc:	2301      	movs	r3, #1
 80096fe:	60fb      	str	r3, [r7, #12]
 8009700:	e001      	b.n	8009706 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009702:	2300      	movs	r3, #0
 8009704:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009706:	f001 fcc1 	bl	800b08c <vPortExitCritical>

	return xReturn;
 800970a:	68fb      	ldr	r3, [r7, #12]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800971c:	f001 fc84 	bl	800b028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009728:	429a      	cmp	r2, r3
 800972a:	d102      	bne.n	8009732 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800972c:	2301      	movs	r3, #1
 800972e:	60fb      	str	r3, [r7, #12]
 8009730:	e001      	b.n	8009736 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009732:	2300      	movs	r3, #0
 8009734:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009736:	f001 fca9 	bl	800b08c <vPortExitCritical>

	return xReturn;
 800973a:	68fb      	ldr	r3, [r7, #12]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800974e:	2300      	movs	r3, #0
 8009750:	60fb      	str	r3, [r7, #12]
 8009752:	e014      	b.n	800977e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009754:	4a0f      	ldr	r2, [pc, #60]	@ (8009794 <vQueueAddToRegistry+0x50>)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10b      	bne.n	8009778 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009760:	490c      	ldr	r1, [pc, #48]	@ (8009794 <vQueueAddToRegistry+0x50>)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	683a      	ldr	r2, [r7, #0]
 8009766:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800976a:	4a0a      	ldr	r2, [pc, #40]	@ (8009794 <vQueueAddToRegistry+0x50>)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	00db      	lsls	r3, r3, #3
 8009770:	4413      	add	r3, r2
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009776:	e006      	b.n	8009786 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	3301      	adds	r3, #1
 800977c:	60fb      	str	r3, [r7, #12]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2b07      	cmp	r3, #7
 8009782:	d9e7      	bls.n	8009754 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009784:	bf00      	nop
 8009786:	bf00      	nop
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	20000894 	.word	0x20000894

08009798 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80097a8:	f001 fc3e 	bl	800b028 <vPortEnterCritical>
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80097b2:	b25b      	sxtb	r3, r3
 80097b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b8:	d103      	bne.n	80097c2 <vQueueWaitForMessageRestricted+0x2a>
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80097c8:	b25b      	sxtb	r3, r3
 80097ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ce:	d103      	bne.n	80097d8 <vQueueWaitForMessageRestricted+0x40>
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097d8:	f001 fc58 	bl	800b08c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d106      	bne.n	80097f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	3324      	adds	r3, #36	@ 0x24
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	68b9      	ldr	r1, [r7, #8]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 fbc3 	bl	8009f78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80097f2:	6978      	ldr	r0, [r7, #20]
 80097f4:	f7ff ff26 	bl	8009644 <prvUnlockQueue>
	}
 80097f8:	bf00      	nop
 80097fa:	3718      	adds	r7, #24
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009800:	b580      	push	{r7, lr}
 8009802:	b08c      	sub	sp, #48	@ 0x30
 8009804:	af04      	add	r7, sp, #16
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	603b      	str	r3, [r7, #0]
 800980c:	4613      	mov	r3, r2
 800980e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009810:	88fb      	ldrh	r3, [r7, #6]
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4618      	mov	r0, r3
 8009816:	f001 fd29 	bl	800b26c <pvPortMalloc>
 800981a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00e      	beq.n	8009840 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009822:	2058      	movs	r0, #88	@ 0x58
 8009824:	f001 fd22 	bl	800b26c <pvPortMalloc>
 8009828:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d003      	beq.n	8009838 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	631a      	str	r2, [r3, #48]	@ 0x30
 8009836:	e005      	b.n	8009844 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009838:	6978      	ldr	r0, [r7, #20]
 800983a:	f001 fddf 	bl	800b3fc <vPortFree>
 800983e:	e001      	b.n	8009844 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009840:	2300      	movs	r3, #0
 8009842:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d013      	beq.n	8009872 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800984a:	88fa      	ldrh	r2, [r7, #6]
 800984c:	2300      	movs	r3, #0
 800984e:	9303      	str	r3, [sp, #12]
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	9302      	str	r3, [sp, #8]
 8009854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	68b9      	ldr	r1, [r7, #8]
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 f80e 	bl	8009882 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009866:	69f8      	ldr	r0, [r7, #28]
 8009868:	f000 f89c 	bl	80099a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800986c:	2301      	movs	r3, #1
 800986e:	61bb      	str	r3, [r7, #24]
 8009870:	e002      	b.n	8009878 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009872:	f04f 33ff 	mov.w	r3, #4294967295
 8009876:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009878:	69bb      	ldr	r3, [r7, #24]
	}
 800987a:	4618      	mov	r0, r3
 800987c:	3720      	adds	r7, #32
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b088      	sub	sp, #32
 8009886:	af00      	add	r7, sp, #0
 8009888:	60f8      	str	r0, [r7, #12]
 800988a:	60b9      	str	r1, [r7, #8]
 800988c:	607a      	str	r2, [r7, #4]
 800988e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009892:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	461a      	mov	r2, r3
 800989a:	21a5      	movs	r1, #165	@ 0xa5
 800989c:	f006 fe8c 	bl	80105b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80098a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80098aa:	3b01      	subs	r3, #1
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	f023 0307 	bic.w	r3, r3, #7
 80098b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	f003 0307 	and.w	r3, r3, #7
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00b      	beq.n	80098dc <prvInitialiseNewTask+0x5a>
	__asm volatile
 80098c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c8:	f383 8811 	msr	BASEPRI, r3
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	617b      	str	r3, [r7, #20]
}
 80098d6:	bf00      	nop
 80098d8:	bf00      	nop
 80098da:	e7fd      	b.n	80098d8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d01f      	beq.n	8009922 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098e2:	2300      	movs	r3, #0
 80098e4:	61fb      	str	r3, [r7, #28]
 80098e6:	e012      	b.n	800990e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	4413      	add	r3, r2
 80098ee:	7819      	ldrb	r1, [r3, #0]
 80098f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	4413      	add	r3, r2
 80098f6:	3334      	adds	r3, #52	@ 0x34
 80098f8:	460a      	mov	r2, r1
 80098fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	4413      	add	r3, r2
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d006      	beq.n	8009916 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	3301      	adds	r3, #1
 800990c:	61fb      	str	r3, [r7, #28]
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	2b09      	cmp	r3, #9
 8009912:	d9e9      	bls.n	80098e8 <prvInitialiseNewTask+0x66>
 8009914:	e000      	b.n	8009918 <prvInitialiseNewTask+0x96>
			{
				break;
 8009916:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991a:	2200      	movs	r2, #0
 800991c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009920:	e003      	b.n	800992a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800992a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992c:	2b04      	cmp	r3, #4
 800992e:	d901      	bls.n	8009934 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009930:	2304      	movs	r3, #4
 8009932:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009936:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009938:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800993a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800993e:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8009940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009942:	2200      	movs	r2, #0
 8009944:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009948:	3304      	adds	r3, #4
 800994a:	4618      	mov	r0, r3
 800994c:	f7ff f8b2 	bl	8008ab4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009952:	3318      	adds	r3, #24
 8009954:	4618      	mov	r0, r3
 8009956:	f7ff f8ad 	bl	8008ab4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800995a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800995e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009962:	f1c3 0205 	rsb	r2, r3, #5
 8009966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009968:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800996a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800996e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009972:	2200      	movs	r2, #0
 8009974:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009978:	2200      	movs	r2, #0
 800997a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	68f9      	ldr	r1, [r7, #12]
 8009982:	69b8      	ldr	r0, [r7, #24]
 8009984:	f001 fa1e 	bl	800adc4 <pxPortInitialiseStack>
 8009988:	4602      	mov	r2, r0
 800998a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800998e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009998:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800999a:	bf00      	nop
 800999c:	3720      	adds	r7, #32
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80099ac:	f001 fb3c 	bl	800b028 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80099b0:	4b2c      	ldr	r3, [pc, #176]	@ (8009a64 <prvAddNewTaskToReadyList+0xc0>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	3301      	adds	r3, #1
 80099b6:	4a2b      	ldr	r2, [pc, #172]	@ (8009a64 <prvAddNewTaskToReadyList+0xc0>)
 80099b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80099ba:	4b2b      	ldr	r3, [pc, #172]	@ (8009a68 <prvAddNewTaskToReadyList+0xc4>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d109      	bne.n	80099d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80099c2:	4a29      	ldr	r2, [pc, #164]	@ (8009a68 <prvAddNewTaskToReadyList+0xc4>)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80099c8:	4b26      	ldr	r3, [pc, #152]	@ (8009a64 <prvAddNewTaskToReadyList+0xc0>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d110      	bne.n	80099f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80099d0:	f000 fc00 	bl	800a1d4 <prvInitialiseTaskLists>
 80099d4:	e00d      	b.n	80099f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80099d6:	4b25      	ldr	r3, [pc, #148]	@ (8009a6c <prvAddNewTaskToReadyList+0xc8>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d109      	bne.n	80099f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80099de:	4b22      	ldr	r3, [pc, #136]	@ (8009a68 <prvAddNewTaskToReadyList+0xc4>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d802      	bhi.n	80099f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80099ec:	4a1e      	ldr	r2, [pc, #120]	@ (8009a68 <prvAddNewTaskToReadyList+0xc4>)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80099f2:	4b1f      	ldr	r3, [pc, #124]	@ (8009a70 <prvAddNewTaskToReadyList+0xcc>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	3301      	adds	r3, #1
 80099f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009a70 <prvAddNewTaskToReadyList+0xcc>)
 80099fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80099fc:	4b1c      	ldr	r3, [pc, #112]	@ (8009a70 <prvAddNewTaskToReadyList+0xcc>)
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a08:	2201      	movs	r2, #1
 8009a0a:	409a      	lsls	r2, r3
 8009a0c:	4b19      	ldr	r3, [pc, #100]	@ (8009a74 <prvAddNewTaskToReadyList+0xd0>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	4a18      	ldr	r2, [pc, #96]	@ (8009a74 <prvAddNewTaskToReadyList+0xd0>)
 8009a14:	6013      	str	r3, [r2, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	4a15      	ldr	r2, [pc, #84]	@ (8009a78 <prvAddNewTaskToReadyList+0xd4>)
 8009a24:	441a      	add	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	3304      	adds	r3, #4
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	4610      	mov	r0, r2
 8009a2e:	f7ff f84e 	bl	8008ace <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a32:	f001 fb2b 	bl	800b08c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a36:	4b0d      	ldr	r3, [pc, #52]	@ (8009a6c <prvAddNewTaskToReadyList+0xc8>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00e      	beq.n	8009a5c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8009a68 <prvAddNewTaskToReadyList+0xc4>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d207      	bcs.n	8009a5c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8009a7c <prvAddNewTaskToReadyList+0xd8>)
 8009a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a5c:	bf00      	nop
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	200009ac 	.word	0x200009ac
 8009a68:	200008d4 	.word	0x200008d4
 8009a6c:	200009b8 	.word	0x200009b8
 8009a70:	200009c8 	.word	0x200009c8
 8009a74:	200009b4 	.word	0x200009b4
 8009a78:	200008d8 	.word	0x200008d8
 8009a7c:	e000ed04 	.word	0xe000ed04

08009a80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d018      	beq.n	8009ac4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a92:	4b14      	ldr	r3, [pc, #80]	@ (8009ae4 <vTaskDelay+0x64>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00b      	beq.n	8009ab2 <vTaskDelay+0x32>
	__asm volatile
 8009a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	60bb      	str	r3, [r7, #8]
}
 8009aac:	bf00      	nop
 8009aae:	bf00      	nop
 8009ab0:	e7fd      	b.n	8009aae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ab2:	f000 f869 	bl	8009b88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fdff 	bl	800a6bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009abe:	f000 f871 	bl	8009ba4 <xTaskResumeAll>
 8009ac2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d107      	bne.n	8009ada <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009aca:	4b07      	ldr	r3, [pc, #28]	@ (8009ae8 <vTaskDelay+0x68>)
 8009acc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ada:	bf00      	nop
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	200009d4 	.word	0x200009d4
 8009ae8:	e000ed04 	.word	0xe000ed04

08009aec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009af2:	4b1f      	ldr	r3, [pc, #124]	@ (8009b70 <vTaskStartScheduler+0x84>)
 8009af4:	9301      	str	r3, [sp, #4]
 8009af6:	2300      	movs	r3, #0
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	2300      	movs	r3, #0
 8009afc:	2282      	movs	r2, #130	@ 0x82
 8009afe:	491d      	ldr	r1, [pc, #116]	@ (8009b74 <vTaskStartScheduler+0x88>)
 8009b00:	481d      	ldr	r0, [pc, #116]	@ (8009b78 <vTaskStartScheduler+0x8c>)
 8009b02:	f7ff fe7d 	bl	8009800 <xTaskCreate>
 8009b06:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d102      	bne.n	8009b14 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8009b0e:	f000 fe3b 	bl	800a788 <xTimerCreateTimerTask>
 8009b12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d116      	bne.n	8009b48 <vTaskStartScheduler+0x5c>
	__asm volatile
 8009b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	60bb      	str	r3, [r7, #8]
}
 8009b2c:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b2e:	4b13      	ldr	r3, [pc, #76]	@ (8009b7c <vTaskStartScheduler+0x90>)
 8009b30:	f04f 32ff 	mov.w	r2, #4294967295
 8009b34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b36:	4b12      	ldr	r3, [pc, #72]	@ (8009b80 <vTaskStartScheduler+0x94>)
 8009b38:	2201      	movs	r2, #1
 8009b3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009b3c:	4b11      	ldr	r3, [pc, #68]	@ (8009b84 <vTaskStartScheduler+0x98>)
 8009b3e:	2200      	movs	r2, #0
 8009b40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b42:	f001 f9cd 	bl	800aee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b46:	e00f      	b.n	8009b68 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4e:	d10b      	bne.n	8009b68 <vTaskStartScheduler+0x7c>
	__asm volatile
 8009b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	607b      	str	r3, [r7, #4]
}
 8009b62:	bf00      	nop
 8009b64:	bf00      	nop
 8009b66:	e7fd      	b.n	8009b64 <vTaskStartScheduler+0x78>
}
 8009b68:	bf00      	nop
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	200009d0 	.word	0x200009d0
 8009b74:	080120d8 	.word	0x080120d8
 8009b78:	0800a1a5 	.word	0x0800a1a5
 8009b7c:	200009cc 	.word	0x200009cc
 8009b80:	200009b8 	.word	0x200009b8
 8009b84:	200009b0 	.word	0x200009b0

08009b88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b88:	b480      	push	{r7}
 8009b8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009b8c:	4b04      	ldr	r3, [pc, #16]	@ (8009ba0 <vTaskSuspendAll+0x18>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3301      	adds	r3, #1
 8009b92:	4a03      	ldr	r2, [pc, #12]	@ (8009ba0 <vTaskSuspendAll+0x18>)
 8009b94:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009b96:	bf00      	nop
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr
 8009ba0:	200009d4 	.word	0x200009d4

08009ba4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009baa:	2300      	movs	r3, #0
 8009bac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009bb2:	4b42      	ldr	r3, [pc, #264]	@ (8009cbc <xTaskResumeAll+0x118>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10b      	bne.n	8009bd2 <xTaskResumeAll+0x2e>
	__asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	603b      	str	r3, [r7, #0]
}
 8009bcc:	bf00      	nop
 8009bce:	bf00      	nop
 8009bd0:	e7fd      	b.n	8009bce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009bd2:	f001 fa29 	bl	800b028 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009bd6:	4b39      	ldr	r3, [pc, #228]	@ (8009cbc <xTaskResumeAll+0x118>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	4a37      	ldr	r2, [pc, #220]	@ (8009cbc <xTaskResumeAll+0x118>)
 8009bde:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009be0:	4b36      	ldr	r3, [pc, #216]	@ (8009cbc <xTaskResumeAll+0x118>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d161      	bne.n	8009cac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009be8:	4b35      	ldr	r3, [pc, #212]	@ (8009cc0 <xTaskResumeAll+0x11c>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d05d      	beq.n	8009cac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bf0:	e02e      	b.n	8009c50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bf2:	4b34      	ldr	r3, [pc, #208]	@ (8009cc4 <xTaskResumeAll+0x120>)
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	3318      	adds	r3, #24
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fe ffc2 	bl	8008b88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	3304      	adds	r3, #4
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fe ffbd 	bl	8008b88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c12:	2201      	movs	r2, #1
 8009c14:	409a      	lsls	r2, r3
 8009c16:	4b2c      	ldr	r3, [pc, #176]	@ (8009cc8 <xTaskResumeAll+0x124>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8009cc8 <xTaskResumeAll+0x124>)
 8009c1e:	6013      	str	r3, [r2, #0]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c24:	4613      	mov	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4413      	add	r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4a27      	ldr	r2, [pc, #156]	@ (8009ccc <xTaskResumeAll+0x128>)
 8009c2e:	441a      	add	r2, r3
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3304      	adds	r3, #4
 8009c34:	4619      	mov	r1, r3
 8009c36:	4610      	mov	r0, r2
 8009c38:	f7fe ff49 	bl	8008ace <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c40:	4b23      	ldr	r3, [pc, #140]	@ (8009cd0 <xTaskResumeAll+0x12c>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d302      	bcc.n	8009c50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009c4a:	4b22      	ldr	r3, [pc, #136]	@ (8009cd4 <xTaskResumeAll+0x130>)
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c50:	4b1c      	ldr	r3, [pc, #112]	@ (8009cc4 <xTaskResumeAll+0x120>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1cc      	bne.n	8009bf2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c5e:	f000 fb37 	bl	800a2d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009c62:	4b1d      	ldr	r3, [pc, #116]	@ (8009cd8 <xTaskResumeAll+0x134>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d010      	beq.n	8009c90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c6e:	f000 f847 	bl	8009d00 <xTaskIncrementTick>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d002      	beq.n	8009c7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009c78:	4b16      	ldr	r3, [pc, #88]	@ (8009cd4 <xTaskResumeAll+0x130>)
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	3b01      	subs	r3, #1
 8009c82:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1f1      	bne.n	8009c6e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009c8a:	4b13      	ldr	r3, [pc, #76]	@ (8009cd8 <xTaskResumeAll+0x134>)
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c90:	4b10      	ldr	r3, [pc, #64]	@ (8009cd4 <xTaskResumeAll+0x130>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d009      	beq.n	8009cac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8009cdc <xTaskResumeAll+0x138>)
 8009c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ca2:	601a      	str	r2, [r3, #0]
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009cac:	f001 f9ee 	bl	800b08c <vPortExitCritical>

	return xAlreadyYielded;
 8009cb0:	68bb      	ldr	r3, [r7, #8]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	200009d4 	.word	0x200009d4
 8009cc0:	200009ac 	.word	0x200009ac
 8009cc4:	2000096c 	.word	0x2000096c
 8009cc8:	200009b4 	.word	0x200009b4
 8009ccc:	200008d8 	.word	0x200008d8
 8009cd0:	200008d4 	.word	0x200008d4
 8009cd4:	200009c0 	.word	0x200009c0
 8009cd8:	200009bc 	.word	0x200009bc
 8009cdc:	e000ed04 	.word	0xe000ed04

08009ce0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009ce6:	4b05      	ldr	r3, [pc, #20]	@ (8009cfc <xTaskGetTickCount+0x1c>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009cec:	687b      	ldr	r3, [r7, #4]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	370c      	adds	r7, #12
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	200009b0 	.word	0x200009b0

08009d00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d06:	2300      	movs	r3, #0
 8009d08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8009e48 <xTaskIncrementTick+0x148>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f040 8089 	bne.w	8009e26 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d14:	4b4d      	ldr	r3, [pc, #308]	@ (8009e4c <xTaskIncrementTick+0x14c>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d1c:	4a4b      	ldr	r2, [pc, #300]	@ (8009e4c <xTaskIncrementTick+0x14c>)
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d121      	bne.n	8009d6c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d28:	4b49      	ldr	r3, [pc, #292]	@ (8009e50 <xTaskIncrementTick+0x150>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00b      	beq.n	8009d4a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d36:	f383 8811 	msr	BASEPRI, r3
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	603b      	str	r3, [r7, #0]
}
 8009d44:	bf00      	nop
 8009d46:	bf00      	nop
 8009d48:	e7fd      	b.n	8009d46 <xTaskIncrementTick+0x46>
 8009d4a:	4b41      	ldr	r3, [pc, #260]	@ (8009e50 <xTaskIncrementTick+0x150>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	4b40      	ldr	r3, [pc, #256]	@ (8009e54 <xTaskIncrementTick+0x154>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a3e      	ldr	r2, [pc, #248]	@ (8009e50 <xTaskIncrementTick+0x150>)
 8009d56:	6013      	str	r3, [r2, #0]
 8009d58:	4a3e      	ldr	r2, [pc, #248]	@ (8009e54 <xTaskIncrementTick+0x154>)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6013      	str	r3, [r2, #0]
 8009d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8009e58 <xTaskIncrementTick+0x158>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	3301      	adds	r3, #1
 8009d64:	4a3c      	ldr	r2, [pc, #240]	@ (8009e58 <xTaskIncrementTick+0x158>)
 8009d66:	6013      	str	r3, [r2, #0]
 8009d68:	f000 fab2 	bl	800a2d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8009e5c <xTaskIncrementTick+0x15c>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d348      	bcc.n	8009e08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d76:	4b36      	ldr	r3, [pc, #216]	@ (8009e50 <xTaskIncrementTick+0x150>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d104      	bne.n	8009d8a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d80:	4b36      	ldr	r3, [pc, #216]	@ (8009e5c <xTaskIncrementTick+0x15c>)
 8009d82:	f04f 32ff 	mov.w	r2, #4294967295
 8009d86:	601a      	str	r2, [r3, #0]
					break;
 8009d88:	e03e      	b.n	8009e08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d8a:	4b31      	ldr	r3, [pc, #196]	@ (8009e50 <xTaskIncrementTick+0x150>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d9a:	693a      	ldr	r2, [r7, #16]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d203      	bcs.n	8009daa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009da2:	4a2e      	ldr	r2, [pc, #184]	@ (8009e5c <xTaskIncrementTick+0x15c>)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009da8:	e02e      	b.n	8009e08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	3304      	adds	r3, #4
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fe feea 	bl	8008b88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d004      	beq.n	8009dc6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	3318      	adds	r3, #24
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7fe fee1 	bl	8008b88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dca:	2201      	movs	r2, #1
 8009dcc:	409a      	lsls	r2, r3
 8009dce:	4b24      	ldr	r3, [pc, #144]	@ (8009e60 <xTaskIncrementTick+0x160>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	4a22      	ldr	r2, [pc, #136]	@ (8009e60 <xTaskIncrementTick+0x160>)
 8009dd6:	6013      	str	r3, [r2, #0]
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ddc:	4613      	mov	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4a1f      	ldr	r2, [pc, #124]	@ (8009e64 <xTaskIncrementTick+0x164>)
 8009de6:	441a      	add	r2, r3
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	3304      	adds	r3, #4
 8009dec:	4619      	mov	r1, r3
 8009dee:	4610      	mov	r0, r2
 8009df0:	f7fe fe6d 	bl	8008ace <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009df8:	4b1b      	ldr	r3, [pc, #108]	@ (8009e68 <xTaskIncrementTick+0x168>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d3b9      	bcc.n	8009d76 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009e02:	2301      	movs	r3, #1
 8009e04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e06:	e7b6      	b.n	8009d76 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e08:	4b17      	ldr	r3, [pc, #92]	@ (8009e68 <xTaskIncrementTick+0x168>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e0e:	4915      	ldr	r1, [pc, #84]	@ (8009e64 <xTaskIncrementTick+0x164>)
 8009e10:	4613      	mov	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	440b      	add	r3, r1
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d907      	bls.n	8009e30 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8009e20:	2301      	movs	r3, #1
 8009e22:	617b      	str	r3, [r7, #20]
 8009e24:	e004      	b.n	8009e30 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009e26:	4b11      	ldr	r3, [pc, #68]	@ (8009e6c <xTaskIncrementTick+0x16c>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	4a0f      	ldr	r2, [pc, #60]	@ (8009e6c <xTaskIncrementTick+0x16c>)
 8009e2e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009e30:	4b0f      	ldr	r3, [pc, #60]	@ (8009e70 <xTaskIncrementTick+0x170>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d001      	beq.n	8009e3c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009e3c:	697b      	ldr	r3, [r7, #20]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3718      	adds	r7, #24
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	200009d4 	.word	0x200009d4
 8009e4c:	200009b0 	.word	0x200009b0
 8009e50:	20000964 	.word	0x20000964
 8009e54:	20000968 	.word	0x20000968
 8009e58:	200009c4 	.word	0x200009c4
 8009e5c:	200009cc 	.word	0x200009cc
 8009e60:	200009b4 	.word	0x200009b4
 8009e64:	200008d8 	.word	0x200008d8
 8009e68:	200008d4 	.word	0x200008d4
 8009e6c:	200009bc 	.word	0x200009bc
 8009e70:	200009c0 	.word	0x200009c0

08009e74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e7a:	4b27      	ldr	r3, [pc, #156]	@ (8009f18 <vTaskSwitchContext+0xa4>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d003      	beq.n	8009e8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e82:	4b26      	ldr	r3, [pc, #152]	@ (8009f1c <vTaskSwitchContext+0xa8>)
 8009e84:	2201      	movs	r2, #1
 8009e86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e88:	e040      	b.n	8009f0c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009e8a:	4b24      	ldr	r3, [pc, #144]	@ (8009f1c <vTaskSwitchContext+0xa8>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e90:	4b23      	ldr	r3, [pc, #140]	@ (8009f20 <vTaskSwitchContext+0xac>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	fab3 f383 	clz	r3, r3
 8009e9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009e9e:	7afb      	ldrb	r3, [r7, #11]
 8009ea0:	f1c3 031f 	rsb	r3, r3, #31
 8009ea4:	617b      	str	r3, [r7, #20]
 8009ea6:	491f      	ldr	r1, [pc, #124]	@ (8009f24 <vTaskSwitchContext+0xb0>)
 8009ea8:	697a      	ldr	r2, [r7, #20]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4413      	add	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	440b      	add	r3, r1
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10b      	bne.n	8009ed2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8009eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	607b      	str	r3, [r7, #4]
}
 8009ecc:	bf00      	nop
 8009ece:	bf00      	nop
 8009ed0:	e7fd      	b.n	8009ece <vTaskSwitchContext+0x5a>
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4a11      	ldr	r2, [pc, #68]	@ (8009f24 <vTaskSwitchContext+0xb0>)
 8009ede:	4413      	add	r3, r2
 8009ee0:	613b      	str	r3, [r7, #16]
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	685a      	ldr	r2, [r3, #4]
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	605a      	str	r2, [r3, #4]
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	685a      	ldr	r2, [r3, #4]
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	3308      	adds	r3, #8
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d104      	bne.n	8009f02 <vTaskSwitchContext+0x8e>
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	605a      	str	r2, [r3, #4]
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	4a07      	ldr	r2, [pc, #28]	@ (8009f28 <vTaskSwitchContext+0xb4>)
 8009f0a:	6013      	str	r3, [r2, #0]
}
 8009f0c:	bf00      	nop
 8009f0e:	371c      	adds	r7, #28
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	200009d4 	.word	0x200009d4
 8009f1c:	200009c0 	.word	0x200009c0
 8009f20:	200009b4 	.word	0x200009b4
 8009f24:	200008d8 	.word	0x200008d8
 8009f28:	200008d4 	.word	0x200008d4

08009f2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d10b      	bne.n	8009f54 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	60fb      	str	r3, [r7, #12]
}
 8009f4e:	bf00      	nop
 8009f50:	bf00      	nop
 8009f52:	e7fd      	b.n	8009f50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f54:	4b07      	ldr	r3, [pc, #28]	@ (8009f74 <vTaskPlaceOnEventList+0x48>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	3318      	adds	r3, #24
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7fe fdda 	bl	8008b16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f62:	2101      	movs	r1, #1
 8009f64:	6838      	ldr	r0, [r7, #0]
 8009f66:	f000 fba9 	bl	800a6bc <prvAddCurrentTaskToDelayedList>
}
 8009f6a:	bf00      	nop
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	200008d4 	.word	0x200008d4

08009f78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10b      	bne.n	8009fa2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8e:	f383 8811 	msr	BASEPRI, r3
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	617b      	str	r3, [r7, #20]
}
 8009f9c:	bf00      	nop
 8009f9e:	bf00      	nop
 8009fa0:	e7fd      	b.n	8009f9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8009fcc <vTaskPlaceOnEventListRestricted+0x54>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	3318      	adds	r3, #24
 8009fa8:	4619      	mov	r1, r3
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f7fe fd8f 	bl	8008ace <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d002      	beq.n	8009fbc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009fbc:	6879      	ldr	r1, [r7, #4]
 8009fbe:	68b8      	ldr	r0, [r7, #8]
 8009fc0:	f000 fb7c 	bl	800a6bc <prvAddCurrentTaskToDelayedList>
	}
 8009fc4:	bf00      	nop
 8009fc6:	3718      	adds	r7, #24
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	200008d4 	.word	0x200008d4

08009fd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10b      	bne.n	8009ffe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fea:	f383 8811 	msr	BASEPRI, r3
 8009fee:	f3bf 8f6f 	isb	sy
 8009ff2:	f3bf 8f4f 	dsb	sy
 8009ff6:	60fb      	str	r3, [r7, #12]
}
 8009ff8:	bf00      	nop
 8009ffa:	bf00      	nop
 8009ffc:	e7fd      	b.n	8009ffa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	3318      	adds	r3, #24
 800a002:	4618      	mov	r0, r3
 800a004:	f7fe fdc0 	bl	8008b88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a008:	4b1d      	ldr	r3, [pc, #116]	@ (800a080 <xTaskRemoveFromEventList+0xb0>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d11c      	bne.n	800a04a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	3304      	adds	r3, #4
 800a014:	4618      	mov	r0, r3
 800a016:	f7fe fdb7 	bl	8008b88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a01e:	2201      	movs	r2, #1
 800a020:	409a      	lsls	r2, r3
 800a022:	4b18      	ldr	r3, [pc, #96]	@ (800a084 <xTaskRemoveFromEventList+0xb4>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4313      	orrs	r3, r2
 800a028:	4a16      	ldr	r2, [pc, #88]	@ (800a084 <xTaskRemoveFromEventList+0xb4>)
 800a02a:	6013      	str	r3, [r2, #0]
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a030:	4613      	mov	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4413      	add	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4a13      	ldr	r2, [pc, #76]	@ (800a088 <xTaskRemoveFromEventList+0xb8>)
 800a03a:	441a      	add	r2, r3
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	3304      	adds	r3, #4
 800a040:	4619      	mov	r1, r3
 800a042:	4610      	mov	r0, r2
 800a044:	f7fe fd43 	bl	8008ace <vListInsertEnd>
 800a048:	e005      	b.n	800a056 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	3318      	adds	r3, #24
 800a04e:	4619      	mov	r1, r3
 800a050:	480e      	ldr	r0, [pc, #56]	@ (800a08c <xTaskRemoveFromEventList+0xbc>)
 800a052:	f7fe fd3c 	bl	8008ace <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a05a:	4b0d      	ldr	r3, [pc, #52]	@ (800a090 <xTaskRemoveFromEventList+0xc0>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a060:	429a      	cmp	r2, r3
 800a062:	d905      	bls.n	800a070 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a064:	2301      	movs	r3, #1
 800a066:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a068:	4b0a      	ldr	r3, [pc, #40]	@ (800a094 <xTaskRemoveFromEventList+0xc4>)
 800a06a:	2201      	movs	r2, #1
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	e001      	b.n	800a074 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a070:	2300      	movs	r3, #0
 800a072:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a074:	697b      	ldr	r3, [r7, #20]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	200009d4 	.word	0x200009d4
 800a084:	200009b4 	.word	0x200009b4
 800a088:	200008d8 	.word	0x200008d8
 800a08c:	2000096c 	.word	0x2000096c
 800a090:	200008d4 	.word	0x200008d4
 800a094:	200009c0 	.word	0x200009c0

0800a098 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0a0:	4b06      	ldr	r3, [pc, #24]	@ (800a0bc <vTaskInternalSetTimeOutState+0x24>)
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0a8:	4b05      	ldr	r3, [pc, #20]	@ (800a0c0 <vTaskInternalSetTimeOutState+0x28>)
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	605a      	str	r2, [r3, #4]
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	200009c4 	.word	0x200009c4
 800a0c0:	200009b0 	.word	0x200009b0

0800a0c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b088      	sub	sp, #32
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10b      	bne.n	800a0ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	613b      	str	r3, [r7, #16]
}
 800a0e6:	bf00      	nop
 800a0e8:	bf00      	nop
 800a0ea:	e7fd      	b.n	800a0e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d10b      	bne.n	800a10a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	60fb      	str	r3, [r7, #12]
}
 800a104:	bf00      	nop
 800a106:	bf00      	nop
 800a108:	e7fd      	b.n	800a106 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a10a:	f000 ff8d 	bl	800b028 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a10e:	4b1d      	ldr	r3, [pc, #116]	@ (800a184 <xTaskCheckForTimeOut+0xc0>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	69ba      	ldr	r2, [r7, #24]
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a126:	d102      	bne.n	800a12e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a128:	2300      	movs	r3, #0
 800a12a:	61fb      	str	r3, [r7, #28]
 800a12c:	e023      	b.n	800a176 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	4b15      	ldr	r3, [pc, #84]	@ (800a188 <xTaskCheckForTimeOut+0xc4>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	429a      	cmp	r2, r3
 800a138:	d007      	beq.n	800a14a <xTaskCheckForTimeOut+0x86>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	69ba      	ldr	r2, [r7, #24]
 800a140:	429a      	cmp	r2, r3
 800a142:	d302      	bcc.n	800a14a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a144:	2301      	movs	r3, #1
 800a146:	61fb      	str	r3, [r7, #28]
 800a148:	e015      	b.n	800a176 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	429a      	cmp	r2, r3
 800a152:	d20b      	bcs.n	800a16c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	1ad2      	subs	r2, r2, r3
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7ff ff99 	bl	800a098 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a166:	2300      	movs	r3, #0
 800a168:	61fb      	str	r3, [r7, #28]
 800a16a:	e004      	b.n	800a176 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	2200      	movs	r2, #0
 800a170:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a172:	2301      	movs	r3, #1
 800a174:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a176:	f000 ff89 	bl	800b08c <vPortExitCritical>

	return xReturn;
 800a17a:	69fb      	ldr	r3, [r7, #28]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3720      	adds	r7, #32
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	200009b0 	.word	0x200009b0
 800a188:	200009c4 	.word	0x200009c4

0800a18c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a18c:	b480      	push	{r7}
 800a18e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a190:	4b03      	ldr	r3, [pc, #12]	@ (800a1a0 <vTaskMissedYield+0x14>)
 800a192:	2201      	movs	r2, #1
 800a194:	601a      	str	r2, [r3, #0]
}
 800a196:	bf00      	nop
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	200009c0 	.word	0x200009c0

0800a1a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1ac:	f000 f852 	bl	800a254 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1b0:	4b06      	ldr	r3, [pc, #24]	@ (800a1cc <prvIdleTask+0x28>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d9f9      	bls.n	800a1ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800a1b8:	4b05      	ldr	r3, [pc, #20]	@ (800a1d0 <prvIdleTask+0x2c>)
 800a1ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1be:	601a      	str	r2, [r3, #0]
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a1c8:	e7f0      	b.n	800a1ac <prvIdleTask+0x8>
 800a1ca:	bf00      	nop
 800a1cc:	200008d8 	.word	0x200008d8
 800a1d0:	e000ed04 	.word	0xe000ed04

0800a1d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1da:	2300      	movs	r3, #0
 800a1dc:	607b      	str	r3, [r7, #4]
 800a1de:	e00c      	b.n	800a1fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	4a12      	ldr	r2, [pc, #72]	@ (800a234 <prvInitialiseTaskLists+0x60>)
 800a1ec:	4413      	add	r3, r2
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fe fc40 	bl	8008a74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	607b      	str	r3, [r7, #4]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2b04      	cmp	r3, #4
 800a1fe:	d9ef      	bls.n	800a1e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a200:	480d      	ldr	r0, [pc, #52]	@ (800a238 <prvInitialiseTaskLists+0x64>)
 800a202:	f7fe fc37 	bl	8008a74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a206:	480d      	ldr	r0, [pc, #52]	@ (800a23c <prvInitialiseTaskLists+0x68>)
 800a208:	f7fe fc34 	bl	8008a74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a20c:	480c      	ldr	r0, [pc, #48]	@ (800a240 <prvInitialiseTaskLists+0x6c>)
 800a20e:	f7fe fc31 	bl	8008a74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a212:	480c      	ldr	r0, [pc, #48]	@ (800a244 <prvInitialiseTaskLists+0x70>)
 800a214:	f7fe fc2e 	bl	8008a74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a218:	480b      	ldr	r0, [pc, #44]	@ (800a248 <prvInitialiseTaskLists+0x74>)
 800a21a:	f7fe fc2b 	bl	8008a74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a21e:	4b0b      	ldr	r3, [pc, #44]	@ (800a24c <prvInitialiseTaskLists+0x78>)
 800a220:	4a05      	ldr	r2, [pc, #20]	@ (800a238 <prvInitialiseTaskLists+0x64>)
 800a222:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a224:	4b0a      	ldr	r3, [pc, #40]	@ (800a250 <prvInitialiseTaskLists+0x7c>)
 800a226:	4a05      	ldr	r2, [pc, #20]	@ (800a23c <prvInitialiseTaskLists+0x68>)
 800a228:	601a      	str	r2, [r3, #0]
}
 800a22a:	bf00      	nop
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	200008d8 	.word	0x200008d8
 800a238:	2000093c 	.word	0x2000093c
 800a23c:	20000950 	.word	0x20000950
 800a240:	2000096c 	.word	0x2000096c
 800a244:	20000980 	.word	0x20000980
 800a248:	20000998 	.word	0x20000998
 800a24c:	20000964 	.word	0x20000964
 800a250:	20000968 	.word	0x20000968

0800a254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a25a:	e019      	b.n	800a290 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a25c:	f000 fee4 	bl	800b028 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a260:	4b10      	ldr	r3, [pc, #64]	@ (800a2a4 <prvCheckTasksWaitingTermination+0x50>)
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	3304      	adds	r3, #4
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7fe fc8b 	bl	8008b88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a272:	4b0d      	ldr	r3, [pc, #52]	@ (800a2a8 <prvCheckTasksWaitingTermination+0x54>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	3b01      	subs	r3, #1
 800a278:	4a0b      	ldr	r2, [pc, #44]	@ (800a2a8 <prvCheckTasksWaitingTermination+0x54>)
 800a27a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a27c:	4b0b      	ldr	r3, [pc, #44]	@ (800a2ac <prvCheckTasksWaitingTermination+0x58>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	3b01      	subs	r3, #1
 800a282:	4a0a      	ldr	r2, [pc, #40]	@ (800a2ac <prvCheckTasksWaitingTermination+0x58>)
 800a284:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a286:	f000 ff01 	bl	800b08c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f810 	bl	800a2b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a290:	4b06      	ldr	r3, [pc, #24]	@ (800a2ac <prvCheckTasksWaitingTermination+0x58>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1e1      	bne.n	800a25c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a298:	bf00      	nop
 800a29a:	bf00      	nop
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20000980 	.word	0x20000980
 800a2a8:	200009ac 	.word	0x200009ac
 800a2ac:	20000994 	.word	0x20000994

0800a2b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f001 f89d 	bl	800b3fc <vPortFree>
			vPortFree( pxTCB );
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f001 f89a 	bl	800b3fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a2c8:	bf00      	nop
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a308 <prvResetNextTaskUnblockTime+0x38>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d104      	bne.n	800a2ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a2e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a30c <prvResetNextTaskUnblockTime+0x3c>)
 800a2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a2e8:	e008      	b.n	800a2fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2ea:	4b07      	ldr	r3, [pc, #28]	@ (800a308 <prvResetNextTaskUnblockTime+0x38>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	4a04      	ldr	r2, [pc, #16]	@ (800a30c <prvResetNextTaskUnblockTime+0x3c>)
 800a2fa:	6013      	str	r3, [r2, #0]
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr
 800a308:	20000964 	.word	0x20000964
 800a30c:	200009cc 	.word	0x200009cc

0800a310 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a316:	4b0b      	ldr	r3, [pc, #44]	@ (800a344 <xTaskGetSchedulerState+0x34>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d102      	bne.n	800a324 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a31e:	2301      	movs	r3, #1
 800a320:	607b      	str	r3, [r7, #4]
 800a322:	e008      	b.n	800a336 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a324:	4b08      	ldr	r3, [pc, #32]	@ (800a348 <xTaskGetSchedulerState+0x38>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d102      	bne.n	800a332 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a32c:	2302      	movs	r3, #2
 800a32e:	607b      	str	r3, [r7, #4]
 800a330:	e001      	b.n	800a336 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a332:	2300      	movs	r3, #0
 800a334:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a336:	687b      	ldr	r3, [r7, #4]
	}
 800a338:	4618      	mov	r0, r3
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	200009b8 	.word	0x200009b8
 800a348:	200009d4 	.word	0x200009d4

0800a34c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a358:	2300      	movs	r3, #0
 800a35a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d069      	beq.n	800a436 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a366:	4b36      	ldr	r3, [pc, #216]	@ (800a440 <xTaskPriorityInherit+0xf4>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d259      	bcs.n	800a424 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	2b00      	cmp	r3, #0
 800a376:	db06      	blt.n	800a386 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a378:	4b31      	ldr	r3, [pc, #196]	@ (800a440 <xTaskPriorityInherit+0xf4>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a37e:	f1c3 0205 	rsb	r2, r3, #5
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	6959      	ldr	r1, [r3, #20]
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a38e:	4613      	mov	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	4413      	add	r3, r2
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	4a2b      	ldr	r2, [pc, #172]	@ (800a444 <xTaskPriorityInherit+0xf8>)
 800a398:	4413      	add	r3, r2
 800a39a:	4299      	cmp	r1, r3
 800a39c:	d13a      	bne.n	800a414 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	3304      	adds	r3, #4
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fe fbf0 	bl	8008b88 <uxListRemove>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d115      	bne.n	800a3da <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3b2:	4924      	ldr	r1, [pc, #144]	@ (800a444 <xTaskPriorityInherit+0xf8>)
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4413      	add	r3, r2
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	440b      	add	r3, r1
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d10a      	bne.n	800a3da <xTaskPriorityInherit+0x8e>
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ce:	43da      	mvns	r2, r3
 800a3d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a448 <xTaskPriorityInherit+0xfc>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	4a1c      	ldr	r2, [pc, #112]	@ (800a448 <xTaskPriorityInherit+0xfc>)
 800a3d8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a3da:	4b19      	ldr	r3, [pc, #100]	@ (800a440 <xTaskPriorityInherit+0xf4>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	409a      	lsls	r2, r3
 800a3ec:	4b16      	ldr	r3, [pc, #88]	@ (800a448 <xTaskPriorityInherit+0xfc>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	4a15      	ldr	r2, [pc, #84]	@ (800a448 <xTaskPriorityInherit+0xfc>)
 800a3f4:	6013      	str	r3, [r2, #0]
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	4413      	add	r3, r2
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	4a10      	ldr	r2, [pc, #64]	@ (800a444 <xTaskPriorityInherit+0xf8>)
 800a404:	441a      	add	r2, r3
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	3304      	adds	r3, #4
 800a40a:	4619      	mov	r1, r3
 800a40c:	4610      	mov	r0, r2
 800a40e:	f7fe fb5e 	bl	8008ace <vListInsertEnd>
 800a412:	e004      	b.n	800a41e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a414:	4b0a      	ldr	r3, [pc, #40]	@ (800a440 <xTaskPriorityInherit+0xf4>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a41e:	2301      	movs	r3, #1
 800a420:	60fb      	str	r3, [r7, #12]
 800a422:	e008      	b.n	800a436 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a428:	4b05      	ldr	r3, [pc, #20]	@ (800a440 <xTaskPriorityInherit+0xf4>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a42e:	429a      	cmp	r2, r3
 800a430:	d201      	bcs.n	800a436 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a432:	2301      	movs	r3, #1
 800a434:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a436:	68fb      	ldr	r3, [r7, #12]
	}
 800a438:	4618      	mov	r0, r3
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	200008d4 	.word	0x200008d4
 800a444:	200008d8 	.word	0x200008d8
 800a448:	200009b4 	.word	0x200009b4

0800a44c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a458:	2300      	movs	r3, #0
 800a45a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d070      	beq.n	800a544 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a462:	4b3b      	ldr	r3, [pc, #236]	@ (800a550 <xTaskPriorityDisinherit+0x104>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d00b      	beq.n	800a484 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a470:	f383 8811 	msr	BASEPRI, r3
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	f3bf 8f4f 	dsb	sy
 800a47c:	60fb      	str	r3, [r7, #12]
}
 800a47e:	bf00      	nop
 800a480:	bf00      	nop
 800a482:	e7fd      	b.n	800a480 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10b      	bne.n	800a4a4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	60bb      	str	r3, [r7, #8]
}
 800a49e:	bf00      	nop
 800a4a0:	bf00      	nop
 800a4a2:	e7fd      	b.n	800a4a0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4a8:	1e5a      	subs	r2, r3, #1
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d044      	beq.n	800a544 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d140      	bne.n	800a544 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fe fb5e 	bl	8008b88 <uxListRemove>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d115      	bne.n	800a4fe <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4d6:	491f      	ldr	r1, [pc, #124]	@ (800a554 <xTaskPriorityDisinherit+0x108>)
 800a4d8:	4613      	mov	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4413      	add	r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	440b      	add	r3, r1
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10a      	bne.n	800a4fe <xTaskPriorityDisinherit+0xb2>
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f2:	43da      	mvns	r2, r3
 800a4f4:	4b18      	ldr	r3, [pc, #96]	@ (800a558 <xTaskPriorityDisinherit+0x10c>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	4a17      	ldr	r2, [pc, #92]	@ (800a558 <xTaskPriorityDisinherit+0x10c>)
 800a4fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a50a:	f1c3 0205 	rsb	r2, r3, #5
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a516:	2201      	movs	r2, #1
 800a518:	409a      	lsls	r2, r3
 800a51a:	4b0f      	ldr	r3, [pc, #60]	@ (800a558 <xTaskPriorityDisinherit+0x10c>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4313      	orrs	r3, r2
 800a520:	4a0d      	ldr	r2, [pc, #52]	@ (800a558 <xTaskPriorityDisinherit+0x10c>)
 800a522:	6013      	str	r3, [r2, #0]
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a528:	4613      	mov	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4413      	add	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4a08      	ldr	r2, [pc, #32]	@ (800a554 <xTaskPriorityDisinherit+0x108>)
 800a532:	441a      	add	r2, r3
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	3304      	adds	r3, #4
 800a538:	4619      	mov	r1, r3
 800a53a:	4610      	mov	r0, r2
 800a53c:	f7fe fac7 	bl	8008ace <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a540:	2301      	movs	r3, #1
 800a542:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a544:	697b      	ldr	r3, [r7, #20]
	}
 800a546:	4618      	mov	r0, r3
 800a548:	3718      	adds	r7, #24
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	200008d4 	.word	0x200008d4
 800a554:	200008d8 	.word	0x200008d8
 800a558:	200009b4 	.word	0x200009b4

0800a55c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b088      	sub	sp, #32
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a56a:	2301      	movs	r3, #1
 800a56c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	f000 8085 	beq.w	800a680 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10b      	bne.n	800a596 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	60fb      	str	r3, [r7, #12]
}
 800a590:	bf00      	nop
 800a592:	bf00      	nop
 800a594:	e7fd      	b.n	800a592 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d902      	bls.n	800a5a6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	61fb      	str	r3, [r7, #28]
 800a5a4:	e002      	b.n	800a5ac <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b0:	69fa      	ldr	r2, [r7, #28]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d064      	beq.n	800a680 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d15f      	bne.n	800a680 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a5c0:	4b31      	ldr	r3, [pc, #196]	@ (800a688 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	69ba      	ldr	r2, [r7, #24]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d10b      	bne.n	800a5e2 <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 800a5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ce:	f383 8811 	msr	BASEPRI, r3
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	60bb      	str	r3, [r7, #8]
}
 800a5dc:	bf00      	nop
 800a5de:	bf00      	nop
 800a5e0:	e7fd      	b.n	800a5de <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	69fa      	ldr	r2, [r7, #28]
 800a5ec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	699b      	ldr	r3, [r3, #24]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	db04      	blt.n	800a600 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	f1c3 0205 	rsb	r2, r3, #5
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	6959      	ldr	r1, [r3, #20]
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	4613      	mov	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	4a1f      	ldr	r2, [pc, #124]	@ (800a68c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a610:	4413      	add	r3, r2
 800a612:	4299      	cmp	r1, r3
 800a614:	d134      	bne.n	800a680 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	3304      	adds	r3, #4
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fe fab4 	bl	8008b88 <uxListRemove>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d115      	bne.n	800a652 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a62a:	4918      	ldr	r1, [pc, #96]	@ (800a68c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a62c:	4613      	mov	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	440b      	add	r3, r1
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10a      	bne.n	800a652 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a640:	2201      	movs	r2, #1
 800a642:	fa02 f303 	lsl.w	r3, r2, r3
 800a646:	43da      	mvns	r2, r3
 800a648:	4b11      	ldr	r3, [pc, #68]	@ (800a690 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4013      	ands	r3, r2
 800a64e:	4a10      	ldr	r2, [pc, #64]	@ (800a690 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a650:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a656:	2201      	movs	r2, #1
 800a658:	409a      	lsls	r2, r3
 800a65a:	4b0d      	ldr	r3, [pc, #52]	@ (800a690 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4313      	orrs	r3, r2
 800a660:	4a0b      	ldr	r2, [pc, #44]	@ (800a690 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a662:	6013      	str	r3, [r2, #0]
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a668:	4613      	mov	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4a06      	ldr	r2, [pc, #24]	@ (800a68c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a672:	441a      	add	r2, r3
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	3304      	adds	r3, #4
 800a678:	4619      	mov	r1, r3
 800a67a:	4610      	mov	r0, r2
 800a67c:	f7fe fa27 	bl	8008ace <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a680:	bf00      	nop
 800a682:	3720      	adds	r7, #32
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	200008d4 	.word	0x200008d4
 800a68c:	200008d8 	.word	0x200008d8
 800a690:	200009b4 	.word	0x200009b4

0800a694 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a694:	b480      	push	{r7}
 800a696:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a698:	4b07      	ldr	r3, [pc, #28]	@ (800a6b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d004      	beq.n	800a6aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a6a0:	4b05      	ldr	r3, [pc, #20]	@ (800a6b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6a6:	3201      	adds	r2, #1
 800a6a8:	64da      	str	r2, [r3, #76]	@ 0x4c
		}

		return pxCurrentTCB;
 800a6aa:	4b03      	ldr	r3, [pc, #12]	@ (800a6b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
	}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	200008d4 	.word	0x200008d4

0800a6bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a6c6:	4b29      	ldr	r3, [pc, #164]	@ (800a76c <prvAddCurrentTaskToDelayedList+0xb0>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6cc:	4b28      	ldr	r3, [pc, #160]	@ (800a770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	3304      	adds	r3, #4
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fe fa58 	bl	8008b88 <uxListRemove>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10b      	bne.n	800a6f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a6de:	4b24      	ldr	r3, [pc, #144]	@ (800a770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ea:	43da      	mvns	r2, r3
 800a6ec:	4b21      	ldr	r3, [pc, #132]	@ (800a774 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	4a20      	ldr	r2, [pc, #128]	@ (800a774 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a6f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fc:	d10a      	bne.n	800a714 <prvAddCurrentTaskToDelayedList+0x58>
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d007      	beq.n	800a714 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a704:	4b1a      	ldr	r3, [pc, #104]	@ (800a770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	3304      	adds	r3, #4
 800a70a:	4619      	mov	r1, r3
 800a70c:	481a      	ldr	r0, [pc, #104]	@ (800a778 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a70e:	f7fe f9de 	bl	8008ace <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a712:	e026      	b.n	800a762 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4413      	add	r3, r2
 800a71a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a71c:	4b14      	ldr	r3, [pc, #80]	@ (800a770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d209      	bcs.n	800a740 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a72c:	4b13      	ldr	r3, [pc, #76]	@ (800a77c <prvAddCurrentTaskToDelayedList+0xc0>)
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	4b0f      	ldr	r3, [pc, #60]	@ (800a770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	3304      	adds	r3, #4
 800a736:	4619      	mov	r1, r3
 800a738:	4610      	mov	r0, r2
 800a73a:	f7fe f9ec 	bl	8008b16 <vListInsert>
}
 800a73e:	e010      	b.n	800a762 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a740:	4b0f      	ldr	r3, [pc, #60]	@ (800a780 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	4b0a      	ldr	r3, [pc, #40]	@ (800a770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	3304      	adds	r3, #4
 800a74a:	4619      	mov	r1, r3
 800a74c:	4610      	mov	r0, r2
 800a74e:	f7fe f9e2 	bl	8008b16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a752:	4b0c      	ldr	r3, [pc, #48]	@ (800a784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d202      	bcs.n	800a762 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a75c:	4a09      	ldr	r2, [pc, #36]	@ (800a784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	6013      	str	r3, [r2, #0]
}
 800a762:	bf00      	nop
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	200009b0 	.word	0x200009b0
 800a770:	200008d4 	.word	0x200008d4
 800a774:	200009b4 	.word	0x200009b4
 800a778:	20000998 	.word	0x20000998
 800a77c:	20000968 	.word	0x20000968
 800a780:	20000964 	.word	0x20000964
 800a784:	200009cc 	.word	0x200009cc

0800a788 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800a78e:	2300      	movs	r3, #0
 800a790:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a792:	f000 fae1 	bl	800ad58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a796:	4b12      	ldr	r3, [pc, #72]	@ (800a7e0 <xTimerCreateTimerTask+0x58>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00b      	beq.n	800a7b6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800a79e:	4b11      	ldr	r3, [pc, #68]	@ (800a7e4 <xTimerCreateTimerTask+0x5c>)
 800a7a0:	9301      	str	r3, [sp, #4]
 800a7a2:	2302      	movs	r3, #2
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a7ac:	490e      	ldr	r1, [pc, #56]	@ (800a7e8 <xTimerCreateTimerTask+0x60>)
 800a7ae:	480f      	ldr	r0, [pc, #60]	@ (800a7ec <xTimerCreateTimerTask+0x64>)
 800a7b0:	f7ff f826 	bl	8009800 <xTaskCreate>
 800a7b4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d10b      	bne.n	800a7d4 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 800a7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c0:	f383 8811 	msr	BASEPRI, r3
 800a7c4:	f3bf 8f6f 	isb	sy
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	603b      	str	r3, [r7, #0]
}
 800a7ce:	bf00      	nop
 800a7d0:	bf00      	nop
 800a7d2:	e7fd      	b.n	800a7d0 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800a7d4:	687b      	ldr	r3, [r7, #4]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	20000a08 	.word	0x20000a08
 800a7e4:	20000a0c 	.word	0x20000a0c
 800a7e8:	080120e0 	.word	0x080120e0
 800a7ec:	0800a929 	.word	0x0800a929

0800a7f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b08a      	sub	sp, #40	@ 0x28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
 800a7fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a7fe:	2300      	movs	r3, #0
 800a800:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10b      	bne.n	800a820 <xTimerGenericCommand+0x30>
	__asm volatile
 800a808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a80c:	f383 8811 	msr	BASEPRI, r3
 800a810:	f3bf 8f6f 	isb	sy
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	623b      	str	r3, [r7, #32]
}
 800a81a:	bf00      	nop
 800a81c:	bf00      	nop
 800a81e:	e7fd      	b.n	800a81c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a820:	4b19      	ldr	r3, [pc, #100]	@ (800a888 <xTimerGenericCommand+0x98>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d02a      	beq.n	800a87e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	2b05      	cmp	r3, #5
 800a838:	dc18      	bgt.n	800a86c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a83a:	f7ff fd69 	bl	800a310 <xTaskGetSchedulerState>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b02      	cmp	r3, #2
 800a842:	d109      	bne.n	800a858 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a844:	4b10      	ldr	r3, [pc, #64]	@ (800a888 <xTimerGenericCommand+0x98>)
 800a846:	6818      	ldr	r0, [r3, #0]
 800a848:	f107 0114 	add.w	r1, r7, #20
 800a84c:	2300      	movs	r3, #0
 800a84e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a850:	f7fe fac0 	bl	8008dd4 <xQueueGenericSend>
 800a854:	6278      	str	r0, [r7, #36]	@ 0x24
 800a856:	e012      	b.n	800a87e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a858:	4b0b      	ldr	r3, [pc, #44]	@ (800a888 <xTimerGenericCommand+0x98>)
 800a85a:	6818      	ldr	r0, [r3, #0]
 800a85c:	f107 0114 	add.w	r1, r7, #20
 800a860:	2300      	movs	r3, #0
 800a862:	2200      	movs	r2, #0
 800a864:	f7fe fab6 	bl	8008dd4 <xQueueGenericSend>
 800a868:	6278      	str	r0, [r7, #36]	@ 0x24
 800a86a:	e008      	b.n	800a87e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a86c:	4b06      	ldr	r3, [pc, #24]	@ (800a888 <xTimerGenericCommand+0x98>)
 800a86e:	6818      	ldr	r0, [r3, #0]
 800a870:	f107 0114 	add.w	r1, r7, #20
 800a874:	2300      	movs	r3, #0
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	f7fe fbae 	bl	8008fd8 <xQueueGenericSendFromISR>
 800a87c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a880:	4618      	mov	r0, r3
 800a882:	3728      	adds	r7, #40	@ 0x28
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	20000a08 	.word	0x20000a08

0800a88c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b088      	sub	sp, #32
 800a890:	af02      	add	r7, sp, #8
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a896:	4b23      	ldr	r3, [pc, #140]	@ (800a924 <prvProcessExpiredTimer+0x98>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	3304      	adds	r3, #4
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fe f96f 	bl	8008b88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8b0:	f003 0304 	and.w	r3, r3, #4
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d023      	beq.n	800a900 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	699a      	ldr	r2, [r3, #24]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	18d1      	adds	r1, r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	683a      	ldr	r2, [r7, #0]
 800a8c4:	6978      	ldr	r0, [r7, #20]
 800a8c6:	f000 f8d5 	bl	800aa74 <prvInsertTimerInActiveList>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d020      	beq.n	800a912 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	2100      	movs	r1, #0
 800a8da:	6978      	ldr	r0, [r7, #20]
 800a8dc:	f7ff ff88 	bl	800a7f0 <xTimerGenericCommand>
 800a8e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d114      	bne.n	800a912 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ec:	f383 8811 	msr	BASEPRI, r3
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	60fb      	str	r3, [r7, #12]
}
 800a8fa:	bf00      	nop
 800a8fc:	bf00      	nop
 800a8fe:	e7fd      	b.n	800a8fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a906:	f023 0301 	bic.w	r3, r3, #1
 800a90a:	b2da      	uxtb	r2, r3
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	6978      	ldr	r0, [r7, #20]
 800a918:	4798      	blx	r3
}
 800a91a:	bf00      	nop
 800a91c:	3718      	adds	r7, #24
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20000a00 	.word	0x20000a00

0800a928 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a930:	f107 0308 	add.w	r3, r7, #8
 800a934:	4618      	mov	r0, r3
 800a936:	f000 f859 	bl	800a9ec <prvGetNextExpireTime>
 800a93a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	4619      	mov	r1, r3
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f000 f805 	bl	800a950 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a946:	f000 f8d7 	bl	800aaf8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a94a:	bf00      	nop
 800a94c:	e7f0      	b.n	800a930 <prvTimerTask+0x8>
	...

0800a950 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a95a:	f7ff f915 	bl	8009b88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a95e:	f107 0308 	add.w	r3, r7, #8
 800a962:	4618      	mov	r0, r3
 800a964:	f000 f866 	bl	800aa34 <prvSampleTimeNow>
 800a968:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d130      	bne.n	800a9d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d10a      	bne.n	800a98c <prvProcessTimerOrBlockTask+0x3c>
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d806      	bhi.n	800a98c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a97e:	f7ff f911 	bl	8009ba4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a982:	68f9      	ldr	r1, [r7, #12]
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7ff ff81 	bl	800a88c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a98a:	e024      	b.n	800a9d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d008      	beq.n	800a9a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a992:	4b13      	ldr	r3, [pc, #76]	@ (800a9e0 <prvProcessTimerOrBlockTask+0x90>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d101      	bne.n	800a9a0 <prvProcessTimerOrBlockTask+0x50>
 800a99c:	2301      	movs	r3, #1
 800a99e:	e000      	b.n	800a9a2 <prvProcessTimerOrBlockTask+0x52>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a9a4:	4b0f      	ldr	r3, [pc, #60]	@ (800a9e4 <prvProcessTimerOrBlockTask+0x94>)
 800a9a6:	6818      	ldr	r0, [r3, #0]
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	1ad3      	subs	r3, r2, r3
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	f7fe fef1 	bl	8009798 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a9b6:	f7ff f8f5 	bl	8009ba4 <xTaskResumeAll>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10a      	bne.n	800a9d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a9c0:	4b09      	ldr	r3, [pc, #36]	@ (800a9e8 <prvProcessTimerOrBlockTask+0x98>)
 800a9c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9c6:	601a      	str	r2, [r3, #0]
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	f3bf 8f6f 	isb	sy
}
 800a9d0:	e001      	b.n	800a9d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a9d2:	f7ff f8e7 	bl	8009ba4 <xTaskResumeAll>
}
 800a9d6:	bf00      	nop
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	20000a04 	.word	0x20000a04
 800a9e4:	20000a08 	.word	0x20000a08
 800a9e8:	e000ed04 	.word	0xe000ed04

0800a9ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a9f4:	4b0e      	ldr	r3, [pc, #56]	@ (800aa30 <prvGetNextExpireTime+0x44>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <prvGetNextExpireTime+0x16>
 800a9fe:	2201      	movs	r2, #1
 800aa00:	e000      	b.n	800aa04 <prvGetNextExpireTime+0x18>
 800aa02:	2200      	movs	r2, #0
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d105      	bne.n	800aa1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa10:	4b07      	ldr	r3, [pc, #28]	@ (800aa30 <prvGetNextExpireTime+0x44>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	60fb      	str	r3, [r7, #12]
 800aa1a:	e001      	b.n	800aa20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aa20:	68fb      	ldr	r3, [r7, #12]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3714      	adds	r7, #20
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	20000a00 	.word	0x20000a00

0800aa34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aa3c:	f7ff f950 	bl	8009ce0 <xTaskGetTickCount>
 800aa40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aa42:	4b0b      	ldr	r3, [pc, #44]	@ (800aa70 <prvSampleTimeNow+0x3c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d205      	bcs.n	800aa58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aa4c:	f000 f91e 	bl	800ac8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	601a      	str	r2, [r3, #0]
 800aa56:	e002      	b.n	800aa5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aa5e:	4a04      	ldr	r2, [pc, #16]	@ (800aa70 <prvSampleTimeNow+0x3c>)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aa64:	68fb      	ldr	r3, [r7, #12]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	20000a10 	.word	0x20000a10

0800aa74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b086      	sub	sp, #24
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
 800aa80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aa82:	2300      	movs	r3, #0
 800aa84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d812      	bhi.n	800aac0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	1ad2      	subs	r2, r2, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	699b      	ldr	r3, [r3, #24]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d302      	bcc.n	800aaae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	617b      	str	r3, [r7, #20]
 800aaac:	e01b      	b.n	800aae6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aaae:	4b10      	ldr	r3, [pc, #64]	@ (800aaf0 <prvInsertTimerInActiveList+0x7c>)
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	3304      	adds	r3, #4
 800aab6:	4619      	mov	r1, r3
 800aab8:	4610      	mov	r0, r2
 800aaba:	f7fe f82c 	bl	8008b16 <vListInsert>
 800aabe:	e012      	b.n	800aae6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d206      	bcs.n	800aad6 <prvInsertTimerInActiveList+0x62>
 800aac8:	68ba      	ldr	r2, [r7, #8]
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d302      	bcc.n	800aad6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aad0:	2301      	movs	r3, #1
 800aad2:	617b      	str	r3, [r7, #20]
 800aad4:	e007      	b.n	800aae6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aad6:	4b07      	ldr	r3, [pc, #28]	@ (800aaf4 <prvInsertTimerInActiveList+0x80>)
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	3304      	adds	r3, #4
 800aade:	4619      	mov	r1, r3
 800aae0:	4610      	mov	r0, r2
 800aae2:	f7fe f818 	bl	8008b16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aae6:	697b      	ldr	r3, [r7, #20]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3718      	adds	r7, #24
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	20000a04 	.word	0x20000a04
 800aaf4:	20000a00 	.word	0x20000a00

0800aaf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b08c      	sub	sp, #48	@ 0x30
 800aafc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aafe:	e0b2      	b.n	800ac66 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f2c0 80af 	blt.w	800ac66 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ab0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0e:	695b      	ldr	r3, [r3, #20]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d004      	beq.n	800ab1e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	3304      	adds	r3, #4
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fe f835 	bl	8008b88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab1e:	1d3b      	adds	r3, r7, #4
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7ff ff87 	bl	800aa34 <prvSampleTimeNow>
 800ab26:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2b09      	cmp	r3, #9
 800ab2c:	f200 8098 	bhi.w	800ac60 <prvProcessReceivedCommands+0x168>
 800ab30:	a201      	add	r2, pc, #4	@ (adr r2, 800ab38 <prvProcessReceivedCommands+0x40>)
 800ab32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab36:	bf00      	nop
 800ab38:	0800ab61 	.word	0x0800ab61
 800ab3c:	0800ab61 	.word	0x0800ab61
 800ab40:	0800ab61 	.word	0x0800ab61
 800ab44:	0800abd7 	.word	0x0800abd7
 800ab48:	0800abeb 	.word	0x0800abeb
 800ab4c:	0800ac37 	.word	0x0800ac37
 800ab50:	0800ab61 	.word	0x0800ab61
 800ab54:	0800ab61 	.word	0x0800ab61
 800ab58:	0800abd7 	.word	0x0800abd7
 800ab5c:	0800abeb 	.word	0x0800abeb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab66:	f043 0301 	orr.w	r3, r3, #1
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab76:	699b      	ldr	r3, [r3, #24]
 800ab78:	18d1      	adds	r1, r2, r3
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6a3a      	ldr	r2, [r7, #32]
 800ab7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab80:	f7ff ff78 	bl	800aa74 <prvInsertTimerInActiveList>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d06c      	beq.n	800ac64 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab98:	f003 0304 	and.w	r3, r3, #4
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d061      	beq.n	800ac64 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	441a      	add	r2, r3
 800aba8:	2300      	movs	r3, #0
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	2300      	movs	r3, #0
 800abae:	2100      	movs	r1, #0
 800abb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800abb2:	f7ff fe1d 	bl	800a7f0 <xTimerGenericCommand>
 800abb6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d152      	bne.n	800ac64 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	61bb      	str	r3, [r7, #24]
}
 800abd0:	bf00      	nop
 800abd2:	bf00      	nop
 800abd4:	e7fd      	b.n	800abd2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800abd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abdc:	f023 0301 	bic.w	r3, r3, #1
 800abe0:	b2da      	uxtb	r2, r3
 800abe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800abe8:	e03d      	b.n	800ac66 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800abea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abf0:	f043 0301 	orr.w	r3, r3, #1
 800abf4:	b2da      	uxtb	r2, r3
 800abf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac00:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac04:	699b      	ldr	r3, [r3, #24]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d10b      	bne.n	800ac22 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800ac0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac0e:	f383 8811 	msr	BASEPRI, r3
 800ac12:	f3bf 8f6f 	isb	sy
 800ac16:	f3bf 8f4f 	dsb	sy
 800ac1a:	617b      	str	r3, [r7, #20]
}
 800ac1c:	bf00      	nop
 800ac1e:	bf00      	nop
 800ac20:	e7fd      	b.n	800ac1e <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ac22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac24:	699a      	ldr	r2, [r3, #24]
 800ac26:	6a3b      	ldr	r3, [r7, #32]
 800ac28:	18d1      	adds	r1, r2, r3
 800ac2a:	6a3b      	ldr	r3, [r7, #32]
 800ac2c:	6a3a      	ldr	r2, [r7, #32]
 800ac2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ac30:	f7ff ff20 	bl	800aa74 <prvInsertTimerInActiveList>
					break;
 800ac34:	e017      	b.n	800ac66 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ac36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac3c:	f003 0302 	and.w	r3, r3, #2
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d103      	bne.n	800ac4c <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800ac44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ac46:	f000 fbd9 	bl	800b3fc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ac4a:	e00c      	b.n	800ac66 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac52:	f023 0301 	bic.w	r3, r3, #1
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ac5e:	e002      	b.n	800ac66 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800ac60:	bf00      	nop
 800ac62:	e000      	b.n	800ac66 <prvProcessReceivedCommands+0x16e>
					break;
 800ac64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac66:	4b08      	ldr	r3, [pc, #32]	@ (800ac88 <prvProcessReceivedCommands+0x190>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f107 0108 	add.w	r1, r7, #8
 800ac6e:	2200      	movs	r2, #0
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7fe fa4d 	bl	8009110 <xQueueReceive>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f47f af41 	bne.w	800ab00 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ac7e:	bf00      	nop
 800ac80:	bf00      	nop
 800ac82:	3728      	adds	r7, #40	@ 0x28
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	20000a08 	.word	0x20000a08

0800ac8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b088      	sub	sp, #32
 800ac90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac92:	e049      	b.n	800ad28 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac94:	4b2e      	ldr	r3, [pc, #184]	@ (800ad50 <prvSwitchTimerLists+0xc4>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac9e:	4b2c      	ldr	r3, [pc, #176]	@ (800ad50 <prvSwitchTimerLists+0xc4>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	3304      	adds	r3, #4
 800acac:	4618      	mov	r0, r3
 800acae:	f7fd ff6b 	bl	8008b88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acc0:	f003 0304 	and.w	r3, r3, #4
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d02f      	beq.n	800ad28 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	699b      	ldr	r3, [r3, #24]
 800accc:	693a      	ldr	r2, [r7, #16]
 800acce:	4413      	add	r3, r2
 800acd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800acd2:	68ba      	ldr	r2, [r7, #8]
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d90e      	bls.n	800acf8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ace6:	4b1a      	ldr	r3, [pc, #104]	@ (800ad50 <prvSwitchTimerLists+0xc4>)
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	3304      	adds	r3, #4
 800acee:	4619      	mov	r1, r3
 800acf0:	4610      	mov	r0, r2
 800acf2:	f7fd ff10 	bl	8008b16 <vListInsert>
 800acf6:	e017      	b.n	800ad28 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800acf8:	2300      	movs	r3, #0
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	2300      	movs	r3, #0
 800acfe:	693a      	ldr	r2, [r7, #16]
 800ad00:	2100      	movs	r1, #0
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	f7ff fd74 	bl	800a7f0 <xTimerGenericCommand>
 800ad08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d10b      	bne.n	800ad28 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ad10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	603b      	str	r3, [r7, #0]
}
 800ad22:	bf00      	nop
 800ad24:	bf00      	nop
 800ad26:	e7fd      	b.n	800ad24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad28:	4b09      	ldr	r3, [pc, #36]	@ (800ad50 <prvSwitchTimerLists+0xc4>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1b0      	bne.n	800ac94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ad32:	4b07      	ldr	r3, [pc, #28]	@ (800ad50 <prvSwitchTimerLists+0xc4>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ad38:	4b06      	ldr	r3, [pc, #24]	@ (800ad54 <prvSwitchTimerLists+0xc8>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a04      	ldr	r2, [pc, #16]	@ (800ad50 <prvSwitchTimerLists+0xc4>)
 800ad3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ad40:	4a04      	ldr	r2, [pc, #16]	@ (800ad54 <prvSwitchTimerLists+0xc8>)
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	6013      	str	r3, [r2, #0]
}
 800ad46:	bf00      	nop
 800ad48:	3718      	adds	r7, #24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	20000a00 	.word	0x20000a00
 800ad54:	20000a04 	.word	0x20000a04

0800ad58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ad5c:	f000 f964 	bl	800b028 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ad60:	4b12      	ldr	r3, [pc, #72]	@ (800adac <prvCheckForValidListAndQueue+0x54>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d11d      	bne.n	800ada4 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800ad68:	4811      	ldr	r0, [pc, #68]	@ (800adb0 <prvCheckForValidListAndQueue+0x58>)
 800ad6a:	f7fd fe83 	bl	8008a74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ad6e:	4811      	ldr	r0, [pc, #68]	@ (800adb4 <prvCheckForValidListAndQueue+0x5c>)
 800ad70:	f7fd fe80 	bl	8008a74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ad74:	4b10      	ldr	r3, [pc, #64]	@ (800adb8 <prvCheckForValidListAndQueue+0x60>)
 800ad76:	4a0e      	ldr	r2, [pc, #56]	@ (800adb0 <prvCheckForValidListAndQueue+0x58>)
 800ad78:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ad7a:	4b10      	ldr	r3, [pc, #64]	@ (800adbc <prvCheckForValidListAndQueue+0x64>)
 800ad7c:	4a0d      	ldr	r2, [pc, #52]	@ (800adb4 <prvCheckForValidListAndQueue+0x5c>)
 800ad7e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ad80:	2200      	movs	r2, #0
 800ad82:	210c      	movs	r1, #12
 800ad84:	200a      	movs	r0, #10
 800ad86:	f7fd ff93 	bl	8008cb0 <xQueueGenericCreate>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	4a07      	ldr	r2, [pc, #28]	@ (800adac <prvCheckForValidListAndQueue+0x54>)
 800ad8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ad90:	4b06      	ldr	r3, [pc, #24]	@ (800adac <prvCheckForValidListAndQueue+0x54>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d005      	beq.n	800ada4 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ad98:	4b04      	ldr	r3, [pc, #16]	@ (800adac <prvCheckForValidListAndQueue+0x54>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4908      	ldr	r1, [pc, #32]	@ (800adc0 <prvCheckForValidListAndQueue+0x68>)
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fe fcd0 	bl	8009744 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ada4:	f000 f972 	bl	800b08c <vPortExitCritical>
}
 800ada8:	bf00      	nop
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	20000a08 	.word	0x20000a08
 800adb0:	200009d8 	.word	0x200009d8
 800adb4:	200009ec 	.word	0x200009ec
 800adb8:	20000a00 	.word	0x20000a00
 800adbc:	20000a04 	.word	0x20000a04
 800adc0:	080120e8 	.word	0x080120e8

0800adc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	3b04      	subs	r3, #4
 800add4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800addc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3b04      	subs	r3, #4
 800ade2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	f023 0201 	bic.w	r2, r3, #1
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	3b04      	subs	r3, #4
 800adf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800adf4:	4a0c      	ldr	r2, [pc, #48]	@ (800ae28 <pxPortInitialiseStack+0x64>)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	3b14      	subs	r3, #20
 800adfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	3b04      	subs	r3, #4
 800ae0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f06f 0202 	mvn.w	r2, #2
 800ae12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	3b20      	subs	r3, #32
 800ae18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3714      	adds	r7, #20
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr
 800ae28:	0800ae2d 	.word	0x0800ae2d

0800ae2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ae32:	2300      	movs	r3, #0
 800ae34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ae36:	4b13      	ldr	r3, [pc, #76]	@ (800ae84 <prvTaskExitError+0x58>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae3e:	d00b      	beq.n	800ae58 <prvTaskExitError+0x2c>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	60fb      	str	r3, [r7, #12]
}
 800ae52:	bf00      	nop
 800ae54:	bf00      	nop
 800ae56:	e7fd      	b.n	800ae54 <prvTaskExitError+0x28>
	__asm volatile
 800ae58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae5c:	f383 8811 	msr	BASEPRI, r3
 800ae60:	f3bf 8f6f 	isb	sy
 800ae64:	f3bf 8f4f 	dsb	sy
 800ae68:	60bb      	str	r3, [r7, #8]
}
 800ae6a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ae6c:	bf00      	nop
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d0fc      	beq.n	800ae6e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ae74:	bf00      	nop
 800ae76:	bf00      	nop
 800ae78:	3714      	adds	r7, #20
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	20000028 	.word	0x20000028
	...

0800ae90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ae90:	4b07      	ldr	r3, [pc, #28]	@ (800aeb0 <pxCurrentTCBConst2>)
 800ae92:	6819      	ldr	r1, [r3, #0]
 800ae94:	6808      	ldr	r0, [r1, #0]
 800ae96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae9a:	f380 8809 	msr	PSP, r0
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f04f 0000 	mov.w	r0, #0
 800aea6:	f380 8811 	msr	BASEPRI, r0
 800aeaa:	4770      	bx	lr
 800aeac:	f3af 8000 	nop.w

0800aeb0 <pxCurrentTCBConst2>:
 800aeb0:	200008d4 	.word	0x200008d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aeb4:	bf00      	nop
 800aeb6:	bf00      	nop

0800aeb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aeb8:	4808      	ldr	r0, [pc, #32]	@ (800aedc <prvPortStartFirstTask+0x24>)
 800aeba:	6800      	ldr	r0, [r0, #0]
 800aebc:	6800      	ldr	r0, [r0, #0]
 800aebe:	f380 8808 	msr	MSP, r0
 800aec2:	f04f 0000 	mov.w	r0, #0
 800aec6:	f380 8814 	msr	CONTROL, r0
 800aeca:	b662      	cpsie	i
 800aecc:	b661      	cpsie	f
 800aece:	f3bf 8f4f 	dsb	sy
 800aed2:	f3bf 8f6f 	isb	sy
 800aed6:	df00      	svc	0
 800aed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aeda:	bf00      	nop
 800aedc:	e000ed08 	.word	0xe000ed08

0800aee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aee6:	4b47      	ldr	r3, [pc, #284]	@ (800b004 <xPortStartScheduler+0x124>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a47      	ldr	r2, [pc, #284]	@ (800b008 <xPortStartScheduler+0x128>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d10b      	bne.n	800af08 <xPortStartScheduler+0x28>
	__asm volatile
 800aef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef4:	f383 8811 	msr	BASEPRI, r3
 800aef8:	f3bf 8f6f 	isb	sy
 800aefc:	f3bf 8f4f 	dsb	sy
 800af00:	60fb      	str	r3, [r7, #12]
}
 800af02:	bf00      	nop
 800af04:	bf00      	nop
 800af06:	e7fd      	b.n	800af04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800af08:	4b3e      	ldr	r3, [pc, #248]	@ (800b004 <xPortStartScheduler+0x124>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a3f      	ldr	r2, [pc, #252]	@ (800b00c <xPortStartScheduler+0x12c>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d10b      	bne.n	800af2a <xPortStartScheduler+0x4a>
	__asm volatile
 800af12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af16:	f383 8811 	msr	BASEPRI, r3
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	613b      	str	r3, [r7, #16]
}
 800af24:	bf00      	nop
 800af26:	bf00      	nop
 800af28:	e7fd      	b.n	800af26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800af2a:	4b39      	ldr	r3, [pc, #228]	@ (800b010 <xPortStartScheduler+0x130>)
 800af2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	b2db      	uxtb	r3, r3
 800af34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	22ff      	movs	r2, #255	@ 0xff
 800af3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	b2db      	uxtb	r3, r3
 800af42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af44:	78fb      	ldrb	r3, [r7, #3]
 800af46:	b2db      	uxtb	r3, r3
 800af48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800af4c:	b2da      	uxtb	r2, r3
 800af4e:	4b31      	ldr	r3, [pc, #196]	@ (800b014 <xPortStartScheduler+0x134>)
 800af50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800af52:	4b31      	ldr	r3, [pc, #196]	@ (800b018 <xPortStartScheduler+0x138>)
 800af54:	2207      	movs	r2, #7
 800af56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af58:	e009      	b.n	800af6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800af5a:	4b2f      	ldr	r3, [pc, #188]	@ (800b018 <xPortStartScheduler+0x138>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	3b01      	subs	r3, #1
 800af60:	4a2d      	ldr	r2, [pc, #180]	@ (800b018 <xPortStartScheduler+0x138>)
 800af62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800af64:	78fb      	ldrb	r3, [r7, #3]
 800af66:	b2db      	uxtb	r3, r3
 800af68:	005b      	lsls	r3, r3, #1
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af6e:	78fb      	ldrb	r3, [r7, #3]
 800af70:	b2db      	uxtb	r3, r3
 800af72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af76:	2b80      	cmp	r3, #128	@ 0x80
 800af78:	d0ef      	beq.n	800af5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800af7a:	4b27      	ldr	r3, [pc, #156]	@ (800b018 <xPortStartScheduler+0x138>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f1c3 0307 	rsb	r3, r3, #7
 800af82:	2b04      	cmp	r3, #4
 800af84:	d00b      	beq.n	800af9e <xPortStartScheduler+0xbe>
	__asm volatile
 800af86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af8a:	f383 8811 	msr	BASEPRI, r3
 800af8e:	f3bf 8f6f 	isb	sy
 800af92:	f3bf 8f4f 	dsb	sy
 800af96:	60bb      	str	r3, [r7, #8]
}
 800af98:	bf00      	nop
 800af9a:	bf00      	nop
 800af9c:	e7fd      	b.n	800af9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800af9e:	4b1e      	ldr	r3, [pc, #120]	@ (800b018 <xPortStartScheduler+0x138>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	021b      	lsls	r3, r3, #8
 800afa4:	4a1c      	ldr	r2, [pc, #112]	@ (800b018 <xPortStartScheduler+0x138>)
 800afa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800afa8:	4b1b      	ldr	r3, [pc, #108]	@ (800b018 <xPortStartScheduler+0x138>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800afb0:	4a19      	ldr	r2, [pc, #100]	@ (800b018 <xPortStartScheduler+0x138>)
 800afb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	b2da      	uxtb	r2, r3
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800afbc:	4b17      	ldr	r3, [pc, #92]	@ (800b01c <xPortStartScheduler+0x13c>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a16      	ldr	r2, [pc, #88]	@ (800b01c <xPortStartScheduler+0x13c>)
 800afc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800afc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800afc8:	4b14      	ldr	r3, [pc, #80]	@ (800b01c <xPortStartScheduler+0x13c>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a13      	ldr	r2, [pc, #76]	@ (800b01c <xPortStartScheduler+0x13c>)
 800afce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800afd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800afd4:	f000 f8da 	bl	800b18c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800afd8:	4b11      	ldr	r3, [pc, #68]	@ (800b020 <xPortStartScheduler+0x140>)
 800afda:	2200      	movs	r2, #0
 800afdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800afde:	f000 f8f9 	bl	800b1d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800afe2:	4b10      	ldr	r3, [pc, #64]	@ (800b024 <xPortStartScheduler+0x144>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a0f      	ldr	r2, [pc, #60]	@ (800b024 <xPortStartScheduler+0x144>)
 800afe8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800afec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800afee:	f7ff ff63 	bl	800aeb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aff2:	f7fe ff3f 	bl	8009e74 <vTaskSwitchContext>
	prvTaskExitError();
 800aff6:	f7ff ff19 	bl	800ae2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800affa:	2300      	movs	r3, #0
}
 800affc:	4618      	mov	r0, r3
 800affe:	3718      	adds	r7, #24
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	e000ed00 	.word	0xe000ed00
 800b008:	410fc271 	.word	0x410fc271
 800b00c:	410fc270 	.word	0x410fc270
 800b010:	e000e400 	.word	0xe000e400
 800b014:	20000a14 	.word	0x20000a14
 800b018:	20000a18 	.word	0x20000a18
 800b01c:	e000ed20 	.word	0xe000ed20
 800b020:	20000028 	.word	0x20000028
 800b024:	e000ef34 	.word	0xe000ef34

0800b028 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
	__asm volatile
 800b02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b032:	f383 8811 	msr	BASEPRI, r3
 800b036:	f3bf 8f6f 	isb	sy
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	607b      	str	r3, [r7, #4]
}
 800b040:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b042:	4b10      	ldr	r3, [pc, #64]	@ (800b084 <vPortEnterCritical+0x5c>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	3301      	adds	r3, #1
 800b048:	4a0e      	ldr	r2, [pc, #56]	@ (800b084 <vPortEnterCritical+0x5c>)
 800b04a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b04c:	4b0d      	ldr	r3, [pc, #52]	@ (800b084 <vPortEnterCritical+0x5c>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d110      	bne.n	800b076 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b054:	4b0c      	ldr	r3, [pc, #48]	@ (800b088 <vPortEnterCritical+0x60>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00b      	beq.n	800b076 <vPortEnterCritical+0x4e>
	__asm volatile
 800b05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	603b      	str	r3, [r7, #0]
}
 800b070:	bf00      	nop
 800b072:	bf00      	nop
 800b074:	e7fd      	b.n	800b072 <vPortEnterCritical+0x4a>
	}
}
 800b076:	bf00      	nop
 800b078:	370c      	adds	r7, #12
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	20000028 	.word	0x20000028
 800b088:	e000ed04 	.word	0xe000ed04

0800b08c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b092:	4b12      	ldr	r3, [pc, #72]	@ (800b0dc <vPortExitCritical+0x50>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d10b      	bne.n	800b0b2 <vPortExitCritical+0x26>
	__asm volatile
 800b09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b09e:	f383 8811 	msr	BASEPRI, r3
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	607b      	str	r3, [r7, #4]
}
 800b0ac:	bf00      	nop
 800b0ae:	bf00      	nop
 800b0b0:	e7fd      	b.n	800b0ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b0b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b0dc <vPortExitCritical+0x50>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	4a08      	ldr	r2, [pc, #32]	@ (800b0dc <vPortExitCritical+0x50>)
 800b0ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b0bc:	4b07      	ldr	r3, [pc, #28]	@ (800b0dc <vPortExitCritical+0x50>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d105      	bne.n	800b0d0 <vPortExitCritical+0x44>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	f383 8811 	msr	BASEPRI, r3
}
 800b0ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b0d0:	bf00      	nop
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	20000028 	.word	0x20000028

0800b0e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b0e0:	f3ef 8009 	mrs	r0, PSP
 800b0e4:	f3bf 8f6f 	isb	sy
 800b0e8:	4b15      	ldr	r3, [pc, #84]	@ (800b140 <pxCurrentTCBConst>)
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	f01e 0f10 	tst.w	lr, #16
 800b0f0:	bf08      	it	eq
 800b0f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b0f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fa:	6010      	str	r0, [r2, #0]
 800b0fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b100:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b104:	f380 8811 	msr	BASEPRI, r0
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	f3bf 8f6f 	isb	sy
 800b110:	f7fe feb0 	bl	8009e74 <vTaskSwitchContext>
 800b114:	f04f 0000 	mov.w	r0, #0
 800b118:	f380 8811 	msr	BASEPRI, r0
 800b11c:	bc09      	pop	{r0, r3}
 800b11e:	6819      	ldr	r1, [r3, #0]
 800b120:	6808      	ldr	r0, [r1, #0]
 800b122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b126:	f01e 0f10 	tst.w	lr, #16
 800b12a:	bf08      	it	eq
 800b12c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b130:	f380 8809 	msr	PSP, r0
 800b134:	f3bf 8f6f 	isb	sy
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	f3af 8000 	nop.w

0800b140 <pxCurrentTCBConst>:
 800b140:	200008d4 	.word	0x200008d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b144:	bf00      	nop
 800b146:	bf00      	nop

0800b148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	607b      	str	r3, [r7, #4]
}
 800b160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b162:	f7fe fdcd 	bl	8009d00 <xTaskIncrementTick>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d003      	beq.n	800b174 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b16c:	4b06      	ldr	r3, [pc, #24]	@ (800b188 <SysTick_Handler+0x40>)
 800b16e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b172:	601a      	str	r2, [r3, #0]
 800b174:	2300      	movs	r3, #0
 800b176:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	f383 8811 	msr	BASEPRI, r3
}
 800b17e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b180:	bf00      	nop
 800b182:	3708      	adds	r7, #8
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	e000ed04 	.word	0xe000ed04

0800b18c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b18c:	b480      	push	{r7}
 800b18e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b190:	4b0b      	ldr	r3, [pc, #44]	@ (800b1c0 <vPortSetupTimerInterrupt+0x34>)
 800b192:	2200      	movs	r2, #0
 800b194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b196:	4b0b      	ldr	r3, [pc, #44]	@ (800b1c4 <vPortSetupTimerInterrupt+0x38>)
 800b198:	2200      	movs	r2, #0
 800b19a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b19c:	4b0a      	ldr	r3, [pc, #40]	@ (800b1c8 <vPortSetupTimerInterrupt+0x3c>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a0a      	ldr	r2, [pc, #40]	@ (800b1cc <vPortSetupTimerInterrupt+0x40>)
 800b1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1a6:	099b      	lsrs	r3, r3, #6
 800b1a8:	4a09      	ldr	r2, [pc, #36]	@ (800b1d0 <vPortSetupTimerInterrupt+0x44>)
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b1ae:	4b04      	ldr	r3, [pc, #16]	@ (800b1c0 <vPortSetupTimerInterrupt+0x34>)
 800b1b0:	2207      	movs	r2, #7
 800b1b2:	601a      	str	r2, [r3, #0]
}
 800b1b4:	bf00      	nop
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr
 800b1be:	bf00      	nop
 800b1c0:	e000e010 	.word	0xe000e010
 800b1c4:	e000e018 	.word	0xe000e018
 800b1c8:	20000004 	.word	0x20000004
 800b1cc:	10624dd3 	.word	0x10624dd3
 800b1d0:	e000e014 	.word	0xe000e014

0800b1d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b1d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b1e4 <vPortEnableVFP+0x10>
 800b1d8:	6801      	ldr	r1, [r0, #0]
 800b1da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b1de:	6001      	str	r1, [r0, #0]
 800b1e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b1e2:	bf00      	nop
 800b1e4:	e000ed88 	.word	0xe000ed88

0800b1e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b1ee:	f3ef 8305 	mrs	r3, IPSR
 800b1f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b0f      	cmp	r3, #15
 800b1f8:	d915      	bls.n	800b226 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b1fa:	4a18      	ldr	r2, [pc, #96]	@ (800b25c <vPortValidateInterruptPriority+0x74>)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	4413      	add	r3, r2
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b204:	4b16      	ldr	r3, [pc, #88]	@ (800b260 <vPortValidateInterruptPriority+0x78>)
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	7afa      	ldrb	r2, [r7, #11]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d20b      	bcs.n	800b226 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	607b      	str	r3, [r7, #4]
}
 800b220:	bf00      	nop
 800b222:	bf00      	nop
 800b224:	e7fd      	b.n	800b222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b226:	4b0f      	ldr	r3, [pc, #60]	@ (800b264 <vPortValidateInterruptPriority+0x7c>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b22e:	4b0e      	ldr	r3, [pc, #56]	@ (800b268 <vPortValidateInterruptPriority+0x80>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	429a      	cmp	r2, r3
 800b234:	d90b      	bls.n	800b24e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b23a:	f383 8811 	msr	BASEPRI, r3
 800b23e:	f3bf 8f6f 	isb	sy
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	603b      	str	r3, [r7, #0]
}
 800b248:	bf00      	nop
 800b24a:	bf00      	nop
 800b24c:	e7fd      	b.n	800b24a <vPortValidateInterruptPriority+0x62>
	}
 800b24e:	bf00      	nop
 800b250:	3714      	adds	r7, #20
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr
 800b25a:	bf00      	nop
 800b25c:	e000e3f0 	.word	0xe000e3f0
 800b260:	20000a14 	.word	0x20000a14
 800b264:	e000ed0c 	.word	0xe000ed0c
 800b268:	20000a18 	.word	0x20000a18

0800b26c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b08a      	sub	sp, #40	@ 0x28
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b274:	2300      	movs	r3, #0
 800b276:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b278:	f7fe fc86 	bl	8009b88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b27c:	4b5a      	ldr	r3, [pc, #360]	@ (800b3e8 <pvPortMalloc+0x17c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d101      	bne.n	800b288 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b284:	f000 f916 	bl	800b4b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b288:	4b58      	ldr	r3, [pc, #352]	@ (800b3ec <pvPortMalloc+0x180>)
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4013      	ands	r3, r2
 800b290:	2b00      	cmp	r3, #0
 800b292:	f040 8090 	bne.w	800b3b6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d01e      	beq.n	800b2da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b29c:	2208      	movs	r2, #8
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f003 0307 	and.w	r3, r3, #7
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d015      	beq.n	800b2da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f023 0307 	bic.w	r3, r3, #7
 800b2b4:	3308      	adds	r3, #8
 800b2b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f003 0307 	and.w	r3, r3, #7
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d00b      	beq.n	800b2da <pvPortMalloc+0x6e>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	617b      	str	r3, [r7, #20]
}
 800b2d4:	bf00      	nop
 800b2d6:	bf00      	nop
 800b2d8:	e7fd      	b.n	800b2d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d06a      	beq.n	800b3b6 <pvPortMalloc+0x14a>
 800b2e0:	4b43      	ldr	r3, [pc, #268]	@ (800b3f0 <pvPortMalloc+0x184>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d865      	bhi.n	800b3b6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b2ea:	4b42      	ldr	r3, [pc, #264]	@ (800b3f4 <pvPortMalloc+0x188>)
 800b2ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b2ee:	4b41      	ldr	r3, [pc, #260]	@ (800b3f4 <pvPortMalloc+0x188>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b2f4:	e004      	b.n	800b300 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	429a      	cmp	r2, r3
 800b308:	d903      	bls.n	800b312 <pvPortMalloc+0xa6>
 800b30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1f1      	bne.n	800b2f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b312:	4b35      	ldr	r3, [pc, #212]	@ (800b3e8 <pvPortMalloc+0x17c>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b318:	429a      	cmp	r2, r3
 800b31a:	d04c      	beq.n	800b3b6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b31c:	6a3b      	ldr	r3, [r7, #32]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2208      	movs	r2, #8
 800b322:	4413      	add	r3, r2
 800b324:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	6a3b      	ldr	r3, [r7, #32]
 800b32c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b330:	685a      	ldr	r2, [r3, #4]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	1ad2      	subs	r2, r2, r3
 800b336:	2308      	movs	r3, #8
 800b338:	005b      	lsls	r3, r3, #1
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d920      	bls.n	800b380 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4413      	add	r3, r2
 800b344:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	f003 0307 	and.w	r3, r3, #7
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00b      	beq.n	800b368 <pvPortMalloc+0xfc>
	__asm volatile
 800b350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	613b      	str	r3, [r7, #16]
}
 800b362:	bf00      	nop
 800b364:	bf00      	nop
 800b366:	e7fd      	b.n	800b364 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36a:	685a      	ldr	r2, [r3, #4]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	1ad2      	subs	r2, r2, r3
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b37a:	69b8      	ldr	r0, [r7, #24]
 800b37c:	f000 f8fc 	bl	800b578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b380:	4b1b      	ldr	r3, [pc, #108]	@ (800b3f0 <pvPortMalloc+0x184>)
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	4a19      	ldr	r2, [pc, #100]	@ (800b3f0 <pvPortMalloc+0x184>)
 800b38c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b38e:	4b18      	ldr	r3, [pc, #96]	@ (800b3f0 <pvPortMalloc+0x184>)
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	4b19      	ldr	r3, [pc, #100]	@ (800b3f8 <pvPortMalloc+0x18c>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	429a      	cmp	r2, r3
 800b398:	d203      	bcs.n	800b3a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b39a:	4b15      	ldr	r3, [pc, #84]	@ (800b3f0 <pvPortMalloc+0x184>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a16      	ldr	r2, [pc, #88]	@ (800b3f8 <pvPortMalloc+0x18c>)
 800b3a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a4:	685a      	ldr	r2, [r3, #4]
 800b3a6:	4b11      	ldr	r3, [pc, #68]	@ (800b3ec <pvPortMalloc+0x180>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	431a      	orrs	r2, r3
 800b3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b3b6:	f7fe fbf5 	bl	8009ba4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	f003 0307 	and.w	r3, r3, #7
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00b      	beq.n	800b3dc <pvPortMalloc+0x170>
	__asm volatile
 800b3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c8:	f383 8811 	msr	BASEPRI, r3
 800b3cc:	f3bf 8f6f 	isb	sy
 800b3d0:	f3bf 8f4f 	dsb	sy
 800b3d4:	60fb      	str	r3, [r7, #12]
}
 800b3d6:	bf00      	nop
 800b3d8:	bf00      	nop
 800b3da:	e7fd      	b.n	800b3d8 <pvPortMalloc+0x16c>
	return pvReturn;
 800b3dc:	69fb      	ldr	r3, [r7, #28]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3728      	adds	r7, #40	@ 0x28
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	20013624 	.word	0x20013624
 800b3ec:	20013630 	.word	0x20013630
 800b3f0:	20013628 	.word	0x20013628
 800b3f4:	2001361c 	.word	0x2001361c
 800b3f8:	2001362c 	.word	0x2001362c

0800b3fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b086      	sub	sp, #24
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d04a      	beq.n	800b4a4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b40e:	2308      	movs	r3, #8
 800b410:	425b      	negs	r3, r3
 800b412:	697a      	ldr	r2, [r7, #20]
 800b414:	4413      	add	r3, r2
 800b416:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	685a      	ldr	r2, [r3, #4]
 800b420:	4b22      	ldr	r3, [pc, #136]	@ (800b4ac <vPortFree+0xb0>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4013      	ands	r3, r2
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10b      	bne.n	800b442 <vPortFree+0x46>
	__asm volatile
 800b42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b42e:	f383 8811 	msr	BASEPRI, r3
 800b432:	f3bf 8f6f 	isb	sy
 800b436:	f3bf 8f4f 	dsb	sy
 800b43a:	60fb      	str	r3, [r7, #12]
}
 800b43c:	bf00      	nop
 800b43e:	bf00      	nop
 800b440:	e7fd      	b.n	800b43e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00b      	beq.n	800b462 <vPortFree+0x66>
	__asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b44e:	f383 8811 	msr	BASEPRI, r3
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	60bb      	str	r3, [r7, #8]
}
 800b45c:	bf00      	nop
 800b45e:	bf00      	nop
 800b460:	e7fd      	b.n	800b45e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	685a      	ldr	r2, [r3, #4]
 800b466:	4b11      	ldr	r3, [pc, #68]	@ (800b4ac <vPortFree+0xb0>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4013      	ands	r3, r2
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d019      	beq.n	800b4a4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d115      	bne.n	800b4a4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	685a      	ldr	r2, [r3, #4]
 800b47c:	4b0b      	ldr	r3, [pc, #44]	@ (800b4ac <vPortFree+0xb0>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	43db      	mvns	r3, r3
 800b482:	401a      	ands	r2, r3
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b488:	f7fe fb7e 	bl	8009b88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	685a      	ldr	r2, [r3, #4]
 800b490:	4b07      	ldr	r3, [pc, #28]	@ (800b4b0 <vPortFree+0xb4>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4413      	add	r3, r2
 800b496:	4a06      	ldr	r2, [pc, #24]	@ (800b4b0 <vPortFree+0xb4>)
 800b498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b49a:	6938      	ldr	r0, [r7, #16]
 800b49c:	f000 f86c 	bl	800b578 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b4a0:	f7fe fb80 	bl	8009ba4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b4a4:	bf00      	nop
 800b4a6:	3718      	adds	r7, #24
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	20013630 	.word	0x20013630
 800b4b0:	20013628 	.word	0x20013628

0800b4b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b4ba:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800b4be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b4c0:	4b27      	ldr	r3, [pc, #156]	@ (800b560 <prvHeapInit+0xac>)
 800b4c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f003 0307 	and.w	r3, r3, #7
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00c      	beq.n	800b4e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3307      	adds	r3, #7
 800b4d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f023 0307 	bic.w	r3, r3, #7
 800b4da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	4a1f      	ldr	r2, [pc, #124]	@ (800b560 <prvHeapInit+0xac>)
 800b4e4:	4413      	add	r3, r2
 800b4e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b4ec:	4a1d      	ldr	r2, [pc, #116]	@ (800b564 <prvHeapInit+0xb0>)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b4f2:	4b1c      	ldr	r3, [pc, #112]	@ (800b564 <prvHeapInit+0xb0>)
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b500:	2208      	movs	r2, #8
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	1a9b      	subs	r3, r3, r2
 800b506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f023 0307 	bic.w	r3, r3, #7
 800b50e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	4a15      	ldr	r2, [pc, #84]	@ (800b568 <prvHeapInit+0xb4>)
 800b514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b516:	4b14      	ldr	r3, [pc, #80]	@ (800b568 <prvHeapInit+0xb4>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2200      	movs	r2, #0
 800b51c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b51e:	4b12      	ldr	r3, [pc, #72]	@ (800b568 <prvHeapInit+0xb4>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2200      	movs	r2, #0
 800b524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	1ad2      	subs	r2, r2, r3
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b534:	4b0c      	ldr	r3, [pc, #48]	@ (800b568 <prvHeapInit+0xb4>)
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	4a0a      	ldr	r2, [pc, #40]	@ (800b56c <prvHeapInit+0xb8>)
 800b542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	4a09      	ldr	r2, [pc, #36]	@ (800b570 <prvHeapInit+0xbc>)
 800b54a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b54c:	4b09      	ldr	r3, [pc, #36]	@ (800b574 <prvHeapInit+0xc0>)
 800b54e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b552:	601a      	str	r2, [r3, #0]
}
 800b554:	bf00      	nop
 800b556:	3714      	adds	r7, #20
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr
 800b560:	20000a1c 	.word	0x20000a1c
 800b564:	2001361c 	.word	0x2001361c
 800b568:	20013624 	.word	0x20013624
 800b56c:	2001362c 	.word	0x2001362c
 800b570:	20013628 	.word	0x20013628
 800b574:	20013630 	.word	0x20013630

0800b578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b578:	b480      	push	{r7}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b580:	4b28      	ldr	r3, [pc, #160]	@ (800b624 <prvInsertBlockIntoFreeList+0xac>)
 800b582:	60fb      	str	r3, [r7, #12]
 800b584:	e002      	b.n	800b58c <prvInsertBlockIntoFreeList+0x14>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	60fb      	str	r3, [r7, #12]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	429a      	cmp	r2, r3
 800b594:	d8f7      	bhi.n	800b586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	68ba      	ldr	r2, [r7, #8]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d108      	bne.n	800b5ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	685a      	ldr	r2, [r3, #4]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	441a      	add	r2, r3
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	441a      	add	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d118      	bne.n	800b600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	4b15      	ldr	r3, [pc, #84]	@ (800b628 <prvInsertBlockIntoFreeList+0xb0>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d00d      	beq.n	800b5f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685a      	ldr	r2, [r3, #4]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	441a      	add	r2, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	601a      	str	r2, [r3, #0]
 800b5f4:	e008      	b.n	800b608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b5f6:	4b0c      	ldr	r3, [pc, #48]	@ (800b628 <prvInsertBlockIntoFreeList+0xb0>)
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	601a      	str	r2, [r3, #0]
 800b5fe:	e003      	b.n	800b608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d002      	beq.n	800b616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b616:	bf00      	nop
 800b618:	3714      	adds	r7, #20
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	2001361c 	.word	0x2001361c
 800b628:	20013624 	.word	0x20013624

0800b62c <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af02      	add	r7, sp, #8
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	460b      	mov	r3, r1
 800b636:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 800b638:	78fb      	ldrb	r3, [r7, #3]
 800b63a:	f023 030f 	bic.w	r3, r3, #15
 800b63e:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 800b640:	78fb      	ldrb	r3, [r7, #3]
 800b642:	011b      	lsls	r3, r3, #4
 800b644:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 800b646:	7bfb      	ldrb	r3, [r7, #15]
 800b648:	f043 030c 	orr.w	r3, r3, #12
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 800b650:	7bfb      	ldrb	r3, [r7, #15]
 800b652:	f043 0308 	orr.w	r3, r3, #8
 800b656:	b2db      	uxtb	r3, r3
 800b658:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 800b65a:	7bbb      	ldrb	r3, [r7, #14]
 800b65c:	f043 030c 	orr.w	r3, r3, #12
 800b660:	b2db      	uxtb	r3, r3
 800b662:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 800b664:	7bbb      	ldrb	r3, [r7, #14]
 800b666:	f043 0308 	orr.w	r3, r3, #8
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	72fb      	strb	r3, [r7, #11]


    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6818      	ldr	r0, [r3, #0]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	791b      	ldrb	r3, [r3, #4]
 800b676:	4619      	mov	r1, r3
 800b678:	f107 0208 	add.w	r2, r7, #8
 800b67c:	2364      	movs	r3, #100	@ 0x64
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	2304      	movs	r3, #4
 800b682:	f7f7 fb31 	bl	8002ce8 <HAL_I2C_Master_Transmit>
 800b686:	4603      	mov	r3, r0
 800b688:	737b      	strb	r3, [r7, #13]
    if (ret != HAL_OK) {

    }
}
 800b68a:	bf00      	nop
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b086      	sub	sp, #24
 800b696:	af02      	add	r7, sp, #8
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	460b      	mov	r3, r1
 800b69c:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 800b69e:	78fb      	ldrb	r3, [r7, #3]
 800b6a0:	f023 030f 	bic.w	r3, r3, #15
 800b6a4:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 800b6a6:	78fb      	ldrb	r3, [r7, #3]
 800b6a8:	011b      	lsls	r3, r3, #4
 800b6aa:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 800b6ac:	7bfb      	ldrb	r3, [r7, #15]
 800b6ae:	f043 030d 	orr.w	r3, r3, #13
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 800b6b6:	7bfb      	ldrb	r3, [r7, #15]
 800b6b8:	f043 0309 	orr.w	r3, r3, #9
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 800b6c0:	7bbb      	ldrb	r3, [r7, #14]
 800b6c2:	f043 030d 	orr.w	r3, r3, #13
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 800b6ca:	7bbb      	ldrb	r3, [r7, #14]
 800b6cc:	f043 0309 	orr.w	r3, r3, #9
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	72fb      	strb	r3, [r7, #11]

    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6818      	ldr	r0, [r3, #0]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	791b      	ldrb	r3, [r3, #4]
 800b6dc:	4619      	mov	r1, r3
 800b6de:	f107 0208 	add.w	r2, r7, #8
 800b6e2:	2364      	movs	r3, #100	@ 0x64
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	2304      	movs	r3, #4
 800b6e8:	f7f7 fafe 	bl	8002ce8 <HAL_I2C_Master_Transmit>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	737b      	strb	r3, [r7, #13]
    if (ret != HAL_OK) {

	}
}
 800b6f0:	bf00      	nop
 800b6f2:	3710      	adds	r7, #16
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b086      	sub	sp, #24
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2b03      	cmp	r3, #3
 800b708:	d824      	bhi.n	800b754 <lcd_gotoxy+0x5c>
 800b70a:	a201      	add	r2, pc, #4	@ (adr r2, 800b710 <lcd_gotoxy+0x18>)
 800b70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b710:	0800b721 	.word	0x0800b721
 800b714:	0800b72b 	.word	0x0800b72b
 800b718:	0800b735 	.word	0x0800b735
 800b71c:	0800b73f 	.word	0x0800b73f
    {
        case 0: address = 0x80 + col; break;  // First row
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	b2db      	uxtb	r3, r3
 800b724:	3b80      	subs	r3, #128	@ 0x80
 800b726:	75fb      	strb	r3, [r7, #23]
 800b728:	e00e      	b.n	800b748 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	3b40      	subs	r3, #64	@ 0x40
 800b730:	75fb      	strb	r3, [r7, #23]
 800b732:	e009      	b.n	800b748 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	b2db      	uxtb	r3, r3
 800b738:	3b6c      	subs	r3, #108	@ 0x6c
 800b73a:	75fb      	strb	r3, [r7, #23]
 800b73c:	e004      	b.n	800b748 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	b2db      	uxtb	r3, r3
 800b742:	3b2c      	subs	r3, #44	@ 0x2c
 800b744:	75fb      	strb	r3, [r7, #23]
 800b746:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 800b748:	7dfb      	ldrb	r3, [r7, #23]
 800b74a:	4619      	mov	r1, r3
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	f7ff ff6d 	bl	800b62c <lcd_send_cmd>
 800b752:	e000      	b.n	800b756 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 800b754:	bf00      	nop
}
 800b756:	3718      	adds	r7, #24
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 800b764:	2032      	movs	r0, #50	@ 0x32
 800b766:	f7f6 fabd 	bl	8001ce4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800b76a:	2130      	movs	r1, #48	@ 0x30
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7ff ff5d 	bl	800b62c <lcd_send_cmd>
    HAL_Delay(5);
 800b772:	2005      	movs	r0, #5
 800b774:	f7f6 fab6 	bl	8001ce4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800b778:	2130      	movs	r1, #48	@ 0x30
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f7ff ff56 	bl	800b62c <lcd_send_cmd>
    HAL_Delay(1);
 800b780:	2001      	movs	r0, #1
 800b782:	f7f6 faaf 	bl	8001ce4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800b786:	2130      	movs	r1, #48	@ 0x30
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f7ff ff4f 	bl	800b62c <lcd_send_cmd>
    HAL_Delay(10);
 800b78e:	200a      	movs	r0, #10
 800b790:	f7f6 faa8 	bl	8001ce4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 800b794:	2120      	movs	r1, #32
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f7ff ff48 	bl	800b62c <lcd_send_cmd>
    HAL_Delay(10);
 800b79c:	200a      	movs	r0, #10
 800b79e:	f7f6 faa1 	bl	8001ce4 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 800b7a2:	2128      	movs	r1, #40	@ 0x28
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7ff ff41 	bl	800b62c <lcd_send_cmd>
    HAL_Delay(1);
 800b7aa:	2001      	movs	r0, #1
 800b7ac:	f7f6 fa9a 	bl	8001ce4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 800b7b0:	2108      	movs	r1, #8
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f7ff ff3a 	bl	800b62c <lcd_send_cmd>
    HAL_Delay(1);
 800b7b8:	2001      	movs	r0, #1
 800b7ba:	f7f6 fa93 	bl	8001ce4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 800b7be:	2101      	movs	r1, #1
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f7ff ff33 	bl	800b62c <lcd_send_cmd>
    HAL_Delay(2);
 800b7c6:	2002      	movs	r0, #2
 800b7c8:	f7f6 fa8c 	bl	8001ce4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 800b7cc:	2106      	movs	r1, #6
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7ff ff2c 	bl	800b62c <lcd_send_cmd>
    HAL_Delay(1);
 800b7d4:	2001      	movs	r0, #1
 800b7d6:	f7f6 fa85 	bl	8001ce4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 800b7da:	210c      	movs	r1, #12
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7ff ff25 	bl	800b62c <lcd_send_cmd>
}
 800b7e2:	bf00      	nop
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b082      	sub	sp, #8
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 800b7f4:	e007      	b.n	800b806 <lcd_puts+0x1c>
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	1c5a      	adds	r2, r3, #1
 800b7fa:	603a      	str	r2, [r7, #0]
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7ff ff46 	bl	800b692 <lcd_send_data>
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d1f3      	bne.n	800b7f6 <lcd_puts+0xc>
}
 800b80e:	bf00      	nop
 800b810:	bf00      	nop
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <lcd_putchar>:
 * @param  lcd: Pointer to the LCD handle
 * @param  ch: Character to send
 * @retval None
 */
void lcd_putchar(I2C_LCD_HandleTypeDef *lcd, char ch)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	460b      	mov	r3, r1
 800b822:	70fb      	strb	r3, [r7, #3]
    lcd_send_data(lcd, ch);  // Send the character to the display
 800b824:	78fb      	ldrb	r3, [r7, #3]
 800b826:	4619      	mov	r1, r3
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f7ff ff32 	bl	800b692 <lcd_send_data>
}
 800b82e:	bf00      	nop
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
	...

0800b838 <LCD2004_Init>:
SemaphoreHandle_t xLCDMutex;
I2C_LCD_HandleTypeDef lcd;
UART_HandleTypeDef* lcd_huart;

void LCD2004_Init(I2C_HandleTypeDef *hi2c, uint8_t address, UART_HandleTypeDef* haurt)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	460b      	mov	r3, r1
 800b842:	607a      	str	r2, [r7, #4]
 800b844:	72fb      	strb	r3, [r7, #11]
  lcd.hi2c = hi2c;
 800b846:	4a08      	ldr	r2, [pc, #32]	@ (800b868 <LCD2004_Init+0x30>)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6013      	str	r3, [r2, #0]
  lcd.address = address; //0x4E（0x27 << 1）
 800b84c:	4a06      	ldr	r2, [pc, #24]	@ (800b868 <LCD2004_Init+0x30>)
 800b84e:	7afb      	ldrb	r3, [r7, #11]
 800b850:	7113      	strb	r3, [r2, #4]
  lcd_init(&lcd);
 800b852:	4805      	ldr	r0, [pc, #20]	@ (800b868 <LCD2004_Init+0x30>)
 800b854:	f7ff ff82 	bl	800b75c <lcd_init>
  lcd_huart = haurt;
 800b858:	4a04      	ldr	r2, [pc, #16]	@ (800b86c <LCD2004_Init+0x34>)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6013      	str	r3, [r2, #0]
}
 800b85e:	bf00      	nop
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	2001363c 	.word	0x2001363c
 800b86c:	20013644 	.word	0x20013644

0800b870 <LCD2004_OS_Resources_Init>:

void LCD2004_OS_Resources_Init()
{
 800b870:	b580      	push	{r7, lr}
 800b872:	af00      	add	r7, sp, #0
  xLCDQueue = xQueueCreate(4, sizeof(LCDMsgStruct));
 800b874:	2200      	movs	r2, #0
 800b876:	2122      	movs	r1, #34	@ 0x22
 800b878:	2004      	movs	r0, #4
 800b87a:	f7fd fa19 	bl	8008cb0 <xQueueGenericCreate>
 800b87e:	4603      	mov	r3, r0
 800b880:	4a04      	ldr	r2, [pc, #16]	@ (800b894 <LCD2004_OS_Resources_Init+0x24>)
 800b882:	6013      	str	r3, [r2, #0]
  xLCDMutex = xSemaphoreCreateMutex();
 800b884:	2001      	movs	r0, #1
 800b886:	f7fd fa8d 	bl	8008da4 <xQueueCreateMutex>
 800b88a:	4603      	mov	r3, r0
 800b88c:	4a02      	ldr	r2, [pc, #8]	@ (800b898 <LCD2004_OS_Resources_Init+0x28>)
 800b88e:	6013      	str	r3, [r2, #0]
}
 800b890:	bf00      	nop
 800b892:	bd80      	pop	{r7, pc}
 800b894:	20013634 	.word	0x20013634
 800b898:	20013638 	.word	0x20013638

0800b89c <LCD_ClearLine>:

void LCD_ClearLine(uint8_t row)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	71fb      	strb	r3, [r7, #7]
    lcd_gotoxy(&lcd, 0, row);
 800b8a6:	79fb      	ldrb	r3, [r7, #7]
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	480a      	ldr	r0, [pc, #40]	@ (800b8d8 <LCD_ClearLine+0x3c>)
 800b8ae:	f7ff ff23 	bl	800b6f8 <lcd_gotoxy>
    for (int i = 0; i < 20; i++) {
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	60fb      	str	r3, [r7, #12]
 800b8b6:	e006      	b.n	800b8c6 <LCD_ClearLine+0x2a>
        lcd_putchar(&lcd, ' ');
 800b8b8:	2120      	movs	r1, #32
 800b8ba:	4807      	ldr	r0, [pc, #28]	@ (800b8d8 <LCD_ClearLine+0x3c>)
 800b8bc:	f7ff ffac 	bl	800b818 <lcd_putchar>
    for (int i = 0; i < 20; i++) {
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	60fb      	str	r3, [r7, #12]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2b13      	cmp	r3, #19
 800b8ca:	ddf5      	ble.n	800b8b8 <LCD_ClearLine+0x1c>
    }
}
 800b8cc:	bf00      	nop
 800b8ce:	bf00      	nop
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	2001363c 	.word	0x2001363c

0800b8dc <SetLCDCommandStatus>:

void SetLCDCommandStatus(char* str)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b0aa      	sub	sp, #168	@ 0xa8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
	LCD_ClearLine(0);
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	f7ff ffd9 	bl	800b89c <LCD_ClearLine>
	LCD_ClearLine(1);
 800b8ea:	2001      	movs	r0, #1
 800b8ec:	f7ff ffd6 	bl	800b89c <LCD_ClearLine>
	LCD_ClearLine(3);
 800b8f0:	2003      	movs	r0, #3
 800b8f2:	f7ff ffd3 	bl	800b89c <LCD_ClearLine>

	LCDMsgStruct commandMsg;
	commandMsg.row = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
	commandMsg.col = 0;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
	char buf[50];
	sprintf(buf, "Command: %s", str);
 800b902:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	4931      	ldr	r1, [pc, #196]	@ (800b9d0 <SetLCDCommandStatus+0xf4>)
 800b90a:	4618      	mov	r0, r3
 800b90c:	f004 fd84 	bl	8010418 <siprintf>
	strncpy(commandMsg.msg, buf, sizeof(commandMsg.msg)-1);
 800b910:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800b914:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800b918:	3302      	adds	r3, #2
 800b91a:	221f      	movs	r2, #31
 800b91c:	4618      	mov	r0, r3
 800b91e:	f004 fe64 	bl	80105ea <strncpy>
	commandMsg.msg[sizeof(commandMsg.msg)-1] = '\0';
 800b922:	2300      	movs	r3, #0
 800b924:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5

	if (xQueueSend(xLCDQueue, &commandMsg, 0) != pdPASS) {
 800b928:	4b2a      	ldr	r3, [pc, #168]	@ (800b9d4 <SetLCDCommandStatus+0xf8>)
 800b92a:	6818      	ldr	r0, [r3, #0]
 800b92c:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 800b930:	2300      	movs	r3, #0
 800b932:	2200      	movs	r2, #0
 800b934:	f7fd fa4e 	bl	8008dd4 <xQueueGenericSend>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d005      	beq.n	800b94a <SetLCDCommandStatus+0x6e>
		SendMsg(lcd_huart, "\r\nLCDShowMsg: Queue full or error.\r\n");
 800b93e:	4b26      	ldr	r3, [pc, #152]	@ (800b9d8 <SetLCDCommandStatus+0xfc>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4926      	ldr	r1, [pc, #152]	@ (800b9dc <SetLCDCommandStatus+0x100>)
 800b944:	4618      	mov	r0, r3
 800b946:	f7f5 fb45 	bl	8000fd4 <SendMsg>
	}

	LCDMsgStruct statusMSg;
	statusMSg.row = 1;
 800b94a:	2301      	movs	r3, #1
 800b94c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	statusMSg.col = 0;
 800b950:	2300      	movs	r3, #0
 800b952:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	strncpy(statusMSg.msg, "Status: Success", sizeof(statusMSg.msg)-1);
 800b956:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b95a:	3302      	adds	r3, #2
 800b95c:	221f      	movs	r2, #31
 800b95e:	4920      	ldr	r1, [pc, #128]	@ (800b9e0 <SetLCDCommandStatus+0x104>)
 800b960:	4618      	mov	r0, r3
 800b962:	f004 fe42 	bl	80105ea <strncpy>
	statusMSg.msg[sizeof(statusMSg.msg)-1] = '\0';
 800b966:	2300      	movs	r3, #0
 800b968:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

	if (xQueueSend(xLCDQueue, &statusMSg, 0) != pdPASS) {
 800b96c:	4b19      	ldr	r3, [pc, #100]	@ (800b9d4 <SetLCDCommandStatus+0xf8>)
 800b96e:	6818      	ldr	r0, [r3, #0]
 800b970:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800b974:	2300      	movs	r3, #0
 800b976:	2200      	movs	r2, #0
 800b978:	f7fd fa2c 	bl	8008dd4 <xQueueGenericSend>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d005      	beq.n	800b98e <SetLCDCommandStatus+0xb2>
		SendMsg(lcd_huart, "\r\nLCDShowMsg: Queue full or error.\r\n");
 800b982:	4b15      	ldr	r3, [pc, #84]	@ (800b9d8 <SetLCDCommandStatus+0xfc>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4915      	ldr	r1, [pc, #84]	@ (800b9dc <SetLCDCommandStatus+0x100>)
 800b988:	4618      	mov	r0, r3
 800b98a:	f7f5 fb23 	bl	8000fd4 <SendMsg>
	}



	LCDMsgStruct timeMSg;
	timeMSg.row = 3;
 800b98e:	2303      	movs	r3, #3
 800b990:	723b      	strb	r3, [r7, #8]
	timeMSg.col = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	727b      	strb	r3, [r7, #9]
	getCurrentTime(timeMSg.msg, sizeof(timeMSg.msg));
 800b996:	f107 0308 	add.w	r3, r7, #8
 800b99a:	3302      	adds	r3, #2
 800b99c:	2120      	movs	r1, #32
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f004 fad0 	bl	800ff44 <getCurrentTime>

	if (xQueueSend(xLCDQueue, &timeMSg, 0) != pdPASS) {
 800b9a4:	4b0b      	ldr	r3, [pc, #44]	@ (800b9d4 <SetLCDCommandStatus+0xf8>)
 800b9a6:	6818      	ldr	r0, [r3, #0]
 800b9a8:	f107 0108 	add.w	r1, r7, #8
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f7fd fa10 	bl	8008dd4 <xQueueGenericSend>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d005      	beq.n	800b9c6 <SetLCDCommandStatus+0xea>
		SendMsg(lcd_huart, "\r\nLCDShowMsg: Queue full or error.\r\n");
 800b9ba:	4b07      	ldr	r3, [pc, #28]	@ (800b9d8 <SetLCDCommandStatus+0xfc>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4907      	ldr	r1, [pc, #28]	@ (800b9dc <SetLCDCommandStatus+0x100>)
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7f5 fb07 	bl	8000fd4 <SendMsg>
	}
}
 800b9c6:	bf00      	nop
 800b9c8:	37a8      	adds	r7, #168	@ 0xa8
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	080120f0 	.word	0x080120f0
 800b9d4:	20013634 	.word	0x20013634
 800b9d8:	20013644 	.word	0x20013644
 800b9dc:	080120fc 	.word	0x080120fc
 800b9e0:	08012124 	.word	0x08012124

0800b9e4 <LCDHandler>:

void LCDHandler(void *pvParameters)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b08c      	sub	sp, #48	@ 0x30
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  LCDMsgStruct lcdMsg;
  while (1)
  {
      if (xQueueReceive(xLCDQueue, &lcdMsg, portMAX_DELAY) == pdPASS) {
 800b9ec:	4b0f      	ldr	r3, [pc, #60]	@ (800ba2c <LCDHandler+0x48>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f107 010c 	add.w	r1, r7, #12
 800b9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7fd fb89 	bl	8009110 <xQueueReceive>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d10d      	bne.n	800ba20 <LCDHandler+0x3c>
//          }
//
//          xSemaphoreGive(xLCDMutex);
//	    }
    	  //SendMsg(&huart2, "\n\r LCDReceiveHandler : %d %d %s\n\r", lcdMsg.row, lcdMsg.col, lcdMsg.msg);
          lcd_gotoxy(&lcd, lcdMsg.col, lcdMsg.row);
 800ba04:	7b7b      	ldrb	r3, [r7, #13]
 800ba06:	4619      	mov	r1, r3
 800ba08:	7b3b      	ldrb	r3, [r7, #12]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	4808      	ldr	r0, [pc, #32]	@ (800ba30 <LCDHandler+0x4c>)
 800ba0e:	f7ff fe73 	bl	800b6f8 <lcd_gotoxy>
          lcd_puts(&lcd, lcdMsg.msg);
 800ba12:	f107 030c 	add.w	r3, r7, #12
 800ba16:	3302      	adds	r3, #2
 800ba18:	4619      	mov	r1, r3
 800ba1a:	4805      	ldr	r0, [pc, #20]	@ (800ba30 <LCDHandler+0x4c>)
 800ba1c:	f7ff fee5 	bl	800b7ea <lcd_puts>
      }
      vTaskDelay(pdMS_TO_TICKS(500));
 800ba20:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ba24:	f7fe f82c 	bl	8009a80 <vTaskDelay>
      if (xQueueReceive(xLCDQueue, &lcdMsg, portMAX_DELAY) == pdPASS) {
 800ba28:	e7e0      	b.n	800b9ec <LCDHandler+0x8>
 800ba2a:	bf00      	nop
 800ba2c:	20013634 	.word	0x20013634
 800ba30:	2001363c 	.word	0x2001363c

0800ba34 <LED_Init>:
extern TIM_HandleTypeDef htim4;
QueueHandle_t xLEDQueue;
SemaphoreHandle_t xLEDMutex;

void LED_Init()
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800ba38:	2100      	movs	r1, #0
 800ba3a:	4806      	ldr	r0, [pc, #24]	@ (800ba54 <LED_Init+0x20>)
 800ba3c:	f7f9 ffd2 	bl	80059e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800ba40:	2108      	movs	r1, #8
 800ba42:	4804      	ldr	r0, [pc, #16]	@ (800ba54 <LED_Init+0x20>)
 800ba44:	f7f9 ffce 	bl	80059e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800ba48:	210c      	movs	r1, #12
 800ba4a:	4802      	ldr	r0, [pc, #8]	@ (800ba54 <LED_Init+0x20>)
 800ba4c:	f7f9 ffca 	bl	80059e4 <HAL_TIM_PWM_Start>
}
 800ba50:	bf00      	nop
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	20000428 	.word	0x20000428

0800ba58 <LED_OS_Resources_Init>:

void LED_OS_Resources_Init()
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	af00      	add	r7, sp, #0
	xLEDQueue = xQueueCreate(4, sizeof(LEDMsgStruct));
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	210c      	movs	r1, #12
 800ba60:	2004      	movs	r0, #4
 800ba62:	f7fd f925 	bl	8008cb0 <xQueueGenericCreate>
 800ba66:	4603      	mov	r3, r0
 800ba68:	4a04      	ldr	r2, [pc, #16]	@ (800ba7c <LED_OS_Resources_Init+0x24>)
 800ba6a:	6013      	str	r3, [r2, #0]
	xLEDMutex = xSemaphoreCreateMutex();
 800ba6c:	2001      	movs	r0, #1
 800ba6e:	f7fd f999 	bl	8008da4 <xQueueCreateMutex>
 800ba72:	4603      	mov	r3, r0
 800ba74:	4a02      	ldr	r2, [pc, #8]	@ (800ba80 <LED_OS_Resources_Init+0x28>)
 800ba76:	6013      	str	r3, [r2, #0]
}
 800ba78:	bf00      	nop
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	20013648 	.word	0x20013648
 800ba80:	2001364c 	.word	0x2001364c

0800ba84 <setColor>:

void setColor(uint8_t r, uint8_t g, uint8_t b) {
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	71fb      	strb	r3, [r7, #7]
 800ba8e:	460b      	mov	r3, r1
 800ba90:	71bb      	strb	r3, [r7, #6]
 800ba92:	4613      	mov	r3, r2
 800ba94:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, r);
 800ba96:	4b09      	ldr	r3, [pc, #36]	@ (800babc <setColor+0x38>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	79fa      	ldrb	r2, [r7, #7]
 800ba9c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, g);
 800ba9e:	4b07      	ldr	r3, [pc, #28]	@ (800babc <setColor+0x38>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	79ba      	ldrb	r2, [r7, #6]
 800baa4:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, b);
 800baa6:	4b05      	ldr	r3, [pc, #20]	@ (800babc <setColor+0x38>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	797a      	ldrb	r2, [r7, #5]
 800baac:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800baae:	bf00      	nop
 800bab0:	370c      	adds	r7, #12
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	20000428 	.word	0x20000428

0800bac0 <LEDHandler>:

bool auto_mode = false;
void LEDHandler()
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
	LEDMsgStruct LEDMsg;
	while(1)
	{
		if (xQueueReceive(xLEDQueue, &LEDMsg, portMAX_DELAY) == pdPASS) {
 800bac6:	4b1d      	ldr	r3, [pc, #116]	@ (800bb3c <LEDHandler+0x7c>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	1d39      	adds	r1, r7, #4
 800bacc:	f04f 32ff 	mov.w	r2, #4294967295
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7fd fb1d 	bl	8009110 <xQueueReceive>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d129      	bne.n	800bb30 <LEDHandler+0x70>
			if(LEDMsg.r < 0 || LEDMsg.g < 0 || LEDMsg.b < 0) {
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	db05      	blt.n	800baee <LEDHandler+0x2e>
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	db02      	blt.n	800baee <LEDHandler+0x2e>
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2b00      	cmp	r3, #0
 800baec:	da03      	bge.n	800baf6 <LEDHandler+0x36>
				auto_mode = true;
 800baee:	4b14      	ldr	r3, [pc, #80]	@ (800bb40 <LEDHandler+0x80>)
 800baf0:	2201      	movs	r2, #1
 800baf2:	701a      	strb	r2, [r3, #0]
 800baf4:	e01c      	b.n	800bb30 <LEDHandler+0x70>
			}
			else {
				auto_mode = false;
 800baf6:	4b12      	ldr	r3, [pc, #72]	@ (800bb40 <LEDHandler+0x80>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	701a      	strb	r2, [r3, #0]
				if (xSemaphoreTake(xLEDMutex, portMAX_DELAY) == pdPASS) {
 800bafc:	4b11      	ldr	r3, [pc, #68]	@ (800bb44 <LEDHandler+0x84>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f04f 31ff 	mov.w	r1, #4294967295
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7fd fbe5 	bl	80092d4 <xQueueSemaphoreTake>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d10f      	bne.n	800bb30 <LEDHandler+0x70>
					setColor(LEDMsg.r, LEDMsg.g, LEDMsg.b);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	b2d1      	uxtb	r1, r2
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	b2d2      	uxtb	r2, r2
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7ff ffb1 	bl	800ba84 <setColor>
					xSemaphoreGive(xLEDMutex);
 800bb22:	4b08      	ldr	r3, [pc, #32]	@ (800bb44 <LEDHandler+0x84>)
 800bb24:	6818      	ldr	r0, [r3, #0]
 800bb26:	2300      	movs	r3, #0
 800bb28:	2200      	movs	r2, #0
 800bb2a:	2100      	movs	r1, #0
 800bb2c:	f7fd f952 	bl	8008dd4 <xQueueGenericSend>
				}

			}
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 800bb30:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bb34:	f7fd ffa4 	bl	8009a80 <vTaskDelay>
		if (xQueueReceive(xLEDQueue, &LEDMsg, portMAX_DELAY) == pdPASS) {
 800bb38:	e7c5      	b.n	800bac6 <LEDHandler+0x6>
 800bb3a:	bf00      	nop
 800bb3c:	20013648 	.word	0x20013648
 800bb40:	20013650 	.word	0x20013650
 800bb44:	2001364c 	.word	0x2001364c

0800bb48 <LEDTask>:
	}
}

void LEDTask()
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	af00      	add	r7, sp, #0
	setColor(100, 100, 100);
 800bb4c:	2264      	movs	r2, #100	@ 0x64
 800bb4e:	2164      	movs	r1, #100	@ 0x64
 800bb50:	2064      	movs	r0, #100	@ 0x64
 800bb52:	f7ff ff97 	bl	800ba84 <setColor>
	while(1)
	{
		if (xSemaphoreTake(xLEDMutex, portMAX_DELAY) == pdPASS) {
 800bb56:	4b29      	ldr	r3, [pc, #164]	@ (800bbfc <LEDTask+0xb4>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f04f 31ff 	mov.w	r1, #4294967295
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7fd fbb8 	bl	80092d4 <xQueueSemaphoreTake>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d142      	bne.n	800bbf0 <LEDTask+0xa8>
			if(auto_mode) {
 800bb6a:	4b25      	ldr	r3, [pc, #148]	@ (800bc00 <LEDTask+0xb8>)
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d037      	beq.n	800bbe2 <LEDTask+0x9a>
				setColor(255, 0, 0);     // 紅
 800bb72:	2200      	movs	r2, #0
 800bb74:	2100      	movs	r1, #0
 800bb76:	20ff      	movs	r0, #255	@ 0xff
 800bb78:	f7ff ff84 	bl	800ba84 <setColor>
				HAL_Delay(100);
 800bb7c:	2064      	movs	r0, #100	@ 0x64
 800bb7e:	f7f6 f8b1 	bl	8001ce4 <HAL_Delay>
				setColor(255, 165, 0);   // 橙
 800bb82:	2200      	movs	r2, #0
 800bb84:	21a5      	movs	r1, #165	@ 0xa5
 800bb86:	20ff      	movs	r0, #255	@ 0xff
 800bb88:	f7ff ff7c 	bl	800ba84 <setColor>
				HAL_Delay(100);
 800bb8c:	2064      	movs	r0, #100	@ 0x64
 800bb8e:	f7f6 f8a9 	bl	8001ce4 <HAL_Delay>
				setColor(255, 255, 0);   // 黃
 800bb92:	2200      	movs	r2, #0
 800bb94:	21ff      	movs	r1, #255	@ 0xff
 800bb96:	20ff      	movs	r0, #255	@ 0xff
 800bb98:	f7ff ff74 	bl	800ba84 <setColor>
				HAL_Delay(100);
 800bb9c:	2064      	movs	r0, #100	@ 0x64
 800bb9e:	f7f6 f8a1 	bl	8001ce4 <HAL_Delay>
				setColor(0, 255, 0);     // 綠
 800bba2:	2200      	movs	r2, #0
 800bba4:	21ff      	movs	r1, #255	@ 0xff
 800bba6:	2000      	movs	r0, #0
 800bba8:	f7ff ff6c 	bl	800ba84 <setColor>
				HAL_Delay(100);
 800bbac:	2064      	movs	r0, #100	@ 0x64
 800bbae:	f7f6 f899 	bl	8001ce4 <HAL_Delay>
				setColor(0, 127, 255);     // 藍
 800bbb2:	22ff      	movs	r2, #255	@ 0xff
 800bbb4:	217f      	movs	r1, #127	@ 0x7f
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	f7ff ff64 	bl	800ba84 <setColor>
				HAL_Delay(100);
 800bbbc:	2064      	movs	r0, #100	@ 0x64
 800bbbe:	f7f6 f891 	bl	8001ce4 <HAL_Delay>
				setColor(0, 0, 255);    // 靛
 800bbc2:	22ff      	movs	r2, #255	@ 0xff
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	f7ff ff5c 	bl	800ba84 <setColor>
				HAL_Delay(100);
 800bbcc:	2064      	movs	r0, #100	@ 0x64
 800bbce:	f7f6 f889 	bl	8001ce4 <HAL_Delay>
				setColor(50, 0, 255);   // 紫
 800bbd2:	22ff      	movs	r2, #255	@ 0xff
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	2032      	movs	r0, #50	@ 0x32
 800bbd8:	f7ff ff54 	bl	800ba84 <setColor>
				HAL_Delay(100);
 800bbdc:	2064      	movs	r0, #100	@ 0x64
 800bbde:	f7f6 f881 	bl	8001ce4 <HAL_Delay>
			}
			xSemaphoreGive(xLEDMutex);
 800bbe2:	4b06      	ldr	r3, [pc, #24]	@ (800bbfc <LEDTask+0xb4>)
 800bbe4:	6818      	ldr	r0, [r3, #0]
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	2200      	movs	r2, #0
 800bbea:	2100      	movs	r1, #0
 800bbec:	f7fd f8f2 	bl	8008dd4 <xQueueGenericSend>
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 800bbf0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bbf4:	f7fd ff44 	bl	8009a80 <vTaskDelay>
		if (xSemaphoreTake(xLEDMutex, portMAX_DELAY) == pdPASS) {
 800bbf8:	e7ad      	b.n	800bb56 <LEDTask+0xe>
 800bbfa:	bf00      	nop
 800bbfc:	2001364c 	.word	0x2001364c
 800bc00:	20013650 	.word	0x20013650

0800bc04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bc0e:	79fb      	ldrb	r3, [r7, #7]
 800bc10:	4a08      	ldr	r2, [pc, #32]	@ (800bc34 <disk_status+0x30>)
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	4413      	add	r3, r2
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	79fa      	ldrb	r2, [r7, #7]
 800bc1c:	4905      	ldr	r1, [pc, #20]	@ (800bc34 <disk_status+0x30>)
 800bc1e:	440a      	add	r2, r1
 800bc20:	7a12      	ldrb	r2, [r2, #8]
 800bc22:	4610      	mov	r0, r2
 800bc24:	4798      	blx	r3
 800bc26:	4603      	mov	r3, r0
 800bc28:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bc2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	2001367c 	.word	0x2001367c

0800bc38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	4603      	mov	r3, r0
 800bc40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bc46:	79fb      	ldrb	r3, [r7, #7]
 800bc48:	4a0e      	ldr	r2, [pc, #56]	@ (800bc84 <disk_initialize+0x4c>)
 800bc4a:	5cd3      	ldrb	r3, [r2, r3]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d114      	bne.n	800bc7a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bc50:	79fb      	ldrb	r3, [r7, #7]
 800bc52:	4a0c      	ldr	r2, [pc, #48]	@ (800bc84 <disk_initialize+0x4c>)
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	4413      	add	r3, r2
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	79fa      	ldrb	r2, [r7, #7]
 800bc5e:	4909      	ldr	r1, [pc, #36]	@ (800bc84 <disk_initialize+0x4c>)
 800bc60:	440a      	add	r2, r1
 800bc62:	7a12      	ldrb	r2, [r2, #8]
 800bc64:	4610      	mov	r0, r2
 800bc66:	4798      	blx	r3
 800bc68:	4603      	mov	r3, r0
 800bc6a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800bc6c:	7bfb      	ldrb	r3, [r7, #15]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d103      	bne.n	800bc7a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800bc72:	79fb      	ldrb	r3, [r7, #7]
 800bc74:	4a03      	ldr	r2, [pc, #12]	@ (800bc84 <disk_initialize+0x4c>)
 800bc76:	2101      	movs	r1, #1
 800bc78:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800bc7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	2001367c 	.word	0x2001367c

0800bc88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bc88:	b590      	push	{r4, r7, lr}
 800bc8a:	b087      	sub	sp, #28
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60b9      	str	r1, [r7, #8]
 800bc90:	607a      	str	r2, [r7, #4]
 800bc92:	603b      	str	r3, [r7, #0]
 800bc94:	4603      	mov	r3, r0
 800bc96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
 800bc9a:	4a0a      	ldr	r2, [pc, #40]	@ (800bcc4 <disk_read+0x3c>)
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	4413      	add	r3, r2
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	689c      	ldr	r4, [r3, #8]
 800bca4:	7bfb      	ldrb	r3, [r7, #15]
 800bca6:	4a07      	ldr	r2, [pc, #28]	@ (800bcc4 <disk_read+0x3c>)
 800bca8:	4413      	add	r3, r2
 800bcaa:	7a18      	ldrb	r0, [r3, #8]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	68b9      	ldr	r1, [r7, #8]
 800bcb2:	47a0      	blx	r4
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	75fb      	strb	r3, [r7, #23]
  return res;
 800bcb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	371c      	adds	r7, #28
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd90      	pop	{r4, r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	2001367c 	.word	0x2001367c

0800bcc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bcc8:	b590      	push	{r4, r7, lr}
 800bcca:	b087      	sub	sp, #28
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60b9      	str	r1, [r7, #8]
 800bcd0:	607a      	str	r2, [r7, #4]
 800bcd2:	603b      	str	r3, [r7, #0]
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bcd8:	7bfb      	ldrb	r3, [r7, #15]
 800bcda:	4a0a      	ldr	r2, [pc, #40]	@ (800bd04 <disk_write+0x3c>)
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4413      	add	r3, r2
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	68dc      	ldr	r4, [r3, #12]
 800bce4:	7bfb      	ldrb	r3, [r7, #15]
 800bce6:	4a07      	ldr	r2, [pc, #28]	@ (800bd04 <disk_write+0x3c>)
 800bce8:	4413      	add	r3, r2
 800bcea:	7a18      	ldrb	r0, [r3, #8]
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	68b9      	ldr	r1, [r7, #8]
 800bcf2:	47a0      	blx	r4
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	75fb      	strb	r3, [r7, #23]
  return res;
 800bcf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	371c      	adds	r7, #28
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd90      	pop	{r4, r7, pc}
 800bd02:	bf00      	nop
 800bd04:	2001367c 	.word	0x2001367c

0800bd08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	4603      	mov	r3, r0
 800bd10:	603a      	str	r2, [r7, #0]
 800bd12:	71fb      	strb	r3, [r7, #7]
 800bd14:	460b      	mov	r3, r1
 800bd16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bd18:	79fb      	ldrb	r3, [r7, #7]
 800bd1a:	4a09      	ldr	r2, [pc, #36]	@ (800bd40 <disk_ioctl+0x38>)
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4413      	add	r3, r2
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	79fa      	ldrb	r2, [r7, #7]
 800bd26:	4906      	ldr	r1, [pc, #24]	@ (800bd40 <disk_ioctl+0x38>)
 800bd28:	440a      	add	r2, r1
 800bd2a:	7a10      	ldrb	r0, [r2, #8]
 800bd2c:	79b9      	ldrb	r1, [r7, #6]
 800bd2e:	683a      	ldr	r2, [r7, #0]
 800bd30:	4798      	blx	r3
 800bd32:	4603      	mov	r3, r0
 800bd34:	73fb      	strb	r3, [r7, #15]
  return res;
 800bd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3710      	adds	r7, #16
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	2001367c 	.word	0x2001367c

0800bd44 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bd44:	b480      	push	{r7}
 800bd46:	b085      	sub	sp, #20
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bd54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bd58:	021b      	lsls	r3, r3, #8
 800bd5a:	b21a      	sxth	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	b21b      	sxth	r3, r3
 800bd62:	4313      	orrs	r3, r2
 800bd64:	b21b      	sxth	r3, r3
 800bd66:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bd68:	89fb      	ldrh	r3, [r7, #14]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3714      	adds	r7, #20
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr

0800bd76 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bd76:	b480      	push	{r7}
 800bd78:	b085      	sub	sp, #20
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	3303      	adds	r3, #3
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	021b      	lsls	r3, r3, #8
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	3202      	adds	r2, #2
 800bd8e:	7812      	ldrb	r2, [r2, #0]
 800bd90:	4313      	orrs	r3, r2
 800bd92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	021b      	lsls	r3, r3, #8
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	3201      	adds	r2, #1
 800bd9c:	7812      	ldrb	r2, [r2, #0]
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	021b      	lsls	r3, r3, #8
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	7812      	ldrb	r2, [r2, #0]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	60fb      	str	r3, [r7, #12]
	return rv;
 800bdae:	68fb      	ldr	r3, [r7, #12]
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3714      	adds	r7, #20
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	1c5a      	adds	r2, r3, #1
 800bdcc:	607a      	str	r2, [r7, #4]
 800bdce:	887a      	ldrh	r2, [r7, #2]
 800bdd0:	b2d2      	uxtb	r2, r2
 800bdd2:	701a      	strb	r2, [r3, #0]
 800bdd4:	887b      	ldrh	r3, [r7, #2]
 800bdd6:	0a1b      	lsrs	r3, r3, #8
 800bdd8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	1c5a      	adds	r2, r3, #1
 800bdde:	607a      	str	r2, [r7, #4]
 800bde0:	887a      	ldrh	r2, [r7, #2]
 800bde2:	b2d2      	uxtb	r2, r2
 800bde4:	701a      	strb	r2, [r3, #0]
}
 800bde6:	bf00      	nop
 800bde8:	370c      	adds	r7, #12
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr

0800bdf2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bdf2:	b480      	push	{r7}
 800bdf4:	b083      	sub	sp, #12
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
 800bdfa:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	1c5a      	adds	r2, r3, #1
 800be00:	607a      	str	r2, [r7, #4]
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	b2d2      	uxtb	r2, r2
 800be06:	701a      	strb	r2, [r3, #0]
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	0a1b      	lsrs	r3, r3, #8
 800be0c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	1c5a      	adds	r2, r3, #1
 800be12:	607a      	str	r2, [r7, #4]
 800be14:	683a      	ldr	r2, [r7, #0]
 800be16:	b2d2      	uxtb	r2, r2
 800be18:	701a      	strb	r2, [r3, #0]
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	0a1b      	lsrs	r3, r3, #8
 800be1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	1c5a      	adds	r2, r3, #1
 800be24:	607a      	str	r2, [r7, #4]
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	b2d2      	uxtb	r2, r2
 800be2a:	701a      	strb	r2, [r3, #0]
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	0a1b      	lsrs	r3, r3, #8
 800be30:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	1c5a      	adds	r2, r3, #1
 800be36:	607a      	str	r2, [r7, #4]
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	b2d2      	uxtb	r2, r2
 800be3c:	701a      	strb	r2, [r3, #0]
}
 800be3e:	bf00      	nop
 800be40:	370c      	adds	r7, #12
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr

0800be4a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800be4a:	b480      	push	{r7}
 800be4c:	b087      	sub	sp, #28
 800be4e:	af00      	add	r7, sp, #0
 800be50:	60f8      	str	r0, [r7, #12]
 800be52:	60b9      	str	r1, [r7, #8]
 800be54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d00d      	beq.n	800be80 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800be64:	693a      	ldr	r2, [r7, #16]
 800be66:	1c53      	adds	r3, r2, #1
 800be68:	613b      	str	r3, [r7, #16]
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	1c59      	adds	r1, r3, #1
 800be6e:	6179      	str	r1, [r7, #20]
 800be70:	7812      	ldrb	r2, [r2, #0]
 800be72:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	3b01      	subs	r3, #1
 800be78:	607b      	str	r3, [r7, #4]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1f1      	bne.n	800be64 <mem_cpy+0x1a>
	}
}
 800be80:	bf00      	nop
 800be82:	371c      	adds	r7, #28
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr

0800be8c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800be8c:	b480      	push	{r7}
 800be8e:	b087      	sub	sp, #28
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	1c5a      	adds	r2, r3, #1
 800bea0:	617a      	str	r2, [r7, #20]
 800bea2:	68ba      	ldr	r2, [r7, #8]
 800bea4:	b2d2      	uxtb	r2, r2
 800bea6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	3b01      	subs	r3, #1
 800beac:	607b      	str	r3, [r7, #4]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1f3      	bne.n	800be9c <mem_set+0x10>
}
 800beb4:	bf00      	nop
 800beb6:	bf00      	nop
 800beb8:	371c      	adds	r7, #28
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr

0800bec2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bec2:	b480      	push	{r7}
 800bec4:	b089      	sub	sp, #36	@ 0x24
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	60f8      	str	r0, [r7, #12]
 800beca:	60b9      	str	r1, [r7, #8]
 800becc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	61fb      	str	r3, [r7, #28]
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	1c5a      	adds	r2, r3, #1
 800bede:	61fa      	str	r2, [r7, #28]
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	4619      	mov	r1, r3
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	1c5a      	adds	r2, r3, #1
 800bee8:	61ba      	str	r2, [r7, #24]
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	1acb      	subs	r3, r1, r3
 800beee:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	3b01      	subs	r3, #1
 800bef4:	607b      	str	r3, [r7, #4]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d002      	beq.n	800bf02 <mem_cmp+0x40>
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d0eb      	beq.n	800beda <mem_cmp+0x18>

	return r;
 800bf02:	697b      	ldr	r3, [r7, #20]
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3724      	adds	r7, #36	@ 0x24
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bf1a:	e002      	b.n	800bf22 <chk_chr+0x12>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	607b      	str	r3, [r7, #4]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d005      	beq.n	800bf36 <chk_chr+0x26>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d1f2      	bne.n	800bf1c <chk_chr+0xc>
	return *str;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	781b      	ldrb	r3, [r3, #0]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	370c      	adds	r7, #12
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
	...

0800bf48 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bf52:	2300      	movs	r3, #0
 800bf54:	60bb      	str	r3, [r7, #8]
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	60fb      	str	r3, [r7, #12]
 800bf5a:	e029      	b.n	800bfb0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bf5c:	4a27      	ldr	r2, [pc, #156]	@ (800bffc <chk_lock+0xb4>)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	011b      	lsls	r3, r3, #4
 800bf62:	4413      	add	r3, r2
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d01d      	beq.n	800bfa6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bf6a:	4a24      	ldr	r2, [pc, #144]	@ (800bffc <chk_lock+0xb4>)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	011b      	lsls	r3, r3, #4
 800bf70:	4413      	add	r3, r2
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d116      	bne.n	800bfaa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bf7c:	4a1f      	ldr	r2, [pc, #124]	@ (800bffc <chk_lock+0xb4>)
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	011b      	lsls	r3, r3, #4
 800bf82:	4413      	add	r3, r2
 800bf84:	3304      	adds	r3, #4
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d10c      	bne.n	800bfaa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bf90:	4a1a      	ldr	r2, [pc, #104]	@ (800bffc <chk_lock+0xb4>)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	011b      	lsls	r3, r3, #4
 800bf96:	4413      	add	r3, r2
 800bf98:	3308      	adds	r3, #8
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d102      	bne.n	800bfaa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bfa4:	e007      	b.n	800bfb6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	3301      	adds	r3, #1
 800bfae:	60fb      	str	r3, [r7, #12]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d9d2      	bls.n	800bf5c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2b02      	cmp	r3, #2
 800bfba:	d109      	bne.n	800bfd0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d102      	bne.n	800bfc8 <chk_lock+0x80>
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	2b02      	cmp	r3, #2
 800bfc6:	d101      	bne.n	800bfcc <chk_lock+0x84>
 800bfc8:	2300      	movs	r3, #0
 800bfca:	e010      	b.n	800bfee <chk_lock+0xa6>
 800bfcc:	2312      	movs	r3, #18
 800bfce:	e00e      	b.n	800bfee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d108      	bne.n	800bfe8 <chk_lock+0xa0>
 800bfd6:	4a09      	ldr	r2, [pc, #36]	@ (800bffc <chk_lock+0xb4>)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	011b      	lsls	r3, r3, #4
 800bfdc:	4413      	add	r3, r2
 800bfde:	330c      	adds	r3, #12
 800bfe0:	881b      	ldrh	r3, [r3, #0]
 800bfe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfe6:	d101      	bne.n	800bfec <chk_lock+0xa4>
 800bfe8:	2310      	movs	r3, #16
 800bfea:	e000      	b.n	800bfee <chk_lock+0xa6>
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3714      	adds	r7, #20
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	2001365c 	.word	0x2001365c

0800c000 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c006:	2300      	movs	r3, #0
 800c008:	607b      	str	r3, [r7, #4]
 800c00a:	e002      	b.n	800c012 <enq_lock+0x12>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	3301      	adds	r3, #1
 800c010:	607b      	str	r3, [r7, #4]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2b01      	cmp	r3, #1
 800c016:	d806      	bhi.n	800c026 <enq_lock+0x26>
 800c018:	4a09      	ldr	r2, [pc, #36]	@ (800c040 <enq_lock+0x40>)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	011b      	lsls	r3, r3, #4
 800c01e:	4413      	add	r3, r2
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1f2      	bne.n	800c00c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2b02      	cmp	r3, #2
 800c02a:	bf14      	ite	ne
 800c02c:	2301      	movne	r3, #1
 800c02e:	2300      	moveq	r3, #0
 800c030:	b2db      	uxtb	r3, r3
}
 800c032:	4618      	mov	r0, r3
 800c034:	370c      	adds	r7, #12
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	2001365c 	.word	0x2001365c

0800c044 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c044:	b480      	push	{r7}
 800c046:	b085      	sub	sp, #20
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c04e:	2300      	movs	r3, #0
 800c050:	60fb      	str	r3, [r7, #12]
 800c052:	e01f      	b.n	800c094 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c054:	4a41      	ldr	r2, [pc, #260]	@ (800c15c <inc_lock+0x118>)
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	011b      	lsls	r3, r3, #4
 800c05a:	4413      	add	r3, r2
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	429a      	cmp	r2, r3
 800c064:	d113      	bne.n	800c08e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c066:	4a3d      	ldr	r2, [pc, #244]	@ (800c15c <inc_lock+0x118>)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	011b      	lsls	r3, r3, #4
 800c06c:	4413      	add	r3, r2
 800c06e:	3304      	adds	r3, #4
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c076:	429a      	cmp	r2, r3
 800c078:	d109      	bne.n	800c08e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c07a:	4a38      	ldr	r2, [pc, #224]	@ (800c15c <inc_lock+0x118>)
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	011b      	lsls	r3, r3, #4
 800c080:	4413      	add	r3, r2
 800c082:	3308      	adds	r3, #8
 800c084:	681a      	ldr	r2, [r3, #0]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d006      	beq.n	800c09c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	3301      	adds	r3, #1
 800c092:	60fb      	str	r3, [r7, #12]
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2b01      	cmp	r3, #1
 800c098:	d9dc      	bls.n	800c054 <inc_lock+0x10>
 800c09a:	e000      	b.n	800c09e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c09c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2b02      	cmp	r3, #2
 800c0a2:	d132      	bne.n	800c10a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	60fb      	str	r3, [r7, #12]
 800c0a8:	e002      	b.n	800c0b0 <inc_lock+0x6c>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	60fb      	str	r3, [r7, #12]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d806      	bhi.n	800c0c4 <inc_lock+0x80>
 800c0b6:	4a29      	ldr	r2, [pc, #164]	@ (800c15c <inc_lock+0x118>)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	011b      	lsls	r3, r3, #4
 800c0bc:	4413      	add	r3, r2
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d1f2      	bne.n	800c0aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d101      	bne.n	800c0ce <inc_lock+0x8a>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	e040      	b.n	800c150 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	4922      	ldr	r1, [pc, #136]	@ (800c15c <inc_lock+0x118>)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	011b      	lsls	r3, r3, #4
 800c0d8:	440b      	add	r3, r1
 800c0da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	689a      	ldr	r2, [r3, #8]
 800c0e0:	491e      	ldr	r1, [pc, #120]	@ (800c15c <inc_lock+0x118>)
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	011b      	lsls	r3, r3, #4
 800c0e6:	440b      	add	r3, r1
 800c0e8:	3304      	adds	r3, #4
 800c0ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	695a      	ldr	r2, [r3, #20]
 800c0f0:	491a      	ldr	r1, [pc, #104]	@ (800c15c <inc_lock+0x118>)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	011b      	lsls	r3, r3, #4
 800c0f6:	440b      	add	r3, r1
 800c0f8:	3308      	adds	r3, #8
 800c0fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c0fc:	4a17      	ldr	r2, [pc, #92]	@ (800c15c <inc_lock+0x118>)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	011b      	lsls	r3, r3, #4
 800c102:	4413      	add	r3, r2
 800c104:	330c      	adds	r3, #12
 800c106:	2200      	movs	r2, #0
 800c108:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d009      	beq.n	800c124 <inc_lock+0xe0>
 800c110:	4a12      	ldr	r2, [pc, #72]	@ (800c15c <inc_lock+0x118>)
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	011b      	lsls	r3, r3, #4
 800c116:	4413      	add	r3, r2
 800c118:	330c      	adds	r3, #12
 800c11a:	881b      	ldrh	r3, [r3, #0]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d001      	beq.n	800c124 <inc_lock+0xe0>
 800c120:	2300      	movs	r3, #0
 800c122:	e015      	b.n	800c150 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d108      	bne.n	800c13c <inc_lock+0xf8>
 800c12a:	4a0c      	ldr	r2, [pc, #48]	@ (800c15c <inc_lock+0x118>)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	011b      	lsls	r3, r3, #4
 800c130:	4413      	add	r3, r2
 800c132:	330c      	adds	r3, #12
 800c134:	881b      	ldrh	r3, [r3, #0]
 800c136:	3301      	adds	r3, #1
 800c138:	b29a      	uxth	r2, r3
 800c13a:	e001      	b.n	800c140 <inc_lock+0xfc>
 800c13c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c140:	4906      	ldr	r1, [pc, #24]	@ (800c15c <inc_lock+0x118>)
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	011b      	lsls	r3, r3, #4
 800c146:	440b      	add	r3, r1
 800c148:	330c      	adds	r3, #12
 800c14a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	3301      	adds	r3, #1
}
 800c150:	4618      	mov	r0, r3
 800c152:	3714      	adds	r7, #20
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr
 800c15c:	2001365c 	.word	0x2001365c

0800c160 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c160:	b480      	push	{r7}
 800c162:	b085      	sub	sp, #20
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	3b01      	subs	r3, #1
 800c16c:	607b      	str	r3, [r7, #4]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2b01      	cmp	r3, #1
 800c172:	d825      	bhi.n	800c1c0 <dec_lock+0x60>
		n = Files[i].ctr;
 800c174:	4a17      	ldr	r2, [pc, #92]	@ (800c1d4 <dec_lock+0x74>)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	011b      	lsls	r3, r3, #4
 800c17a:	4413      	add	r3, r2
 800c17c:	330c      	adds	r3, #12
 800c17e:	881b      	ldrh	r3, [r3, #0]
 800c180:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c182:	89fb      	ldrh	r3, [r7, #14]
 800c184:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c188:	d101      	bne.n	800c18e <dec_lock+0x2e>
 800c18a:	2300      	movs	r3, #0
 800c18c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c18e:	89fb      	ldrh	r3, [r7, #14]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d002      	beq.n	800c19a <dec_lock+0x3a>
 800c194:	89fb      	ldrh	r3, [r7, #14]
 800c196:	3b01      	subs	r3, #1
 800c198:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c19a:	4a0e      	ldr	r2, [pc, #56]	@ (800c1d4 <dec_lock+0x74>)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	011b      	lsls	r3, r3, #4
 800c1a0:	4413      	add	r3, r2
 800c1a2:	330c      	adds	r3, #12
 800c1a4:	89fa      	ldrh	r2, [r7, #14]
 800c1a6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c1a8:	89fb      	ldrh	r3, [r7, #14]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d105      	bne.n	800c1ba <dec_lock+0x5a>
 800c1ae:	4a09      	ldr	r2, [pc, #36]	@ (800c1d4 <dec_lock+0x74>)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	011b      	lsls	r3, r3, #4
 800c1b4:	4413      	add	r3, r2
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	737b      	strb	r3, [r7, #13]
 800c1be:	e001      	b.n	800c1c4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c1c0:	2302      	movs	r3, #2
 800c1c2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c1c4:	7b7b      	ldrb	r3, [r7, #13]
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3714      	adds	r7, #20
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	2001365c 	.word	0x2001365c

0800c1d8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	60fb      	str	r3, [r7, #12]
 800c1e4:	e010      	b.n	800c208 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c1e6:	4a0d      	ldr	r2, [pc, #52]	@ (800c21c <clear_lock+0x44>)
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	011b      	lsls	r3, r3, #4
 800c1ec:	4413      	add	r3, r2
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d105      	bne.n	800c202 <clear_lock+0x2a>
 800c1f6:	4a09      	ldr	r2, [pc, #36]	@ (800c21c <clear_lock+0x44>)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	011b      	lsls	r3, r3, #4
 800c1fc:	4413      	add	r3, r2
 800c1fe:	2200      	movs	r2, #0
 800c200:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	3301      	adds	r3, #1
 800c206:	60fb      	str	r3, [r7, #12]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d9eb      	bls.n	800c1e6 <clear_lock+0xe>
	}
}
 800c20e:	bf00      	nop
 800c210:	bf00      	nop
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	2001365c 	.word	0x2001365c

0800c220 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b086      	sub	sp, #24
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c228:	2300      	movs	r3, #0
 800c22a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	78db      	ldrb	r3, [r3, #3]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d034      	beq.n	800c29e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c238:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	7858      	ldrb	r0, [r3, #1]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c244:	2301      	movs	r3, #1
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	f7ff fd3e 	bl	800bcc8 <disk_write>
 800c24c:	4603      	mov	r3, r0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d002      	beq.n	800c258 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c252:	2301      	movs	r3, #1
 800c254:	73fb      	strb	r3, [r7, #15]
 800c256:	e022      	b.n	800c29e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a1b      	ldr	r3, [r3, #32]
 800c262:	697a      	ldr	r2, [r7, #20]
 800c264:	1ad2      	subs	r2, r2, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d217      	bcs.n	800c29e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	789b      	ldrb	r3, [r3, #2]
 800c272:	613b      	str	r3, [r7, #16]
 800c274:	e010      	b.n	800c298 <sync_window+0x78>
					wsect += fs->fsize;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	699b      	ldr	r3, [r3, #24]
 800c27a:	697a      	ldr	r2, [r7, #20]
 800c27c:	4413      	add	r3, r2
 800c27e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	7858      	ldrb	r0, [r3, #1]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c28a:	2301      	movs	r3, #1
 800c28c:	697a      	ldr	r2, [r7, #20]
 800c28e:	f7ff fd1b 	bl	800bcc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	3b01      	subs	r3, #1
 800c296:	613b      	str	r3, [r7, #16]
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d8eb      	bhi.n	800c276 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3718      	adds	r7, #24
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ba:	683a      	ldr	r2, [r7, #0]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d01b      	beq.n	800c2f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f7ff ffad 	bl	800c220 <sync_window>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c2ca:	7bfb      	ldrb	r3, [r7, #15]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d113      	bne.n	800c2f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	7858      	ldrb	r0, [r3, #1]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c2da:	2301      	movs	r3, #1
 800c2dc:	683a      	ldr	r2, [r7, #0]
 800c2de:	f7ff fcd3 	bl	800bc88 <disk_read>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d004      	beq.n	800c2f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	683a      	ldr	r2, [r7, #0]
 800c2f6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
	...

0800c304 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f7ff ff87 	bl	800c220 <sync_window>
 800c312:	4603      	mov	r3, r0
 800c314:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c316:	7bfb      	ldrb	r3, [r7, #15]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d158      	bne.n	800c3ce <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	2b03      	cmp	r3, #3
 800c322:	d148      	bne.n	800c3b6 <sync_fs+0xb2>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	791b      	ldrb	r3, [r3, #4]
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d144      	bne.n	800c3b6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	3330      	adds	r3, #48	@ 0x30
 800c330:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c334:	2100      	movs	r1, #0
 800c336:	4618      	mov	r0, r3
 800c338:	f7ff fda8 	bl	800be8c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	3330      	adds	r3, #48	@ 0x30
 800c340:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c344:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c348:	4618      	mov	r0, r3
 800c34a:	f7ff fd37 	bl	800bdbc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	3330      	adds	r3, #48	@ 0x30
 800c352:	4921      	ldr	r1, [pc, #132]	@ (800c3d8 <sync_fs+0xd4>)
 800c354:	4618      	mov	r0, r3
 800c356:	f7ff fd4c 	bl	800bdf2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	3330      	adds	r3, #48	@ 0x30
 800c35e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c362:	491e      	ldr	r1, [pc, #120]	@ (800c3dc <sync_fs+0xd8>)
 800c364:	4618      	mov	r0, r3
 800c366:	f7ff fd44 	bl	800bdf2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	3330      	adds	r3, #48	@ 0x30
 800c36e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	4619      	mov	r1, r3
 800c378:	4610      	mov	r0, r2
 800c37a:	f7ff fd3a 	bl	800bdf2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	3330      	adds	r3, #48	@ 0x30
 800c382:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	4619      	mov	r1, r3
 800c38c:	4610      	mov	r0, r2
 800c38e:	f7ff fd30 	bl	800bdf2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	69db      	ldr	r3, [r3, #28]
 800c396:	1c5a      	adds	r2, r3, #1
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	7858      	ldrb	r0, [r3, #1]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	f7ff fc8c 	bl	800bcc8 <disk_write>
			fs->fsi_flag = 0;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	785b      	ldrb	r3, [r3, #1]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	2100      	movs	r1, #0
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7ff fca2 	bl	800bd08 <disk_ioctl>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d001      	beq.n	800c3ce <sync_fs+0xca>
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	41615252 	.word	0x41615252
 800c3dc:	61417272 	.word	0x61417272

0800c3e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	3b02      	subs	r3, #2
 800c3ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	695b      	ldr	r3, [r3, #20]
 800c3f4:	3b02      	subs	r3, #2
 800c3f6:	683a      	ldr	r2, [r7, #0]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d301      	bcc.n	800c400 <clust2sect+0x20>
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	e008      	b.n	800c412 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	895b      	ldrh	r3, [r3, #10]
 800c404:	461a      	mov	r2, r3
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	fb03 f202 	mul.w	r2, r3, r2
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c410:	4413      	add	r3, r2
}
 800c412:	4618      	mov	r0, r3
 800c414:	370c      	adds	r7, #12
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr

0800c41e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b086      	sub	sp, #24
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
 800c426:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	2b01      	cmp	r3, #1
 800c432:	d904      	bls.n	800c43e <get_fat+0x20>
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	695b      	ldr	r3, [r3, #20]
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d302      	bcc.n	800c444 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c43e:	2301      	movs	r3, #1
 800c440:	617b      	str	r3, [r7, #20]
 800c442:	e08e      	b.n	800c562 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c444:	f04f 33ff 	mov.w	r3, #4294967295
 800c448:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	2b03      	cmp	r3, #3
 800c450:	d061      	beq.n	800c516 <get_fat+0xf8>
 800c452:	2b03      	cmp	r3, #3
 800c454:	dc7b      	bgt.n	800c54e <get_fat+0x130>
 800c456:	2b01      	cmp	r3, #1
 800c458:	d002      	beq.n	800c460 <get_fat+0x42>
 800c45a:	2b02      	cmp	r3, #2
 800c45c:	d041      	beq.n	800c4e2 <get_fat+0xc4>
 800c45e:	e076      	b.n	800c54e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	60fb      	str	r3, [r7, #12]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	085b      	lsrs	r3, r3, #1
 800c468:	68fa      	ldr	r2, [r7, #12]
 800c46a:	4413      	add	r3, r2
 800c46c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	6a1a      	ldr	r2, [r3, #32]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	0a5b      	lsrs	r3, r3, #9
 800c476:	4413      	add	r3, r2
 800c478:	4619      	mov	r1, r3
 800c47a:	6938      	ldr	r0, [r7, #16]
 800c47c:	f7ff ff14 	bl	800c2a8 <move_window>
 800c480:	4603      	mov	r3, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	d166      	bne.n	800c554 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	1c5a      	adds	r2, r3, #1
 800c48a:	60fa      	str	r2, [r7, #12]
 800c48c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c490:	693a      	ldr	r2, [r7, #16]
 800c492:	4413      	add	r3, r2
 800c494:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c498:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	6a1a      	ldr	r2, [r3, #32]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	0a5b      	lsrs	r3, r3, #9
 800c4a2:	4413      	add	r3, r2
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	6938      	ldr	r0, [r7, #16]
 800c4a8:	f7ff fefe 	bl	800c2a8 <move_window>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d152      	bne.n	800c558 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4b8:	693a      	ldr	r2, [r7, #16]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c4c0:	021b      	lsls	r3, r3, #8
 800c4c2:	68ba      	ldr	r2, [r7, #8]
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	f003 0301 	and.w	r3, r3, #1
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d002      	beq.n	800c4d8 <get_fat+0xba>
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	091b      	lsrs	r3, r3, #4
 800c4d6:	e002      	b.n	800c4de <get_fat+0xc0>
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c4de:	617b      	str	r3, [r7, #20]
			break;
 800c4e0:	e03f      	b.n	800c562 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	6a1a      	ldr	r2, [r3, #32]
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	0a1b      	lsrs	r3, r3, #8
 800c4ea:	4413      	add	r3, r2
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	6938      	ldr	r0, [r7, #16]
 800c4f0:	f7ff feda 	bl	800c2a8 <move_window>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d130      	bne.n	800c55c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	005b      	lsls	r3, r3, #1
 800c504:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c508:	4413      	add	r3, r2
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7ff fc1a 	bl	800bd44 <ld_word>
 800c510:	4603      	mov	r3, r0
 800c512:	617b      	str	r3, [r7, #20]
			break;
 800c514:	e025      	b.n	800c562 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	6a1a      	ldr	r2, [r3, #32]
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	09db      	lsrs	r3, r3, #7
 800c51e:	4413      	add	r3, r2
 800c520:	4619      	mov	r1, r3
 800c522:	6938      	ldr	r0, [r7, #16]
 800c524:	f7ff fec0 	bl	800c2a8 <move_window>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d118      	bne.n	800c560 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c53c:	4413      	add	r3, r2
 800c53e:	4618      	mov	r0, r3
 800c540:	f7ff fc19 	bl	800bd76 <ld_dword>
 800c544:	4603      	mov	r3, r0
 800c546:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c54a:	617b      	str	r3, [r7, #20]
			break;
 800c54c:	e009      	b.n	800c562 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c54e:	2301      	movs	r3, #1
 800c550:	617b      	str	r3, [r7, #20]
 800c552:	e006      	b.n	800c562 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c554:	bf00      	nop
 800c556:	e004      	b.n	800c562 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c558:	bf00      	nop
 800c55a:	e002      	b.n	800c562 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c55c:	bf00      	nop
 800c55e:	e000      	b.n	800c562 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c560:	bf00      	nop
		}
	}

	return val;
 800c562:	697b      	ldr	r3, [r7, #20]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3718      	adds	r7, #24
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c56c:	b590      	push	{r4, r7, lr}
 800c56e:	b089      	sub	sp, #36	@ 0x24
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c578:	2302      	movs	r3, #2
 800c57a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	2b01      	cmp	r3, #1
 800c580:	f240 80d9 	bls.w	800c736 <put_fat+0x1ca>
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	695b      	ldr	r3, [r3, #20]
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	f080 80d3 	bcs.w	800c736 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	2b03      	cmp	r3, #3
 800c596:	f000 8096 	beq.w	800c6c6 <put_fat+0x15a>
 800c59a:	2b03      	cmp	r3, #3
 800c59c:	f300 80cb 	bgt.w	800c736 <put_fat+0x1ca>
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d002      	beq.n	800c5aa <put_fat+0x3e>
 800c5a4:	2b02      	cmp	r3, #2
 800c5a6:	d06e      	beq.n	800c686 <put_fat+0x11a>
 800c5a8:	e0c5      	b.n	800c736 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	61bb      	str	r3, [r7, #24]
 800c5ae:	69bb      	ldr	r3, [r7, #24]
 800c5b0:	085b      	lsrs	r3, r3, #1
 800c5b2:	69ba      	ldr	r2, [r7, #24]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	6a1a      	ldr	r2, [r3, #32]
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	0a5b      	lsrs	r3, r3, #9
 800c5c0:	4413      	add	r3, r2
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f7ff fe6f 	bl	800c2a8 <move_window>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c5ce:	7ffb      	ldrb	r3, [r7, #31]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f040 80a9 	bne.w	800c728 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	1c59      	adds	r1, r3, #1
 800c5e0:	61b9      	str	r1, [r7, #24]
 800c5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5e6:	4413      	add	r3, r2
 800c5e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	f003 0301 	and.w	r3, r3, #1
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00d      	beq.n	800c610 <put_fat+0xa4>
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	b25b      	sxtb	r3, r3
 800c5fa:	f003 030f 	and.w	r3, r3, #15
 800c5fe:	b25a      	sxtb	r2, r3
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	b25b      	sxtb	r3, r3
 800c604:	011b      	lsls	r3, r3, #4
 800c606:	b25b      	sxtb	r3, r3
 800c608:	4313      	orrs	r3, r2
 800c60a:	b25b      	sxtb	r3, r3
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	e001      	b.n	800c614 <put_fat+0xa8>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	b2db      	uxtb	r3, r3
 800c614:	697a      	ldr	r2, [r7, #20]
 800c616:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2201      	movs	r2, #1
 800c61c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6a1a      	ldr	r2, [r3, #32]
 800c622:	69bb      	ldr	r3, [r7, #24]
 800c624:	0a5b      	lsrs	r3, r3, #9
 800c626:	4413      	add	r3, r2
 800c628:	4619      	mov	r1, r3
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	f7ff fe3c 	bl	800c2a8 <move_window>
 800c630:	4603      	mov	r3, r0
 800c632:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c634:	7ffb      	ldrb	r3, [r7, #31]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d178      	bne.n	800c72c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c646:	4413      	add	r3, r2
 800c648:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	f003 0301 	and.w	r3, r3, #1
 800c650:	2b00      	cmp	r3, #0
 800c652:	d003      	beq.n	800c65c <put_fat+0xf0>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	091b      	lsrs	r3, r3, #4
 800c658:	b2db      	uxtb	r3, r3
 800c65a:	e00e      	b.n	800c67a <put_fat+0x10e>
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	b25b      	sxtb	r3, r3
 800c662:	f023 030f 	bic.w	r3, r3, #15
 800c666:	b25a      	sxtb	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	0a1b      	lsrs	r3, r3, #8
 800c66c:	b25b      	sxtb	r3, r3
 800c66e:	f003 030f 	and.w	r3, r3, #15
 800c672:	b25b      	sxtb	r3, r3
 800c674:	4313      	orrs	r3, r2
 800c676:	b25b      	sxtb	r3, r3
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	697a      	ldr	r2, [r7, #20]
 800c67c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2201      	movs	r2, #1
 800c682:	70da      	strb	r2, [r3, #3]
			break;
 800c684:	e057      	b.n	800c736 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	6a1a      	ldr	r2, [r3, #32]
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	0a1b      	lsrs	r3, r3, #8
 800c68e:	4413      	add	r3, r2
 800c690:	4619      	mov	r1, r3
 800c692:	68f8      	ldr	r0, [r7, #12]
 800c694:	f7ff fe08 	bl	800c2a8 <move_window>
 800c698:	4603      	mov	r3, r0
 800c69a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c69c:	7ffb      	ldrb	r3, [r7, #31]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d146      	bne.n	800c730 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	005b      	lsls	r3, r3, #1
 800c6ac:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c6b0:	4413      	add	r3, r2
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	b292      	uxth	r2, r2
 800c6b6:	4611      	mov	r1, r2
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7ff fb7f 	bl	800bdbc <st_word>
			fs->wflag = 1;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	70da      	strb	r2, [r3, #3]
			break;
 800c6c4:	e037      	b.n	800c736 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6a1a      	ldr	r2, [r3, #32]
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	09db      	lsrs	r3, r3, #7
 800c6ce:	4413      	add	r3, r2
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	f7ff fde8 	bl	800c2a8 <move_window>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c6dc:	7ffb      	ldrb	r3, [r7, #31]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d128      	bne.n	800c734 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c6f6:	4413      	add	r3, r2
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7ff fb3c 	bl	800bd76 <ld_dword>
 800c6fe:	4603      	mov	r3, r0
 800c700:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c704:	4323      	orrs	r3, r4
 800c706:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c716:	4413      	add	r3, r2
 800c718:	6879      	ldr	r1, [r7, #4]
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7ff fb69 	bl	800bdf2 <st_dword>
			fs->wflag = 1;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2201      	movs	r2, #1
 800c724:	70da      	strb	r2, [r3, #3]
			break;
 800c726:	e006      	b.n	800c736 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c728:	bf00      	nop
 800c72a:	e004      	b.n	800c736 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c72c:	bf00      	nop
 800c72e:	e002      	b.n	800c736 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c730:	bf00      	nop
 800c732:	e000      	b.n	800c736 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c734:	bf00      	nop
		}
	}
	return res;
 800c736:	7ffb      	ldrb	r3, [r7, #31]
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3724      	adds	r7, #36	@ 0x24
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd90      	pop	{r4, r7, pc}

0800c740 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b088      	sub	sp, #32
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c74c:	2300      	movs	r3, #0
 800c74e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d904      	bls.n	800c766 <remove_chain+0x26>
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	695b      	ldr	r3, [r3, #20]
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	429a      	cmp	r2, r3
 800c764:	d301      	bcc.n	800c76a <remove_chain+0x2a>
 800c766:	2302      	movs	r3, #2
 800c768:	e04b      	b.n	800c802 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d00c      	beq.n	800c78a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c770:	f04f 32ff 	mov.w	r2, #4294967295
 800c774:	6879      	ldr	r1, [r7, #4]
 800c776:	69b8      	ldr	r0, [r7, #24]
 800c778:	f7ff fef8 	bl	800c56c <put_fat>
 800c77c:	4603      	mov	r3, r0
 800c77e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c780:	7ffb      	ldrb	r3, [r7, #31]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d001      	beq.n	800c78a <remove_chain+0x4a>
 800c786:	7ffb      	ldrb	r3, [r7, #31]
 800c788:	e03b      	b.n	800c802 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c78a:	68b9      	ldr	r1, [r7, #8]
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f7ff fe46 	bl	800c41e <get_fat>
 800c792:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d031      	beq.n	800c7fe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d101      	bne.n	800c7a4 <remove_chain+0x64>
 800c7a0:	2302      	movs	r3, #2
 800c7a2:	e02e      	b.n	800c802 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7aa:	d101      	bne.n	800c7b0 <remove_chain+0x70>
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	e028      	b.n	800c802 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	68b9      	ldr	r1, [r7, #8]
 800c7b4:	69b8      	ldr	r0, [r7, #24]
 800c7b6:	f7ff fed9 	bl	800c56c <put_fat>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c7be:	7ffb      	ldrb	r3, [r7, #31]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d001      	beq.n	800c7c8 <remove_chain+0x88>
 800c7c4:	7ffb      	ldrb	r3, [r7, #31]
 800c7c6:	e01c      	b.n	800c802 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c7c8:	69bb      	ldr	r3, [r7, #24]
 800c7ca:	691a      	ldr	r2, [r3, #16]
 800c7cc:	69bb      	ldr	r3, [r7, #24]
 800c7ce:	695b      	ldr	r3, [r3, #20]
 800c7d0:	3b02      	subs	r3, #2
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d20b      	bcs.n	800c7ee <remove_chain+0xae>
			fs->free_clst++;
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	691b      	ldr	r3, [r3, #16]
 800c7da:	1c5a      	adds	r2, r3, #1
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c7e0:	69bb      	ldr	r3, [r7, #24]
 800c7e2:	791b      	ldrb	r3, [r3, #4]
 800c7e4:	f043 0301 	orr.w	r3, r3, #1
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	69bb      	ldr	r3, [r7, #24]
 800c7ec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	695b      	ldr	r3, [r3, #20]
 800c7f6:	68ba      	ldr	r2, [r7, #8]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d3c6      	bcc.n	800c78a <remove_chain+0x4a>
 800c7fc:	e000      	b.n	800c800 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c7fe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c800:	2300      	movs	r3, #0
}
 800c802:	4618      	mov	r0, r3
 800c804:	3720      	adds	r7, #32
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b088      	sub	sp, #32
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
 800c812:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10d      	bne.n	800c83c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d004      	beq.n	800c836 <create_chain+0x2c>
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	695b      	ldr	r3, [r3, #20]
 800c830:	69ba      	ldr	r2, [r7, #24]
 800c832:	429a      	cmp	r2, r3
 800c834:	d31b      	bcc.n	800c86e <create_chain+0x64>
 800c836:	2301      	movs	r3, #1
 800c838:	61bb      	str	r3, [r7, #24]
 800c83a:	e018      	b.n	800c86e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c83c:	6839      	ldr	r1, [r7, #0]
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7ff fded 	bl	800c41e <get_fat>
 800c844:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d801      	bhi.n	800c850 <create_chain+0x46>
 800c84c:	2301      	movs	r3, #1
 800c84e:	e070      	b.n	800c932 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c856:	d101      	bne.n	800c85c <create_chain+0x52>
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	e06a      	b.n	800c932 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	695b      	ldr	r3, [r3, #20]
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	429a      	cmp	r2, r3
 800c864:	d201      	bcs.n	800c86a <create_chain+0x60>
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	e063      	b.n	800c932 <create_chain+0x128>
		scl = clst;
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	3301      	adds	r3, #1
 800c876:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	695b      	ldr	r3, [r3, #20]
 800c87c:	69fa      	ldr	r2, [r7, #28]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d307      	bcc.n	800c892 <create_chain+0x88>
				ncl = 2;
 800c882:	2302      	movs	r3, #2
 800c884:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c886:	69fa      	ldr	r2, [r7, #28]
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d901      	bls.n	800c892 <create_chain+0x88>
 800c88e:	2300      	movs	r3, #0
 800c890:	e04f      	b.n	800c932 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c892:	69f9      	ldr	r1, [r7, #28]
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f7ff fdc2 	bl	800c41e <get_fat>
 800c89a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d00e      	beq.n	800c8c0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d003      	beq.n	800c8b0 <create_chain+0xa6>
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ae:	d101      	bne.n	800c8b4 <create_chain+0xaa>
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	e03e      	b.n	800c932 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c8b4:	69fa      	ldr	r2, [r7, #28]
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d1da      	bne.n	800c872 <create_chain+0x68>
 800c8bc:	2300      	movs	r3, #0
 800c8be:	e038      	b.n	800c932 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c8c0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c8c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8c6:	69f9      	ldr	r1, [r7, #28]
 800c8c8:	6938      	ldr	r0, [r7, #16]
 800c8ca:	f7ff fe4f 	bl	800c56c <put_fat>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c8d2:	7dfb      	ldrb	r3, [r7, #23]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d109      	bne.n	800c8ec <create_chain+0xe2>
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d006      	beq.n	800c8ec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c8de:	69fa      	ldr	r2, [r7, #28]
 800c8e0:	6839      	ldr	r1, [r7, #0]
 800c8e2:	6938      	ldr	r0, [r7, #16]
 800c8e4:	f7ff fe42 	bl	800c56c <put_fat>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c8ec:	7dfb      	ldrb	r3, [r7, #23]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d116      	bne.n	800c920 <create_chain+0x116>
		fs->last_clst = ncl;
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	69fa      	ldr	r2, [r7, #28]
 800c8f6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	691a      	ldr	r2, [r3, #16]
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	695b      	ldr	r3, [r3, #20]
 800c900:	3b02      	subs	r3, #2
 800c902:	429a      	cmp	r2, r3
 800c904:	d804      	bhi.n	800c910 <create_chain+0x106>
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	1e5a      	subs	r2, r3, #1
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	791b      	ldrb	r3, [r3, #4]
 800c914:	f043 0301 	orr.w	r3, r3, #1
 800c918:	b2da      	uxtb	r2, r3
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	711a      	strb	r2, [r3, #4]
 800c91e:	e007      	b.n	800c930 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c920:	7dfb      	ldrb	r3, [r7, #23]
 800c922:	2b01      	cmp	r3, #1
 800c924:	d102      	bne.n	800c92c <create_chain+0x122>
 800c926:	f04f 33ff 	mov.w	r3, #4294967295
 800c92a:	e000      	b.n	800c92e <create_chain+0x124>
 800c92c:	2301      	movs	r3, #1
 800c92e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c930:	69fb      	ldr	r3, [r7, #28]
}
 800c932:	4618      	mov	r0, r3
 800c934:	3720      	adds	r7, #32
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c93a:	b480      	push	{r7}
 800c93c:	b087      	sub	sp, #28
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
 800c942:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c94e:	3304      	adds	r3, #4
 800c950:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	0a5b      	lsrs	r3, r3, #9
 800c956:	68fa      	ldr	r2, [r7, #12]
 800c958:	8952      	ldrh	r2, [r2, #10]
 800c95a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c95e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	1d1a      	adds	r2, r3, #4
 800c964:	613a      	str	r2, [r7, #16]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d101      	bne.n	800c974 <clmt_clust+0x3a>
 800c970:	2300      	movs	r3, #0
 800c972:	e010      	b.n	800c996 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c974:	697a      	ldr	r2, [r7, #20]
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d307      	bcc.n	800c98c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c97c:	697a      	ldr	r2, [r7, #20]
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	617b      	str	r3, [r7, #20]
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	3304      	adds	r3, #4
 800c988:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c98a:	e7e9      	b.n	800c960 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c98c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	4413      	add	r3, r2
}
 800c996:	4618      	mov	r0, r3
 800c998:	371c      	adds	r7, #28
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr

0800c9a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b086      	sub	sp, #24
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c9b8:	d204      	bcs.n	800c9c4 <dir_sdi+0x22>
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	f003 031f 	and.w	r3, r3, #31
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d001      	beq.n	800c9c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c9c4:	2302      	movs	r3, #2
 800c9c6:	e063      	b.n	800ca90 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	683a      	ldr	r2, [r7, #0]
 800c9cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d106      	bne.n	800c9e8 <dir_sdi+0x46>
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d902      	bls.n	800c9e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d10c      	bne.n	800ca08 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	095b      	lsrs	r3, r3, #5
 800c9f2:	693a      	ldr	r2, [r7, #16]
 800c9f4:	8912      	ldrh	r2, [r2, #8]
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d301      	bcc.n	800c9fe <dir_sdi+0x5c>
 800c9fa:	2302      	movs	r3, #2
 800c9fc:	e048      	b.n	800ca90 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	61da      	str	r2, [r3, #28]
 800ca06:	e029      	b.n	800ca5c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	895b      	ldrh	r3, [r3, #10]
 800ca0c:	025b      	lsls	r3, r3, #9
 800ca0e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ca10:	e019      	b.n	800ca46 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6979      	ldr	r1, [r7, #20]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7ff fd01 	bl	800c41e <get_fat>
 800ca1c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca24:	d101      	bne.n	800ca2a <dir_sdi+0x88>
 800ca26:	2301      	movs	r3, #1
 800ca28:	e032      	b.n	800ca90 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d904      	bls.n	800ca3a <dir_sdi+0x98>
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	695b      	ldr	r3, [r3, #20]
 800ca34:	697a      	ldr	r2, [r7, #20]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d301      	bcc.n	800ca3e <dir_sdi+0x9c>
 800ca3a:	2302      	movs	r3, #2
 800ca3c:	e028      	b.n	800ca90 <dir_sdi+0xee>
			ofs -= csz;
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	1ad3      	subs	r3, r2, r3
 800ca44:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ca46:	683a      	ldr	r2, [r7, #0]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d2e1      	bcs.n	800ca12 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ca4e:	6979      	ldr	r1, [r7, #20]
 800ca50:	6938      	ldr	r0, [r7, #16]
 800ca52:	f7ff fcc5 	bl	800c3e0 <clust2sect>
 800ca56:	4602      	mov	r2, r0
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	697a      	ldr	r2, [r7, #20]
 800ca60:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	69db      	ldr	r3, [r3, #28]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d101      	bne.n	800ca6e <dir_sdi+0xcc>
 800ca6a:	2302      	movs	r3, #2
 800ca6c:	e010      	b.n	800ca90 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	69da      	ldr	r2, [r3, #28]
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	0a5b      	lsrs	r3, r3, #9
 800ca76:	441a      	add	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca88:	441a      	add	r2, r3
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ca8e:	2300      	movs	r3, #0
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3718      	adds	r7, #24
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b086      	sub	sp, #24
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	695b      	ldr	r3, [r3, #20]
 800caac:	3320      	adds	r3, #32
 800caae:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	69db      	ldr	r3, [r3, #28]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d003      	beq.n	800cac0 <dir_next+0x28>
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cabe:	d301      	bcc.n	800cac4 <dir_next+0x2c>
 800cac0:	2304      	movs	r3, #4
 800cac2:	e0aa      	b.n	800cc1a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f040 8098 	bne.w	800cc00 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	69db      	ldr	r3, [r3, #28]
 800cad4:	1c5a      	adds	r2, r3, #1
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	699b      	ldr	r3, [r3, #24]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d10b      	bne.n	800cafa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	095b      	lsrs	r3, r3, #5
 800cae6:	68fa      	ldr	r2, [r7, #12]
 800cae8:	8912      	ldrh	r2, [r2, #8]
 800caea:	4293      	cmp	r3, r2
 800caec:	f0c0 8088 	bcc.w	800cc00 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	61da      	str	r2, [r3, #28]
 800caf6:	2304      	movs	r3, #4
 800caf8:	e08f      	b.n	800cc1a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	0a5b      	lsrs	r3, r3, #9
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	8952      	ldrh	r2, [r2, #10]
 800cb02:	3a01      	subs	r2, #1
 800cb04:	4013      	ands	r3, r2
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d17a      	bne.n	800cc00 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	699b      	ldr	r3, [r3, #24]
 800cb10:	4619      	mov	r1, r3
 800cb12:	4610      	mov	r0, r2
 800cb14:	f7ff fc83 	bl	800c41e <get_fat>
 800cb18:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d801      	bhi.n	800cb24 <dir_next+0x8c>
 800cb20:	2302      	movs	r3, #2
 800cb22:	e07a      	b.n	800cc1a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb2a:	d101      	bne.n	800cb30 <dir_next+0x98>
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e074      	b.n	800cc1a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	695b      	ldr	r3, [r3, #20]
 800cb34:	697a      	ldr	r2, [r7, #20]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d358      	bcc.n	800cbec <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d104      	bne.n	800cb4a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	61da      	str	r2, [r3, #28]
 800cb46:	2304      	movs	r3, #4
 800cb48:	e067      	b.n	800cc1a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	699b      	ldr	r3, [r3, #24]
 800cb50:	4619      	mov	r1, r3
 800cb52:	4610      	mov	r0, r2
 800cb54:	f7ff fe59 	bl	800c80a <create_chain>
 800cb58:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d101      	bne.n	800cb64 <dir_next+0xcc>
 800cb60:	2307      	movs	r3, #7
 800cb62:	e05a      	b.n	800cc1a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d101      	bne.n	800cb6e <dir_next+0xd6>
 800cb6a:	2302      	movs	r3, #2
 800cb6c:	e055      	b.n	800cc1a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb74:	d101      	bne.n	800cb7a <dir_next+0xe2>
 800cb76:	2301      	movs	r3, #1
 800cb78:	e04f      	b.n	800cc1a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cb7a:	68f8      	ldr	r0, [r7, #12]
 800cb7c:	f7ff fb50 	bl	800c220 <sync_window>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d001      	beq.n	800cb8a <dir_next+0xf2>
 800cb86:	2301      	movs	r3, #1
 800cb88:	e047      	b.n	800cc1a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	3330      	adds	r3, #48	@ 0x30
 800cb8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb92:	2100      	movs	r1, #0
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7ff f979 	bl	800be8c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	613b      	str	r3, [r7, #16]
 800cb9e:	6979      	ldr	r1, [r7, #20]
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f7ff fc1d 	bl	800c3e0 <clust2sect>
 800cba6:	4602      	mov	r2, r0
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cbac:	e012      	b.n	800cbd4 <dir_next+0x13c>
						fs->wflag = 1;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cbb4:	68f8      	ldr	r0, [r7, #12]
 800cbb6:	f7ff fb33 	bl	800c220 <sync_window>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d001      	beq.n	800cbc4 <dir_next+0x12c>
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	e02a      	b.n	800cc1a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	613b      	str	r3, [r7, #16]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbce:	1c5a      	adds	r2, r3, #1
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	895b      	ldrh	r3, [r3, #10]
 800cbd8:	461a      	mov	r2, r3
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d3e6      	bcc.n	800cbae <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	1ad2      	subs	r2, r2, r3
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	697a      	ldr	r2, [r7, #20]
 800cbf0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cbf2:	6979      	ldr	r1, [r7, #20]
 800cbf4:	68f8      	ldr	r0, [r7, #12]
 800cbf6:	f7ff fbf3 	bl	800c3e0 <clust2sect>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	68ba      	ldr	r2, [r7, #8]
 800cc04:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc12:	441a      	add	r2, r3
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cc18:	2300      	movs	r3, #0
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3718      	adds	r7, #24
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}

0800cc22 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b086      	sub	sp, #24
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
 800cc2a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cc32:	2100      	movs	r1, #0
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f7ff feb4 	bl	800c9a2 <dir_sdi>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc3e:	7dfb      	ldrb	r3, [r7, #23]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d12b      	bne.n	800cc9c <dir_alloc+0x7a>
		n = 0;
 800cc44:	2300      	movs	r3, #0
 800cc46:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	69db      	ldr	r3, [r3, #28]
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	68f8      	ldr	r0, [r7, #12]
 800cc50:	f7ff fb2a 	bl	800c2a8 <move_window>
 800cc54:	4603      	mov	r3, r0
 800cc56:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc58:	7dfb      	ldrb	r3, [r7, #23]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d11d      	bne.n	800cc9a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6a1b      	ldr	r3, [r3, #32]
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	2be5      	cmp	r3, #229	@ 0xe5
 800cc66:	d004      	beq.n	800cc72 <dir_alloc+0x50>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6a1b      	ldr	r3, [r3, #32]
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d107      	bne.n	800cc82 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	3301      	adds	r3, #1
 800cc76:	613b      	str	r3, [r7, #16]
 800cc78:	693a      	ldr	r2, [r7, #16]
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d102      	bne.n	800cc86 <dir_alloc+0x64>
 800cc80:	e00c      	b.n	800cc9c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cc82:	2300      	movs	r3, #0
 800cc84:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cc86:	2101      	movs	r1, #1
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f7ff ff05 	bl	800ca98 <dir_next>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cc92:	7dfb      	ldrb	r3, [r7, #23]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d0d7      	beq.n	800cc48 <dir_alloc+0x26>
 800cc98:	e000      	b.n	800cc9c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cc9a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cc9c:	7dfb      	ldrb	r3, [r7, #23]
 800cc9e:	2b04      	cmp	r3, #4
 800cca0:	d101      	bne.n	800cca6 <dir_alloc+0x84>
 800cca2:	2307      	movs	r3, #7
 800cca4:	75fb      	strb	r3, [r7, #23]
	return res;
 800cca6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3718      	adds	r7, #24
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	331a      	adds	r3, #26
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f7ff f840 	bl	800bd44 <ld_word>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	2b03      	cmp	r3, #3
 800ccce:	d109      	bne.n	800cce4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	3314      	adds	r3, #20
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7ff f835 	bl	800bd44 <ld_word>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	041b      	lsls	r3, r3, #16
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	4313      	orrs	r3, r2
 800cce2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cce4:	68fb      	ldr	r3, [r7, #12]
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3710      	adds	r7, #16
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	b084      	sub	sp, #16
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	60f8      	str	r0, [r7, #12]
 800ccf6:	60b9      	str	r1, [r7, #8]
 800ccf8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	331a      	adds	r3, #26
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	b292      	uxth	r2, r2
 800cd02:	4611      	mov	r1, r2
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7ff f859 	bl	800bdbc <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	2b03      	cmp	r3, #3
 800cd10:	d109      	bne.n	800cd26 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	f103 0214 	add.w	r2, r3, #20
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	0c1b      	lsrs	r3, r3, #16
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	4619      	mov	r1, r3
 800cd20:	4610      	mov	r0, r2
 800cd22:	f7ff f84b 	bl	800bdbc <st_word>
	}
}
 800cd26:	bf00      	nop
 800cd28:	3710      	adds	r7, #16
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}

0800cd2e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800cd2e:	b580      	push	{r7, lr}
 800cd30:	b086      	sub	sp, #24
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
 800cd36:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800cd38:	2304      	movs	r3, #4
 800cd3a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800cd42:	e03c      	b.n	800cdbe <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	69db      	ldr	r3, [r3, #28]
 800cd48:	4619      	mov	r1, r3
 800cd4a:	6938      	ldr	r0, [r7, #16]
 800cd4c:	f7ff faac 	bl	800c2a8 <move_window>
 800cd50:	4603      	mov	r3, r0
 800cd52:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cd54:	7dfb      	ldrb	r3, [r7, #23]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d136      	bne.n	800cdc8 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6a1b      	ldr	r3, [r3, #32]
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800cd62:	7bfb      	ldrb	r3, [r7, #15]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d102      	bne.n	800cd6e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800cd68:	2304      	movs	r3, #4
 800cd6a:	75fb      	strb	r3, [r7, #23]
 800cd6c:	e031      	b.n	800cdd2 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6a1b      	ldr	r3, [r3, #32]
 800cd72:	330b      	adds	r3, #11
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cd7a:	73bb      	strb	r3, [r7, #14]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	7bba      	ldrb	r2, [r7, #14]
 800cd80:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800cd82:	7bfb      	ldrb	r3, [r7, #15]
 800cd84:	2be5      	cmp	r3, #229	@ 0xe5
 800cd86:	d011      	beq.n	800cdac <dir_read+0x7e>
 800cd88:	7bfb      	ldrb	r3, [r7, #15]
 800cd8a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd8c:	d00e      	beq.n	800cdac <dir_read+0x7e>
 800cd8e:	7bbb      	ldrb	r3, [r7, #14]
 800cd90:	2b0f      	cmp	r3, #15
 800cd92:	d00b      	beq.n	800cdac <dir_read+0x7e>
 800cd94:	7bbb      	ldrb	r3, [r7, #14]
 800cd96:	f023 0320 	bic.w	r3, r3, #32
 800cd9a:	2b08      	cmp	r3, #8
 800cd9c:	bf0c      	ite	eq
 800cd9e:	2301      	moveq	r3, #1
 800cda0:	2300      	movne	r3, #0
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	461a      	mov	r2, r3
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d00f      	beq.n	800cdcc <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cdac:	2100      	movs	r1, #0
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f7ff fe72 	bl	800ca98 <dir_next>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cdb8:	7dfb      	ldrb	r3, [r7, #23]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d108      	bne.n	800cdd0 <dir_read+0xa2>
	while (dp->sect) {
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	69db      	ldr	r3, [r3, #28]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d1be      	bne.n	800cd44 <dir_read+0x16>
 800cdc6:	e004      	b.n	800cdd2 <dir_read+0xa4>
		if (res != FR_OK) break;
 800cdc8:	bf00      	nop
 800cdca:	e002      	b.n	800cdd2 <dir_read+0xa4>
				break;
 800cdcc:	bf00      	nop
 800cdce:	e000      	b.n	800cdd2 <dir_read+0xa4>
		if (res != FR_OK) break;
 800cdd0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cdd2:	7dfb      	ldrb	r3, [r7, #23]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d002      	beq.n	800cdde <dir_read+0xb0>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	61da      	str	r2, [r3, #28]
	return res;
 800cdde:	7dfb      	ldrb	r3, [r7, #23]
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3718      	adds	r7, #24
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b086      	sub	sp, #24
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f7ff fdd2 	bl	800c9a2 <dir_sdi>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ce02:	7dfb      	ldrb	r3, [r7, #23]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d001      	beq.n	800ce0c <dir_find+0x24>
 800ce08:	7dfb      	ldrb	r3, [r7, #23]
 800ce0a:	e03e      	b.n	800ce8a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	69db      	ldr	r3, [r3, #28]
 800ce10:	4619      	mov	r1, r3
 800ce12:	6938      	ldr	r0, [r7, #16]
 800ce14:	f7ff fa48 	bl	800c2a8 <move_window>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ce1c:	7dfb      	ldrb	r3, [r7, #23]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d12f      	bne.n	800ce82 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6a1b      	ldr	r3, [r3, #32]
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ce2a:	7bfb      	ldrb	r3, [r7, #15]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d102      	bne.n	800ce36 <dir_find+0x4e>
 800ce30:	2304      	movs	r3, #4
 800ce32:	75fb      	strb	r3, [r7, #23]
 800ce34:	e028      	b.n	800ce88 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a1b      	ldr	r3, [r3, #32]
 800ce3a:	330b      	adds	r3, #11
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ce42:	b2da      	uxtb	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6a1b      	ldr	r3, [r3, #32]
 800ce4c:	330b      	adds	r3, #11
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	f003 0308 	and.w	r3, r3, #8
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d10a      	bne.n	800ce6e <dir_find+0x86>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6a18      	ldr	r0, [r3, #32]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	3324      	adds	r3, #36	@ 0x24
 800ce60:	220b      	movs	r2, #11
 800ce62:	4619      	mov	r1, r3
 800ce64:	f7ff f82d 	bl	800bec2 <mem_cmp>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00b      	beq.n	800ce86 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ce6e:	2100      	movs	r1, #0
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7ff fe11 	bl	800ca98 <dir_next>
 800ce76:	4603      	mov	r3, r0
 800ce78:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ce7a:	7dfb      	ldrb	r3, [r7, #23]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d0c5      	beq.n	800ce0c <dir_find+0x24>
 800ce80:	e002      	b.n	800ce88 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ce82:	bf00      	nop
 800ce84:	e000      	b.n	800ce88 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ce86:	bf00      	nop

	return res;
 800ce88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3718      	adds	r7, #24
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b084      	sub	sp, #16
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cea0:	2101      	movs	r1, #1
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f7ff febd 	bl	800cc22 <dir_alloc>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ceac:	7bfb      	ldrb	r3, [r7, #15]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d11c      	bne.n	800ceec <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	69db      	ldr	r3, [r3, #28]
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	68b8      	ldr	r0, [r7, #8]
 800ceba:	f7ff f9f5 	bl	800c2a8 <move_window>
 800cebe:	4603      	mov	r3, r0
 800cec0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cec2:	7bfb      	ldrb	r3, [r7, #15]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d111      	bne.n	800ceec <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6a1b      	ldr	r3, [r3, #32]
 800cecc:	2220      	movs	r2, #32
 800cece:	2100      	movs	r1, #0
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7fe ffdb 	bl	800be8c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6a18      	ldr	r0, [r3, #32]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	3324      	adds	r3, #36	@ 0x24
 800cede:	220b      	movs	r2, #11
 800cee0:	4619      	mov	r1, r3
 800cee2:	f7fe ffb2 	bl	800be4a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	2201      	movs	r2, #1
 800ceea:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ceec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b086      	sub	sp, #24
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	2200      	movs	r2, #0
 800cf04:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	69db      	ldr	r3, [r3, #28]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d04f      	beq.n	800cfae <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	613b      	str	r3, [r7, #16]
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800cf16:	e022      	b.n	800cf5e <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6a1a      	ldr	r2, [r3, #32]
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	1c59      	adds	r1, r3, #1
 800cf20:	6179      	str	r1, [r7, #20]
 800cf22:	4413      	add	r3, r2
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cf28:	7bfb      	ldrb	r3, [r7, #15]
 800cf2a:	2b20      	cmp	r3, #32
 800cf2c:	d016      	beq.n	800cf5c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cf2e:	7bfb      	ldrb	r3, [r7, #15]
 800cf30:	2b05      	cmp	r3, #5
 800cf32:	d101      	bne.n	800cf38 <get_fileinfo+0x42>
 800cf34:	23e5      	movs	r3, #229	@ 0xe5
 800cf36:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	2b09      	cmp	r3, #9
 800cf3c:	d106      	bne.n	800cf4c <get_fileinfo+0x56>
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	1c5a      	adds	r2, r3, #1
 800cf42:	613a      	str	r2, [r7, #16]
 800cf44:	683a      	ldr	r2, [r7, #0]
 800cf46:	4413      	add	r3, r2
 800cf48:	222e      	movs	r2, #46	@ 0x2e
 800cf4a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	1c5a      	adds	r2, r3, #1
 800cf50:	613a      	str	r2, [r7, #16]
 800cf52:	683a      	ldr	r2, [r7, #0]
 800cf54:	4413      	add	r3, r2
 800cf56:	7bfa      	ldrb	r2, [r7, #15]
 800cf58:	725a      	strb	r2, [r3, #9]
 800cf5a:	e000      	b.n	800cf5e <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800cf5c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	2b0a      	cmp	r3, #10
 800cf62:	d9d9      	bls.n	800cf18 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800cf64:	683a      	ldr	r2, [r7, #0]
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	4413      	add	r3, r2
 800cf6a:	3309      	adds	r3, #9
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6a1b      	ldr	r3, [r3, #32]
 800cf74:	7ada      	ldrb	r2, [r3, #11]
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6a1b      	ldr	r3, [r3, #32]
 800cf7e:	331c      	adds	r3, #28
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7fe fef8 	bl	800bd76 <ld_dword>
 800cf86:	4602      	mov	r2, r0
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6a1b      	ldr	r3, [r3, #32]
 800cf90:	3316      	adds	r3, #22
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7fe feef 	bl	800bd76 <ld_dword>
 800cf98:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	b29a      	uxth	r2, r3
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	80da      	strh	r2, [r3, #6]
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	0c1b      	lsrs	r3, r3, #16
 800cfa6:	b29a      	uxth	r2, r3
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	809a      	strh	r2, [r3, #4]
 800cfac:	e000      	b.n	800cfb0 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cfae:	bf00      	nop
}
 800cfb0:	3718      	adds	r7, #24
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
	...

0800cfb8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b088      	sub	sp, #32
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	60fb      	str	r3, [r7, #12]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	3324      	adds	r3, #36	@ 0x24
 800cfcc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cfce:	220b      	movs	r2, #11
 800cfd0:	2120      	movs	r1, #32
 800cfd2:	68b8      	ldr	r0, [r7, #8]
 800cfd4:	f7fe ff5a 	bl	800be8c <mem_set>
	si = i = 0; ni = 8;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	613b      	str	r3, [r7, #16]
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	61fb      	str	r3, [r7, #28]
 800cfe0:	2308      	movs	r3, #8
 800cfe2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	1c5a      	adds	r2, r3, #1
 800cfe8:	61fa      	str	r2, [r7, #28]
 800cfea:	68fa      	ldr	r2, [r7, #12]
 800cfec:	4413      	add	r3, r2
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cff2:	7efb      	ldrb	r3, [r7, #27]
 800cff4:	2b20      	cmp	r3, #32
 800cff6:	d94e      	bls.n	800d096 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cff8:	7efb      	ldrb	r3, [r7, #27]
 800cffa:	2b2f      	cmp	r3, #47	@ 0x2f
 800cffc:	d006      	beq.n	800d00c <create_name+0x54>
 800cffe:	7efb      	ldrb	r3, [r7, #27]
 800d000:	2b5c      	cmp	r3, #92	@ 0x5c
 800d002:	d110      	bne.n	800d026 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d004:	e002      	b.n	800d00c <create_name+0x54>
 800d006:	69fb      	ldr	r3, [r7, #28]
 800d008:	3301      	adds	r3, #1
 800d00a:	61fb      	str	r3, [r7, #28]
 800d00c:	68fa      	ldr	r2, [r7, #12]
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	4413      	add	r3, r2
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	2b2f      	cmp	r3, #47	@ 0x2f
 800d016:	d0f6      	beq.n	800d006 <create_name+0x4e>
 800d018:	68fa      	ldr	r2, [r7, #12]
 800d01a:	69fb      	ldr	r3, [r7, #28]
 800d01c:	4413      	add	r3, r2
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	2b5c      	cmp	r3, #92	@ 0x5c
 800d022:	d0f0      	beq.n	800d006 <create_name+0x4e>
			break;
 800d024:	e038      	b.n	800d098 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d026:	7efb      	ldrb	r3, [r7, #27]
 800d028:	2b2e      	cmp	r3, #46	@ 0x2e
 800d02a:	d003      	beq.n	800d034 <create_name+0x7c>
 800d02c:	693a      	ldr	r2, [r7, #16]
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	429a      	cmp	r2, r3
 800d032:	d30c      	bcc.n	800d04e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	2b0b      	cmp	r3, #11
 800d038:	d002      	beq.n	800d040 <create_name+0x88>
 800d03a:	7efb      	ldrb	r3, [r7, #27]
 800d03c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d03e:	d001      	beq.n	800d044 <create_name+0x8c>
 800d040:	2306      	movs	r3, #6
 800d042:	e044      	b.n	800d0ce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d044:	2308      	movs	r3, #8
 800d046:	613b      	str	r3, [r7, #16]
 800d048:	230b      	movs	r3, #11
 800d04a:	617b      	str	r3, [r7, #20]
			continue;
 800d04c:	e022      	b.n	800d094 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d04e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d052:	2b00      	cmp	r3, #0
 800d054:	da04      	bge.n	800d060 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d056:	7efb      	ldrb	r3, [r7, #27]
 800d058:	3b80      	subs	r3, #128	@ 0x80
 800d05a:	4a1f      	ldr	r2, [pc, #124]	@ (800d0d8 <create_name+0x120>)
 800d05c:	5cd3      	ldrb	r3, [r2, r3]
 800d05e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d060:	7efb      	ldrb	r3, [r7, #27]
 800d062:	4619      	mov	r1, r3
 800d064:	481d      	ldr	r0, [pc, #116]	@ (800d0dc <create_name+0x124>)
 800d066:	f7fe ff53 	bl	800bf10 <chk_chr>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d001      	beq.n	800d074 <create_name+0xbc>
 800d070:	2306      	movs	r3, #6
 800d072:	e02c      	b.n	800d0ce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d074:	7efb      	ldrb	r3, [r7, #27]
 800d076:	2b60      	cmp	r3, #96	@ 0x60
 800d078:	d905      	bls.n	800d086 <create_name+0xce>
 800d07a:	7efb      	ldrb	r3, [r7, #27]
 800d07c:	2b7a      	cmp	r3, #122	@ 0x7a
 800d07e:	d802      	bhi.n	800d086 <create_name+0xce>
 800d080:	7efb      	ldrb	r3, [r7, #27]
 800d082:	3b20      	subs	r3, #32
 800d084:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	1c5a      	adds	r2, r3, #1
 800d08a:	613a      	str	r2, [r7, #16]
 800d08c:	68ba      	ldr	r2, [r7, #8]
 800d08e:	4413      	add	r3, r2
 800d090:	7efa      	ldrb	r2, [r7, #27]
 800d092:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d094:	e7a6      	b.n	800cfe4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d096:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	69fb      	ldr	r3, [r7, #28]
 800d09c:	441a      	add	r2, r3
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d101      	bne.n	800d0ac <create_name+0xf4>
 800d0a8:	2306      	movs	r3, #6
 800d0aa:	e010      	b.n	800d0ce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	2be5      	cmp	r3, #229	@ 0xe5
 800d0b2:	d102      	bne.n	800d0ba <create_name+0x102>
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	2205      	movs	r2, #5
 800d0b8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d0ba:	7efb      	ldrb	r3, [r7, #27]
 800d0bc:	2b20      	cmp	r3, #32
 800d0be:	d801      	bhi.n	800d0c4 <create_name+0x10c>
 800d0c0:	2204      	movs	r2, #4
 800d0c2:	e000      	b.n	800d0c6 <create_name+0x10e>
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	330b      	adds	r3, #11
 800d0ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d0cc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3720      	adds	r7, #32
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	08012cd4 	.word	0x08012cd4
 800d0dc:	08012134 	.word	0x08012134

0800d0e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b086      	sub	sp, #24
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d0f4:	e002      	b.n	800d0fc <follow_path+0x1c>
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	603b      	str	r3, [r7, #0]
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	2b2f      	cmp	r3, #47	@ 0x2f
 800d102:	d0f8      	beq.n	800d0f6 <follow_path+0x16>
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	2b5c      	cmp	r3, #92	@ 0x5c
 800d10a:	d0f4      	beq.n	800d0f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	2200      	movs	r2, #0
 800d110:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	2b1f      	cmp	r3, #31
 800d118:	d80a      	bhi.n	800d130 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2280      	movs	r2, #128	@ 0x80
 800d11e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d122:	2100      	movs	r1, #0
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7ff fc3c 	bl	800c9a2 <dir_sdi>
 800d12a:	4603      	mov	r3, r0
 800d12c:	75fb      	strb	r3, [r7, #23]
 800d12e:	e043      	b.n	800d1b8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d130:	463b      	mov	r3, r7
 800d132:	4619      	mov	r1, r3
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f7ff ff3f 	bl	800cfb8 <create_name>
 800d13a:	4603      	mov	r3, r0
 800d13c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d13e:	7dfb      	ldrb	r3, [r7, #23]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d134      	bne.n	800d1ae <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f7ff fe4f 	bl	800cde8 <dir_find>
 800d14a:	4603      	mov	r3, r0
 800d14c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d154:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d156:	7dfb      	ldrb	r3, [r7, #23]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00a      	beq.n	800d172 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d15c:	7dfb      	ldrb	r3, [r7, #23]
 800d15e:	2b04      	cmp	r3, #4
 800d160:	d127      	bne.n	800d1b2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d162:	7afb      	ldrb	r3, [r7, #11]
 800d164:	f003 0304 	and.w	r3, r3, #4
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d122      	bne.n	800d1b2 <follow_path+0xd2>
 800d16c:	2305      	movs	r3, #5
 800d16e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d170:	e01f      	b.n	800d1b2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d172:	7afb      	ldrb	r3, [r7, #11]
 800d174:	f003 0304 	and.w	r3, r3, #4
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d11c      	bne.n	800d1b6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	799b      	ldrb	r3, [r3, #6]
 800d180:	f003 0310 	and.w	r3, r3, #16
 800d184:	2b00      	cmp	r3, #0
 800d186:	d102      	bne.n	800d18e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d188:	2305      	movs	r3, #5
 800d18a:	75fb      	strb	r3, [r7, #23]
 800d18c:	e014      	b.n	800d1b8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	695b      	ldr	r3, [r3, #20]
 800d198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d19c:	4413      	add	r3, r2
 800d19e:	4619      	mov	r1, r3
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f7ff fd85 	bl	800ccb0 <ld_clust>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d1ac:	e7c0      	b.n	800d130 <follow_path+0x50>
			if (res != FR_OK) break;
 800d1ae:	bf00      	nop
 800d1b0:	e002      	b.n	800d1b8 <follow_path+0xd8>
				break;
 800d1b2:	bf00      	nop
 800d1b4:	e000      	b.n	800d1b8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d1b6:	bf00      	nop
			}
		}
	}

	return res;
 800d1b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3718      	adds	r7, #24
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d1c2:	b480      	push	{r7}
 800d1c4:	b087      	sub	sp, #28
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d1ca:	f04f 33ff 	mov.w	r3, #4294967295
 800d1ce:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d031      	beq.n	800d23c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	617b      	str	r3, [r7, #20]
 800d1de:	e002      	b.n	800d1e6 <get_ldnumber+0x24>
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	617b      	str	r3, [r7, #20]
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	2b20      	cmp	r3, #32
 800d1ec:	d903      	bls.n	800d1f6 <get_ldnumber+0x34>
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	2b3a      	cmp	r3, #58	@ 0x3a
 800d1f4:	d1f4      	bne.n	800d1e0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	2b3a      	cmp	r3, #58	@ 0x3a
 800d1fc:	d11c      	bne.n	800d238 <get_ldnumber+0x76>
			tp = *path;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	1c5a      	adds	r2, r3, #1
 800d208:	60fa      	str	r2, [r7, #12]
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	3b30      	subs	r3, #48	@ 0x30
 800d20e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	2b09      	cmp	r3, #9
 800d214:	d80e      	bhi.n	800d234 <get_ldnumber+0x72>
 800d216:	68fa      	ldr	r2, [r7, #12]
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d10a      	bne.n	800d234 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d107      	bne.n	800d234 <get_ldnumber+0x72>
					vol = (int)i;
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	3301      	adds	r3, #1
 800d22c:	617b      	str	r3, [r7, #20]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	697a      	ldr	r2, [r7, #20]
 800d232:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	e002      	b.n	800d23e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d238:	2300      	movs	r3, #0
 800d23a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d23c:	693b      	ldr	r3, [r7, #16]
}
 800d23e:	4618      	mov	r0, r3
 800d240:	371c      	adds	r7, #28
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr
	...

0800d24c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2200      	movs	r2, #0
 800d25a:	70da      	strb	r2, [r3, #3]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f04f 32ff 	mov.w	r2, #4294967295
 800d262:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d264:	6839      	ldr	r1, [r7, #0]
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7ff f81e 	bl	800c2a8 <move_window>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d001      	beq.n	800d276 <check_fs+0x2a>
 800d272:	2304      	movs	r3, #4
 800d274:	e038      	b.n	800d2e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	3330      	adds	r3, #48	@ 0x30
 800d27a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fe fd60 	bl	800bd44 <ld_word>
 800d284:	4603      	mov	r3, r0
 800d286:	461a      	mov	r2, r3
 800d288:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d001      	beq.n	800d294 <check_fs+0x48>
 800d290:	2303      	movs	r3, #3
 800d292:	e029      	b.n	800d2e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d29a:	2be9      	cmp	r3, #233	@ 0xe9
 800d29c:	d009      	beq.n	800d2b2 <check_fs+0x66>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d2a4:	2beb      	cmp	r3, #235	@ 0xeb
 800d2a6:	d11e      	bne.n	800d2e6 <check_fs+0x9a>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d2ae:	2b90      	cmp	r3, #144	@ 0x90
 800d2b0:	d119      	bne.n	800d2e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	3330      	adds	r3, #48	@ 0x30
 800d2b6:	3336      	adds	r3, #54	@ 0x36
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7fe fd5c 	bl	800bd76 <ld_dword>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d2c4:	4a0a      	ldr	r2, [pc, #40]	@ (800d2f0 <check_fs+0xa4>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d101      	bne.n	800d2ce <check_fs+0x82>
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	e00c      	b.n	800d2e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	3330      	adds	r3, #48	@ 0x30
 800d2d2:	3352      	adds	r3, #82	@ 0x52
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7fe fd4e 	bl	800bd76 <ld_dword>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	4a05      	ldr	r2, [pc, #20]	@ (800d2f4 <check_fs+0xa8>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d101      	bne.n	800d2e6 <check_fs+0x9a>
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	e000      	b.n	800d2e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d2e6:	2302      	movs	r3, #2
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3708      	adds	r7, #8
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	00544146 	.word	0x00544146
 800d2f4:	33544146 	.word	0x33544146

0800d2f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b096      	sub	sp, #88	@ 0x58
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	4613      	mov	r3, r2
 800d304:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	2200      	movs	r2, #0
 800d30a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d30c:	68f8      	ldr	r0, [r7, #12]
 800d30e:	f7ff ff58 	bl	800d1c2 <get_ldnumber>
 800d312:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d316:	2b00      	cmp	r3, #0
 800d318:	da01      	bge.n	800d31e <find_volume+0x26>
 800d31a:	230b      	movs	r3, #11
 800d31c:	e22d      	b.n	800d77a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d31e:	4aa1      	ldr	r2, [pc, #644]	@ (800d5a4 <find_volume+0x2ac>)
 800d320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d326:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d101      	bne.n	800d332 <find_volume+0x3a>
 800d32e:	230c      	movs	r3, #12
 800d330:	e223      	b.n	800d77a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d336:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d338:	79fb      	ldrb	r3, [r7, #7]
 800d33a:	f023 0301 	bic.w	r3, r3, #1
 800d33e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d342:	781b      	ldrb	r3, [r3, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d01a      	beq.n	800d37e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d34a:	785b      	ldrb	r3, [r3, #1]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7fe fc59 	bl	800bc04 <disk_status>
 800d352:	4603      	mov	r3, r0
 800d354:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d358:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d35c:	f003 0301 	and.w	r3, r3, #1
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10c      	bne.n	800d37e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d364:	79fb      	ldrb	r3, [r7, #7]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d007      	beq.n	800d37a <find_volume+0x82>
 800d36a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d36e:	f003 0304 	and.w	r3, r3, #4
 800d372:	2b00      	cmp	r3, #0
 800d374:	d001      	beq.n	800d37a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d376:	230a      	movs	r3, #10
 800d378:	e1ff      	b.n	800d77a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d37a:	2300      	movs	r3, #0
 800d37c:	e1fd      	b.n	800d77a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d380:	2200      	movs	r2, #0
 800d382:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d386:	b2da      	uxtb	r2, r3
 800d388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d38a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d38e:	785b      	ldrb	r3, [r3, #1]
 800d390:	4618      	mov	r0, r3
 800d392:	f7fe fc51 	bl	800bc38 <disk_initialize>
 800d396:	4603      	mov	r3, r0
 800d398:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d39c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d3a0:	f003 0301 	and.w	r3, r3, #1
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d001      	beq.n	800d3ac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d3a8:	2303      	movs	r3, #3
 800d3aa:	e1e6      	b.n	800d77a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d3ac:	79fb      	ldrb	r3, [r7, #7]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d007      	beq.n	800d3c2 <find_volume+0xca>
 800d3b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d3b6:	f003 0304 	and.w	r3, r3, #4
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d001      	beq.n	800d3c2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d3be:	230a      	movs	r3, #10
 800d3c0:	e1db      	b.n	800d77a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d3c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d3c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d3ca:	f7ff ff3f 	bl	800d24c <check_fs>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d3d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d3d8:	2b02      	cmp	r3, #2
 800d3da:	d149      	bne.n	800d470 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d3dc:	2300      	movs	r3, #0
 800d3de:	643b      	str	r3, [r7, #64]	@ 0x40
 800d3e0:	e01e      	b.n	800d420 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d3e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3ea:	011b      	lsls	r3, r3, #4
 800d3ec:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d3f0:	4413      	add	r3, r2
 800d3f2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f6:	3304      	adds	r3, #4
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d006      	beq.n	800d40c <find_volume+0x114>
 800d3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d400:	3308      	adds	r3, #8
 800d402:	4618      	mov	r0, r3
 800d404:	f7fe fcb7 	bl	800bd76 <ld_dword>
 800d408:	4602      	mov	r2, r0
 800d40a:	e000      	b.n	800d40e <find_volume+0x116>
 800d40c:	2200      	movs	r2, #0
 800d40e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d410:	009b      	lsls	r3, r3, #2
 800d412:	3358      	adds	r3, #88	@ 0x58
 800d414:	443b      	add	r3, r7
 800d416:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d41a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d41c:	3301      	adds	r3, #1
 800d41e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d422:	2b03      	cmp	r3, #3
 800d424:	d9dd      	bls.n	800d3e2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d426:	2300      	movs	r3, #0
 800d428:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d42a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d002      	beq.n	800d436 <find_volume+0x13e>
 800d430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d432:	3b01      	subs	r3, #1
 800d434:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d438:	009b      	lsls	r3, r3, #2
 800d43a:	3358      	adds	r3, #88	@ 0x58
 800d43c:	443b      	add	r3, r7
 800d43e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d442:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d444:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d446:	2b00      	cmp	r3, #0
 800d448:	d005      	beq.n	800d456 <find_volume+0x15e>
 800d44a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d44c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d44e:	f7ff fefd 	bl	800d24c <check_fs>
 800d452:	4603      	mov	r3, r0
 800d454:	e000      	b.n	800d458 <find_volume+0x160>
 800d456:	2303      	movs	r3, #3
 800d458:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d45c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d460:	2b01      	cmp	r3, #1
 800d462:	d905      	bls.n	800d470 <find_volume+0x178>
 800d464:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d466:	3301      	adds	r3, #1
 800d468:	643b      	str	r3, [r7, #64]	@ 0x40
 800d46a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d46c:	2b03      	cmp	r3, #3
 800d46e:	d9e2      	bls.n	800d436 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d470:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d474:	2b04      	cmp	r3, #4
 800d476:	d101      	bne.n	800d47c <find_volume+0x184>
 800d478:	2301      	movs	r3, #1
 800d47a:	e17e      	b.n	800d77a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d47c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d480:	2b01      	cmp	r3, #1
 800d482:	d901      	bls.n	800d488 <find_volume+0x190>
 800d484:	230d      	movs	r3, #13
 800d486:	e178      	b.n	800d77a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d48a:	3330      	adds	r3, #48	@ 0x30
 800d48c:	330b      	adds	r3, #11
 800d48e:	4618      	mov	r0, r3
 800d490:	f7fe fc58 	bl	800bd44 <ld_word>
 800d494:	4603      	mov	r3, r0
 800d496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d49a:	d001      	beq.n	800d4a0 <find_volume+0x1a8>
 800d49c:	230d      	movs	r3, #13
 800d49e:	e16c      	b.n	800d77a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4a2:	3330      	adds	r3, #48	@ 0x30
 800d4a4:	3316      	adds	r3, #22
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7fe fc4c 	bl	800bd44 <ld_word>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d4b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d106      	bne.n	800d4c4 <find_volume+0x1cc>
 800d4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4b8:	3330      	adds	r3, #48	@ 0x30
 800d4ba:	3324      	adds	r3, #36	@ 0x24
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7fe fc5a 	bl	800bd76 <ld_dword>
 800d4c2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d4c8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4cc:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800d4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d6:	789b      	ldrb	r3, [r3, #2]
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d005      	beq.n	800d4e8 <find_volume+0x1f0>
 800d4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4de:	789b      	ldrb	r3, [r3, #2]
 800d4e0:	2b02      	cmp	r3, #2
 800d4e2:	d001      	beq.n	800d4e8 <find_volume+0x1f0>
 800d4e4:	230d      	movs	r3, #13
 800d4e6:	e148      	b.n	800d77a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ea:	789b      	ldrb	r3, [r3, #2]
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4f0:	fb02 f303 	mul.w	r3, r2, r3
 800d4f4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d500:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d504:	895b      	ldrh	r3, [r3, #10]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d008      	beq.n	800d51c <find_volume+0x224>
 800d50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d50c:	895b      	ldrh	r3, [r3, #10]
 800d50e:	461a      	mov	r2, r3
 800d510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d512:	895b      	ldrh	r3, [r3, #10]
 800d514:	3b01      	subs	r3, #1
 800d516:	4013      	ands	r3, r2
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d001      	beq.n	800d520 <find_volume+0x228>
 800d51c:	230d      	movs	r3, #13
 800d51e:	e12c      	b.n	800d77a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d522:	3330      	adds	r3, #48	@ 0x30
 800d524:	3311      	adds	r3, #17
 800d526:	4618      	mov	r0, r3
 800d528:	f7fe fc0c 	bl	800bd44 <ld_word>
 800d52c:	4603      	mov	r3, r0
 800d52e:	461a      	mov	r2, r3
 800d530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d532:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d536:	891b      	ldrh	r3, [r3, #8]
 800d538:	f003 030f 	and.w	r3, r3, #15
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d001      	beq.n	800d546 <find_volume+0x24e>
 800d542:	230d      	movs	r3, #13
 800d544:	e119      	b.n	800d77a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d548:	3330      	adds	r3, #48	@ 0x30
 800d54a:	3313      	adds	r3, #19
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7fe fbf9 	bl	800bd44 <ld_word>
 800d552:	4603      	mov	r3, r0
 800d554:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d556:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d106      	bne.n	800d56a <find_volume+0x272>
 800d55c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d55e:	3330      	adds	r3, #48	@ 0x30
 800d560:	3320      	adds	r3, #32
 800d562:	4618      	mov	r0, r3
 800d564:	f7fe fc07 	bl	800bd76 <ld_dword>
 800d568:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d56c:	3330      	adds	r3, #48	@ 0x30
 800d56e:	330e      	adds	r3, #14
 800d570:	4618      	mov	r0, r3
 800d572:	f7fe fbe7 	bl	800bd44 <ld_word>
 800d576:	4603      	mov	r3, r0
 800d578:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d57a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d101      	bne.n	800d584 <find_volume+0x28c>
 800d580:	230d      	movs	r3, #13
 800d582:	e0fa      	b.n	800d77a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d584:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d588:	4413      	add	r3, r2
 800d58a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d58c:	8912      	ldrh	r2, [r2, #8]
 800d58e:	0912      	lsrs	r2, r2, #4
 800d590:	b292      	uxth	r2, r2
 800d592:	4413      	add	r3, r2
 800d594:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d596:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d204      	bcs.n	800d5a8 <find_volume+0x2b0>
 800d59e:	230d      	movs	r3, #13
 800d5a0:	e0eb      	b.n	800d77a <find_volume+0x482>
 800d5a2:	bf00      	nop
 800d5a4:	20013654 	.word	0x20013654
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d5a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ac:	1ad3      	subs	r3, r2, r3
 800d5ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d5b0:	8952      	ldrh	r2, [r2, #10]
 800d5b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5b6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d101      	bne.n	800d5c2 <find_volume+0x2ca>
 800d5be:	230d      	movs	r3, #13
 800d5c0:	e0db      	b.n	800d77a <find_volume+0x482>
		fmt = FS_FAT32;
 800d5c2:	2303      	movs	r3, #3
 800d5c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ca:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d802      	bhi.n	800d5d8 <find_volume+0x2e0>
 800d5d2:	2302      	movs	r3, #2
 800d5d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5da:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d802      	bhi.n	800d5e8 <find_volume+0x2f0>
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ea:	1c9a      	adds	r2, r3, #2
 800d5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ee:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d5f4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d5f6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d5f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5fa:	441a      	add	r2, r3
 800d5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5fe:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d600:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d604:	441a      	add	r2, r3
 800d606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d608:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800d60a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d60e:	2b03      	cmp	r3, #3
 800d610:	d11e      	bne.n	800d650 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d614:	3330      	adds	r3, #48	@ 0x30
 800d616:	332a      	adds	r3, #42	@ 0x2a
 800d618:	4618      	mov	r0, r3
 800d61a:	f7fe fb93 	bl	800bd44 <ld_word>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d001      	beq.n	800d628 <find_volume+0x330>
 800d624:	230d      	movs	r3, #13
 800d626:	e0a8      	b.n	800d77a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d62a:	891b      	ldrh	r3, [r3, #8]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d001      	beq.n	800d634 <find_volume+0x33c>
 800d630:	230d      	movs	r3, #13
 800d632:	e0a2      	b.n	800d77a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d636:	3330      	adds	r3, #48	@ 0x30
 800d638:	332c      	adds	r3, #44	@ 0x2c
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7fe fb9b 	bl	800bd76 <ld_dword>
 800d640:	4602      	mov	r2, r0
 800d642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d644:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d648:	695b      	ldr	r3, [r3, #20]
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d64e:	e01f      	b.n	800d690 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d652:	891b      	ldrh	r3, [r3, #8]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d101      	bne.n	800d65c <find_volume+0x364>
 800d658:	230d      	movs	r3, #13
 800d65a:	e08e      	b.n	800d77a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d65e:	6a1a      	ldr	r2, [r3, #32]
 800d660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d662:	441a      	add	r2, r3
 800d664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d666:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d668:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	d103      	bne.n	800d678 <find_volume+0x380>
 800d670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d672:	695b      	ldr	r3, [r3, #20]
 800d674:	005b      	lsls	r3, r3, #1
 800d676:	e00a      	b.n	800d68e <find_volume+0x396>
 800d678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d67a:	695a      	ldr	r2, [r3, #20]
 800d67c:	4613      	mov	r3, r2
 800d67e:	005b      	lsls	r3, r3, #1
 800d680:	4413      	add	r3, r2
 800d682:	085a      	lsrs	r2, r3, #1
 800d684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d686:	695b      	ldr	r3, [r3, #20]
 800d688:	f003 0301 	and.w	r3, r3, #1
 800d68c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d68e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d692:	699a      	ldr	r2, [r3, #24]
 800d694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d696:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d69a:	0a5b      	lsrs	r3, r3, #9
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d201      	bcs.n	800d6a4 <find_volume+0x3ac>
 800d6a0:	230d      	movs	r3, #13
 800d6a2:	e06a      	b.n	800d77a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6aa:	611a      	str	r2, [r3, #16]
 800d6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ae:	691a      	ldr	r2, [r3, #16]
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b6:	2280      	movs	r2, #128	@ 0x80
 800d6b8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d6ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d6be:	2b03      	cmp	r3, #3
 800d6c0:	d149      	bne.n	800d756 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c4:	3330      	adds	r3, #48	@ 0x30
 800d6c6:	3330      	adds	r3, #48	@ 0x30
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7fe fb3b 	bl	800bd44 <ld_word>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d140      	bne.n	800d756 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d6d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	4619      	mov	r1, r3
 800d6da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d6dc:	f7fe fde4 	bl	800c2a8 <move_window>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d137      	bne.n	800d756 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ee:	3330      	adds	r3, #48	@ 0x30
 800d6f0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7fe fb25 	bl	800bd44 <ld_word>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d702:	429a      	cmp	r2, r3
 800d704:	d127      	bne.n	800d756 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d708:	3330      	adds	r3, #48	@ 0x30
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fe fb33 	bl	800bd76 <ld_dword>
 800d710:	4603      	mov	r3, r0
 800d712:	4a1c      	ldr	r2, [pc, #112]	@ (800d784 <find_volume+0x48c>)
 800d714:	4293      	cmp	r3, r2
 800d716:	d11e      	bne.n	800d756 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d71a:	3330      	adds	r3, #48	@ 0x30
 800d71c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d720:	4618      	mov	r0, r3
 800d722:	f7fe fb28 	bl	800bd76 <ld_dword>
 800d726:	4603      	mov	r3, r0
 800d728:	4a17      	ldr	r2, [pc, #92]	@ (800d788 <find_volume+0x490>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d113      	bne.n	800d756 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d730:	3330      	adds	r3, #48	@ 0x30
 800d732:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d736:	4618      	mov	r0, r3
 800d738:	f7fe fb1d 	bl	800bd76 <ld_dword>
 800d73c:	4602      	mov	r2, r0
 800d73e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d740:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d744:	3330      	adds	r3, #48	@ 0x30
 800d746:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fe fb13 	bl	800bd76 <ld_dword>
 800d750:	4602      	mov	r2, r0
 800d752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d754:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d758:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d75c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d75e:	4b0b      	ldr	r3, [pc, #44]	@ (800d78c <find_volume+0x494>)
 800d760:	881b      	ldrh	r3, [r3, #0]
 800d762:	3301      	adds	r3, #1
 800d764:	b29a      	uxth	r2, r3
 800d766:	4b09      	ldr	r3, [pc, #36]	@ (800d78c <find_volume+0x494>)
 800d768:	801a      	strh	r2, [r3, #0]
 800d76a:	4b08      	ldr	r3, [pc, #32]	@ (800d78c <find_volume+0x494>)
 800d76c:	881a      	ldrh	r2, [r3, #0]
 800d76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d770:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d772:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d774:	f7fe fd30 	bl	800c1d8 <clear_lock>
#endif
	return FR_OK;
 800d778:	2300      	movs	r3, #0
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3758      	adds	r7, #88	@ 0x58
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	41615252 	.word	0x41615252
 800d788:	61417272 	.word	0x61417272
 800d78c:	20013658 	.word	0x20013658

0800d790 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b084      	sub	sp, #16
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d79a:	2309      	movs	r3, #9
 800d79c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d01c      	beq.n	800d7de <validate+0x4e>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d018      	beq.n	800d7de <validate+0x4e>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d013      	beq.n	800d7de <validate+0x4e>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	889a      	ldrh	r2, [r3, #4]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	88db      	ldrh	r3, [r3, #6]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d10c      	bne.n	800d7de <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	785b      	ldrb	r3, [r3, #1]
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7fe fa1a 	bl	800bc04 <disk_status>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	f003 0301 	and.w	r3, r3, #1
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d101      	bne.n	800d7de <validate+0x4e>
			res = FR_OK;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d7de:	7bfb      	ldrb	r3, [r7, #15]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d102      	bne.n	800d7ea <validate+0x5a>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	e000      	b.n	800d7ec <validate+0x5c>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	683a      	ldr	r2, [r7, #0]
 800d7ee:	6013      	str	r3, [r2, #0]
	return res;
 800d7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3710      	adds	r7, #16
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
	...

0800d7fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b088      	sub	sp, #32
 800d800:	af00      	add	r7, sp, #0
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	4613      	mov	r3, r2
 800d808:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d80e:	f107 0310 	add.w	r3, r7, #16
 800d812:	4618      	mov	r0, r3
 800d814:	f7ff fcd5 	bl	800d1c2 <get_ldnumber>
 800d818:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	da01      	bge.n	800d824 <f_mount+0x28>
 800d820:	230b      	movs	r3, #11
 800d822:	e02b      	b.n	800d87c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d824:	4a17      	ldr	r2, [pc, #92]	@ (800d884 <f_mount+0x88>)
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d82c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d005      	beq.n	800d840 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d834:	69b8      	ldr	r0, [r7, #24]
 800d836:	f7fe fccf 	bl	800c1d8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d83a:	69bb      	ldr	r3, [r7, #24]
 800d83c:	2200      	movs	r2, #0
 800d83e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d002      	beq.n	800d84c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2200      	movs	r2, #0
 800d84a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d84c:	68fa      	ldr	r2, [r7, #12]
 800d84e:	490d      	ldr	r1, [pc, #52]	@ (800d884 <f_mount+0x88>)
 800d850:	69fb      	ldr	r3, [r7, #28]
 800d852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d002      	beq.n	800d862 <f_mount+0x66>
 800d85c:	79fb      	ldrb	r3, [r7, #7]
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d001      	beq.n	800d866 <f_mount+0x6a>
 800d862:	2300      	movs	r3, #0
 800d864:	e00a      	b.n	800d87c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d866:	f107 010c 	add.w	r1, r7, #12
 800d86a:	f107 0308 	add.w	r3, r7, #8
 800d86e:	2200      	movs	r2, #0
 800d870:	4618      	mov	r0, r3
 800d872:	f7ff fd41 	bl	800d2f8 <find_volume>
 800d876:	4603      	mov	r3, r0
 800d878:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d87a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3720      	adds	r7, #32
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}
 800d884:	20013654 	.word	0x20013654

0800d888 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b098      	sub	sp, #96	@ 0x60
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	4613      	mov	r3, r2
 800d894:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d101      	bne.n	800d8a0 <f_open+0x18>
 800d89c:	2309      	movs	r3, #9
 800d89e:	e1a9      	b.n	800dbf4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d8a0:	79fb      	ldrb	r3, [r7, #7]
 800d8a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d8a6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d8a8:	79fa      	ldrb	r2, [r7, #7]
 800d8aa:	f107 0110 	add.w	r1, r7, #16
 800d8ae:	f107 0308 	add.w	r3, r7, #8
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7ff fd20 	bl	800d2f8 <find_volume>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d8be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	f040 818d 	bne.w	800dbe2 <f_open+0x35a>
		dj.obj.fs = fs;
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d8cc:	68ba      	ldr	r2, [r7, #8]
 800d8ce:	f107 0314 	add.w	r3, r7, #20
 800d8d2:	4611      	mov	r1, r2
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7ff fc03 	bl	800d0e0 <follow_path>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d8e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d118      	bne.n	800d91a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d8e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d8ec:	b25b      	sxtb	r3, r3
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	da03      	bge.n	800d8fa <f_open+0x72>
				res = FR_INVALID_NAME;
 800d8f2:	2306      	movs	r3, #6
 800d8f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d8f8:	e00f      	b.n	800d91a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d8fa:	79fb      	ldrb	r3, [r7, #7]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	bf8c      	ite	hi
 800d900:	2301      	movhi	r3, #1
 800d902:	2300      	movls	r3, #0
 800d904:	b2db      	uxtb	r3, r3
 800d906:	461a      	mov	r2, r3
 800d908:	f107 0314 	add.w	r3, r7, #20
 800d90c:	4611      	mov	r1, r2
 800d90e:	4618      	mov	r0, r3
 800d910:	f7fe fb1a 	bl	800bf48 <chk_lock>
 800d914:	4603      	mov	r3, r0
 800d916:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d91a:	79fb      	ldrb	r3, [r7, #7]
 800d91c:	f003 031c 	and.w	r3, r3, #28
 800d920:	2b00      	cmp	r3, #0
 800d922:	d07f      	beq.n	800da24 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d924:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d017      	beq.n	800d95c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d92c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d930:	2b04      	cmp	r3, #4
 800d932:	d10e      	bne.n	800d952 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d934:	f7fe fb64 	bl	800c000 <enq_lock>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d006      	beq.n	800d94c <f_open+0xc4>
 800d93e:	f107 0314 	add.w	r3, r7, #20
 800d942:	4618      	mov	r0, r3
 800d944:	f7ff faa5 	bl	800ce92 <dir_register>
 800d948:	4603      	mov	r3, r0
 800d94a:	e000      	b.n	800d94e <f_open+0xc6>
 800d94c:	2312      	movs	r3, #18
 800d94e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d952:	79fb      	ldrb	r3, [r7, #7]
 800d954:	f043 0308 	orr.w	r3, r3, #8
 800d958:	71fb      	strb	r3, [r7, #7]
 800d95a:	e010      	b.n	800d97e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d95c:	7ebb      	ldrb	r3, [r7, #26]
 800d95e:	f003 0311 	and.w	r3, r3, #17
 800d962:	2b00      	cmp	r3, #0
 800d964:	d003      	beq.n	800d96e <f_open+0xe6>
					res = FR_DENIED;
 800d966:	2307      	movs	r3, #7
 800d968:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d96c:	e007      	b.n	800d97e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d96e:	79fb      	ldrb	r3, [r7, #7]
 800d970:	f003 0304 	and.w	r3, r3, #4
 800d974:	2b00      	cmp	r3, #0
 800d976:	d002      	beq.n	800d97e <f_open+0xf6>
 800d978:	2308      	movs	r3, #8
 800d97a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d97e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d982:	2b00      	cmp	r3, #0
 800d984:	d168      	bne.n	800da58 <f_open+0x1d0>
 800d986:	79fb      	ldrb	r3, [r7, #7]
 800d988:	f003 0308 	and.w	r3, r3, #8
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d063      	beq.n	800da58 <f_open+0x1d0>
				dw = GET_FATTIME();
 800d990:	f7fa fb34 	bl	8007ffc <get_fattime>
 800d994:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d998:	330e      	adds	r3, #14
 800d99a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7fe fa28 	bl	800bdf2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d9a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9a4:	3316      	adds	r3, #22
 800d9a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7fe fa22 	bl	800bdf2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d9ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9b0:	330b      	adds	r3, #11
 800d9b2:	2220      	movs	r2, #32
 800d9b4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d9ba:	4611      	mov	r1, r2
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7ff f977 	bl	800ccb0 <ld_clust>
 800d9c2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7ff f98f 	bl	800ccee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d9d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9d2:	331c      	adds	r3, #28
 800d9d4:	2100      	movs	r1, #0
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7fe fa0b 	bl	800bdf2 <st_dword>
					fs->wflag = 1;
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	2201      	movs	r2, #1
 800d9e0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d9e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d037      	beq.n	800da58 <f_open+0x1d0>
						dw = fs->winsect;
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ec:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d9ee:	f107 0314 	add.w	r3, r7, #20
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7fe fea2 	bl	800c740 <remove_chain>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800da02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da06:	2b00      	cmp	r3, #0
 800da08:	d126      	bne.n	800da58 <f_open+0x1d0>
							res = move_window(fs, dw);
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800da0e:	4618      	mov	r0, r3
 800da10:	f7fe fc4a 	bl	800c2a8 <move_window>
 800da14:	4603      	mov	r3, r0
 800da16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800da1e:	3a01      	subs	r2, #1
 800da20:	60da      	str	r2, [r3, #12]
 800da22:	e019      	b.n	800da58 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800da24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d115      	bne.n	800da58 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800da2c:	7ebb      	ldrb	r3, [r7, #26]
 800da2e:	f003 0310 	and.w	r3, r3, #16
 800da32:	2b00      	cmp	r3, #0
 800da34:	d003      	beq.n	800da3e <f_open+0x1b6>
					res = FR_NO_FILE;
 800da36:	2304      	movs	r3, #4
 800da38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800da3c:	e00c      	b.n	800da58 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800da3e:	79fb      	ldrb	r3, [r7, #7]
 800da40:	f003 0302 	and.w	r3, r3, #2
 800da44:	2b00      	cmp	r3, #0
 800da46:	d007      	beq.n	800da58 <f_open+0x1d0>
 800da48:	7ebb      	ldrb	r3, [r7, #26]
 800da4a:	f003 0301 	and.w	r3, r3, #1
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d002      	beq.n	800da58 <f_open+0x1d0>
						res = FR_DENIED;
 800da52:	2307      	movs	r3, #7
 800da54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800da58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d126      	bne.n	800daae <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800da60:	79fb      	ldrb	r3, [r7, #7]
 800da62:	f003 0308 	and.w	r3, r3, #8
 800da66:	2b00      	cmp	r3, #0
 800da68:	d003      	beq.n	800da72 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800da6a:	79fb      	ldrb	r3, [r7, #7]
 800da6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da70:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800da7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800da80:	79fb      	ldrb	r3, [r7, #7]
 800da82:	2b01      	cmp	r3, #1
 800da84:	bf8c      	ite	hi
 800da86:	2301      	movhi	r3, #1
 800da88:	2300      	movls	r3, #0
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	461a      	mov	r2, r3
 800da8e:	f107 0314 	add.w	r3, r7, #20
 800da92:	4611      	mov	r1, r2
 800da94:	4618      	mov	r0, r3
 800da96:	f7fe fad5 	bl	800c044 <inc_lock>
 800da9a:	4602      	mov	r2, r0
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	691b      	ldr	r3, [r3, #16]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d102      	bne.n	800daae <f_open+0x226>
 800daa8:	2302      	movs	r3, #2
 800daaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800daae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	f040 8095 	bne.w	800dbe2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dabc:	4611      	mov	r1, r2
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7ff f8f6 	bl	800ccb0 <ld_clust>
 800dac4:	4602      	mov	r2, r0
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800daca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dacc:	331c      	adds	r3, #28
 800dace:	4618      	mov	r0, r3
 800dad0:	f7fe f951 	bl	800bd76 <ld_dword>
 800dad4:	4602      	mov	r2, r0
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2200      	movs	r2, #0
 800dade:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dae0:	693a      	ldr	r2, [r7, #16]
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	88da      	ldrh	r2, [r3, #6]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	79fa      	ldrb	r2, [r7, #7]
 800daf2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2200      	movs	r2, #0
 800daf8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2200      	movs	r2, #0
 800dafe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2200      	movs	r2, #0
 800db04:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	3330      	adds	r3, #48	@ 0x30
 800db0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db0e:	2100      	movs	r1, #0
 800db10:	4618      	mov	r0, r3
 800db12:	f7fe f9bb 	bl	800be8c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800db16:	79fb      	ldrb	r3, [r7, #7]
 800db18:	f003 0320 	and.w	r3, r3, #32
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d060      	beq.n	800dbe2 <f_open+0x35a>
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	68db      	ldr	r3, [r3, #12]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d05c      	beq.n	800dbe2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	68da      	ldr	r2, [r3, #12]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	895b      	ldrh	r3, [r3, #10]
 800db34:	025b      	lsls	r3, r3, #9
 800db36:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	689b      	ldr	r3, [r3, #8]
 800db3c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	657b      	str	r3, [r7, #84]	@ 0x54
 800db44:	e016      	b.n	800db74 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fe fc67 	bl	800c41e <get_fat>
 800db50:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800db52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800db54:	2b01      	cmp	r3, #1
 800db56:	d802      	bhi.n	800db5e <f_open+0x2d6>
 800db58:	2302      	movs	r3, #2
 800db5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800db5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800db60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db64:	d102      	bne.n	800db6c <f_open+0x2e4>
 800db66:	2301      	movs	r3, #1
 800db68:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800db6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db70:	1ad3      	subs	r3, r2, r3
 800db72:	657b      	str	r3, [r7, #84]	@ 0x54
 800db74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d103      	bne.n	800db84 <f_open+0x2fc>
 800db7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db80:	429a      	cmp	r2, r3
 800db82:	d8e0      	bhi.n	800db46 <f_open+0x2be>
				}
				fp->clust = clst;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800db8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d127      	bne.n	800dbe2 <f_open+0x35a>
 800db92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d022      	beq.n	800dbe2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7fe fc1d 	bl	800c3e0 <clust2sect>
 800dba6:	6478      	str	r0, [r7, #68]	@ 0x44
 800dba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d103      	bne.n	800dbb6 <f_open+0x32e>
						res = FR_INT_ERR;
 800dbae:	2302      	movs	r3, #2
 800dbb0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800dbb4:	e015      	b.n	800dbe2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dbb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbb8:	0a5a      	lsrs	r2, r3, #9
 800dbba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbbc:	441a      	add	r2, r3
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	7858      	ldrb	r0, [r3, #1]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	6a1a      	ldr	r2, [r3, #32]
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	f7fe f859 	bl	800bc88 <disk_read>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d002      	beq.n	800dbe2 <f_open+0x35a>
 800dbdc:	2301      	movs	r3, #1
 800dbde:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dbe2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d002      	beq.n	800dbf0 <f_open+0x368>
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2200      	movs	r2, #0
 800dbee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dbf0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3760      	adds	r7, #96	@ 0x60
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b08e      	sub	sp, #56	@ 0x38
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	60b9      	str	r1, [r7, #8]
 800dc06:	607a      	str	r2, [r7, #4]
 800dc08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	2200      	movs	r2, #0
 800dc12:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f107 0214 	add.w	r2, r7, #20
 800dc1a:	4611      	mov	r1, r2
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7ff fdb7 	bl	800d790 <validate>
 800dc22:	4603      	mov	r3, r0
 800dc24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dc28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d107      	bne.n	800dc40 <f_read+0x44>
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	7d5b      	ldrb	r3, [r3, #21]
 800dc34:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dc38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d002      	beq.n	800dc46 <f_read+0x4a>
 800dc40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc44:	e115      	b.n	800de72 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	7d1b      	ldrb	r3, [r3, #20]
 800dc4a:	f003 0301 	and.w	r3, r3, #1
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d101      	bne.n	800dc56 <f_read+0x5a>
 800dc52:	2307      	movs	r3, #7
 800dc54:	e10d      	b.n	800de72 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	68da      	ldr	r2, [r3, #12]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	699b      	ldr	r3, [r3, #24]
 800dc5e:	1ad3      	subs	r3, r2, r3
 800dc60:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	6a3b      	ldr	r3, [r7, #32]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	f240 80fe 	bls.w	800de68 <f_read+0x26c>
 800dc6c:	6a3b      	ldr	r3, [r7, #32]
 800dc6e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800dc70:	e0fa      	b.n	800de68 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	699b      	ldr	r3, [r3, #24]
 800dc76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	f040 80c6 	bne.w	800de0c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	699b      	ldr	r3, [r3, #24]
 800dc84:	0a5b      	lsrs	r3, r3, #9
 800dc86:	697a      	ldr	r2, [r7, #20]
 800dc88:	8952      	ldrh	r2, [r2, #10]
 800dc8a:	3a01      	subs	r2, #1
 800dc8c:	4013      	ands	r3, r2
 800dc8e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d12f      	bne.n	800dcf6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	699b      	ldr	r3, [r3, #24]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d103      	bne.n	800dca6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	689b      	ldr	r3, [r3, #8]
 800dca2:	633b      	str	r3, [r7, #48]	@ 0x30
 800dca4:	e013      	b.n	800dcce <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d007      	beq.n	800dcbe <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	699b      	ldr	r3, [r3, #24]
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f7fe fe40 	bl	800c93a <clmt_clust>
 800dcba:	6338      	str	r0, [r7, #48]	@ 0x30
 800dcbc:	e007      	b.n	800dcce <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800dcbe:	68fa      	ldr	r2, [r7, #12]
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	69db      	ldr	r3, [r3, #28]
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	4610      	mov	r0, r2
 800dcc8:	f7fe fba9 	bl	800c41e <get_fat>
 800dccc:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800dcce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd0:	2b01      	cmp	r3, #1
 800dcd2:	d804      	bhi.n	800dcde <f_read+0xe2>
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2202      	movs	r2, #2
 800dcd8:	755a      	strb	r2, [r3, #21]
 800dcda:	2302      	movs	r3, #2
 800dcdc:	e0c9      	b.n	800de72 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dcde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce4:	d104      	bne.n	800dcf0 <f_read+0xf4>
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2201      	movs	r2, #1
 800dcea:	755a      	strb	r2, [r3, #21]
 800dcec:	2301      	movs	r3, #1
 800dcee:	e0c0      	b.n	800de72 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dcf4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dcf6:	697a      	ldr	r2, [r7, #20]
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	69db      	ldr	r3, [r3, #28]
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	4610      	mov	r0, r2
 800dd00:	f7fe fb6e 	bl	800c3e0 <clust2sect>
 800dd04:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d104      	bne.n	800dd16 <f_read+0x11a>
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2202      	movs	r2, #2
 800dd10:	755a      	strb	r2, [r3, #21]
 800dd12:	2302      	movs	r3, #2
 800dd14:	e0ad      	b.n	800de72 <f_read+0x276>
			sect += csect;
 800dd16:	69ba      	ldr	r2, [r7, #24]
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	4413      	add	r3, r2
 800dd1c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	0a5b      	lsrs	r3, r3, #9
 800dd22:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800dd24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d039      	beq.n	800dd9e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dd2a:	69fa      	ldr	r2, [r7, #28]
 800dd2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd2e:	4413      	add	r3, r2
 800dd30:	697a      	ldr	r2, [r7, #20]
 800dd32:	8952      	ldrh	r2, [r2, #10]
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d905      	bls.n	800dd44 <f_read+0x148>
					cc = fs->csize - csect;
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	895b      	ldrh	r3, [r3, #10]
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	1ad3      	subs	r3, r2, r3
 800dd42:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	7858      	ldrb	r0, [r3, #1]
 800dd48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd4a:	69ba      	ldr	r2, [r7, #24]
 800dd4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd4e:	f7fd ff9b 	bl	800bc88 <disk_read>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d004      	beq.n	800dd62 <f_read+0x166>
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	755a      	strb	r2, [r3, #21]
 800dd5e:	2301      	movs	r3, #1
 800dd60:	e087      	b.n	800de72 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	7d1b      	ldrb	r3, [r3, #20]
 800dd66:	b25b      	sxtb	r3, r3
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	da14      	bge.n	800dd96 <f_read+0x19a>
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6a1a      	ldr	r2, [r3, #32]
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	1ad3      	subs	r3, r2, r3
 800dd74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d90d      	bls.n	800dd96 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	6a1a      	ldr	r2, [r3, #32]
 800dd7e:	69bb      	ldr	r3, [r7, #24]
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	025b      	lsls	r3, r3, #9
 800dd84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd86:	18d0      	adds	r0, r2, r3
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	3330      	adds	r3, #48	@ 0x30
 800dd8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd90:	4619      	mov	r1, r3
 800dd92:	f7fe f85a 	bl	800be4a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800dd96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd98:	025b      	lsls	r3, r3, #9
 800dd9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800dd9c:	e050      	b.n	800de40 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	6a1b      	ldr	r3, [r3, #32]
 800dda2:	69ba      	ldr	r2, [r7, #24]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d02e      	beq.n	800de06 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	7d1b      	ldrb	r3, [r3, #20]
 800ddac:	b25b      	sxtb	r3, r3
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	da18      	bge.n	800dde4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	7858      	ldrb	r0, [r3, #1]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	6a1a      	ldr	r2, [r3, #32]
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	f7fd ff81 	bl	800bcc8 <disk_write>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d004      	beq.n	800ddd6 <f_read+0x1da>
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2201      	movs	r2, #1
 800ddd0:	755a      	strb	r2, [r3, #21]
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	e04d      	b.n	800de72 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	7d1b      	ldrb	r3, [r3, #20]
 800ddda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ddde:	b2da      	uxtb	r2, r3
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	7858      	ldrb	r0, [r3, #1]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ddee:	2301      	movs	r3, #1
 800ddf0:	69ba      	ldr	r2, [r7, #24]
 800ddf2:	f7fd ff49 	bl	800bc88 <disk_read>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d004      	beq.n	800de06 <f_read+0x20a>
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2201      	movs	r2, #1
 800de00:	755a      	strb	r2, [r3, #21]
 800de02:	2301      	movs	r3, #1
 800de04:	e035      	b.n	800de72 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	69ba      	ldr	r2, [r7, #24]
 800de0a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	699b      	ldr	r3, [r3, #24]
 800de10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de14:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800de18:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800de1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d901      	bls.n	800de26 <f_read+0x22a>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	699b      	ldr	r3, [r3, #24]
 800de30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de34:	4413      	add	r3, r2
 800de36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de38:	4619      	mov	r1, r3
 800de3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800de3c:	f7fe f805 	bl	800be4a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800de40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de44:	4413      	add	r3, r2
 800de46:	627b      	str	r3, [r7, #36]	@ 0x24
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	699a      	ldr	r2, [r3, #24]
 800de4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de4e:	441a      	add	r2, r3
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	619a      	str	r2, [r3, #24]
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	681a      	ldr	r2, [r3, #0]
 800de58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de5a:	441a      	add	r2, r3
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	601a      	str	r2, [r3, #0]
 800de60:	687a      	ldr	r2, [r7, #4]
 800de62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de64:	1ad3      	subs	r3, r2, r3
 800de66:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	f47f af01 	bne.w	800dc72 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3738      	adds	r7, #56	@ 0x38
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b08c      	sub	sp, #48	@ 0x30
 800de7e:	af00      	add	r7, sp, #0
 800de80:	60f8      	str	r0, [r7, #12]
 800de82:	60b9      	str	r1, [r7, #8]
 800de84:	607a      	str	r2, [r7, #4]
 800de86:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	2200      	movs	r2, #0
 800de90:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f107 0210 	add.w	r2, r7, #16
 800de98:	4611      	mov	r1, r2
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7ff fc78 	bl	800d790 <validate>
 800dea0:	4603      	mov	r3, r0
 800dea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dea6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d107      	bne.n	800debe <f_write+0x44>
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	7d5b      	ldrb	r3, [r3, #21]
 800deb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800deb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800deba:	2b00      	cmp	r3, #0
 800debc:	d002      	beq.n	800dec4 <f_write+0x4a>
 800debe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dec2:	e14b      	b.n	800e15c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	7d1b      	ldrb	r3, [r3, #20]
 800dec8:	f003 0302 	and.w	r3, r3, #2
 800decc:	2b00      	cmp	r3, #0
 800dece:	d101      	bne.n	800ded4 <f_write+0x5a>
 800ded0:	2307      	movs	r3, #7
 800ded2:	e143      	b.n	800e15c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	699a      	ldr	r2, [r3, #24]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	441a      	add	r2, r3
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	699b      	ldr	r3, [r3, #24]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	f080 812d 	bcs.w	800e140 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	699b      	ldr	r3, [r3, #24]
 800deea:	43db      	mvns	r3, r3
 800deec:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800deee:	e127      	b.n	800e140 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	699b      	ldr	r3, [r3, #24]
 800def4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800def8:	2b00      	cmp	r3, #0
 800defa:	f040 80e3 	bne.w	800e0c4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	699b      	ldr	r3, [r3, #24]
 800df02:	0a5b      	lsrs	r3, r3, #9
 800df04:	693a      	ldr	r2, [r7, #16]
 800df06:	8952      	ldrh	r2, [r2, #10]
 800df08:	3a01      	subs	r2, #1
 800df0a:	4013      	ands	r3, r2
 800df0c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d143      	bne.n	800df9c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	699b      	ldr	r3, [r3, #24]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d10c      	bne.n	800df36 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800df22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df24:	2b00      	cmp	r3, #0
 800df26:	d11a      	bne.n	800df5e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2100      	movs	r1, #0
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7fe fc6c 	bl	800c80a <create_chain>
 800df32:	62b8      	str	r0, [r7, #40]	@ 0x28
 800df34:	e013      	b.n	800df5e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d007      	beq.n	800df4e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	699b      	ldr	r3, [r3, #24]
 800df42:	4619      	mov	r1, r3
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f7fe fcf8 	bl	800c93a <clmt_clust>
 800df4a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800df4c:	e007      	b.n	800df5e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800df4e:	68fa      	ldr	r2, [r7, #12]
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	69db      	ldr	r3, [r3, #28]
 800df54:	4619      	mov	r1, r3
 800df56:	4610      	mov	r0, r2
 800df58:	f7fe fc57 	bl	800c80a <create_chain>
 800df5c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800df5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df60:	2b00      	cmp	r3, #0
 800df62:	f000 80f2 	beq.w	800e14a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800df66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d104      	bne.n	800df76 <f_write+0xfc>
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2202      	movs	r2, #2
 800df70:	755a      	strb	r2, [r3, #21]
 800df72:	2302      	movs	r3, #2
 800df74:	e0f2      	b.n	800e15c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800df76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df7c:	d104      	bne.n	800df88 <f_write+0x10e>
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2201      	movs	r2, #1
 800df82:	755a      	strb	r2, [r3, #21]
 800df84:	2301      	movs	r3, #1
 800df86:	e0e9      	b.n	800e15c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df8c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	689b      	ldr	r3, [r3, #8]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d102      	bne.n	800df9c <f_write+0x122>
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df9a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	7d1b      	ldrb	r3, [r3, #20]
 800dfa0:	b25b      	sxtb	r3, r3
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	da18      	bge.n	800dfd8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	7858      	ldrb	r0, [r3, #1]
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6a1a      	ldr	r2, [r3, #32]
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	f7fd fe87 	bl	800bcc8 <disk_write>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d004      	beq.n	800dfca <f_write+0x150>
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	2201      	movs	r2, #1
 800dfc4:	755a      	strb	r2, [r3, #21]
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	e0c8      	b.n	800e15c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	7d1b      	ldrb	r3, [r3, #20]
 800dfce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dfd2:	b2da      	uxtb	r2, r3
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dfd8:	693a      	ldr	r2, [r7, #16]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	69db      	ldr	r3, [r3, #28]
 800dfde:	4619      	mov	r1, r3
 800dfe0:	4610      	mov	r0, r2
 800dfe2:	f7fe f9fd 	bl	800c3e0 <clust2sect>
 800dfe6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d104      	bne.n	800dff8 <f_write+0x17e>
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2202      	movs	r2, #2
 800dff2:	755a      	strb	r2, [r3, #21]
 800dff4:	2302      	movs	r3, #2
 800dff6:	e0b1      	b.n	800e15c <f_write+0x2e2>
			sect += csect;
 800dff8:	697a      	ldr	r2, [r7, #20]
 800dffa:	69bb      	ldr	r3, [r7, #24]
 800dffc:	4413      	add	r3, r2
 800dffe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	0a5b      	lsrs	r3, r3, #9
 800e004:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e006:	6a3b      	ldr	r3, [r7, #32]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d03c      	beq.n	800e086 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e00c:	69ba      	ldr	r2, [r7, #24]
 800e00e:	6a3b      	ldr	r3, [r7, #32]
 800e010:	4413      	add	r3, r2
 800e012:	693a      	ldr	r2, [r7, #16]
 800e014:	8952      	ldrh	r2, [r2, #10]
 800e016:	4293      	cmp	r3, r2
 800e018:	d905      	bls.n	800e026 <f_write+0x1ac>
					cc = fs->csize - csect;
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	895b      	ldrh	r3, [r3, #10]
 800e01e:	461a      	mov	r2, r3
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	1ad3      	subs	r3, r2, r3
 800e024:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	7858      	ldrb	r0, [r3, #1]
 800e02a:	6a3b      	ldr	r3, [r7, #32]
 800e02c:	697a      	ldr	r2, [r7, #20]
 800e02e:	69f9      	ldr	r1, [r7, #28]
 800e030:	f7fd fe4a 	bl	800bcc8 <disk_write>
 800e034:	4603      	mov	r3, r0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d004      	beq.n	800e044 <f_write+0x1ca>
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2201      	movs	r2, #1
 800e03e:	755a      	strb	r2, [r3, #21]
 800e040:	2301      	movs	r3, #1
 800e042:	e08b      	b.n	800e15c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	6a1a      	ldr	r2, [r3, #32]
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	1ad3      	subs	r3, r2, r3
 800e04c:	6a3a      	ldr	r2, [r7, #32]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d915      	bls.n	800e07e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6a1a      	ldr	r2, [r3, #32]
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	1ad3      	subs	r3, r2, r3
 800e060:	025b      	lsls	r3, r3, #9
 800e062:	69fa      	ldr	r2, [r7, #28]
 800e064:	4413      	add	r3, r2
 800e066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e06a:	4619      	mov	r1, r3
 800e06c:	f7fd feed 	bl	800be4a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	7d1b      	ldrb	r3, [r3, #20]
 800e074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e078:	b2da      	uxtb	r2, r3
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e07e:	6a3b      	ldr	r3, [r7, #32]
 800e080:	025b      	lsls	r3, r3, #9
 800e082:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800e084:	e03f      	b.n	800e106 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	6a1b      	ldr	r3, [r3, #32]
 800e08a:	697a      	ldr	r2, [r7, #20]
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d016      	beq.n	800e0be <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	699a      	ldr	r2, [r3, #24]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e098:	429a      	cmp	r2, r3
 800e09a:	d210      	bcs.n	800e0be <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	7858      	ldrb	r0, [r3, #1]
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	697a      	ldr	r2, [r7, #20]
 800e0aa:	f7fd fded 	bl	800bc88 <disk_read>
 800e0ae:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d004      	beq.n	800e0be <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	755a      	strb	r2, [r3, #21]
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	e04e      	b.n	800e15c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	697a      	ldr	r2, [r7, #20]
 800e0c2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	699b      	ldr	r3, [r3, #24]
 800e0c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0cc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e0d0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e0d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d901      	bls.n	800e0de <f_write+0x264>
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	699b      	ldr	r3, [r3, #24]
 800e0e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0ec:	4413      	add	r3, r2
 800e0ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0f0:	69f9      	ldr	r1, [r7, #28]
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fd fea9 	bl	800be4a <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	7d1b      	ldrb	r3, [r3, #20]
 800e0fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e100:	b2da      	uxtb	r2, r3
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e106:	69fa      	ldr	r2, [r7, #28]
 800e108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e10a:	4413      	add	r3, r2
 800e10c:	61fb      	str	r3, [r7, #28]
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	699a      	ldr	r2, [r3, #24]
 800e112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e114:	441a      	add	r2, r3
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	619a      	str	r2, [r3, #24]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	68da      	ldr	r2, [r3, #12]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	699b      	ldr	r3, [r3, #24]
 800e122:	429a      	cmp	r2, r3
 800e124:	bf38      	it	cc
 800e126:	461a      	movcc	r2, r3
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	60da      	str	r2, [r3, #12]
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	681a      	ldr	r2, [r3, #0]
 800e130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e132:	441a      	add	r2, r3
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	601a      	str	r2, [r3, #0]
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13c:	1ad3      	subs	r3, r2, r3
 800e13e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	f47f aed4 	bne.w	800def0 <f_write+0x76>
 800e148:	e000      	b.n	800e14c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e14a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	7d1b      	ldrb	r3, [r3, #20]
 800e150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e154:	b2da      	uxtb	r2, r3
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e15a:	2300      	movs	r3, #0
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3730      	adds	r7, #48	@ 0x30
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b086      	sub	sp, #24
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f107 0208 	add.w	r2, r7, #8
 800e172:	4611      	mov	r1, r2
 800e174:	4618      	mov	r0, r3
 800e176:	f7ff fb0b 	bl	800d790 <validate>
 800e17a:	4603      	mov	r3, r0
 800e17c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e17e:	7dfb      	ldrb	r3, [r7, #23]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d168      	bne.n	800e256 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	7d1b      	ldrb	r3, [r3, #20]
 800e188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d062      	beq.n	800e256 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	7d1b      	ldrb	r3, [r3, #20]
 800e194:	b25b      	sxtb	r3, r3
 800e196:	2b00      	cmp	r3, #0
 800e198:	da15      	bge.n	800e1c6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	7858      	ldrb	r0, [r3, #1]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6a1a      	ldr	r2, [r3, #32]
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	f7fd fd8d 	bl	800bcc8 <disk_write>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d001      	beq.n	800e1b8 <f_sync+0x54>
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	e04f      	b.n	800e258 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	7d1b      	ldrb	r3, [r3, #20]
 800e1bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1c0:	b2da      	uxtb	r2, r3
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e1c6:	f7f9 ff19 	bl	8007ffc <get_fattime>
 800e1ca:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e1cc:	68ba      	ldr	r2, [r7, #8]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	4610      	mov	r0, r2
 800e1d6:	f7fe f867 	bl	800c2a8 <move_window>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e1de:	7dfb      	ldrb	r3, [r7, #23]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d138      	bne.n	800e256 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1e8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	330b      	adds	r3, #11
 800e1ee:	781a      	ldrb	r2, [r3, #0]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	330b      	adds	r3, #11
 800e1f4:	f042 0220 	orr.w	r2, r2, #32
 800e1f8:	b2d2      	uxtb	r2, r2
 800e1fa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6818      	ldr	r0, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	689b      	ldr	r3, [r3, #8]
 800e204:	461a      	mov	r2, r3
 800e206:	68f9      	ldr	r1, [r7, #12]
 800e208:	f7fe fd71 	bl	800ccee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f103 021c 	add.w	r2, r3, #28
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	68db      	ldr	r3, [r3, #12]
 800e216:	4619      	mov	r1, r3
 800e218:	4610      	mov	r0, r2
 800e21a:	f7fd fdea 	bl	800bdf2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	3316      	adds	r3, #22
 800e222:	6939      	ldr	r1, [r7, #16]
 800e224:	4618      	mov	r0, r3
 800e226:	f7fd fde4 	bl	800bdf2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	3312      	adds	r3, #18
 800e22e:	2100      	movs	r1, #0
 800e230:	4618      	mov	r0, r3
 800e232:	f7fd fdc3 	bl	800bdbc <st_word>
					fs->wflag = 1;
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	2201      	movs	r2, #1
 800e23a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	4618      	mov	r0, r3
 800e240:	f7fe f860 	bl	800c304 <sync_fs>
 800e244:	4603      	mov	r3, r0
 800e246:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	7d1b      	ldrb	r3, [r3, #20]
 800e24c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e250:	b2da      	uxtb	r2, r3
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e256:	7dfb      	ldrb	r3, [r7, #23]
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3718      	adds	r7, #24
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f7ff ff7b 	bl	800e164 <f_sync>
 800e26e:	4603      	mov	r3, r0
 800e270:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e272:	7bfb      	ldrb	r3, [r7, #15]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d118      	bne.n	800e2aa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f107 0208 	add.w	r2, r7, #8
 800e27e:	4611      	mov	r1, r2
 800e280:	4618      	mov	r0, r3
 800e282:	f7ff fa85 	bl	800d790 <validate>
 800e286:	4603      	mov	r3, r0
 800e288:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e28a:	7bfb      	ldrb	r3, [r7, #15]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d10c      	bne.n	800e2aa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	691b      	ldr	r3, [r3, #16]
 800e294:	4618      	mov	r0, r3
 800e296:	f7fd ff63 	bl	800c160 <dec_lock>
 800e29a:	4603      	mov	r3, r0
 800e29c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e29e:	7bfb      	ldrb	r3, [r7, #15]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d102      	bne.n	800e2aa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3710      	adds	r7, #16
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b086      	sub	sp, #24
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d101      	bne.n	800e2c8 <f_opendir+0x14>
 800e2c4:	2309      	movs	r3, #9
 800e2c6:	e064      	b.n	800e392 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e2cc:	f107 010c 	add.w	r1, r7, #12
 800e2d0:	463b      	mov	r3, r7
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7ff f80f 	bl	800d2f8 <find_volume>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e2de:	7dfb      	ldrb	r3, [r7, #23]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d14f      	bne.n	800e384 <f_opendir+0xd0>
		obj->fs = fs;
 800e2e4:	68fa      	ldr	r2, [r7, #12]
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f7fe fef6 	bl	800d0e0 <follow_path>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e2f8:	7dfb      	ldrb	r3, [r7, #23]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d13d      	bne.n	800e37a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e304:	b25b      	sxtb	r3, r3
 800e306:	2b00      	cmp	r3, #0
 800e308:	db12      	blt.n	800e330 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	799b      	ldrb	r3, [r3, #6]
 800e30e:	f003 0310 	and.w	r3, r3, #16
 800e312:	2b00      	cmp	r3, #0
 800e314:	d00a      	beq.n	800e32c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e316:	68fa      	ldr	r2, [r7, #12]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6a1b      	ldr	r3, [r3, #32]
 800e31c:	4619      	mov	r1, r3
 800e31e:	4610      	mov	r0, r2
 800e320:	f7fe fcc6 	bl	800ccb0 <ld_clust>
 800e324:	4602      	mov	r2, r0
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	609a      	str	r2, [r3, #8]
 800e32a:	e001      	b.n	800e330 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e32c:	2305      	movs	r3, #5
 800e32e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e330:	7dfb      	ldrb	r3, [r7, #23]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d121      	bne.n	800e37a <f_opendir+0xc6>
				obj->id = fs->id;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	88da      	ldrh	r2, [r3, #6]
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e33e:	2100      	movs	r1, #0
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f7fe fb2e 	bl	800c9a2 <dir_sdi>
 800e346:	4603      	mov	r3, r0
 800e348:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e34a:	7dfb      	ldrb	r3, [r7, #23]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d114      	bne.n	800e37a <f_opendir+0xc6>
					if (obj->sclust) {
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	689b      	ldr	r3, [r3, #8]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d00d      	beq.n	800e374 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e358:	2100      	movs	r1, #0
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f7fd fe72 	bl	800c044 <inc_lock>
 800e360:	4602      	mov	r2, r0
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	691b      	ldr	r3, [r3, #16]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d105      	bne.n	800e37a <f_opendir+0xc6>
 800e36e:	2312      	movs	r3, #18
 800e370:	75fb      	strb	r3, [r7, #23]
 800e372:	e002      	b.n	800e37a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	2200      	movs	r2, #0
 800e378:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e37a:	7dfb      	ldrb	r3, [r7, #23]
 800e37c:	2b04      	cmp	r3, #4
 800e37e:	d101      	bne.n	800e384 <f_opendir+0xd0>
 800e380:	2305      	movs	r3, #5
 800e382:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e384:	7dfb      	ldrb	r3, [r7, #23]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d002      	beq.n	800e390 <f_opendir+0xdc>
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	2200      	movs	r2, #0
 800e38e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e390:	7dfb      	ldrb	r3, [r7, #23]
}
 800e392:	4618      	mov	r0, r3
 800e394:	3718      	adds	r7, #24
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}

0800e39a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e39a:	b580      	push	{r7, lr}
 800e39c:	b084      	sub	sp, #16
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f107 0208 	add.w	r2, r7, #8
 800e3a8:	4611      	mov	r1, r2
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7ff f9f0 	bl	800d790 <validate>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e3b4:	7bfb      	ldrb	r3, [r7, #15]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d110      	bne.n	800e3dc <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	691b      	ldr	r3, [r3, #16]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d006      	beq.n	800e3d0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	691b      	ldr	r3, [r3, #16]
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7fd feca 	bl	800c160 <dec_lock>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e3d0:	7bfb      	ldrb	r3, [r7, #15]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d102      	bne.n	800e3dc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3710      	adds	r7, #16
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}

0800e3e6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e3e6:	b580      	push	{r7, lr}
 800e3e8:	b084      	sub	sp, #16
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	6078      	str	r0, [r7, #4]
 800e3ee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f107 0208 	add.w	r2, r7, #8
 800e3f6:	4611      	mov	r1, r2
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7ff f9c9 	bl	800d790 <validate>
 800e3fe:	4603      	mov	r3, r0
 800e400:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e402:	7bfb      	ldrb	r3, [r7, #15]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d126      	bne.n	800e456 <f_readdir+0x70>
		if (!fno) {
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d106      	bne.n	800e41c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e40e:	2100      	movs	r1, #0
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f7fe fac6 	bl	800c9a2 <dir_sdi>
 800e416:	4603      	mov	r3, r0
 800e418:	73fb      	strb	r3, [r7, #15]
 800e41a:	e01c      	b.n	800e456 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e41c:	2100      	movs	r1, #0
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f7fe fc85 	bl	800cd2e <dir_read>
 800e424:	4603      	mov	r3, r0
 800e426:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e428:	7bfb      	ldrb	r3, [r7, #15]
 800e42a:	2b04      	cmp	r3, #4
 800e42c:	d101      	bne.n	800e432 <f_readdir+0x4c>
 800e42e:	2300      	movs	r3, #0
 800e430:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e432:	7bfb      	ldrb	r3, [r7, #15]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d10e      	bne.n	800e456 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e438:	6839      	ldr	r1, [r7, #0]
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f7fe fd5b 	bl	800cef6 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e440:	2100      	movs	r1, #0
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f7fe fb28 	bl	800ca98 <dir_next>
 800e448:	4603      	mov	r3, r0
 800e44a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e44c:	7bfb      	ldrb	r3, [r7, #15]
 800e44e:	2b04      	cmp	r3, #4
 800e450:	d101      	bne.n	800e456 <f_readdir+0x70>
 800e452:	2300      	movs	r3, #0
 800e454:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e456:	7bfb      	ldrb	r3, [r7, #15]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3710      	adds	r7, #16
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e460:	b480      	push	{r7}
 800e462:	b087      	sub	sp, #28
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	4613      	mov	r3, r2
 800e46c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e46e:	2301      	movs	r3, #1
 800e470:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e472:	2300      	movs	r3, #0
 800e474:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e476:	4b1f      	ldr	r3, [pc, #124]	@ (800e4f4 <FATFS_LinkDriverEx+0x94>)
 800e478:	7a5b      	ldrb	r3, [r3, #9]
 800e47a:	b2db      	uxtb	r3, r3
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d131      	bne.n	800e4e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e480:	4b1c      	ldr	r3, [pc, #112]	@ (800e4f4 <FATFS_LinkDriverEx+0x94>)
 800e482:	7a5b      	ldrb	r3, [r3, #9]
 800e484:	b2db      	uxtb	r3, r3
 800e486:	461a      	mov	r2, r3
 800e488:	4b1a      	ldr	r3, [pc, #104]	@ (800e4f4 <FATFS_LinkDriverEx+0x94>)
 800e48a:	2100      	movs	r1, #0
 800e48c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e48e:	4b19      	ldr	r3, [pc, #100]	@ (800e4f4 <FATFS_LinkDriverEx+0x94>)
 800e490:	7a5b      	ldrb	r3, [r3, #9]
 800e492:	b2db      	uxtb	r3, r3
 800e494:	4a17      	ldr	r2, [pc, #92]	@ (800e4f4 <FATFS_LinkDriverEx+0x94>)
 800e496:	009b      	lsls	r3, r3, #2
 800e498:	4413      	add	r3, r2
 800e49a:	68fa      	ldr	r2, [r7, #12]
 800e49c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e49e:	4b15      	ldr	r3, [pc, #84]	@ (800e4f4 <FATFS_LinkDriverEx+0x94>)
 800e4a0:	7a5b      	ldrb	r3, [r3, #9]
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	4b13      	ldr	r3, [pc, #76]	@ (800e4f4 <FATFS_LinkDriverEx+0x94>)
 800e4a8:	4413      	add	r3, r2
 800e4aa:	79fa      	ldrb	r2, [r7, #7]
 800e4ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e4ae:	4b11      	ldr	r3, [pc, #68]	@ (800e4f4 <FATFS_LinkDriverEx+0x94>)
 800e4b0:	7a5b      	ldrb	r3, [r3, #9]
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	1c5a      	adds	r2, r3, #1
 800e4b6:	b2d1      	uxtb	r1, r2
 800e4b8:	4a0e      	ldr	r2, [pc, #56]	@ (800e4f4 <FATFS_LinkDriverEx+0x94>)
 800e4ba:	7251      	strb	r1, [r2, #9]
 800e4bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e4be:	7dbb      	ldrb	r3, [r7, #22]
 800e4c0:	3330      	adds	r3, #48	@ 0x30
 800e4c2:	b2da      	uxtb	r2, r3
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	223a      	movs	r2, #58	@ 0x3a
 800e4ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	3302      	adds	r3, #2
 800e4d4:	222f      	movs	r2, #47	@ 0x2f
 800e4d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	3303      	adds	r3, #3
 800e4dc:	2200      	movs	r2, #0
 800e4de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e4e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	371c      	adds	r7, #28
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr
 800e4f2:	bf00      	nop
 800e4f4:	2001367c 	.word	0x2001367c

0800e4f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e502:	2200      	movs	r2, #0
 800e504:	6839      	ldr	r1, [r7, #0]
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f7ff ffaa 	bl	800e460 <FATFS_LinkDriverEx>
 800e50c:	4603      	mov	r3, r0
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3708      	adds	r7, #8
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
	...

0800e518 <Log_Init>:
QueueHandle_t xLogQueue;
SemaphoreHandle_t xLogMutex;
extern QueueHandle_t xESP32Queue; 

void Log_Init(UART_HandleTypeDef* huart)
{
 800e518:	b480      	push	{r7}
 800e51a:	b083      	sub	sp, #12
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
	log_huart = huart;
 800e520:	4a04      	ldr	r2, [pc, #16]	@ (800e534 <Log_Init+0x1c>)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6013      	str	r3, [r2, #0]
}
 800e526:	bf00      	nop
 800e528:	370c      	adds	r7, #12
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	20013688 	.word	0x20013688

0800e538 <Log_OS_Resources_Init>:

void Log_OS_Resources_Init()
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 800e53e:	af00      	add	r7, sp, #0
	xLogQueue = xQueueCreate(4, sizeof(LogMsgStruct));
 800e540:	2200      	movs	r2, #0
 800e542:	2164      	movs	r1, #100	@ 0x64
 800e544:	2004      	movs	r0, #4
 800e546:	f7fa fbb3 	bl	8008cb0 <xQueueGenericCreate>
 800e54a:	4603      	mov	r3, r0
 800e54c:	4a1d      	ldr	r2, [pc, #116]	@ (800e5c4 <Log_OS_Resources_Init+0x8c>)
 800e54e:	6013      	str	r3, [r2, #0]
	xLogMutex = xSemaphoreCreateMutex();
 800e550:	2001      	movs	r0, #1
 800e552:	f7fa fc27 	bl	8008da4 <xQueueCreateMutex>
 800e556:	4603      	mov	r3, r0
 800e558:	4a1b      	ldr	r2, [pc, #108]	@ (800e5c8 <Log_OS_Resources_Init+0x90>)
 800e55a:	6013      	str	r3, [r2, #0]

	// creat and clear
	FIL logFile;
	FRESULT fr;
	xSemaphoreTake(xLogMutex, portMAX_DELAY);
 800e55c:	4b1a      	ldr	r3, [pc, #104]	@ (800e5c8 <Log_OS_Resources_Init+0x90>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f04f 31ff 	mov.w	r1, #4294967295
 800e564:	4618      	mov	r0, r3
 800e566:	f7fa feb5 	bl	80092d4 <xQueueSemaphoreTake>
	fr = f_open(&logFile, "log.txt", FA_WRITE | FA_CREATE_ALWAYS);
 800e56a:	1d3b      	adds	r3, r7, #4
 800e56c:	220a      	movs	r2, #10
 800e56e:	4917      	ldr	r1, [pc, #92]	@ (800e5cc <Log_OS_Resources_Init+0x94>)
 800e570:	4618      	mov	r0, r3
 800e572:	f7ff f989 	bl	800d888 <f_open>
 800e576:	4603      	mov	r3, r0
 800e578:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
	if (fr == FR_OK) {
 800e57c:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 800e580:	2b00      	cmp	r3, #0
 800e582:	d10a      	bne.n	800e59a <Log_OS_Resources_Init+0x62>
		f_close(&logFile);
 800e584:	1d3b      	adds	r3, r7, #4
 800e586:	4618      	mov	r0, r3
 800e588:	f7ff fe6a 	bl	800e260 <f_close>
		SendMsg(log_huart, "Log file cleared.\r\n");
 800e58c:	4b10      	ldr	r3, [pc, #64]	@ (800e5d0 <Log_OS_Resources_Init+0x98>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4910      	ldr	r1, [pc, #64]	@ (800e5d4 <Log_OS_Resources_Init+0x9c>)
 800e592:	4618      	mov	r0, r3
 800e594:	f7f2 fd1e 	bl	8000fd4 <SendMsg>
 800e598:	e007      	b.n	800e5aa <Log_OS_Resources_Init+0x72>
	} else {
		SendMsg(log_huart, "Failed to clear log file, error = %d\r\n", fr);
 800e59a:	4b0d      	ldr	r3, [pc, #52]	@ (800e5d0 <Log_OS_Resources_Init+0x98>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f897 2237 	ldrb.w	r2, [r7, #567]	@ 0x237
 800e5a2:	490d      	ldr	r1, [pc, #52]	@ (800e5d8 <Log_OS_Resources_Init+0xa0>)
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7f2 fd15 	bl	8000fd4 <SendMsg>
	}
	xSemaphoreGive(xLogMutex);
 800e5aa:	4b07      	ldr	r3, [pc, #28]	@ (800e5c8 <Log_OS_Resources_Init+0x90>)
 800e5ac:	6818      	ldr	r0, [r3, #0]
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	2100      	movs	r1, #0
 800e5b4:	f7fa fc0e 	bl	8008dd4 <xQueueGenericSend>
}
 800e5b8:	bf00      	nop
 800e5ba:	f507 770e 	add.w	r7, r7, #568	@ 0x238
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	2001368c 	.word	0x2001368c
 800e5c8:	20013690 	.word	0x20013690
 800e5cc:	08012178 	.word	0x08012178
 800e5d0:	20013688 	.word	0x20013688
 800e5d4:	08012180 	.word	0x08012180
 800e5d8:	08012194 	.word	0x08012194

0800e5dc <LogWriter>:

void LogWriter(const char *format, ...)
{
 800e5dc:	b40f      	push	{r0, r1, r2, r3}
 800e5de:	b580      	push	{r7, lr}
 800e5e0:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800e5e4:	af02      	add	r7, sp, #8
	char* buf[100];
	va_list args;
	va_start(args, format);
 800e5e6:	f507 7207 	add.w	r2, r7, #540	@ 0x21c
 800e5ea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800e5ee:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800e5f2:	601a      	str	r2, [r3, #0]
	vsnprintf(buf, sizeof(buf), format, args);
 800e5f4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800e5f8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800e5fc:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 800e606:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800e60a:	f001 ffc7 	bl	801059c <vsniprintf>
	va_end(args);

	char time[20];
	getTimeSinceStart(time, sizeof(time));
 800e60e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800e612:	2114      	movs	r1, #20
 800e614:	4618      	mov	r0, r3
 800e616:	f001 fcdf 	bl	800ffd8 <getTimeSinceStart>

	LogMsgStruct logMsg;
	snprintf(logMsg.msg, sizeof(logMsg.msg), "%s  %s\n\r", time, buf);
 800e61a:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800e61e:	1d38      	adds	r0, r7, #4
 800e620:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800e624:	9300      	str	r3, [sp, #0]
 800e626:	4613      	mov	r3, r2
 800e628:	4a0d      	ldr	r2, [pc, #52]	@ (800e660 <LogWriter+0x84>)
 800e62a:	2164      	movs	r1, #100	@ 0x64
 800e62c:	f001 febe 	bl	80103ac <sniprintf>
	if (xQueueSend(xLogQueue, &logMsg, pdMS_TO_TICKS(100)) != pdPASS)
 800e630:	4b0c      	ldr	r3, [pc, #48]	@ (800e664 <LogWriter+0x88>)
 800e632:	6818      	ldr	r0, [r3, #0]
 800e634:	1d39      	adds	r1, r7, #4
 800e636:	2300      	movs	r3, #0
 800e638:	2264      	movs	r2, #100	@ 0x64
 800e63a:	f7fa fbcb 	bl	8008dd4 <xQueueGenericSend>
 800e63e:	4603      	mov	r3, r0
 800e640:	2b01      	cmp	r3, #1
 800e642:	d005      	beq.n	800e650 <LogWriter+0x74>
	{
		SendMsg(log_huart, "Failed to send log message!\r\n");
 800e644:	4b08      	ldr	r3, [pc, #32]	@ (800e668 <LogWriter+0x8c>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4908      	ldr	r1, [pc, #32]	@ (800e66c <LogWriter+0x90>)
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7f2 fcc2 	bl	8000fd4 <SendMsg>
	}
}
 800e650:	bf00      	nop
 800e652:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800e656:	46bd      	mov	sp, r7
 800e658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e65c:	b004      	add	sp, #16
 800e65e:	4770      	bx	lr
 800e660:	080121bc 	.word	0x080121bc
 800e664:	2001368c 	.word	0x2001368c
 800e668:	20013688 	.word	0x20013688
 800e66c:	080121c8 	.word	0x080121c8

0800e670 <PrintLogFile>:

void PrintLogFile(void) 
{
 800e670:	b580      	push	{r7, lr}
 800e672:	f5ad 7d2e 	sub.w	sp, sp, #696	@ 0x2b8
 800e676:	af00      	add	r7, sp, #0
	FIL logFile;
	FRESULT fr;
	UINT br;
	char buffer[128];
	xSemaphoreTake(xLogMutex, portMAX_DELAY);
 800e678:	4b35      	ldr	r3, [pc, #212]	@ (800e750 <PrintLogFile+0xe0>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f04f 31ff 	mov.w	r1, #4294967295
 800e680:	4618      	mov	r0, r3
 800e682:	f7fa fe27 	bl	80092d4 <xQueueSemaphoreTake>
	fr = f_open(&logFile, "log.txt", FA_READ);
 800e686:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800e68a:	2201      	movs	r2, #1
 800e68c:	4931      	ldr	r1, [pc, #196]	@ (800e754 <PrintLogFile+0xe4>)
 800e68e:	4618      	mov	r0, r3
 800e690:	f7ff f8fa 	bl	800d888 <f_open>
 800e694:	4603      	mov	r3, r0
 800e696:	f887 32b7 	strb.w	r3, [r7, #695]	@ 0x2b7
	if (fr != FR_OK) {
 800e69a:	f897 32b7 	ldrb.w	r3, [r7, #695]	@ 0x2b7
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d00f      	beq.n	800e6c2 <PrintLogFile+0x52>
		SendMsg(log_huart, "Failed to open log.txt (Error: %d)\r\n", fr);
 800e6a2:	4b2d      	ldr	r3, [pc, #180]	@ (800e758 <PrintLogFile+0xe8>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f897 22b7 	ldrb.w	r2, [r7, #695]	@ 0x2b7
 800e6aa:	492c      	ldr	r1, [pc, #176]	@ (800e75c <PrintLogFile+0xec>)
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7f2 fc91 	bl	8000fd4 <SendMsg>
		xSemaphoreGive(xLogMutex);
 800e6b2:	4b27      	ldr	r3, [pc, #156]	@ (800e750 <PrintLogFile+0xe0>)
 800e6b4:	6818      	ldr	r0, [r3, #0]
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	2100      	movs	r1, #0
 800e6bc:	f7fa fb8a 	bl	8008dd4 <xQueueGenericSend>
 800e6c0:	e042      	b.n	800e748 <PrintLogFile+0xd8>
		return;
	}
	SendMsg(log_huart, "\r\nLog file contents:\r\n");
 800e6c2:	4b25      	ldr	r3, [pc, #148]	@ (800e758 <PrintLogFile+0xe8>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4926      	ldr	r1, [pc, #152]	@ (800e760 <PrintLogFile+0xf0>)
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7f2 fc83 	bl	8000fd4 <SendMsg>
	do {
		fr = f_read(&logFile, buffer, sizeof(buffer) - 1, &br);
 800e6ce:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800e6d2:	4639      	mov	r1, r7
 800e6d4:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 800e6d8:	227f      	movs	r2, #127	@ 0x7f
 800e6da:	f7ff fa8f 	bl	800dbfc <f_read>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	f887 32b7 	strb.w	r3, [r7, #695]	@ 0x2b7
		if (fr != FR_OK) {
 800e6e4:	f897 32b7 	ldrb.w	r3, [r7, #695]	@ 0x2b7
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d008      	beq.n	800e6fe <PrintLogFile+0x8e>
			SendMsg(log_huart, "Error reading log.txt (Error: %d)\r\n", fr);
 800e6ec:	4b1a      	ldr	r3, [pc, #104]	@ (800e758 <PrintLogFile+0xe8>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f897 22b7 	ldrb.w	r2, [r7, #695]	@ 0x2b7
 800e6f4:	491b      	ldr	r1, [pc, #108]	@ (800e764 <PrintLogFile+0xf4>)
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7f2 fc6c 	bl	8000fd4 <SendMsg>
			break;
 800e6fc:	e018      	b.n	800e730 <PrintLogFile+0xc0>
		}
		buffer[br] = '\0';
 800e6fe:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800e702:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 800e70c:	f5a2 722e 	sub.w	r2, r2, #696	@ 0x2b8
 800e710:	2100      	movs	r1, #0
 800e712:	54d1      	strb	r1, [r2, r3]
		SendMsg(log_huart, "%s", buffer);
 800e714:	4b10      	ldr	r3, [pc, #64]	@ (800e758 <PrintLogFile+0xe8>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	463a      	mov	r2, r7
 800e71a:	4913      	ldr	r1, [pc, #76]	@ (800e768 <PrintLogFile+0xf8>)
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7f2 fc59 	bl	8000fd4 <SendMsg>
	} while (br == sizeof(buffer) - 1);
 800e722:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800e726:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2b7f      	cmp	r3, #127	@ 0x7f
 800e72e:	d0ce      	beq.n	800e6ce <PrintLogFile+0x5e>
	f_close(&logFile);
 800e730:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800e734:	4618      	mov	r0, r3
 800e736:	f7ff fd93 	bl	800e260 <f_close>
	xSemaphoreGive(xLogMutex);
 800e73a:	4b05      	ldr	r3, [pc, #20]	@ (800e750 <PrintLogFile+0xe0>)
 800e73c:	6818      	ldr	r0, [r3, #0]
 800e73e:	2300      	movs	r3, #0
 800e740:	2200      	movs	r2, #0
 800e742:	2100      	movs	r1, #0
 800e744:	f7fa fb46 	bl	8008dd4 <xQueueGenericSend>
}
 800e748:	f507 772e 	add.w	r7, r7, #696	@ 0x2b8
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	20013690 	.word	0x20013690
 800e754:	08012178 	.word	0x08012178
 800e758:	20013688 	.word	0x20013688
 800e75c:	080121e8 	.word	0x080121e8
 800e760:	08012210 	.word	0x08012210
 800e764:	08012228 	.word	0x08012228
 800e768:	0801224c 	.word	0x0801224c

0800e76c <LogHandler>:

void LogHandler(void *pvParameters) 
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	f5ad 7d2a 	sub.w	sp, sp, #680	@ 0x2a8
 800e772:	af00      	add	r7, sp, #0
 800e774:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800e778:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800e77c:	6018      	str	r0, [r3, #0]
	FIL logFile;
	FRESULT fr;
	UINT bw;
	LogMsgStruct logMsg;
	bool fileOpened = false;
 800e77e:	2300      	movs	r3, #0
 800e780:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7

	while(1){
		if (xQueueReceive(xLogQueue, &logMsg, portMAX_DELAY) == pdPASS) {
 800e784:	4b3c      	ldr	r3, [pc, #240]	@ (800e878 <LogHandler+0x10c>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f107 010c 	add.w	r1, r7, #12
 800e78c:	f04f 32ff 	mov.w	r2, #4294967295
 800e790:	4618      	mov	r0, r3
 800e792:	f7fa fcbd 	bl	8009110 <xQueueReceive>
 800e796:	4603      	mov	r3, r0
 800e798:	2b01      	cmp	r3, #1
 800e79a:	d167      	bne.n	800e86c <LogHandler+0x100>
			xSemaphoreTake(xLogMutex, portMAX_DELAY);
 800e79c:	4b37      	ldr	r3, [pc, #220]	@ (800e87c <LogHandler+0x110>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	f04f 31ff 	mov.w	r1, #4294967295
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7fa fd95 	bl	80092d4 <xQueueSemaphoreTake>
			if(!fileOpened) {
 800e7aa:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800e7ae:	f083 0301 	eor.w	r3, r3, #1
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d020      	beq.n	800e7fa <LogHandler+0x8e>
				fr = f_open(&logFile, "log.txt", FA_OPEN_APPEND | FA_WRITE);
 800e7b8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e7bc:	2232      	movs	r2, #50	@ 0x32
 800e7be:	4930      	ldr	r1, [pc, #192]	@ (800e880 <LogHandler+0x114>)
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7ff f861 	bl	800d888 <f_open>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	f887 32a6 	strb.w	r3, [r7, #678]	@ 0x2a6
				if (fr != FR_OK){
 800e7cc:	f897 32a6 	ldrb.w	r3, [r7, #678]	@ 0x2a6
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d00f      	beq.n	800e7f4 <LogHandler+0x88>
					SendMsg(log_huart, "LogTask: Failed to open log.txt, error = %d\r\n", fr);
 800e7d4:	4b2b      	ldr	r3, [pc, #172]	@ (800e884 <LogHandler+0x118>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f897 22a6 	ldrb.w	r2, [r7, #678]	@ 0x2a6
 800e7dc:	492a      	ldr	r1, [pc, #168]	@ (800e888 <LogHandler+0x11c>)
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7f2 fbf8 	bl	8000fd4 <SendMsg>
					xSemaphoreGive(xLogMutex);
 800e7e4:	4b25      	ldr	r3, [pc, #148]	@ (800e87c <LogHandler+0x110>)
 800e7e6:	6818      	ldr	r0, [r3, #0]
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	2100      	movs	r1, #0
 800e7ee:	f7fa faf1 	bl	8008dd4 <xQueueGenericSend>
					continue;
 800e7f2:	e03f      	b.n	800e874 <LogHandler+0x108>
				}
				fileOpened = true;
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
			}

			fr = f_write(&logFile, logMsg.msg, strlen(logMsg.msg), &bw);
 800e7fa:	f107 030c 	add.w	r3, r7, #12
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7f1 fcf0 	bl	80001e4 <strlen>
 800e804:	4602      	mov	r2, r0
 800e806:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800e80a:	f107 010c 	add.w	r1, r7, #12
 800e80e:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 800e812:	f7ff fb32 	bl	800de7a <f_write>
 800e816:	4603      	mov	r3, r0
 800e818:	f887 32a6 	strb.w	r3, [r7, #678]	@ 0x2a6
			if (fr == FR_OK){
 800e81c:	f897 32a6 	ldrb.w	r3, [r7, #678]	@ 0x2a6
 800e820:	2b00      	cmp	r3, #0
 800e822:	d114      	bne.n	800e84e <LogHandler+0xe2>
				f_sync(&logFile);
 800e824:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e828:	4618      	mov	r0, r3
 800e82a:	f7ff fc9b 	bl	800e164 <f_sync>
//				SendMsg(log_huart, "LogTask: Wrote log entry.\r\n");
				f_close(&logFile);
 800e82e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e832:	4618      	mov	r0, r3
 800e834:	f7ff fd14 	bl	800e260 <f_close>
				fileOpened = false;
 800e838:	2300      	movs	r3, #0
 800e83a:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
				xSemaphoreGive(xLogMutex);
 800e83e:	4b0f      	ldr	r3, [pc, #60]	@ (800e87c <LogHandler+0x110>)
 800e840:	6818      	ldr	r0, [r3, #0]
 800e842:	2300      	movs	r3, #0
 800e844:	2200      	movs	r2, #0
 800e846:	2100      	movs	r1, #0
 800e848:	f7fa fac4 	bl	8008dd4 <xQueueGenericSend>
 800e84c:	e00e      	b.n	800e86c <LogHandler+0x100>
			} else {
				SendMsg(log_huart, "LogTask: f_write error: %d\r\n", fr);
 800e84e:	4b0d      	ldr	r3, [pc, #52]	@ (800e884 <LogHandler+0x118>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f897 22a6 	ldrb.w	r2, [r7, #678]	@ 0x2a6
 800e856:	490d      	ldr	r1, [pc, #52]	@ (800e88c <LogHandler+0x120>)
 800e858:	4618      	mov	r0, r3
 800e85a:	f7f2 fbbb 	bl	8000fd4 <SendMsg>
				xSemaphoreGive(xLogMutex);
 800e85e:	4b07      	ldr	r3, [pc, #28]	@ (800e87c <LogHandler+0x110>)
 800e860:	6818      	ldr	r0, [r3, #0]
 800e862:	2300      	movs	r3, #0
 800e864:	2200      	movs	r2, #0
 800e866:	2100      	movs	r1, #0
 800e868:	f7fa fab4 	bl	8008dd4 <xQueueGenericSend>
			}
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 800e86c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800e870:	f7fb f906 	bl	8009a80 <vTaskDelay>
		if (xQueueReceive(xLogQueue, &logMsg, portMAX_DELAY) == pdPASS) {
 800e874:	e786      	b.n	800e784 <LogHandler+0x18>
 800e876:	bf00      	nop
 800e878:	2001368c 	.word	0x2001368c
 800e87c:	20013690 	.word	0x20013690
 800e880:	08012178 	.word	0x08012178
 800e884:	20013688 	.word	0x20013688
 800e888:	08012250 	.word	0x08012250
 800e88c:	08012280 	.word	0x08012280

0800e890 <UploadLogFile>:
	}
}

void UploadLogFile(void) 
{
 800e890:	b580      	push	{r7, lr}
 800e892:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 800e896:	af00      	add	r7, sp, #0
	FIL logFile;
	FRESULT fr;
	UINT br;
	char buffer[100];

	xSemaphoreTake(xLogMutex, portMAX_DELAY);
 800e898:	4b65      	ldr	r3, [pc, #404]	@ (800ea30 <UploadLogFile+0x1a0>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	f04f 31ff 	mov.w	r1, #4294967295
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7fa fd17 	bl	80092d4 <xQueueSemaphoreTake>

	fr = f_open(&logFile, "log.txt", FA_READ);
 800e8a6:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	4961      	ldr	r1, [pc, #388]	@ (800ea34 <UploadLogFile+0x1a4>)
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7fe ffea 	bl	800d888 <f_open>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	f887 33c7 	strb.w	r3, [r7, #967]	@ 0x3c7
	if (fr != FR_OK) {
 800e8ba:	f897 33c7 	ldrb.w	r3, [r7, #967]	@ 0x3c7
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d014      	beq.n	800e8ec <UploadLogFile+0x5c>
		SendMsg(log_huart, "UploadLogFile: open failed %d\r\n", fr);
 800e8c2:	4b5d      	ldr	r3, [pc, #372]	@ (800ea38 <UploadLogFile+0x1a8>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f897 23c7 	ldrb.w	r2, [r7, #967]	@ 0x3c7
 800e8ca:	495c      	ldr	r1, [pc, #368]	@ (800ea3c <UploadLogFile+0x1ac>)
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7f2 fb81 	bl	8000fd4 <SendMsg>
		if (xLogMutex) xSemaphoreGive(xLogMutex);
 800e8d2:	4b57      	ldr	r3, [pc, #348]	@ (800ea30 <UploadLogFile+0x1a0>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	f000 80a5 	beq.w	800ea26 <UploadLogFile+0x196>
 800e8dc:	4b54      	ldr	r3, [pc, #336]	@ (800ea30 <UploadLogFile+0x1a0>)
 800e8de:	6818      	ldr	r0, [r3, #0]
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	2100      	movs	r1, #0
 800e8e6:	f7fa fa75 	bl	8008dd4 <xQueueGenericSend>
 800e8ea:	e09d      	b.n	800ea28 <UploadLogFile+0x198>
		return;
	}

	ESP32MsgStruct startEventMsg;
	snprintf(startEventMsg.msg, sizeof(startEventMsg.msg)-1, "LOG_UPLOAD_START\n\r");
 800e8ec:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800e8f0:	4a53      	ldr	r2, [pc, #332]	@ (800ea40 <UploadLogFile+0x1b0>)
 800e8f2:	2163      	movs	r1, #99	@ 0x63
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f001 fd59 	bl	80103ac <sniprintf>
	startEventMsg.msg[sizeof(startEventMsg.msg)-1] = '\0';
 800e8fa:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800e8fe:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 800e902:	2200      	movs	r2, #0
 800e904:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
	if (xQueueSend(xESP32Queue, &startEventMsg, pdMS_TO_TICKS(100)) != pdPASS) {
 800e908:	4b4e      	ldr	r3, [pc, #312]	@ (800ea44 <UploadLogFile+0x1b4>)
 800e90a:	6818      	ldr	r0, [r3, #0]
 800e90c:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 800e910:	2300      	movs	r3, #0
 800e912:	2264      	movs	r2, #100	@ 0x64
 800e914:	f7fa fa5e 	bl	8008dd4 <xQueueGenericSend>
 800e918:	4603      	mov	r3, r0
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	d005      	beq.n	800e92a <UploadLogFile+0x9a>
		SendMsg(log_huart, "UploadLogFile: queue full\r\n");
 800e91e:	4b46      	ldr	r3, [pc, #280]	@ (800ea38 <UploadLogFile+0x1a8>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	4949      	ldr	r1, [pc, #292]	@ (800ea48 <UploadLogFile+0x1b8>)
 800e924:	4618      	mov	r0, r3
 800e926:	f7f2 fb55 	bl	8000fd4 <SendMsg>
	}

	while (1) {
		fr = f_read(&logFile, buffer, sizeof(buffer)-1, &br);
 800e92a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800e92e:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 800e932:	f507 70ca 	add.w	r0, r7, #404	@ 0x194
 800e936:	2263      	movs	r2, #99	@ 0x63
 800e938:	f7ff f960 	bl	800dbfc <f_read>
 800e93c:	4603      	mov	r3, r0
 800e93e:	f887 33c7 	strb.w	r3, [r7, #967]	@ 0x3c7
		if (fr != FR_OK || br == 0) break;
 800e942:	f897 33c7 	ldrb.w	r3, [r7, #967]	@ 0x3c7
 800e946:	2b00      	cmp	r3, #0
 800e948:	d13b      	bne.n	800e9c2 <UploadLogFile+0x132>
 800e94a:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800e94e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d034      	beq.n	800e9c2 <UploadLogFile+0x132>
		buffer[br] = '\0';
 800e958:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800e95c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f507 7272 	add.w	r2, r7, #968	@ 0x3c8
 800e966:	f5a2 7227 	sub.w	r2, r2, #668	@ 0x29c
 800e96a:	2100      	movs	r1, #0
 800e96c:	54d1      	strb	r1, [r2, r3]

		ESP32MsgStruct msg;
		strncpy(msg.msg, buffer, sizeof(msg.msg)-1);
 800e96e:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 800e972:	463b      	mov	r3, r7
 800e974:	2263      	movs	r2, #99	@ 0x63
 800e976:	4618      	mov	r0, r3
 800e978:	f001 fe37 	bl	80105ea <strncpy>
		msg.msg[sizeof(msg.msg)-1] = '\0';
 800e97c:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800e980:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 800e984:	2200      	movs	r2, #0
 800e986:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
		SendMsg(log_huart, "\r\n%s\r\n", msg.msg);
 800e98a:	4b2b      	ldr	r3, [pc, #172]	@ (800ea38 <UploadLogFile+0x1a8>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	463a      	mov	r2, r7
 800e990:	492e      	ldr	r1, [pc, #184]	@ (800ea4c <UploadLogFile+0x1bc>)
 800e992:	4618      	mov	r0, r3
 800e994:	f7f2 fb1e 	bl	8000fd4 <SendMsg>

		if (xQueueSend(xESP32Queue, &msg, pdMS_TO_TICKS(100)) != pdPASS) {
 800e998:	4b2a      	ldr	r3, [pc, #168]	@ (800ea44 <UploadLogFile+0x1b4>)
 800e99a:	6818      	ldr	r0, [r3, #0]
 800e99c:	4639      	mov	r1, r7
 800e99e:	2300      	movs	r3, #0
 800e9a0:	2264      	movs	r2, #100	@ 0x64
 800e9a2:	f7fa fa17 	bl	8008dd4 <xQueueGenericSend>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d006      	beq.n	800e9ba <UploadLogFile+0x12a>
			SendMsg(log_huart, "UploadLogFile: queue full\r\n");
 800e9ac:	4b22      	ldr	r3, [pc, #136]	@ (800ea38 <UploadLogFile+0x1a8>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4925      	ldr	r1, [pc, #148]	@ (800ea48 <UploadLogFile+0x1b8>)
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7f2 fb0e 	bl	8000fd4 <SendMsg>
			break;
 800e9b8:	e003      	b.n	800e9c2 <UploadLogFile+0x132>
		}
		vTaskDelay(pdMS_TO_TICKS(10)); // 給 ESP32Sender 處理時間
 800e9ba:	200a      	movs	r0, #10
 800e9bc:	f7fb f860 	bl	8009a80 <vTaskDelay>
	while (1) {
 800e9c0:	e7b3      	b.n	800e92a <UploadLogFile+0x9a>
	}

	ESP32MsgStruct endEventMsg;
	snprintf(endEventMsg.msg, sizeof(endEventMsg.msg)-1, "LOG_UPLOAD_END\n\r");
 800e9c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800e9c6:	4a22      	ldr	r2, [pc, #136]	@ (800ea50 <UploadLogFile+0x1c0>)
 800e9c8:	2163      	movs	r1, #99	@ 0x63
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f001 fcee 	bl	80103ac <sniprintf>
	endEventMsg.msg[sizeof(endEventMsg.msg)-1] = '\0';
 800e9d0:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800e9d4:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
	if (xQueueSend(xESP32Queue, &endEventMsg, pdMS_TO_TICKS(100)) != pdPASS) {
 800e9de:	4b19      	ldr	r3, [pc, #100]	@ (800ea44 <UploadLogFile+0x1b4>)
 800e9e0:	6818      	ldr	r0, [r3, #0]
 800e9e2:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	2264      	movs	r2, #100	@ 0x64
 800e9ea:	f7fa f9f3 	bl	8008dd4 <xQueueGenericSend>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	2b01      	cmp	r3, #1
 800e9f2:	d005      	beq.n	800ea00 <UploadLogFile+0x170>
		SendMsg(log_huart, "UploadLogFile: queue full\r\n");
 800e9f4:	4b10      	ldr	r3, [pc, #64]	@ (800ea38 <UploadLogFile+0x1a8>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	4913      	ldr	r1, [pc, #76]	@ (800ea48 <UploadLogFile+0x1b8>)
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7f2 faea 	bl	8000fd4 <SendMsg>
	}

	f_close(&logFile);
 800ea00:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7ff fc2b 	bl	800e260 <f_close>
	SendMsg(log_huart, "\r\nUploadLogFile: done\r\n");
 800ea0a:	4b0b      	ldr	r3, [pc, #44]	@ (800ea38 <UploadLogFile+0x1a8>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4911      	ldr	r1, [pc, #68]	@ (800ea54 <UploadLogFile+0x1c4>)
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7f2 fadf 	bl	8000fd4 <SendMsg>

	xSemaphoreGive(xLogMutex);
 800ea16:	4b06      	ldr	r3, [pc, #24]	@ (800ea30 <UploadLogFile+0x1a0>)
 800ea18:	6818      	ldr	r0, [r3, #0]
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	2100      	movs	r1, #0
 800ea20:	f7fa f9d8 	bl	8008dd4 <xQueueGenericSend>
 800ea24:	e000      	b.n	800ea28 <UploadLogFile+0x198>
		return;
 800ea26:	bf00      	nop
}
 800ea28:	f507 7772 	add.w	r7, r7, #968	@ 0x3c8
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	20013690 	.word	0x20013690
 800ea34:	08012178 	.word	0x08012178
 800ea38:	20013688 	.word	0x20013688
 800ea3c:	080122a0 	.word	0x080122a0
 800ea40:	080122c0 	.word	0x080122c0
 800ea44:	20000810 	.word	0x20000810
 800ea48:	080122d4 	.word	0x080122d4
 800ea4c:	080122f0 	.word	0x080122f0
 800ea50:	080122f8 	.word	0x080122f8
 800ea54:	0801230c 	.word	0x0801230c

0800ea58 <SD_Init>:

FATFS fs;
uint16_t NumObs = 0;

void SD_Init(UART_HandleTypeDef *huart)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
	sd_huart = huart;
 800ea60:	4a05      	ldr	r2, [pc, #20]	@ (800ea78 <SD_Init+0x20>)
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6013      	str	r3, [r2, #0]
	Mount_SD();
 800ea66:	f000 f9a7 	bl	800edb8 <Mount_SD>
	GetFileNumber();
 800ea6a:	f000 f977 	bl	800ed5c <GetFileNumber>
}
 800ea6e:	bf00      	nop
 800ea70:	3708      	adds	r7, #8
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	20013694 	.word	0x20013694

0800ea7c <SD_OS_Resources_Init>:

void SD_OS_Resources_Init()
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	af00      	add	r7, sp, #0
	xSDQueue = xQueueCreate(4, sizeof(SDMsgStruct));
 800ea80:	2200      	movs	r2, #0
 800ea82:	2164      	movs	r1, #100	@ 0x64
 800ea84:	2004      	movs	r0, #4
 800ea86:	f7fa f913 	bl	8008cb0 <xQueueGenericCreate>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	4a01      	ldr	r2, [pc, #4]	@ (800ea94 <SD_OS_Resources_Init+0x18>)
 800ea8e:	6013      	str	r3, [r2, #0]
}
 800ea90:	bf00      	nop
 800ea92:	bd80      	pop	{r7, pc}
 800ea94:	20013a74 	.word	0x20013a74

0800ea98 <StorageParse>:


FRESULT StorageParse(const char *pRequestedExtension)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b0a2      	sub	sp, #136	@ 0x88
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
  FRESULT res = FR_OK;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  char *ext_dot;

  char lower_req_ext[16]; // Buffer for lowercase requested extension
  char file_ext_lower[16]; // Buffer for lowercase file extension

  if (pRequestedExtension == NULL || strlen(pRequestedExtension) == 0 || strlen(pRequestedExtension) >= sizeof(lower_req_ext)) {
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d009      	beq.n	800eac0 <StorageParse+0x28>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d005      	beq.n	800eac0 <StorageParse+0x28>
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f7f1 fb95 	bl	80001e4 <strlen>
 800eaba:	4603      	mov	r3, r0
 800eabc:	2b0f      	cmp	r3, #15
 800eabe:	d907      	bls.n	800ead0 <StorageParse+0x38>
      SendMsg(sd_huart, "StorageParse: Invalid or too long extension provided.\r\n");
 800eac0:	4b9b      	ldr	r3, [pc, #620]	@ (800ed30 <StorageParse+0x298>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	499b      	ldr	r1, [pc, #620]	@ (800ed34 <StorageParse+0x29c>)
 800eac6:	4618      	mov	r0, r3
 800eac8:	f7f2 fa84 	bl	8000fd4 <SendMsg>
      return FR_INVALID_PARAMETER;
 800eacc:	2313      	movs	r3, #19
 800eace:	e12b      	b.n	800ed28 <StorageParse+0x290>
  }

  // Convert requested extension to lowercase for consistent comparison
  strncpy(lower_req_ext, pRequestedExtension, sizeof(lower_req_ext) - 1);
 800ead0:	f107 0318 	add.w	r3, r7, #24
 800ead4:	220f      	movs	r2, #15
 800ead6:	6879      	ldr	r1, [r7, #4]
 800ead8:	4618      	mov	r0, r3
 800eada:	f001 fd86 	bl	80105ea <strncpy>
  lower_req_ext[sizeof(lower_req_ext) - 1] = '\0';
 800eade:	2300      	movs	r3, #0
 800eae0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  for (int i = 0; lower_req_ext[i]; i++) {
 800eae4:	2300      	movs	r3, #0
 800eae6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eaea:	e024      	b.n	800eb36 <StorageParse+0x9e>
    lower_req_ext[i] = tolower((unsigned char)lower_req_ext[i]);
 800eaec:	f107 0218 	add.w	r2, r7, #24
 800eaf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eaf4:	4413      	add	r3, r2
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 800eafc:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800eb00:	3301      	adds	r3, #1
 800eb02:	4a8d      	ldr	r2, [pc, #564]	@ (800ed38 <StorageParse+0x2a0>)
 800eb04:	4413      	add	r3, r2
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	f003 0303 	and.w	r3, r3, #3
 800eb0c:	2b01      	cmp	r3, #1
 800eb0e:	d103      	bne.n	800eb18 <StorageParse+0x80>
 800eb10:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800eb14:	3320      	adds	r3, #32
 800eb16:	e001      	b.n	800eb1c <StorageParse+0x84>
 800eb18:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800eb1c:	b2d9      	uxtb	r1, r3
 800eb1e:	f107 0218 	add.w	r2, r7, #24
 800eb22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eb26:	4413      	add	r3, r2
 800eb28:	460a      	mov	r2, r1
 800eb2a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; lower_req_ext[i]; i++) {
 800eb2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eb30:	3301      	adds	r3, #1
 800eb32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eb36:	f107 0218 	add.w	r2, r7, #24
 800eb3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eb3e:	4413      	add	r3, r2
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d1d2      	bne.n	800eaec <StorageParse+0x54>
  }

  SendMsg(sd_huart, "\r\nParsing SD card for *.%s files...\r\n", lower_req_ext);
 800eb46:	4b7a      	ldr	r3, [pc, #488]	@ (800ed30 <StorageParse+0x298>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f107 0218 	add.w	r2, r7, #24
 800eb4e:	497b      	ldr	r1, [pc, #492]	@ (800ed3c <StorageParse+0x2a4>)
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7f2 fa3f 	bl	8000fd4 <SendMsg>

  res = f_opendir(&dir, "");
 800eb56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800eb5a:	4979      	ldr	r1, [pc, #484]	@ (800ed40 <StorageParse+0x2a8>)
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7ff fba9 	bl	800e2b4 <f_opendir>
 800eb62:	4603      	mov	r3, r0
 800eb64:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  if (res != FR_OK) {
 800eb68:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d00a      	beq.n	800eb86 <StorageParse+0xee>
      SendMsg(sd_huart, "Failed to open root directory! Error: %d\r\n", res);
 800eb70:	4b6f      	ldr	r3, [pc, #444]	@ (800ed30 <StorageParse+0x298>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800eb78:	4972      	ldr	r1, [pc, #456]	@ (800ed44 <StorageParse+0x2ac>)
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7f2 fa2a 	bl	8000fd4 <SendMsg>
      return res;
 800eb80:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800eb84:	e0d0      	b.n	800ed28 <StorageParse+0x290>
  }
  FileList.ptr = 0; // Reset file list for each parse
 800eb86:	4b70      	ldr	r3, [pc, #448]	@ (800ed48 <StorageParse+0x2b0>)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8

  if(res == FR_OK)
 800eb8e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	f040 80b3 	bne.w	800ecfe <StorageParse+0x266>
  {
    while(1)
    {
      res = f_readdir(&dir, &fno);
 800eb98:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800eb9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800eba0:	4611      	mov	r1, r2
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7ff fc1f 	bl	800e3e6 <f_readdir>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      if(res != FR_OK || fno.fname[0] == 0)
 800ebae:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	f040 80a3 	bne.w	800ecfe <StorageParse+0x266>
 800ebb8:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	f000 809e 	beq.w	800ecfe <StorageParse+0x266>
      {
        break;
      }
      if(fno.fname[0] == '.') // Skip hidden files/directories and current/parent dir entries
 800ebc2:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800ebc6:	2b2e      	cmp	r3, #46	@ 0x2e
 800ebc8:	f000 8097 	beq.w	800ecfa <StorageParse+0x262>
      {
        continue;
      }

      fn = fno.fname;
 800ebcc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800ebd0:	3309      	adds	r3, #9
 800ebd2:	67bb      	str	r3, [r7, #120]	@ 0x78

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 800ebd4:	4b5c      	ldr	r3, [pc, #368]	@ (800ed48 <StorageParse+0x2b0>)
 800ebd6:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 800ebda:	2b17      	cmp	r3, #23
 800ebdc:	f200 8086 	bhi.w	800ecec <StorageParse+0x254>
      {
        if((fno.fattrib & AM_DIR) == 0) // If it's a file
 800ebe0:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800ebe4:	f003 0310 	and.w	r3, r3, #16
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d1d5      	bne.n	800eb98 <StorageParse+0x100>
        {
          ext_dot = strrchr(fn, '.'); // Find the last dot
 800ebec:	212e      	movs	r1, #46	@ 0x2e
 800ebee:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800ebf0:	f001 fd0e 	bl	8010610 <strrchr>
 800ebf4:	6778      	str	r0, [r7, #116]	@ 0x74
          // Ensure a dot is found, it's not the first character (e.g. ".hiddenfile"),
          // and there's something after the dot.
          if (ext_dot != NULL && ext_dot != fn && *(ext_dot + 1) != '\0') {
 800ebf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d0cd      	beq.n	800eb98 <StorageParse+0x100>
 800ebfc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ebfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d0c9      	beq.n	800eb98 <StorageParse+0x100>
 800ec04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ec06:	3301      	adds	r3, #1
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d0c4      	beq.n	800eb98 <StorageParse+0x100>
            strncpy(file_ext_lower, ext_dot + 1, sizeof(file_ext_lower) - 1);
 800ec0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ec10:	1c59      	adds	r1, r3, #1
 800ec12:	f107 0308 	add.w	r3, r7, #8
 800ec16:	220f      	movs	r2, #15
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f001 fce6 	bl	80105ea <strncpy>
            file_ext_lower[sizeof(file_ext_lower) - 1] = '\0';
 800ec1e:	2300      	movs	r3, #0
 800ec20:	75fb      	strb	r3, [r7, #23]
            for (int i = 0; file_ext_lower[i]; i++) {
 800ec22:	2300      	movs	r3, #0
 800ec24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ec26:	e020      	b.n	800ec6a <StorageParse+0x1d2>
                file_ext_lower[i] = tolower((unsigned char)file_ext_lower[i]);
 800ec28:	f107 0208 	add.w	r2, r7, #8
 800ec2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ec2e:	4413      	add	r3, r2
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800ec36:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	4a3e      	ldr	r2, [pc, #248]	@ (800ed38 <StorageParse+0x2a0>)
 800ec3e:	4413      	add	r3, r2
 800ec40:	781b      	ldrb	r3, [r3, #0]
 800ec42:	f003 0303 	and.w	r3, r3, #3
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d103      	bne.n	800ec52 <StorageParse+0x1ba>
 800ec4a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800ec4e:	3320      	adds	r3, #32
 800ec50:	e001      	b.n	800ec56 <StorageParse+0x1be>
 800ec52:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800ec56:	b2d9      	uxtb	r1, r3
 800ec58:	f107 0208 	add.w	r2, r7, #8
 800ec5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ec5e:	4413      	add	r3, r2
 800ec60:	460a      	mov	r2, r1
 800ec62:	701a      	strb	r2, [r3, #0]
            for (int i = 0; file_ext_lower[i]; i++) {
 800ec64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ec66:	3301      	adds	r3, #1
 800ec68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ec6a:	f107 0208 	add.w	r2, r7, #8
 800ec6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ec70:	4413      	add	r3, r2
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d1d7      	bne.n	800ec28 <StorageParse+0x190>
            }

            if (strcmp(file_ext_lower, lower_req_ext) == 0)
 800ec78:	f107 0218 	add.w	r2, r7, #24
 800ec7c:	f107 0308 	add.w	r3, r7, #8
 800ec80:	4611      	mov	r1, r2
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7f1 faa4 	bl	80001d0 <strcmp>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d184      	bne.n	800eb98 <StorageParse+0x100>
            {
              strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 800ec8e:	4b2e      	ldr	r3, [pc, #184]	@ (800ed48 <StorageParse+0x2b0>)
 800ec90:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 800ec94:	461a      	mov	r2, r3
 800ec96:	4613      	mov	r3, r2
 800ec98:	009b      	lsls	r3, r3, #2
 800ec9a:	4413      	add	r3, r2
 800ec9c:	00db      	lsls	r3, r3, #3
 800ec9e:	4413      	add	r3, r2
 800eca0:	4a29      	ldr	r2, [pc, #164]	@ (800ed48 <StorageParse+0x2b0>)
 800eca2:	4413      	add	r3, r2
 800eca4:	3301      	adds	r3, #1
 800eca6:	2228      	movs	r2, #40	@ 0x28
 800eca8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f001 fc9d 	bl	80105ea <strncpy>
              FileList.file[FileList.ptr].type = FILETYPE_FILE; // Assuming FILETYPE_FILE is generic
 800ecb0:	4b25      	ldr	r3, [pc, #148]	@ (800ed48 <StorageParse+0x2b0>)
 800ecb2:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	4923      	ldr	r1, [pc, #140]	@ (800ed48 <StorageParse+0x2b0>)
 800ecba:	4613      	mov	r3, r2
 800ecbc:	009b      	lsls	r3, r3, #2
 800ecbe:	4413      	add	r3, r2
 800ecc0:	00db      	lsls	r3, r3, #3
 800ecc2:	4413      	add	r3, r2
 800ecc4:	440b      	add	r3, r1
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	701a      	strb	r2, [r3, #0]
              SendMsg(sd_huart, "Found *.%s file: %s\r\n", lower_req_ext, fn);
 800ecca:	4b19      	ldr	r3, [pc, #100]	@ (800ed30 <StorageParse+0x298>)
 800eccc:	6818      	ldr	r0, [r3, #0]
 800ecce:	f107 0218 	add.w	r2, r7, #24
 800ecd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ecd4:	491d      	ldr	r1, [pc, #116]	@ (800ed4c <StorageParse+0x2b4>)
 800ecd6:	f7f2 f97d 	bl	8000fd4 <SendMsg>
              FileList.ptr++;
 800ecda:	4b1b      	ldr	r3, [pc, #108]	@ (800ed48 <StorageParse+0x2b0>)
 800ecdc:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 800ece0:	3301      	adds	r3, #1
 800ece2:	b29a      	uxth	r2, r3
 800ece4:	4b18      	ldr	r3, [pc, #96]	@ (800ed48 <StorageParse+0x2b0>)
 800ece6:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8
 800ecea:	e755      	b.n	800eb98 <StorageParse+0x100>
            }
          }
        }
      } else {
        SendMsg(sd_huart, "File list full. Cannot add more files.\r\n");
 800ecec:	4b10      	ldr	r3, [pc, #64]	@ (800ed30 <StorageParse+0x298>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4917      	ldr	r1, [pc, #92]	@ (800ed50 <StorageParse+0x2b8>)
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f7f2 f96e 	bl	8000fd4 <SendMsg>
        break; // Stop if file list is full
 800ecf8:	e001      	b.n	800ecfe <StorageParse+0x266>
        continue;
 800ecfa:	bf00      	nop
      res = f_readdir(&dir, &fno);
 800ecfc:	e74c      	b.n	800eb98 <StorageParse+0x100>
      }
    }
  }
  NumObs = FileList.ptr;
 800ecfe:	4b12      	ldr	r3, [pc, #72]	@ (800ed48 <StorageParse+0x2b0>)
 800ed00:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	@ 0x3d8
 800ed04:	4b13      	ldr	r3, [pc, #76]	@ (800ed54 <StorageParse+0x2bc>)
 800ed06:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 800ed08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f7ff fb44 	bl	800e39a <f_closedir>
  SendMsg(sd_huart, "Total *.%s files found: %d\r\n", lower_req_ext, NumObs);
 800ed12:	4b07      	ldr	r3, [pc, #28]	@ (800ed30 <StorageParse+0x298>)
 800ed14:	6818      	ldr	r0, [r3, #0]
 800ed16:	4b0f      	ldr	r3, [pc, #60]	@ (800ed54 <StorageParse+0x2bc>)
 800ed18:	881b      	ldrh	r3, [r3, #0]
 800ed1a:	f107 0218 	add.w	r2, r7, #24
 800ed1e:	490e      	ldr	r1, [pc, #56]	@ (800ed58 <StorageParse+0x2c0>)
 800ed20:	f7f2 f958 	bl	8000fd4 <SendMsg>
  return res;
 800ed24:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3788      	adds	r7, #136	@ 0x88
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}
 800ed30:	20013694 	.word	0x20013694
 800ed34:	08012324 	.word	0x08012324
 800ed38:	08012e24 	.word	0x08012e24
 800ed3c:	0801235c 	.word	0x0801235c
 800ed40:	08012384 	.word	0x08012384
 800ed44:	08012388 	.word	0x08012388
 800ed48:	20013698 	.word	0x20013698
 800ed4c:	080123b4 	.word	0x080123b4
 800ed50:	080123cc 	.word	0x080123cc
 800ed54:	20013ca8 	.word	0x20013ca8
 800ed58:	080123f8 	.word	0x080123f8

0800ed5c <GetFileNumber>:

uint16_t GetFileNumber(void)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	af00      	add	r7, sp, #0
	if (NumObs) return NumObs;
 800ed60:	4b06      	ldr	r3, [pc, #24]	@ (800ed7c <GetFileNumber+0x20>)
 800ed62:	881b      	ldrh	r3, [r3, #0]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d002      	beq.n	800ed6e <GetFileNumber+0x12>
 800ed68:	4b04      	ldr	r3, [pc, #16]	@ (800ed7c <GetFileNumber+0x20>)
 800ed6a:	881b      	ldrh	r3, [r3, #0]
 800ed6c:	e001      	b.n	800ed72 <GetFileNumber+0x16>
	else return -1;
 800ed6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr
 800ed7c:	20013ca8 	.word	0x20013ca8

0800ed80 <SDParseHandler>:

void SDParseHandler(void *pvParameters)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b09c      	sub	sp, #112	@ 0x70
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  SDMsgStruct sdMsg;
  while (1)
  {
	if (xQueueReceive(xSDQueue, &sdMsg, portMAX_DELAY) == pdPASS) {
 800ed88:	4b0a      	ldr	r3, [pc, #40]	@ (800edb4 <SDParseHandler+0x34>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f107 010c 	add.w	r1, r7, #12
 800ed90:	f04f 32ff 	mov.w	r2, #4294967295
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7fa f9bb 	bl	8009110 <xQueueReceive>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d104      	bne.n	800edaa <SDParseHandler+0x2a>
		StorageParse(sdMsg.msg);
 800eda0:	f107 030c 	add.w	r3, r7, #12
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7ff fe77 	bl	800ea98 <StorageParse>
//		SendMsg(sd_huart, "SDParseHandler\r\n");
	}
	 vTaskDelay(pdMS_TO_TICKS(500));
 800edaa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800edae:	f7fa fe67 	bl	8009a80 <vTaskDelay>
	if (xQueueReceive(xSDQueue, &sdMsg, portMAX_DELAY) == pdPASS) {
 800edb2:	e7e9      	b.n	800ed88 <SDParseHandler+0x8>
 800edb4:	20013a74 	.word	0x20013a74

0800edb8 <Mount_SD>:
  }
}

void Mount_SD (void)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
	FRESULT fresult = f_mount(&fs, "", 1);
 800edbe:	2201      	movs	r2, #1
 800edc0:	490d      	ldr	r1, [pc, #52]	@ (800edf8 <Mount_SD+0x40>)
 800edc2:	480e      	ldr	r0, [pc, #56]	@ (800edfc <Mount_SD+0x44>)
 800edc4:	f7fe fd1a 	bl	800d7fc <f_mount>
 800edc8:	4603      	mov	r3, r0
 800edca:	71fb      	strb	r3, [r7, #7]

	if (fresult != FR_OK) {
 800edcc:	79fb      	ldrb	r3, [r7, #7]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d007      	beq.n	800ede2 <Mount_SD+0x2a>
		SendMsg(sd_huart, "SD card mount failed with error code: %d\r\n", fresult);
 800edd2:	4b0b      	ldr	r3, [pc, #44]	@ (800ee00 <Mount_SD+0x48>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	79fa      	ldrb	r2, [r7, #7]
 800edd8:	490a      	ldr	r1, [pc, #40]	@ (800ee04 <Mount_SD+0x4c>)
 800edda:	4618      	mov	r0, r3
 800eddc:	f7f2 f8fa 	bl	8000fd4 <SendMsg>
	} else {
		SendMsg(sd_huart, "SD card mounted Successfully.!\r\n");
	}
}
 800ede0:	e005      	b.n	800edee <Mount_SD+0x36>
		SendMsg(sd_huart, "SD card mounted Successfully.!\r\n");
 800ede2:	4b07      	ldr	r3, [pc, #28]	@ (800ee00 <Mount_SD+0x48>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4908      	ldr	r1, [pc, #32]	@ (800ee08 <Mount_SD+0x50>)
 800ede8:	4618      	mov	r0, r3
 800edea:	f7f2 f8f3 	bl	8000fd4 <SendMsg>
}
 800edee:	bf00      	nop
 800edf0:	3708      	adds	r7, #8
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	08012384 	.word	0x08012384
 800edfc:	20013a78 	.word	0x20013a78
 800ee00:	20013694 	.word	0x20013694
 800ee04:	08012418 	.word	0x08012418
 800ee08:	08012444 	.word	0x08012444

0800ee0c <command_Init>:
	{"relay", "relay switch", "relay 0/1", RelaySwitch},
	{NULL, NULL, NULL},
};

void command_Init(UART_HandleTypeDef* huart)
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b083      	sub	sp, #12
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
	shell_huart = huart;
 800ee14:	4a04      	ldr	r2, [pc, #16]	@ (800ee28 <command_Init+0x1c>)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6013      	str	r3, [r2, #0]
}
 800ee1a:	bf00      	nop
 800ee1c:	370c      	adds	r7, #12
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee24:	4770      	bx	lr
 800ee26:	bf00      	nop
 800ee28:	20013d34 	.word	0x20013d34

0800ee2c <RelaySwitch>:

void RelaySwitch(uint8_t argc, char **argv)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	4603      	mov	r3, r0
 800ee34:	6039      	str	r1, [r7, #0]
 800ee36:	71fb      	strb	r3, [r7, #7]
	if(argc < 2) {
 800ee38:	79fb      	ldrb	r3, [r7, #7]
 800ee3a:	2b01      	cmp	r3, #1
 800ee3c:	d806      	bhi.n	800ee4c <RelaySwitch+0x20>
		SendMsg(shell_huart, "\r\RelaySwitch: Not enough arguments for this command.\r\n");
 800ee3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ee70 <RelaySwitch+0x44>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	490c      	ldr	r1, [pc, #48]	@ (800ee74 <RelaySwitch+0x48>)
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7f2 f8c5 	bl	8000fd4 <SendMsg>
		return;
 800ee4a:	e00d      	b.n	800ee68 <RelaySwitch+0x3c>
	}

	int open = (int)atoi(argv[1]);
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	3304      	adds	r3, #4
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	4618      	mov	r0, r3
 800ee54:	f001 f95e 	bl	8010114 <atoi>
 800ee58:	60f8      	str	r0, [r7, #12]
	HAL_GPIO_WritePin(RelayController_GPIO_Port, RelayController_Pin, open);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	461a      	mov	r2, r3
 800ee60:	2140      	movs	r1, #64	@ 0x40
 800ee62:	4805      	ldr	r0, [pc, #20]	@ (800ee78 <RelaySwitch+0x4c>)
 800ee64:	f7f3 fde2 	bl	8002a2c <HAL_GPIO_WritePin>
}
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	20013d34 	.word	0x20013d34
 800ee74:	08012664 	.word	0x08012664
 800ee78:	40020800 	.word	0x40020800

0800ee7c <SynchronizeTimer>:

void SynchronizeTimer(uint8_t argc, char **argv)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	4603      	mov	r3, r0
 800ee84:	6039      	str	r1, [r7, #0]
 800ee86:	71fb      	strb	r3, [r7, #7]
	SyncTimeEventSender();
 800ee88:	f000 ff4e 	bl	800fd28 <SyncTimeEventSender>
}
 800ee8c:	bf00      	nop
 800ee8e:	3708      	adds	r7, #8
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <UpdateTimer>:

void UpdateTimer(uint8_t argc, char **argv)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b09e      	sub	sp, #120	@ 0x78
 800ee98:	af02      	add	r7, sp, #8
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	6039      	str	r1, [r7, #0]
 800ee9e:	71fb      	strb	r3, [r7, #7]
	if(argc < 3) {
 800eea0:	79fb      	ldrb	r3, [r7, #7]
 800eea2:	2b02      	cmp	r3, #2
 800eea4:	d806      	bhi.n	800eeb4 <UpdateTimer+0x20>
		SendMsg(shell_huart, "\r\nUpdateTimer: Not enough arguments for this command.\r\n");
 800eea6:	4b16      	ldr	r3, [pc, #88]	@ (800ef00 <UpdateTimer+0x6c>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4916      	ldr	r1, [pc, #88]	@ (800ef04 <UpdateTimer+0x70>)
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7f2 f891 	bl	8000fd4 <SendMsg>
 800eeb2:	e021      	b.n	800eef8 <UpdateTimer+0x64>
		return;
	}

	TimerMsgStruct timerMsg;
	snprintf(timerMsg.msg, sizeof(timerMsg.msg), "%s %s", argv[1], argv[2]);
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	3304      	adds	r3, #4
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	3308      	adds	r3, #8
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	f107 000c 	add.w	r0, r7, #12
 800eec4:	9300      	str	r3, [sp, #0]
 800eec6:	4613      	mov	r3, r2
 800eec8:	4a0f      	ldr	r2, [pc, #60]	@ (800ef08 <UpdateTimer+0x74>)
 800eeca:	2164      	movs	r1, #100	@ 0x64
 800eecc:	f001 fa6e 	bl	80103ac <sniprintf>
	timerMsg.msg[sizeof(timerMsg.msg)-1] = '\0';
 800eed0:	2300      	movs	r3, #0
 800eed2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	if (xQueueSend(xTimerQueue, &timerMsg, 0) != pdPASS) {
 800eed6:	4b0d      	ldr	r3, [pc, #52]	@ (800ef0c <UpdateTimer+0x78>)
 800eed8:	6818      	ldr	r0, [r3, #0]
 800eeda:	f107 010c 	add.w	r1, r7, #12
 800eede:	2300      	movs	r3, #0
 800eee0:	2200      	movs	r2, #0
 800eee2:	f7f9 ff77 	bl	8008dd4 <xQueueGenericSend>
 800eee6:	4603      	mov	r3, r0
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d005      	beq.n	800eef8 <UpdateTimer+0x64>
		SendMsg(shell_huart, "\r\nUpdateTimer: Queue full or error.\r\n");
 800eeec:	4b04      	ldr	r3, [pc, #16]	@ (800ef00 <UpdateTimer+0x6c>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4907      	ldr	r1, [pc, #28]	@ (800ef10 <UpdateTimer+0x7c>)
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7f2 f86e 	bl	8000fd4 <SendMsg>
	}
}
 800eef8:	3770      	adds	r7, #112	@ 0x70
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	20013d34 	.word	0x20013d34
 800ef04:	0801269c 	.word	0x0801269c
 800ef08:	080126d4 	.word	0x080126d4
 800ef0c:	20014194 	.word	0x20014194
 800ef10:	080126dc 	.word	0x080126dc

0800ef14 <UploadLog>:

void UploadLog(uint8_t argc, char **argv)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	6039      	str	r1, [r7, #0]
 800ef1e:	71fb      	strb	r3, [r7, #7]
	UploadLogFile();
 800ef20:	f7ff fcb6 	bl	800e890 <UploadLogFile>
}
 800ef24:	bf00      	nop
 800ef26:	3708      	adds	r7, #8
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}

0800ef2c <PrintLog>:

void PrintLog(uint8_t argc, char **argv)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	4603      	mov	r3, r0
 800ef34:	6039      	str	r1, [r7, #0]
 800ef36:	71fb      	strb	r3, [r7, #7]
	PrintLogFile();
 800ef38:	f7ff fb9a 	bl	800e670 <PrintLogFile>
}
 800ef3c:	bf00      	nop
 800ef3e:	3708      	adds	r7, #8
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <WriteLog>:

void WriteLog(uint8_t argc, char **argv)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b082      	sub	sp, #8
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	6039      	str	r1, [r7, #0]
 800ef4e:	71fb      	strb	r3, [r7, #7]
	if(argc < 2) {
 800ef50:	79fb      	ldrb	r3, [r7, #7]
 800ef52:	2b01      	cmp	r3, #1
 800ef54:	d806      	bhi.n	800ef64 <WriteLog+0x20>
		SendMsg(shell_huart, "\r\WriteLog: Not enough arguments for this command.\r\n");
 800ef56:	4b08      	ldr	r3, [pc, #32]	@ (800ef78 <WriteLog+0x34>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	4908      	ldr	r1, [pc, #32]	@ (800ef7c <WriteLog+0x38>)
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7f2 f839 	bl	8000fd4 <SendMsg>
		return;
 800ef62:	e005      	b.n	800ef70 <WriteLog+0x2c>
	}
	LogWriter(argv[1]);
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	3304      	adds	r3, #4
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7ff fb36 	bl	800e5dc <LogWriter>
}
 800ef70:	3708      	adds	r7, #8
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	20013d34 	.word	0x20013d34
 800ef7c:	08012704 	.word	0x08012704

0800ef80 <ParseStorage>:

void ParseStorage(uint8_t argc, char **argv)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b09c      	sub	sp, #112	@ 0x70
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	4603      	mov	r3, r0
 800ef88:	6039      	str	r1, [r7, #0]
 800ef8a:	71fb      	strb	r3, [r7, #7]
	if(argc < 2) {
 800ef8c:	79fb      	ldrb	r3, [r7, #7]
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	d806      	bhi.n	800efa0 <ParseStorage+0x20>
		SendMsg(shell_huart, "\r\nParseStorage: Not enough arguments for this command.\r\n");
 800ef92:	4b15      	ldr	r3, [pc, #84]	@ (800efe8 <ParseStorage+0x68>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	4915      	ldr	r1, [pc, #84]	@ (800efec <ParseStorage+0x6c>)
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7f2 f81b 	bl	8000fd4 <SendMsg>
 800ef9e:	e01f      	b.n	800efe0 <ParseStorage+0x60>
		return;
	}

	LogWriter("ParseStorage");
 800efa0:	4813      	ldr	r0, [pc, #76]	@ (800eff0 <ParseStorage+0x70>)
 800efa2:	f7ff fb1b 	bl	800e5dc <LogWriter>
	SDMsgStruct sdMsg;
	strncpy(sdMsg.msg, argv[1], sizeof(sdMsg.msg)-1);
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	3304      	adds	r3, #4
 800efaa:	6819      	ldr	r1, [r3, #0]
 800efac:	f107 030c 	add.w	r3, r7, #12
 800efb0:	2263      	movs	r2, #99	@ 0x63
 800efb2:	4618      	mov	r0, r3
 800efb4:	f001 fb19 	bl	80105ea <strncpy>
	sdMsg.msg[sizeof(sdMsg.msg)-1] = '\0';
 800efb8:	2300      	movs	r3, #0
 800efba:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	if (xQueueSend(xSDQueue, &sdMsg, 0) != pdPASS) {
 800efbe:	4b0d      	ldr	r3, [pc, #52]	@ (800eff4 <ParseStorage+0x74>)
 800efc0:	6818      	ldr	r0, [r3, #0]
 800efc2:	f107 010c 	add.w	r1, r7, #12
 800efc6:	2300      	movs	r3, #0
 800efc8:	2200      	movs	r2, #0
 800efca:	f7f9 ff03 	bl	8008dd4 <xQueueGenericSend>
 800efce:	4603      	mov	r3, r0
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	d005      	beq.n	800efe0 <ParseStorage+0x60>
		SendMsg(shell_huart, "\r\ParseStorage: Queue full or error.\r\n");
 800efd4:	4b04      	ldr	r3, [pc, #16]	@ (800efe8 <ParseStorage+0x68>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	4907      	ldr	r1, [pc, #28]	@ (800eff8 <ParseStorage+0x78>)
 800efda:	4618      	mov	r0, r3
 800efdc:	f7f1 fffa 	bl	8000fd4 <SendMsg>
	}
}
 800efe0:	3770      	adds	r7, #112	@ 0x70
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	20013d34 	.word	0x20013d34
 800efec:	08012738 	.word	0x08012738
 800eff0:	08012774 	.word	0x08012774
 800eff4:	20013a74 	.word	0x20013a74
 800eff8:	08012784 	.word	0x08012784

0800effc <LEDChangeColor>:

void LEDChangeColor(uint8_t argc, char **argv)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b086      	sub	sp, #24
 800f000:	af00      	add	r7, sp, #0
 800f002:	4603      	mov	r3, r0
 800f004:	6039      	str	r1, [r7, #0]
 800f006:	71fb      	strb	r3, [r7, #7]
	if(argc < 4) {
 800f008:	79fb      	ldrb	r3, [r7, #7]
 800f00a:	2b03      	cmp	r3, #3
 800f00c:	d806      	bhi.n	800f01c <LEDChangeColor+0x20>
		SendMsg(shell_huart, "\r\ESP32SendMsg: Not enough arguments for this command.\r\n");
 800f00e:	4b1b      	ldr	r3, [pc, #108]	@ (800f07c <LEDChangeColor+0x80>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	491b      	ldr	r1, [pc, #108]	@ (800f080 <LEDChangeColor+0x84>)
 800f014:	4618      	mov	r0, r3
 800f016:	f7f1 ffdd 	bl	8000fd4 <SendMsg>
 800f01a:	e02b      	b.n	800f074 <LEDChangeColor+0x78>
		return;
	}

	LogWriter("LEDChangeColor");
 800f01c:	4819      	ldr	r0, [pc, #100]	@ (800f084 <LEDChangeColor+0x88>)
 800f01e:	f7ff fadd 	bl	800e5dc <LogWriter>
	LEDMsgStruct LEDMsg;
	LEDMsg.r = (int)atoi(argv[1]);
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	3304      	adds	r3, #4
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4618      	mov	r0, r3
 800f02a:	f001 f873 	bl	8010114 <atoi>
 800f02e:	4603      	mov	r3, r0
 800f030:	60fb      	str	r3, [r7, #12]
	LEDMsg.g = (int)atoi(argv[2]);
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	3308      	adds	r3, #8
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	4618      	mov	r0, r3
 800f03a:	f001 f86b 	bl	8010114 <atoi>
 800f03e:	4603      	mov	r3, r0
 800f040:	613b      	str	r3, [r7, #16]
	LEDMsg.b = (int)atoi(argv[3]);
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	330c      	adds	r3, #12
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4618      	mov	r0, r3
 800f04a:	f001 f863 	bl	8010114 <atoi>
 800f04e:	4603      	mov	r3, r0
 800f050:	617b      	str	r3, [r7, #20]

	if (xQueueSend(xLEDQueue, &LEDMsg, 0) != pdPASS) {
 800f052:	4b0d      	ldr	r3, [pc, #52]	@ (800f088 <LEDChangeColor+0x8c>)
 800f054:	6818      	ldr	r0, [r3, #0]
 800f056:	f107 010c 	add.w	r1, r7, #12
 800f05a:	2300      	movs	r3, #0
 800f05c:	2200      	movs	r2, #0
 800f05e:	f7f9 feb9 	bl	8008dd4 <xQueueGenericSend>
 800f062:	4603      	mov	r3, r0
 800f064:	2b01      	cmp	r3, #1
 800f066:	d005      	beq.n	800f074 <LEDChangeColor+0x78>
		SendMsg(shell_huart, "\r\LEDMsg: Queue full or error.\r\n");
 800f068:	4b04      	ldr	r3, [pc, #16]	@ (800f07c <LEDChangeColor+0x80>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4907      	ldr	r1, [pc, #28]	@ (800f08c <LEDChangeColor+0x90>)
 800f06e:	4618      	mov	r0, r3
 800f070:	f7f1 ffb0 	bl	8000fd4 <SendMsg>
	}
}
 800f074:	3718      	adds	r7, #24
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	bf00      	nop
 800f07c:	20013d34 	.word	0x20013d34
 800f080:	080127ac 	.word	0x080127ac
 800f084:	080127e4 	.word	0x080127e4
 800f088:	20013648 	.word	0x20013648
 800f08c:	080127f4 	.word	0x080127f4

0800f090 <ESP32SendMsg>:

void ESP32SendMsg(uint8_t argc, char **argv)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b09c      	sub	sp, #112	@ 0x70
 800f094:	af00      	add	r7, sp, #0
 800f096:	4603      	mov	r3, r0
 800f098:	6039      	str	r1, [r7, #0]
 800f09a:	71fb      	strb	r3, [r7, #7]
	if(argc < 2) {
 800f09c:	79fb      	ldrb	r3, [r7, #7]
 800f09e:	2b01      	cmp	r3, #1
 800f0a0:	d806      	bhi.n	800f0b0 <ESP32SendMsg+0x20>
		SendMsg(shell_huart, "\r\ESP32SendMsg: Not enough arguments for this command.\r\n");
 800f0a2:	4b15      	ldr	r3, [pc, #84]	@ (800f0f8 <ESP32SendMsg+0x68>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	4915      	ldr	r1, [pc, #84]	@ (800f0fc <ESP32SendMsg+0x6c>)
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7f1 ff93 	bl	8000fd4 <SendMsg>
 800f0ae:	e01f      	b.n	800f0f0 <ESP32SendMsg+0x60>
		return;
	}

	LogWriter("ESP32SendMsg");
 800f0b0:	4813      	ldr	r0, [pc, #76]	@ (800f100 <ESP32SendMsg+0x70>)
 800f0b2:	f7ff fa93 	bl	800e5dc <LogWriter>
	SDMsgStruct esp32Msg;
	strncpy(esp32Msg.msg, argv[1], sizeof(esp32Msg.msg)-1);
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	3304      	adds	r3, #4
 800f0ba:	6819      	ldr	r1, [r3, #0]
 800f0bc:	f107 030c 	add.w	r3, r7, #12
 800f0c0:	2263      	movs	r2, #99	@ 0x63
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f001 fa91 	bl	80105ea <strncpy>
	esp32Msg.msg[sizeof(esp32Msg.msg)-1] = '\0';
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	if (xQueueSend(xESP32Queue, &esp32Msg, 0) != pdPASS) {
 800f0ce:	4b0d      	ldr	r3, [pc, #52]	@ (800f104 <ESP32SendMsg+0x74>)
 800f0d0:	6818      	ldr	r0, [r3, #0]
 800f0d2:	f107 010c 	add.w	r1, r7, #12
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	2200      	movs	r2, #0
 800f0da:	f7f9 fe7b 	bl	8008dd4 <xQueueGenericSend>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d005      	beq.n	800f0f0 <ESP32SendMsg+0x60>
		SendMsg(shell_huart, "\r\ESP32SendMsg: Queue full or error.\r\n");
 800f0e4:	4b04      	ldr	r3, [pc, #16]	@ (800f0f8 <ESP32SendMsg+0x68>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	4907      	ldr	r1, [pc, #28]	@ (800f108 <ESP32SendMsg+0x78>)
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7f1 ff72 	bl	8000fd4 <SendMsg>
	}
}
 800f0f0:	3770      	adds	r7, #112	@ 0x70
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	20013d34 	.word	0x20013d34
 800f0fc:	080127ac 	.word	0x080127ac
 800f100:	08012814 	.word	0x08012814
 800f104:	20000810 	.word	0x20000810
 800f108:	08012824 	.word	0x08012824

0800f10c <LCDShowMsg>:

void LCDShowMsg(uint8_t argc, char **argv)
{
 800f10c:	b590      	push	{r4, r7, lr}
 800f10e:	b08f      	sub	sp, #60	@ 0x3c
 800f110:	af00      	add	r7, sp, #0
 800f112:	4603      	mov	r3, r0
 800f114:	6039      	str	r1, [r7, #0]
 800f116:	71fb      	strb	r3, [r7, #7]
	if(argc < 4) {
 800f118:	79fb      	ldrb	r3, [r7, #7]
 800f11a:	2b03      	cmp	r3, #3
 800f11c:	d806      	bhi.n	800f12c <LCDShowMsg+0x20>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Not enough arguments for this command.\r\n");
 800f11e:	4b53      	ldr	r3, [pc, #332]	@ (800f26c <LCDShowMsg+0x160>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	4953      	ldr	r1, [pc, #332]	@ (800f270 <LCDShowMsg+0x164>)
 800f124:	4618      	mov	r0, r3
 800f126:	f7f1 ff55 	bl	8000fd4 <SendMsg>
        return;
 800f12a:	e09c      	b.n	800f266 <LCDShowMsg+0x15a>
    }
	for(int j = 1; j <= 2; j++) {
 800f12c:	2301      	movs	r3, #1
 800f12e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f130:	e027      	b.n	800f182 <LCDShowMsg+0x76>
		for (int i = 0; argv[1][i]; i++) {
 800f132:	2300      	movs	r3, #0
 800f134:	633b      	str	r3, [r7, #48]	@ 0x30
 800f136:	e019      	b.n	800f16c <LCDShowMsg+0x60>
			if (argv[1][i] < '0' || argv[1][i] > '9') {
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	3304      	adds	r3, #4
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f140:	4413      	add	r3, r2
 800f142:	781b      	ldrb	r3, [r3, #0]
 800f144:	2b2f      	cmp	r3, #47	@ 0x2f
 800f146:	d907      	bls.n	800f158 <LCDShowMsg+0x4c>
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	3304      	adds	r3, #4
 800f14c:	681a      	ldr	r2, [r3, #0]
 800f14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f150:	4413      	add	r3, r2
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	2b39      	cmp	r3, #57	@ 0x39
 800f156:	d906      	bls.n	800f166 <LCDShowMsg+0x5a>
				SendMsg(shell_huart, "\r\nLCDShowMsg: Row and Column must be a number.\r\n");
 800f158:	4b44      	ldr	r3, [pc, #272]	@ (800f26c <LCDShowMsg+0x160>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	4945      	ldr	r1, [pc, #276]	@ (800f274 <LCDShowMsg+0x168>)
 800f15e:	4618      	mov	r0, r3
 800f160:	f7f1 ff38 	bl	8000fd4 <SendMsg>
				return;
 800f164:	e07f      	b.n	800f266 <LCDShowMsg+0x15a>
		for (int i = 0; argv[1][i]; i++) {
 800f166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f168:	3301      	adds	r3, #1
 800f16a:	633b      	str	r3, [r7, #48]	@ 0x30
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	3304      	adds	r3, #4
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f174:	4413      	add	r3, r2
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d1dd      	bne.n	800f138 <LCDShowMsg+0x2c>
	for(int j = 1; j <= 2; j++) {
 800f17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f17e:	3301      	adds	r3, #1
 800f180:	637b      	str	r3, [r7, #52]	@ 0x34
 800f182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f184:	2b02      	cmp	r3, #2
 800f186:	ddd4      	ble.n	800f132 <LCDShowMsg+0x26>
			}
		}
	}
	if ((uint8_t)atoi(argv[1]) > 3) {
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	3304      	adds	r3, #4
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	4618      	mov	r0, r3
 800f190:	f000 ffc0 	bl	8010114 <atoi>
 800f194:	4603      	mov	r3, r0
 800f196:	b2db      	uxtb	r3, r3
 800f198:	2b03      	cmp	r3, #3
 800f19a:	d906      	bls.n	800f1aa <LCDShowMsg+0x9e>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Row out of range (0-3).\r\n");
 800f19c:	4b33      	ldr	r3, [pc, #204]	@ (800f26c <LCDShowMsg+0x160>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	4935      	ldr	r1, [pc, #212]	@ (800f278 <LCDShowMsg+0x16c>)
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7f1 ff16 	bl	8000fd4 <SendMsg>
        return;
 800f1a8:	e05d      	b.n	800f266 <LCDShowMsg+0x15a>
    }
    if ((uint8_t)atoi(argv[2]) > 19) {
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	3308      	adds	r3, #8
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f000 ffaf 	bl	8010114 <atoi>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	2b13      	cmp	r3, #19
 800f1bc:	d906      	bls.n	800f1cc <LCDShowMsg+0xc0>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Column out of range (0-19).\r\n");
 800f1be:	4b2b      	ldr	r3, [pc, #172]	@ (800f26c <LCDShowMsg+0x160>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	492e      	ldr	r1, [pc, #184]	@ (800f27c <LCDShowMsg+0x170>)
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7f1 ff05 	bl	8000fd4 <SendMsg>
        return;
 800f1ca:	e04c      	b.n	800f266 <LCDShowMsg+0x15a>
    }
	if (strlen(argv[3]) > (20 - (uint8_t)atoi(argv[2]))) {
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	330c      	adds	r3, #12
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7f1 f806 	bl	80001e4 <strlen>
 800f1d8:	4604      	mov	r4, r0
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	3308      	adds	r3, #8
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f000 ff97 	bl	8010114 <atoi>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	f1c3 0314 	rsb	r3, r3, #20
 800f1ee:	429c      	cmp	r4, r3
 800f1f0:	d906      	bls.n	800f200 <LCDShowMsg+0xf4>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Message too long for this column.\r\n");
 800f1f2:	4b1e      	ldr	r3, [pc, #120]	@ (800f26c <LCDShowMsg+0x160>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	4922      	ldr	r1, [pc, #136]	@ (800f280 <LCDShowMsg+0x174>)
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7f1 feeb 	bl	8000fd4 <SendMsg>
        return;
 800f1fe:	e032      	b.n	800f266 <LCDShowMsg+0x15a>
    }

	LogWriter("LCDShowMsg");
 800f200:	4820      	ldr	r0, [pc, #128]	@ (800f284 <LCDShowMsg+0x178>)
 800f202:	f7ff f9eb 	bl	800e5dc <LogWriter>
    LCDMsgStruct lcdMsg;
    lcdMsg.row = (uint8_t)atoi(argv[1]);
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	3304      	adds	r3, #4
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	4618      	mov	r0, r3
 800f20e:	f000 ff81 	bl	8010114 <atoi>
 800f212:	4603      	mov	r3, r0
 800f214:	b2db      	uxtb	r3, r3
 800f216:	733b      	strb	r3, [r7, #12]
    lcdMsg.col = (uint8_t)atoi(argv[2]);
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	3308      	adds	r3, #8
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	4618      	mov	r0, r3
 800f220:	f000 ff78 	bl	8010114 <atoi>
 800f224:	4603      	mov	r3, r0
 800f226:	b2db      	uxtb	r3, r3
 800f228:	737b      	strb	r3, [r7, #13]
    strncpy(lcdMsg.msg, argv[3], sizeof(lcdMsg.msg)-1);
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	330c      	adds	r3, #12
 800f22e:	6819      	ldr	r1, [r3, #0]
 800f230:	f107 030c 	add.w	r3, r7, #12
 800f234:	3302      	adds	r3, #2
 800f236:	221f      	movs	r2, #31
 800f238:	4618      	mov	r0, r3
 800f23a:	f001 f9d6 	bl	80105ea <strncpy>
    lcdMsg.msg[sizeof(lcdMsg.msg)-1] = '\0';
 800f23e:	2300      	movs	r3, #0
 800f240:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (xQueueSend(xLCDQueue, &lcdMsg, 0) != pdPASS) {
 800f244:	4b10      	ldr	r3, [pc, #64]	@ (800f288 <LCDShowMsg+0x17c>)
 800f246:	6818      	ldr	r0, [r3, #0]
 800f248:	f107 010c 	add.w	r1, r7, #12
 800f24c:	2300      	movs	r3, #0
 800f24e:	2200      	movs	r2, #0
 800f250:	f7f9 fdc0 	bl	8008dd4 <xQueueGenericSend>
 800f254:	4603      	mov	r3, r0
 800f256:	2b01      	cmp	r3, #1
 800f258:	d005      	beq.n	800f266 <LCDShowMsg+0x15a>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Queue full or error.\r\n");
 800f25a:	4b04      	ldr	r3, [pc, #16]	@ (800f26c <LCDShowMsg+0x160>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	490b      	ldr	r1, [pc, #44]	@ (800f28c <LCDShowMsg+0x180>)
 800f260:	4618      	mov	r0, r3
 800f262:	f7f1 feb7 	bl	8000fd4 <SendMsg>
    }
}
 800f266:	373c      	adds	r7, #60	@ 0x3c
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd90      	pop	{r4, r7, pc}
 800f26c:	20013d34 	.word	0x20013d34
 800f270:	0801284c 	.word	0x0801284c
 800f274:	08012884 	.word	0x08012884
 800f278:	080128b8 	.word	0x080128b8
 800f27c:	080128e0 	.word	0x080128e0
 800f280:	0801290c 	.word	0x0801290c
 800f284:	08012940 	.word	0x08012940
 800f288:	20013634 	.word	0x20013634
 800f28c:	0801294c 	.word	0x0801294c

0800f290 <CommandPrint>:

static void CommandPrint(uint8_t argc, char **argv)
{
 800f290:	b590      	push	{r4, r7, lr}
 800f292:	b087      	sub	sp, #28
 800f294:	af02      	add	r7, sp, #8
 800f296:	4603      	mov	r3, r0
 800f298:	6039      	str	r1, [r7, #0]
 800f29a:	71fb      	strb	r3, [r7, #7]
	LogWriter("Help");
 800f29c:	4823      	ldr	r0, [pc, #140]	@ (800f32c <CommandPrint+0x9c>)
 800f29e:	f7ff f99d 	bl	800e5dc <LogWriter>
	SendMsg(shell_huart, "\r\n--------------------------------------------------------------------------------------\r\n");
 800f2a2:	4b23      	ldr	r3, [pc, #140]	@ (800f330 <CommandPrint+0xa0>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	4923      	ldr	r1, [pc, #140]	@ (800f334 <CommandPrint+0xa4>)
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7f1 fe93 	bl	8000fd4 <SendMsg>
	SendMsg(shell_huart, "    %12s|  %29s|  %29s\r\n", "NAME", "HELP", "USAGE");
 800f2ae:	4b20      	ldr	r3, [pc, #128]	@ (800f330 <CommandPrint+0xa0>)
 800f2b0:	6818      	ldr	r0, [r3, #0]
 800f2b2:	4b21      	ldr	r3, [pc, #132]	@ (800f338 <CommandPrint+0xa8>)
 800f2b4:	9300      	str	r3, [sp, #0]
 800f2b6:	4b21      	ldr	r3, [pc, #132]	@ (800f33c <CommandPrint+0xac>)
 800f2b8:	4a21      	ldr	r2, [pc, #132]	@ (800f340 <CommandPrint+0xb0>)
 800f2ba:	4922      	ldr	r1, [pc, #136]	@ (800f344 <CommandPrint+0xb4>)
 800f2bc:	f7f1 fe8a 	bl	8000fd4 <SendMsg>
	SendMsg(shell_huart, "--------------------------------------------------------------------------------------\r\n");
 800f2c0:	4b1b      	ldr	r3, [pc, #108]	@ (800f330 <CommandPrint+0xa0>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	4920      	ldr	r1, [pc, #128]	@ (800f348 <CommandPrint+0xb8>)
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7f1 fe84 	bl	8000fd4 <SendMsg>
	for (uint8_t i=0; CommandList[i].name != NULL; i++)
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	73fb      	strb	r3, [r7, #15]
 800f2d0:	e01a      	b.n	800f308 <CommandPrint+0x78>
	{
		SendMsg(shell_huart, "    %12s  %30s  %30s\r\n", CommandList[i].name, CommandList[i].help, CommandList[i].usage);
 800f2d2:	4b17      	ldr	r3, [pc, #92]	@ (800f330 <CommandPrint+0xa0>)
 800f2d4:	6818      	ldr	r0, [r3, #0]
 800f2d6:	7bfb      	ldrb	r3, [r7, #15]
 800f2d8:	4a1c      	ldr	r2, [pc, #112]	@ (800f34c <CommandPrint+0xbc>)
 800f2da:	011b      	lsls	r3, r3, #4
 800f2dc:	4413      	add	r3, r2
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	7bfb      	ldrb	r3, [r7, #15]
 800f2e2:	491a      	ldr	r1, [pc, #104]	@ (800f34c <CommandPrint+0xbc>)
 800f2e4:	011b      	lsls	r3, r3, #4
 800f2e6:	440b      	add	r3, r1
 800f2e8:	3304      	adds	r3, #4
 800f2ea:	6819      	ldr	r1, [r3, #0]
 800f2ec:	7bfb      	ldrb	r3, [r7, #15]
 800f2ee:	4c17      	ldr	r4, [pc, #92]	@ (800f34c <CommandPrint+0xbc>)
 800f2f0:	011b      	lsls	r3, r3, #4
 800f2f2:	4423      	add	r3, r4
 800f2f4:	3308      	adds	r3, #8
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	9300      	str	r3, [sp, #0]
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	4914      	ldr	r1, [pc, #80]	@ (800f350 <CommandPrint+0xc0>)
 800f2fe:	f7f1 fe69 	bl	8000fd4 <SendMsg>
	for (uint8_t i=0; CommandList[i].name != NULL; i++)
 800f302:	7bfb      	ldrb	r3, [r7, #15]
 800f304:	3301      	adds	r3, #1
 800f306:	73fb      	strb	r3, [r7, #15]
 800f308:	7bfb      	ldrb	r3, [r7, #15]
 800f30a:	4a10      	ldr	r2, [pc, #64]	@ (800f34c <CommandPrint+0xbc>)
 800f30c:	011b      	lsls	r3, r3, #4
 800f30e:	4413      	add	r3, r2
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d1dd      	bne.n	800f2d2 <CommandPrint+0x42>
	}
	SendMsg(shell_huart, "--------------------------------------------------------------------------------------\r\n");
 800f316:	4b06      	ldr	r3, [pc, #24]	@ (800f330 <CommandPrint+0xa0>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	490b      	ldr	r1, [pc, #44]	@ (800f348 <CommandPrint+0xb8>)
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7f1 fe59 	bl	8000fd4 <SendMsg>
}
 800f322:	bf00      	nop
 800f324:	3714      	adds	r7, #20
 800f326:	46bd      	mov	sp, r7
 800f328:	bd90      	pop	{r4, r7, pc}
 800f32a:	bf00      	nop
 800f32c:	08012974 	.word	0x08012974
 800f330:	20013d34 	.word	0x20013d34
 800f334:	0801297c 	.word	0x0801297c
 800f338:	08012a04 	.word	0x08012a04
 800f33c:	080129d8 	.word	0x080129d8
 800f340:	080129e0 	.word	0x080129e0
 800f344:	080129e8 	.word	0x080129e8
 800f348:	08012a0c 	.word	0x08012a0c
 800f34c:	08012d54 	.word	0x08012d54
 800f350:	08012a68 	.word	0x08012a68

0800f354 <PrintArgs>:


static uint8_t PrintArgs(uint8_t argc, char **argv)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
 800f35a:	4603      	mov	r3, r0
 800f35c:	6039      	str	r1, [r7, #0]
 800f35e:	71fb      	strb	r3, [r7, #7]
	LogWriter("PrintArgs");
 800f360:	4811      	ldr	r0, [pc, #68]	@ (800f3a8 <PrintArgs+0x54>)
 800f362:	f7ff f93b 	bl	800e5dc <LogWriter>
	SendMsg(shell_huart, "\r\n");
 800f366:	4b11      	ldr	r3, [pc, #68]	@ (800f3ac <PrintArgs+0x58>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	4911      	ldr	r1, [pc, #68]	@ (800f3b0 <PrintArgs+0x5c>)
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7f1 fe31 	bl	8000fd4 <SendMsg>
	for (uint8_t i=0; i<argc; i++)
 800f372:	2300      	movs	r3, #0
 800f374:	73fb      	strb	r3, [r7, #15]
 800f376:	e00e      	b.n	800f396 <PrintArgs+0x42>
	{
		SendMsg(shell_huart, "%d: %s \r\n", i, argv[i]);
 800f378:	4b0c      	ldr	r3, [pc, #48]	@ (800f3ac <PrintArgs+0x58>)
 800f37a:	6818      	ldr	r0, [r3, #0]
 800f37c:	7bf9      	ldrb	r1, [r7, #15]
 800f37e:	7bfb      	ldrb	r3, [r7, #15]
 800f380:	009b      	lsls	r3, r3, #2
 800f382:	683a      	ldr	r2, [r7, #0]
 800f384:	4413      	add	r3, r2
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	460a      	mov	r2, r1
 800f38a:	490a      	ldr	r1, [pc, #40]	@ (800f3b4 <PrintArgs+0x60>)
 800f38c:	f7f1 fe22 	bl	8000fd4 <SendMsg>
	for (uint8_t i=0; i<argc; i++)
 800f390:	7bfb      	ldrb	r3, [r7, #15]
 800f392:	3301      	adds	r3, #1
 800f394:	73fb      	strb	r3, [r7, #15]
 800f396:	7bfa      	ldrb	r2, [r7, #15]
 800f398:	79fb      	ldrb	r3, [r7, #7]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d3ec      	bcc.n	800f378 <PrintArgs+0x24>
	}
	return 0;
 800f39e:	2300      	movs	r3, #0
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3710      	adds	r7, #16
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	08012a80 	.word	0x08012a80
 800f3ac:	20013d34 	.word	0x20013d34
 800f3b0:	08012a8c 	.word	0x08012a8c
 800f3b4:	08012a90 	.word	0x08012a90

0800f3b8 <CommandExecute>:

bool CommandExecute(uint8_t argc, char **argv)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b084      	sub	sp, #16
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	4603      	mov	r3, r0
 800f3c0:	6039      	str	r1, [r7, #0]
 800f3c2:	71fb      	strb	r3, [r7, #7]
	if (argc != 0 && argv != NULL)
 800f3c4:	79fb      	ldrb	r3, [r7, #7]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d039      	beq.n	800f43e <CommandExecute+0x86>
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d036      	beq.n	800f43e <CommandExecute+0x86>
	{
		for (uint8_t i=0; CommandList[i].name != NULL; i++)
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	73fb      	strb	r3, [r7, #15]
 800f3d4:	e024      	b.n	800f420 <CommandExecute+0x68>
		{
			if(strcmp(CommandList[i].name, argv[0]) == 0)
 800f3d6:	7bfb      	ldrb	r3, [r7, #15]
 800f3d8:	4a1b      	ldr	r2, [pc, #108]	@ (800f448 <CommandExecute+0x90>)
 800f3da:	011b      	lsls	r3, r3, #4
 800f3dc:	4413      	add	r3, r2
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	4619      	mov	r1, r3
 800f3e6:	4610      	mov	r0, r2
 800f3e8:	f7f0 fef2 	bl	80001d0 <strcmp>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d113      	bne.n	800f41a <CommandExecute+0x62>
			{
				if(CommandList[i].func != NULL)
 800f3f2:	7bfb      	ldrb	r3, [r7, #15]
 800f3f4:	4a14      	ldr	r2, [pc, #80]	@ (800f448 <CommandExecute+0x90>)
 800f3f6:	011b      	lsls	r3, r3, #4
 800f3f8:	4413      	add	r3, r2
 800f3fa:	330c      	adds	r3, #12
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d00b      	beq.n	800f41a <CommandExecute+0x62>
				{
					(CommandList[i].func)(argc, argv);
 800f402:	7bfb      	ldrb	r3, [r7, #15]
 800f404:	4a10      	ldr	r2, [pc, #64]	@ (800f448 <CommandExecute+0x90>)
 800f406:	011b      	lsls	r3, r3, #4
 800f408:	4413      	add	r3, r2
 800f40a:	330c      	adds	r3, #12
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	79fa      	ldrb	r2, [r7, #7]
 800f410:	6839      	ldr	r1, [r7, #0]
 800f412:	4610      	mov	r0, r2
 800f414:	4798      	blx	r3
					return true;
 800f416:	2301      	movs	r3, #1
 800f418:	e012      	b.n	800f440 <CommandExecute+0x88>
		for (uint8_t i=0; CommandList[i].name != NULL; i++)
 800f41a:	7bfb      	ldrb	r3, [r7, #15]
 800f41c:	3301      	adds	r3, #1
 800f41e:	73fb      	strb	r3, [r7, #15]
 800f420:	7bfb      	ldrb	r3, [r7, #15]
 800f422:	4a09      	ldr	r2, [pc, #36]	@ (800f448 <CommandExecute+0x90>)
 800f424:	011b      	lsls	r3, r3, #4
 800f426:	4413      	add	r3, r2
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d1d3      	bne.n	800f3d6 <CommandExecute+0x1e>
				}
			}
		}
		SendMsg(shell_huart, "\r\nUnknown command : %s. Type 'help' for commands.\r\n", argv[0]);
 800f42e:	4b07      	ldr	r3, [pc, #28]	@ (800f44c <CommandExecute+0x94>)
 800f430:	6818      	ldr	r0, [r3, #0]
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	461a      	mov	r2, r3
 800f438:	4905      	ldr	r1, [pc, #20]	@ (800f450 <CommandExecute+0x98>)
 800f43a:	f7f1 fdcb 	bl	8000fd4 <SendMsg>
	}
	return false;
 800f43e:	2300      	movs	r3, #0
}
 800f440:	4618      	mov	r0, r3
 800f442:	3710      	adds	r7, #16
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	08012d54 	.word	0x08012d54
 800f44c:	20013d34 	.word	0x20013d34
 800f450:	08012a9c 	.word	0x08012a9c

0800f454 <ReadLine_Init>:
static int  cnt = 0;     // 已存筆數 (<= SHELL_HISTORY_COUNT)
static int  pos = -1;     // 瀏覽指標 (-1 表示未在瀏覽)


void ReadLine_Init(UART_HandleTypeDef* huart)
{
 800f454:	b480      	push	{r7}
 800f456:	b085      	sub	sp, #20
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
	shell_huart = huart;
 800f45c:	4a0c      	ldr	r2, [pc, #48]	@ (800f490 <ReadLine_Init+0x3c>)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6013      	str	r3, [r2, #0]
	for(int i=0;i<CMD_HISTORY_COUNT;i++) historyCommand[i][0]=0;
 800f462:	2300      	movs	r3, #0
 800f464:	60fb      	str	r3, [r7, #12]
 800f466:	e008      	b.n	800f47a <ReadLine_Init+0x26>
 800f468:	4a0a      	ldr	r2, [pc, #40]	@ (800f494 <ReadLine_Init+0x40>)
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	019b      	lsls	r3, r3, #6
 800f46e:	4413      	add	r3, r2
 800f470:	2200      	movs	r2, #0
 800f472:	701a      	strb	r2, [r3, #0]
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	3301      	adds	r3, #1
 800f478:	60fb      	str	r3, [r7, #12]
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	ddf3      	ble.n	800f468 <ReadLine_Init+0x14>
}
 800f480:	bf00      	nop
 800f482:	bf00      	nop
 800f484:	3714      	adds	r7, #20
 800f486:	46bd      	mov	sp, r7
 800f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48c:	4770      	bx	lr
 800f48e:	bf00      	nop
 800f490:	20013d34 	.word	0x20013d34
 800f494:	20013cac 	.word	0x20013cac

0800f498 <CommandHistory_Add>:

void CommandHistory_Add(const char *cmd)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b084      	sub	sp, #16
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
    if (*cmd == '\0') return;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	781b      	ldrb	r3, [r3, #0]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d041      	beq.n	800f52c <CommandHistory_Add+0x94>
    // 避免重複同一筆
    if (cnt>0) {
 800f4a8:	4b23      	ldr	r3, [pc, #140]	@ (800f538 <CommandHistory_Add+0xa0>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	dd13      	ble.n	800f4d8 <CommandHistory_Add+0x40>
        int last = (head+CMD_HISTORY_COUNT-1)%CMD_HISTORY_COUNT;
 800f4b0:	4b22      	ldr	r3, [pc, #136]	@ (800f53c <CommandHistory_Add+0xa4>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	3301      	adds	r3, #1
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	f003 0301 	and.w	r3, r3, #1
 800f4bc:	bfb8      	it	lt
 800f4be:	425b      	neglt	r3, r3
 800f4c0:	60fb      	str	r3, [r7, #12]
        if (strcmp(historyCommand[last], cmd)==0) return;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	019b      	lsls	r3, r3, #6
 800f4c6:	4a1e      	ldr	r2, [pc, #120]	@ (800f540 <CommandHistory_Add+0xa8>)
 800f4c8:	4413      	add	r3, r2
 800f4ca:	6879      	ldr	r1, [r7, #4]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7f0 fe7f 	bl	80001d0 <strcmp>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d02b      	beq.n	800f530 <CommandHistory_Add+0x98>
    }
    strncpy(historyCommand[head], cmd, CMD_HISTORY_MAX_LEN-1);
 800f4d8:	4b18      	ldr	r3, [pc, #96]	@ (800f53c <CommandHistory_Add+0xa4>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	019b      	lsls	r3, r3, #6
 800f4de:	4a18      	ldr	r2, [pc, #96]	@ (800f540 <CommandHistory_Add+0xa8>)
 800f4e0:	4413      	add	r3, r2
 800f4e2:	223f      	movs	r2, #63	@ 0x3f
 800f4e4:	6879      	ldr	r1, [r7, #4]
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f001 f87f 	bl	80105ea <strncpy>
    historyCommand[head][CMD_HISTORY_MAX_LEN-1] = '\0';
 800f4ec:	4b13      	ldr	r3, [pc, #76]	@ (800f53c <CommandHistory_Add+0xa4>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4a13      	ldr	r2, [pc, #76]	@ (800f540 <CommandHistory_Add+0xa8>)
 800f4f2:	019b      	lsls	r3, r3, #6
 800f4f4:	4413      	add	r3, r2
 800f4f6:	333f      	adds	r3, #63	@ 0x3f
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	701a      	strb	r2, [r3, #0]
    head = (head+1) % CMD_HISTORY_COUNT;
 800f4fc:	4b0f      	ldr	r3, [pc, #60]	@ (800f53c <CommandHistory_Add+0xa4>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	3301      	adds	r3, #1
 800f502:	2b00      	cmp	r3, #0
 800f504:	f003 0301 	and.w	r3, r3, #1
 800f508:	bfb8      	it	lt
 800f50a:	425b      	neglt	r3, r3
 800f50c:	4a0b      	ldr	r2, [pc, #44]	@ (800f53c <CommandHistory_Add+0xa4>)
 800f50e:	6013      	str	r3, [r2, #0]
    if (cnt < CMD_HISTORY_COUNT) cnt++;
 800f510:	4b09      	ldr	r3, [pc, #36]	@ (800f538 <CommandHistory_Add+0xa0>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2b01      	cmp	r3, #1
 800f516:	dc04      	bgt.n	800f522 <CommandHistory_Add+0x8a>
 800f518:	4b07      	ldr	r3, [pc, #28]	@ (800f538 <CommandHistory_Add+0xa0>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	3301      	adds	r3, #1
 800f51e:	4a06      	ldr	r2, [pc, #24]	@ (800f538 <CommandHistory_Add+0xa0>)
 800f520:	6013      	str	r3, [r2, #0]
    pos = -1;
 800f522:	4b08      	ldr	r3, [pc, #32]	@ (800f544 <CommandHistory_Add+0xac>)
 800f524:	f04f 32ff 	mov.w	r2, #4294967295
 800f528:	601a      	str	r2, [r3, #0]
 800f52a:	e002      	b.n	800f532 <CommandHistory_Add+0x9a>
    if (*cmd == '\0') return;
 800f52c:	bf00      	nop
 800f52e:	e000      	b.n	800f532 <CommandHistory_Add+0x9a>
        if (strcmp(historyCommand[last], cmd)==0) return;
 800f530:	bf00      	nop
}
 800f532:	3710      	adds	r7, #16
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}
 800f538:	20013d30 	.word	0x20013d30
 800f53c:	20013d2c 	.word	0x20013d2c
 800f540:	20013cac 	.word	0x20013cac
 800f544:	2000012c 	.word	0x2000012c

0800f548 <CommandHistory_Prev>:

bool CommandHistory_Prev(char *out)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b082      	sub	sp, #8
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
    if (cnt==0) return false;
 800f550:	4b16      	ldr	r3, [pc, #88]	@ (800f5ac <CommandHistory_Prev+0x64>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d101      	bne.n	800f55c <CommandHistory_Prev+0x14>
 800f558:	2300      	movs	r3, #0
 800f55a:	e022      	b.n	800f5a2 <CommandHistory_Prev+0x5a>
    if (pos < 0) {
 800f55c:	4b14      	ldr	r3, [pc, #80]	@ (800f5b0 <CommandHistory_Prev+0x68>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	2b00      	cmp	r3, #0
 800f562:	da0a      	bge.n	800f57a <CommandHistory_Prev+0x32>
        pos = (head+CMD_HISTORY_COUNT-1)%CMD_HISTORY_COUNT;
 800f564:	4b13      	ldr	r3, [pc, #76]	@ (800f5b4 <CommandHistory_Prev+0x6c>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	3301      	adds	r3, #1
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	f003 0301 	and.w	r3, r3, #1
 800f570:	bfb8      	it	lt
 800f572:	425b      	neglt	r3, r3
 800f574:	4a0e      	ldr	r2, [pc, #56]	@ (800f5b0 <CommandHistory_Prev+0x68>)
 800f576:	6013      	str	r3, [r2, #0]
 800f578:	e009      	b.n	800f58e <CommandHistory_Prev+0x46>
    } else {
        pos = (pos+CMD_HISTORY_COUNT-1)%CMD_HISTORY_COUNT;
 800f57a:	4b0d      	ldr	r3, [pc, #52]	@ (800f5b0 <CommandHistory_Prev+0x68>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	3301      	adds	r3, #1
 800f580:	2b00      	cmp	r3, #0
 800f582:	f003 0301 	and.w	r3, r3, #1
 800f586:	bfb8      	it	lt
 800f588:	425b      	neglt	r3, r3
 800f58a:	4a09      	ldr	r2, [pc, #36]	@ (800f5b0 <CommandHistory_Prev+0x68>)
 800f58c:	6013      	str	r3, [r2, #0]
    }
    strcpy(out, historyCommand[pos]);
 800f58e:	4b08      	ldr	r3, [pc, #32]	@ (800f5b0 <CommandHistory_Prev+0x68>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	019b      	lsls	r3, r3, #6
 800f594:	4a08      	ldr	r2, [pc, #32]	@ (800f5b8 <CommandHistory_Prev+0x70>)
 800f596:	4413      	add	r3, r2
 800f598:	4619      	mov	r1, r3
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f001 f91d 	bl	80107da <strcpy>
    return true;
 800f5a0:	2301      	movs	r3, #1
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3708      	adds	r7, #8
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	20013d30 	.word	0x20013d30
 800f5b0:	2000012c 	.word	0x2000012c
 800f5b4:	20013d2c 	.word	0x20013d2c
 800f5b8:	20013cac 	.word	0x20013cac

0800f5bc <CommandHistory_Next>:

bool CommandHistory_Next(char *out)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
    if (cnt==0 || pos<0) return false;
 800f5c4:	4b18      	ldr	r3, [pc, #96]	@ (800f628 <CommandHistory_Next+0x6c>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d003      	beq.n	800f5d4 <CommandHistory_Next+0x18>
 800f5cc:	4b17      	ldr	r3, [pc, #92]	@ (800f62c <CommandHistory_Next+0x70>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	da01      	bge.n	800f5d8 <CommandHistory_Next+0x1c>
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	e022      	b.n	800f61e <CommandHistory_Next+0x62>
    pos = (pos+1) % CMD_HISTORY_COUNT;
 800f5d8:	4b14      	ldr	r3, [pc, #80]	@ (800f62c <CommandHistory_Next+0x70>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	3301      	adds	r3, #1
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	f003 0301 	and.w	r3, r3, #1
 800f5e4:	bfb8      	it	lt
 800f5e6:	425b      	neglt	r3, r3
 800f5e8:	4a10      	ldr	r2, [pc, #64]	@ (800f62c <CommandHistory_Next+0x70>)
 800f5ea:	6013      	str	r3, [r2, #0]
    if (pos == head) {
 800f5ec:	4b0f      	ldr	r3, [pc, #60]	@ (800f62c <CommandHistory_Next+0x70>)
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	4b0f      	ldr	r3, [pc, #60]	@ (800f630 <CommandHistory_Next+0x74>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d108      	bne.n	800f60a <CommandHistory_Next+0x4e>
        out[0] = '\0';
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	701a      	strb	r2, [r3, #0]
        pos = -1;
 800f5fe:	4b0b      	ldr	r3, [pc, #44]	@ (800f62c <CommandHistory_Next+0x70>)
 800f600:	f04f 32ff 	mov.w	r2, #4294967295
 800f604:	601a      	str	r2, [r3, #0]
        return true;
 800f606:	2301      	movs	r3, #1
 800f608:	e009      	b.n	800f61e <CommandHistory_Next+0x62>
    }
    strcpy(out, historyCommand[pos]);
 800f60a:	4b08      	ldr	r3, [pc, #32]	@ (800f62c <CommandHistory_Next+0x70>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	019b      	lsls	r3, r3, #6
 800f610:	4a08      	ldr	r2, [pc, #32]	@ (800f634 <CommandHistory_Next+0x78>)
 800f612:	4413      	add	r3, r2
 800f614:	4619      	mov	r1, r3
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f001 f8df 	bl	80107da <strcpy>
    return true;
 800f61c:	2301      	movs	r3, #1
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3708      	adds	r7, #8
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
 800f626:	bf00      	nop
 800f628:	20013d30 	.word	0x20013d30
 800f62c:	2000012c 	.word	0x2000012c
 800f630:	20013d2c 	.word	0x20013d2c
 800f634:	20013cac 	.word	0x20013cac

0800f638 <GetChar>:

static bool GetChar(char *out_char)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
	if(ReceiveChar(shell_huart, out_char) == HAL_OK)
 800f640:	4b07      	ldr	r3, [pc, #28]	@ (800f660 <GetChar+0x28>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	6879      	ldr	r1, [r7, #4]
 800f646:	4618      	mov	r0, r3
 800f648:	f7f1 fd16 	bl	8001078 <ReceiveChar>
 800f64c:	4603      	mov	r3, r0
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d101      	bne.n	800f656 <GetChar+0x1e>
		return true;
 800f652:	2301      	movs	r3, #1
 800f654:	e000      	b.n	800f658 <GetChar+0x20>
	return false;
 800f656:	2300      	movs	r3, #0
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3708      	adds	r7, #8
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}
 800f660:	20013d34 	.word	0x20013d34

0800f664 <PutChar>:

static void PutChar(char cChar)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	4603      	mov	r3, r0
 800f66c:	71fb      	strb	r3, [r7, #7]
	SendChar(shell_huart, cChar);
 800f66e:	4b05      	ldr	r3, [pc, #20]	@ (800f684 <PutChar+0x20>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	79fa      	ldrb	r2, [r7, #7]
 800f674:	4611      	mov	r1, r2
 800f676:	4618      	mov	r0, r3
 800f678:	f7f1 fc9a 	bl	8000fb0 <SendChar>
}
 800f67c:	bf00      	nop
 800f67e:	3708      	adds	r7, #8
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}
 800f684:	20013d34 	.word	0x20013d34

0800f688 <PutString>:

static void PutString(const char *const pcChar)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
	SendMsg(shell_huart, pcChar);
 800f690:	4b04      	ldr	r3, [pc, #16]	@ (800f6a4 <PutString+0x1c>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	6879      	ldr	r1, [r7, #4]
 800f696:	4618      	mov	r0, r3
 800f698:	f7f1 fc9c 	bl	8000fd4 <SendMsg>
}
 800f69c:	bf00      	nop
 800f69e:	3708      	adds	r7, #8
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}
 800f6a4:	20013d34 	.word	0x20013d34

0800f6a8 <ReadLine>:

uint32_t ReadLine(char* readBuffer, int bufferSize)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b09a      	sub	sp, #104	@ 0x68
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	6039      	str	r1, [r7, #0]

	char *pCur = readBuffer; /* the point to ready receive. */
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	667b      	str	r3, [r7, #100]	@ 0x64
	char cChar = 0;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	uint32_t receiveCharCnt = 0;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	663b      	str	r3, [r7, #96]	@ 0x60
	uint32_t PromptLen = 0;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint32_t outputColumnCnt = 0;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	65bb      	str	r3, [r7, #88]	@ 0x58
	memset(readBuffer, 0, bufferSize);
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	2100      	movs	r1, #0
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f000 ff72 	bl	80105b8 <memset>
	/* print Prompt */
	if (*prompt)
 800f6d4:	4ba2      	ldr	r3, [pc, #648]	@ (800f960 <ReadLine+0x2b8>)
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d00b      	beq.n	800f6f4 <ReadLine+0x4c>
	{
		PutString("\n\r");
 800f6dc:	48a1      	ldr	r0, [pc, #644]	@ (800f964 <ReadLine+0x2bc>)
 800f6de:	f7ff ffd3 	bl	800f688 <PutString>
		PromptLen = strlen(prompt);
 800f6e2:	489f      	ldr	r0, [pc, #636]	@ (800f960 <ReadLine+0x2b8>)
 800f6e4:	f7f0 fd7e 	bl	80001e4 <strlen>
 800f6e8:	65f8      	str	r0, [r7, #92]	@ 0x5c
		outputColumnCnt = PromptLen;
 800f6ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f6ec:	65bb      	str	r3, [r7, #88]	@ 0x58
		PutString(prompt);
 800f6ee:	489c      	ldr	r0, [pc, #624]	@ (800f960 <ReadLine+0x2b8>)
 800f6f0:	f7ff ffca 	bl	800f688 <PutString>
	}
	for (;;)
	{
		bool isGotChar = GetChar(&cChar);
 800f6f4:	f107 034b 	add.w	r3, r7, #75	@ 0x4b
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7ff ff9d 	bl	800f638 <GetChar>
 800f6fe:	4603      	mov	r3, r0
 800f700:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		if(isGotChar) {
 800f704:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f708:	2b00      	cmp	r3, #0
 800f70a:	f000 8121 	beq.w	800f950 <ReadLine+0x2a8>
			switch (cChar)
 800f70e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800f712:	2b7f      	cmp	r3, #127	@ 0x7f
 800f714:	d071      	beq.n	800f7fa <ReadLine+0x152>
 800f716:	2b7f      	cmp	r3, #127	@ 0x7f
 800f718:	f300 80e4 	bgt.w	800f8e4 <ReadLine+0x23c>
 800f71c:	2b5d      	cmp	r3, #93	@ 0x5d
 800f71e:	f000 80b7 	beq.w	800f890 <ReadLine+0x1e8>
 800f722:	2b5d      	cmp	r3, #93	@ 0x5d
 800f724:	f300 80de 	bgt.w	800f8e4 <ReadLine+0x23c>
 800f728:	2b15      	cmp	r3, #21
 800f72a:	dc2f      	bgt.n	800f78c <ReadLine+0xe4>
 800f72c:	2b03      	cmp	r3, #3
 800f72e:	f2c0 80d9 	blt.w	800f8e4 <ReadLine+0x23c>
 800f732:	3b03      	subs	r3, #3
 800f734:	2b12      	cmp	r3, #18
 800f736:	f200 80d5 	bhi.w	800f8e4 <ReadLine+0x23c>
 800f73a:	a201      	add	r2, pc, #4	@ (adr r2, 800f740 <ReadLine+0x98>)
 800f73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f740:	0800f793 	.word	0x0800f793
 800f744:	0800f8e5 	.word	0x0800f8e5
 800f748:	0800f8e5 	.word	0x0800f8e5
 800f74c:	0800f8e5 	.word	0x0800f8e5
 800f750:	0800f8e5 	.word	0x0800f8e5
 800f754:	0800f7fb 	.word	0x0800f7fb
 800f758:	0800f8e5 	.word	0x0800f8e5
 800f75c:	0800f797 	.word	0x0800f797
 800f760:	0800f8e5 	.word	0x0800f8e5
 800f764:	0800f8e5 	.word	0x0800f8e5
 800f768:	0800f797 	.word	0x0800f797
 800f76c:	0800f8e5 	.word	0x0800f8e5
 800f770:	0800f8e5 	.word	0x0800f8e5
 800f774:	0800f8e5 	.word	0x0800f8e5
 800f778:	0800f8e5 	.word	0x0800f8e5
 800f77c:	0800f8e5 	.word	0x0800f8e5
 800f780:	0800f8e5 	.word	0x0800f8e5
 800f784:	0800f8e5 	.word	0x0800f8e5
 800f788:	0800f7d7 	.word	0x0800f7d7
 800f78c:	2b5b      	cmp	r3, #91	@ 0x5b
 800f78e:	d055      	beq.n	800f83c <ReadLine+0x194>
 800f790:	e0a8      	b.n	800f8e4 <ReadLine+0x23c>
			{
			case 0x03: /* ^C - break */
				return 0;
 800f792:	2300      	movs	r3, #0
 800f794:	e0e0      	b.n	800f958 <ReadLine+0x2b0>
			case '\r': /*\r*/
			case '\n': /*\n*/
				if ((pCur >= &readBuffer[0]) &&
 800f796:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d310      	bcc.n	800f7c0 <ReadLine+0x118>
					(pCur <= &readBuffer[READBUF_LEN]))
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
				if ((pCur >= &readBuffer[0]) &&
 800f7a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d80a      	bhi.n	800f7c0 <ReadLine+0x118>
				{
					*(pCur + 1) = '\0';
 800f7aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f7ac:	3301      	adds	r3, #1
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	701a      	strb	r2, [r3, #0]
	//				PutString("\n\r");
	//				PutString(readBuffer);
					CommandHistory_Add(readBuffer);
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f7ff fe70 	bl	800f498 <CommandHistory_Add>
					return (pCur - readBuffer);
 800f7b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	1ad3      	subs	r3, r2, r3
 800f7be:	e0cb      	b.n	800f958 <ReadLine+0x2b0>
				}
				else /* Buffer full (Overflow) */
				{
					memset(readBuffer, 0, bufferSize);
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	2100      	movs	r1, #0
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f000 fef6 	bl	80105b8 <memset>
					return 0;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	e0c3      	b.n	800f958 <ReadLine+0x2b0>
				}

			case 0x15: /* ^U - erase line */
				while (outputColumnCnt > PromptLen)
				{
					outputColumnCnt--;
 800f7d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f7d2:	3b01      	subs	r3, #1
 800f7d4:	65bb      	str	r3, [r7, #88]	@ 0x58
				while (outputColumnCnt > PromptLen)
 800f7d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f7d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d8f8      	bhi.n	800f7d0 <ReadLine+0x128>
				}
				memset(readBuffer, 0, bufferSize);
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	461a      	mov	r2, r3
 800f7e2:	2100      	movs	r1, #0
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f000 fee7 	bl	80105b8 <memset>
				pCur = readBuffer;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	667b      	str	r3, [r7, #100]	@ 0x64
				receiveCharCnt = 0x00;
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	663b      	str	r3, [r7, #96]	@ 0x60
				PutString("\n\r> ");
 800f7f2:	485d      	ldr	r0, [pc, #372]	@ (800f968 <ReadLine+0x2c0>)
 800f7f4:	f7ff ff48 	bl	800f688 <PutString>
				break;
 800f7f8:	e0a6      	b.n	800f948 <ReadLine+0x2a0>

			case 0x7F: /* DEL - backspace	*/
			case 0x08:
				// 鼠標位置大於 promote
				if ((outputColumnCnt > PromptLen) && (pCur > &readBuffer[0]) && (receiveCharCnt > 0x00))
 800f7fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f7fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f7fe:	429a      	cmp	r2, r3
 800f800:	f240 809d 	bls.w	800f93e <ReadLine+0x296>
 800f804:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	429a      	cmp	r2, r3
 800f80a:	f240 8098 	bls.w	800f93e <ReadLine+0x296>
 800f80e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f810:	2b00      	cmp	r3, #0
 800f812:	f000 8094 	beq.w	800f93e <ReadLine+0x296>
				{
					outputColumnCnt--;
 800f816:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f818:	3b01      	subs	r3, #1
 800f81a:	65bb      	str	r3, [r7, #88]	@ 0x58
					pCur--;
 800f81c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f81e:	3b01      	subs	r3, #1
 800f820:	667b      	str	r3, [r7, #100]	@ 0x64
					receiveCharCnt--;
 800f822:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f824:	3b01      	subs	r3, #1
 800f826:	663b      	str	r3, [r7, #96]	@ 0x60
					*pCur = '\0'; /* earse the receice char */
 800f828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f82a:	2200      	movs	r2, #0
 800f82c:	701a      	strb	r2, [r3, #0]
					PutString("\n\r> ");
 800f82e:	484e      	ldr	r0, [pc, #312]	@ (800f968 <ReadLine+0x2c0>)
 800f830:	f7ff ff2a 	bl	800f688 <PutString>
					PutString(readBuffer);
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f7ff ff27 	bl	800f688 <PutString>
				}
				break;
 800f83a:	e080      	b.n	800f93e <ReadLine+0x296>

			case '[':
				char preCmd[CMD_HISTORY_MAX_LEN];
				if(!CommandHistory_Prev(preCmd)) break;
 800f83c:	f107 0308 	add.w	r3, r7, #8
 800f840:	4618      	mov	r0, r3
 800f842:	f7ff fe81 	bl	800f548 <CommandHistory_Prev>
 800f846:	4603      	mov	r3, r0
 800f848:	f083 0301 	eor.w	r3, r3, #1
 800f84c:	b2db      	uxtb	r3, r3
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d177      	bne.n	800f942 <ReadLine+0x29a>
				PutString("\n\r> ");
 800f852:	4845      	ldr	r0, [pc, #276]	@ (800f968 <ReadLine+0x2c0>)
 800f854:	f7ff ff18 	bl	800f688 <PutString>
				PutString(preCmd);
 800f858:	f107 0308 	add.w	r3, r7, #8
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7ff ff13 	bl	800f688 <PutString>
				strncpy(readBuffer, preCmd, sizeof(preCmd));
 800f862:	f107 0308 	add.w	r3, r7, #8
 800f866:	2240      	movs	r2, #64	@ 0x40
 800f868:	4619      	mov	r1, r3
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f000 febd 	bl	80105ea <strncpy>
				int preCmdLen = strlen(readBuffer);
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f7f0 fcb7 	bl	80001e4 <strlen>
 800f876:	4603      	mov	r3, r0
 800f878:	64fb      	str	r3, [r7, #76]	@ 0x4c
				pCur = &readBuffer[preCmdLen];
 800f87a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	4413      	add	r3, r2
 800f880:	667b      	str	r3, [r7, #100]	@ 0x64
				outputColumnCnt = PromptLen + preCmdLen;
 800f882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f884:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f886:	4413      	add	r3, r2
 800f888:	65bb      	str	r3, [r7, #88]	@ 0x58
				receiveCharCnt = preCmdLen;
 800f88a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f88c:	663b      	str	r3, [r7, #96]	@ 0x60
				break;
 800f88e:	e05b      	b.n	800f948 <ReadLine+0x2a0>

			case ']':
				char nextCmd[CMD_HISTORY_MAX_LEN];
				if(!CommandHistory_Next(nextCmd)) break;
 800f890:	f107 0308 	add.w	r3, r7, #8
 800f894:	4618      	mov	r0, r3
 800f896:	f7ff fe91 	bl	800f5bc <CommandHistory_Next>
 800f89a:	4603      	mov	r3, r0
 800f89c:	f083 0301 	eor.w	r3, r3, #1
 800f8a0:	b2db      	uxtb	r3, r3
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d14f      	bne.n	800f946 <ReadLine+0x29e>
				PutString("\n\r> ");
 800f8a6:	4830      	ldr	r0, [pc, #192]	@ (800f968 <ReadLine+0x2c0>)
 800f8a8:	f7ff feee 	bl	800f688 <PutString>
				PutString(nextCmd);
 800f8ac:	f107 0308 	add.w	r3, r7, #8
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f7ff fee9 	bl	800f688 <PutString>
				strncpy(readBuffer, nextCmd, sizeof(nextCmd));
 800f8b6:	f107 0308 	add.w	r3, r7, #8
 800f8ba:	2240      	movs	r2, #64	@ 0x40
 800f8bc:	4619      	mov	r1, r3
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 fe93 	bl	80105ea <strncpy>
				int nextCmdLen = strlen(readBuffer);
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f7f0 fc8d 	bl	80001e4 <strlen>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	653b      	str	r3, [r7, #80]	@ 0x50
				pCur = &readBuffer[nextCmdLen];
 800f8ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8d0:	687a      	ldr	r2, [r7, #4]
 800f8d2:	4413      	add	r3, r2
 800f8d4:	667b      	str	r3, [r7, #100]	@ 0x64
				outputColumnCnt = PromptLen + nextCmdLen;
 800f8d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f8da:	4413      	add	r3, r2
 800f8dc:	65bb      	str	r3, [r7, #88]	@ 0x58
				receiveCharCnt = nextCmdLen;
 800f8de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8e0:	663b      	str	r3, [r7, #96]	@ 0x60
				break;
 800f8e2:	e031      	b.n	800f948 <ReadLine+0x2a0>

			default:
				if (receiveCharCnt < bufferSize &&
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d224      	bcs.n	800f936 <ReadLine+0x28e>
 800f8ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d320      	bcc.n	800f936 <ReadLine+0x28e>
					(pCur >= &readBuffer[0]) &&
					(pCur <= &readBuffer[READBUF_LEN]) &&
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
					(pCur >= &readBuffer[0]) &&
 800f8fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d81a      	bhi.n	800f936 <ReadLine+0x28e>
					(cChar > 0x19 && cChar < 0x7F))
 800f900:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
					(pCur <= &readBuffer[READBUF_LEN]) &&
 800f904:	2b19      	cmp	r3, #25
 800f906:	d916      	bls.n	800f936 <ReadLine+0x28e>
					(cChar > 0x19 && cChar < 0x7F))
 800f908:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800f90c:	2b7e      	cmp	r3, #126	@ 0x7e
 800f90e:	d812      	bhi.n	800f936 <ReadLine+0x28e>
				{
					outputColumnCnt++;
 800f910:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f912:	3301      	adds	r3, #1
 800f914:	65bb      	str	r3, [r7, #88]	@ 0x58
					PutChar(cChar);
 800f916:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7ff fea2 	bl	800f664 <PutChar>
					*pCur = cChar;
 800f920:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800f924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f926:	701a      	strb	r2, [r3, #0]
					pCur++;
 800f928:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f92a:	3301      	adds	r3, #1
 800f92c:	667b      	str	r3, [r7, #100]	@ 0x64
					receiveCharCnt++;
 800f92e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f930:	3301      	adds	r3, #1
 800f932:	663b      	str	r3, [r7, #96]	@ 0x60
 800f934:	e008      	b.n	800f948 <ReadLine+0x2a0>
				}
				else /* Buffer full (Overflow) */
				{
					PutChar('\a');
 800f936:	2007      	movs	r0, #7
 800f938:	f7ff fe94 	bl	800f664 <PutChar>
 800f93c:	e004      	b.n	800f948 <ReadLine+0x2a0>
				break;
 800f93e:	bf00      	nop
 800f940:	e002      	b.n	800f948 <ReadLine+0x2a0>
				if(!CommandHistory_Prev(preCmd)) break;
 800f942:	bf00      	nop
 800f944:	e000      	b.n	800f948 <ReadLine+0x2a0>
				if(!CommandHistory_Next(nextCmd)) break;
 800f946:	bf00      	nop
				}
			}
			vTaskDelay(pdMS_TO_TICKS(0));
 800f948:	2000      	movs	r0, #0
 800f94a:	f7fa f899 	bl	8009a80 <vTaskDelay>
 800f94e:	e6d1      	b.n	800f6f4 <ReadLine+0x4c>
		}
		else {
			vTaskDelay(pdMS_TO_TICKS(50));
 800f950:	2032      	movs	r0, #50	@ 0x32
 800f952:	f7fa f895 	bl	8009a80 <vTaskDelay>
	{
 800f956:	e6cd      	b.n	800f6f4 <ReadLine+0x4c>
		}
	}
	return 0;
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3768      	adds	r7, #104	@ 0x68
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}
 800f960:	2000002c 	.word	0x2000002c
 800f964:	08012ad0 	.word	0x08012ad0
 800f968:	08012ad4 	.word	0x08012ad4

0800f96c <ArgAnalyze>:

bool ArgAnalyze(char* readBuffer, uint8_t *argc, char *argv[])
{
 800f96c:	b480      	push	{r7}
 800f96e:	b087      	sub	sp, #28
 800f970:	af00      	add	r7, sp, #0
 800f972:	60f8      	str	r0, [r7, #12]
 800f974:	60b9      	str	r1, [r7, #8]
 800f976:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 800f978:	2300      	movs	r3, #0
 800f97a:	617b      	str	r3, [r7, #20]

	while (*argc < MAX_ARGS)
 800f97c:	e04a      	b.n	800fa14 <ArgAnalyze+0xa8>
	{
		/* skip any separator */
		while (readBuffer[i] == ' ')
		{
			i++;
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	3301      	adds	r3, #1
 800f982:	617b      	str	r3, [r7, #20]
		while (readBuffer[i] == ' ')
 800f984:	68fa      	ldr	r2, [r7, #12]
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	4413      	add	r3, r2
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	2b20      	cmp	r3, #32
 800f98e:	d0f6      	beq.n	800f97e <ArgAnalyze+0x12>
		}
		/* end of line, no more args	*/
		if (readBuffer[i] == '\0')
 800f990:	68fa      	ldr	r2, [r7, #12]
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	4413      	add	r3, r2
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d108      	bne.n	800f9ae <ArgAnalyze+0x42>
		{
			argv[*argc] = NULL;
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	009b      	lsls	r3, r3, #2
 800f9a2:	687a      	ldr	r2, [r7, #4]
 800f9a4:	4413      	add	r3, r2
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	601a      	str	r2, [r3, #0]
			return true;
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	e037      	b.n	800fa1e <ArgAnalyze+0xb2>
		}
		/* begin of argument string */
		argv[(*argc)++] = &readBuffer[i];
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	1c5a      	adds	r2, r3, #1
 800f9b4:	b2d1      	uxtb	r1, r2
 800f9b6:	68ba      	ldr	r2, [r7, #8]
 800f9b8:	7011      	strb	r1, [r2, #0]
 800f9ba:	009b      	lsls	r3, r3, #2
 800f9bc:	687a      	ldr	r2, [r7, #4]
 800f9be:	4413      	add	r3, r2
 800f9c0:	68f9      	ldr	r1, [r7, #12]
 800f9c2:	697a      	ldr	r2, [r7, #20]
 800f9c4:	440a      	add	r2, r1
 800f9c6:	601a      	str	r2, [r3, #0]
		/* find end of argument string */
		while (readBuffer[i] && readBuffer[i] != ' ')
 800f9c8:	e002      	b.n	800f9d0 <ArgAnalyze+0x64>
		{
			i++;
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	617b      	str	r3, [r7, #20]
		while (readBuffer[i] && readBuffer[i] != ' ')
 800f9d0:	68fa      	ldr	r2, [r7, #12]
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	4413      	add	r3, r2
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d005      	beq.n	800f9e8 <ArgAnalyze+0x7c>
 800f9dc:	68fa      	ldr	r2, [r7, #12]
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	4413      	add	r3, r2
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	2b20      	cmp	r3, #32
 800f9e6:	d1f0      	bne.n	800f9ca <ArgAnalyze+0x5e>
		}
		/* end of line, no more args */
		if (readBuffer[i] == '\0')
 800f9e8:	68fa      	ldr	r2, [r7, #12]
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	4413      	add	r3, r2
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d108      	bne.n	800fa06 <ArgAnalyze+0x9a>
		{
			argv[*argc] = NULL;
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	009b      	lsls	r3, r3, #2
 800f9fa:	687a      	ldr	r2, [r7, #4]
 800f9fc:	4413      	add	r3, r2
 800f9fe:	2200      	movs	r2, #0
 800fa00:	601a      	str	r2, [r3, #0]
			return true;
 800fa02:	2301      	movs	r3, #1
 800fa04:	e00b      	b.n	800fa1e <ArgAnalyze+0xb2>
		}
		readBuffer[i++] = '\0';
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	1c5a      	adds	r2, r3, #1
 800fa0a:	617a      	str	r2, [r7, #20]
 800fa0c:	68fa      	ldr	r2, [r7, #12]
 800fa0e:	4413      	add	r3, r2
 800fa10:	2200      	movs	r2, #0
 800fa12:	701a      	strb	r2, [r3, #0]
	while (*argc < MAX_ARGS)
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	2b09      	cmp	r3, #9
 800fa1a:	d9b3      	bls.n	800f984 <ArgAnalyze+0x18>
	}
	return false;
 800fa1c:	2300      	movs	r3, #0
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	371c      	adds	r7, #28
 800fa22:	46bd      	mov	sp, r7
 800fa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa28:	4770      	bx	lr
	...

0800fa2c <Shell_Init>:
UART_HandleTypeDef* shell_huart;
QueueHandle_t xShellQueue;
char readBuffer[READBUF_LEN] = {0};

void Shell_Init(UART_HandleTypeDef *huart)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b082      	sub	sp, #8
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
	shell_huart = huart;
 800fa34:	4a06      	ldr	r2, [pc, #24]	@ (800fa50 <Shell_Init+0x24>)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6013      	str	r3, [r2, #0]
	ReadLine_Init(huart);
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f7ff fd0a 	bl	800f454 <ReadLine_Init>
	command_Init(huart);
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f7ff f9e3 	bl	800ee0c <command_Init>
}
 800fa46:	bf00      	nop
 800fa48:	3708      	adds	r7, #8
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}
 800fa4e:	bf00      	nop
 800fa50:	20013d34 	.word	0x20013d34

0800fa54 <Shell_OS_Resources_Init>:

void Shell_OS_Resources_Init()
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b082      	sub	sp, #8
 800fa58:	af00      	add	r7, sp, #0
	xShellQueue = xQueueCreate(4, sizeof(ShellMsgStruct));
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	21c8      	movs	r1, #200	@ 0xc8
 800fa5e:	2004      	movs	r0, #4
 800fa60:	f7f9 f926 	bl	8008cb0 <xQueueGenericCreate>
 800fa64:	4603      	mov	r3, r0
 800fa66:	4a07      	ldr	r2, [pc, #28]	@ (800fa84 <Shell_OS_Resources_Init+0x30>)
 800fa68:	6013      	str	r3, [r2, #0]

	const char *welcome_msg = "\r\nSTM32 Shell Initialized. Type 'help' for commands.\r\n";
 800fa6a:	4b07      	ldr	r3, [pc, #28]	@ (800fa88 <Shell_OS_Resources_Init+0x34>)
 800fa6c:	607b      	str	r3, [r7, #4]
	SendMsg(shell_huart, welcome_msg);
 800fa6e:	4b07      	ldr	r3, [pc, #28]	@ (800fa8c <Shell_OS_Resources_Init+0x38>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	6879      	ldr	r1, [r7, #4]
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7f1 faad 	bl	8000fd4 <SendMsg>
}
 800fa7a:	bf00      	nop
 800fa7c:	3708      	adds	r7, #8
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
 800fa82:	bf00      	nop
 800fa84:	20013d38 	.word	0x20013d38
 800fa88:	08012adc 	.word	0x08012adc
 800fa8c:	20013d34 	.word	0x20013d34

0800fa90 <ShellHandler>:

void ShellHandler(void *pvParameters)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b082      	sub	sp, #8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
	static uint8_t argc = 0;
	static char *argv[MAX_ARGS] = {0};

	while (1)
	{
		if (ReadLine(readBuffer, READBUF_LEN))
 800fa98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800fa9c:	4812      	ldr	r0, [pc, #72]	@ (800fae8 <ShellHandler+0x58>)
 800fa9e:	f7ff fe03 	bl	800f6a8 <ReadLine>
 800faa2:	4603      	mov	r3, r0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d01a      	beq.n	800fade <ShellHandler+0x4e>
		{
			memset(&argc, 0, sizeof(argc));
 800faa8:	4b10      	ldr	r3, [pc, #64]	@ (800faec <ShellHandler+0x5c>)
 800faaa:	2200      	movs	r2, #0
 800faac:	701a      	strb	r2, [r3, #0]
			memset(argv, 0, sizeof(argv));
 800faae:	2228      	movs	r2, #40	@ 0x28
 800fab0:	2100      	movs	r1, #0
 800fab2:	480f      	ldr	r0, [pc, #60]	@ (800faf0 <ShellHandler+0x60>)
 800fab4:	f000 fd80 	bl	80105b8 <memset>

			if (ArgAnalyze(readBuffer, &argc, argv))
 800fab8:	4a0d      	ldr	r2, [pc, #52]	@ (800faf0 <ShellHandler+0x60>)
 800faba:	490c      	ldr	r1, [pc, #48]	@ (800faec <ShellHandler+0x5c>)
 800fabc:	480a      	ldr	r0, [pc, #40]	@ (800fae8 <ShellHandler+0x58>)
 800fabe:	f7ff ff55 	bl	800f96c <ArgAnalyze>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d00a      	beq.n	800fade <ShellHandler+0x4e>
			{
				CommandExecute(argc, argv);
 800fac8:	4b08      	ldr	r3, [pc, #32]	@ (800faec <ShellHandler+0x5c>)
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	4908      	ldr	r1, [pc, #32]	@ (800faf0 <ShellHandler+0x60>)
 800face:	4618      	mov	r0, r3
 800fad0:	f7ff fc72 	bl	800f3b8 <CommandExecute>
				SetLCDCommandStatus(argv[0]);
 800fad4:	4b06      	ldr	r3, [pc, #24]	@ (800faf0 <ShellHandler+0x60>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4618      	mov	r0, r3
 800fada:	f7fb feff 	bl	800b8dc <SetLCDCommandStatus>
			}
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 800fade:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800fae2:	f7f9 ffcd 	bl	8009a80 <vTaskDelay>
		if (ReadLine(readBuffer, READBUF_LEN))
 800fae6:	e7d7      	b.n	800fa98 <ShellHandler+0x8>
 800fae8:	20013d3c 	.word	0x20013d3c
 800faec:	2001413c 	.word	0x2001413c
 800faf0:	20014140 	.word	0x20014140

0800faf4 <TryGetCommand>:
	}
}

bool TryGetCommand(ShellMsgStruct* pShellMsg, char* cmd)
{	
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b0a4      	sub	sp, #144	@ 0x90
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	6039      	str	r1, [r7, #0]
	char buf[128];
	strncpy(buf, pShellMsg->msg, sizeof(buf)-1);
 800fafe:	6879      	ldr	r1, [r7, #4]
 800fb00:	f107 0308 	add.w	r3, r7, #8
 800fb04:	227f      	movs	r2, #127	@ 0x7f
 800fb06:	4618      	mov	r0, r3
 800fb08:	f000 fd6f 	bl	80105ea <strncpy>
	buf[sizeof(buf)-1] = '\0';
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

	char *token = strtok(buf, " ");
 800fb12:	f107 0308 	add.w	r3, r7, #8
 800fb16:	4916      	ldr	r1, [pc, #88]	@ (800fb70 <TryGetCommand+0x7c>)
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f000 fd8f 	bl	801063c <strtok>
 800fb1e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	if (token != NULL) {
 800fb22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d01d      	beq.n	800fb66 <TryGetCommand+0x72>
		int len = strlen(token);
 800fb2a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800fb2e:	f7f0 fb59 	bl	80001e4 <strlen>
 800fb32:	4603      	mov	r3, r0
 800fb34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		if(len > 40) return false;
 800fb38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fb3c:	2b28      	cmp	r3, #40	@ 0x28
 800fb3e:	dd01      	ble.n	800fb44 <TryGetCommand+0x50>
 800fb40:	2300      	movs	r3, #0
 800fb42:	e011      	b.n	800fb68 <TryGetCommand+0x74>
		strncpy(cmd, token, len + 1);
 800fb44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fb48:	3301      	adds	r3, #1
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800fb50:	6838      	ldr	r0, [r7, #0]
 800fb52:	f000 fd4a 	bl	80105ea <strncpy>
        cmd[len] = '\0';
 800fb56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fb5a:	683a      	ldr	r2, [r7, #0]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	2200      	movs	r2, #0
 800fb60:	701a      	strb	r2, [r3, #0]
		return true;
 800fb62:	2301      	movs	r3, #1
 800fb64:	e000      	b.n	800fb68 <TryGetCommand+0x74>
	}
	return false;
 800fb66:	2300      	movs	r3, #0
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3790      	adds	r7, #144	@ 0x90
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}
 800fb70:	08012b14 	.word	0x08012b14

0800fb74 <ParserCommand>:

void ParserCommand(ShellMsgStruct* pShellMsg, char* cmd)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b08a      	sub	sp, #40	@ 0x28
 800fb78:	af04      	add	r7, sp, #16
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	6039      	str	r1, [r7, #0]
	if(strcmp(cmd, "led") == 0)
 800fb7e:	4914      	ldr	r1, [pc, #80]	@ (800fbd0 <ParserCommand+0x5c>)
 800fb80:	6838      	ldr	r0, [r7, #0]
 800fb82:	f7f0 fb25 	bl	80001d0 <strcmp>
 800fb86:	4603      	mov	r3, r0
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d11c      	bne.n	800fbc6 <ParserCommand+0x52>
	{
		int r, g, b;
		if (sscanf(pShellMsg->msg,
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f107 0214 	add.w	r2, r7, #20
 800fb92:	f107 030c 	add.w	r3, r7, #12
 800fb96:	9301      	str	r3, [sp, #4]
 800fb98:	f107 0310 	add.w	r3, r7, #16
 800fb9c:	9300      	str	r3, [sp, #0]
 800fb9e:	4613      	mov	r3, r2
 800fba0:	683a      	ldr	r2, [r7, #0]
 800fba2:	490c      	ldr	r1, [pc, #48]	@ (800fbd4 <ParserCommand+0x60>)
 800fba4:	f000 fc5a 	bl	801045c <siscanf>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	2b04      	cmp	r3, #4
 800fbac:	d10b      	bne.n	800fbc6 <ParserCommand+0x52>
					"%15s {\"r\":%d,\"g\":%d,\"b\":%d}",
					cmd, &r, &g, &b) == 4)
		{
			snprintf(pShellMsg->msg, sizeof(pShellMsg->msg), "%s %d %d %d", cmd, r, g, b);
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	693a      	ldr	r2, [r7, #16]
 800fbb4:	68f9      	ldr	r1, [r7, #12]
 800fbb6:	9102      	str	r1, [sp, #8]
 800fbb8:	9201      	str	r2, [sp, #4]
 800fbba:	9300      	str	r3, [sp, #0]
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	4a06      	ldr	r2, [pc, #24]	@ (800fbd8 <ParserCommand+0x64>)
 800fbc0:	21c8      	movs	r1, #200	@ 0xc8
 800fbc2:	f000 fbf3 	bl	80103ac <sniprintf>
		}
	}
}
 800fbc6:	bf00      	nop
 800fbc8:	3718      	adds	r7, #24
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}
 800fbce:	bf00      	nop
 800fbd0:	08012b18 	.word	0x08012b18
 800fbd4:	08012b1c 	.word	0x08012b1c
 800fbd8:	08012b38 	.word	0x08012b38

0800fbdc <CommandReceiver>:

void CommandReceiver(void *pvParameters)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b0be      	sub	sp, #248	@ 0xf8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
	static uint8_t argc = 0;
	static char *argv[MAX_ARGS] = {0};
	ShellMsgStruct shellMsg;
	while(1)
	{
		if (xQueueReceive(xShellQueue, &shellMsg, portMAX_DELAY) == pdPASS) {
 800fbe4:	4b28      	ldr	r3, [pc, #160]	@ (800fc88 <CommandReceiver+0xac>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f107 0108 	add.w	r1, r7, #8
 800fbec:	f04f 32ff 	mov.w	r2, #4294967295
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7f9 fa8d 	bl	8009110 <xQueueReceive>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	d13f      	bne.n	800fc7c <CommandReceiver+0xa0>

			if(TryGetCommand(&shellMsg, cmd))
 800fbfc:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800fc00:	f107 0308 	add.w	r3, r7, #8
 800fc04:	4611      	mov	r1, r2
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7ff ff74 	bl	800faf4 <TryGetCommand>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d00f      	beq.n	800fc32 <CommandReceiver+0x56>
			{
				SendMsg(shell_huart, "Command : %s\r\n", cmd);
 800fc12:	4b1e      	ldr	r3, [pc, #120]	@ (800fc8c <CommandReceiver+0xb0>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800fc1a:	491d      	ldr	r1, [pc, #116]	@ (800fc90 <CommandReceiver+0xb4>)
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7f1 f9d9 	bl	8000fd4 <SendMsg>
				ParserCommand(&shellMsg, cmd);
 800fc22:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800fc26:	f107 0308 	add.w	r3, r7, #8
 800fc2a:	4611      	mov	r1, r2
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7ff ffa1 	bl	800fb74 <ParserCommand>
			}

			SendMsg(shell_huart, "ParserCommand : %s\r\n", shellMsg.msg);
 800fc32:	4b16      	ldr	r3, [pc, #88]	@ (800fc8c <CommandReceiver+0xb0>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f107 0208 	add.w	r2, r7, #8
 800fc3a:	4916      	ldr	r1, [pc, #88]	@ (800fc94 <CommandReceiver+0xb8>)
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7f1 f9c9 	bl	8000fd4 <SendMsg>


			memset(&argc, 0, sizeof(argc));
 800fc42:	4b15      	ldr	r3, [pc, #84]	@ (800fc98 <CommandReceiver+0xbc>)
 800fc44:	2200      	movs	r2, #0
 800fc46:	701a      	strb	r2, [r3, #0]
			memset(argv, 0, sizeof(argv));
 800fc48:	2228      	movs	r2, #40	@ 0x28
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	4813      	ldr	r0, [pc, #76]	@ (800fc9c <CommandReceiver+0xc0>)
 800fc4e:	f000 fcb3 	bl	80105b8 <memset>
			if (ArgAnalyze(shellMsg.msg, &argc, argv))
 800fc52:	f107 0308 	add.w	r3, r7, #8
 800fc56:	4a11      	ldr	r2, [pc, #68]	@ (800fc9c <CommandReceiver+0xc0>)
 800fc58:	490f      	ldr	r1, [pc, #60]	@ (800fc98 <CommandReceiver+0xbc>)
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7ff fe86 	bl	800f96c <ArgAnalyze>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d00a      	beq.n	800fc7c <CommandReceiver+0xa0>
			{
				CommandExecute(argc, argv);
 800fc66:	4b0c      	ldr	r3, [pc, #48]	@ (800fc98 <CommandReceiver+0xbc>)
 800fc68:	781b      	ldrb	r3, [r3, #0]
 800fc6a:	490c      	ldr	r1, [pc, #48]	@ (800fc9c <CommandReceiver+0xc0>)
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7ff fba3 	bl	800f3b8 <CommandExecute>
				SetLCDCommandStatus(argv[0]);
 800fc72:	4b0a      	ldr	r3, [pc, #40]	@ (800fc9c <CommandReceiver+0xc0>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7fb fe30 	bl	800b8dc <SetLCDCommandStatus>
			}
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 800fc7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800fc80:	f7f9 fefe 	bl	8009a80 <vTaskDelay>
		if (xQueueReceive(xShellQueue, &shellMsg, portMAX_DELAY) == pdPASS) {
 800fc84:	e7ae      	b.n	800fbe4 <CommandReceiver+0x8>
 800fc86:	bf00      	nop
 800fc88:	20013d38 	.word	0x20013d38
 800fc8c:	20013d34 	.word	0x20013d34
 800fc90:	08012b44 	.word	0x08012b44
 800fc94:	08012b54 	.word	0x08012b54
 800fc98:	20014168 	.word	0x20014168
 800fc9c:	2001416c 	.word	0x2001416c

0800fca0 <Timer_Init>:
extern QueueHandle_t xESP32Queue;
extern RTC_HandleTypeDef hrtc;


void Timer_Init(UART_HandleTypeDef* huart)
{
 800fca0:	b480      	push	{r7}
 800fca2:	b083      	sub	sp, #12
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
	timer_huart = huart;
 800fca8:	4a04      	ldr	r2, [pc, #16]	@ (800fcbc <Timer_Init+0x1c>)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6013      	str	r3, [r2, #0]
}
 800fcae:	bf00      	nop
 800fcb0:	370c      	adds	r7, #12
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb8:	4770      	bx	lr
 800fcba:	bf00      	nop
 800fcbc:	200141cc 	.word	0x200141cc

0800fcc0 <Timer_OS_Resources_Init>:

void Timer_OS_Resources_Init()
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	af00      	add	r7, sp, #0
	xTimerQueue = xQueueCreate(4, sizeof(TimerMsgStruct));
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	2164      	movs	r1, #100	@ 0x64
 800fcc8:	2004      	movs	r0, #4
 800fcca:	f7f8 fff1 	bl	8008cb0 <xQueueGenericCreate>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	4a10      	ldr	r2, [pc, #64]	@ (800fd14 <Timer_OS_Resources_Init+0x54>)
 800fcd2:	6013      	str	r3, [r2, #0]
	xTimerMutex = xSemaphoreCreateMutex();
 800fcd4:	2001      	movs	r0, #1
 800fcd6:	f7f9 f865 	bl	8008da4 <xQueueCreateMutex>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	4a0e      	ldr	r2, [pc, #56]	@ (800fd18 <Timer_OS_Resources_Init+0x58>)
 800fcde:	6013      	str	r3, [r2, #0]

	xSemaphoreTake(xTimerMutex, portMAX_DELAY);
 800fce0:	4b0d      	ldr	r3, [pc, #52]	@ (800fd18 <Timer_OS_Resources_Init+0x58>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f04f 31ff 	mov.w	r1, #4294967295
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7f9 faf3 	bl	80092d4 <xQueueSemaphoreTake>
	HAL_RTC_GetTime(&hrtc, &sTime_Init, RTC_FORMAT_BIN);
 800fcee:	2200      	movs	r2, #0
 800fcf0:	490a      	ldr	r1, [pc, #40]	@ (800fd1c <Timer_OS_Resources_Init+0x5c>)
 800fcf2:	480b      	ldr	r0, [pc, #44]	@ (800fd20 <Timer_OS_Resources_Init+0x60>)
 800fcf4:	f7f4 ff1b 	bl	8004b2e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate_Init, RTC_FORMAT_BIN);
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	490a      	ldr	r1, [pc, #40]	@ (800fd24 <Timer_OS_Resources_Init+0x64>)
 800fcfc:	4808      	ldr	r0, [pc, #32]	@ (800fd20 <Timer_OS_Resources_Init+0x60>)
 800fcfe:	f7f4 fff8 	bl	8004cf2 <HAL_RTC_GetDate>
	xSemaphoreGive(xTimerMutex);
 800fd02:	4b05      	ldr	r3, [pc, #20]	@ (800fd18 <Timer_OS_Resources_Init+0x58>)
 800fd04:	6818      	ldr	r0, [r3, #0]
 800fd06:	2300      	movs	r3, #0
 800fd08:	2200      	movs	r2, #0
 800fd0a:	2100      	movs	r1, #0
 800fd0c:	f7f9 f862 	bl	8008dd4 <xQueueGenericSend>
}
 800fd10:	bf00      	nop
 800fd12:	bd80      	pop	{r7, pc}
 800fd14:	20014194 	.word	0x20014194
 800fd18:	20014198 	.word	0x20014198
 800fd1c:	2001419c 	.word	0x2001419c
 800fd20:	20000358 	.word	0x20000358
 800fd24:	200141b0 	.word	0x200141b0

0800fd28 <SyncTimeEventSender>:

void SyncTimeEventSender(void)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b09a      	sub	sp, #104	@ 0x68
 800fd2c:	af00      	add	r7, sp, #0
	ESP32MsgStruct eps32Msg = {0};
 800fd2e:	4a0d      	ldr	r2, [pc, #52]	@ (800fd64 <SyncTimeEventSender+0x3c>)
 800fd30:	1d3b      	adds	r3, r7, #4
 800fd32:	4611      	mov	r1, r2
 800fd34:	2264      	movs	r2, #100	@ 0x64
 800fd36:	4618      	mov	r0, r3
 800fd38:	f000 fd57 	bl	80107ea <memcpy>
	strcpy(eps32Msg.msg, "GET_TIME\n\r");
 800fd3c:	1d3b      	adds	r3, r7, #4
 800fd3e:	4a0a      	ldr	r2, [pc, #40]	@ (800fd68 <SyncTimeEventSender+0x40>)
 800fd40:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd42:	c303      	stmia	r3!, {r0, r1}
 800fd44:	801a      	strh	r2, [r3, #0]
 800fd46:	3302      	adds	r3, #2
 800fd48:	0c12      	lsrs	r2, r2, #16
 800fd4a:	701a      	strb	r2, [r3, #0]
	xQueueSend(xESP32Queue, &eps32Msg, pdMS_TO_TICKS(100));
 800fd4c:	4b07      	ldr	r3, [pc, #28]	@ (800fd6c <SyncTimeEventSender+0x44>)
 800fd4e:	6818      	ldr	r0, [r3, #0]
 800fd50:	1d39      	adds	r1, r7, #4
 800fd52:	2300      	movs	r3, #0
 800fd54:	2264      	movs	r2, #100	@ 0x64
 800fd56:	f7f9 f83d 	bl	8008dd4 <xQueueGenericSend>
}
 800fd5a:	bf00      	nop
 800fd5c:	3768      	adds	r7, #104	@ 0x68
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
 800fd62:	bf00      	nop
 800fd64:	08012b78 	.word	0x08012b78
 800fd68:	08012b6c 	.word	0x08012b6c
 800fd6c:	20000810 	.word	0x20000810

0800fd70 <SyncTimeHandler>:

void SyncTimeHandler(void)
{
 800fd70:	b5b0      	push	{r4, r5, r7, lr}
 800fd72:	b0b0      	sub	sp, #192	@ 0xc0
 800fd74:	af04      	add	r7, sp, #16
    // "YYYY/MM/DD HH:MM:SS"
	TimerMsgStruct timerMsg;
	while(1){

		if (xQueueReceive(xTimerQueue, &timerMsg, pdMS_TO_TICKS(5000)) == pdPASS)
 800fd76:	4b65      	ldr	r3, [pc, #404]	@ (800ff0c <SyncTimeHandler+0x19c>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800fd7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7f9 f9c4 	bl	8009110 <xQueueReceive>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	f040 80b5 	bne.w	800fefa <SyncTimeHandler+0x18a>
		{
			xSemaphoreTake(xTimerMutex, portMAX_DELAY);
 800fd90:	4b5f      	ldr	r3, [pc, #380]	@ (800ff10 <SyncTimeHandler+0x1a0>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	f04f 31ff 	mov.w	r1, #4294967295
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7f9 fa9b 	bl	80092d4 <xQueueSemaphoreTake>
			char tm_buf[20];
			size_t len = strcspn(timerMsg.msg, "\r\n\0");
 800fd9e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800fda2:	495c      	ldr	r1, [pc, #368]	@ (800ff14 <SyncTimeHandler+0x1a4>)
 800fda4:	4618      	mov	r0, r3
 800fda6:	f000 fc0f 	bl	80105c8 <strcspn>
 800fdaa:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
			if (len >= sizeof(tm_buf)) len = sizeof(tm_buf) - 1;
 800fdae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fdb2:	2b13      	cmp	r3, #19
 800fdb4:	d902      	bls.n	800fdbc <SyncTimeHandler+0x4c>
 800fdb6:	2313      	movs	r3, #19
 800fdb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			memcpy(tm_buf, timerMsg.msg, len);
 800fdbc:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800fdc0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800fdc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f000 fd0e 	bl	80107ea <memcpy>
			tm_buf[len] = '\0';
 800fdce:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800fdd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fdd6:	4413      	add	r3, r2
 800fdd8:	2200      	movs	r2, #0
 800fdda:	701a      	strb	r2, [r3, #0]

			HAL_SuspendTick();	
 800fddc:	f7f1 fdcc 	bl	8001978 <HAL_SuspendTick>
    		__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 800fde0:	4b4d      	ldr	r3, [pc, #308]	@ (800ff18 <SyncTimeHandler+0x1a8>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	22ca      	movs	r2, #202	@ 0xca
 800fde6:	625a      	str	r2, [r3, #36]	@ 0x24
 800fde8:	4b4b      	ldr	r3, [pc, #300]	@ (800ff18 <SyncTimeHandler+0x1a8>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	2253      	movs	r2, #83	@ 0x53
 800fdee:	625a      	str	r2, [r3, #36]	@ 0x24

			uint32_t year, mon, day, hh, mm, ss;
			if (sscanf(tm_buf, "%d/%d/%d %d:%d:%d",
 800fdf0:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800fdf4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800fdf8:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800fdfc:	f107 031c 	add.w	r3, r7, #28
 800fe00:	9303      	str	r3, [sp, #12]
 800fe02:	f107 0320 	add.w	r3, r7, #32
 800fe06:	9302      	str	r3, [sp, #8]
 800fe08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fe0c:	9301      	str	r3, [sp, #4]
 800fe0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fe12:	9300      	str	r3, [sp, #0]
 800fe14:	460b      	mov	r3, r1
 800fe16:	4941      	ldr	r1, [pc, #260]	@ (800ff1c <SyncTimeHandler+0x1ac>)
 800fe18:	f000 fb20 	bl	801045c <siscanf>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2b06      	cmp	r3, #6
 800fe20:	d156      	bne.n	800fed0 <SyncTimeHandler+0x160>
					   &year, &mon, &day, &hh, &mm, &ss) == 6)
			{
				RTC_DateTypeDef sCurDate = { .Year = year % 100, .Month = mon, .Date = day, .WeekDay = 0 };
 800fe22:	2300      	movs	r3, #0
 800fe24:	763b      	strb	r3, [r7, #24]
 800fe26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe28:	b2db      	uxtb	r3, r3
 800fe2a:	767b      	strb	r3, [r7, #25]
 800fe2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe2e:	b2db      	uxtb	r3, r3
 800fe30:	76bb      	strb	r3, [r7, #26]
 800fe32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe34:	4b3a      	ldr	r3, [pc, #232]	@ (800ff20 <SyncTimeHandler+0x1b0>)
 800fe36:	fba3 1302 	umull	r1, r3, r3, r2
 800fe3a:	095b      	lsrs	r3, r3, #5
 800fe3c:	2164      	movs	r1, #100	@ 0x64
 800fe3e:	fb01 f303 	mul.w	r3, r1, r3
 800fe42:	1ad3      	subs	r3, r2, r3
 800fe44:	b2db      	uxtb	r3, r3
 800fe46:	76fb      	strb	r3, [r7, #27]
				RTC_TimeTypeDef sCurTime = { .Hours = hh, .Minutes = mm, .Seconds = ss, .TimeFormat = RTC_HOURFORMAT12_AM };
 800fe48:	1d3b      	adds	r3, r7, #4
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	601a      	str	r2, [r3, #0]
 800fe4e:	605a      	str	r2, [r3, #4]
 800fe50:	609a      	str	r2, [r3, #8]
 800fe52:	60da      	str	r2, [r3, #12]
 800fe54:	611a      	str	r2, [r3, #16]
 800fe56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	713b      	strb	r3, [r7, #4]
 800fe5c:	6a3b      	ldr	r3, [r7, #32]
 800fe5e:	b2db      	uxtb	r3, r3
 800fe60:	717b      	strb	r3, [r7, #5]
 800fe62:	69fb      	ldr	r3, [r7, #28]
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	71bb      	strb	r3, [r7, #6]
				HAL_RTC_SetDate(&hrtc, &sCurDate, RTC_FORMAT_BIN);
 800fe68:	f107 0318 	add.w	r3, r7, #24
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	4619      	mov	r1, r3
 800fe70:	4829      	ldr	r0, [pc, #164]	@ (800ff18 <SyncTimeHandler+0x1a8>)
 800fe72:	f7f4 feba 	bl	8004bea <HAL_RTC_SetDate>
				HAL_RTC_SetTime(&hrtc, &sCurTime, RTC_FORMAT_BIN);
 800fe76:	1d3b      	adds	r3, r7, #4
 800fe78:	2200      	movs	r2, #0
 800fe7a:	4619      	mov	r1, r3
 800fe7c:	4826      	ldr	r0, [pc, #152]	@ (800ff18 <SyncTimeHandler+0x1a8>)
 800fe7e:	f7f4 fdbc 	bl	80049fa <HAL_RTC_SetTime>
				HAL_RTC_GetTime(&hrtc, &sTime_Init, RTC_FORMAT_BIN);
 800fe82:	2200      	movs	r2, #0
 800fe84:	4927      	ldr	r1, [pc, #156]	@ (800ff24 <SyncTimeHandler+0x1b4>)
 800fe86:	4824      	ldr	r0, [pc, #144]	@ (800ff18 <SyncTimeHandler+0x1a8>)
 800fe88:	f7f4 fe51 	bl	8004b2e <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &sDate_Init, RTC_FORMAT_BIN);
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	4926      	ldr	r1, [pc, #152]	@ (800ff28 <SyncTimeHandler+0x1b8>)
 800fe90:	4821      	ldr	r0, [pc, #132]	@ (800ff18 <SyncTimeHandler+0x1a8>)
 800fe92:	f7f4 ff2e 	bl	8004cf2 <HAL_RTC_GetDate>
				HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800fe96:	2200      	movs	r2, #0
 800fe98:	4924      	ldr	r1, [pc, #144]	@ (800ff2c <SyncTimeHandler+0x1bc>)
 800fe9a:	481f      	ldr	r0, [pc, #124]	@ (800ff18 <SyncTimeHandler+0x1a8>)
 800fe9c:	f7f4 fe47 	bl	8004b2e <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800fea0:	2200      	movs	r2, #0
 800fea2:	4923      	ldr	r1, [pc, #140]	@ (800ff30 <SyncTimeHandler+0x1c0>)
 800fea4:	481c      	ldr	r0, [pc, #112]	@ (800ff18 <SyncTimeHandler+0x1a8>)
 800fea6:	f7f4 ff24 	bl	8004cf2 <HAL_RTC_GetDate>
				SendMsg(&timer_huart, "SyncTime: RTC set to %04d/%02d/%02d %02d:%02d:%02d\r\n",
 800feaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feac:	f503 64fa 	add.w	r4, r3, #2000	@ 0x7d0
 800feb0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800feb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800feb6:	6a39      	ldr	r1, [r7, #32]
 800feb8:	69f8      	ldr	r0, [r7, #28]
 800feba:	9003      	str	r0, [sp, #12]
 800febc:	9102      	str	r1, [sp, #8]
 800febe:	9201      	str	r2, [sp, #4]
 800fec0:	9300      	str	r3, [sp, #0]
 800fec2:	462b      	mov	r3, r5
 800fec4:	4622      	mov	r2, r4
 800fec6:	491b      	ldr	r1, [pc, #108]	@ (800ff34 <SyncTimeHandler+0x1c4>)
 800fec8:	481b      	ldr	r0, [pc, #108]	@ (800ff38 <SyncTimeHandler+0x1c8>)
 800feca:	f7f1 f883 	bl	8000fd4 <SendMsg>
 800fece:	e006      	b.n	800fede <SyncTimeHandler+0x16e>
						2000+year, mon, day, hh, mm, ss);
			}
			else
			{
				SendMsg(&timer_huart, "SyncTime: parse failed: '%s'\r\n", timerMsg.msg);
 800fed0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800fed4:	461a      	mov	r2, r3
 800fed6:	4919      	ldr	r1, [pc, #100]	@ (800ff3c <SyncTimeHandler+0x1cc>)
 800fed8:	4817      	ldr	r0, [pc, #92]	@ (800ff38 <SyncTimeHandler+0x1c8>)
 800feda:	f7f1 f87b 	bl	8000fd4 <SendMsg>
			}

			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 800fede:	4b0e      	ldr	r3, [pc, #56]	@ (800ff18 <SyncTimeHandler+0x1a8>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	22ff      	movs	r2, #255	@ 0xff
 800fee4:	625a      	str	r2, [r3, #36]	@ 0x24
    		HAL_ResumeTick();
 800fee6:	f7f1 fd59 	bl	800199c <HAL_ResumeTick>
			xSemaphoreGive(xTimerMutex);
 800feea:	4b09      	ldr	r3, [pc, #36]	@ (800ff10 <SyncTimeHandler+0x1a0>)
 800feec:	6818      	ldr	r0, [r3, #0]
 800feee:	2300      	movs	r3, #0
 800fef0:	2200      	movs	r2, #0
 800fef2:	2100      	movs	r1, #0
 800fef4:	f7f8 ff6e 	bl	8008dd4 <xQueueGenericSend>
 800fef8:	e003      	b.n	800ff02 <SyncTimeHandler+0x192>
		}
		else
		{
			SendMsg(&timer_huart, "SyncTime: timeout waiting for GET_TIME\r\n");
 800fefa:	4911      	ldr	r1, [pc, #68]	@ (800ff40 <SyncTimeHandler+0x1d0>)
 800fefc:	480e      	ldr	r0, [pc, #56]	@ (800ff38 <SyncTimeHandler+0x1c8>)
 800fefe:	f7f1 f869 	bl	8000fd4 <SendMsg>
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 800ff02:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ff06:	f7f9 fdbb 	bl	8009a80 <vTaskDelay>
		if (xQueueReceive(xTimerQueue, &timerMsg, pdMS_TO_TICKS(5000)) == pdPASS)
 800ff0a:	e734      	b.n	800fd76 <SyncTimeHandler+0x6>
 800ff0c:	20014194 	.word	0x20014194
 800ff10:	20014198 	.word	0x20014198
 800ff14:	08012bdc 	.word	0x08012bdc
 800ff18:	20000358 	.word	0x20000358
 800ff1c:	08012be0 	.word	0x08012be0
 800ff20:	51eb851f 	.word	0x51eb851f
 800ff24:	2001419c 	.word	0x2001419c
 800ff28:	200141b0 	.word	0x200141b0
 800ff2c:	200141b4 	.word	0x200141b4
 800ff30:	200141c8 	.word	0x200141c8
 800ff34:	08012bf4 	.word	0x08012bf4
 800ff38:	200141cc 	.word	0x200141cc
 800ff3c:	08012c2c 	.word	0x08012c2c
 800ff40:	08012c4c 	.word	0x08012c4c

0800ff44 <getCurrentTime>:
	}
}

void getCurrentTime(char* time, int size)
{
 800ff44:	b5b0      	push	{r4, r5, r7, lr}
 800ff46:	b086      	sub	sp, #24
 800ff48:	af04      	add	r7, sp, #16
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	6039      	str	r1, [r7, #0]
	xSemaphoreTake(xTimerMutex, portMAX_DELAY);
 800ff4e:	4b1d      	ldr	r3, [pc, #116]	@ (800ffc4 <getCurrentTime+0x80>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	f04f 31ff 	mov.w	r1, #4294967295
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7f9 f9bc 	bl	80092d4 <xQueueSemaphoreTake>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	491a      	ldr	r1, [pc, #104]	@ (800ffc8 <getCurrentTime+0x84>)
 800ff60:	481a      	ldr	r0, [pc, #104]	@ (800ffcc <getCurrentTime+0x88>)
 800ff62:	f7f4 fde4 	bl	8004b2e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800ff66:	2200      	movs	r2, #0
 800ff68:	4919      	ldr	r1, [pc, #100]	@ (800ffd0 <getCurrentTime+0x8c>)
 800ff6a:	4818      	ldr	r0, [pc, #96]	@ (800ffcc <getCurrentTime+0x88>)
 800ff6c:	f7f4 fec1 	bl	8004cf2 <HAL_RTC_GetDate>
	snprintf(time, size, "%02d/%02d %02d:%02d:%02d",
 800ff70:	6839      	ldr	r1, [r7, #0]
				sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 800ff72:	4b17      	ldr	r3, [pc, #92]	@ (800ffd0 <getCurrentTime+0x8c>)
 800ff74:	785b      	ldrb	r3, [r3, #1]
	snprintf(time, size, "%02d/%02d %02d:%02d:%02d",
 800ff76:	461d      	mov	r5, r3
				sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 800ff78:	4b15      	ldr	r3, [pc, #84]	@ (800ffd0 <getCurrentTime+0x8c>)
 800ff7a:	789b      	ldrb	r3, [r3, #2]
	snprintf(time, size, "%02d/%02d %02d:%02d:%02d",
 800ff7c:	461a      	mov	r2, r3
				sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 800ff7e:	4b12      	ldr	r3, [pc, #72]	@ (800ffc8 <getCurrentTime+0x84>)
 800ff80:	781b      	ldrb	r3, [r3, #0]
	snprintf(time, size, "%02d/%02d %02d:%02d:%02d",
 800ff82:	4618      	mov	r0, r3
				sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 800ff84:	4b10      	ldr	r3, [pc, #64]	@ (800ffc8 <getCurrentTime+0x84>)
 800ff86:	785b      	ldrb	r3, [r3, #1]
	snprintf(time, size, "%02d/%02d %02d:%02d:%02d",
 800ff88:	461c      	mov	r4, r3
				sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 800ff8a:	4b0f      	ldr	r3, [pc, #60]	@ (800ffc8 <getCurrentTime+0x84>)
 800ff8c:	789b      	ldrb	r3, [r3, #2]
	snprintf(time, size, "%02d/%02d %02d:%02d:%02d",
 800ff8e:	9303      	str	r3, [sp, #12]
 800ff90:	9402      	str	r4, [sp, #8]
 800ff92:	9001      	str	r0, [sp, #4]
 800ff94:	9200      	str	r2, [sp, #0]
 800ff96:	462b      	mov	r3, r5
 800ff98:	4a0e      	ldr	r2, [pc, #56]	@ (800ffd4 <getCurrentTime+0x90>)
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f000 fa06 	bl	80103ac <sniprintf>
	time[size-1] = '\0';
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	3b01      	subs	r3, #1
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	4413      	add	r3, r2
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	701a      	strb	r2, [r3, #0]
	xSemaphoreGive(xTimerMutex);
 800ffac:	4b05      	ldr	r3, [pc, #20]	@ (800ffc4 <getCurrentTime+0x80>)
 800ffae:	6818      	ldr	r0, [r3, #0]
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	2100      	movs	r1, #0
 800ffb6:	f7f8 ff0d 	bl	8008dd4 <xQueueGenericSend>
}
 800ffba:	bf00      	nop
 800ffbc:	3708      	adds	r7, #8
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bdb0      	pop	{r4, r5, r7, pc}
 800ffc2:	bf00      	nop
 800ffc4:	20014198 	.word	0x20014198
 800ffc8:	200141b4 	.word	0x200141b4
 800ffcc:	20000358 	.word	0x20000358
 800ffd0:	200141c8 	.word	0x200141c8
 800ffd4:	08012c78 	.word	0x08012c78

0800ffd8 <getTimeSinceStart>:

void getTimeSinceStart(char* time, int size)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b086      	sub	sp, #24
 800ffdc:	af02      	add	r7, sp, #8
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	6039      	str	r1, [r7, #0]
	xSemaphoreTake(xTimerMutex, portMAX_DELAY);
 800ffe2:	4b46      	ldr	r3, [pc, #280]	@ (80100fc <getTimeSinceStart+0x124>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	f04f 31ff 	mov.w	r1, #4294967295
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7f9 f972 	bl	80092d4 <xQueueSemaphoreTake>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800fff0:	2200      	movs	r2, #0
 800fff2:	4943      	ldr	r1, [pc, #268]	@ (8010100 <getTimeSinceStart+0x128>)
 800fff4:	4843      	ldr	r0, [pc, #268]	@ (8010104 <getTimeSinceStart+0x12c>)
 800fff6:	f7f4 fd9a 	bl	8004b2e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800fffa:	2200      	movs	r2, #0
 800fffc:	4942      	ldr	r1, [pc, #264]	@ (8010108 <getTimeSinceStart+0x130>)
 800fffe:	4841      	ldr	r0, [pc, #260]	@ (8010104 <getTimeSinceStart+0x12c>)
 8010000:	f7f4 fe77 	bl	8004cf2 <HAL_RTC_GetDate>
	uint8_t Seconds = sTime.Seconds - sTime_Init.Seconds >= 0
 8010004:	4b3e      	ldr	r3, [pc, #248]	@ (8010100 <getTimeSinceStart+0x128>)
 8010006:	789b      	ldrb	r3, [r3, #2]
 8010008:	461a      	mov	r2, r3
 801000a:	4b40      	ldr	r3, [pc, #256]	@ (801010c <getTimeSinceStart+0x134>)
 801000c:	789b      	ldrb	r3, [r3, #2]
 801000e:	1ad3      	subs	r3, r2, r3
 8010010:	2b00      	cmp	r3, #0
 8010012:	db06      	blt.n	8010022 <getTimeSinceStart+0x4a>
			? sTime.Seconds - sTime_Init.Seconds
 8010014:	4b3a      	ldr	r3, [pc, #232]	@ (8010100 <getTimeSinceStart+0x128>)
 8010016:	789a      	ldrb	r2, [r3, #2]
 8010018:	4b3c      	ldr	r3, [pc, #240]	@ (801010c <getTimeSinceStart+0x134>)
 801001a:	789b      	ldrb	r3, [r3, #2]
	uint8_t Seconds = sTime.Seconds - sTime_Init.Seconds >= 0
 801001c:	1ad3      	subs	r3, r2, r3
 801001e:	b2db      	uxtb	r3, r3
 8010020:	e007      	b.n	8010032 <getTimeSinceStart+0x5a>
			: sTime.Seconds + (60 - sTime_Init.Seconds);
 8010022:	4b37      	ldr	r3, [pc, #220]	@ (8010100 <getTimeSinceStart+0x128>)
 8010024:	789a      	ldrb	r2, [r3, #2]
 8010026:	4b39      	ldr	r3, [pc, #228]	@ (801010c <getTimeSinceStart+0x134>)
 8010028:	789b      	ldrb	r3, [r3, #2]
 801002a:	1ad3      	subs	r3, r2, r3
 801002c:	b2db      	uxtb	r3, r3
	uint8_t Seconds = sTime.Seconds - sTime_Init.Seconds >= 0
 801002e:	333c      	adds	r3, #60	@ 0x3c
 8010030:	b2db      	uxtb	r3, r3
 8010032:	73fb      	strb	r3, [r7, #15]
	uint8_t Minutes = sTime.Minutes - sTime_Init.Minutes >= 0
 8010034:	4b32      	ldr	r3, [pc, #200]	@ (8010100 <getTimeSinceStart+0x128>)
 8010036:	785b      	ldrb	r3, [r3, #1]
 8010038:	461a      	mov	r2, r3
 801003a:	4b34      	ldr	r3, [pc, #208]	@ (801010c <getTimeSinceStart+0x134>)
 801003c:	785b      	ldrb	r3, [r3, #1]
 801003e:	1ad3      	subs	r3, r2, r3
 8010040:	2b00      	cmp	r3, #0
 8010042:	db06      	blt.n	8010052 <getTimeSinceStart+0x7a>
			? sTime.Minutes - sTime_Init.Minutes
 8010044:	4b2e      	ldr	r3, [pc, #184]	@ (8010100 <getTimeSinceStart+0x128>)
 8010046:	785a      	ldrb	r2, [r3, #1]
 8010048:	4b30      	ldr	r3, [pc, #192]	@ (801010c <getTimeSinceStart+0x134>)
 801004a:	785b      	ldrb	r3, [r3, #1]
	uint8_t Minutes = sTime.Minutes - sTime_Init.Minutes >= 0
 801004c:	1ad3      	subs	r3, r2, r3
 801004e:	b2db      	uxtb	r3, r3
 8010050:	e007      	b.n	8010062 <getTimeSinceStart+0x8a>
			: sTime.Minutes + (60 - sTime_Init.Minutes);
 8010052:	4b2b      	ldr	r3, [pc, #172]	@ (8010100 <getTimeSinceStart+0x128>)
 8010054:	785a      	ldrb	r2, [r3, #1]
 8010056:	4b2d      	ldr	r3, [pc, #180]	@ (801010c <getTimeSinceStart+0x134>)
 8010058:	785b      	ldrb	r3, [r3, #1]
 801005a:	1ad3      	subs	r3, r2, r3
 801005c:	b2db      	uxtb	r3, r3
	uint8_t Minutes = sTime.Minutes - sTime_Init.Minutes >= 0
 801005e:	333c      	adds	r3, #60	@ 0x3c
 8010060:	b2db      	uxtb	r3, r3
 8010062:	73bb      	strb	r3, [r7, #14]
	Minutes -= sTime.Seconds - sTime_Init.Seconds >= 0 ? 0 : 1;
 8010064:	4b26      	ldr	r3, [pc, #152]	@ (8010100 <getTimeSinceStart+0x128>)
 8010066:	789b      	ldrb	r3, [r3, #2]
 8010068:	461a      	mov	r2, r3
 801006a:	4b28      	ldr	r3, [pc, #160]	@ (801010c <getTimeSinceStart+0x134>)
 801006c:	789b      	ldrb	r3, [r3, #2]
 801006e:	1ad3      	subs	r3, r2, r3
 8010070:	0fdb      	lsrs	r3, r3, #31
 8010072:	b2db      	uxtb	r3, r3
 8010074:	461a      	mov	r2, r3
 8010076:	7bbb      	ldrb	r3, [r7, #14]
 8010078:	1a9b      	subs	r3, r3, r2
 801007a:	73bb      	strb	r3, [r7, #14]
	uint8_t Hours = sTime.Hours - sTime_Init.Hours >= 0
 801007c:	4b20      	ldr	r3, [pc, #128]	@ (8010100 <getTimeSinceStart+0x128>)
 801007e:	781b      	ldrb	r3, [r3, #0]
 8010080:	461a      	mov	r2, r3
 8010082:	4b22      	ldr	r3, [pc, #136]	@ (801010c <getTimeSinceStart+0x134>)
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	1ad3      	subs	r3, r2, r3
 8010088:	2b00      	cmp	r3, #0
 801008a:	db06      	blt.n	801009a <getTimeSinceStart+0xc2>
				? sTime.Hours - sTime_Init.Hours
 801008c:	4b1c      	ldr	r3, [pc, #112]	@ (8010100 <getTimeSinceStart+0x128>)
 801008e:	781a      	ldrb	r2, [r3, #0]
 8010090:	4b1e      	ldr	r3, [pc, #120]	@ (801010c <getTimeSinceStart+0x134>)
 8010092:	781b      	ldrb	r3, [r3, #0]
	uint8_t Hours = sTime.Hours - sTime_Init.Hours >= 0
 8010094:	1ad3      	subs	r3, r2, r3
 8010096:	b2db      	uxtb	r3, r3
 8010098:	e007      	b.n	80100aa <getTimeSinceStart+0xd2>
				: sTime.Hours + (24 - sTime_Init.Hours);
 801009a:	4b19      	ldr	r3, [pc, #100]	@ (8010100 <getTimeSinceStart+0x128>)
 801009c:	781a      	ldrb	r2, [r3, #0]
 801009e:	4b1b      	ldr	r3, [pc, #108]	@ (801010c <getTimeSinceStart+0x134>)
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	1ad3      	subs	r3, r2, r3
 80100a4:	b2db      	uxtb	r3, r3
	uint8_t Hours = sTime.Hours - sTime_Init.Hours >= 0
 80100a6:	3318      	adds	r3, #24
 80100a8:	b2db      	uxtb	r3, r3
 80100aa:	737b      	strb	r3, [r7, #13]
	Hours -= sTime.Minutes - sTime_Init.Minutes >= 0 ? 0 : 1;
 80100ac:	4b14      	ldr	r3, [pc, #80]	@ (8010100 <getTimeSinceStart+0x128>)
 80100ae:	785b      	ldrb	r3, [r3, #1]
 80100b0:	461a      	mov	r2, r3
 80100b2:	4b16      	ldr	r3, [pc, #88]	@ (801010c <getTimeSinceStart+0x134>)
 80100b4:	785b      	ldrb	r3, [r3, #1]
 80100b6:	1ad3      	subs	r3, r2, r3
 80100b8:	0fdb      	lsrs	r3, r3, #31
 80100ba:	b2db      	uxtb	r3, r3
 80100bc:	461a      	mov	r2, r3
 80100be:	7b7b      	ldrb	r3, [r7, #13]
 80100c0:	1a9b      	subs	r3, r3, r2
 80100c2:	737b      	strb	r3, [r7, #13]

	snprintf(time, size, "[%02d:%02d:%02d]", Hours, Minutes, Seconds);
 80100c4:	6839      	ldr	r1, [r7, #0]
 80100c6:	7b78      	ldrb	r0, [r7, #13]
 80100c8:	7bbb      	ldrb	r3, [r7, #14]
 80100ca:	7bfa      	ldrb	r2, [r7, #15]
 80100cc:	9201      	str	r2, [sp, #4]
 80100ce:	9300      	str	r3, [sp, #0]
 80100d0:	4603      	mov	r3, r0
 80100d2:	4a0f      	ldr	r2, [pc, #60]	@ (8010110 <getTimeSinceStart+0x138>)
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f000 f969 	bl	80103ac <sniprintf>
	time[size-1] = '\0';
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	3b01      	subs	r3, #1
 80100de:	687a      	ldr	r2, [r7, #4]
 80100e0:	4413      	add	r3, r2
 80100e2:	2200      	movs	r2, #0
 80100e4:	701a      	strb	r2, [r3, #0]
	xSemaphoreGive(xTimerMutex);
 80100e6:	4b05      	ldr	r3, [pc, #20]	@ (80100fc <getTimeSinceStart+0x124>)
 80100e8:	6818      	ldr	r0, [r3, #0]
 80100ea:	2300      	movs	r3, #0
 80100ec:	2200      	movs	r2, #0
 80100ee:	2100      	movs	r1, #0
 80100f0:	f7f8 fe70 	bl	8008dd4 <xQueueGenericSend>
}
 80100f4:	bf00      	nop
 80100f6:	3710      	adds	r7, #16
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}
 80100fc:	20014198 	.word	0x20014198
 8010100:	200141b4 	.word	0x200141b4
 8010104:	20000358 	.word	0x20000358
 8010108:	200141c8 	.word	0x200141c8
 801010c:	2001419c 	.word	0x2001419c
 8010110:	08012c94 	.word	0x08012c94

08010114 <atoi>:
 8010114:	220a      	movs	r2, #10
 8010116:	2100      	movs	r1, #0
 8010118:	f000 b87c 	b.w	8010214 <strtol>

0801011c <_strtol_l.isra.0>:
 801011c:	2b24      	cmp	r3, #36	@ 0x24
 801011e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010122:	4686      	mov	lr, r0
 8010124:	4690      	mov	r8, r2
 8010126:	d801      	bhi.n	801012c <_strtol_l.isra.0+0x10>
 8010128:	2b01      	cmp	r3, #1
 801012a:	d106      	bne.n	801013a <_strtol_l.isra.0+0x1e>
 801012c:	f000 fb28 	bl	8010780 <__errno>
 8010130:	2316      	movs	r3, #22
 8010132:	6003      	str	r3, [r0, #0]
 8010134:	2000      	movs	r0, #0
 8010136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801013a:	4834      	ldr	r0, [pc, #208]	@ (801020c <_strtol_l.isra.0+0xf0>)
 801013c:	460d      	mov	r5, r1
 801013e:	462a      	mov	r2, r5
 8010140:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010144:	5d06      	ldrb	r6, [r0, r4]
 8010146:	f016 0608 	ands.w	r6, r6, #8
 801014a:	d1f8      	bne.n	801013e <_strtol_l.isra.0+0x22>
 801014c:	2c2d      	cmp	r4, #45	@ 0x2d
 801014e:	d110      	bne.n	8010172 <_strtol_l.isra.0+0x56>
 8010150:	782c      	ldrb	r4, [r5, #0]
 8010152:	2601      	movs	r6, #1
 8010154:	1c95      	adds	r5, r2, #2
 8010156:	f033 0210 	bics.w	r2, r3, #16
 801015a:	d115      	bne.n	8010188 <_strtol_l.isra.0+0x6c>
 801015c:	2c30      	cmp	r4, #48	@ 0x30
 801015e:	d10d      	bne.n	801017c <_strtol_l.isra.0+0x60>
 8010160:	782a      	ldrb	r2, [r5, #0]
 8010162:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010166:	2a58      	cmp	r2, #88	@ 0x58
 8010168:	d108      	bne.n	801017c <_strtol_l.isra.0+0x60>
 801016a:	786c      	ldrb	r4, [r5, #1]
 801016c:	3502      	adds	r5, #2
 801016e:	2310      	movs	r3, #16
 8010170:	e00a      	b.n	8010188 <_strtol_l.isra.0+0x6c>
 8010172:	2c2b      	cmp	r4, #43	@ 0x2b
 8010174:	bf04      	itt	eq
 8010176:	782c      	ldrbeq	r4, [r5, #0]
 8010178:	1c95      	addeq	r5, r2, #2
 801017a:	e7ec      	b.n	8010156 <_strtol_l.isra.0+0x3a>
 801017c:	2b00      	cmp	r3, #0
 801017e:	d1f6      	bne.n	801016e <_strtol_l.isra.0+0x52>
 8010180:	2c30      	cmp	r4, #48	@ 0x30
 8010182:	bf14      	ite	ne
 8010184:	230a      	movne	r3, #10
 8010186:	2308      	moveq	r3, #8
 8010188:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801018c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010190:	2200      	movs	r2, #0
 8010192:	fbbc f9f3 	udiv	r9, ip, r3
 8010196:	4610      	mov	r0, r2
 8010198:	fb03 ca19 	mls	sl, r3, r9, ip
 801019c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80101a0:	2f09      	cmp	r7, #9
 80101a2:	d80f      	bhi.n	80101c4 <_strtol_l.isra.0+0xa8>
 80101a4:	463c      	mov	r4, r7
 80101a6:	42a3      	cmp	r3, r4
 80101a8:	dd1b      	ble.n	80101e2 <_strtol_l.isra.0+0xc6>
 80101aa:	1c57      	adds	r7, r2, #1
 80101ac:	d007      	beq.n	80101be <_strtol_l.isra.0+0xa2>
 80101ae:	4581      	cmp	r9, r0
 80101b0:	d314      	bcc.n	80101dc <_strtol_l.isra.0+0xc0>
 80101b2:	d101      	bne.n	80101b8 <_strtol_l.isra.0+0x9c>
 80101b4:	45a2      	cmp	sl, r4
 80101b6:	db11      	blt.n	80101dc <_strtol_l.isra.0+0xc0>
 80101b8:	fb00 4003 	mla	r0, r0, r3, r4
 80101bc:	2201      	movs	r2, #1
 80101be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80101c2:	e7eb      	b.n	801019c <_strtol_l.isra.0+0x80>
 80101c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80101c8:	2f19      	cmp	r7, #25
 80101ca:	d801      	bhi.n	80101d0 <_strtol_l.isra.0+0xb4>
 80101cc:	3c37      	subs	r4, #55	@ 0x37
 80101ce:	e7ea      	b.n	80101a6 <_strtol_l.isra.0+0x8a>
 80101d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80101d4:	2f19      	cmp	r7, #25
 80101d6:	d804      	bhi.n	80101e2 <_strtol_l.isra.0+0xc6>
 80101d8:	3c57      	subs	r4, #87	@ 0x57
 80101da:	e7e4      	b.n	80101a6 <_strtol_l.isra.0+0x8a>
 80101dc:	f04f 32ff 	mov.w	r2, #4294967295
 80101e0:	e7ed      	b.n	80101be <_strtol_l.isra.0+0xa2>
 80101e2:	1c53      	adds	r3, r2, #1
 80101e4:	d108      	bne.n	80101f8 <_strtol_l.isra.0+0xdc>
 80101e6:	2322      	movs	r3, #34	@ 0x22
 80101e8:	f8ce 3000 	str.w	r3, [lr]
 80101ec:	4660      	mov	r0, ip
 80101ee:	f1b8 0f00 	cmp.w	r8, #0
 80101f2:	d0a0      	beq.n	8010136 <_strtol_l.isra.0+0x1a>
 80101f4:	1e69      	subs	r1, r5, #1
 80101f6:	e006      	b.n	8010206 <_strtol_l.isra.0+0xea>
 80101f8:	b106      	cbz	r6, 80101fc <_strtol_l.isra.0+0xe0>
 80101fa:	4240      	negs	r0, r0
 80101fc:	f1b8 0f00 	cmp.w	r8, #0
 8010200:	d099      	beq.n	8010136 <_strtol_l.isra.0+0x1a>
 8010202:	2a00      	cmp	r2, #0
 8010204:	d1f6      	bne.n	80101f4 <_strtol_l.isra.0+0xd8>
 8010206:	f8c8 1000 	str.w	r1, [r8]
 801020a:	e794      	b.n	8010136 <_strtol_l.isra.0+0x1a>
 801020c:	08012e25 	.word	0x08012e25

08010210 <_strtol_r>:
 8010210:	f7ff bf84 	b.w	801011c <_strtol_l.isra.0>

08010214 <strtol>:
 8010214:	4613      	mov	r3, r2
 8010216:	460a      	mov	r2, r1
 8010218:	4601      	mov	r1, r0
 801021a:	4802      	ldr	r0, [pc, #8]	@ (8010224 <strtol+0x10>)
 801021c:	6800      	ldr	r0, [r0, #0]
 801021e:	f7ff bf7d 	b.w	801011c <_strtol_l.isra.0>
 8010222:	bf00      	nop
 8010224:	2000013c 	.word	0x2000013c

08010228 <std>:
 8010228:	2300      	movs	r3, #0
 801022a:	b510      	push	{r4, lr}
 801022c:	4604      	mov	r4, r0
 801022e:	e9c0 3300 	strd	r3, r3, [r0]
 8010232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010236:	6083      	str	r3, [r0, #8]
 8010238:	8181      	strh	r1, [r0, #12]
 801023a:	6643      	str	r3, [r0, #100]	@ 0x64
 801023c:	81c2      	strh	r2, [r0, #14]
 801023e:	6183      	str	r3, [r0, #24]
 8010240:	4619      	mov	r1, r3
 8010242:	2208      	movs	r2, #8
 8010244:	305c      	adds	r0, #92	@ 0x5c
 8010246:	f000 f9b7 	bl	80105b8 <memset>
 801024a:	4b0d      	ldr	r3, [pc, #52]	@ (8010280 <std+0x58>)
 801024c:	6263      	str	r3, [r4, #36]	@ 0x24
 801024e:	4b0d      	ldr	r3, [pc, #52]	@ (8010284 <std+0x5c>)
 8010250:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010252:	4b0d      	ldr	r3, [pc, #52]	@ (8010288 <std+0x60>)
 8010254:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010256:	4b0d      	ldr	r3, [pc, #52]	@ (801028c <std+0x64>)
 8010258:	6323      	str	r3, [r4, #48]	@ 0x30
 801025a:	4b0d      	ldr	r3, [pc, #52]	@ (8010290 <std+0x68>)
 801025c:	6224      	str	r4, [r4, #32]
 801025e:	429c      	cmp	r4, r3
 8010260:	d006      	beq.n	8010270 <std+0x48>
 8010262:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010266:	4294      	cmp	r4, r2
 8010268:	d002      	beq.n	8010270 <std+0x48>
 801026a:	33d0      	adds	r3, #208	@ 0xd0
 801026c:	429c      	cmp	r4, r3
 801026e:	d105      	bne.n	801027c <std+0x54>
 8010270:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010278:	f000 baac 	b.w	80107d4 <__retarget_lock_init_recursive>
 801027c:	bd10      	pop	{r4, pc}
 801027e:	bf00      	nop
 8010280:	080104b5 	.word	0x080104b5
 8010284:	080104db 	.word	0x080104db
 8010288:	08010513 	.word	0x08010513
 801028c:	08010537 	.word	0x08010537
 8010290:	200141d0 	.word	0x200141d0

08010294 <stdio_exit_handler>:
 8010294:	4a02      	ldr	r2, [pc, #8]	@ (80102a0 <stdio_exit_handler+0xc>)
 8010296:	4903      	ldr	r1, [pc, #12]	@ (80102a4 <stdio_exit_handler+0x10>)
 8010298:	4803      	ldr	r0, [pc, #12]	@ (80102a8 <stdio_exit_handler+0x14>)
 801029a:	f000 b869 	b.w	8010370 <_fwalk_sglue>
 801029e:	bf00      	nop
 80102a0:	20000130 	.word	0x20000130
 80102a4:	08011751 	.word	0x08011751
 80102a8:	20000140 	.word	0x20000140

080102ac <cleanup_stdio>:
 80102ac:	6841      	ldr	r1, [r0, #4]
 80102ae:	4b0c      	ldr	r3, [pc, #48]	@ (80102e0 <cleanup_stdio+0x34>)
 80102b0:	4299      	cmp	r1, r3
 80102b2:	b510      	push	{r4, lr}
 80102b4:	4604      	mov	r4, r0
 80102b6:	d001      	beq.n	80102bc <cleanup_stdio+0x10>
 80102b8:	f001 fa4a 	bl	8011750 <_fflush_r>
 80102bc:	68a1      	ldr	r1, [r4, #8]
 80102be:	4b09      	ldr	r3, [pc, #36]	@ (80102e4 <cleanup_stdio+0x38>)
 80102c0:	4299      	cmp	r1, r3
 80102c2:	d002      	beq.n	80102ca <cleanup_stdio+0x1e>
 80102c4:	4620      	mov	r0, r4
 80102c6:	f001 fa43 	bl	8011750 <_fflush_r>
 80102ca:	68e1      	ldr	r1, [r4, #12]
 80102cc:	4b06      	ldr	r3, [pc, #24]	@ (80102e8 <cleanup_stdio+0x3c>)
 80102ce:	4299      	cmp	r1, r3
 80102d0:	d004      	beq.n	80102dc <cleanup_stdio+0x30>
 80102d2:	4620      	mov	r0, r4
 80102d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102d8:	f001 ba3a 	b.w	8011750 <_fflush_r>
 80102dc:	bd10      	pop	{r4, pc}
 80102de:	bf00      	nop
 80102e0:	200141d0 	.word	0x200141d0
 80102e4:	20014238 	.word	0x20014238
 80102e8:	200142a0 	.word	0x200142a0

080102ec <global_stdio_init.part.0>:
 80102ec:	b510      	push	{r4, lr}
 80102ee:	4b0b      	ldr	r3, [pc, #44]	@ (801031c <global_stdio_init.part.0+0x30>)
 80102f0:	4c0b      	ldr	r4, [pc, #44]	@ (8010320 <global_stdio_init.part.0+0x34>)
 80102f2:	4a0c      	ldr	r2, [pc, #48]	@ (8010324 <global_stdio_init.part.0+0x38>)
 80102f4:	601a      	str	r2, [r3, #0]
 80102f6:	4620      	mov	r0, r4
 80102f8:	2200      	movs	r2, #0
 80102fa:	2104      	movs	r1, #4
 80102fc:	f7ff ff94 	bl	8010228 <std>
 8010300:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010304:	2201      	movs	r2, #1
 8010306:	2109      	movs	r1, #9
 8010308:	f7ff ff8e 	bl	8010228 <std>
 801030c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010310:	2202      	movs	r2, #2
 8010312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010316:	2112      	movs	r1, #18
 8010318:	f7ff bf86 	b.w	8010228 <std>
 801031c:	20014308 	.word	0x20014308
 8010320:	200141d0 	.word	0x200141d0
 8010324:	08010295 	.word	0x08010295

08010328 <__sfp_lock_acquire>:
 8010328:	4801      	ldr	r0, [pc, #4]	@ (8010330 <__sfp_lock_acquire+0x8>)
 801032a:	f000 ba54 	b.w	80107d6 <__retarget_lock_acquire_recursive>
 801032e:	bf00      	nop
 8010330:	20014311 	.word	0x20014311

08010334 <__sfp_lock_release>:
 8010334:	4801      	ldr	r0, [pc, #4]	@ (801033c <__sfp_lock_release+0x8>)
 8010336:	f000 ba4f 	b.w	80107d8 <__retarget_lock_release_recursive>
 801033a:	bf00      	nop
 801033c:	20014311 	.word	0x20014311

08010340 <__sinit>:
 8010340:	b510      	push	{r4, lr}
 8010342:	4604      	mov	r4, r0
 8010344:	f7ff fff0 	bl	8010328 <__sfp_lock_acquire>
 8010348:	6a23      	ldr	r3, [r4, #32]
 801034a:	b11b      	cbz	r3, 8010354 <__sinit+0x14>
 801034c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010350:	f7ff bff0 	b.w	8010334 <__sfp_lock_release>
 8010354:	4b04      	ldr	r3, [pc, #16]	@ (8010368 <__sinit+0x28>)
 8010356:	6223      	str	r3, [r4, #32]
 8010358:	4b04      	ldr	r3, [pc, #16]	@ (801036c <__sinit+0x2c>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d1f5      	bne.n	801034c <__sinit+0xc>
 8010360:	f7ff ffc4 	bl	80102ec <global_stdio_init.part.0>
 8010364:	e7f2      	b.n	801034c <__sinit+0xc>
 8010366:	bf00      	nop
 8010368:	080102ad 	.word	0x080102ad
 801036c:	20014308 	.word	0x20014308

08010370 <_fwalk_sglue>:
 8010370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010374:	4607      	mov	r7, r0
 8010376:	4688      	mov	r8, r1
 8010378:	4614      	mov	r4, r2
 801037a:	2600      	movs	r6, #0
 801037c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010380:	f1b9 0901 	subs.w	r9, r9, #1
 8010384:	d505      	bpl.n	8010392 <_fwalk_sglue+0x22>
 8010386:	6824      	ldr	r4, [r4, #0]
 8010388:	2c00      	cmp	r4, #0
 801038a:	d1f7      	bne.n	801037c <_fwalk_sglue+0xc>
 801038c:	4630      	mov	r0, r6
 801038e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010392:	89ab      	ldrh	r3, [r5, #12]
 8010394:	2b01      	cmp	r3, #1
 8010396:	d907      	bls.n	80103a8 <_fwalk_sglue+0x38>
 8010398:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801039c:	3301      	adds	r3, #1
 801039e:	d003      	beq.n	80103a8 <_fwalk_sglue+0x38>
 80103a0:	4629      	mov	r1, r5
 80103a2:	4638      	mov	r0, r7
 80103a4:	47c0      	blx	r8
 80103a6:	4306      	orrs	r6, r0
 80103a8:	3568      	adds	r5, #104	@ 0x68
 80103aa:	e7e9      	b.n	8010380 <_fwalk_sglue+0x10>

080103ac <sniprintf>:
 80103ac:	b40c      	push	{r2, r3}
 80103ae:	b530      	push	{r4, r5, lr}
 80103b0:	4b18      	ldr	r3, [pc, #96]	@ (8010414 <sniprintf+0x68>)
 80103b2:	1e0c      	subs	r4, r1, #0
 80103b4:	681d      	ldr	r5, [r3, #0]
 80103b6:	b09d      	sub	sp, #116	@ 0x74
 80103b8:	da08      	bge.n	80103cc <sniprintf+0x20>
 80103ba:	238b      	movs	r3, #139	@ 0x8b
 80103bc:	602b      	str	r3, [r5, #0]
 80103be:	f04f 30ff 	mov.w	r0, #4294967295
 80103c2:	b01d      	add	sp, #116	@ 0x74
 80103c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80103c8:	b002      	add	sp, #8
 80103ca:	4770      	bx	lr
 80103cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80103d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80103d4:	f04f 0300 	mov.w	r3, #0
 80103d8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80103da:	bf14      	ite	ne
 80103dc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80103e0:	4623      	moveq	r3, r4
 80103e2:	9304      	str	r3, [sp, #16]
 80103e4:	9307      	str	r3, [sp, #28]
 80103e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80103ea:	9002      	str	r0, [sp, #8]
 80103ec:	9006      	str	r0, [sp, #24]
 80103ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 80103f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80103f4:	ab21      	add	r3, sp, #132	@ 0x84
 80103f6:	a902      	add	r1, sp, #8
 80103f8:	4628      	mov	r0, r5
 80103fa:	9301      	str	r3, [sp, #4]
 80103fc:	f000 fb7e 	bl	8010afc <_svfiprintf_r>
 8010400:	1c43      	adds	r3, r0, #1
 8010402:	bfbc      	itt	lt
 8010404:	238b      	movlt	r3, #139	@ 0x8b
 8010406:	602b      	strlt	r3, [r5, #0]
 8010408:	2c00      	cmp	r4, #0
 801040a:	d0da      	beq.n	80103c2 <sniprintf+0x16>
 801040c:	9b02      	ldr	r3, [sp, #8]
 801040e:	2200      	movs	r2, #0
 8010410:	701a      	strb	r2, [r3, #0]
 8010412:	e7d6      	b.n	80103c2 <sniprintf+0x16>
 8010414:	2000013c 	.word	0x2000013c

08010418 <siprintf>:
 8010418:	b40e      	push	{r1, r2, r3}
 801041a:	b510      	push	{r4, lr}
 801041c:	b09d      	sub	sp, #116	@ 0x74
 801041e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010420:	9002      	str	r0, [sp, #8]
 8010422:	9006      	str	r0, [sp, #24]
 8010424:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010428:	480a      	ldr	r0, [pc, #40]	@ (8010454 <siprintf+0x3c>)
 801042a:	9107      	str	r1, [sp, #28]
 801042c:	9104      	str	r1, [sp, #16]
 801042e:	490a      	ldr	r1, [pc, #40]	@ (8010458 <siprintf+0x40>)
 8010430:	f853 2b04 	ldr.w	r2, [r3], #4
 8010434:	9105      	str	r1, [sp, #20]
 8010436:	2400      	movs	r4, #0
 8010438:	a902      	add	r1, sp, #8
 801043a:	6800      	ldr	r0, [r0, #0]
 801043c:	9301      	str	r3, [sp, #4]
 801043e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010440:	f000 fb5c 	bl	8010afc <_svfiprintf_r>
 8010444:	9b02      	ldr	r3, [sp, #8]
 8010446:	701c      	strb	r4, [r3, #0]
 8010448:	b01d      	add	sp, #116	@ 0x74
 801044a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801044e:	b003      	add	sp, #12
 8010450:	4770      	bx	lr
 8010452:	bf00      	nop
 8010454:	2000013c 	.word	0x2000013c
 8010458:	ffff0208 	.word	0xffff0208

0801045c <siscanf>:
 801045c:	b40e      	push	{r1, r2, r3}
 801045e:	b570      	push	{r4, r5, r6, lr}
 8010460:	b09d      	sub	sp, #116	@ 0x74
 8010462:	ac21      	add	r4, sp, #132	@ 0x84
 8010464:	2500      	movs	r5, #0
 8010466:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801046a:	f854 6b04 	ldr.w	r6, [r4], #4
 801046e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010472:	951b      	str	r5, [sp, #108]	@ 0x6c
 8010474:	9002      	str	r0, [sp, #8]
 8010476:	9006      	str	r0, [sp, #24]
 8010478:	f7ef feb4 	bl	80001e4 <strlen>
 801047c:	4b0b      	ldr	r3, [pc, #44]	@ (80104ac <siscanf+0x50>)
 801047e:	9003      	str	r0, [sp, #12]
 8010480:	9007      	str	r0, [sp, #28]
 8010482:	480b      	ldr	r0, [pc, #44]	@ (80104b0 <siscanf+0x54>)
 8010484:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010486:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801048a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801048e:	4632      	mov	r2, r6
 8010490:	4623      	mov	r3, r4
 8010492:	a902      	add	r1, sp, #8
 8010494:	6800      	ldr	r0, [r0, #0]
 8010496:	950f      	str	r5, [sp, #60]	@ 0x3c
 8010498:	9514      	str	r5, [sp, #80]	@ 0x50
 801049a:	9401      	str	r4, [sp, #4]
 801049c:	f000 fc84 	bl	8010da8 <__ssvfiscanf_r>
 80104a0:	b01d      	add	sp, #116	@ 0x74
 80104a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104a6:	b003      	add	sp, #12
 80104a8:	4770      	bx	lr
 80104aa:	bf00      	nop
 80104ac:	080104d7 	.word	0x080104d7
 80104b0:	2000013c 	.word	0x2000013c

080104b4 <__sread>:
 80104b4:	b510      	push	{r4, lr}
 80104b6:	460c      	mov	r4, r1
 80104b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104bc:	f000 f93c 	bl	8010738 <_read_r>
 80104c0:	2800      	cmp	r0, #0
 80104c2:	bfab      	itete	ge
 80104c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80104c6:	89a3      	ldrhlt	r3, [r4, #12]
 80104c8:	181b      	addge	r3, r3, r0
 80104ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80104ce:	bfac      	ite	ge
 80104d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80104d2:	81a3      	strhlt	r3, [r4, #12]
 80104d4:	bd10      	pop	{r4, pc}

080104d6 <__seofread>:
 80104d6:	2000      	movs	r0, #0
 80104d8:	4770      	bx	lr

080104da <__swrite>:
 80104da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104de:	461f      	mov	r7, r3
 80104e0:	898b      	ldrh	r3, [r1, #12]
 80104e2:	05db      	lsls	r3, r3, #23
 80104e4:	4605      	mov	r5, r0
 80104e6:	460c      	mov	r4, r1
 80104e8:	4616      	mov	r6, r2
 80104ea:	d505      	bpl.n	80104f8 <__swrite+0x1e>
 80104ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104f0:	2302      	movs	r3, #2
 80104f2:	2200      	movs	r2, #0
 80104f4:	f000 f90e 	bl	8010714 <_lseek_r>
 80104f8:	89a3      	ldrh	r3, [r4, #12]
 80104fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010502:	81a3      	strh	r3, [r4, #12]
 8010504:	4632      	mov	r2, r6
 8010506:	463b      	mov	r3, r7
 8010508:	4628      	mov	r0, r5
 801050a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801050e:	f000 b925 	b.w	801075c <_write_r>

08010512 <__sseek>:
 8010512:	b510      	push	{r4, lr}
 8010514:	460c      	mov	r4, r1
 8010516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801051a:	f000 f8fb 	bl	8010714 <_lseek_r>
 801051e:	1c43      	adds	r3, r0, #1
 8010520:	89a3      	ldrh	r3, [r4, #12]
 8010522:	bf15      	itete	ne
 8010524:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010526:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801052a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801052e:	81a3      	strheq	r3, [r4, #12]
 8010530:	bf18      	it	ne
 8010532:	81a3      	strhne	r3, [r4, #12]
 8010534:	bd10      	pop	{r4, pc}

08010536 <__sclose>:
 8010536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801053a:	f000 b8db 	b.w	80106f4 <_close_r>

0801053e <_vsniprintf_r>:
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	4614      	mov	r4, r2
 8010542:	2c00      	cmp	r4, #0
 8010544:	b09b      	sub	sp, #108	@ 0x6c
 8010546:	4605      	mov	r5, r0
 8010548:	461a      	mov	r2, r3
 801054a:	da05      	bge.n	8010558 <_vsniprintf_r+0x1a>
 801054c:	238b      	movs	r3, #139	@ 0x8b
 801054e:	6003      	str	r3, [r0, #0]
 8010550:	f04f 30ff 	mov.w	r0, #4294967295
 8010554:	b01b      	add	sp, #108	@ 0x6c
 8010556:	bd30      	pop	{r4, r5, pc}
 8010558:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801055c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010560:	f04f 0300 	mov.w	r3, #0
 8010564:	9319      	str	r3, [sp, #100]	@ 0x64
 8010566:	bf14      	ite	ne
 8010568:	f104 33ff 	addne.w	r3, r4, #4294967295
 801056c:	4623      	moveq	r3, r4
 801056e:	9302      	str	r3, [sp, #8]
 8010570:	9305      	str	r3, [sp, #20]
 8010572:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010576:	9100      	str	r1, [sp, #0]
 8010578:	9104      	str	r1, [sp, #16]
 801057a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801057e:	4669      	mov	r1, sp
 8010580:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010582:	f000 fabb 	bl	8010afc <_svfiprintf_r>
 8010586:	1c43      	adds	r3, r0, #1
 8010588:	bfbc      	itt	lt
 801058a:	238b      	movlt	r3, #139	@ 0x8b
 801058c:	602b      	strlt	r3, [r5, #0]
 801058e:	2c00      	cmp	r4, #0
 8010590:	d0e0      	beq.n	8010554 <_vsniprintf_r+0x16>
 8010592:	9b00      	ldr	r3, [sp, #0]
 8010594:	2200      	movs	r2, #0
 8010596:	701a      	strb	r2, [r3, #0]
 8010598:	e7dc      	b.n	8010554 <_vsniprintf_r+0x16>
	...

0801059c <vsniprintf>:
 801059c:	b507      	push	{r0, r1, r2, lr}
 801059e:	9300      	str	r3, [sp, #0]
 80105a0:	4613      	mov	r3, r2
 80105a2:	460a      	mov	r2, r1
 80105a4:	4601      	mov	r1, r0
 80105a6:	4803      	ldr	r0, [pc, #12]	@ (80105b4 <vsniprintf+0x18>)
 80105a8:	6800      	ldr	r0, [r0, #0]
 80105aa:	f7ff ffc8 	bl	801053e <_vsniprintf_r>
 80105ae:	b003      	add	sp, #12
 80105b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80105b4:	2000013c 	.word	0x2000013c

080105b8 <memset>:
 80105b8:	4402      	add	r2, r0
 80105ba:	4603      	mov	r3, r0
 80105bc:	4293      	cmp	r3, r2
 80105be:	d100      	bne.n	80105c2 <memset+0xa>
 80105c0:	4770      	bx	lr
 80105c2:	f803 1b01 	strb.w	r1, [r3], #1
 80105c6:	e7f9      	b.n	80105bc <memset+0x4>

080105c8 <strcspn>:
 80105c8:	b570      	push	{r4, r5, r6, lr}
 80105ca:	4603      	mov	r3, r0
 80105cc:	461e      	mov	r6, r3
 80105ce:	f813 4b01 	ldrb.w	r4, [r3], #1
 80105d2:	b144      	cbz	r4, 80105e6 <strcspn+0x1e>
 80105d4:	1e4a      	subs	r2, r1, #1
 80105d6:	e001      	b.n	80105dc <strcspn+0x14>
 80105d8:	42a5      	cmp	r5, r4
 80105da:	d004      	beq.n	80105e6 <strcspn+0x1e>
 80105dc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80105e0:	2d00      	cmp	r5, #0
 80105e2:	d1f9      	bne.n	80105d8 <strcspn+0x10>
 80105e4:	e7f2      	b.n	80105cc <strcspn+0x4>
 80105e6:	1a30      	subs	r0, r6, r0
 80105e8:	bd70      	pop	{r4, r5, r6, pc}

080105ea <strncpy>:
 80105ea:	b510      	push	{r4, lr}
 80105ec:	3901      	subs	r1, #1
 80105ee:	4603      	mov	r3, r0
 80105f0:	b132      	cbz	r2, 8010600 <strncpy+0x16>
 80105f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80105f6:	f803 4b01 	strb.w	r4, [r3], #1
 80105fa:	3a01      	subs	r2, #1
 80105fc:	2c00      	cmp	r4, #0
 80105fe:	d1f7      	bne.n	80105f0 <strncpy+0x6>
 8010600:	441a      	add	r2, r3
 8010602:	2100      	movs	r1, #0
 8010604:	4293      	cmp	r3, r2
 8010606:	d100      	bne.n	801060a <strncpy+0x20>
 8010608:	bd10      	pop	{r4, pc}
 801060a:	f803 1b01 	strb.w	r1, [r3], #1
 801060e:	e7f9      	b.n	8010604 <strncpy+0x1a>

08010610 <strrchr>:
 8010610:	b538      	push	{r3, r4, r5, lr}
 8010612:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8010616:	4603      	mov	r3, r0
 8010618:	d10e      	bne.n	8010638 <strrchr+0x28>
 801061a:	4621      	mov	r1, r4
 801061c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010620:	f001 b95d 	b.w	80118de <strchr>
 8010624:	1c43      	adds	r3, r0, #1
 8010626:	4605      	mov	r5, r0
 8010628:	4621      	mov	r1, r4
 801062a:	4618      	mov	r0, r3
 801062c:	f001 f957 	bl	80118de <strchr>
 8010630:	2800      	cmp	r0, #0
 8010632:	d1f7      	bne.n	8010624 <strrchr+0x14>
 8010634:	4628      	mov	r0, r5
 8010636:	bd38      	pop	{r3, r4, r5, pc}
 8010638:	2500      	movs	r5, #0
 801063a:	e7f5      	b.n	8010628 <strrchr+0x18>

0801063c <strtok>:
 801063c:	4b16      	ldr	r3, [pc, #88]	@ (8010698 <strtok+0x5c>)
 801063e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010642:	681f      	ldr	r7, [r3, #0]
 8010644:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8010646:	4605      	mov	r5, r0
 8010648:	460e      	mov	r6, r1
 801064a:	b9ec      	cbnz	r4, 8010688 <strtok+0x4c>
 801064c:	2050      	movs	r0, #80	@ 0x50
 801064e:	f000 f943 	bl	80108d8 <malloc>
 8010652:	4602      	mov	r2, r0
 8010654:	6478      	str	r0, [r7, #68]	@ 0x44
 8010656:	b920      	cbnz	r0, 8010662 <strtok+0x26>
 8010658:	4b10      	ldr	r3, [pc, #64]	@ (801069c <strtok+0x60>)
 801065a:	4811      	ldr	r0, [pc, #68]	@ (80106a0 <strtok+0x64>)
 801065c:	215b      	movs	r1, #91	@ 0x5b
 801065e:	f000 f8d3 	bl	8010808 <__assert_func>
 8010662:	e9c0 4400 	strd	r4, r4, [r0]
 8010666:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801066a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801066e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8010672:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8010676:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801067a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801067e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8010682:	6184      	str	r4, [r0, #24]
 8010684:	7704      	strb	r4, [r0, #28]
 8010686:	6244      	str	r4, [r0, #36]	@ 0x24
 8010688:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801068a:	4631      	mov	r1, r6
 801068c:	4628      	mov	r0, r5
 801068e:	2301      	movs	r3, #1
 8010690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010694:	f000 b806 	b.w	80106a4 <__strtok_r>
 8010698:	2000013c 	.word	0x2000013c
 801069c:	08012f25 	.word	0x08012f25
 80106a0:	08012f3c 	.word	0x08012f3c

080106a4 <__strtok_r>:
 80106a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106a6:	4604      	mov	r4, r0
 80106a8:	b908      	cbnz	r0, 80106ae <__strtok_r+0xa>
 80106aa:	6814      	ldr	r4, [r2, #0]
 80106ac:	b144      	cbz	r4, 80106c0 <__strtok_r+0x1c>
 80106ae:	4620      	mov	r0, r4
 80106b0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80106b4:	460f      	mov	r7, r1
 80106b6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80106ba:	b91e      	cbnz	r6, 80106c4 <__strtok_r+0x20>
 80106bc:	b965      	cbnz	r5, 80106d8 <__strtok_r+0x34>
 80106be:	6015      	str	r5, [r2, #0]
 80106c0:	2000      	movs	r0, #0
 80106c2:	e005      	b.n	80106d0 <__strtok_r+0x2c>
 80106c4:	42b5      	cmp	r5, r6
 80106c6:	d1f6      	bne.n	80106b6 <__strtok_r+0x12>
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d1f0      	bne.n	80106ae <__strtok_r+0xa>
 80106cc:	6014      	str	r4, [r2, #0]
 80106ce:	7003      	strb	r3, [r0, #0]
 80106d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106d2:	461c      	mov	r4, r3
 80106d4:	e00c      	b.n	80106f0 <__strtok_r+0x4c>
 80106d6:	b91d      	cbnz	r5, 80106e0 <__strtok_r+0x3c>
 80106d8:	4627      	mov	r7, r4
 80106da:	f814 3b01 	ldrb.w	r3, [r4], #1
 80106de:	460e      	mov	r6, r1
 80106e0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80106e4:	42ab      	cmp	r3, r5
 80106e6:	d1f6      	bne.n	80106d6 <__strtok_r+0x32>
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d0f2      	beq.n	80106d2 <__strtok_r+0x2e>
 80106ec:	2300      	movs	r3, #0
 80106ee:	703b      	strb	r3, [r7, #0]
 80106f0:	6014      	str	r4, [r2, #0]
 80106f2:	e7ed      	b.n	80106d0 <__strtok_r+0x2c>

080106f4 <_close_r>:
 80106f4:	b538      	push	{r3, r4, r5, lr}
 80106f6:	4d06      	ldr	r5, [pc, #24]	@ (8010710 <_close_r+0x1c>)
 80106f8:	2300      	movs	r3, #0
 80106fa:	4604      	mov	r4, r0
 80106fc:	4608      	mov	r0, r1
 80106fe:	602b      	str	r3, [r5, #0]
 8010700:	f7f1 fa08 	bl	8001b14 <_close>
 8010704:	1c43      	adds	r3, r0, #1
 8010706:	d102      	bne.n	801070e <_close_r+0x1a>
 8010708:	682b      	ldr	r3, [r5, #0]
 801070a:	b103      	cbz	r3, 801070e <_close_r+0x1a>
 801070c:	6023      	str	r3, [r4, #0]
 801070e:	bd38      	pop	{r3, r4, r5, pc}
 8010710:	2001430c 	.word	0x2001430c

08010714 <_lseek_r>:
 8010714:	b538      	push	{r3, r4, r5, lr}
 8010716:	4d07      	ldr	r5, [pc, #28]	@ (8010734 <_lseek_r+0x20>)
 8010718:	4604      	mov	r4, r0
 801071a:	4608      	mov	r0, r1
 801071c:	4611      	mov	r1, r2
 801071e:	2200      	movs	r2, #0
 8010720:	602a      	str	r2, [r5, #0]
 8010722:	461a      	mov	r2, r3
 8010724:	f7f1 fa1d 	bl	8001b62 <_lseek>
 8010728:	1c43      	adds	r3, r0, #1
 801072a:	d102      	bne.n	8010732 <_lseek_r+0x1e>
 801072c:	682b      	ldr	r3, [r5, #0]
 801072e:	b103      	cbz	r3, 8010732 <_lseek_r+0x1e>
 8010730:	6023      	str	r3, [r4, #0]
 8010732:	bd38      	pop	{r3, r4, r5, pc}
 8010734:	2001430c 	.word	0x2001430c

08010738 <_read_r>:
 8010738:	b538      	push	{r3, r4, r5, lr}
 801073a:	4d07      	ldr	r5, [pc, #28]	@ (8010758 <_read_r+0x20>)
 801073c:	4604      	mov	r4, r0
 801073e:	4608      	mov	r0, r1
 8010740:	4611      	mov	r1, r2
 8010742:	2200      	movs	r2, #0
 8010744:	602a      	str	r2, [r5, #0]
 8010746:	461a      	mov	r2, r3
 8010748:	f7f1 f9ab 	bl	8001aa2 <_read>
 801074c:	1c43      	adds	r3, r0, #1
 801074e:	d102      	bne.n	8010756 <_read_r+0x1e>
 8010750:	682b      	ldr	r3, [r5, #0]
 8010752:	b103      	cbz	r3, 8010756 <_read_r+0x1e>
 8010754:	6023      	str	r3, [r4, #0]
 8010756:	bd38      	pop	{r3, r4, r5, pc}
 8010758:	2001430c 	.word	0x2001430c

0801075c <_write_r>:
 801075c:	b538      	push	{r3, r4, r5, lr}
 801075e:	4d07      	ldr	r5, [pc, #28]	@ (801077c <_write_r+0x20>)
 8010760:	4604      	mov	r4, r0
 8010762:	4608      	mov	r0, r1
 8010764:	4611      	mov	r1, r2
 8010766:	2200      	movs	r2, #0
 8010768:	602a      	str	r2, [r5, #0]
 801076a:	461a      	mov	r2, r3
 801076c:	f7f1 f9b6 	bl	8001adc <_write>
 8010770:	1c43      	adds	r3, r0, #1
 8010772:	d102      	bne.n	801077a <_write_r+0x1e>
 8010774:	682b      	ldr	r3, [r5, #0]
 8010776:	b103      	cbz	r3, 801077a <_write_r+0x1e>
 8010778:	6023      	str	r3, [r4, #0]
 801077a:	bd38      	pop	{r3, r4, r5, pc}
 801077c:	2001430c 	.word	0x2001430c

08010780 <__errno>:
 8010780:	4b01      	ldr	r3, [pc, #4]	@ (8010788 <__errno+0x8>)
 8010782:	6818      	ldr	r0, [r3, #0]
 8010784:	4770      	bx	lr
 8010786:	bf00      	nop
 8010788:	2000013c 	.word	0x2000013c

0801078c <__libc_init_array>:
 801078c:	b570      	push	{r4, r5, r6, lr}
 801078e:	4d0d      	ldr	r5, [pc, #52]	@ (80107c4 <__libc_init_array+0x38>)
 8010790:	4c0d      	ldr	r4, [pc, #52]	@ (80107c8 <__libc_init_array+0x3c>)
 8010792:	1b64      	subs	r4, r4, r5
 8010794:	10a4      	asrs	r4, r4, #2
 8010796:	2600      	movs	r6, #0
 8010798:	42a6      	cmp	r6, r4
 801079a:	d109      	bne.n	80107b0 <__libc_init_array+0x24>
 801079c:	4d0b      	ldr	r5, [pc, #44]	@ (80107cc <__libc_init_array+0x40>)
 801079e:	4c0c      	ldr	r4, [pc, #48]	@ (80107d0 <__libc_init_array+0x44>)
 80107a0:	f001 fc06 	bl	8011fb0 <_init>
 80107a4:	1b64      	subs	r4, r4, r5
 80107a6:	10a4      	asrs	r4, r4, #2
 80107a8:	2600      	movs	r6, #0
 80107aa:	42a6      	cmp	r6, r4
 80107ac:	d105      	bne.n	80107ba <__libc_init_array+0x2e>
 80107ae:	bd70      	pop	{r4, r5, r6, pc}
 80107b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80107b4:	4798      	blx	r3
 80107b6:	3601      	adds	r6, #1
 80107b8:	e7ee      	b.n	8010798 <__libc_init_array+0xc>
 80107ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80107be:	4798      	blx	r3
 80107c0:	3601      	adds	r6, #1
 80107c2:	e7f2      	b.n	80107aa <__libc_init_array+0x1e>
 80107c4:	08013028 	.word	0x08013028
 80107c8:	08013028 	.word	0x08013028
 80107cc:	08013028 	.word	0x08013028
 80107d0:	0801302c 	.word	0x0801302c

080107d4 <__retarget_lock_init_recursive>:
 80107d4:	4770      	bx	lr

080107d6 <__retarget_lock_acquire_recursive>:
 80107d6:	4770      	bx	lr

080107d8 <__retarget_lock_release_recursive>:
 80107d8:	4770      	bx	lr

080107da <strcpy>:
 80107da:	4603      	mov	r3, r0
 80107dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107e0:	f803 2b01 	strb.w	r2, [r3], #1
 80107e4:	2a00      	cmp	r2, #0
 80107e6:	d1f9      	bne.n	80107dc <strcpy+0x2>
 80107e8:	4770      	bx	lr

080107ea <memcpy>:
 80107ea:	440a      	add	r2, r1
 80107ec:	4291      	cmp	r1, r2
 80107ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80107f2:	d100      	bne.n	80107f6 <memcpy+0xc>
 80107f4:	4770      	bx	lr
 80107f6:	b510      	push	{r4, lr}
 80107f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010800:	4291      	cmp	r1, r2
 8010802:	d1f9      	bne.n	80107f8 <memcpy+0xe>
 8010804:	bd10      	pop	{r4, pc}
	...

08010808 <__assert_func>:
 8010808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801080a:	4614      	mov	r4, r2
 801080c:	461a      	mov	r2, r3
 801080e:	4b09      	ldr	r3, [pc, #36]	@ (8010834 <__assert_func+0x2c>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	4605      	mov	r5, r0
 8010814:	68d8      	ldr	r0, [r3, #12]
 8010816:	b14c      	cbz	r4, 801082c <__assert_func+0x24>
 8010818:	4b07      	ldr	r3, [pc, #28]	@ (8010838 <__assert_func+0x30>)
 801081a:	9100      	str	r1, [sp, #0]
 801081c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010820:	4906      	ldr	r1, [pc, #24]	@ (801083c <__assert_func+0x34>)
 8010822:	462b      	mov	r3, r5
 8010824:	f000 ffbc 	bl	80117a0 <fiprintf>
 8010828:	f001 f876 	bl	8011918 <abort>
 801082c:	4b04      	ldr	r3, [pc, #16]	@ (8010840 <__assert_func+0x38>)
 801082e:	461c      	mov	r4, r3
 8010830:	e7f3      	b.n	801081a <__assert_func+0x12>
 8010832:	bf00      	nop
 8010834:	2000013c 	.word	0x2000013c
 8010838:	08012f96 	.word	0x08012f96
 801083c:	08012fa3 	.word	0x08012fa3
 8010840:	08012fd1 	.word	0x08012fd1

08010844 <_free_r>:
 8010844:	b538      	push	{r3, r4, r5, lr}
 8010846:	4605      	mov	r5, r0
 8010848:	2900      	cmp	r1, #0
 801084a:	d041      	beq.n	80108d0 <_free_r+0x8c>
 801084c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010850:	1f0c      	subs	r4, r1, #4
 8010852:	2b00      	cmp	r3, #0
 8010854:	bfb8      	it	lt
 8010856:	18e4      	addlt	r4, r4, r3
 8010858:	f000 f8e8 	bl	8010a2c <__malloc_lock>
 801085c:	4a1d      	ldr	r2, [pc, #116]	@ (80108d4 <_free_r+0x90>)
 801085e:	6813      	ldr	r3, [r2, #0]
 8010860:	b933      	cbnz	r3, 8010870 <_free_r+0x2c>
 8010862:	6063      	str	r3, [r4, #4]
 8010864:	6014      	str	r4, [r2, #0]
 8010866:	4628      	mov	r0, r5
 8010868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801086c:	f000 b8e4 	b.w	8010a38 <__malloc_unlock>
 8010870:	42a3      	cmp	r3, r4
 8010872:	d908      	bls.n	8010886 <_free_r+0x42>
 8010874:	6820      	ldr	r0, [r4, #0]
 8010876:	1821      	adds	r1, r4, r0
 8010878:	428b      	cmp	r3, r1
 801087a:	bf01      	itttt	eq
 801087c:	6819      	ldreq	r1, [r3, #0]
 801087e:	685b      	ldreq	r3, [r3, #4]
 8010880:	1809      	addeq	r1, r1, r0
 8010882:	6021      	streq	r1, [r4, #0]
 8010884:	e7ed      	b.n	8010862 <_free_r+0x1e>
 8010886:	461a      	mov	r2, r3
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	b10b      	cbz	r3, 8010890 <_free_r+0x4c>
 801088c:	42a3      	cmp	r3, r4
 801088e:	d9fa      	bls.n	8010886 <_free_r+0x42>
 8010890:	6811      	ldr	r1, [r2, #0]
 8010892:	1850      	adds	r0, r2, r1
 8010894:	42a0      	cmp	r0, r4
 8010896:	d10b      	bne.n	80108b0 <_free_r+0x6c>
 8010898:	6820      	ldr	r0, [r4, #0]
 801089a:	4401      	add	r1, r0
 801089c:	1850      	adds	r0, r2, r1
 801089e:	4283      	cmp	r3, r0
 80108a0:	6011      	str	r1, [r2, #0]
 80108a2:	d1e0      	bne.n	8010866 <_free_r+0x22>
 80108a4:	6818      	ldr	r0, [r3, #0]
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	6053      	str	r3, [r2, #4]
 80108aa:	4408      	add	r0, r1
 80108ac:	6010      	str	r0, [r2, #0]
 80108ae:	e7da      	b.n	8010866 <_free_r+0x22>
 80108b0:	d902      	bls.n	80108b8 <_free_r+0x74>
 80108b2:	230c      	movs	r3, #12
 80108b4:	602b      	str	r3, [r5, #0]
 80108b6:	e7d6      	b.n	8010866 <_free_r+0x22>
 80108b8:	6820      	ldr	r0, [r4, #0]
 80108ba:	1821      	adds	r1, r4, r0
 80108bc:	428b      	cmp	r3, r1
 80108be:	bf04      	itt	eq
 80108c0:	6819      	ldreq	r1, [r3, #0]
 80108c2:	685b      	ldreq	r3, [r3, #4]
 80108c4:	6063      	str	r3, [r4, #4]
 80108c6:	bf04      	itt	eq
 80108c8:	1809      	addeq	r1, r1, r0
 80108ca:	6021      	streq	r1, [r4, #0]
 80108cc:	6054      	str	r4, [r2, #4]
 80108ce:	e7ca      	b.n	8010866 <_free_r+0x22>
 80108d0:	bd38      	pop	{r3, r4, r5, pc}
 80108d2:	bf00      	nop
 80108d4:	20014318 	.word	0x20014318

080108d8 <malloc>:
 80108d8:	4b02      	ldr	r3, [pc, #8]	@ (80108e4 <malloc+0xc>)
 80108da:	4601      	mov	r1, r0
 80108dc:	6818      	ldr	r0, [r3, #0]
 80108de:	f000 b825 	b.w	801092c <_malloc_r>
 80108e2:	bf00      	nop
 80108e4:	2000013c 	.word	0x2000013c

080108e8 <sbrk_aligned>:
 80108e8:	b570      	push	{r4, r5, r6, lr}
 80108ea:	4e0f      	ldr	r6, [pc, #60]	@ (8010928 <sbrk_aligned+0x40>)
 80108ec:	460c      	mov	r4, r1
 80108ee:	6831      	ldr	r1, [r6, #0]
 80108f0:	4605      	mov	r5, r0
 80108f2:	b911      	cbnz	r1, 80108fa <sbrk_aligned+0x12>
 80108f4:	f001 f800 	bl	80118f8 <_sbrk_r>
 80108f8:	6030      	str	r0, [r6, #0]
 80108fa:	4621      	mov	r1, r4
 80108fc:	4628      	mov	r0, r5
 80108fe:	f000 fffb 	bl	80118f8 <_sbrk_r>
 8010902:	1c43      	adds	r3, r0, #1
 8010904:	d103      	bne.n	801090e <sbrk_aligned+0x26>
 8010906:	f04f 34ff 	mov.w	r4, #4294967295
 801090a:	4620      	mov	r0, r4
 801090c:	bd70      	pop	{r4, r5, r6, pc}
 801090e:	1cc4      	adds	r4, r0, #3
 8010910:	f024 0403 	bic.w	r4, r4, #3
 8010914:	42a0      	cmp	r0, r4
 8010916:	d0f8      	beq.n	801090a <sbrk_aligned+0x22>
 8010918:	1a21      	subs	r1, r4, r0
 801091a:	4628      	mov	r0, r5
 801091c:	f000 ffec 	bl	80118f8 <_sbrk_r>
 8010920:	3001      	adds	r0, #1
 8010922:	d1f2      	bne.n	801090a <sbrk_aligned+0x22>
 8010924:	e7ef      	b.n	8010906 <sbrk_aligned+0x1e>
 8010926:	bf00      	nop
 8010928:	20014314 	.word	0x20014314

0801092c <_malloc_r>:
 801092c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010930:	1ccd      	adds	r5, r1, #3
 8010932:	f025 0503 	bic.w	r5, r5, #3
 8010936:	3508      	adds	r5, #8
 8010938:	2d0c      	cmp	r5, #12
 801093a:	bf38      	it	cc
 801093c:	250c      	movcc	r5, #12
 801093e:	2d00      	cmp	r5, #0
 8010940:	4606      	mov	r6, r0
 8010942:	db01      	blt.n	8010948 <_malloc_r+0x1c>
 8010944:	42a9      	cmp	r1, r5
 8010946:	d904      	bls.n	8010952 <_malloc_r+0x26>
 8010948:	230c      	movs	r3, #12
 801094a:	6033      	str	r3, [r6, #0]
 801094c:	2000      	movs	r0, #0
 801094e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010952:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010a28 <_malloc_r+0xfc>
 8010956:	f000 f869 	bl	8010a2c <__malloc_lock>
 801095a:	f8d8 3000 	ldr.w	r3, [r8]
 801095e:	461c      	mov	r4, r3
 8010960:	bb44      	cbnz	r4, 80109b4 <_malloc_r+0x88>
 8010962:	4629      	mov	r1, r5
 8010964:	4630      	mov	r0, r6
 8010966:	f7ff ffbf 	bl	80108e8 <sbrk_aligned>
 801096a:	1c43      	adds	r3, r0, #1
 801096c:	4604      	mov	r4, r0
 801096e:	d158      	bne.n	8010a22 <_malloc_r+0xf6>
 8010970:	f8d8 4000 	ldr.w	r4, [r8]
 8010974:	4627      	mov	r7, r4
 8010976:	2f00      	cmp	r7, #0
 8010978:	d143      	bne.n	8010a02 <_malloc_r+0xd6>
 801097a:	2c00      	cmp	r4, #0
 801097c:	d04b      	beq.n	8010a16 <_malloc_r+0xea>
 801097e:	6823      	ldr	r3, [r4, #0]
 8010980:	4639      	mov	r1, r7
 8010982:	4630      	mov	r0, r6
 8010984:	eb04 0903 	add.w	r9, r4, r3
 8010988:	f000 ffb6 	bl	80118f8 <_sbrk_r>
 801098c:	4581      	cmp	r9, r0
 801098e:	d142      	bne.n	8010a16 <_malloc_r+0xea>
 8010990:	6821      	ldr	r1, [r4, #0]
 8010992:	1a6d      	subs	r5, r5, r1
 8010994:	4629      	mov	r1, r5
 8010996:	4630      	mov	r0, r6
 8010998:	f7ff ffa6 	bl	80108e8 <sbrk_aligned>
 801099c:	3001      	adds	r0, #1
 801099e:	d03a      	beq.n	8010a16 <_malloc_r+0xea>
 80109a0:	6823      	ldr	r3, [r4, #0]
 80109a2:	442b      	add	r3, r5
 80109a4:	6023      	str	r3, [r4, #0]
 80109a6:	f8d8 3000 	ldr.w	r3, [r8]
 80109aa:	685a      	ldr	r2, [r3, #4]
 80109ac:	bb62      	cbnz	r2, 8010a08 <_malloc_r+0xdc>
 80109ae:	f8c8 7000 	str.w	r7, [r8]
 80109b2:	e00f      	b.n	80109d4 <_malloc_r+0xa8>
 80109b4:	6822      	ldr	r2, [r4, #0]
 80109b6:	1b52      	subs	r2, r2, r5
 80109b8:	d420      	bmi.n	80109fc <_malloc_r+0xd0>
 80109ba:	2a0b      	cmp	r2, #11
 80109bc:	d917      	bls.n	80109ee <_malloc_r+0xc2>
 80109be:	1961      	adds	r1, r4, r5
 80109c0:	42a3      	cmp	r3, r4
 80109c2:	6025      	str	r5, [r4, #0]
 80109c4:	bf18      	it	ne
 80109c6:	6059      	strne	r1, [r3, #4]
 80109c8:	6863      	ldr	r3, [r4, #4]
 80109ca:	bf08      	it	eq
 80109cc:	f8c8 1000 	streq.w	r1, [r8]
 80109d0:	5162      	str	r2, [r4, r5]
 80109d2:	604b      	str	r3, [r1, #4]
 80109d4:	4630      	mov	r0, r6
 80109d6:	f000 f82f 	bl	8010a38 <__malloc_unlock>
 80109da:	f104 000b 	add.w	r0, r4, #11
 80109de:	1d23      	adds	r3, r4, #4
 80109e0:	f020 0007 	bic.w	r0, r0, #7
 80109e4:	1ac2      	subs	r2, r0, r3
 80109e6:	bf1c      	itt	ne
 80109e8:	1a1b      	subne	r3, r3, r0
 80109ea:	50a3      	strne	r3, [r4, r2]
 80109ec:	e7af      	b.n	801094e <_malloc_r+0x22>
 80109ee:	6862      	ldr	r2, [r4, #4]
 80109f0:	42a3      	cmp	r3, r4
 80109f2:	bf0c      	ite	eq
 80109f4:	f8c8 2000 	streq.w	r2, [r8]
 80109f8:	605a      	strne	r2, [r3, #4]
 80109fa:	e7eb      	b.n	80109d4 <_malloc_r+0xa8>
 80109fc:	4623      	mov	r3, r4
 80109fe:	6864      	ldr	r4, [r4, #4]
 8010a00:	e7ae      	b.n	8010960 <_malloc_r+0x34>
 8010a02:	463c      	mov	r4, r7
 8010a04:	687f      	ldr	r7, [r7, #4]
 8010a06:	e7b6      	b.n	8010976 <_malloc_r+0x4a>
 8010a08:	461a      	mov	r2, r3
 8010a0a:	685b      	ldr	r3, [r3, #4]
 8010a0c:	42a3      	cmp	r3, r4
 8010a0e:	d1fb      	bne.n	8010a08 <_malloc_r+0xdc>
 8010a10:	2300      	movs	r3, #0
 8010a12:	6053      	str	r3, [r2, #4]
 8010a14:	e7de      	b.n	80109d4 <_malloc_r+0xa8>
 8010a16:	230c      	movs	r3, #12
 8010a18:	6033      	str	r3, [r6, #0]
 8010a1a:	4630      	mov	r0, r6
 8010a1c:	f000 f80c 	bl	8010a38 <__malloc_unlock>
 8010a20:	e794      	b.n	801094c <_malloc_r+0x20>
 8010a22:	6005      	str	r5, [r0, #0]
 8010a24:	e7d6      	b.n	80109d4 <_malloc_r+0xa8>
 8010a26:	bf00      	nop
 8010a28:	20014318 	.word	0x20014318

08010a2c <__malloc_lock>:
 8010a2c:	4801      	ldr	r0, [pc, #4]	@ (8010a34 <__malloc_lock+0x8>)
 8010a2e:	f7ff bed2 	b.w	80107d6 <__retarget_lock_acquire_recursive>
 8010a32:	bf00      	nop
 8010a34:	20014310 	.word	0x20014310

08010a38 <__malloc_unlock>:
 8010a38:	4801      	ldr	r0, [pc, #4]	@ (8010a40 <__malloc_unlock+0x8>)
 8010a3a:	f7ff becd 	b.w	80107d8 <__retarget_lock_release_recursive>
 8010a3e:	bf00      	nop
 8010a40:	20014310 	.word	0x20014310

08010a44 <__ssputs_r>:
 8010a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a48:	688e      	ldr	r6, [r1, #8]
 8010a4a:	461f      	mov	r7, r3
 8010a4c:	42be      	cmp	r6, r7
 8010a4e:	680b      	ldr	r3, [r1, #0]
 8010a50:	4682      	mov	sl, r0
 8010a52:	460c      	mov	r4, r1
 8010a54:	4690      	mov	r8, r2
 8010a56:	d82d      	bhi.n	8010ab4 <__ssputs_r+0x70>
 8010a58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010a5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010a60:	d026      	beq.n	8010ab0 <__ssputs_r+0x6c>
 8010a62:	6965      	ldr	r5, [r4, #20]
 8010a64:	6909      	ldr	r1, [r1, #16]
 8010a66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a6a:	eba3 0901 	sub.w	r9, r3, r1
 8010a6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a72:	1c7b      	adds	r3, r7, #1
 8010a74:	444b      	add	r3, r9
 8010a76:	106d      	asrs	r5, r5, #1
 8010a78:	429d      	cmp	r5, r3
 8010a7a:	bf38      	it	cc
 8010a7c:	461d      	movcc	r5, r3
 8010a7e:	0553      	lsls	r3, r2, #21
 8010a80:	d527      	bpl.n	8010ad2 <__ssputs_r+0x8e>
 8010a82:	4629      	mov	r1, r5
 8010a84:	f7ff ff52 	bl	801092c <_malloc_r>
 8010a88:	4606      	mov	r6, r0
 8010a8a:	b360      	cbz	r0, 8010ae6 <__ssputs_r+0xa2>
 8010a8c:	6921      	ldr	r1, [r4, #16]
 8010a8e:	464a      	mov	r2, r9
 8010a90:	f7ff feab 	bl	80107ea <memcpy>
 8010a94:	89a3      	ldrh	r3, [r4, #12]
 8010a96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a9e:	81a3      	strh	r3, [r4, #12]
 8010aa0:	6126      	str	r6, [r4, #16]
 8010aa2:	6165      	str	r5, [r4, #20]
 8010aa4:	444e      	add	r6, r9
 8010aa6:	eba5 0509 	sub.w	r5, r5, r9
 8010aaa:	6026      	str	r6, [r4, #0]
 8010aac:	60a5      	str	r5, [r4, #8]
 8010aae:	463e      	mov	r6, r7
 8010ab0:	42be      	cmp	r6, r7
 8010ab2:	d900      	bls.n	8010ab6 <__ssputs_r+0x72>
 8010ab4:	463e      	mov	r6, r7
 8010ab6:	6820      	ldr	r0, [r4, #0]
 8010ab8:	4632      	mov	r2, r6
 8010aba:	4641      	mov	r1, r8
 8010abc:	f000 fef5 	bl	80118aa <memmove>
 8010ac0:	68a3      	ldr	r3, [r4, #8]
 8010ac2:	1b9b      	subs	r3, r3, r6
 8010ac4:	60a3      	str	r3, [r4, #8]
 8010ac6:	6823      	ldr	r3, [r4, #0]
 8010ac8:	4433      	add	r3, r6
 8010aca:	6023      	str	r3, [r4, #0]
 8010acc:	2000      	movs	r0, #0
 8010ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ad2:	462a      	mov	r2, r5
 8010ad4:	f000 ff27 	bl	8011926 <_realloc_r>
 8010ad8:	4606      	mov	r6, r0
 8010ada:	2800      	cmp	r0, #0
 8010adc:	d1e0      	bne.n	8010aa0 <__ssputs_r+0x5c>
 8010ade:	6921      	ldr	r1, [r4, #16]
 8010ae0:	4650      	mov	r0, sl
 8010ae2:	f7ff feaf 	bl	8010844 <_free_r>
 8010ae6:	230c      	movs	r3, #12
 8010ae8:	f8ca 3000 	str.w	r3, [sl]
 8010aec:	89a3      	ldrh	r3, [r4, #12]
 8010aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010af2:	81a3      	strh	r3, [r4, #12]
 8010af4:	f04f 30ff 	mov.w	r0, #4294967295
 8010af8:	e7e9      	b.n	8010ace <__ssputs_r+0x8a>
	...

08010afc <_svfiprintf_r>:
 8010afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b00:	4698      	mov	r8, r3
 8010b02:	898b      	ldrh	r3, [r1, #12]
 8010b04:	061b      	lsls	r3, r3, #24
 8010b06:	b09d      	sub	sp, #116	@ 0x74
 8010b08:	4607      	mov	r7, r0
 8010b0a:	460d      	mov	r5, r1
 8010b0c:	4614      	mov	r4, r2
 8010b0e:	d510      	bpl.n	8010b32 <_svfiprintf_r+0x36>
 8010b10:	690b      	ldr	r3, [r1, #16]
 8010b12:	b973      	cbnz	r3, 8010b32 <_svfiprintf_r+0x36>
 8010b14:	2140      	movs	r1, #64	@ 0x40
 8010b16:	f7ff ff09 	bl	801092c <_malloc_r>
 8010b1a:	6028      	str	r0, [r5, #0]
 8010b1c:	6128      	str	r0, [r5, #16]
 8010b1e:	b930      	cbnz	r0, 8010b2e <_svfiprintf_r+0x32>
 8010b20:	230c      	movs	r3, #12
 8010b22:	603b      	str	r3, [r7, #0]
 8010b24:	f04f 30ff 	mov.w	r0, #4294967295
 8010b28:	b01d      	add	sp, #116	@ 0x74
 8010b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b2e:	2340      	movs	r3, #64	@ 0x40
 8010b30:	616b      	str	r3, [r5, #20]
 8010b32:	2300      	movs	r3, #0
 8010b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b36:	2320      	movs	r3, #32
 8010b38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b40:	2330      	movs	r3, #48	@ 0x30
 8010b42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010ce0 <_svfiprintf_r+0x1e4>
 8010b46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010b4a:	f04f 0901 	mov.w	r9, #1
 8010b4e:	4623      	mov	r3, r4
 8010b50:	469a      	mov	sl, r3
 8010b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b56:	b10a      	cbz	r2, 8010b5c <_svfiprintf_r+0x60>
 8010b58:	2a25      	cmp	r2, #37	@ 0x25
 8010b5a:	d1f9      	bne.n	8010b50 <_svfiprintf_r+0x54>
 8010b5c:	ebba 0b04 	subs.w	fp, sl, r4
 8010b60:	d00b      	beq.n	8010b7a <_svfiprintf_r+0x7e>
 8010b62:	465b      	mov	r3, fp
 8010b64:	4622      	mov	r2, r4
 8010b66:	4629      	mov	r1, r5
 8010b68:	4638      	mov	r0, r7
 8010b6a:	f7ff ff6b 	bl	8010a44 <__ssputs_r>
 8010b6e:	3001      	adds	r0, #1
 8010b70:	f000 80a7 	beq.w	8010cc2 <_svfiprintf_r+0x1c6>
 8010b74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b76:	445a      	add	r2, fp
 8010b78:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	f000 809f 	beq.w	8010cc2 <_svfiprintf_r+0x1c6>
 8010b84:	2300      	movs	r3, #0
 8010b86:	f04f 32ff 	mov.w	r2, #4294967295
 8010b8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b8e:	f10a 0a01 	add.w	sl, sl, #1
 8010b92:	9304      	str	r3, [sp, #16]
 8010b94:	9307      	str	r3, [sp, #28]
 8010b96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b9c:	4654      	mov	r4, sl
 8010b9e:	2205      	movs	r2, #5
 8010ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ba4:	484e      	ldr	r0, [pc, #312]	@ (8010ce0 <_svfiprintf_r+0x1e4>)
 8010ba6:	f7ef fb2b 	bl	8000200 <memchr>
 8010baa:	9a04      	ldr	r2, [sp, #16]
 8010bac:	b9d8      	cbnz	r0, 8010be6 <_svfiprintf_r+0xea>
 8010bae:	06d0      	lsls	r0, r2, #27
 8010bb0:	bf44      	itt	mi
 8010bb2:	2320      	movmi	r3, #32
 8010bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010bb8:	0711      	lsls	r1, r2, #28
 8010bba:	bf44      	itt	mi
 8010bbc:	232b      	movmi	r3, #43	@ 0x2b
 8010bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8010bc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8010bc8:	d015      	beq.n	8010bf6 <_svfiprintf_r+0xfa>
 8010bca:	9a07      	ldr	r2, [sp, #28]
 8010bcc:	4654      	mov	r4, sl
 8010bce:	2000      	movs	r0, #0
 8010bd0:	f04f 0c0a 	mov.w	ip, #10
 8010bd4:	4621      	mov	r1, r4
 8010bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bda:	3b30      	subs	r3, #48	@ 0x30
 8010bdc:	2b09      	cmp	r3, #9
 8010bde:	d94b      	bls.n	8010c78 <_svfiprintf_r+0x17c>
 8010be0:	b1b0      	cbz	r0, 8010c10 <_svfiprintf_r+0x114>
 8010be2:	9207      	str	r2, [sp, #28]
 8010be4:	e014      	b.n	8010c10 <_svfiprintf_r+0x114>
 8010be6:	eba0 0308 	sub.w	r3, r0, r8
 8010bea:	fa09 f303 	lsl.w	r3, r9, r3
 8010bee:	4313      	orrs	r3, r2
 8010bf0:	9304      	str	r3, [sp, #16]
 8010bf2:	46a2      	mov	sl, r4
 8010bf4:	e7d2      	b.n	8010b9c <_svfiprintf_r+0xa0>
 8010bf6:	9b03      	ldr	r3, [sp, #12]
 8010bf8:	1d19      	adds	r1, r3, #4
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	9103      	str	r1, [sp, #12]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	bfbb      	ittet	lt
 8010c02:	425b      	neglt	r3, r3
 8010c04:	f042 0202 	orrlt.w	r2, r2, #2
 8010c08:	9307      	strge	r3, [sp, #28]
 8010c0a:	9307      	strlt	r3, [sp, #28]
 8010c0c:	bfb8      	it	lt
 8010c0e:	9204      	strlt	r2, [sp, #16]
 8010c10:	7823      	ldrb	r3, [r4, #0]
 8010c12:	2b2e      	cmp	r3, #46	@ 0x2e
 8010c14:	d10a      	bne.n	8010c2c <_svfiprintf_r+0x130>
 8010c16:	7863      	ldrb	r3, [r4, #1]
 8010c18:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c1a:	d132      	bne.n	8010c82 <_svfiprintf_r+0x186>
 8010c1c:	9b03      	ldr	r3, [sp, #12]
 8010c1e:	1d1a      	adds	r2, r3, #4
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	9203      	str	r2, [sp, #12]
 8010c24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010c28:	3402      	adds	r4, #2
 8010c2a:	9305      	str	r3, [sp, #20]
 8010c2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010cf0 <_svfiprintf_r+0x1f4>
 8010c30:	7821      	ldrb	r1, [r4, #0]
 8010c32:	2203      	movs	r2, #3
 8010c34:	4650      	mov	r0, sl
 8010c36:	f7ef fae3 	bl	8000200 <memchr>
 8010c3a:	b138      	cbz	r0, 8010c4c <_svfiprintf_r+0x150>
 8010c3c:	9b04      	ldr	r3, [sp, #16]
 8010c3e:	eba0 000a 	sub.w	r0, r0, sl
 8010c42:	2240      	movs	r2, #64	@ 0x40
 8010c44:	4082      	lsls	r2, r0
 8010c46:	4313      	orrs	r3, r2
 8010c48:	3401      	adds	r4, #1
 8010c4a:	9304      	str	r3, [sp, #16]
 8010c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c50:	4824      	ldr	r0, [pc, #144]	@ (8010ce4 <_svfiprintf_r+0x1e8>)
 8010c52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010c56:	2206      	movs	r2, #6
 8010c58:	f7ef fad2 	bl	8000200 <memchr>
 8010c5c:	2800      	cmp	r0, #0
 8010c5e:	d036      	beq.n	8010cce <_svfiprintf_r+0x1d2>
 8010c60:	4b21      	ldr	r3, [pc, #132]	@ (8010ce8 <_svfiprintf_r+0x1ec>)
 8010c62:	bb1b      	cbnz	r3, 8010cac <_svfiprintf_r+0x1b0>
 8010c64:	9b03      	ldr	r3, [sp, #12]
 8010c66:	3307      	adds	r3, #7
 8010c68:	f023 0307 	bic.w	r3, r3, #7
 8010c6c:	3308      	adds	r3, #8
 8010c6e:	9303      	str	r3, [sp, #12]
 8010c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c72:	4433      	add	r3, r6
 8010c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c76:	e76a      	b.n	8010b4e <_svfiprintf_r+0x52>
 8010c78:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c7c:	460c      	mov	r4, r1
 8010c7e:	2001      	movs	r0, #1
 8010c80:	e7a8      	b.n	8010bd4 <_svfiprintf_r+0xd8>
 8010c82:	2300      	movs	r3, #0
 8010c84:	3401      	adds	r4, #1
 8010c86:	9305      	str	r3, [sp, #20]
 8010c88:	4619      	mov	r1, r3
 8010c8a:	f04f 0c0a 	mov.w	ip, #10
 8010c8e:	4620      	mov	r0, r4
 8010c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c94:	3a30      	subs	r2, #48	@ 0x30
 8010c96:	2a09      	cmp	r2, #9
 8010c98:	d903      	bls.n	8010ca2 <_svfiprintf_r+0x1a6>
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d0c6      	beq.n	8010c2c <_svfiprintf_r+0x130>
 8010c9e:	9105      	str	r1, [sp, #20]
 8010ca0:	e7c4      	b.n	8010c2c <_svfiprintf_r+0x130>
 8010ca2:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ca6:	4604      	mov	r4, r0
 8010ca8:	2301      	movs	r3, #1
 8010caa:	e7f0      	b.n	8010c8e <_svfiprintf_r+0x192>
 8010cac:	ab03      	add	r3, sp, #12
 8010cae:	9300      	str	r3, [sp, #0]
 8010cb0:	462a      	mov	r2, r5
 8010cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8010cec <_svfiprintf_r+0x1f0>)
 8010cb4:	a904      	add	r1, sp, #16
 8010cb6:	4638      	mov	r0, r7
 8010cb8:	f3af 8000 	nop.w
 8010cbc:	1c42      	adds	r2, r0, #1
 8010cbe:	4606      	mov	r6, r0
 8010cc0:	d1d6      	bne.n	8010c70 <_svfiprintf_r+0x174>
 8010cc2:	89ab      	ldrh	r3, [r5, #12]
 8010cc4:	065b      	lsls	r3, r3, #25
 8010cc6:	f53f af2d 	bmi.w	8010b24 <_svfiprintf_r+0x28>
 8010cca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ccc:	e72c      	b.n	8010b28 <_svfiprintf_r+0x2c>
 8010cce:	ab03      	add	r3, sp, #12
 8010cd0:	9300      	str	r3, [sp, #0]
 8010cd2:	462a      	mov	r2, r5
 8010cd4:	4b05      	ldr	r3, [pc, #20]	@ (8010cec <_svfiprintf_r+0x1f0>)
 8010cd6:	a904      	add	r1, sp, #16
 8010cd8:	4638      	mov	r0, r7
 8010cda:	f000 fa49 	bl	8011170 <_printf_i>
 8010cde:	e7ed      	b.n	8010cbc <_svfiprintf_r+0x1c0>
 8010ce0:	08012fd2 	.word	0x08012fd2
 8010ce4:	08012fdc 	.word	0x08012fdc
 8010ce8:	00000000 	.word	0x00000000
 8010cec:	08010a45 	.word	0x08010a45
 8010cf0:	08012fd8 	.word	0x08012fd8

08010cf4 <_sungetc_r>:
 8010cf4:	b538      	push	{r3, r4, r5, lr}
 8010cf6:	1c4b      	adds	r3, r1, #1
 8010cf8:	4614      	mov	r4, r2
 8010cfa:	d103      	bne.n	8010d04 <_sungetc_r+0x10>
 8010cfc:	f04f 35ff 	mov.w	r5, #4294967295
 8010d00:	4628      	mov	r0, r5
 8010d02:	bd38      	pop	{r3, r4, r5, pc}
 8010d04:	8993      	ldrh	r3, [r2, #12]
 8010d06:	f023 0320 	bic.w	r3, r3, #32
 8010d0a:	8193      	strh	r3, [r2, #12]
 8010d0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010d0e:	6852      	ldr	r2, [r2, #4]
 8010d10:	b2cd      	uxtb	r5, r1
 8010d12:	b18b      	cbz	r3, 8010d38 <_sungetc_r+0x44>
 8010d14:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010d16:	4293      	cmp	r3, r2
 8010d18:	dd08      	ble.n	8010d2c <_sungetc_r+0x38>
 8010d1a:	6823      	ldr	r3, [r4, #0]
 8010d1c:	1e5a      	subs	r2, r3, #1
 8010d1e:	6022      	str	r2, [r4, #0]
 8010d20:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010d24:	6863      	ldr	r3, [r4, #4]
 8010d26:	3301      	adds	r3, #1
 8010d28:	6063      	str	r3, [r4, #4]
 8010d2a:	e7e9      	b.n	8010d00 <_sungetc_r+0xc>
 8010d2c:	4621      	mov	r1, r4
 8010d2e:	f000 fd82 	bl	8011836 <__submore>
 8010d32:	2800      	cmp	r0, #0
 8010d34:	d0f1      	beq.n	8010d1a <_sungetc_r+0x26>
 8010d36:	e7e1      	b.n	8010cfc <_sungetc_r+0x8>
 8010d38:	6921      	ldr	r1, [r4, #16]
 8010d3a:	6823      	ldr	r3, [r4, #0]
 8010d3c:	b151      	cbz	r1, 8010d54 <_sungetc_r+0x60>
 8010d3e:	4299      	cmp	r1, r3
 8010d40:	d208      	bcs.n	8010d54 <_sungetc_r+0x60>
 8010d42:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010d46:	42a9      	cmp	r1, r5
 8010d48:	d104      	bne.n	8010d54 <_sungetc_r+0x60>
 8010d4a:	3b01      	subs	r3, #1
 8010d4c:	3201      	adds	r2, #1
 8010d4e:	6023      	str	r3, [r4, #0]
 8010d50:	6062      	str	r2, [r4, #4]
 8010d52:	e7d5      	b.n	8010d00 <_sungetc_r+0xc>
 8010d54:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8010d58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d5e:	2303      	movs	r3, #3
 8010d60:	63a3      	str	r3, [r4, #56]	@ 0x38
 8010d62:	4623      	mov	r3, r4
 8010d64:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010d68:	6023      	str	r3, [r4, #0]
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	e7dc      	b.n	8010d28 <_sungetc_r+0x34>

08010d6e <__ssrefill_r>:
 8010d6e:	b510      	push	{r4, lr}
 8010d70:	460c      	mov	r4, r1
 8010d72:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8010d74:	b169      	cbz	r1, 8010d92 <__ssrefill_r+0x24>
 8010d76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d7a:	4299      	cmp	r1, r3
 8010d7c:	d001      	beq.n	8010d82 <__ssrefill_r+0x14>
 8010d7e:	f7ff fd61 	bl	8010844 <_free_r>
 8010d82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010d84:	6063      	str	r3, [r4, #4]
 8010d86:	2000      	movs	r0, #0
 8010d88:	6360      	str	r0, [r4, #52]	@ 0x34
 8010d8a:	b113      	cbz	r3, 8010d92 <__ssrefill_r+0x24>
 8010d8c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010d8e:	6023      	str	r3, [r4, #0]
 8010d90:	bd10      	pop	{r4, pc}
 8010d92:	6923      	ldr	r3, [r4, #16]
 8010d94:	6023      	str	r3, [r4, #0]
 8010d96:	2300      	movs	r3, #0
 8010d98:	6063      	str	r3, [r4, #4]
 8010d9a:	89a3      	ldrh	r3, [r4, #12]
 8010d9c:	f043 0320 	orr.w	r3, r3, #32
 8010da0:	81a3      	strh	r3, [r4, #12]
 8010da2:	f04f 30ff 	mov.w	r0, #4294967295
 8010da6:	e7f3      	b.n	8010d90 <__ssrefill_r+0x22>

08010da8 <__ssvfiscanf_r>:
 8010da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dac:	460c      	mov	r4, r1
 8010dae:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8010db2:	2100      	movs	r1, #0
 8010db4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8010db8:	49a6      	ldr	r1, [pc, #664]	@ (8011054 <__ssvfiscanf_r+0x2ac>)
 8010dba:	91a0      	str	r1, [sp, #640]	@ 0x280
 8010dbc:	f10d 0804 	add.w	r8, sp, #4
 8010dc0:	49a5      	ldr	r1, [pc, #660]	@ (8011058 <__ssvfiscanf_r+0x2b0>)
 8010dc2:	4fa6      	ldr	r7, [pc, #664]	@ (801105c <__ssvfiscanf_r+0x2b4>)
 8010dc4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8010dc8:	4606      	mov	r6, r0
 8010dca:	91a1      	str	r1, [sp, #644]	@ 0x284
 8010dcc:	9300      	str	r3, [sp, #0]
 8010dce:	f892 9000 	ldrb.w	r9, [r2]
 8010dd2:	f1b9 0f00 	cmp.w	r9, #0
 8010dd6:	f000 8158 	beq.w	801108a <__ssvfiscanf_r+0x2e2>
 8010dda:	f817 3009 	ldrb.w	r3, [r7, r9]
 8010dde:	f013 0308 	ands.w	r3, r3, #8
 8010de2:	f102 0501 	add.w	r5, r2, #1
 8010de6:	d019      	beq.n	8010e1c <__ssvfiscanf_r+0x74>
 8010de8:	6863      	ldr	r3, [r4, #4]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	dd0f      	ble.n	8010e0e <__ssvfiscanf_r+0x66>
 8010dee:	6823      	ldr	r3, [r4, #0]
 8010df0:	781a      	ldrb	r2, [r3, #0]
 8010df2:	5cba      	ldrb	r2, [r7, r2]
 8010df4:	0712      	lsls	r2, r2, #28
 8010df6:	d401      	bmi.n	8010dfc <__ssvfiscanf_r+0x54>
 8010df8:	462a      	mov	r2, r5
 8010dfa:	e7e8      	b.n	8010dce <__ssvfiscanf_r+0x26>
 8010dfc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010dfe:	3201      	adds	r2, #1
 8010e00:	9245      	str	r2, [sp, #276]	@ 0x114
 8010e02:	6862      	ldr	r2, [r4, #4]
 8010e04:	3301      	adds	r3, #1
 8010e06:	3a01      	subs	r2, #1
 8010e08:	6062      	str	r2, [r4, #4]
 8010e0a:	6023      	str	r3, [r4, #0]
 8010e0c:	e7ec      	b.n	8010de8 <__ssvfiscanf_r+0x40>
 8010e0e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010e10:	4621      	mov	r1, r4
 8010e12:	4630      	mov	r0, r6
 8010e14:	4798      	blx	r3
 8010e16:	2800      	cmp	r0, #0
 8010e18:	d0e9      	beq.n	8010dee <__ssvfiscanf_r+0x46>
 8010e1a:	e7ed      	b.n	8010df8 <__ssvfiscanf_r+0x50>
 8010e1c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8010e20:	f040 8085 	bne.w	8010f2e <__ssvfiscanf_r+0x186>
 8010e24:	9341      	str	r3, [sp, #260]	@ 0x104
 8010e26:	9343      	str	r3, [sp, #268]	@ 0x10c
 8010e28:	7853      	ldrb	r3, [r2, #1]
 8010e2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e2c:	bf02      	ittt	eq
 8010e2e:	2310      	moveq	r3, #16
 8010e30:	1c95      	addeq	r5, r2, #2
 8010e32:	9341      	streq	r3, [sp, #260]	@ 0x104
 8010e34:	220a      	movs	r2, #10
 8010e36:	46aa      	mov	sl, r5
 8010e38:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010e3c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8010e40:	2b09      	cmp	r3, #9
 8010e42:	d91e      	bls.n	8010e82 <__ssvfiscanf_r+0xda>
 8010e44:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8011060 <__ssvfiscanf_r+0x2b8>
 8010e48:	2203      	movs	r2, #3
 8010e4a:	4658      	mov	r0, fp
 8010e4c:	f7ef f9d8 	bl	8000200 <memchr>
 8010e50:	b138      	cbz	r0, 8010e62 <__ssvfiscanf_r+0xba>
 8010e52:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010e54:	eba0 000b 	sub.w	r0, r0, fp
 8010e58:	2301      	movs	r3, #1
 8010e5a:	4083      	lsls	r3, r0
 8010e5c:	4313      	orrs	r3, r2
 8010e5e:	9341      	str	r3, [sp, #260]	@ 0x104
 8010e60:	4655      	mov	r5, sl
 8010e62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010e66:	2b78      	cmp	r3, #120	@ 0x78
 8010e68:	d806      	bhi.n	8010e78 <__ssvfiscanf_r+0xd0>
 8010e6a:	2b57      	cmp	r3, #87	@ 0x57
 8010e6c:	d810      	bhi.n	8010e90 <__ssvfiscanf_r+0xe8>
 8010e6e:	2b25      	cmp	r3, #37	@ 0x25
 8010e70:	d05d      	beq.n	8010f2e <__ssvfiscanf_r+0x186>
 8010e72:	d857      	bhi.n	8010f24 <__ssvfiscanf_r+0x17c>
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d075      	beq.n	8010f64 <__ssvfiscanf_r+0x1bc>
 8010e78:	2303      	movs	r3, #3
 8010e7a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010e7c:	230a      	movs	r3, #10
 8010e7e:	9342      	str	r3, [sp, #264]	@ 0x108
 8010e80:	e088      	b.n	8010f94 <__ssvfiscanf_r+0x1ec>
 8010e82:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8010e84:	fb02 1103 	mla	r1, r2, r3, r1
 8010e88:	3930      	subs	r1, #48	@ 0x30
 8010e8a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010e8c:	4655      	mov	r5, sl
 8010e8e:	e7d2      	b.n	8010e36 <__ssvfiscanf_r+0x8e>
 8010e90:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8010e94:	2a20      	cmp	r2, #32
 8010e96:	d8ef      	bhi.n	8010e78 <__ssvfiscanf_r+0xd0>
 8010e98:	a101      	add	r1, pc, #4	@ (adr r1, 8010ea0 <__ssvfiscanf_r+0xf8>)
 8010e9a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010e9e:	bf00      	nop
 8010ea0:	08010f73 	.word	0x08010f73
 8010ea4:	08010e79 	.word	0x08010e79
 8010ea8:	08010e79 	.word	0x08010e79
 8010eac:	08010fcd 	.word	0x08010fcd
 8010eb0:	08010e79 	.word	0x08010e79
 8010eb4:	08010e79 	.word	0x08010e79
 8010eb8:	08010e79 	.word	0x08010e79
 8010ebc:	08010e79 	.word	0x08010e79
 8010ec0:	08010e79 	.word	0x08010e79
 8010ec4:	08010e79 	.word	0x08010e79
 8010ec8:	08010e79 	.word	0x08010e79
 8010ecc:	08010fe3 	.word	0x08010fe3
 8010ed0:	08010fc9 	.word	0x08010fc9
 8010ed4:	08010f2b 	.word	0x08010f2b
 8010ed8:	08010f2b 	.word	0x08010f2b
 8010edc:	08010f2b 	.word	0x08010f2b
 8010ee0:	08010e79 	.word	0x08010e79
 8010ee4:	08010f85 	.word	0x08010f85
 8010ee8:	08010e79 	.word	0x08010e79
 8010eec:	08010e79 	.word	0x08010e79
 8010ef0:	08010e79 	.word	0x08010e79
 8010ef4:	08010e79 	.word	0x08010e79
 8010ef8:	08010ff3 	.word	0x08010ff3
 8010efc:	08010f8d 	.word	0x08010f8d
 8010f00:	08010f6b 	.word	0x08010f6b
 8010f04:	08010e79 	.word	0x08010e79
 8010f08:	08010e79 	.word	0x08010e79
 8010f0c:	08010fef 	.word	0x08010fef
 8010f10:	08010e79 	.word	0x08010e79
 8010f14:	08010fc9 	.word	0x08010fc9
 8010f18:	08010e79 	.word	0x08010e79
 8010f1c:	08010e79 	.word	0x08010e79
 8010f20:	08010f73 	.word	0x08010f73
 8010f24:	3b45      	subs	r3, #69	@ 0x45
 8010f26:	2b02      	cmp	r3, #2
 8010f28:	d8a6      	bhi.n	8010e78 <__ssvfiscanf_r+0xd0>
 8010f2a:	2305      	movs	r3, #5
 8010f2c:	e031      	b.n	8010f92 <__ssvfiscanf_r+0x1ea>
 8010f2e:	6863      	ldr	r3, [r4, #4]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	dd0d      	ble.n	8010f50 <__ssvfiscanf_r+0x1a8>
 8010f34:	6823      	ldr	r3, [r4, #0]
 8010f36:	781a      	ldrb	r2, [r3, #0]
 8010f38:	454a      	cmp	r2, r9
 8010f3a:	f040 80a6 	bne.w	801108a <__ssvfiscanf_r+0x2e2>
 8010f3e:	3301      	adds	r3, #1
 8010f40:	6862      	ldr	r2, [r4, #4]
 8010f42:	6023      	str	r3, [r4, #0]
 8010f44:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8010f46:	3a01      	subs	r2, #1
 8010f48:	3301      	adds	r3, #1
 8010f4a:	6062      	str	r2, [r4, #4]
 8010f4c:	9345      	str	r3, [sp, #276]	@ 0x114
 8010f4e:	e753      	b.n	8010df8 <__ssvfiscanf_r+0x50>
 8010f50:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010f52:	4621      	mov	r1, r4
 8010f54:	4630      	mov	r0, r6
 8010f56:	4798      	blx	r3
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	d0eb      	beq.n	8010f34 <__ssvfiscanf_r+0x18c>
 8010f5c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010f5e:	2800      	cmp	r0, #0
 8010f60:	f040 808b 	bne.w	801107a <__ssvfiscanf_r+0x2d2>
 8010f64:	f04f 30ff 	mov.w	r0, #4294967295
 8010f68:	e08b      	b.n	8011082 <__ssvfiscanf_r+0x2da>
 8010f6a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010f6c:	f042 0220 	orr.w	r2, r2, #32
 8010f70:	9241      	str	r2, [sp, #260]	@ 0x104
 8010f72:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010f74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010f78:	9241      	str	r2, [sp, #260]	@ 0x104
 8010f7a:	2210      	movs	r2, #16
 8010f7c:	2b6e      	cmp	r3, #110	@ 0x6e
 8010f7e:	9242      	str	r2, [sp, #264]	@ 0x108
 8010f80:	d902      	bls.n	8010f88 <__ssvfiscanf_r+0x1e0>
 8010f82:	e005      	b.n	8010f90 <__ssvfiscanf_r+0x1e8>
 8010f84:	2300      	movs	r3, #0
 8010f86:	9342      	str	r3, [sp, #264]	@ 0x108
 8010f88:	2303      	movs	r3, #3
 8010f8a:	e002      	b.n	8010f92 <__ssvfiscanf_r+0x1ea>
 8010f8c:	2308      	movs	r3, #8
 8010f8e:	9342      	str	r3, [sp, #264]	@ 0x108
 8010f90:	2304      	movs	r3, #4
 8010f92:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010f94:	6863      	ldr	r3, [r4, #4]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	dd39      	ble.n	801100e <__ssvfiscanf_r+0x266>
 8010f9a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010f9c:	0659      	lsls	r1, r3, #25
 8010f9e:	d404      	bmi.n	8010faa <__ssvfiscanf_r+0x202>
 8010fa0:	6823      	ldr	r3, [r4, #0]
 8010fa2:	781a      	ldrb	r2, [r3, #0]
 8010fa4:	5cba      	ldrb	r2, [r7, r2]
 8010fa6:	0712      	lsls	r2, r2, #28
 8010fa8:	d438      	bmi.n	801101c <__ssvfiscanf_r+0x274>
 8010faa:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8010fac:	2b02      	cmp	r3, #2
 8010fae:	dc47      	bgt.n	8011040 <__ssvfiscanf_r+0x298>
 8010fb0:	466b      	mov	r3, sp
 8010fb2:	4622      	mov	r2, r4
 8010fb4:	a941      	add	r1, sp, #260	@ 0x104
 8010fb6:	4630      	mov	r0, r6
 8010fb8:	f000 f9f8 	bl	80113ac <_scanf_chars>
 8010fbc:	2801      	cmp	r0, #1
 8010fbe:	d064      	beq.n	801108a <__ssvfiscanf_r+0x2e2>
 8010fc0:	2802      	cmp	r0, #2
 8010fc2:	f47f af19 	bne.w	8010df8 <__ssvfiscanf_r+0x50>
 8010fc6:	e7c9      	b.n	8010f5c <__ssvfiscanf_r+0x1b4>
 8010fc8:	220a      	movs	r2, #10
 8010fca:	e7d7      	b.n	8010f7c <__ssvfiscanf_r+0x1d4>
 8010fcc:	4629      	mov	r1, r5
 8010fce:	4640      	mov	r0, r8
 8010fd0:	f000 fbf8 	bl	80117c4 <__sccl>
 8010fd4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010fd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fda:	9341      	str	r3, [sp, #260]	@ 0x104
 8010fdc:	4605      	mov	r5, r0
 8010fde:	2301      	movs	r3, #1
 8010fe0:	e7d7      	b.n	8010f92 <__ssvfiscanf_r+0x1ea>
 8010fe2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fe8:	9341      	str	r3, [sp, #260]	@ 0x104
 8010fea:	2300      	movs	r3, #0
 8010fec:	e7d1      	b.n	8010f92 <__ssvfiscanf_r+0x1ea>
 8010fee:	2302      	movs	r3, #2
 8010ff0:	e7cf      	b.n	8010f92 <__ssvfiscanf_r+0x1ea>
 8010ff2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8010ff4:	06c3      	lsls	r3, r0, #27
 8010ff6:	f53f aeff 	bmi.w	8010df8 <__ssvfiscanf_r+0x50>
 8010ffa:	9b00      	ldr	r3, [sp, #0]
 8010ffc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010ffe:	1d19      	adds	r1, r3, #4
 8011000:	9100      	str	r1, [sp, #0]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	07c0      	lsls	r0, r0, #31
 8011006:	bf4c      	ite	mi
 8011008:	801a      	strhmi	r2, [r3, #0]
 801100a:	601a      	strpl	r2, [r3, #0]
 801100c:	e6f4      	b.n	8010df8 <__ssvfiscanf_r+0x50>
 801100e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011010:	4621      	mov	r1, r4
 8011012:	4630      	mov	r0, r6
 8011014:	4798      	blx	r3
 8011016:	2800      	cmp	r0, #0
 8011018:	d0bf      	beq.n	8010f9a <__ssvfiscanf_r+0x1f2>
 801101a:	e79f      	b.n	8010f5c <__ssvfiscanf_r+0x1b4>
 801101c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801101e:	3201      	adds	r2, #1
 8011020:	9245      	str	r2, [sp, #276]	@ 0x114
 8011022:	6862      	ldr	r2, [r4, #4]
 8011024:	3a01      	subs	r2, #1
 8011026:	2a00      	cmp	r2, #0
 8011028:	6062      	str	r2, [r4, #4]
 801102a:	dd02      	ble.n	8011032 <__ssvfiscanf_r+0x28a>
 801102c:	3301      	adds	r3, #1
 801102e:	6023      	str	r3, [r4, #0]
 8011030:	e7b6      	b.n	8010fa0 <__ssvfiscanf_r+0x1f8>
 8011032:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011034:	4621      	mov	r1, r4
 8011036:	4630      	mov	r0, r6
 8011038:	4798      	blx	r3
 801103a:	2800      	cmp	r0, #0
 801103c:	d0b0      	beq.n	8010fa0 <__ssvfiscanf_r+0x1f8>
 801103e:	e78d      	b.n	8010f5c <__ssvfiscanf_r+0x1b4>
 8011040:	2b04      	cmp	r3, #4
 8011042:	dc0f      	bgt.n	8011064 <__ssvfiscanf_r+0x2bc>
 8011044:	466b      	mov	r3, sp
 8011046:	4622      	mov	r2, r4
 8011048:	a941      	add	r1, sp, #260	@ 0x104
 801104a:	4630      	mov	r0, r6
 801104c:	f000 fa08 	bl	8011460 <_scanf_i>
 8011050:	e7b4      	b.n	8010fbc <__ssvfiscanf_r+0x214>
 8011052:	bf00      	nop
 8011054:	08010cf5 	.word	0x08010cf5
 8011058:	08010d6f 	.word	0x08010d6f
 801105c:	08012e25 	.word	0x08012e25
 8011060:	08012fd8 	.word	0x08012fd8
 8011064:	4b0a      	ldr	r3, [pc, #40]	@ (8011090 <__ssvfiscanf_r+0x2e8>)
 8011066:	2b00      	cmp	r3, #0
 8011068:	f43f aec6 	beq.w	8010df8 <__ssvfiscanf_r+0x50>
 801106c:	466b      	mov	r3, sp
 801106e:	4622      	mov	r2, r4
 8011070:	a941      	add	r1, sp, #260	@ 0x104
 8011072:	4630      	mov	r0, r6
 8011074:	f3af 8000 	nop.w
 8011078:	e7a0      	b.n	8010fbc <__ssvfiscanf_r+0x214>
 801107a:	89a3      	ldrh	r3, [r4, #12]
 801107c:	065b      	lsls	r3, r3, #25
 801107e:	f53f af71 	bmi.w	8010f64 <__ssvfiscanf_r+0x1bc>
 8011082:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8011086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801108a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801108c:	e7f9      	b.n	8011082 <__ssvfiscanf_r+0x2da>
 801108e:	bf00      	nop
 8011090:	00000000 	.word	0x00000000

08011094 <_printf_common>:
 8011094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011098:	4616      	mov	r6, r2
 801109a:	4698      	mov	r8, r3
 801109c:	688a      	ldr	r2, [r1, #8]
 801109e:	690b      	ldr	r3, [r1, #16]
 80110a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80110a4:	4293      	cmp	r3, r2
 80110a6:	bfb8      	it	lt
 80110a8:	4613      	movlt	r3, r2
 80110aa:	6033      	str	r3, [r6, #0]
 80110ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80110b0:	4607      	mov	r7, r0
 80110b2:	460c      	mov	r4, r1
 80110b4:	b10a      	cbz	r2, 80110ba <_printf_common+0x26>
 80110b6:	3301      	adds	r3, #1
 80110b8:	6033      	str	r3, [r6, #0]
 80110ba:	6823      	ldr	r3, [r4, #0]
 80110bc:	0699      	lsls	r1, r3, #26
 80110be:	bf42      	ittt	mi
 80110c0:	6833      	ldrmi	r3, [r6, #0]
 80110c2:	3302      	addmi	r3, #2
 80110c4:	6033      	strmi	r3, [r6, #0]
 80110c6:	6825      	ldr	r5, [r4, #0]
 80110c8:	f015 0506 	ands.w	r5, r5, #6
 80110cc:	d106      	bne.n	80110dc <_printf_common+0x48>
 80110ce:	f104 0a19 	add.w	sl, r4, #25
 80110d2:	68e3      	ldr	r3, [r4, #12]
 80110d4:	6832      	ldr	r2, [r6, #0]
 80110d6:	1a9b      	subs	r3, r3, r2
 80110d8:	42ab      	cmp	r3, r5
 80110da:	dc26      	bgt.n	801112a <_printf_common+0x96>
 80110dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80110e0:	6822      	ldr	r2, [r4, #0]
 80110e2:	3b00      	subs	r3, #0
 80110e4:	bf18      	it	ne
 80110e6:	2301      	movne	r3, #1
 80110e8:	0692      	lsls	r2, r2, #26
 80110ea:	d42b      	bmi.n	8011144 <_printf_common+0xb0>
 80110ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80110f0:	4641      	mov	r1, r8
 80110f2:	4638      	mov	r0, r7
 80110f4:	47c8      	blx	r9
 80110f6:	3001      	adds	r0, #1
 80110f8:	d01e      	beq.n	8011138 <_printf_common+0xa4>
 80110fa:	6823      	ldr	r3, [r4, #0]
 80110fc:	6922      	ldr	r2, [r4, #16]
 80110fe:	f003 0306 	and.w	r3, r3, #6
 8011102:	2b04      	cmp	r3, #4
 8011104:	bf02      	ittt	eq
 8011106:	68e5      	ldreq	r5, [r4, #12]
 8011108:	6833      	ldreq	r3, [r6, #0]
 801110a:	1aed      	subeq	r5, r5, r3
 801110c:	68a3      	ldr	r3, [r4, #8]
 801110e:	bf0c      	ite	eq
 8011110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011114:	2500      	movne	r5, #0
 8011116:	4293      	cmp	r3, r2
 8011118:	bfc4      	itt	gt
 801111a:	1a9b      	subgt	r3, r3, r2
 801111c:	18ed      	addgt	r5, r5, r3
 801111e:	2600      	movs	r6, #0
 8011120:	341a      	adds	r4, #26
 8011122:	42b5      	cmp	r5, r6
 8011124:	d11a      	bne.n	801115c <_printf_common+0xc8>
 8011126:	2000      	movs	r0, #0
 8011128:	e008      	b.n	801113c <_printf_common+0xa8>
 801112a:	2301      	movs	r3, #1
 801112c:	4652      	mov	r2, sl
 801112e:	4641      	mov	r1, r8
 8011130:	4638      	mov	r0, r7
 8011132:	47c8      	blx	r9
 8011134:	3001      	adds	r0, #1
 8011136:	d103      	bne.n	8011140 <_printf_common+0xac>
 8011138:	f04f 30ff 	mov.w	r0, #4294967295
 801113c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011140:	3501      	adds	r5, #1
 8011142:	e7c6      	b.n	80110d2 <_printf_common+0x3e>
 8011144:	18e1      	adds	r1, r4, r3
 8011146:	1c5a      	adds	r2, r3, #1
 8011148:	2030      	movs	r0, #48	@ 0x30
 801114a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801114e:	4422      	add	r2, r4
 8011150:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011154:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011158:	3302      	adds	r3, #2
 801115a:	e7c7      	b.n	80110ec <_printf_common+0x58>
 801115c:	2301      	movs	r3, #1
 801115e:	4622      	mov	r2, r4
 8011160:	4641      	mov	r1, r8
 8011162:	4638      	mov	r0, r7
 8011164:	47c8      	blx	r9
 8011166:	3001      	adds	r0, #1
 8011168:	d0e6      	beq.n	8011138 <_printf_common+0xa4>
 801116a:	3601      	adds	r6, #1
 801116c:	e7d9      	b.n	8011122 <_printf_common+0x8e>
	...

08011170 <_printf_i>:
 8011170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011174:	7e0f      	ldrb	r7, [r1, #24]
 8011176:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011178:	2f78      	cmp	r7, #120	@ 0x78
 801117a:	4691      	mov	r9, r2
 801117c:	4680      	mov	r8, r0
 801117e:	460c      	mov	r4, r1
 8011180:	469a      	mov	sl, r3
 8011182:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011186:	d807      	bhi.n	8011198 <_printf_i+0x28>
 8011188:	2f62      	cmp	r7, #98	@ 0x62
 801118a:	d80a      	bhi.n	80111a2 <_printf_i+0x32>
 801118c:	2f00      	cmp	r7, #0
 801118e:	f000 80d1 	beq.w	8011334 <_printf_i+0x1c4>
 8011192:	2f58      	cmp	r7, #88	@ 0x58
 8011194:	f000 80b8 	beq.w	8011308 <_printf_i+0x198>
 8011198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801119c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80111a0:	e03a      	b.n	8011218 <_printf_i+0xa8>
 80111a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80111a6:	2b15      	cmp	r3, #21
 80111a8:	d8f6      	bhi.n	8011198 <_printf_i+0x28>
 80111aa:	a101      	add	r1, pc, #4	@ (adr r1, 80111b0 <_printf_i+0x40>)
 80111ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80111b0:	08011209 	.word	0x08011209
 80111b4:	0801121d 	.word	0x0801121d
 80111b8:	08011199 	.word	0x08011199
 80111bc:	08011199 	.word	0x08011199
 80111c0:	08011199 	.word	0x08011199
 80111c4:	08011199 	.word	0x08011199
 80111c8:	0801121d 	.word	0x0801121d
 80111cc:	08011199 	.word	0x08011199
 80111d0:	08011199 	.word	0x08011199
 80111d4:	08011199 	.word	0x08011199
 80111d8:	08011199 	.word	0x08011199
 80111dc:	0801131b 	.word	0x0801131b
 80111e0:	08011247 	.word	0x08011247
 80111e4:	080112d5 	.word	0x080112d5
 80111e8:	08011199 	.word	0x08011199
 80111ec:	08011199 	.word	0x08011199
 80111f0:	0801133d 	.word	0x0801133d
 80111f4:	08011199 	.word	0x08011199
 80111f8:	08011247 	.word	0x08011247
 80111fc:	08011199 	.word	0x08011199
 8011200:	08011199 	.word	0x08011199
 8011204:	080112dd 	.word	0x080112dd
 8011208:	6833      	ldr	r3, [r6, #0]
 801120a:	1d1a      	adds	r2, r3, #4
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	6032      	str	r2, [r6, #0]
 8011210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011214:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011218:	2301      	movs	r3, #1
 801121a:	e09c      	b.n	8011356 <_printf_i+0x1e6>
 801121c:	6833      	ldr	r3, [r6, #0]
 801121e:	6820      	ldr	r0, [r4, #0]
 8011220:	1d19      	adds	r1, r3, #4
 8011222:	6031      	str	r1, [r6, #0]
 8011224:	0606      	lsls	r6, r0, #24
 8011226:	d501      	bpl.n	801122c <_printf_i+0xbc>
 8011228:	681d      	ldr	r5, [r3, #0]
 801122a:	e003      	b.n	8011234 <_printf_i+0xc4>
 801122c:	0645      	lsls	r5, r0, #25
 801122e:	d5fb      	bpl.n	8011228 <_printf_i+0xb8>
 8011230:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011234:	2d00      	cmp	r5, #0
 8011236:	da03      	bge.n	8011240 <_printf_i+0xd0>
 8011238:	232d      	movs	r3, #45	@ 0x2d
 801123a:	426d      	negs	r5, r5
 801123c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011240:	4858      	ldr	r0, [pc, #352]	@ (80113a4 <_printf_i+0x234>)
 8011242:	230a      	movs	r3, #10
 8011244:	e011      	b.n	801126a <_printf_i+0xfa>
 8011246:	6821      	ldr	r1, [r4, #0]
 8011248:	6833      	ldr	r3, [r6, #0]
 801124a:	0608      	lsls	r0, r1, #24
 801124c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011250:	d402      	bmi.n	8011258 <_printf_i+0xe8>
 8011252:	0649      	lsls	r1, r1, #25
 8011254:	bf48      	it	mi
 8011256:	b2ad      	uxthmi	r5, r5
 8011258:	2f6f      	cmp	r7, #111	@ 0x6f
 801125a:	4852      	ldr	r0, [pc, #328]	@ (80113a4 <_printf_i+0x234>)
 801125c:	6033      	str	r3, [r6, #0]
 801125e:	bf14      	ite	ne
 8011260:	230a      	movne	r3, #10
 8011262:	2308      	moveq	r3, #8
 8011264:	2100      	movs	r1, #0
 8011266:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801126a:	6866      	ldr	r6, [r4, #4]
 801126c:	60a6      	str	r6, [r4, #8]
 801126e:	2e00      	cmp	r6, #0
 8011270:	db05      	blt.n	801127e <_printf_i+0x10e>
 8011272:	6821      	ldr	r1, [r4, #0]
 8011274:	432e      	orrs	r6, r5
 8011276:	f021 0104 	bic.w	r1, r1, #4
 801127a:	6021      	str	r1, [r4, #0]
 801127c:	d04b      	beq.n	8011316 <_printf_i+0x1a6>
 801127e:	4616      	mov	r6, r2
 8011280:	fbb5 f1f3 	udiv	r1, r5, r3
 8011284:	fb03 5711 	mls	r7, r3, r1, r5
 8011288:	5dc7      	ldrb	r7, [r0, r7]
 801128a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801128e:	462f      	mov	r7, r5
 8011290:	42bb      	cmp	r3, r7
 8011292:	460d      	mov	r5, r1
 8011294:	d9f4      	bls.n	8011280 <_printf_i+0x110>
 8011296:	2b08      	cmp	r3, #8
 8011298:	d10b      	bne.n	80112b2 <_printf_i+0x142>
 801129a:	6823      	ldr	r3, [r4, #0]
 801129c:	07df      	lsls	r7, r3, #31
 801129e:	d508      	bpl.n	80112b2 <_printf_i+0x142>
 80112a0:	6923      	ldr	r3, [r4, #16]
 80112a2:	6861      	ldr	r1, [r4, #4]
 80112a4:	4299      	cmp	r1, r3
 80112a6:	bfde      	ittt	le
 80112a8:	2330      	movle	r3, #48	@ 0x30
 80112aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80112ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80112b2:	1b92      	subs	r2, r2, r6
 80112b4:	6122      	str	r2, [r4, #16]
 80112b6:	f8cd a000 	str.w	sl, [sp]
 80112ba:	464b      	mov	r3, r9
 80112bc:	aa03      	add	r2, sp, #12
 80112be:	4621      	mov	r1, r4
 80112c0:	4640      	mov	r0, r8
 80112c2:	f7ff fee7 	bl	8011094 <_printf_common>
 80112c6:	3001      	adds	r0, #1
 80112c8:	d14a      	bne.n	8011360 <_printf_i+0x1f0>
 80112ca:	f04f 30ff 	mov.w	r0, #4294967295
 80112ce:	b004      	add	sp, #16
 80112d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112d4:	6823      	ldr	r3, [r4, #0]
 80112d6:	f043 0320 	orr.w	r3, r3, #32
 80112da:	6023      	str	r3, [r4, #0]
 80112dc:	4832      	ldr	r0, [pc, #200]	@ (80113a8 <_printf_i+0x238>)
 80112de:	2778      	movs	r7, #120	@ 0x78
 80112e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80112e4:	6823      	ldr	r3, [r4, #0]
 80112e6:	6831      	ldr	r1, [r6, #0]
 80112e8:	061f      	lsls	r7, r3, #24
 80112ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80112ee:	d402      	bmi.n	80112f6 <_printf_i+0x186>
 80112f0:	065f      	lsls	r7, r3, #25
 80112f2:	bf48      	it	mi
 80112f4:	b2ad      	uxthmi	r5, r5
 80112f6:	6031      	str	r1, [r6, #0]
 80112f8:	07d9      	lsls	r1, r3, #31
 80112fa:	bf44      	itt	mi
 80112fc:	f043 0320 	orrmi.w	r3, r3, #32
 8011300:	6023      	strmi	r3, [r4, #0]
 8011302:	b11d      	cbz	r5, 801130c <_printf_i+0x19c>
 8011304:	2310      	movs	r3, #16
 8011306:	e7ad      	b.n	8011264 <_printf_i+0xf4>
 8011308:	4826      	ldr	r0, [pc, #152]	@ (80113a4 <_printf_i+0x234>)
 801130a:	e7e9      	b.n	80112e0 <_printf_i+0x170>
 801130c:	6823      	ldr	r3, [r4, #0]
 801130e:	f023 0320 	bic.w	r3, r3, #32
 8011312:	6023      	str	r3, [r4, #0]
 8011314:	e7f6      	b.n	8011304 <_printf_i+0x194>
 8011316:	4616      	mov	r6, r2
 8011318:	e7bd      	b.n	8011296 <_printf_i+0x126>
 801131a:	6833      	ldr	r3, [r6, #0]
 801131c:	6825      	ldr	r5, [r4, #0]
 801131e:	6961      	ldr	r1, [r4, #20]
 8011320:	1d18      	adds	r0, r3, #4
 8011322:	6030      	str	r0, [r6, #0]
 8011324:	062e      	lsls	r6, r5, #24
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	d501      	bpl.n	801132e <_printf_i+0x1be>
 801132a:	6019      	str	r1, [r3, #0]
 801132c:	e002      	b.n	8011334 <_printf_i+0x1c4>
 801132e:	0668      	lsls	r0, r5, #25
 8011330:	d5fb      	bpl.n	801132a <_printf_i+0x1ba>
 8011332:	8019      	strh	r1, [r3, #0]
 8011334:	2300      	movs	r3, #0
 8011336:	6123      	str	r3, [r4, #16]
 8011338:	4616      	mov	r6, r2
 801133a:	e7bc      	b.n	80112b6 <_printf_i+0x146>
 801133c:	6833      	ldr	r3, [r6, #0]
 801133e:	1d1a      	adds	r2, r3, #4
 8011340:	6032      	str	r2, [r6, #0]
 8011342:	681e      	ldr	r6, [r3, #0]
 8011344:	6862      	ldr	r2, [r4, #4]
 8011346:	2100      	movs	r1, #0
 8011348:	4630      	mov	r0, r6
 801134a:	f7ee ff59 	bl	8000200 <memchr>
 801134e:	b108      	cbz	r0, 8011354 <_printf_i+0x1e4>
 8011350:	1b80      	subs	r0, r0, r6
 8011352:	6060      	str	r0, [r4, #4]
 8011354:	6863      	ldr	r3, [r4, #4]
 8011356:	6123      	str	r3, [r4, #16]
 8011358:	2300      	movs	r3, #0
 801135a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801135e:	e7aa      	b.n	80112b6 <_printf_i+0x146>
 8011360:	6923      	ldr	r3, [r4, #16]
 8011362:	4632      	mov	r2, r6
 8011364:	4649      	mov	r1, r9
 8011366:	4640      	mov	r0, r8
 8011368:	47d0      	blx	sl
 801136a:	3001      	adds	r0, #1
 801136c:	d0ad      	beq.n	80112ca <_printf_i+0x15a>
 801136e:	6823      	ldr	r3, [r4, #0]
 8011370:	079b      	lsls	r3, r3, #30
 8011372:	d413      	bmi.n	801139c <_printf_i+0x22c>
 8011374:	68e0      	ldr	r0, [r4, #12]
 8011376:	9b03      	ldr	r3, [sp, #12]
 8011378:	4298      	cmp	r0, r3
 801137a:	bfb8      	it	lt
 801137c:	4618      	movlt	r0, r3
 801137e:	e7a6      	b.n	80112ce <_printf_i+0x15e>
 8011380:	2301      	movs	r3, #1
 8011382:	4632      	mov	r2, r6
 8011384:	4649      	mov	r1, r9
 8011386:	4640      	mov	r0, r8
 8011388:	47d0      	blx	sl
 801138a:	3001      	adds	r0, #1
 801138c:	d09d      	beq.n	80112ca <_printf_i+0x15a>
 801138e:	3501      	adds	r5, #1
 8011390:	68e3      	ldr	r3, [r4, #12]
 8011392:	9903      	ldr	r1, [sp, #12]
 8011394:	1a5b      	subs	r3, r3, r1
 8011396:	42ab      	cmp	r3, r5
 8011398:	dcf2      	bgt.n	8011380 <_printf_i+0x210>
 801139a:	e7eb      	b.n	8011374 <_printf_i+0x204>
 801139c:	2500      	movs	r5, #0
 801139e:	f104 0619 	add.w	r6, r4, #25
 80113a2:	e7f5      	b.n	8011390 <_printf_i+0x220>
 80113a4:	08012fe3 	.word	0x08012fe3
 80113a8:	08012ff4 	.word	0x08012ff4

080113ac <_scanf_chars>:
 80113ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113b0:	4615      	mov	r5, r2
 80113b2:	688a      	ldr	r2, [r1, #8]
 80113b4:	4680      	mov	r8, r0
 80113b6:	460c      	mov	r4, r1
 80113b8:	b932      	cbnz	r2, 80113c8 <_scanf_chars+0x1c>
 80113ba:	698a      	ldr	r2, [r1, #24]
 80113bc:	2a00      	cmp	r2, #0
 80113be:	bf14      	ite	ne
 80113c0:	f04f 32ff 	movne.w	r2, #4294967295
 80113c4:	2201      	moveq	r2, #1
 80113c6:	608a      	str	r2, [r1, #8]
 80113c8:	6822      	ldr	r2, [r4, #0]
 80113ca:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801145c <_scanf_chars+0xb0>
 80113ce:	06d1      	lsls	r1, r2, #27
 80113d0:	bf5f      	itttt	pl
 80113d2:	681a      	ldrpl	r2, [r3, #0]
 80113d4:	1d11      	addpl	r1, r2, #4
 80113d6:	6019      	strpl	r1, [r3, #0]
 80113d8:	6816      	ldrpl	r6, [r2, #0]
 80113da:	2700      	movs	r7, #0
 80113dc:	69a0      	ldr	r0, [r4, #24]
 80113de:	b188      	cbz	r0, 8011404 <_scanf_chars+0x58>
 80113e0:	2801      	cmp	r0, #1
 80113e2:	d107      	bne.n	80113f4 <_scanf_chars+0x48>
 80113e4:	682b      	ldr	r3, [r5, #0]
 80113e6:	781a      	ldrb	r2, [r3, #0]
 80113e8:	6963      	ldr	r3, [r4, #20]
 80113ea:	5c9b      	ldrb	r3, [r3, r2]
 80113ec:	b953      	cbnz	r3, 8011404 <_scanf_chars+0x58>
 80113ee:	2f00      	cmp	r7, #0
 80113f0:	d031      	beq.n	8011456 <_scanf_chars+0xaa>
 80113f2:	e022      	b.n	801143a <_scanf_chars+0x8e>
 80113f4:	2802      	cmp	r0, #2
 80113f6:	d120      	bne.n	801143a <_scanf_chars+0x8e>
 80113f8:	682b      	ldr	r3, [r5, #0]
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011400:	071b      	lsls	r3, r3, #28
 8011402:	d41a      	bmi.n	801143a <_scanf_chars+0x8e>
 8011404:	6823      	ldr	r3, [r4, #0]
 8011406:	06da      	lsls	r2, r3, #27
 8011408:	bf5e      	ittt	pl
 801140a:	682b      	ldrpl	r3, [r5, #0]
 801140c:	781b      	ldrbpl	r3, [r3, #0]
 801140e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011412:	682a      	ldr	r2, [r5, #0]
 8011414:	686b      	ldr	r3, [r5, #4]
 8011416:	3201      	adds	r2, #1
 8011418:	602a      	str	r2, [r5, #0]
 801141a:	68a2      	ldr	r2, [r4, #8]
 801141c:	3b01      	subs	r3, #1
 801141e:	3a01      	subs	r2, #1
 8011420:	606b      	str	r3, [r5, #4]
 8011422:	3701      	adds	r7, #1
 8011424:	60a2      	str	r2, [r4, #8]
 8011426:	b142      	cbz	r2, 801143a <_scanf_chars+0x8e>
 8011428:	2b00      	cmp	r3, #0
 801142a:	dcd7      	bgt.n	80113dc <_scanf_chars+0x30>
 801142c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011430:	4629      	mov	r1, r5
 8011432:	4640      	mov	r0, r8
 8011434:	4798      	blx	r3
 8011436:	2800      	cmp	r0, #0
 8011438:	d0d0      	beq.n	80113dc <_scanf_chars+0x30>
 801143a:	6823      	ldr	r3, [r4, #0]
 801143c:	f013 0310 	ands.w	r3, r3, #16
 8011440:	d105      	bne.n	801144e <_scanf_chars+0xa2>
 8011442:	68e2      	ldr	r2, [r4, #12]
 8011444:	3201      	adds	r2, #1
 8011446:	60e2      	str	r2, [r4, #12]
 8011448:	69a2      	ldr	r2, [r4, #24]
 801144a:	b102      	cbz	r2, 801144e <_scanf_chars+0xa2>
 801144c:	7033      	strb	r3, [r6, #0]
 801144e:	6923      	ldr	r3, [r4, #16]
 8011450:	443b      	add	r3, r7
 8011452:	6123      	str	r3, [r4, #16]
 8011454:	2000      	movs	r0, #0
 8011456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801145a:	bf00      	nop
 801145c:	08012e25 	.word	0x08012e25

08011460 <_scanf_i>:
 8011460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011464:	4698      	mov	r8, r3
 8011466:	4b74      	ldr	r3, [pc, #464]	@ (8011638 <_scanf_i+0x1d8>)
 8011468:	460c      	mov	r4, r1
 801146a:	4682      	mov	sl, r0
 801146c:	4616      	mov	r6, r2
 801146e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011472:	b087      	sub	sp, #28
 8011474:	ab03      	add	r3, sp, #12
 8011476:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801147a:	4b70      	ldr	r3, [pc, #448]	@ (801163c <_scanf_i+0x1dc>)
 801147c:	69a1      	ldr	r1, [r4, #24]
 801147e:	4a70      	ldr	r2, [pc, #448]	@ (8011640 <_scanf_i+0x1e0>)
 8011480:	2903      	cmp	r1, #3
 8011482:	bf08      	it	eq
 8011484:	461a      	moveq	r2, r3
 8011486:	68a3      	ldr	r3, [r4, #8]
 8011488:	9201      	str	r2, [sp, #4]
 801148a:	1e5a      	subs	r2, r3, #1
 801148c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011490:	bf88      	it	hi
 8011492:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011496:	4627      	mov	r7, r4
 8011498:	bf82      	ittt	hi
 801149a:	eb03 0905 	addhi.w	r9, r3, r5
 801149e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80114a2:	60a3      	strhi	r3, [r4, #8]
 80114a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80114a8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80114ac:	bf98      	it	ls
 80114ae:	f04f 0900 	movls.w	r9, #0
 80114b2:	6023      	str	r3, [r4, #0]
 80114b4:	463d      	mov	r5, r7
 80114b6:	f04f 0b00 	mov.w	fp, #0
 80114ba:	6831      	ldr	r1, [r6, #0]
 80114bc:	ab03      	add	r3, sp, #12
 80114be:	7809      	ldrb	r1, [r1, #0]
 80114c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80114c4:	2202      	movs	r2, #2
 80114c6:	f7ee fe9b 	bl	8000200 <memchr>
 80114ca:	b328      	cbz	r0, 8011518 <_scanf_i+0xb8>
 80114cc:	f1bb 0f01 	cmp.w	fp, #1
 80114d0:	d159      	bne.n	8011586 <_scanf_i+0x126>
 80114d2:	6862      	ldr	r2, [r4, #4]
 80114d4:	b92a      	cbnz	r2, 80114e2 <_scanf_i+0x82>
 80114d6:	6822      	ldr	r2, [r4, #0]
 80114d8:	2108      	movs	r1, #8
 80114da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80114de:	6061      	str	r1, [r4, #4]
 80114e0:	6022      	str	r2, [r4, #0]
 80114e2:	6822      	ldr	r2, [r4, #0]
 80114e4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80114e8:	6022      	str	r2, [r4, #0]
 80114ea:	68a2      	ldr	r2, [r4, #8]
 80114ec:	1e51      	subs	r1, r2, #1
 80114ee:	60a1      	str	r1, [r4, #8]
 80114f0:	b192      	cbz	r2, 8011518 <_scanf_i+0xb8>
 80114f2:	6832      	ldr	r2, [r6, #0]
 80114f4:	1c51      	adds	r1, r2, #1
 80114f6:	6031      	str	r1, [r6, #0]
 80114f8:	7812      	ldrb	r2, [r2, #0]
 80114fa:	f805 2b01 	strb.w	r2, [r5], #1
 80114fe:	6872      	ldr	r2, [r6, #4]
 8011500:	3a01      	subs	r2, #1
 8011502:	2a00      	cmp	r2, #0
 8011504:	6072      	str	r2, [r6, #4]
 8011506:	dc07      	bgt.n	8011518 <_scanf_i+0xb8>
 8011508:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801150c:	4631      	mov	r1, r6
 801150e:	4650      	mov	r0, sl
 8011510:	4790      	blx	r2
 8011512:	2800      	cmp	r0, #0
 8011514:	f040 8085 	bne.w	8011622 <_scanf_i+0x1c2>
 8011518:	f10b 0b01 	add.w	fp, fp, #1
 801151c:	f1bb 0f03 	cmp.w	fp, #3
 8011520:	d1cb      	bne.n	80114ba <_scanf_i+0x5a>
 8011522:	6863      	ldr	r3, [r4, #4]
 8011524:	b90b      	cbnz	r3, 801152a <_scanf_i+0xca>
 8011526:	230a      	movs	r3, #10
 8011528:	6063      	str	r3, [r4, #4]
 801152a:	6863      	ldr	r3, [r4, #4]
 801152c:	4945      	ldr	r1, [pc, #276]	@ (8011644 <_scanf_i+0x1e4>)
 801152e:	6960      	ldr	r0, [r4, #20]
 8011530:	1ac9      	subs	r1, r1, r3
 8011532:	f000 f947 	bl	80117c4 <__sccl>
 8011536:	f04f 0b00 	mov.w	fp, #0
 801153a:	68a3      	ldr	r3, [r4, #8]
 801153c:	6822      	ldr	r2, [r4, #0]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d03d      	beq.n	80115be <_scanf_i+0x15e>
 8011542:	6831      	ldr	r1, [r6, #0]
 8011544:	6960      	ldr	r0, [r4, #20]
 8011546:	f891 c000 	ldrb.w	ip, [r1]
 801154a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801154e:	2800      	cmp	r0, #0
 8011550:	d035      	beq.n	80115be <_scanf_i+0x15e>
 8011552:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011556:	d124      	bne.n	80115a2 <_scanf_i+0x142>
 8011558:	0510      	lsls	r0, r2, #20
 801155a:	d522      	bpl.n	80115a2 <_scanf_i+0x142>
 801155c:	f10b 0b01 	add.w	fp, fp, #1
 8011560:	f1b9 0f00 	cmp.w	r9, #0
 8011564:	d003      	beq.n	801156e <_scanf_i+0x10e>
 8011566:	3301      	adds	r3, #1
 8011568:	f109 39ff 	add.w	r9, r9, #4294967295
 801156c:	60a3      	str	r3, [r4, #8]
 801156e:	6873      	ldr	r3, [r6, #4]
 8011570:	3b01      	subs	r3, #1
 8011572:	2b00      	cmp	r3, #0
 8011574:	6073      	str	r3, [r6, #4]
 8011576:	dd1b      	ble.n	80115b0 <_scanf_i+0x150>
 8011578:	6833      	ldr	r3, [r6, #0]
 801157a:	3301      	adds	r3, #1
 801157c:	6033      	str	r3, [r6, #0]
 801157e:	68a3      	ldr	r3, [r4, #8]
 8011580:	3b01      	subs	r3, #1
 8011582:	60a3      	str	r3, [r4, #8]
 8011584:	e7d9      	b.n	801153a <_scanf_i+0xda>
 8011586:	f1bb 0f02 	cmp.w	fp, #2
 801158a:	d1ae      	bne.n	80114ea <_scanf_i+0x8a>
 801158c:	6822      	ldr	r2, [r4, #0]
 801158e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8011592:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011596:	d1c4      	bne.n	8011522 <_scanf_i+0xc2>
 8011598:	2110      	movs	r1, #16
 801159a:	6061      	str	r1, [r4, #4]
 801159c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80115a0:	e7a2      	b.n	80114e8 <_scanf_i+0x88>
 80115a2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80115a6:	6022      	str	r2, [r4, #0]
 80115a8:	780b      	ldrb	r3, [r1, #0]
 80115aa:	f805 3b01 	strb.w	r3, [r5], #1
 80115ae:	e7de      	b.n	801156e <_scanf_i+0x10e>
 80115b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80115b4:	4631      	mov	r1, r6
 80115b6:	4650      	mov	r0, sl
 80115b8:	4798      	blx	r3
 80115ba:	2800      	cmp	r0, #0
 80115bc:	d0df      	beq.n	801157e <_scanf_i+0x11e>
 80115be:	6823      	ldr	r3, [r4, #0]
 80115c0:	05d9      	lsls	r1, r3, #23
 80115c2:	d50d      	bpl.n	80115e0 <_scanf_i+0x180>
 80115c4:	42bd      	cmp	r5, r7
 80115c6:	d909      	bls.n	80115dc <_scanf_i+0x17c>
 80115c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80115cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80115d0:	4632      	mov	r2, r6
 80115d2:	4650      	mov	r0, sl
 80115d4:	4798      	blx	r3
 80115d6:	f105 39ff 	add.w	r9, r5, #4294967295
 80115da:	464d      	mov	r5, r9
 80115dc:	42bd      	cmp	r5, r7
 80115de:	d028      	beq.n	8011632 <_scanf_i+0x1d2>
 80115e0:	6822      	ldr	r2, [r4, #0]
 80115e2:	f012 0210 	ands.w	r2, r2, #16
 80115e6:	d113      	bne.n	8011610 <_scanf_i+0x1b0>
 80115e8:	702a      	strb	r2, [r5, #0]
 80115ea:	6863      	ldr	r3, [r4, #4]
 80115ec:	9e01      	ldr	r6, [sp, #4]
 80115ee:	4639      	mov	r1, r7
 80115f0:	4650      	mov	r0, sl
 80115f2:	47b0      	blx	r6
 80115f4:	f8d8 3000 	ldr.w	r3, [r8]
 80115f8:	6821      	ldr	r1, [r4, #0]
 80115fa:	1d1a      	adds	r2, r3, #4
 80115fc:	f8c8 2000 	str.w	r2, [r8]
 8011600:	f011 0f20 	tst.w	r1, #32
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	d00f      	beq.n	8011628 <_scanf_i+0x1c8>
 8011608:	6018      	str	r0, [r3, #0]
 801160a:	68e3      	ldr	r3, [r4, #12]
 801160c:	3301      	adds	r3, #1
 801160e:	60e3      	str	r3, [r4, #12]
 8011610:	6923      	ldr	r3, [r4, #16]
 8011612:	1bed      	subs	r5, r5, r7
 8011614:	445d      	add	r5, fp
 8011616:	442b      	add	r3, r5
 8011618:	6123      	str	r3, [r4, #16]
 801161a:	2000      	movs	r0, #0
 801161c:	b007      	add	sp, #28
 801161e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011622:	f04f 0b00 	mov.w	fp, #0
 8011626:	e7ca      	b.n	80115be <_scanf_i+0x15e>
 8011628:	07ca      	lsls	r2, r1, #31
 801162a:	bf4c      	ite	mi
 801162c:	8018      	strhmi	r0, [r3, #0]
 801162e:	6018      	strpl	r0, [r3, #0]
 8011630:	e7eb      	b.n	801160a <_scanf_i+0x1aa>
 8011632:	2001      	movs	r0, #1
 8011634:	e7f2      	b.n	801161c <_scanf_i+0x1bc>
 8011636:	bf00      	nop
 8011638:	08012ca8 	.word	0x08012ca8
 801163c:	08010211 	.word	0x08010211
 8011640:	08011a61 	.word	0x08011a61
 8011644:	08013015 	.word	0x08013015

08011648 <__sflush_r>:
 8011648:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801164c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011650:	0716      	lsls	r6, r2, #28
 8011652:	4605      	mov	r5, r0
 8011654:	460c      	mov	r4, r1
 8011656:	d454      	bmi.n	8011702 <__sflush_r+0xba>
 8011658:	684b      	ldr	r3, [r1, #4]
 801165a:	2b00      	cmp	r3, #0
 801165c:	dc02      	bgt.n	8011664 <__sflush_r+0x1c>
 801165e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011660:	2b00      	cmp	r3, #0
 8011662:	dd48      	ble.n	80116f6 <__sflush_r+0xae>
 8011664:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011666:	2e00      	cmp	r6, #0
 8011668:	d045      	beq.n	80116f6 <__sflush_r+0xae>
 801166a:	2300      	movs	r3, #0
 801166c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011670:	682f      	ldr	r7, [r5, #0]
 8011672:	6a21      	ldr	r1, [r4, #32]
 8011674:	602b      	str	r3, [r5, #0]
 8011676:	d030      	beq.n	80116da <__sflush_r+0x92>
 8011678:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801167a:	89a3      	ldrh	r3, [r4, #12]
 801167c:	0759      	lsls	r1, r3, #29
 801167e:	d505      	bpl.n	801168c <__sflush_r+0x44>
 8011680:	6863      	ldr	r3, [r4, #4]
 8011682:	1ad2      	subs	r2, r2, r3
 8011684:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011686:	b10b      	cbz	r3, 801168c <__sflush_r+0x44>
 8011688:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801168a:	1ad2      	subs	r2, r2, r3
 801168c:	2300      	movs	r3, #0
 801168e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011690:	6a21      	ldr	r1, [r4, #32]
 8011692:	4628      	mov	r0, r5
 8011694:	47b0      	blx	r6
 8011696:	1c43      	adds	r3, r0, #1
 8011698:	89a3      	ldrh	r3, [r4, #12]
 801169a:	d106      	bne.n	80116aa <__sflush_r+0x62>
 801169c:	6829      	ldr	r1, [r5, #0]
 801169e:	291d      	cmp	r1, #29
 80116a0:	d82b      	bhi.n	80116fa <__sflush_r+0xb2>
 80116a2:	4a2a      	ldr	r2, [pc, #168]	@ (801174c <__sflush_r+0x104>)
 80116a4:	40ca      	lsrs	r2, r1
 80116a6:	07d6      	lsls	r6, r2, #31
 80116a8:	d527      	bpl.n	80116fa <__sflush_r+0xb2>
 80116aa:	2200      	movs	r2, #0
 80116ac:	6062      	str	r2, [r4, #4]
 80116ae:	04d9      	lsls	r1, r3, #19
 80116b0:	6922      	ldr	r2, [r4, #16]
 80116b2:	6022      	str	r2, [r4, #0]
 80116b4:	d504      	bpl.n	80116c0 <__sflush_r+0x78>
 80116b6:	1c42      	adds	r2, r0, #1
 80116b8:	d101      	bne.n	80116be <__sflush_r+0x76>
 80116ba:	682b      	ldr	r3, [r5, #0]
 80116bc:	b903      	cbnz	r3, 80116c0 <__sflush_r+0x78>
 80116be:	6560      	str	r0, [r4, #84]	@ 0x54
 80116c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80116c2:	602f      	str	r7, [r5, #0]
 80116c4:	b1b9      	cbz	r1, 80116f6 <__sflush_r+0xae>
 80116c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80116ca:	4299      	cmp	r1, r3
 80116cc:	d002      	beq.n	80116d4 <__sflush_r+0x8c>
 80116ce:	4628      	mov	r0, r5
 80116d0:	f7ff f8b8 	bl	8010844 <_free_r>
 80116d4:	2300      	movs	r3, #0
 80116d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80116d8:	e00d      	b.n	80116f6 <__sflush_r+0xae>
 80116da:	2301      	movs	r3, #1
 80116dc:	4628      	mov	r0, r5
 80116de:	47b0      	blx	r6
 80116e0:	4602      	mov	r2, r0
 80116e2:	1c50      	adds	r0, r2, #1
 80116e4:	d1c9      	bne.n	801167a <__sflush_r+0x32>
 80116e6:	682b      	ldr	r3, [r5, #0]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d0c6      	beq.n	801167a <__sflush_r+0x32>
 80116ec:	2b1d      	cmp	r3, #29
 80116ee:	d001      	beq.n	80116f4 <__sflush_r+0xac>
 80116f0:	2b16      	cmp	r3, #22
 80116f2:	d11e      	bne.n	8011732 <__sflush_r+0xea>
 80116f4:	602f      	str	r7, [r5, #0]
 80116f6:	2000      	movs	r0, #0
 80116f8:	e022      	b.n	8011740 <__sflush_r+0xf8>
 80116fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80116fe:	b21b      	sxth	r3, r3
 8011700:	e01b      	b.n	801173a <__sflush_r+0xf2>
 8011702:	690f      	ldr	r7, [r1, #16]
 8011704:	2f00      	cmp	r7, #0
 8011706:	d0f6      	beq.n	80116f6 <__sflush_r+0xae>
 8011708:	0793      	lsls	r3, r2, #30
 801170a:	680e      	ldr	r6, [r1, #0]
 801170c:	bf08      	it	eq
 801170e:	694b      	ldreq	r3, [r1, #20]
 8011710:	600f      	str	r7, [r1, #0]
 8011712:	bf18      	it	ne
 8011714:	2300      	movne	r3, #0
 8011716:	eba6 0807 	sub.w	r8, r6, r7
 801171a:	608b      	str	r3, [r1, #8]
 801171c:	f1b8 0f00 	cmp.w	r8, #0
 8011720:	dde9      	ble.n	80116f6 <__sflush_r+0xae>
 8011722:	6a21      	ldr	r1, [r4, #32]
 8011724:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011726:	4643      	mov	r3, r8
 8011728:	463a      	mov	r2, r7
 801172a:	4628      	mov	r0, r5
 801172c:	47b0      	blx	r6
 801172e:	2800      	cmp	r0, #0
 8011730:	dc08      	bgt.n	8011744 <__sflush_r+0xfc>
 8011732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801173a:	81a3      	strh	r3, [r4, #12]
 801173c:	f04f 30ff 	mov.w	r0, #4294967295
 8011740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011744:	4407      	add	r7, r0
 8011746:	eba8 0800 	sub.w	r8, r8, r0
 801174a:	e7e7      	b.n	801171c <__sflush_r+0xd4>
 801174c:	20400001 	.word	0x20400001

08011750 <_fflush_r>:
 8011750:	b538      	push	{r3, r4, r5, lr}
 8011752:	690b      	ldr	r3, [r1, #16]
 8011754:	4605      	mov	r5, r0
 8011756:	460c      	mov	r4, r1
 8011758:	b913      	cbnz	r3, 8011760 <_fflush_r+0x10>
 801175a:	2500      	movs	r5, #0
 801175c:	4628      	mov	r0, r5
 801175e:	bd38      	pop	{r3, r4, r5, pc}
 8011760:	b118      	cbz	r0, 801176a <_fflush_r+0x1a>
 8011762:	6a03      	ldr	r3, [r0, #32]
 8011764:	b90b      	cbnz	r3, 801176a <_fflush_r+0x1a>
 8011766:	f7fe fdeb 	bl	8010340 <__sinit>
 801176a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d0f3      	beq.n	801175a <_fflush_r+0xa>
 8011772:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011774:	07d0      	lsls	r0, r2, #31
 8011776:	d404      	bmi.n	8011782 <_fflush_r+0x32>
 8011778:	0599      	lsls	r1, r3, #22
 801177a:	d402      	bmi.n	8011782 <_fflush_r+0x32>
 801177c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801177e:	f7ff f82a 	bl	80107d6 <__retarget_lock_acquire_recursive>
 8011782:	4628      	mov	r0, r5
 8011784:	4621      	mov	r1, r4
 8011786:	f7ff ff5f 	bl	8011648 <__sflush_r>
 801178a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801178c:	07da      	lsls	r2, r3, #31
 801178e:	4605      	mov	r5, r0
 8011790:	d4e4      	bmi.n	801175c <_fflush_r+0xc>
 8011792:	89a3      	ldrh	r3, [r4, #12]
 8011794:	059b      	lsls	r3, r3, #22
 8011796:	d4e1      	bmi.n	801175c <_fflush_r+0xc>
 8011798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801179a:	f7ff f81d 	bl	80107d8 <__retarget_lock_release_recursive>
 801179e:	e7dd      	b.n	801175c <_fflush_r+0xc>

080117a0 <fiprintf>:
 80117a0:	b40e      	push	{r1, r2, r3}
 80117a2:	b503      	push	{r0, r1, lr}
 80117a4:	4601      	mov	r1, r0
 80117a6:	ab03      	add	r3, sp, #12
 80117a8:	4805      	ldr	r0, [pc, #20]	@ (80117c0 <fiprintf+0x20>)
 80117aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80117ae:	6800      	ldr	r0, [r0, #0]
 80117b0:	9301      	str	r3, [sp, #4]
 80117b2:	f000 f981 	bl	8011ab8 <_vfiprintf_r>
 80117b6:	b002      	add	sp, #8
 80117b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80117bc:	b003      	add	sp, #12
 80117be:	4770      	bx	lr
 80117c0:	2000013c 	.word	0x2000013c

080117c4 <__sccl>:
 80117c4:	b570      	push	{r4, r5, r6, lr}
 80117c6:	780b      	ldrb	r3, [r1, #0]
 80117c8:	4604      	mov	r4, r0
 80117ca:	2b5e      	cmp	r3, #94	@ 0x5e
 80117cc:	bf0b      	itete	eq
 80117ce:	784b      	ldrbeq	r3, [r1, #1]
 80117d0:	1c4a      	addne	r2, r1, #1
 80117d2:	1c8a      	addeq	r2, r1, #2
 80117d4:	2100      	movne	r1, #0
 80117d6:	bf08      	it	eq
 80117d8:	2101      	moveq	r1, #1
 80117da:	3801      	subs	r0, #1
 80117dc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80117e0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80117e4:	42a8      	cmp	r0, r5
 80117e6:	d1fb      	bne.n	80117e0 <__sccl+0x1c>
 80117e8:	b90b      	cbnz	r3, 80117ee <__sccl+0x2a>
 80117ea:	1e50      	subs	r0, r2, #1
 80117ec:	bd70      	pop	{r4, r5, r6, pc}
 80117ee:	f081 0101 	eor.w	r1, r1, #1
 80117f2:	54e1      	strb	r1, [r4, r3]
 80117f4:	4610      	mov	r0, r2
 80117f6:	4602      	mov	r2, r0
 80117f8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80117fc:	2d2d      	cmp	r5, #45	@ 0x2d
 80117fe:	d005      	beq.n	801180c <__sccl+0x48>
 8011800:	2d5d      	cmp	r5, #93	@ 0x5d
 8011802:	d016      	beq.n	8011832 <__sccl+0x6e>
 8011804:	2d00      	cmp	r5, #0
 8011806:	d0f1      	beq.n	80117ec <__sccl+0x28>
 8011808:	462b      	mov	r3, r5
 801180a:	e7f2      	b.n	80117f2 <__sccl+0x2e>
 801180c:	7846      	ldrb	r6, [r0, #1]
 801180e:	2e5d      	cmp	r6, #93	@ 0x5d
 8011810:	d0fa      	beq.n	8011808 <__sccl+0x44>
 8011812:	42b3      	cmp	r3, r6
 8011814:	dcf8      	bgt.n	8011808 <__sccl+0x44>
 8011816:	3002      	adds	r0, #2
 8011818:	461a      	mov	r2, r3
 801181a:	3201      	adds	r2, #1
 801181c:	4296      	cmp	r6, r2
 801181e:	54a1      	strb	r1, [r4, r2]
 8011820:	dcfb      	bgt.n	801181a <__sccl+0x56>
 8011822:	1af2      	subs	r2, r6, r3
 8011824:	3a01      	subs	r2, #1
 8011826:	1c5d      	adds	r5, r3, #1
 8011828:	42b3      	cmp	r3, r6
 801182a:	bfa8      	it	ge
 801182c:	2200      	movge	r2, #0
 801182e:	18ab      	adds	r3, r5, r2
 8011830:	e7e1      	b.n	80117f6 <__sccl+0x32>
 8011832:	4610      	mov	r0, r2
 8011834:	e7da      	b.n	80117ec <__sccl+0x28>

08011836 <__submore>:
 8011836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801183a:	460c      	mov	r4, r1
 801183c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801183e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011842:	4299      	cmp	r1, r3
 8011844:	d11d      	bne.n	8011882 <__submore+0x4c>
 8011846:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801184a:	f7ff f86f 	bl	801092c <_malloc_r>
 801184e:	b918      	cbnz	r0, 8011858 <__submore+0x22>
 8011850:	f04f 30ff 	mov.w	r0, #4294967295
 8011854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011858:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801185c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801185e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8011862:	6360      	str	r0, [r4, #52]	@ 0x34
 8011864:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8011868:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801186c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8011870:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011874:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8011878:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801187c:	6020      	str	r0, [r4, #0]
 801187e:	2000      	movs	r0, #0
 8011880:	e7e8      	b.n	8011854 <__submore+0x1e>
 8011882:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8011884:	0077      	lsls	r7, r6, #1
 8011886:	463a      	mov	r2, r7
 8011888:	f000 f84d 	bl	8011926 <_realloc_r>
 801188c:	4605      	mov	r5, r0
 801188e:	2800      	cmp	r0, #0
 8011890:	d0de      	beq.n	8011850 <__submore+0x1a>
 8011892:	eb00 0806 	add.w	r8, r0, r6
 8011896:	4601      	mov	r1, r0
 8011898:	4632      	mov	r2, r6
 801189a:	4640      	mov	r0, r8
 801189c:	f7fe ffa5 	bl	80107ea <memcpy>
 80118a0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80118a4:	f8c4 8000 	str.w	r8, [r4]
 80118a8:	e7e9      	b.n	801187e <__submore+0x48>

080118aa <memmove>:
 80118aa:	4288      	cmp	r0, r1
 80118ac:	b510      	push	{r4, lr}
 80118ae:	eb01 0402 	add.w	r4, r1, r2
 80118b2:	d902      	bls.n	80118ba <memmove+0x10>
 80118b4:	4284      	cmp	r4, r0
 80118b6:	4623      	mov	r3, r4
 80118b8:	d807      	bhi.n	80118ca <memmove+0x20>
 80118ba:	1e43      	subs	r3, r0, #1
 80118bc:	42a1      	cmp	r1, r4
 80118be:	d008      	beq.n	80118d2 <memmove+0x28>
 80118c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80118c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80118c8:	e7f8      	b.n	80118bc <memmove+0x12>
 80118ca:	4402      	add	r2, r0
 80118cc:	4601      	mov	r1, r0
 80118ce:	428a      	cmp	r2, r1
 80118d0:	d100      	bne.n	80118d4 <memmove+0x2a>
 80118d2:	bd10      	pop	{r4, pc}
 80118d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80118d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80118dc:	e7f7      	b.n	80118ce <memmove+0x24>

080118de <strchr>:
 80118de:	b2c9      	uxtb	r1, r1
 80118e0:	4603      	mov	r3, r0
 80118e2:	4618      	mov	r0, r3
 80118e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118e8:	b112      	cbz	r2, 80118f0 <strchr+0x12>
 80118ea:	428a      	cmp	r2, r1
 80118ec:	d1f9      	bne.n	80118e2 <strchr+0x4>
 80118ee:	4770      	bx	lr
 80118f0:	2900      	cmp	r1, #0
 80118f2:	bf18      	it	ne
 80118f4:	2000      	movne	r0, #0
 80118f6:	4770      	bx	lr

080118f8 <_sbrk_r>:
 80118f8:	b538      	push	{r3, r4, r5, lr}
 80118fa:	4d06      	ldr	r5, [pc, #24]	@ (8011914 <_sbrk_r+0x1c>)
 80118fc:	2300      	movs	r3, #0
 80118fe:	4604      	mov	r4, r0
 8011900:	4608      	mov	r0, r1
 8011902:	602b      	str	r3, [r5, #0]
 8011904:	f7f0 f93a 	bl	8001b7c <_sbrk>
 8011908:	1c43      	adds	r3, r0, #1
 801190a:	d102      	bne.n	8011912 <_sbrk_r+0x1a>
 801190c:	682b      	ldr	r3, [r5, #0]
 801190e:	b103      	cbz	r3, 8011912 <_sbrk_r+0x1a>
 8011910:	6023      	str	r3, [r4, #0]
 8011912:	bd38      	pop	{r3, r4, r5, pc}
 8011914:	2001430c 	.word	0x2001430c

08011918 <abort>:
 8011918:	b508      	push	{r3, lr}
 801191a:	2006      	movs	r0, #6
 801191c:	f000 faa0 	bl	8011e60 <raise>
 8011920:	2001      	movs	r0, #1
 8011922:	f7f0 f8b3 	bl	8001a8c <_exit>

08011926 <_realloc_r>:
 8011926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801192a:	4607      	mov	r7, r0
 801192c:	4614      	mov	r4, r2
 801192e:	460d      	mov	r5, r1
 8011930:	b921      	cbnz	r1, 801193c <_realloc_r+0x16>
 8011932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011936:	4611      	mov	r1, r2
 8011938:	f7fe bff8 	b.w	801092c <_malloc_r>
 801193c:	b92a      	cbnz	r2, 801194a <_realloc_r+0x24>
 801193e:	f7fe ff81 	bl	8010844 <_free_r>
 8011942:	4625      	mov	r5, r4
 8011944:	4628      	mov	r0, r5
 8011946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801194a:	f000 faa5 	bl	8011e98 <_malloc_usable_size_r>
 801194e:	4284      	cmp	r4, r0
 8011950:	4606      	mov	r6, r0
 8011952:	d802      	bhi.n	801195a <_realloc_r+0x34>
 8011954:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011958:	d8f4      	bhi.n	8011944 <_realloc_r+0x1e>
 801195a:	4621      	mov	r1, r4
 801195c:	4638      	mov	r0, r7
 801195e:	f7fe ffe5 	bl	801092c <_malloc_r>
 8011962:	4680      	mov	r8, r0
 8011964:	b908      	cbnz	r0, 801196a <_realloc_r+0x44>
 8011966:	4645      	mov	r5, r8
 8011968:	e7ec      	b.n	8011944 <_realloc_r+0x1e>
 801196a:	42b4      	cmp	r4, r6
 801196c:	4622      	mov	r2, r4
 801196e:	4629      	mov	r1, r5
 8011970:	bf28      	it	cs
 8011972:	4632      	movcs	r2, r6
 8011974:	f7fe ff39 	bl	80107ea <memcpy>
 8011978:	4629      	mov	r1, r5
 801197a:	4638      	mov	r0, r7
 801197c:	f7fe ff62 	bl	8010844 <_free_r>
 8011980:	e7f1      	b.n	8011966 <_realloc_r+0x40>
	...

08011984 <_strtoul_l.isra.0>:
 8011984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011988:	4e34      	ldr	r6, [pc, #208]	@ (8011a5c <_strtoul_l.isra.0+0xd8>)
 801198a:	4686      	mov	lr, r0
 801198c:	460d      	mov	r5, r1
 801198e:	4628      	mov	r0, r5
 8011990:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011994:	5d37      	ldrb	r7, [r6, r4]
 8011996:	f017 0708 	ands.w	r7, r7, #8
 801199a:	d1f8      	bne.n	801198e <_strtoul_l.isra.0+0xa>
 801199c:	2c2d      	cmp	r4, #45	@ 0x2d
 801199e:	d110      	bne.n	80119c2 <_strtoul_l.isra.0+0x3e>
 80119a0:	782c      	ldrb	r4, [r5, #0]
 80119a2:	2701      	movs	r7, #1
 80119a4:	1c85      	adds	r5, r0, #2
 80119a6:	f033 0010 	bics.w	r0, r3, #16
 80119aa:	d115      	bne.n	80119d8 <_strtoul_l.isra.0+0x54>
 80119ac:	2c30      	cmp	r4, #48	@ 0x30
 80119ae:	d10d      	bne.n	80119cc <_strtoul_l.isra.0+0x48>
 80119b0:	7828      	ldrb	r0, [r5, #0]
 80119b2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80119b6:	2858      	cmp	r0, #88	@ 0x58
 80119b8:	d108      	bne.n	80119cc <_strtoul_l.isra.0+0x48>
 80119ba:	786c      	ldrb	r4, [r5, #1]
 80119bc:	3502      	adds	r5, #2
 80119be:	2310      	movs	r3, #16
 80119c0:	e00a      	b.n	80119d8 <_strtoul_l.isra.0+0x54>
 80119c2:	2c2b      	cmp	r4, #43	@ 0x2b
 80119c4:	bf04      	itt	eq
 80119c6:	782c      	ldrbeq	r4, [r5, #0]
 80119c8:	1c85      	addeq	r5, r0, #2
 80119ca:	e7ec      	b.n	80119a6 <_strtoul_l.isra.0+0x22>
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d1f6      	bne.n	80119be <_strtoul_l.isra.0+0x3a>
 80119d0:	2c30      	cmp	r4, #48	@ 0x30
 80119d2:	bf14      	ite	ne
 80119d4:	230a      	movne	r3, #10
 80119d6:	2308      	moveq	r3, #8
 80119d8:	f04f 38ff 	mov.w	r8, #4294967295
 80119dc:	2600      	movs	r6, #0
 80119de:	fbb8 f8f3 	udiv	r8, r8, r3
 80119e2:	fb03 f908 	mul.w	r9, r3, r8
 80119e6:	ea6f 0909 	mvn.w	r9, r9
 80119ea:	4630      	mov	r0, r6
 80119ec:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80119f0:	f1bc 0f09 	cmp.w	ip, #9
 80119f4:	d810      	bhi.n	8011a18 <_strtoul_l.isra.0+0x94>
 80119f6:	4664      	mov	r4, ip
 80119f8:	42a3      	cmp	r3, r4
 80119fa:	dd1e      	ble.n	8011a3a <_strtoul_l.isra.0+0xb6>
 80119fc:	f1b6 3fff 	cmp.w	r6, #4294967295
 8011a00:	d007      	beq.n	8011a12 <_strtoul_l.isra.0+0x8e>
 8011a02:	4580      	cmp	r8, r0
 8011a04:	d316      	bcc.n	8011a34 <_strtoul_l.isra.0+0xb0>
 8011a06:	d101      	bne.n	8011a0c <_strtoul_l.isra.0+0x88>
 8011a08:	45a1      	cmp	r9, r4
 8011a0a:	db13      	blt.n	8011a34 <_strtoul_l.isra.0+0xb0>
 8011a0c:	fb00 4003 	mla	r0, r0, r3, r4
 8011a10:	2601      	movs	r6, #1
 8011a12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011a16:	e7e9      	b.n	80119ec <_strtoul_l.isra.0+0x68>
 8011a18:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011a1c:	f1bc 0f19 	cmp.w	ip, #25
 8011a20:	d801      	bhi.n	8011a26 <_strtoul_l.isra.0+0xa2>
 8011a22:	3c37      	subs	r4, #55	@ 0x37
 8011a24:	e7e8      	b.n	80119f8 <_strtoul_l.isra.0+0x74>
 8011a26:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011a2a:	f1bc 0f19 	cmp.w	ip, #25
 8011a2e:	d804      	bhi.n	8011a3a <_strtoul_l.isra.0+0xb6>
 8011a30:	3c57      	subs	r4, #87	@ 0x57
 8011a32:	e7e1      	b.n	80119f8 <_strtoul_l.isra.0+0x74>
 8011a34:	f04f 36ff 	mov.w	r6, #4294967295
 8011a38:	e7eb      	b.n	8011a12 <_strtoul_l.isra.0+0x8e>
 8011a3a:	1c73      	adds	r3, r6, #1
 8011a3c:	d106      	bne.n	8011a4c <_strtoul_l.isra.0+0xc8>
 8011a3e:	2322      	movs	r3, #34	@ 0x22
 8011a40:	f8ce 3000 	str.w	r3, [lr]
 8011a44:	4630      	mov	r0, r6
 8011a46:	b932      	cbnz	r2, 8011a56 <_strtoul_l.isra.0+0xd2>
 8011a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a4c:	b107      	cbz	r7, 8011a50 <_strtoul_l.isra.0+0xcc>
 8011a4e:	4240      	negs	r0, r0
 8011a50:	2a00      	cmp	r2, #0
 8011a52:	d0f9      	beq.n	8011a48 <_strtoul_l.isra.0+0xc4>
 8011a54:	b106      	cbz	r6, 8011a58 <_strtoul_l.isra.0+0xd4>
 8011a56:	1e69      	subs	r1, r5, #1
 8011a58:	6011      	str	r1, [r2, #0]
 8011a5a:	e7f5      	b.n	8011a48 <_strtoul_l.isra.0+0xc4>
 8011a5c:	08012e25 	.word	0x08012e25

08011a60 <_strtoul_r>:
 8011a60:	f7ff bf90 	b.w	8011984 <_strtoul_l.isra.0>

08011a64 <__sfputc_r>:
 8011a64:	6893      	ldr	r3, [r2, #8]
 8011a66:	3b01      	subs	r3, #1
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	b410      	push	{r4}
 8011a6c:	6093      	str	r3, [r2, #8]
 8011a6e:	da08      	bge.n	8011a82 <__sfputc_r+0x1e>
 8011a70:	6994      	ldr	r4, [r2, #24]
 8011a72:	42a3      	cmp	r3, r4
 8011a74:	db01      	blt.n	8011a7a <__sfputc_r+0x16>
 8011a76:	290a      	cmp	r1, #10
 8011a78:	d103      	bne.n	8011a82 <__sfputc_r+0x1e>
 8011a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a7e:	f000 b933 	b.w	8011ce8 <__swbuf_r>
 8011a82:	6813      	ldr	r3, [r2, #0]
 8011a84:	1c58      	adds	r0, r3, #1
 8011a86:	6010      	str	r0, [r2, #0]
 8011a88:	7019      	strb	r1, [r3, #0]
 8011a8a:	4608      	mov	r0, r1
 8011a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a90:	4770      	bx	lr

08011a92 <__sfputs_r>:
 8011a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a94:	4606      	mov	r6, r0
 8011a96:	460f      	mov	r7, r1
 8011a98:	4614      	mov	r4, r2
 8011a9a:	18d5      	adds	r5, r2, r3
 8011a9c:	42ac      	cmp	r4, r5
 8011a9e:	d101      	bne.n	8011aa4 <__sfputs_r+0x12>
 8011aa0:	2000      	movs	r0, #0
 8011aa2:	e007      	b.n	8011ab4 <__sfputs_r+0x22>
 8011aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011aa8:	463a      	mov	r2, r7
 8011aaa:	4630      	mov	r0, r6
 8011aac:	f7ff ffda 	bl	8011a64 <__sfputc_r>
 8011ab0:	1c43      	adds	r3, r0, #1
 8011ab2:	d1f3      	bne.n	8011a9c <__sfputs_r+0xa>
 8011ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011ab8 <_vfiprintf_r>:
 8011ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011abc:	460d      	mov	r5, r1
 8011abe:	b09d      	sub	sp, #116	@ 0x74
 8011ac0:	4614      	mov	r4, r2
 8011ac2:	4698      	mov	r8, r3
 8011ac4:	4606      	mov	r6, r0
 8011ac6:	b118      	cbz	r0, 8011ad0 <_vfiprintf_r+0x18>
 8011ac8:	6a03      	ldr	r3, [r0, #32]
 8011aca:	b90b      	cbnz	r3, 8011ad0 <_vfiprintf_r+0x18>
 8011acc:	f7fe fc38 	bl	8010340 <__sinit>
 8011ad0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ad2:	07d9      	lsls	r1, r3, #31
 8011ad4:	d405      	bmi.n	8011ae2 <_vfiprintf_r+0x2a>
 8011ad6:	89ab      	ldrh	r3, [r5, #12]
 8011ad8:	059a      	lsls	r2, r3, #22
 8011ada:	d402      	bmi.n	8011ae2 <_vfiprintf_r+0x2a>
 8011adc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011ade:	f7fe fe7a 	bl	80107d6 <__retarget_lock_acquire_recursive>
 8011ae2:	89ab      	ldrh	r3, [r5, #12]
 8011ae4:	071b      	lsls	r3, r3, #28
 8011ae6:	d501      	bpl.n	8011aec <_vfiprintf_r+0x34>
 8011ae8:	692b      	ldr	r3, [r5, #16]
 8011aea:	b99b      	cbnz	r3, 8011b14 <_vfiprintf_r+0x5c>
 8011aec:	4629      	mov	r1, r5
 8011aee:	4630      	mov	r0, r6
 8011af0:	f000 f938 	bl	8011d64 <__swsetup_r>
 8011af4:	b170      	cbz	r0, 8011b14 <_vfiprintf_r+0x5c>
 8011af6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011af8:	07dc      	lsls	r4, r3, #31
 8011afa:	d504      	bpl.n	8011b06 <_vfiprintf_r+0x4e>
 8011afc:	f04f 30ff 	mov.w	r0, #4294967295
 8011b00:	b01d      	add	sp, #116	@ 0x74
 8011b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b06:	89ab      	ldrh	r3, [r5, #12]
 8011b08:	0598      	lsls	r0, r3, #22
 8011b0a:	d4f7      	bmi.n	8011afc <_vfiprintf_r+0x44>
 8011b0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011b0e:	f7fe fe63 	bl	80107d8 <__retarget_lock_release_recursive>
 8011b12:	e7f3      	b.n	8011afc <_vfiprintf_r+0x44>
 8011b14:	2300      	movs	r3, #0
 8011b16:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b18:	2320      	movs	r3, #32
 8011b1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b22:	2330      	movs	r3, #48	@ 0x30
 8011b24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011cd4 <_vfiprintf_r+0x21c>
 8011b28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011b2c:	f04f 0901 	mov.w	r9, #1
 8011b30:	4623      	mov	r3, r4
 8011b32:	469a      	mov	sl, r3
 8011b34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b38:	b10a      	cbz	r2, 8011b3e <_vfiprintf_r+0x86>
 8011b3a:	2a25      	cmp	r2, #37	@ 0x25
 8011b3c:	d1f9      	bne.n	8011b32 <_vfiprintf_r+0x7a>
 8011b3e:	ebba 0b04 	subs.w	fp, sl, r4
 8011b42:	d00b      	beq.n	8011b5c <_vfiprintf_r+0xa4>
 8011b44:	465b      	mov	r3, fp
 8011b46:	4622      	mov	r2, r4
 8011b48:	4629      	mov	r1, r5
 8011b4a:	4630      	mov	r0, r6
 8011b4c:	f7ff ffa1 	bl	8011a92 <__sfputs_r>
 8011b50:	3001      	adds	r0, #1
 8011b52:	f000 80a7 	beq.w	8011ca4 <_vfiprintf_r+0x1ec>
 8011b56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b58:	445a      	add	r2, fp
 8011b5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	f000 809f 	beq.w	8011ca4 <_vfiprintf_r+0x1ec>
 8011b66:	2300      	movs	r3, #0
 8011b68:	f04f 32ff 	mov.w	r2, #4294967295
 8011b6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b70:	f10a 0a01 	add.w	sl, sl, #1
 8011b74:	9304      	str	r3, [sp, #16]
 8011b76:	9307      	str	r3, [sp, #28]
 8011b78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011b7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8011b7e:	4654      	mov	r4, sl
 8011b80:	2205      	movs	r2, #5
 8011b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b86:	4853      	ldr	r0, [pc, #332]	@ (8011cd4 <_vfiprintf_r+0x21c>)
 8011b88:	f7ee fb3a 	bl	8000200 <memchr>
 8011b8c:	9a04      	ldr	r2, [sp, #16]
 8011b8e:	b9d8      	cbnz	r0, 8011bc8 <_vfiprintf_r+0x110>
 8011b90:	06d1      	lsls	r1, r2, #27
 8011b92:	bf44      	itt	mi
 8011b94:	2320      	movmi	r3, #32
 8011b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b9a:	0713      	lsls	r3, r2, #28
 8011b9c:	bf44      	itt	mi
 8011b9e:	232b      	movmi	r3, #43	@ 0x2b
 8011ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8011ba8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011baa:	d015      	beq.n	8011bd8 <_vfiprintf_r+0x120>
 8011bac:	9a07      	ldr	r2, [sp, #28]
 8011bae:	4654      	mov	r4, sl
 8011bb0:	2000      	movs	r0, #0
 8011bb2:	f04f 0c0a 	mov.w	ip, #10
 8011bb6:	4621      	mov	r1, r4
 8011bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bbc:	3b30      	subs	r3, #48	@ 0x30
 8011bbe:	2b09      	cmp	r3, #9
 8011bc0:	d94b      	bls.n	8011c5a <_vfiprintf_r+0x1a2>
 8011bc2:	b1b0      	cbz	r0, 8011bf2 <_vfiprintf_r+0x13a>
 8011bc4:	9207      	str	r2, [sp, #28]
 8011bc6:	e014      	b.n	8011bf2 <_vfiprintf_r+0x13a>
 8011bc8:	eba0 0308 	sub.w	r3, r0, r8
 8011bcc:	fa09 f303 	lsl.w	r3, r9, r3
 8011bd0:	4313      	orrs	r3, r2
 8011bd2:	9304      	str	r3, [sp, #16]
 8011bd4:	46a2      	mov	sl, r4
 8011bd6:	e7d2      	b.n	8011b7e <_vfiprintf_r+0xc6>
 8011bd8:	9b03      	ldr	r3, [sp, #12]
 8011bda:	1d19      	adds	r1, r3, #4
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	9103      	str	r1, [sp, #12]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	bfbb      	ittet	lt
 8011be4:	425b      	neglt	r3, r3
 8011be6:	f042 0202 	orrlt.w	r2, r2, #2
 8011bea:	9307      	strge	r3, [sp, #28]
 8011bec:	9307      	strlt	r3, [sp, #28]
 8011bee:	bfb8      	it	lt
 8011bf0:	9204      	strlt	r2, [sp, #16]
 8011bf2:	7823      	ldrb	r3, [r4, #0]
 8011bf4:	2b2e      	cmp	r3, #46	@ 0x2e
 8011bf6:	d10a      	bne.n	8011c0e <_vfiprintf_r+0x156>
 8011bf8:	7863      	ldrb	r3, [r4, #1]
 8011bfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bfc:	d132      	bne.n	8011c64 <_vfiprintf_r+0x1ac>
 8011bfe:	9b03      	ldr	r3, [sp, #12]
 8011c00:	1d1a      	adds	r2, r3, #4
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	9203      	str	r2, [sp, #12]
 8011c06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c0a:	3402      	adds	r4, #2
 8011c0c:	9305      	str	r3, [sp, #20]
 8011c0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011ce4 <_vfiprintf_r+0x22c>
 8011c12:	7821      	ldrb	r1, [r4, #0]
 8011c14:	2203      	movs	r2, #3
 8011c16:	4650      	mov	r0, sl
 8011c18:	f7ee faf2 	bl	8000200 <memchr>
 8011c1c:	b138      	cbz	r0, 8011c2e <_vfiprintf_r+0x176>
 8011c1e:	9b04      	ldr	r3, [sp, #16]
 8011c20:	eba0 000a 	sub.w	r0, r0, sl
 8011c24:	2240      	movs	r2, #64	@ 0x40
 8011c26:	4082      	lsls	r2, r0
 8011c28:	4313      	orrs	r3, r2
 8011c2a:	3401      	adds	r4, #1
 8011c2c:	9304      	str	r3, [sp, #16]
 8011c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c32:	4829      	ldr	r0, [pc, #164]	@ (8011cd8 <_vfiprintf_r+0x220>)
 8011c34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011c38:	2206      	movs	r2, #6
 8011c3a:	f7ee fae1 	bl	8000200 <memchr>
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	d03f      	beq.n	8011cc2 <_vfiprintf_r+0x20a>
 8011c42:	4b26      	ldr	r3, [pc, #152]	@ (8011cdc <_vfiprintf_r+0x224>)
 8011c44:	bb1b      	cbnz	r3, 8011c8e <_vfiprintf_r+0x1d6>
 8011c46:	9b03      	ldr	r3, [sp, #12]
 8011c48:	3307      	adds	r3, #7
 8011c4a:	f023 0307 	bic.w	r3, r3, #7
 8011c4e:	3308      	adds	r3, #8
 8011c50:	9303      	str	r3, [sp, #12]
 8011c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c54:	443b      	add	r3, r7
 8011c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c58:	e76a      	b.n	8011b30 <_vfiprintf_r+0x78>
 8011c5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c5e:	460c      	mov	r4, r1
 8011c60:	2001      	movs	r0, #1
 8011c62:	e7a8      	b.n	8011bb6 <_vfiprintf_r+0xfe>
 8011c64:	2300      	movs	r3, #0
 8011c66:	3401      	adds	r4, #1
 8011c68:	9305      	str	r3, [sp, #20]
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	f04f 0c0a 	mov.w	ip, #10
 8011c70:	4620      	mov	r0, r4
 8011c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c76:	3a30      	subs	r2, #48	@ 0x30
 8011c78:	2a09      	cmp	r2, #9
 8011c7a:	d903      	bls.n	8011c84 <_vfiprintf_r+0x1cc>
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d0c6      	beq.n	8011c0e <_vfiprintf_r+0x156>
 8011c80:	9105      	str	r1, [sp, #20]
 8011c82:	e7c4      	b.n	8011c0e <_vfiprintf_r+0x156>
 8011c84:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c88:	4604      	mov	r4, r0
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	e7f0      	b.n	8011c70 <_vfiprintf_r+0x1b8>
 8011c8e:	ab03      	add	r3, sp, #12
 8011c90:	9300      	str	r3, [sp, #0]
 8011c92:	462a      	mov	r2, r5
 8011c94:	4b12      	ldr	r3, [pc, #72]	@ (8011ce0 <_vfiprintf_r+0x228>)
 8011c96:	a904      	add	r1, sp, #16
 8011c98:	4630      	mov	r0, r6
 8011c9a:	f3af 8000 	nop.w
 8011c9e:	4607      	mov	r7, r0
 8011ca0:	1c78      	adds	r0, r7, #1
 8011ca2:	d1d6      	bne.n	8011c52 <_vfiprintf_r+0x19a>
 8011ca4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ca6:	07d9      	lsls	r1, r3, #31
 8011ca8:	d405      	bmi.n	8011cb6 <_vfiprintf_r+0x1fe>
 8011caa:	89ab      	ldrh	r3, [r5, #12]
 8011cac:	059a      	lsls	r2, r3, #22
 8011cae:	d402      	bmi.n	8011cb6 <_vfiprintf_r+0x1fe>
 8011cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011cb2:	f7fe fd91 	bl	80107d8 <__retarget_lock_release_recursive>
 8011cb6:	89ab      	ldrh	r3, [r5, #12]
 8011cb8:	065b      	lsls	r3, r3, #25
 8011cba:	f53f af1f 	bmi.w	8011afc <_vfiprintf_r+0x44>
 8011cbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011cc0:	e71e      	b.n	8011b00 <_vfiprintf_r+0x48>
 8011cc2:	ab03      	add	r3, sp, #12
 8011cc4:	9300      	str	r3, [sp, #0]
 8011cc6:	462a      	mov	r2, r5
 8011cc8:	4b05      	ldr	r3, [pc, #20]	@ (8011ce0 <_vfiprintf_r+0x228>)
 8011cca:	a904      	add	r1, sp, #16
 8011ccc:	4630      	mov	r0, r6
 8011cce:	f7ff fa4f 	bl	8011170 <_printf_i>
 8011cd2:	e7e4      	b.n	8011c9e <_vfiprintf_r+0x1e6>
 8011cd4:	08012fd2 	.word	0x08012fd2
 8011cd8:	08012fdc 	.word	0x08012fdc
 8011cdc:	00000000 	.word	0x00000000
 8011ce0:	08011a93 	.word	0x08011a93
 8011ce4:	08012fd8 	.word	0x08012fd8

08011ce8 <__swbuf_r>:
 8011ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cea:	460e      	mov	r6, r1
 8011cec:	4614      	mov	r4, r2
 8011cee:	4605      	mov	r5, r0
 8011cf0:	b118      	cbz	r0, 8011cfa <__swbuf_r+0x12>
 8011cf2:	6a03      	ldr	r3, [r0, #32]
 8011cf4:	b90b      	cbnz	r3, 8011cfa <__swbuf_r+0x12>
 8011cf6:	f7fe fb23 	bl	8010340 <__sinit>
 8011cfa:	69a3      	ldr	r3, [r4, #24]
 8011cfc:	60a3      	str	r3, [r4, #8]
 8011cfe:	89a3      	ldrh	r3, [r4, #12]
 8011d00:	071a      	lsls	r2, r3, #28
 8011d02:	d501      	bpl.n	8011d08 <__swbuf_r+0x20>
 8011d04:	6923      	ldr	r3, [r4, #16]
 8011d06:	b943      	cbnz	r3, 8011d1a <__swbuf_r+0x32>
 8011d08:	4621      	mov	r1, r4
 8011d0a:	4628      	mov	r0, r5
 8011d0c:	f000 f82a 	bl	8011d64 <__swsetup_r>
 8011d10:	b118      	cbz	r0, 8011d1a <__swbuf_r+0x32>
 8011d12:	f04f 37ff 	mov.w	r7, #4294967295
 8011d16:	4638      	mov	r0, r7
 8011d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d1a:	6823      	ldr	r3, [r4, #0]
 8011d1c:	6922      	ldr	r2, [r4, #16]
 8011d1e:	1a98      	subs	r0, r3, r2
 8011d20:	6963      	ldr	r3, [r4, #20]
 8011d22:	b2f6      	uxtb	r6, r6
 8011d24:	4283      	cmp	r3, r0
 8011d26:	4637      	mov	r7, r6
 8011d28:	dc05      	bgt.n	8011d36 <__swbuf_r+0x4e>
 8011d2a:	4621      	mov	r1, r4
 8011d2c:	4628      	mov	r0, r5
 8011d2e:	f7ff fd0f 	bl	8011750 <_fflush_r>
 8011d32:	2800      	cmp	r0, #0
 8011d34:	d1ed      	bne.n	8011d12 <__swbuf_r+0x2a>
 8011d36:	68a3      	ldr	r3, [r4, #8]
 8011d38:	3b01      	subs	r3, #1
 8011d3a:	60a3      	str	r3, [r4, #8]
 8011d3c:	6823      	ldr	r3, [r4, #0]
 8011d3e:	1c5a      	adds	r2, r3, #1
 8011d40:	6022      	str	r2, [r4, #0]
 8011d42:	701e      	strb	r6, [r3, #0]
 8011d44:	6962      	ldr	r2, [r4, #20]
 8011d46:	1c43      	adds	r3, r0, #1
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d004      	beq.n	8011d56 <__swbuf_r+0x6e>
 8011d4c:	89a3      	ldrh	r3, [r4, #12]
 8011d4e:	07db      	lsls	r3, r3, #31
 8011d50:	d5e1      	bpl.n	8011d16 <__swbuf_r+0x2e>
 8011d52:	2e0a      	cmp	r6, #10
 8011d54:	d1df      	bne.n	8011d16 <__swbuf_r+0x2e>
 8011d56:	4621      	mov	r1, r4
 8011d58:	4628      	mov	r0, r5
 8011d5a:	f7ff fcf9 	bl	8011750 <_fflush_r>
 8011d5e:	2800      	cmp	r0, #0
 8011d60:	d0d9      	beq.n	8011d16 <__swbuf_r+0x2e>
 8011d62:	e7d6      	b.n	8011d12 <__swbuf_r+0x2a>

08011d64 <__swsetup_r>:
 8011d64:	b538      	push	{r3, r4, r5, lr}
 8011d66:	4b29      	ldr	r3, [pc, #164]	@ (8011e0c <__swsetup_r+0xa8>)
 8011d68:	4605      	mov	r5, r0
 8011d6a:	6818      	ldr	r0, [r3, #0]
 8011d6c:	460c      	mov	r4, r1
 8011d6e:	b118      	cbz	r0, 8011d78 <__swsetup_r+0x14>
 8011d70:	6a03      	ldr	r3, [r0, #32]
 8011d72:	b90b      	cbnz	r3, 8011d78 <__swsetup_r+0x14>
 8011d74:	f7fe fae4 	bl	8010340 <__sinit>
 8011d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d7c:	0719      	lsls	r1, r3, #28
 8011d7e:	d422      	bmi.n	8011dc6 <__swsetup_r+0x62>
 8011d80:	06da      	lsls	r2, r3, #27
 8011d82:	d407      	bmi.n	8011d94 <__swsetup_r+0x30>
 8011d84:	2209      	movs	r2, #9
 8011d86:	602a      	str	r2, [r5, #0]
 8011d88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d8c:	81a3      	strh	r3, [r4, #12]
 8011d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8011d92:	e033      	b.n	8011dfc <__swsetup_r+0x98>
 8011d94:	0758      	lsls	r0, r3, #29
 8011d96:	d512      	bpl.n	8011dbe <__swsetup_r+0x5a>
 8011d98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d9a:	b141      	cbz	r1, 8011dae <__swsetup_r+0x4a>
 8011d9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011da0:	4299      	cmp	r1, r3
 8011da2:	d002      	beq.n	8011daa <__swsetup_r+0x46>
 8011da4:	4628      	mov	r0, r5
 8011da6:	f7fe fd4d 	bl	8010844 <_free_r>
 8011daa:	2300      	movs	r3, #0
 8011dac:	6363      	str	r3, [r4, #52]	@ 0x34
 8011dae:	89a3      	ldrh	r3, [r4, #12]
 8011db0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011db4:	81a3      	strh	r3, [r4, #12]
 8011db6:	2300      	movs	r3, #0
 8011db8:	6063      	str	r3, [r4, #4]
 8011dba:	6923      	ldr	r3, [r4, #16]
 8011dbc:	6023      	str	r3, [r4, #0]
 8011dbe:	89a3      	ldrh	r3, [r4, #12]
 8011dc0:	f043 0308 	orr.w	r3, r3, #8
 8011dc4:	81a3      	strh	r3, [r4, #12]
 8011dc6:	6923      	ldr	r3, [r4, #16]
 8011dc8:	b94b      	cbnz	r3, 8011dde <__swsetup_r+0x7a>
 8011dca:	89a3      	ldrh	r3, [r4, #12]
 8011dcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011dd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011dd4:	d003      	beq.n	8011dde <__swsetup_r+0x7a>
 8011dd6:	4621      	mov	r1, r4
 8011dd8:	4628      	mov	r0, r5
 8011dda:	f000 f88b 	bl	8011ef4 <__smakebuf_r>
 8011dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011de2:	f013 0201 	ands.w	r2, r3, #1
 8011de6:	d00a      	beq.n	8011dfe <__swsetup_r+0x9a>
 8011de8:	2200      	movs	r2, #0
 8011dea:	60a2      	str	r2, [r4, #8]
 8011dec:	6962      	ldr	r2, [r4, #20]
 8011dee:	4252      	negs	r2, r2
 8011df0:	61a2      	str	r2, [r4, #24]
 8011df2:	6922      	ldr	r2, [r4, #16]
 8011df4:	b942      	cbnz	r2, 8011e08 <__swsetup_r+0xa4>
 8011df6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011dfa:	d1c5      	bne.n	8011d88 <__swsetup_r+0x24>
 8011dfc:	bd38      	pop	{r3, r4, r5, pc}
 8011dfe:	0799      	lsls	r1, r3, #30
 8011e00:	bf58      	it	pl
 8011e02:	6962      	ldrpl	r2, [r4, #20]
 8011e04:	60a2      	str	r2, [r4, #8]
 8011e06:	e7f4      	b.n	8011df2 <__swsetup_r+0x8e>
 8011e08:	2000      	movs	r0, #0
 8011e0a:	e7f7      	b.n	8011dfc <__swsetup_r+0x98>
 8011e0c:	2000013c 	.word	0x2000013c

08011e10 <_raise_r>:
 8011e10:	291f      	cmp	r1, #31
 8011e12:	b538      	push	{r3, r4, r5, lr}
 8011e14:	4605      	mov	r5, r0
 8011e16:	460c      	mov	r4, r1
 8011e18:	d904      	bls.n	8011e24 <_raise_r+0x14>
 8011e1a:	2316      	movs	r3, #22
 8011e1c:	6003      	str	r3, [r0, #0]
 8011e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e22:	bd38      	pop	{r3, r4, r5, pc}
 8011e24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011e26:	b112      	cbz	r2, 8011e2e <_raise_r+0x1e>
 8011e28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e2c:	b94b      	cbnz	r3, 8011e42 <_raise_r+0x32>
 8011e2e:	4628      	mov	r0, r5
 8011e30:	f000 f830 	bl	8011e94 <_getpid_r>
 8011e34:	4622      	mov	r2, r4
 8011e36:	4601      	mov	r1, r0
 8011e38:	4628      	mov	r0, r5
 8011e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e3e:	f000 b817 	b.w	8011e70 <_kill_r>
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	d00a      	beq.n	8011e5c <_raise_r+0x4c>
 8011e46:	1c59      	adds	r1, r3, #1
 8011e48:	d103      	bne.n	8011e52 <_raise_r+0x42>
 8011e4a:	2316      	movs	r3, #22
 8011e4c:	6003      	str	r3, [r0, #0]
 8011e4e:	2001      	movs	r0, #1
 8011e50:	e7e7      	b.n	8011e22 <_raise_r+0x12>
 8011e52:	2100      	movs	r1, #0
 8011e54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011e58:	4620      	mov	r0, r4
 8011e5a:	4798      	blx	r3
 8011e5c:	2000      	movs	r0, #0
 8011e5e:	e7e0      	b.n	8011e22 <_raise_r+0x12>

08011e60 <raise>:
 8011e60:	4b02      	ldr	r3, [pc, #8]	@ (8011e6c <raise+0xc>)
 8011e62:	4601      	mov	r1, r0
 8011e64:	6818      	ldr	r0, [r3, #0]
 8011e66:	f7ff bfd3 	b.w	8011e10 <_raise_r>
 8011e6a:	bf00      	nop
 8011e6c:	2000013c 	.word	0x2000013c

08011e70 <_kill_r>:
 8011e70:	b538      	push	{r3, r4, r5, lr}
 8011e72:	4d07      	ldr	r5, [pc, #28]	@ (8011e90 <_kill_r+0x20>)
 8011e74:	2300      	movs	r3, #0
 8011e76:	4604      	mov	r4, r0
 8011e78:	4608      	mov	r0, r1
 8011e7a:	4611      	mov	r1, r2
 8011e7c:	602b      	str	r3, [r5, #0]
 8011e7e:	f7ef fdf5 	bl	8001a6c <_kill>
 8011e82:	1c43      	adds	r3, r0, #1
 8011e84:	d102      	bne.n	8011e8c <_kill_r+0x1c>
 8011e86:	682b      	ldr	r3, [r5, #0]
 8011e88:	b103      	cbz	r3, 8011e8c <_kill_r+0x1c>
 8011e8a:	6023      	str	r3, [r4, #0]
 8011e8c:	bd38      	pop	{r3, r4, r5, pc}
 8011e8e:	bf00      	nop
 8011e90:	2001430c 	.word	0x2001430c

08011e94 <_getpid_r>:
 8011e94:	f7ef bde2 	b.w	8001a5c <_getpid>

08011e98 <_malloc_usable_size_r>:
 8011e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e9c:	1f18      	subs	r0, r3, #4
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	bfbc      	itt	lt
 8011ea2:	580b      	ldrlt	r3, [r1, r0]
 8011ea4:	18c0      	addlt	r0, r0, r3
 8011ea6:	4770      	bx	lr

08011ea8 <__swhatbuf_r>:
 8011ea8:	b570      	push	{r4, r5, r6, lr}
 8011eaa:	460c      	mov	r4, r1
 8011eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eb0:	2900      	cmp	r1, #0
 8011eb2:	b096      	sub	sp, #88	@ 0x58
 8011eb4:	4615      	mov	r5, r2
 8011eb6:	461e      	mov	r6, r3
 8011eb8:	da0d      	bge.n	8011ed6 <__swhatbuf_r+0x2e>
 8011eba:	89a3      	ldrh	r3, [r4, #12]
 8011ebc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011ec0:	f04f 0100 	mov.w	r1, #0
 8011ec4:	bf14      	ite	ne
 8011ec6:	2340      	movne	r3, #64	@ 0x40
 8011ec8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011ecc:	2000      	movs	r0, #0
 8011ece:	6031      	str	r1, [r6, #0]
 8011ed0:	602b      	str	r3, [r5, #0]
 8011ed2:	b016      	add	sp, #88	@ 0x58
 8011ed4:	bd70      	pop	{r4, r5, r6, pc}
 8011ed6:	466a      	mov	r2, sp
 8011ed8:	f000 f848 	bl	8011f6c <_fstat_r>
 8011edc:	2800      	cmp	r0, #0
 8011ede:	dbec      	blt.n	8011eba <__swhatbuf_r+0x12>
 8011ee0:	9901      	ldr	r1, [sp, #4]
 8011ee2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011ee6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011eea:	4259      	negs	r1, r3
 8011eec:	4159      	adcs	r1, r3
 8011eee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011ef2:	e7eb      	b.n	8011ecc <__swhatbuf_r+0x24>

08011ef4 <__smakebuf_r>:
 8011ef4:	898b      	ldrh	r3, [r1, #12]
 8011ef6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ef8:	079d      	lsls	r5, r3, #30
 8011efa:	4606      	mov	r6, r0
 8011efc:	460c      	mov	r4, r1
 8011efe:	d507      	bpl.n	8011f10 <__smakebuf_r+0x1c>
 8011f00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011f04:	6023      	str	r3, [r4, #0]
 8011f06:	6123      	str	r3, [r4, #16]
 8011f08:	2301      	movs	r3, #1
 8011f0a:	6163      	str	r3, [r4, #20]
 8011f0c:	b003      	add	sp, #12
 8011f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f10:	ab01      	add	r3, sp, #4
 8011f12:	466a      	mov	r2, sp
 8011f14:	f7ff ffc8 	bl	8011ea8 <__swhatbuf_r>
 8011f18:	9f00      	ldr	r7, [sp, #0]
 8011f1a:	4605      	mov	r5, r0
 8011f1c:	4639      	mov	r1, r7
 8011f1e:	4630      	mov	r0, r6
 8011f20:	f7fe fd04 	bl	801092c <_malloc_r>
 8011f24:	b948      	cbnz	r0, 8011f3a <__smakebuf_r+0x46>
 8011f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f2a:	059a      	lsls	r2, r3, #22
 8011f2c:	d4ee      	bmi.n	8011f0c <__smakebuf_r+0x18>
 8011f2e:	f023 0303 	bic.w	r3, r3, #3
 8011f32:	f043 0302 	orr.w	r3, r3, #2
 8011f36:	81a3      	strh	r3, [r4, #12]
 8011f38:	e7e2      	b.n	8011f00 <__smakebuf_r+0xc>
 8011f3a:	89a3      	ldrh	r3, [r4, #12]
 8011f3c:	6020      	str	r0, [r4, #0]
 8011f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f42:	81a3      	strh	r3, [r4, #12]
 8011f44:	9b01      	ldr	r3, [sp, #4]
 8011f46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011f4a:	b15b      	cbz	r3, 8011f64 <__smakebuf_r+0x70>
 8011f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f50:	4630      	mov	r0, r6
 8011f52:	f000 f81d 	bl	8011f90 <_isatty_r>
 8011f56:	b128      	cbz	r0, 8011f64 <__smakebuf_r+0x70>
 8011f58:	89a3      	ldrh	r3, [r4, #12]
 8011f5a:	f023 0303 	bic.w	r3, r3, #3
 8011f5e:	f043 0301 	orr.w	r3, r3, #1
 8011f62:	81a3      	strh	r3, [r4, #12]
 8011f64:	89a3      	ldrh	r3, [r4, #12]
 8011f66:	431d      	orrs	r5, r3
 8011f68:	81a5      	strh	r5, [r4, #12]
 8011f6a:	e7cf      	b.n	8011f0c <__smakebuf_r+0x18>

08011f6c <_fstat_r>:
 8011f6c:	b538      	push	{r3, r4, r5, lr}
 8011f6e:	4d07      	ldr	r5, [pc, #28]	@ (8011f8c <_fstat_r+0x20>)
 8011f70:	2300      	movs	r3, #0
 8011f72:	4604      	mov	r4, r0
 8011f74:	4608      	mov	r0, r1
 8011f76:	4611      	mov	r1, r2
 8011f78:	602b      	str	r3, [r5, #0]
 8011f7a:	f7ef fdd7 	bl	8001b2c <_fstat>
 8011f7e:	1c43      	adds	r3, r0, #1
 8011f80:	d102      	bne.n	8011f88 <_fstat_r+0x1c>
 8011f82:	682b      	ldr	r3, [r5, #0]
 8011f84:	b103      	cbz	r3, 8011f88 <_fstat_r+0x1c>
 8011f86:	6023      	str	r3, [r4, #0]
 8011f88:	bd38      	pop	{r3, r4, r5, pc}
 8011f8a:	bf00      	nop
 8011f8c:	2001430c 	.word	0x2001430c

08011f90 <_isatty_r>:
 8011f90:	b538      	push	{r3, r4, r5, lr}
 8011f92:	4d06      	ldr	r5, [pc, #24]	@ (8011fac <_isatty_r+0x1c>)
 8011f94:	2300      	movs	r3, #0
 8011f96:	4604      	mov	r4, r0
 8011f98:	4608      	mov	r0, r1
 8011f9a:	602b      	str	r3, [r5, #0]
 8011f9c:	f7ef fdd6 	bl	8001b4c <_isatty>
 8011fa0:	1c43      	adds	r3, r0, #1
 8011fa2:	d102      	bne.n	8011faa <_isatty_r+0x1a>
 8011fa4:	682b      	ldr	r3, [r5, #0]
 8011fa6:	b103      	cbz	r3, 8011faa <_isatty_r+0x1a>
 8011fa8:	6023      	str	r3, [r4, #0]
 8011faa:	bd38      	pop	{r3, r4, r5, pc}
 8011fac:	2001430c 	.word	0x2001430c

08011fb0 <_init>:
 8011fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fb2:	bf00      	nop
 8011fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fb6:	bc08      	pop	{r3}
 8011fb8:	469e      	mov	lr, r3
 8011fba:	4770      	bx	lr

08011fbc <_fini>:
 8011fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fbe:	bf00      	nop
 8011fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fc2:	bc08      	pop	{r3}
 8011fc4:	469e      	mov	lr, r3
 8011fc6:	4770      	bx	lr
