
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  0800e25c  0800e25c  0000f25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb70  0800eb70  0001017c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800eb70  0800eb70  0000fb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb78  0800eb78  0001017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb78  0800eb78  0000fb78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eb7c  0800eb7c  0000fb7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800eb80  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001017c  2**0
                  CONTENTS
 10 .bss          00014068  2000017c  2000017c  0001017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200141e4  200141e4  0001017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000229ec  00000000  00000000  000101ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a0d  00000000  00000000  00032b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e50  00000000  00000000  000385a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001783  00000000  00000000  0003a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000284fa  00000000  00000000  0003bb7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a9f0  00000000  00000000  00064075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc81e  00000000  00000000  0008ea65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016b283  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008358  00000000  00000000  0016b2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00173620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000017c 	.word	0x2000017c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e244 	.word	0x0800e244

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000180 	.word	0x20000180
 80001cc:	0800e244 	.word	0x0800e244

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f001 f9cd 	bl	8001970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8a3 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 fb3b 	bl	8000c54 <MX_GPIO_Init>
  MX_DMA_Init();
 80005de:	f000 fb09 	bl	8000bf4 <MX_DMA_Init>
  MX_SPI1_Init();
 80005e2:	f000 f991 	bl	8000908 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005e6:	f000 fab1 	bl	8000b4c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005ea:	f000 fad9 	bl	8000ba0 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80005ee:	f000 f92f 	bl	8000850 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005f2:	f000 fa81 	bl	8000af8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80005f6:	f000 f8fd 	bl	80007f4 <MX_I2C1_Init>
  MX_TIM4_Init();
 80005fa:	f000 f9f1 	bl	80009e0 <MX_TIM4_Init>
  MX_SPI2_Init();
 80005fe:	f000 f9b9 	bl	8000974 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000602:	f007 f839 	bl	8007678 <MX_FATFS_Init>
  MX_I2S3_Init();
 8000606:	f000 f951 	bl	80008ac <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  // init
  MsgHandler_Init(&huart2);
 800060a:	4834      	ldr	r0, [pc, #208]	@ (80006dc <main+0x110>)
 800060c:	f000 fc0a 	bl	8000e24 <MsgHandler_Init>
  ESP32_Init(&huart3, &huart2);
 8000610:	4932      	ldr	r1, [pc, #200]	@ (80006dc <main+0x110>)
 8000612:	4833      	ldr	r0, [pc, #204]	@ (80006e0 <main+0x114>)
 8000614:	f006 ff2e 	bl	8007474 <ESP32_Init>
  LCD2004_Init(&hi2c1, 0x4E);
 8000618:	214e      	movs	r1, #78	@ 0x4e
 800061a:	4832      	ldr	r0, [pc, #200]	@ (80006e4 <main+0x118>)
 800061c:	f00a fc44 	bl	800aea8 <LCD2004_Init>
  LED_Init();
 8000620:	f00a fc96 	bl	800af50 <LED_Init>
  SD_Init(&huart2);
 8000624:	482d      	ldr	r0, [pc, #180]	@ (80006dc <main+0x110>)
 8000626:	f00c fa8f 	bl	800cb48 <SD_Init>
  Shell_Init(&huart2);
 800062a:	482c      	ldr	r0, [pc, #176]	@ (80006dc <main+0x110>)
 800062c:	f00d f84a 	bl	800d6c4 <Shell_Init>


//  my_WM8978_Init();
  //OS Resource
  MsgHandler_OS_Resources_Init();
 8000630:	f000 fc08 	bl	8000e44 <MsgHandler_OS_Resources_Init>
  ESP32_OS_Resources_Init();
 8000634:	f006 ff34 	bl	80074a0 <ESP32_OS_Resources_Init>
  LCD2004_OS_Resources_Init();
 8000638:	f00a fc4c 	bl	800aed4 <LCD2004_OS_Resources_Init>
  LED_OS_Resources_Init();
 800063c:	f00a fc9a 	bl	800af74 <LED_OS_Resources_Init>
  SD_OS_Resources_Init();
 8000640:	f00c fa94 	bl	800cb6c <SD_OS_Resources_Init>

//   WM8978_Palyer();
  //Task
  xTaskCreate(ESP32Sender, "ESP32Sender", 128, NULL, 1, NULL);
 8000644:	2300      	movs	r3, #0
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	2301      	movs	r3, #1
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2300      	movs	r3, #0
 800064e:	2280      	movs	r2, #128	@ 0x80
 8000650:	4925      	ldr	r1, [pc, #148]	@ (80006e8 <main+0x11c>)
 8000652:	4826      	ldr	r0, [pc, #152]	@ (80006ec <main+0x120>)
 8000654:	f008 fc1c 	bl	8008e90 <xTaskCreate>
  xTaskCreate(ESP32Receiver, "ESP32Receiver", 256, NULL, 2, NULL);
 8000658:	2300      	movs	r3, #0
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	2302      	movs	r3, #2
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2300      	movs	r3, #0
 8000662:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000666:	4922      	ldr	r1, [pc, #136]	@ (80006f0 <main+0x124>)
 8000668:	4822      	ldr	r0, [pc, #136]	@ (80006f4 <main+0x128>)
 800066a:	f008 fc11 	bl	8008e90 <xTaskCreate>
  xTaskCreate(LCDHandler, "LCDHandler", 128, NULL, 1, NULL);
 800066e:	2300      	movs	r3, #0
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	2301      	movs	r3, #1
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2300      	movs	r3, #0
 8000678:	2280      	movs	r2, #128	@ 0x80
 800067a:	491f      	ldr	r1, [pc, #124]	@ (80006f8 <main+0x12c>)
 800067c:	481f      	ldr	r0, [pc, #124]	@ (80006fc <main+0x130>)
 800067e:	f008 fc07 	bl	8008e90 <xTaskCreate>
  xTaskCreate(ShellHandler, "ShellHandler", 128, NULL, 2, NULL);
 8000682:	2300      	movs	r3, #0
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2302      	movs	r3, #2
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2300      	movs	r3, #0
 800068c:	2280      	movs	r2, #128	@ 0x80
 800068e:	491c      	ldr	r1, [pc, #112]	@ (8000700 <main+0x134>)
 8000690:	481c      	ldr	r0, [pc, #112]	@ (8000704 <main+0x138>)
 8000692:	f008 fbfd 	bl	8008e90 <xTaskCreate>
  xTaskCreate(LEDHandler, "LEDHandler", 128, NULL, 1, NULL);
 8000696:	2300      	movs	r3, #0
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	2301      	movs	r3, #1
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2300      	movs	r3, #0
 80006a0:	2280      	movs	r2, #128	@ 0x80
 80006a2:	4919      	ldr	r1, [pc, #100]	@ (8000708 <main+0x13c>)
 80006a4:	4819      	ldr	r0, [pc, #100]	@ (800070c <main+0x140>)
 80006a6:	f008 fbf3 	bl	8008e90 <xTaskCreate>
  xTaskCreate(LEDTask, "LEDTask", 128, NULL, 1, NULL);
 80006aa:	2300      	movs	r3, #0
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	2300      	movs	r3, #0
 80006b4:	2280      	movs	r2, #128	@ 0x80
 80006b6:	4916      	ldr	r1, [pc, #88]	@ (8000710 <main+0x144>)
 80006b8:	4816      	ldr	r0, [pc, #88]	@ (8000714 <main+0x148>)
 80006ba:	f008 fbe9 	bl	8008e90 <xTaskCreate>
  xTaskCreate(SDParseHandler, "SDParseHandler", 512, NULL, 1, NULL);
 80006be:	2300      	movs	r3, #0
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	2301      	movs	r3, #1
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2300      	movs	r3, #0
 80006c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006cc:	4912      	ldr	r1, [pc, #72]	@ (8000718 <main+0x14c>)
 80006ce:	4813      	ldr	r0, [pc, #76]	@ (800071c <main+0x150>)
 80006d0:	f008 fbde 	bl	8008e90 <xTaskCreate>
//  xTaskCreate(WM8978_Demo, "WM8978_Demo", 512, NULL, 1, NULL);
  // xTaskCreate(NECHandler, "NECHandler", 128, NULL, 1, NULL);

  vTaskStartScheduler();
 80006d4:	f008 fd52 	bl	800917c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <main+0x10c>
 80006dc:	20000488 	.word	0x20000488
 80006e0:	200004d0 	.word	0x200004d0
 80006e4:	20000198 	.word	0x20000198
 80006e8:	0800e2a0 	.word	0x0800e2a0
 80006ec:	08007511 	.word	0x08007511
 80006f0:	0800e2ac 	.word	0x0800e2ac
 80006f4:	08007639 	.word	0x08007639
 80006f8:	0800e2bc 	.word	0x0800e2bc
 80006fc:	0800af01 	.word	0x0800af01
 8000700:	0800e2c8 	.word	0x0800e2c8
 8000704:	0800d701 	.word	0x0800d701
 8000708:	0800e2d8 	.word	0x0800e2d8
 800070c:	0800afdd 	.word	0x0800afdd
 8000710:	0800e2e4 	.word	0x0800e2e4
 8000714:	0800b065 	.word	0x0800b065
 8000718:	0800e2ec 	.word	0x0800e2ec
 800071c:	0800ce71 	.word	0x0800ce71

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	@ 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	2230      	movs	r2, #48	@ 0x30
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f00d f8d2 	bl	800d8d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	4a27      	ldr	r2, [pc, #156]	@ (80007ec <SystemClock_Config+0xcc>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	@ 0x40
 8000754:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b22      	ldr	r3, [pc, #136]	@ (80007f0 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a21      	ldr	r2, [pc, #132]	@ (80007f0 <SystemClock_Config+0xd0>)
 800076a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2310      	movs	r3, #16
 8000786:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000790:	2308      	movs	r3, #8
 8000792:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000794:	2332      	movs	r3, #50	@ 0x32
 8000796:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000798:	2304      	movs	r3, #4
 800079a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800079c:	2307      	movs	r3, #7
 800079e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	4618      	mov	r0, r3
 80007a6:	f003 f921 	bl	80039ec <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b0:	f000 fb31 	bl	8000e16 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2302      	movs	r3, #2
 80007ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 fb82 	bl	8003edc <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007de:	f000 fb1a 	bl	8000e16 <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3750      	adds	r7, #80	@ 0x50
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_I2C1_Init+0x50>)
 80007fa:	4a13      	ldr	r2, [pc, #76]	@ (8000848 <MX_I2C1_Init+0x54>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000800:	4a12      	ldr	r2, [pc, #72]	@ (800084c <MX_I2C1_Init+0x58>)
 8000802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000812:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000816:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000818:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <MX_I2C1_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000824:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_I2C1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000832:	f001 ff9d 	bl	8002770 <HAL_I2C_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800083c:	f000 faeb 	bl	8000e16 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000198 	.word	0x20000198
 8000848:	40005400 	.word	0x40005400
 800084c:	000186a0 	.word	0x000186a0

08000850 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <MX_I2C2_Init+0x50>)
 8000856:	4a13      	ldr	r2, [pc, #76]	@ (80008a4 <MX_I2C2_Init+0x54>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_I2C2_Init+0x50>)
 800085c:	4a12      	ldr	r2, [pc, #72]	@ (80008a8 <MX_I2C2_Init+0x58>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_I2C2_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_I2C2_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_I2C2_Init+0x50>)
 800086e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000872:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <MX_I2C2_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_I2C2_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000880:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <MX_I2C2_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_I2C2_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <MX_I2C2_Init+0x50>)
 800088e:	f001 ff6f 	bl	8002770 <HAL_I2C_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000898:	f000 fabd 	bl	8000e16 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200001ec 	.word	0x200001ec
 80008a4:	40005800 	.word	0x40005800
 80008a8:	000186a0 	.word	0x000186a0

080008ac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008b0:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <MX_I2S3_Init+0x54>)
 80008b2:	4a14      	ldr	r2, [pc, #80]	@ (8000904 <MX_I2S3_Init+0x58>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008b6:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <MX_I2S3_Init+0x54>)
 80008b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008bc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008be:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <MX_I2S3_Init+0x54>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_I2S3_Init+0x54>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <MX_I2S3_Init+0x54>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80008d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <MX_I2S3_Init+0x54>)
 80008d2:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80008d6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_I2S3_Init+0x54>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008de:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <MX_I2S3_Init+0x54>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_I2S3_Init+0x54>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_I2S3_Init+0x54>)
 80008ec:	f002 fbde 	bl	80030ac <HAL_I2S_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008f6:	f000 fa8e 	bl	8000e16 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000240 	.word	0x20000240
 8000904:	40003c00 	.word	0x40003c00

08000908 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800090c:	4b17      	ldr	r3, [pc, #92]	@ (800096c <MX_SPI1_Init+0x64>)
 800090e:	4a18      	ldr	r2, [pc, #96]	@ (8000970 <MX_SPI1_Init+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000912:	4b16      	ldr	r3, [pc, #88]	@ (800096c <MX_SPI1_Init+0x64>)
 8000914:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000918:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800091a:	4b14      	ldr	r3, [pc, #80]	@ (800096c <MX_SPI1_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <MX_SPI1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_SPI1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <MX_SPI1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <MX_SPI1_Init+0x64>)
 8000934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000938:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_SPI1_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000940:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <MX_SPI1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <MX_SPI1_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	@ (800096c <MX_SPI1_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_SPI1_Init+0x64>)
 8000954:	220a      	movs	r2, #10
 8000956:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	@ (800096c <MX_SPI1_Init+0x64>)
 800095a:	f003 fe53 	bl	8004604 <HAL_SPI_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000964:	f000 fa57 	bl	8000e16 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000348 	.word	0x20000348
 8000970:	40013000 	.word	0x40013000

08000974 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000978:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <MX_SPI2_Init+0x64>)
 800097a:	4a18      	ldr	r2, [pc, #96]	@ (80009dc <MX_SPI2_Init+0x68>)
 800097c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800097e:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <MX_SPI2_Init+0x64>)
 8000980:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000984:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000986:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_SPI2_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <MX_SPI2_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_SPI2_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_SPI2_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_SPI2_Init+0x64>)
 80009a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_SPI2_Init+0x64>)
 80009a8:	2230      	movs	r2, #48	@ 0x30
 80009aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <MX_SPI2_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_SPI2_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b8:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <MX_SPI2_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_SPI2_Init+0x64>)
 80009c0:	220a      	movs	r2, #10
 80009c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_SPI2_Init+0x64>)
 80009c6:	f003 fe1d 	bl	8004604 <HAL_SPI_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009d0:	f000 fa21 	bl	8000e16 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200003a0 	.word	0x200003a0
 80009dc:	40003800 	.word	0x40003800

080009e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08e      	sub	sp, #56	@ 0x38
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f4:	f107 0320 	add.w	r3, r7, #32
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
 8000a0c:	615a      	str	r2, [r3, #20]
 8000a0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a10:	4b37      	ldr	r3, [pc, #220]	@ (8000af0 <MX_TIM4_Init+0x110>)
 8000a12:	4a38      	ldr	r2, [pc, #224]	@ (8000af4 <MX_TIM4_Init+0x114>)
 8000a14:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000a16:	4b36      	ldr	r3, [pc, #216]	@ (8000af0 <MX_TIM4_Init+0x110>)
 8000a18:	2253      	movs	r2, #83	@ 0x53
 8000a1a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b34      	ldr	r3, [pc, #208]	@ (8000af0 <MX_TIM4_Init+0x110>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8000a22:	4b33      	ldr	r3, [pc, #204]	@ (8000af0 <MX_TIM4_Init+0x110>)
 8000a24:	22ff      	movs	r2, #255	@ 0xff
 8000a26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b31      	ldr	r3, [pc, #196]	@ (8000af0 <MX_TIM4_Init+0x110>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2e:	4b30      	ldr	r3, [pc, #192]	@ (8000af0 <MX_TIM4_Init+0x110>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a34:	482e      	ldr	r0, [pc, #184]	@ (8000af0 <MX_TIM4_Init+0x110>)
 8000a36:	f004 fa37 	bl	8004ea8 <HAL_TIM_Base_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000a40:	f000 f9e9 	bl	8000e16 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4827      	ldr	r0, [pc, #156]	@ (8000af0 <MX_TIM4_Init+0x110>)
 8000a52:	f004 fdbd 	bl	80055d0 <HAL_TIM_ConfigClockSource>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000a5c:	f000 f9db 	bl	8000e16 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a60:	4823      	ldr	r0, [pc, #140]	@ (8000af0 <MX_TIM4_Init+0x110>)
 8000a62:	f004 fae1 	bl	8005028 <HAL_TIM_PWM_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000a6c:	f000 f9d3 	bl	8000e16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a78:	f107 0320 	add.w	r3, r7, #32
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	481c      	ldr	r0, [pc, #112]	@ (8000af0 <MX_TIM4_Init+0x110>)
 8000a80:	f005 f9b2 	bl	8005de8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000a8a:	f000 f9c4 	bl	8000e16 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a8e:	2360      	movs	r3, #96	@ 0x60
 8000a90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4812      	ldr	r0, [pc, #72]	@ (8000af0 <MX_TIM4_Init+0x110>)
 8000aa6:	f004 fcd1 	bl	800544c <HAL_TIM_PWM_ConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000ab0:	f000 f9b1 	bl	8000e16 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <MX_TIM4_Init+0x110>)
 8000abc:	f004 fcc6 	bl	800544c <HAL_TIM_PWM_ConfigChannel>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000ac6:	f000 f9a6 	bl	8000e16 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	220c      	movs	r2, #12
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4807      	ldr	r0, [pc, #28]	@ (8000af0 <MX_TIM4_Init+0x110>)
 8000ad2:	f004 fcbb 	bl	800544c <HAL_TIM_PWM_ConfigChannel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8000adc:	f000 f99b 	bl	8000e16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ae0:	4803      	ldr	r0, [pc, #12]	@ (8000af0 <MX_TIM4_Init+0x110>)
 8000ae2:	f000 fce1 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 8000ae6:	bf00      	nop
 8000ae8:	3738      	adds	r7, #56	@ 0x38
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200003f8 	.word	0x200003f8
 8000af4:	40000800 	.word	0x40000800

08000af8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	@ (8000b48 <MX_USART1_UART_Init+0x50>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000b04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000b30:	f005 f9ea 	bl	8005f08 <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b3a:	f000 f96c 	bl	8000e16 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000440 	.word	0x20000440
 8000b48:	40011000 	.word	0x40011000

08000b4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <MX_USART2_UART_Init+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b84:	f005 f9c0 	bl	8005f08 <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b8e:	f000 f942 	bl	8000e16 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000488 	.word	0x20000488
 8000b9c:	40004400 	.word	0x40004400

08000ba0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_USART3_UART_Init+0x4c>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <MX_USART3_UART_Init+0x50>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <MX_USART3_UART_Init+0x4c>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <MX_USART3_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <MX_USART3_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <MX_USART3_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_USART3_UART_Init+0x4c>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <MX_USART3_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <MX_USART3_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_USART3_UART_Init+0x4c>)
 8000bd8:	f005 f996 	bl	8005f08 <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000be2:	f000 f918 	bl	8000e16 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200004d0 	.word	0x200004d0
 8000bf0:	40004800 	.word	0x40004800

08000bf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <MX_DMA_Init+0x5c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a13      	ldr	r2, [pc, #76]	@ (8000c50 <MX_DMA_Init+0x5c>)
 8000c04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_DMA_Init+0x5c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	200c      	movs	r0, #12
 8000c1c:	f000 ffc6 	bl	8001bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c20:	200c      	movs	r0, #12
 8000c22:	f000 ffdf 	bl	8001be4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	200d      	movs	r0, #13
 8000c2c:	f000 ffbe 	bl	8001bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c30:	200d      	movs	r0, #13
 8000c32:	f000 ffd7 	bl	8001be4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2010      	movs	r0, #16
 8000c3c:	f000 ffb6 	bl	8001bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c40:	2010      	movs	r0, #16
 8000c42:	f000 ffcf 	bl	8001be4 <HAL_NVIC_EnableIRQ>

}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	@ 0x30
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
 8000c6e:	4b5e      	ldr	r3, [pc, #376]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a5d      	ldr	r2, [pc, #372]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b5b      	ldr	r3, [pc, #364]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	4b57      	ldr	r3, [pc, #348]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a56      	ldr	r2, [pc, #344]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b54      	ldr	r3, [pc, #336]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b50      	ldr	r3, [pc, #320]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a4f      	ldr	r2, [pc, #316]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b4d      	ldr	r3, [pc, #308]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b49      	ldr	r3, [pc, #292]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a48      	ldr	r2, [pc, #288]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b46      	ldr	r3, [pc, #280]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b42      	ldr	r3, [pc, #264]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a41      	ldr	r2, [pc, #260]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b3f      	ldr	r3, [pc, #252]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a3a      	ldr	r2, [pc, #232]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000d00:	f043 0310 	orr.w	r3, r3, #16
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b38      	ldr	r3, [pc, #224]	@ (8000de8 <MX_GPIO_Init+0x194>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0310 	and.w	r3, r3, #16
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	2101      	movs	r1, #1
 8000d16:	4835      	ldr	r0, [pc, #212]	@ (8000dec <MX_GPIO_Init+0x198>)
 8000d18:	f001 fd10 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_CS_Pin|GPIO_PIN_0|Audio_RST_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f240 4111 	movw	r1, #1041	@ 0x411
 8000d22:	4833      	ldr	r0, [pc, #204]	@ (8000df0 <MX_GPIO_Init+0x19c>)
 8000d24:	f001 fd0a 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2140      	movs	r1, #64	@ 0x40
 8000d2c:	482f      	ldr	r0, [pc, #188]	@ (8000dec <MX_GPIO_Init+0x198>)
 8000d2e:	f001 fd05 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC6 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_6;
 8000d32:	2341      	movs	r3, #65	@ 0x41
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4619      	mov	r1, r3
 8000d48:	4828      	ldr	r0, [pc, #160]	@ (8000dec <MX_GPIO_Init+0x198>)
 8000d4a:	f001 fb5b 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d4e:	2308      	movs	r3, #8
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4820      	ldr	r0, [pc, #128]	@ (8000dec <MX_GPIO_Init+0x198>)
 8000d6a:	f001 fb4b 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin PD0 Audio_RST_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|GPIO_PIN_0|Audio_RST_Pin;
 8000d6e:	f240 4311 	movw	r3, #1041	@ 0x411
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	481a      	ldr	r0, [pc, #104]	@ (8000df0 <MX_GPIO_Init+0x19c>)
 8000d88:	f001 fb3c 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000d8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4814      	ldr	r0, [pc, #80]	@ (8000df4 <MX_GPIO_Init+0x1a0>)
 8000da2:	f001 fb2f 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin;
 8000da6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000db8:	230a      	movs	r3, #10
 8000dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480c      	ldr	r0, [pc, #48]	@ (8000df4 <MX_GPIO_Init+0x1a0>)
 8000dc4:	f001 fb1e 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000dc8:	2320      	movs	r3, #32
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <MX_GPIO_Init+0x19c>)
 8000ddc:	f001 fb12 	bl	8002404 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000de0:	bf00      	nop
 8000de2:	3730      	adds	r7, #48	@ 0x30
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020800 	.word	0x40020800
 8000df0:	40020c00 	.word	0x40020c00
 8000df4:	40020000 	.word	0x40020000

08000df8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e08:	d101      	bne.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000e0a:	f000 fdd3 	bl	80019b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1a:	b672      	cpsid	i
}
 8000e1c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1e:	bf00      	nop
 8000e20:	e7fd      	b.n	8000e1e <Error_Handler+0x8>
	...

08000e24 <MsgHandler_Init>:
SemaphoreHandle_t msgHandlerRx;
SemaphoreHandle_t ReceiveMsgTimeoutMutex;
int ReceiveMsgTimeout = 10;

void MsgHandler_Init(UART_HandleTypeDef* shell_huart)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	msgHandler_shell_huart = shell_huart;
 8000e2c:	4a04      	ldr	r2, [pc, #16]	@ (8000e40 <MsgHandler_Init+0x1c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000578 	.word	0x20000578

08000e44 <MsgHandler_OS_Resources_Init>:

void MsgHandler_OS_Resources_Init()
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	msgHandlerTx = xSemaphoreCreateMutex();
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f007 faf3 	bl	8008434 <xQueueCreateMutex>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a07      	ldr	r2, [pc, #28]	@ (8000e70 <MsgHandler_OS_Resources_Init+0x2c>)
 8000e52:	6013      	str	r3, [r2, #0]
	msgHandlerRx = xSemaphoreCreateMutex();
 8000e54:	2001      	movs	r0, #1
 8000e56:	f007 faed 	bl	8008434 <xQueueCreateMutex>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a05      	ldr	r2, [pc, #20]	@ (8000e74 <MsgHandler_OS_Resources_Init+0x30>)
 8000e5e:	6013      	str	r3, [r2, #0]
	ReceiveMsgTimeoutMutex = xSemaphoreCreateMutex();
 8000e60:	2001      	movs	r0, #1
 8000e62:	f007 fae7 	bl	8008434 <xQueueCreateMutex>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a03      	ldr	r2, [pc, #12]	@ (8000e78 <MsgHandler_OS_Resources_Init+0x34>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	2000057c 	.word	0x2000057c
 8000e74:	20000580 	.word	0x20000580
 8000e78:	20000584 	.word	0x20000584

08000e7c <SendChar>:

void SendChar(UART_HandleTypeDef* huart, const char c)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
	SendMsg(huart, "%c", c);
 8000e88:	78fb      	ldrb	r3, [r7, #3]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4903      	ldr	r1, [pc, #12]	@ (8000e9c <SendChar+0x20>)
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f000 f806 	bl	8000ea0 <SendMsg>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	0800e2fc 	.word	0x0800e2fc

08000ea0 <SendMsg>:

void SendMsg(UART_HandleTypeDef* huart, const char* fmt, ...)
{
 8000ea0:	b40e      	push	{r1, r2, r3}
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b085      	sub	sp, #20
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
	if(msgHandlerTx){
 8000eaa:	4b23      	ldr	r3, [pc, #140]	@ (8000f38 <SendMsg+0x98>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d026      	beq.n	8000f00 <SendMsg+0x60>
		if (xSemaphoreTake(msgHandlerTx, portMAX_DELAY) == pdPASS) {
 8000eb2:	4b21      	ldr	r3, [pc, #132]	@ (8000f38 <SendMsg+0x98>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f04f 31ff 	mov.w	r1, #4294967295
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f007 fd52 	bl	8008964 <xQueueSemaphoreTake>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d131      	bne.n	8000f2a <SendMsg+0x8a>
			static char send_data[256];
			va_list args;
			va_start(args, fmt);
 8000ec6:	f107 0320 	add.w	r3, r7, #32
 8000eca:	60fb      	str	r3, [r7, #12]
			vsnprintf(send_data, sizeof(send_data), fmt, args);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ed4:	4819      	ldr	r0, [pc, #100]	@ (8000f3c <SendMsg+0x9c>)
 8000ed6:	f00c fcf1 	bl	800d8bc <vsniprintf>
			va_end(args);
			HAL_UART_Transmit(huart, (uint8_t *)send_data, strlen(send_data), HAL_MAX_DELAY);
 8000eda:	4818      	ldr	r0, [pc, #96]	@ (8000f3c <SendMsg+0x9c>)
 8000edc:	f7ff f982 	bl	80001e4 <strlen>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee8:	4914      	ldr	r1, [pc, #80]	@ (8000f3c <SendMsg+0x9c>)
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f005 f85c 	bl	8005fa8 <HAL_UART_Transmit>

			xSemaphoreGive(msgHandlerTx);
 8000ef0:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <SendMsg+0x98>)
 8000ef2:	6818      	ldr	r0, [r3, #0]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	f007 fab3 	bl	8008464 <xQueueGenericSend>
		vsnprintf(send_data, sizeof(send_data), fmt, args);
		va_end(args);
		HAL_UART_Transmit(huart, (uint8_t *)send_data, strlen(send_data), HAL_MAX_DELAY);

	}
}
 8000efe:	e014      	b.n	8000f2a <SendMsg+0x8a>
		va_start(args, fmt);
 8000f00:	f107 0320 	add.w	r3, r7, #32
 8000f04:	60bb      	str	r3, [r7, #8]
		vsnprintf(send_data, sizeof(send_data), fmt, args);
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	69fa      	ldr	r2, [r7, #28]
 8000f0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f0e:	480c      	ldr	r0, [pc, #48]	@ (8000f40 <SendMsg+0xa0>)
 8000f10:	f00c fcd4 	bl	800d8bc <vsniprintf>
		HAL_UART_Transmit(huart, (uint8_t *)send_data, strlen(send_data), HAL_MAX_DELAY);
 8000f14:	480a      	ldr	r0, [pc, #40]	@ (8000f40 <SendMsg+0xa0>)
 8000f16:	f7ff f965 	bl	80001e4 <strlen>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	4907      	ldr	r1, [pc, #28]	@ (8000f40 <SendMsg+0xa0>)
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f005 f83f 	bl	8005fa8 <HAL_UART_Transmit>
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f34:	b003      	add	sp, #12
 8000f36:	4770      	bx	lr
 8000f38:	2000057c 	.word	0x2000057c
 8000f3c:	20000588 	.word	0x20000588
 8000f40:	20000688 	.word	0x20000688

08000f44 <ReceiveChar>:

int ReceiveChar(UART_HandleTypeDef* huart, char* receive_data)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	if (xSemaphoreTake(msgHandlerRx, portMAX_DELAY) == pdPASS) {
 8000f4e:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <ReceiveChar+0x5c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f04f 31ff 	mov.w	r1, #4294967295
 8000f56:	4618      	mov	r0, r3
 8000f58:	f007 fd04 	bl	8008964 <xQueueSemaphoreTake>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d119      	bne.n	8000f96 <ReceiveChar+0x52>
		if (HAL_UART_Receive(huart, (uint8_t *)receive_data, 1, 500) == HAL_OK) {
 8000f62:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f66:	2201      	movs	r2, #1
 8000f68:	6839      	ldr	r1, [r7, #0]
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f005 f8a7 	bl	80060be <HAL_UART_Receive>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d108      	bne.n	8000f88 <ReceiveChar+0x44>
			xSemaphoreGive(msgHandlerRx);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <ReceiveChar+0x5c>)
 8000f78:	6818      	ldr	r0, [r3, #0]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	f007 fa70 	bl	8008464 <xQueueGenericSend>
			return HAL_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	e007      	b.n	8000f98 <ReceiveChar+0x54>
		}
		xSemaphoreGive(msgHandlerRx);
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <ReceiveChar+0x5c>)
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	f007 fa67 	bl	8008464 <xQueueGenericSend>
	}

	return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000580 	.word	0x20000580

08000fa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <HAL_MspInit+0x4c>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff0 <HAL_MspInit+0x4c>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff0 <HAL_MspInit+0x4c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <HAL_MspInit+0x4c>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fce:	4a08      	ldr	r2, [pc, #32]	@ (8000ff0 <HAL_MspInit+0x4c>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_MspInit+0x4c>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	@ 0x30
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a33      	ldr	r2, [pc, #204]	@ (80010e0 <HAL_I2C_MspInit+0xec>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d12d      	bne.n	8001072 <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
 800101a:	4b32      	ldr	r3, [pc, #200]	@ (80010e4 <HAL_I2C_MspInit+0xf0>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a31      	ldr	r2, [pc, #196]	@ (80010e4 <HAL_I2C_MspInit+0xf0>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b2f      	ldr	r3, [pc, #188]	@ (80010e4 <HAL_I2C_MspInit+0xf0>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
 8001030:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001032:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001038:	2312      	movs	r3, #18
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001044:	2304      	movs	r3, #4
 8001046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	4826      	ldr	r0, [pc, #152]	@ (80010e8 <HAL_I2C_MspInit+0xf4>)
 8001050:	f001 f9d8 	bl	8002404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <HAL_I2C_MspInit+0xf0>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105c:	4a21      	ldr	r2, [pc, #132]	@ (80010e4 <HAL_I2C_MspInit+0xf0>)
 800105e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001062:	6413      	str	r3, [r2, #64]	@ 0x40
 8001064:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <HAL_I2C_MspInit+0xf0>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001070:	e031      	b.n	80010d6 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a1d      	ldr	r2, [pc, #116]	@ (80010ec <HAL_I2C_MspInit+0xf8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d12c      	bne.n	80010d6 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <HAL_I2C_MspInit+0xf0>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001084:	4a17      	ldr	r2, [pc, #92]	@ (80010e4 <HAL_I2C_MspInit+0xf0>)
 8001086:	f043 0302 	orr.w	r3, r3, #2
 800108a:	6313      	str	r3, [r2, #48]	@ 0x30
 800108c:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <HAL_I2C_MspInit+0xf0>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001098:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109e:	2312      	movs	r3, #18
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010aa:	2304      	movs	r3, #4
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <HAL_I2C_MspInit+0xf4>)
 80010b6:	f001 f9a5 	bl	8002404 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <HAL_I2C_MspInit+0xf0>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	4a08      	ldr	r2, [pc, #32]	@ (80010e4 <HAL_I2C_MspInit+0xf0>)
 80010c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_I2C_MspInit+0xf0>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
}
 80010d6:	bf00      	nop
 80010d8:	3730      	adds	r7, #48	@ 0x30
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40005400 	.word	0x40005400
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40005800 	.word	0x40005800

080010f0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08e      	sub	sp, #56	@ 0x38
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a68      	ldr	r2, [pc, #416]	@ (80012bc <HAL_I2S_MspInit+0x1cc>)
 800111c:	4293      	cmp	r3, r2
 800111e:	f040 80c8 	bne.w	80012b2 <HAL_I2S_MspInit+0x1c2>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001122:	2301      	movs	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001126:	23c0      	movs	r3, #192	@ 0xc0
 8001128:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800112a:	2302      	movs	r3, #2
 800112c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4618      	mov	r0, r3
 8001134:	f003 f924 	bl	8004380 <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800113e:	f7ff fe6a 	bl	8000e16 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b5e      	ldr	r3, [pc, #376]	@ (80012c0 <HAL_I2S_MspInit+0x1d0>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	4a5d      	ldr	r2, [pc, #372]	@ (80012c0 <HAL_I2S_MspInit+0x1d0>)
 800114c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001150:	6413      	str	r3, [r2, #64]	@ 0x40
 8001152:	4b5b      	ldr	r3, [pc, #364]	@ (80012c0 <HAL_I2S_MspInit+0x1d0>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b57      	ldr	r3, [pc, #348]	@ (80012c0 <HAL_I2S_MspInit+0x1d0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a56      	ldr	r2, [pc, #344]	@ (80012c0 <HAL_I2S_MspInit+0x1d0>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b54      	ldr	r3, [pc, #336]	@ (80012c0 <HAL_I2S_MspInit+0x1d0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b50      	ldr	r3, [pc, #320]	@ (80012c0 <HAL_I2S_MspInit+0x1d0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a4f      	ldr	r2, [pc, #316]	@ (80012c0 <HAL_I2S_MspInit+0x1d0>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b4d      	ldr	r3, [pc, #308]	@ (80012c0 <HAL_I2S_MspInit+0x1d0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001196:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011a8:	2306      	movs	r3, #6
 80011aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b0:	4619      	mov	r1, r3
 80011b2:	4844      	ldr	r0, [pc, #272]	@ (80012c4 <HAL_I2S_MspInit+0x1d4>)
 80011b4:	f001 f926 	bl	8002404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80011b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011ca:	2306      	movs	r3, #6
 80011cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d2:	4619      	mov	r1, r3
 80011d4:	483c      	ldr	r0, [pc, #240]	@ (80012c8 <HAL_I2S_MspInit+0x1d8>)
 80011d6:	f001 f915 	bl	8002404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 80011ec:	2305      	movs	r3, #5
 80011ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f4:	4619      	mov	r1, r3
 80011f6:	4833      	ldr	r0, [pc, #204]	@ (80012c4 <HAL_I2S_MspInit+0x1d4>)
 80011f8:	f001 f904 	bl	8002404 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80011fc:	4b33      	ldr	r3, [pc, #204]	@ (80012cc <HAL_I2S_MspInit+0x1dc>)
 80011fe:	4a34      	ldr	r2, [pc, #208]	@ (80012d0 <HAL_I2S_MspInit+0x1e0>)
 8001200:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001202:	4b32      	ldr	r3, [pc, #200]	@ (80012cc <HAL_I2S_MspInit+0x1dc>)
 8001204:	2200      	movs	r2, #0
 8001206:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001208:	4b30      	ldr	r3, [pc, #192]	@ (80012cc <HAL_I2S_MspInit+0x1dc>)
 800120a:	2240      	movs	r2, #64	@ 0x40
 800120c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800120e:	4b2f      	ldr	r3, [pc, #188]	@ (80012cc <HAL_I2S_MspInit+0x1dc>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001214:	4b2d      	ldr	r3, [pc, #180]	@ (80012cc <HAL_I2S_MspInit+0x1dc>)
 8001216:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800121a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800121c:	4b2b      	ldr	r3, [pc, #172]	@ (80012cc <HAL_I2S_MspInit+0x1dc>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001222:	4b2a      	ldr	r3, [pc, #168]	@ (80012cc <HAL_I2S_MspInit+0x1dc>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001228:	4b28      	ldr	r3, [pc, #160]	@ (80012cc <HAL_I2S_MspInit+0x1dc>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800122e:	4b27      	ldr	r3, [pc, #156]	@ (80012cc <HAL_I2S_MspInit+0x1dc>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001234:	4b25      	ldr	r3, [pc, #148]	@ (80012cc <HAL_I2S_MspInit+0x1dc>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800123a:	4824      	ldr	r0, [pc, #144]	@ (80012cc <HAL_I2S_MspInit+0x1dc>)
 800123c:	f000 fce0 	bl	8001c00 <HAL_DMA_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_I2S_MspInit+0x15a>
    {
      Error_Handler();
 8001246:	f7ff fde6 	bl	8000e16 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a1f      	ldr	r2, [pc, #124]	@ (80012cc <HAL_I2S_MspInit+0x1dc>)
 800124e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001250:	4a1e      	ldr	r2, [pc, #120]	@ (80012cc <HAL_I2S_MspInit+0x1dc>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream2;
 8001256:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <HAL_I2S_MspInit+0x1e4>)
 8001258:	4a1f      	ldr	r2, [pc, #124]	@ (80012d8 <HAL_I2S_MspInit+0x1e8>)
 800125a:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_2;
 800125c:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <HAL_I2S_MspInit+0x1e4>)
 800125e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001262:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001264:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <HAL_I2S_MspInit+0x1e4>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800126a:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <HAL_I2S_MspInit+0x1e4>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001270:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <HAL_I2S_MspInit+0x1e4>)
 8001272:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001276:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001278:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <HAL_I2S_MspInit+0x1e4>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <HAL_I2S_MspInit+0x1e4>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_NORMAL;
 8001284:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <HAL_I2S_MspInit+0x1e4>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 800128a:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <HAL_I2S_MspInit+0x1e4>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001290:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <HAL_I2S_MspInit+0x1e4>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 8001296:	480f      	ldr	r0, [pc, #60]	@ (80012d4 <HAL_I2S_MspInit+0x1e4>)
 8001298:	f000 fcb2 	bl	8001c00 <HAL_DMA_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_I2S_MspInit+0x1b6>
    {
      Error_Handler();
 80012a2:	f7ff fdb8 	bl	8000e16 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s3_ext_rx);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <HAL_I2S_MspInit+0x1e4>)
 80012aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012ac:	4a09      	ldr	r2, [pc, #36]	@ (80012d4 <HAL_I2S_MspInit+0x1e4>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80012b2:	bf00      	nop
 80012b4:	3738      	adds	r7, #56	@ 0x38
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40003c00 	.word	0x40003c00
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	20000288 	.word	0x20000288
 80012d0:	40026088 	.word	0x40026088
 80012d4:	200002e8 	.word	0x200002e8
 80012d8:	40026040 	.word	0x40026040

080012dc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	@ 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a32      	ldr	r2, [pc, #200]	@ (80013c4 <HAL_SPI_MspInit+0xe8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d12c      	bne.n	8001358 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	4b31      	ldr	r3, [pc, #196]	@ (80013c8 <HAL_SPI_MspInit+0xec>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001306:	4a30      	ldr	r2, [pc, #192]	@ (80013c8 <HAL_SPI_MspInit+0xec>)
 8001308:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800130c:	6453      	str	r3, [r2, #68]	@ 0x44
 800130e:	4b2e      	ldr	r3, [pc, #184]	@ (80013c8 <HAL_SPI_MspInit+0xec>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <HAL_SPI_MspInit+0xec>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	4a29      	ldr	r2, [pc, #164]	@ (80013c8 <HAL_SPI_MspInit+0xec>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6313      	str	r3, [r2, #48]	@ 0x30
 800132a:	4b27      	ldr	r3, [pc, #156]	@ (80013c8 <HAL_SPI_MspInit+0xec>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001336:	23e0      	movs	r3, #224	@ 0xe0
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001346:	2305      	movs	r3, #5
 8001348:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	481e      	ldr	r0, [pc, #120]	@ (80013cc <HAL_SPI_MspInit+0xf0>)
 8001352:	f001 f857 	bl	8002404 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001356:	e031      	b.n	80013bc <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a1c      	ldr	r2, [pc, #112]	@ (80013d0 <HAL_SPI_MspInit+0xf4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d12c      	bne.n	80013bc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <HAL_SPI_MspInit+0xec>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	4a17      	ldr	r2, [pc, #92]	@ (80013c8 <HAL_SPI_MspInit+0xec>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001370:	6413      	str	r3, [r2, #64]	@ 0x40
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <HAL_SPI_MspInit+0xec>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <HAL_SPI_MspInit+0xec>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a10      	ldr	r2, [pc, #64]	@ (80013c8 <HAL_SPI_MspInit+0xec>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <HAL_SPI_MspInit+0xec>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800139a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800139e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ac:	2305      	movs	r3, #5
 80013ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	4619      	mov	r1, r3
 80013b6:	4807      	ldr	r0, [pc, #28]	@ (80013d4 <HAL_SPI_MspInit+0xf8>)
 80013b8:	f001 f824 	bl	8002404 <HAL_GPIO_Init>
}
 80013bc:	bf00      	nop
 80013be:	3730      	adds	r7, #48	@ 0x30
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40013000 	.word	0x40013000
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40003800 	.word	0x40003800
 80013d4:	40020400 	.word	0x40020400

080013d8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a28      	ldr	r2, [pc, #160]	@ (8001498 <HAL_TIM_Base_MspInit+0xc0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d14a      	bne.n	8001490 <HAL_TIM_Base_MspInit+0xb8>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b27      	ldr	r3, [pc, #156]	@ (800149c <HAL_TIM_Base_MspInit+0xc4>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	4a26      	ldr	r2, [pc, #152]	@ (800149c <HAL_TIM_Base_MspInit+0xc4>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6413      	str	r3, [r2, #64]	@ 0x40
 800140a:	4b24      	ldr	r3, [pc, #144]	@ (800149c <HAL_TIM_Base_MspInit+0xc4>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b20      	ldr	r3, [pc, #128]	@ (800149c <HAL_TIM_Base_MspInit+0xc4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a1f      	ldr	r2, [pc, #124]	@ (800149c <HAL_TIM_Base_MspInit+0xc4>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b1d      	ldr	r3, [pc, #116]	@ (800149c <HAL_TIM_Base_MspInit+0xc4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	4b19      	ldr	r3, [pc, #100]	@ (800149c <HAL_TIM_Base_MspInit+0xc4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a18      	ldr	r2, [pc, #96]	@ (800149c <HAL_TIM_Base_MspInit+0xc4>)
 800143c:	f043 0310 	orr.w	r3, r3, #16
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b16      	ldr	r3, [pc, #88]	@ (800149c <HAL_TIM_Base_MspInit+0xc4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800144e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001460:	2302      	movs	r3, #2
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	480d      	ldr	r0, [pc, #52]	@ (80014a0 <HAL_TIM_Base_MspInit+0xc8>)
 800146c:	f000 ffca 	bl	8002404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001470:	2301      	movs	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001480:	2302      	movs	r3, #2
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <HAL_TIM_Base_MspInit+0xcc>)
 800148c:	f000 ffba 	bl	8002404 <HAL_GPIO_Init>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001490:	bf00      	nop
 8001492:	3728      	adds	r7, #40	@ 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40000800 	.word	0x40000800
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020c00 	.word	0x40020c00
 80014a4:	40021000 	.word	0x40021000

080014a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <HAL_TIM_MspPostInit+0x68>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d11e      	bne.n	8001508 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <HAL_TIM_MspPostInit+0x6c>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a10      	ldr	r2, [pc, #64]	@ (8001514 <HAL_TIM_MspPostInit+0x6c>)
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <HAL_TIM_MspPostInit+0x6c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80014e6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80014ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	4619      	mov	r1, r3
 8001502:	4805      	ldr	r0, [pc, #20]	@ (8001518 <HAL_TIM_MspPostInit+0x70>)
 8001504:	f000 ff7e 	bl	8002404 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40000800 	.word	0x40000800
 8001514:	40023800 	.word	0x40023800
 8001518:	40020c00 	.word	0x40020c00

0800151c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08e      	sub	sp, #56	@ 0x38
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a66      	ldr	r2, [pc, #408]	@ (80016d4 <HAL_UART_MspInit+0x1b8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d12c      	bne.n	8001598 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
 8001542:	4b65      	ldr	r3, [pc, #404]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	4a64      	ldr	r2, [pc, #400]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 8001548:	f043 0310 	orr.w	r3, r3, #16
 800154c:	6453      	str	r3, [r2, #68]	@ 0x44
 800154e:	4b62      	ldr	r3, [pc, #392]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	623b      	str	r3, [r7, #32]
 8001558:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	4b5e      	ldr	r3, [pc, #376]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a5d      	ldr	r2, [pc, #372]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b5b      	ldr	r3, [pc, #364]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001576:	23c0      	movs	r3, #192	@ 0xc0
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001586:	2307      	movs	r3, #7
 8001588:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800158e:	4619      	mov	r1, r3
 8001590:	4852      	ldr	r0, [pc, #328]	@ (80016dc <HAL_UART_MspInit+0x1c0>)
 8001592:	f000 ff37 	bl	8002404 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001596:	e099      	b.n	80016cc <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a50      	ldr	r2, [pc, #320]	@ (80016e0 <HAL_UART_MspInit+0x1c4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d12c      	bne.n	80015fc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	4b4c      	ldr	r3, [pc, #304]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	4a4b      	ldr	r2, [pc, #300]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 80015ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b2:	4b49      	ldr	r3, [pc, #292]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ba:	61bb      	str	r3, [r7, #24]
 80015bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	4b45      	ldr	r3, [pc, #276]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a44      	ldr	r2, [pc, #272]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	4b42      	ldr	r3, [pc, #264]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015da:	230c      	movs	r3, #12
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ea:	2307      	movs	r3, #7
 80015ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f2:	4619      	mov	r1, r3
 80015f4:	483b      	ldr	r0, [pc, #236]	@ (80016e4 <HAL_UART_MspInit+0x1c8>)
 80015f6:	f000 ff05 	bl	8002404 <HAL_GPIO_Init>
}
 80015fa:	e067      	b.n	80016cc <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a39      	ldr	r2, [pc, #228]	@ (80016e8 <HAL_UART_MspInit+0x1cc>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d162      	bne.n	80016cc <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b33      	ldr	r3, [pc, #204]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	4a32      	ldr	r2, [pc, #200]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 8001610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001614:	6413      	str	r3, [r2, #64]	@ 0x40
 8001616:	4b30      	ldr	r3, [pc, #192]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b2c      	ldr	r3, [pc, #176]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a2b      	ldr	r2, [pc, #172]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 800162c:	f043 0308 	orr.w	r3, r3, #8
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b29      	ldr	r3, [pc, #164]	@ (80016d8 <HAL_UART_MspInit+0x1bc>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800163e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001650:	2307      	movs	r3, #7
 8001652:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001658:	4619      	mov	r1, r3
 800165a:	4824      	ldr	r0, [pc, #144]	@ (80016ec <HAL_UART_MspInit+0x1d0>)
 800165c:	f000 fed2 	bl	8002404 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001660:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 8001662:	4a24      	ldr	r2, [pc, #144]	@ (80016f4 <HAL_UART_MspInit+0x1d8>)
 8001664:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001666:	4b22      	ldr	r3, [pc, #136]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 8001668:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800166c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800166e:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001674:	4b1e      	ldr	r3, [pc, #120]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800167a:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 800167c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001680:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001682:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001688:	4b19      	ldr	r3, [pc, #100]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 800168a:	2200      	movs	r2, #0
 800168c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 8001690:	2200      	movs	r2, #0
 8001692:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001694:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80016a0:	4813      	ldr	r0, [pc, #76]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 80016a2:	f000 faad 	bl	8001c00 <HAL_DMA_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_UART_MspInit+0x194>
      Error_Handler();
 80016ac:	f7ff fbb3 	bl	8000e16 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a0f      	ldr	r2, [pc, #60]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 80016b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016b6:	4a0e      	ldr	r2, [pc, #56]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	210f      	movs	r1, #15
 80016c0:	2027      	movs	r0, #39	@ 0x27
 80016c2:	f000 fa73 	bl	8001bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016c6:	2027      	movs	r0, #39	@ 0x27
 80016c8:	f000 fa8c 	bl	8001be4 <HAL_NVIC_EnableIRQ>
}
 80016cc:	bf00      	nop
 80016ce:	3738      	adds	r7, #56	@ 0x38
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40011000 	.word	0x40011000
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40004400 	.word	0x40004400
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40004800 	.word	0x40004800
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	20000518 	.word	0x20000518
 80016f4:	40026028 	.word	0x40026028

080016f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08e      	sub	sp, #56	@ 0x38
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	4b34      	ldr	r3, [pc, #208]	@ (80017e0 <HAL_InitTick+0xe8>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001710:	4a33      	ldr	r2, [pc, #204]	@ (80017e0 <HAL_InitTick+0xe8>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6413      	str	r3, [r2, #64]	@ 0x40
 8001718:	4b31      	ldr	r3, [pc, #196]	@ (80017e0 <HAL_InitTick+0xe8>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001724:	f107 0210 	add.w	r2, r7, #16
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f002 fdf4 	bl	800431c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800173a:	2b00      	cmp	r3, #0
 800173c:	d103      	bne.n	8001746 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800173e:	f002 fdc5 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
 8001742:	6378      	str	r0, [r7, #52]	@ 0x34
 8001744:	e004      	b.n	8001750 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001746:	f002 fdc1 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
 800174a:	4603      	mov	r3, r0
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001752:	4a24      	ldr	r2, [pc, #144]	@ (80017e4 <HAL_InitTick+0xec>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	0c9b      	lsrs	r3, r3, #18
 800175a:	3b01      	subs	r3, #1
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800175e:	4b22      	ldr	r3, [pc, #136]	@ (80017e8 <HAL_InitTick+0xf0>)
 8001760:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001764:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001766:	4b20      	ldr	r3, [pc, #128]	@ (80017e8 <HAL_InitTick+0xf0>)
 8001768:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800176c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800176e:	4a1e      	ldr	r2, [pc, #120]	@ (80017e8 <HAL_InitTick+0xf0>)
 8001770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001772:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001774:	4b1c      	ldr	r3, [pc, #112]	@ (80017e8 <HAL_InitTick+0xf0>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177a:	4b1b      	ldr	r3, [pc, #108]	@ (80017e8 <HAL_InitTick+0xf0>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001780:	4b19      	ldr	r3, [pc, #100]	@ (80017e8 <HAL_InitTick+0xf0>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001786:	4818      	ldr	r0, [pc, #96]	@ (80017e8 <HAL_InitTick+0xf0>)
 8001788:	f003 fb8e 	bl	8004ea8 <HAL_TIM_Base_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001792:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001796:	2b00      	cmp	r3, #0
 8001798:	d11b      	bne.n	80017d2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800179a:	4813      	ldr	r0, [pc, #76]	@ (80017e8 <HAL_InitTick+0xf0>)
 800179c:	f003 fbd4 	bl	8004f48 <HAL_TIM_Base_Start_IT>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80017a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d111      	bne.n	80017d2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017ae:	201c      	movs	r0, #28
 80017b0:	f000 fa18 	bl	8001be4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b0f      	cmp	r3, #15
 80017b8:	d808      	bhi.n	80017cc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80017ba:	2200      	movs	r2, #0
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	201c      	movs	r0, #28
 80017c0:	f000 f9f4 	bl	8001bac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c4:	4a09      	ldr	r2, [pc, #36]	@ (80017ec <HAL_InitTick+0xf4>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e002      	b.n	80017d2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3738      	adds	r7, #56	@ 0x38
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800
 80017e4:	431bde83 	.word	0x431bde83
 80017e8:	20000788 	.word	0x20000788
 80017ec:	20000008 	.word	0x20000008

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <NMI_Handler+0x4>

080017f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <MemManage_Handler+0x4>

08001808 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <BusFault_Handler+0x4>

08001810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <UsageFault_Handler+0x4>

08001818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800182c:	4802      	ldr	r0, [pc, #8]	@ (8001838 <DMA1_Stream1_IRQHandler+0x10>)
 800182e:	f000 fb7f 	bl	8001f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000518 	.word	0x20000518

0800183c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s3_ext_rx);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <DMA1_Stream2_IRQHandler+0x10>)
 8001842:	f000 fb75 	bl	8001f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200002e8 	.word	0x200002e8

08001850 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <DMA1_Stream5_IRQHandler+0x10>)
 8001856:	f000 fb6b 	bl	8001f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000288 	.word	0x20000288

08001864 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <TIM2_IRQHandler+0x10>)
 800186a:	f003 fcff 	bl	800526c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000788 	.word	0x20000788

08001878 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <USART3_IRQHandler+0x10>)
 800187e:	f004 fd13 	bl	80062a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200004d0 	.word	0x200004d0

0800188c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001894:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <_sbrk+0x5c>)
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <_sbrk+0x60>)
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a0:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <_sbrk+0x64>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <_sbrk+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d207      	bcs.n	80018cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018bc:	f00c f83e 	bl	800d93c <__errno>
 80018c0:	4603      	mov	r3, r0
 80018c2:	220c      	movs	r2, #12
 80018c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	e009      	b.n	80018e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d2:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	4a05      	ldr	r2, [pc, #20]	@ (80018f0 <_sbrk+0x64>)
 80018dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20020000 	.word	0x20020000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	200007d0 	.word	0x200007d0
 80018f4:	200141e8 	.word	0x200141e8

080018f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <SystemInit+0x20>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001902:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <SystemInit+0x20>)
 8001904:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001908:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800191c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001954 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001920:	f7ff ffea 	bl	80018f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001924:	480c      	ldr	r0, [pc, #48]	@ (8001958 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001926:	490d      	ldr	r1, [pc, #52]	@ (800195c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001928:	4a0d      	ldr	r2, [pc, #52]	@ (8001960 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800192c:	e002      	b.n	8001934 <LoopCopyDataInit>

0800192e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001932:	3304      	adds	r3, #4

08001934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001938:	d3f9      	bcc.n	800192e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193a:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800193c:	4c0a      	ldr	r4, [pc, #40]	@ (8001968 <LoopFillZerobss+0x22>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001940:	e001      	b.n	8001946 <LoopFillZerobss>

08001942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001944:	3204      	adds	r2, #4

08001946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001948:	d3fb      	bcc.n	8001942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194a:	f00b fffd 	bl	800d948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194e:	f7fe fe3d 	bl	80005cc <main>
  bx  lr    
 8001952:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001960:	0800eb80 	.word	0x0800eb80
  ldr r2, =_sbss
 8001964:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001968:	200141e4 	.word	0x200141e4

0800196c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC_IRQHandler>
	...

08001970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001974:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <HAL_Init+0x40>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0d      	ldr	r2, [pc, #52]	@ (80019b0 <HAL_Init+0x40>)
 800197a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800197e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001980:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <HAL_Init+0x40>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <HAL_Init+0x40>)
 8001986:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800198a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a07      	ldr	r2, [pc, #28]	@ (80019b0 <HAL_Init+0x40>)
 8001992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001998:	2003      	movs	r0, #3
 800199a:	f000 f8fc 	bl	8001b96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199e:	200f      	movs	r0, #15
 80019a0:	f7ff feaa 	bl	80016f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a4:	f7ff fafe 	bl	8000fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023c00 	.word	0x40023c00

080019b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_IncTick+0x20>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_IncTick+0x24>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a04      	ldr	r2, [pc, #16]	@ (80019d8 <HAL_IncTick+0x24>)
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	2000000c 	.word	0x2000000c
 80019d8:	200007d4 	.word	0x200007d4

080019dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return uwTick;
 80019e0:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <HAL_GetTick+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	200007d4 	.word	0x200007d4

080019f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019fc:	f7ff ffee 	bl	80019dc <HAL_GetTick>
 8001a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0c:	d005      	beq.n	8001a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a38 <HAL_Delay+0x44>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a1a:	bf00      	nop
 8001a1c:	f7ff ffde 	bl	80019dc <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d8f7      	bhi.n	8001a1c <HAL_Delay+0x28>
  {
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2000000c 	.word	0x2000000c

08001a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	60d3      	str	r3, [r2, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a88:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <__NVIC_GetPriorityGrouping+0x18>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0307 	and.w	r3, r3, #7
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0b      	blt.n	8001aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4907      	ldr	r1, [pc, #28]	@ (8001ad8 <__NVIC_EnableIRQ+0x38>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	@ (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	@ (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	@ 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0307 	rsb	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	bf28      	it	cs
 8001b4e:	2304      	movcs	r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3304      	adds	r3, #4
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d902      	bls.n	8001b60 <NVIC_EncodePriority+0x30>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <NVIC_EncodePriority+0x32>
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	@ 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ff4c 	bl	8001a3c <__NVIC_SetPriorityGrouping>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbe:	f7ff ff61 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001bc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	6978      	ldr	r0, [r7, #20]
 8001bca:	f7ff ffb1 	bl	8001b30 <NVIC_EncodePriority>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ff80 	bl	8001adc <__NVIC_SetPriority>
}
 8001bdc:	bf00      	nop
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ff54 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff fee6 	bl	80019dc <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e099      	b.n	8001d50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0201 	bic.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c3c:	e00f      	b.n	8001c5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c3e:	f7ff fecd 	bl	80019dc <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b05      	cmp	r3, #5
 8001c4a:	d908      	bls.n	8001c5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2203      	movs	r2, #3
 8001c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e078      	b.n	8001d50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1e8      	bne.n	8001c3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	4b38      	ldr	r3, [pc, #224]	@ (8001d58 <HAL_DMA_Init+0x158>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d107      	bne.n	8001cc8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f023 0307 	bic.w	r3, r3, #7
 8001cde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d117      	bne.n	8001d22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00e      	beq.n	8001d22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 fb01 	bl	800230c <DMA_CheckFifoParam>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2240      	movs	r2, #64	@ 0x40
 8001d14:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e016      	b.n	8001d50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 fab8 	bl	80022a0 <DMA_CalcBaseAndBitshift>
 8001d30:	4603      	mov	r3, r0
 8001d32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d38:	223f      	movs	r2, #63	@ 0x3f
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	f010803f 	.word	0xf010803f

08001d5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_DMA_Start_IT+0x26>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e040      	b.n	8001e04 <HAL_DMA_Start_IT+0xa8>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d12f      	bne.n	8001df6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2202      	movs	r2, #2
 8001d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 fa4a 	bl	8002244 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db4:	223f      	movs	r2, #63	@ 0x3f
 8001db6:	409a      	lsls	r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0216 	orr.w	r2, r2, #22
 8001dca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d007      	beq.n	8001de4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0208 	orr.w	r2, r2, #8
 8001de2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e005      	b.n	8001e02 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e1a:	f7ff fddf 	bl	80019dc <HAL_GetTick>
 8001e1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d008      	beq.n	8001e3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2280      	movs	r2, #128	@ 0x80
 8001e30:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e052      	b.n	8001ee4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0216 	bic.w	r2, r2, #22
 8001e4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695a      	ldr	r2, [r3, #20]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d103      	bne.n	8001e6e <HAL_DMA_Abort+0x62>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0208 	bic.w	r2, r2, #8
 8001e7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0201 	bic.w	r2, r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e8e:	e013      	b.n	8001eb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e90:	f7ff fda4 	bl	80019dc <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b05      	cmp	r3, #5
 8001e9c:	d90c      	bls.n	8001eb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e015      	b.n	8001ee4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1e4      	bne.n	8001e90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eca:	223f      	movs	r2, #63	@ 0x3f
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d004      	beq.n	8001f0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2280      	movs	r2, #128	@ 0x80
 8001f04:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00c      	b.n	8001f24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2205      	movs	r2, #5
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0201 	bic.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f3c:	4b8e      	ldr	r3, [pc, #568]	@ (8002178 <HAL_DMA_IRQHandler+0x248>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a8e      	ldr	r2, [pc, #568]	@ (800217c <HAL_DMA_IRQHandler+0x24c>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	0a9b      	lsrs	r3, r3, #10
 8001f48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d01a      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0204 	bic.w	r2, r2, #4
 8001f82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f88:	2208      	movs	r2, #8
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f94:	f043 0201 	orr.w	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d012      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fca:	f043 0202 	orr.w	r2, r3, #2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d012      	beq.n	8002008 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00b      	beq.n	8002008 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002000:	f043 0204 	orr.w	r2, r3, #4
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200c:	2210      	movs	r2, #16
 800200e:	409a      	lsls	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d043      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d03c      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202a:	2210      	movs	r2, #16
 800202c:	409a      	lsls	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d018      	beq.n	8002072 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d108      	bne.n	8002060 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	2b00      	cmp	r3, #0
 8002054:	d024      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	4798      	blx	r3
 800205e:	e01f      	b.n	80020a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01b      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
 8002070:	e016      	b.n	80020a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d107      	bne.n	8002090 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0208 	bic.w	r2, r2, #8
 800208e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a4:	2220      	movs	r2, #32
 80020a6:	409a      	lsls	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 808f 	beq.w	80021d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 8087 	beq.w	80021d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c6:	2220      	movs	r2, #32
 80020c8:	409a      	lsls	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b05      	cmp	r3, #5
 80020d8:	d136      	bne.n	8002148 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0216 	bic.w	r2, r2, #22
 80020e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d103      	bne.n	800210a <HAL_DMA_IRQHandler+0x1da>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0208 	bic.w	r2, r2, #8
 8002118:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211e:	223f      	movs	r2, #63	@ 0x3f
 8002120:	409a      	lsls	r2, r3
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800213a:	2b00      	cmp	r3, #0
 800213c:	d07e      	beq.n	800223c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	4798      	blx	r3
        }
        return;
 8002146:	e079      	b.n	800223c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d01d      	beq.n	8002192 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10d      	bne.n	8002180 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002168:	2b00      	cmp	r3, #0
 800216a:	d031      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	4798      	blx	r3
 8002174:	e02c      	b.n	80021d0 <HAL_DMA_IRQHandler+0x2a0>
 8002176:	bf00      	nop
 8002178:	20000004 	.word	0x20000004
 800217c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d023      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4798      	blx	r3
 8002190:	e01e      	b.n	80021d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10f      	bne.n	80021c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0210 	bic.w	r2, r2, #16
 80021ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d032      	beq.n	800223e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d022      	beq.n	800222a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2205      	movs	r2, #5
 80021e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0201 	bic.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	3301      	adds	r3, #1
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	429a      	cmp	r2, r3
 8002206:	d307      	bcc.n	8002218 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f2      	bne.n	80021fc <HAL_DMA_IRQHandler+0x2cc>
 8002216:	e000      	b.n	800221a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002218:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	4798      	blx	r3
 800223a:	e000      	b.n	800223e <HAL_DMA_IRQHandler+0x30e>
        return;
 800223c:	bf00      	nop
    }
  }
}
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002260:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b40      	cmp	r3, #64	@ 0x40
 8002270:	d108      	bne.n	8002284 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002282:	e007      	b.n	8002294 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	60da      	str	r2, [r3, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	3b10      	subs	r3, #16
 80022b0:	4a14      	ldr	r2, [pc, #80]	@ (8002304 <DMA_CalcBaseAndBitshift+0x64>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ba:	4a13      	ldr	r2, [pc, #76]	@ (8002308 <DMA_CalcBaseAndBitshift+0x68>)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d909      	bls.n	80022e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022d6:	f023 0303 	bic.w	r3, r3, #3
 80022da:	1d1a      	adds	r2, r3, #4
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	659a      	str	r2, [r3, #88]	@ 0x58
 80022e0:	e007      	b.n	80022f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022ea:	f023 0303 	bic.w	r3, r3, #3
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	aaaaaaab 	.word	0xaaaaaaab
 8002308:	0800e960 	.word	0x0800e960

0800230c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d11f      	bne.n	8002366 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d856      	bhi.n	80023da <DMA_CheckFifoParam+0xce>
 800232c:	a201      	add	r2, pc, #4	@ (adr r2, 8002334 <DMA_CheckFifoParam+0x28>)
 800232e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002332:	bf00      	nop
 8002334:	08002345 	.word	0x08002345
 8002338:	08002357 	.word	0x08002357
 800233c:	08002345 	.word	0x08002345
 8002340:	080023db 	.word	0x080023db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002348:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d046      	beq.n	80023de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002354:	e043      	b.n	80023de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800235e:	d140      	bne.n	80023e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002364:	e03d      	b.n	80023e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800236e:	d121      	bne.n	80023b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d837      	bhi.n	80023e6 <DMA_CheckFifoParam+0xda>
 8002376:	a201      	add	r2, pc, #4	@ (adr r2, 800237c <DMA_CheckFifoParam+0x70>)
 8002378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237c:	0800238d 	.word	0x0800238d
 8002380:	08002393 	.word	0x08002393
 8002384:	0800238d 	.word	0x0800238d
 8002388:	080023a5 	.word	0x080023a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      break;
 8002390:	e030      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002396:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d025      	beq.n	80023ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a2:	e022      	b.n	80023ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023ac:	d11f      	bne.n	80023ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023b2:	e01c      	b.n	80023ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d903      	bls.n	80023c2 <DMA_CheckFifoParam+0xb6>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d003      	beq.n	80023c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023c0:	e018      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
      break;
 80023c6:	e015      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00e      	beq.n	80023f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
      break;
 80023d8:	e00b      	b.n	80023f2 <DMA_CheckFifoParam+0xe6>
      break;
 80023da:	bf00      	nop
 80023dc:	e00a      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;
 80023de:	bf00      	nop
 80023e0:	e008      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;
 80023e2:	bf00      	nop
 80023e4:	e006      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;
 80023e6:	bf00      	nop
 80023e8:	e004      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;
 80023ea:	bf00      	nop
 80023ec:	e002      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80023ee:	bf00      	nop
 80023f0:	e000      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;
 80023f2:	bf00      	nop
    }
  } 
  
  return status; 
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop

08002404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	@ 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e16b      	b.n	80026f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002420:	2201      	movs	r2, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	f040 815a 	bne.w	80026f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d005      	beq.n	8002456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002452:	2b02      	cmp	r3, #2
 8002454:	d130      	bne.n	80024b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800248c:	2201      	movs	r2, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 0201 	and.w	r2, r3, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d017      	beq.n	80024f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d123      	bne.n	8002548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	69b9      	ldr	r1, [r7, #24]
 8002544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0203 	and.w	r2, r3, #3
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80b4 	beq.w	80026f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b60      	ldr	r3, [pc, #384]	@ (8002710 <HAL_GPIO_Init+0x30c>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	4a5f      	ldr	r2, [pc, #380]	@ (8002710 <HAL_GPIO_Init+0x30c>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002598:	6453      	str	r3, [r2, #68]	@ 0x44
 800259a:	4b5d      	ldr	r3, [pc, #372]	@ (8002710 <HAL_GPIO_Init+0x30c>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002714 <HAL_GPIO_Init+0x310>)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a52      	ldr	r2, [pc, #328]	@ (8002718 <HAL_GPIO_Init+0x314>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d02b      	beq.n	800262a <HAL_GPIO_Init+0x226>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a51      	ldr	r2, [pc, #324]	@ (800271c <HAL_GPIO_Init+0x318>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d025      	beq.n	8002626 <HAL_GPIO_Init+0x222>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a50      	ldr	r2, [pc, #320]	@ (8002720 <HAL_GPIO_Init+0x31c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d01f      	beq.n	8002622 <HAL_GPIO_Init+0x21e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002724 <HAL_GPIO_Init+0x320>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d019      	beq.n	800261e <HAL_GPIO_Init+0x21a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002728 <HAL_GPIO_Init+0x324>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_GPIO_Init+0x216>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4d      	ldr	r2, [pc, #308]	@ (800272c <HAL_GPIO_Init+0x328>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00d      	beq.n	8002616 <HAL_GPIO_Init+0x212>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002730 <HAL_GPIO_Init+0x32c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d007      	beq.n	8002612 <HAL_GPIO_Init+0x20e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4b      	ldr	r2, [pc, #300]	@ (8002734 <HAL_GPIO_Init+0x330>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <HAL_GPIO_Init+0x20a>
 800260a:	2307      	movs	r3, #7
 800260c:	e00e      	b.n	800262c <HAL_GPIO_Init+0x228>
 800260e:	2308      	movs	r3, #8
 8002610:	e00c      	b.n	800262c <HAL_GPIO_Init+0x228>
 8002612:	2306      	movs	r3, #6
 8002614:	e00a      	b.n	800262c <HAL_GPIO_Init+0x228>
 8002616:	2305      	movs	r3, #5
 8002618:	e008      	b.n	800262c <HAL_GPIO_Init+0x228>
 800261a:	2304      	movs	r3, #4
 800261c:	e006      	b.n	800262c <HAL_GPIO_Init+0x228>
 800261e:	2303      	movs	r3, #3
 8002620:	e004      	b.n	800262c <HAL_GPIO_Init+0x228>
 8002622:	2302      	movs	r3, #2
 8002624:	e002      	b.n	800262c <HAL_GPIO_Init+0x228>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_GPIO_Init+0x228>
 800262a:	2300      	movs	r3, #0
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	f002 0203 	and.w	r2, r2, #3
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	4093      	lsls	r3, r2
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800263c:	4935      	ldr	r1, [pc, #212]	@ (8002714 <HAL_GPIO_Init+0x310>)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264a:	4b3b      	ldr	r3, [pc, #236]	@ (8002738 <HAL_GPIO_Init+0x334>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800266e:	4a32      	ldr	r2, [pc, #200]	@ (8002738 <HAL_GPIO_Init+0x334>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002674:	4b30      	ldr	r3, [pc, #192]	@ (8002738 <HAL_GPIO_Init+0x334>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002698:	4a27      	ldr	r2, [pc, #156]	@ (8002738 <HAL_GPIO_Init+0x334>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800269e:	4b26      	ldr	r3, [pc, #152]	@ (8002738 <HAL_GPIO_Init+0x334>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002738 <HAL_GPIO_Init+0x334>)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002738 <HAL_GPIO_Init+0x334>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ec:	4a12      	ldr	r2, [pc, #72]	@ (8002738 <HAL_GPIO_Init+0x334>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b0f      	cmp	r3, #15
 80026fc:	f67f ae90 	bls.w	8002420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3724      	adds	r7, #36	@ 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800
 8002714:	40013800 	.word	0x40013800
 8002718:	40020000 	.word	0x40020000
 800271c:	40020400 	.word	0x40020400
 8002720:	40020800 	.word	0x40020800
 8002724:	40020c00 	.word	0x40020c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40021400 	.word	0x40021400
 8002730:	40021800 	.word	0x40021800
 8002734:	40021c00 	.word	0x40021c00
 8002738:	40013c00 	.word	0x40013c00

0800273c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
 8002748:	4613      	mov	r3, r2
 800274a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002758:	e003      	b.n	8002762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	041a      	lsls	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	619a      	str	r2, [r3, #24]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e12b      	b.n	80029da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe fc2c 	bl	8000ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2224      	movs	r2, #36	@ 0x24
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027d4:	f001 fd7a 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
 80027d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a81      	ldr	r2, [pc, #516]	@ (80029e4 <HAL_I2C_Init+0x274>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d807      	bhi.n	80027f4 <HAL_I2C_Init+0x84>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4a80      	ldr	r2, [pc, #512]	@ (80029e8 <HAL_I2C_Init+0x278>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	bf94      	ite	ls
 80027ec:	2301      	movls	r3, #1
 80027ee:	2300      	movhi	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	e006      	b.n	8002802 <HAL_I2C_Init+0x92>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4a7d      	ldr	r2, [pc, #500]	@ (80029ec <HAL_I2C_Init+0x27c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	bf94      	ite	ls
 80027fc:	2301      	movls	r3, #1
 80027fe:	2300      	movhi	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0e7      	b.n	80029da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a78      	ldr	r2, [pc, #480]	@ (80029f0 <HAL_I2C_Init+0x280>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0c9b      	lsrs	r3, r3, #18
 8002814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a6a      	ldr	r2, [pc, #424]	@ (80029e4 <HAL_I2C_Init+0x274>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d802      	bhi.n	8002844 <HAL_I2C_Init+0xd4>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3301      	adds	r3, #1
 8002842:	e009      	b.n	8002858 <HAL_I2C_Init+0xe8>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	4a69      	ldr	r2, [pc, #420]	@ (80029f4 <HAL_I2C_Init+0x284>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	099b      	lsrs	r3, r3, #6
 8002856:	3301      	adds	r3, #1
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	430b      	orrs	r3, r1
 800285e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800286a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	495c      	ldr	r1, [pc, #368]	@ (80029e4 <HAL_I2C_Init+0x274>)
 8002874:	428b      	cmp	r3, r1
 8002876:	d819      	bhi.n	80028ac <HAL_I2C_Init+0x13c>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1e59      	subs	r1, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fbb1 f3f3 	udiv	r3, r1, r3
 8002886:	1c59      	adds	r1, r3, #1
 8002888:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800288c:	400b      	ands	r3, r1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_I2C_Init+0x138>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1e59      	subs	r1, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a6:	e051      	b.n	800294c <HAL_I2C_Init+0x1dc>
 80028a8:	2304      	movs	r3, #4
 80028aa:	e04f      	b.n	800294c <HAL_I2C_Init+0x1dc>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d111      	bne.n	80028d8 <HAL_I2C_Init+0x168>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1e58      	subs	r0, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	440b      	add	r3, r1
 80028c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c6:	3301      	adds	r3, #1
 80028c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	e012      	b.n	80028fe <HAL_I2C_Init+0x18e>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e58      	subs	r0, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	0099      	lsls	r1, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Init+0x196>
 8002902:	2301      	movs	r3, #1
 8002904:	e022      	b.n	800294c <HAL_I2C_Init+0x1dc>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10e      	bne.n	800292c <HAL_I2C_Init+0x1bc>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1e58      	subs	r0, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	460b      	mov	r3, r1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	440b      	add	r3, r1
 800291c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002920:	3301      	adds	r3, #1
 8002922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800292a:	e00f      	b.n	800294c <HAL_I2C_Init+0x1dc>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1e58      	subs	r0, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	0099      	lsls	r1, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002942:	3301      	adds	r3, #1
 8002944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002948:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	6809      	ldr	r1, [r1, #0]
 8002950:	4313      	orrs	r3, r2
 8002952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800297a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6911      	ldr	r1, [r2, #16]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68d2      	ldr	r2, [r2, #12]
 8002986:	4311      	orrs	r1, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	430b      	orrs	r3, r1
 800298e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	000186a0 	.word	0x000186a0
 80029e8:	001e847f 	.word	0x001e847f
 80029ec:	003d08ff 	.word	0x003d08ff
 80029f0:	431bde83 	.word	0x431bde83
 80029f4:	10624dd3 	.word	0x10624dd3

080029f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	461a      	mov	r2, r3
 8002a04:	460b      	mov	r3, r1
 8002a06:	817b      	strh	r3, [r7, #10]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a0c:	f7fe ffe6 	bl	80019dc <HAL_GetTick>
 8002a10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	f040 80e0 	bne.w	8002be0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	2319      	movs	r3, #25
 8002a26:	2201      	movs	r2, #1
 8002a28:	4970      	ldr	r1, [pc, #448]	@ (8002bec <HAL_I2C_Master_Transmit+0x1f4>)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f964 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
 8002a38:	e0d3      	b.n	8002be2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_I2C_Master_Transmit+0x50>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e0cc      	b.n	8002be2 <HAL_I2C_Master_Transmit+0x1ea>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d007      	beq.n	8002a6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2221      	movs	r2, #33	@ 0x21
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2210      	movs	r2, #16
 8002a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	893a      	ldrh	r2, [r7, #8]
 8002a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4a50      	ldr	r2, [pc, #320]	@ (8002bf0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002aae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ab0:	8979      	ldrh	r1, [r7, #10]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	6a3a      	ldr	r2, [r7, #32]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f89c 	bl	8002bf4 <I2C_MasterRequestWrite>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e08d      	b.n	8002be2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002adc:	e066      	b.n	8002bac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	6a39      	ldr	r1, [r7, #32]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fa22 	bl	8002f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00d      	beq.n	8002b0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d107      	bne.n	8002b06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e06b      	b.n	8002be2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0e:	781a      	ldrb	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d11b      	bne.n	8002b80 <HAL_I2C_Master_Transmit+0x188>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d017      	beq.n	8002b80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	781a      	ldrb	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	6a39      	ldr	r1, [r7, #32]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fa19 	bl	8002fbc <I2C_WaitOnBTFFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00d      	beq.n	8002bac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d107      	bne.n	8002ba8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e01a      	b.n	8002be2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d194      	bne.n	8002ade <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e000      	b.n	8002be2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002be0:	2302      	movs	r3, #2
  }
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	00100002 	.word	0x00100002
 8002bf0:	ffff0000 	.word	0xffff0000

08002bf4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	460b      	mov	r3, r1
 8002c02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d006      	beq.n	8002c1e <I2C_MasterRequestWrite+0x2a>
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d003      	beq.n	8002c1e <I2C_MasterRequestWrite+0x2a>
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c1c:	d108      	bne.n	8002c30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e00b      	b.n	8002c48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c34:	2b12      	cmp	r3, #18
 8002c36:	d107      	bne.n	8002c48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f84f 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00d      	beq.n	8002c7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c6e:	d103      	bne.n	8002c78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e035      	b.n	8002ce8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c84:	d108      	bne.n	8002c98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c86:	897b      	ldrh	r3, [r7, #10]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c94:	611a      	str	r2, [r3, #16]
 8002c96:	e01b      	b.n	8002cd0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c98:	897b      	ldrh	r3, [r7, #10]
 8002c9a:	11db      	asrs	r3, r3, #7
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f003 0306 	and.w	r3, r3, #6
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f063 030f 	orn	r3, r3, #15
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	490e      	ldr	r1, [pc, #56]	@ (8002cf0 <I2C_MasterRequestWrite+0xfc>)
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f898 	bl	8002dec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e010      	b.n	8002ce8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cc6:	897b      	ldrh	r3, [r7, #10]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	4907      	ldr	r1, [pc, #28]	@ (8002cf4 <I2C_MasterRequestWrite+0x100>)
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f888 	bl	8002dec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	00010008 	.word	0x00010008
 8002cf4:	00010002 	.word	0x00010002

08002cf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	4613      	mov	r3, r2
 8002d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d08:	e048      	b.n	8002d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d044      	beq.n	8002d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d12:	f7fe fe63 	bl	80019dc <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d302      	bcc.n	8002d28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d139      	bne.n	8002d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	0c1b      	lsrs	r3, r3, #16
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d10d      	bne.n	8002d4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	43da      	mvns	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	e00c      	b.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	43da      	mvns	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf0c      	ite	eq
 8002d60:	2301      	moveq	r3, #1
 8002d62:	2300      	movne	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d116      	bne.n	8002d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e023      	b.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	0c1b      	lsrs	r3, r3, #16
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d10d      	bne.n	8002dc2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	43da      	mvns	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4013      	ands	r3, r2
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	e00c      	b.n	8002ddc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	43da      	mvns	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	bf0c      	ite	eq
 8002dd4:	2301      	moveq	r3, #1
 8002dd6:	2300      	movne	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d093      	beq.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dfa:	e071      	b.n	8002ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e0a:	d123      	bne.n	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e40:	f043 0204 	orr.w	r2, r3, #4
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e067      	b.n	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5a:	d041      	beq.n	8002ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5c:	f7fe fdbe 	bl	80019dc <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d302      	bcc.n	8002e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d136      	bne.n	8002ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	0c1b      	lsrs	r3, r3, #16
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d10c      	bne.n	8002e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	43da      	mvns	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4013      	ands	r3, r2
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bf14      	ite	ne
 8002e8e:	2301      	movne	r3, #1
 8002e90:	2300      	moveq	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	e00b      	b.n	8002eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d016      	beq.n	8002ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e021      	b.n	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	0c1b      	lsrs	r3, r3, #16
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d10c      	bne.n	8002f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	43da      	mvns	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf14      	ite	ne
 8002efc:	2301      	movne	r3, #1
 8002efe:	2300      	moveq	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	e00b      	b.n	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	bf14      	ite	ne
 8002f16:	2301      	movne	r3, #1
 8002f18:	2300      	moveq	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f47f af6d 	bne.w	8002dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f38:	e034      	b.n	8002fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f886 	bl	800304c <I2C_IsAcknowledgeFailed>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e034      	b.n	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f50:	d028      	beq.n	8002fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f52:	f7fe fd43 	bl	80019dc <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d302      	bcc.n	8002f68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d11d      	bne.n	8002fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f72:	2b80      	cmp	r3, #128	@ 0x80
 8002f74:	d016      	beq.n	8002fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f90:	f043 0220 	orr.w	r2, r3, #32
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e007      	b.n	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fae:	2b80      	cmp	r3, #128	@ 0x80
 8002fb0:	d1c3      	bne.n	8002f3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fc8:	e034      	b.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f83e 	bl	800304c <I2C_IsAcknowledgeFailed>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e034      	b.n	8003044 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe0:	d028      	beq.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe2:	f7fe fcfb 	bl	80019dc <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d11d      	bne.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b04      	cmp	r3, #4
 8003004:	d016      	beq.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e007      	b.n	8003044 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b04      	cmp	r3, #4
 8003040:	d1c3      	bne.n	8002fca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800305e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003062:	d11b      	bne.n	800309c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800306c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	f043 0204 	orr.w	r2, r3, #4
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e128      	b.n	8003310 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a90      	ldr	r2, [pc, #576]	@ (8003318 <HAL_I2S_Init+0x26c>)
 80030d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7fe f809 	bl	80010f0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2202      	movs	r2, #2
 80030e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80030f4:	f023 030f 	bic.w	r3, r3, #15
 80030f8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2202      	movs	r2, #2
 8003100:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d060      	beq.n	80031cc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d102      	bne.n	8003118 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003112:	2310      	movs	r3, #16
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	e001      	b.n	800311c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003118:	2320      	movs	r3, #32
 800311a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b20      	cmp	r3, #32
 8003122:	d802      	bhi.n	800312a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800312a:	2001      	movs	r0, #1
 800312c:	f001 fa0a 	bl	8004544 <HAL_RCCEx_GetPeriphCLKFreq>
 8003130:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800313a:	d125      	bne.n	8003188 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d010      	beq.n	8003166 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	fbb2 f2f3 	udiv	r2, r2, r3
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	461a      	mov	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003160:	3305      	adds	r3, #5
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	e01f      	b.n	80031a6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	461a      	mov	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003182:	3305      	adds	r3, #5
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	e00e      	b.n	80031a6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	461a      	mov	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a2:	3305      	adds	r3, #5
 80031a4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4a5c      	ldr	r2, [pc, #368]	@ (800331c <HAL_I2S_Init+0x270>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	08db      	lsrs	r3, r3, #3
 80031b0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	e003      	b.n	80031d4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031cc:	2302      	movs	r3, #2
 80031ce:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d902      	bls.n	80031e0 <HAL_I2S_Init+0x134>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	2bff      	cmp	r3, #255	@ 0xff
 80031de:	d907      	bls.n	80031f0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e4:	f043 0210 	orr.w	r2, r3, #16
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e08f      	b.n	8003310 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	ea42 0103 	orr.w	r1, r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	430a      	orrs	r2, r1
 8003202:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800320e:	f023 030f 	bic.w	r3, r3, #15
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6851      	ldr	r1, [r2, #4]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6892      	ldr	r2, [r2, #8]
 800321a:	4311      	orrs	r1, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	68d2      	ldr	r2, [r2, #12]
 8003220:	4311      	orrs	r1, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6992      	ldr	r2, [r2, #24]
 8003226:	430a      	orrs	r2, r1
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003232:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d161      	bne.n	8003300 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a38      	ldr	r2, [pc, #224]	@ (8003320 <HAL_I2S_Init+0x274>)
 8003240:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a37      	ldr	r2, [pc, #220]	@ (8003324 <HAL_I2S_Init+0x278>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d101      	bne.n	8003250 <HAL_I2S_Init+0x1a4>
 800324c:	4b36      	ldr	r3, [pc, #216]	@ (8003328 <HAL_I2S_Init+0x27c>)
 800324e:	e001      	b.n	8003254 <HAL_I2S_Init+0x1a8>
 8003250:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	4932      	ldr	r1, [pc, #200]	@ (8003324 <HAL_I2S_Init+0x278>)
 800325c:	428a      	cmp	r2, r1
 800325e:	d101      	bne.n	8003264 <HAL_I2S_Init+0x1b8>
 8003260:	4a31      	ldr	r2, [pc, #196]	@ (8003328 <HAL_I2S_Init+0x27c>)
 8003262:	e001      	b.n	8003268 <HAL_I2S_Init+0x1bc>
 8003264:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003268:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800326c:	f023 030f 	bic.w	r3, r3, #15
 8003270:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a2b      	ldr	r2, [pc, #172]	@ (8003324 <HAL_I2S_Init+0x278>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d101      	bne.n	8003280 <HAL_I2S_Init+0x1d4>
 800327c:	4b2a      	ldr	r3, [pc, #168]	@ (8003328 <HAL_I2S_Init+0x27c>)
 800327e:	e001      	b.n	8003284 <HAL_I2S_Init+0x1d8>
 8003280:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003284:	2202      	movs	r2, #2
 8003286:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a25      	ldr	r2, [pc, #148]	@ (8003324 <HAL_I2S_Init+0x278>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d101      	bne.n	8003296 <HAL_I2S_Init+0x1ea>
 8003292:	4b25      	ldr	r3, [pc, #148]	@ (8003328 <HAL_I2S_Init+0x27c>)
 8003294:	e001      	b.n	800329a <HAL_I2S_Init+0x1ee>
 8003296:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032a6:	d003      	beq.n	80032b0 <HAL_I2S_Init+0x204>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d103      	bne.n	80032b8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	e001      	b.n	80032bc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032b8:	2300      	movs	r3, #0
 80032ba:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032c6:	4313      	orrs	r3, r2
 80032c8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032d0:	4313      	orrs	r3, r2
 80032d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032da:	4313      	orrs	r3, r2
 80032dc:	b29a      	uxth	r2, r3
 80032de:	897b      	ldrh	r3, [r7, #10]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80032e8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003324 <HAL_I2S_Init+0x278>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d101      	bne.n	80032f8 <HAL_I2S_Init+0x24c>
 80032f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003328 <HAL_I2S_Init+0x27c>)
 80032f6:	e001      	b.n	80032fc <HAL_I2S_Init+0x250>
 80032f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032fc:	897a      	ldrh	r2, [r7, #10]
 80032fe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3720      	adds	r7, #32
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	08003423 	.word	0x08003423
 800331c:	cccccccd 	.word	0xcccccccd
 8003320:	08003539 	.word	0x08003539
 8003324:	40003800 	.word	0x40003800
 8003328:	40003400 	.word	0x40003400

0800332c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	881a      	ldrh	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	1c9a      	adds	r2, r3, #2
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10e      	bne.n	80033bc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80033ac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff ffb8 	bl	800332c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d6:	b292      	uxth	r2, r2
 80033d8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033de:	1c9a      	adds	r2, r3, #2
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10e      	bne.n	800341a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800340a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff ff93 	bl	8003340 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b086      	sub	sp, #24
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b04      	cmp	r3, #4
 800343c:	d13a      	bne.n	80034b4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d109      	bne.n	800345c <I2S_IRQHandler+0x3a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003452:	2b40      	cmp	r3, #64	@ 0x40
 8003454:	d102      	bne.n	800345c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff ffb4 	bl	80033c4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003462:	2b40      	cmp	r3, #64	@ 0x40
 8003464:	d126      	bne.n	80034b4 <I2S_IRQHandler+0x92>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b20      	cmp	r3, #32
 8003472:	d11f      	bne.n	80034b4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003482:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a6:	f043 0202 	orr.w	r2, r3, #2
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ff50 	bl	8003354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d136      	bne.n	800352e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d109      	bne.n	80034de <I2S_IRQHandler+0xbc>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d4:	2b80      	cmp	r3, #128	@ 0x80
 80034d6:	d102      	bne.n	80034de <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff ff45 	bl	8003368 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d122      	bne.n	800352e <I2S_IRQHandler+0x10c>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	d11b      	bne.n	800352e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003504:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003520:	f043 0204 	orr.w	r2, r3, #4
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7ff ff13 	bl	8003354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800352e:	bf00      	nop
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a92      	ldr	r2, [pc, #584]	@ (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d101      	bne.n	8003556 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003552:	4b92      	ldr	r3, [pc, #584]	@ (800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003554:	e001      	b.n	800355a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003556:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a8b      	ldr	r2, [pc, #556]	@ (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d101      	bne.n	8003574 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003570:	4b8a      	ldr	r3, [pc, #552]	@ (800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003572:	e001      	b.n	8003578 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003574:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003584:	d004      	beq.n	8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f040 8099 	bne.w	80036c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b02      	cmp	r3, #2
 8003598:	d107      	bne.n	80035aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f925 	bl	80037f4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d107      	bne.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f9c8 	bl	8003954 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ca:	2b40      	cmp	r3, #64	@ 0x40
 80035cc:	d13a      	bne.n	8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d035      	beq.n	8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d101      	bne.n	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80035e2:	4b6e      	ldr	r3, [pc, #440]	@ (800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035e4:	e001      	b.n	80035ea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80035e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4969      	ldr	r1, [pc, #420]	@ (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035f2:	428b      	cmp	r3, r1
 80035f4:	d101      	bne.n	80035fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80035f6:	4b69      	ldr	r3, [pc, #420]	@ (800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035f8:	e001      	b.n	80035fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80035fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003602:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003612:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003636:	f043 0202 	orr.w	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff fe88 	bl	8003354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b08      	cmp	r3, #8
 800364c:	f040 80c3 	bne.w	80037d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80bd 	beq.w	80037d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800366a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a49      	ldr	r2, [pc, #292]	@ (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003676:	4b49      	ldr	r3, [pc, #292]	@ (800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003678:	e001      	b.n	800367e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800367a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4944      	ldr	r1, [pc, #272]	@ (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003686:	428b      	cmp	r3, r1
 8003688:	d101      	bne.n	800368e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800368a:	4b44      	ldr	r3, [pc, #272]	@ (800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800368c:	e001      	b.n	8003692 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800368e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003692:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003696:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003698:	2300      	movs	r3, #0
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b2:	f043 0204 	orr.w	r2, r3, #4
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff fe4a 	bl	8003354 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036c0:	e089      	b.n	80037d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d107      	bne.n	80036dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f8be 	bl	8003858 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d107      	bne.n	80036f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8fd 	bl	80038f0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036fc:	2b40      	cmp	r3, #64	@ 0x40
 80036fe:	d12f      	bne.n	8003760 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d02a      	beq.n	8003760 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003718:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1e      	ldr	r2, [pc, #120]	@ (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d101      	bne.n	8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003724:	4b1d      	ldr	r3, [pc, #116]	@ (800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003726:	e001      	b.n	800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003728:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4919      	ldr	r1, [pc, #100]	@ (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003734:	428b      	cmp	r3, r1
 8003736:	d101      	bne.n	800373c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003738:	4b18      	ldr	r3, [pc, #96]	@ (800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800373a:	e001      	b.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800373c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003740:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003744:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003752:	f043 0202 	orr.w	r2, r3, #2
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff fdfa 	bl	8003354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b08      	cmp	r3, #8
 8003768:	d136      	bne.n	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d031      	beq.n	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a07      	ldr	r2, [pc, #28]	@ (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d101      	bne.n	8003782 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800377e:	4b07      	ldr	r3, [pc, #28]	@ (800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003780:	e001      	b.n	8003786 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003782:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4902      	ldr	r1, [pc, #8]	@ (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800378e:	428b      	cmp	r3, r1
 8003790:	d106      	bne.n	80037a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003792:	4b02      	ldr	r3, [pc, #8]	@ (800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003794:	e006      	b.n	80037a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003796:	bf00      	nop
 8003798:	40003800 	.word	0x40003800
 800379c:	40003400 	.word	0x40003400
 80037a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80037a8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80037b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	f043 0204 	orr.w	r2, r3, #4
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff fdc0 	bl	8003354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037d4:	e000      	b.n	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037d6:	bf00      	nop
}
 80037d8:	bf00      	nop
 80037da:	3720      	adds	r7, #32
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	1c99      	adds	r1, r3, #2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6251      	str	r1, [r2, #36]	@ 0x24
 8003806:	881a      	ldrh	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d113      	bne.n	800384e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003834:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff ffc9 	bl	80037e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	1c99      	adds	r1, r3, #2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6251      	str	r1, [r2, #36]	@ 0x24
 800386a:	8819      	ldrh	r1, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a1d      	ldr	r2, [pc, #116]	@ (80038e8 <I2SEx_TxISR_I2SExt+0x90>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d101      	bne.n	800387a <I2SEx_TxISR_I2SExt+0x22>
 8003876:	4b1d      	ldr	r3, [pc, #116]	@ (80038ec <I2SEx_TxISR_I2SExt+0x94>)
 8003878:	e001      	b.n	800387e <I2SEx_TxISR_I2SExt+0x26>
 800387a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800387e:	460a      	mov	r2, r1
 8003880:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d121      	bne.n	80038de <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a12      	ldr	r2, [pc, #72]	@ (80038e8 <I2SEx_TxISR_I2SExt+0x90>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d101      	bne.n	80038a8 <I2SEx_TxISR_I2SExt+0x50>
 80038a4:	4b11      	ldr	r3, [pc, #68]	@ (80038ec <I2SEx_TxISR_I2SExt+0x94>)
 80038a6:	e001      	b.n	80038ac <I2SEx_TxISR_I2SExt+0x54>
 80038a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	490d      	ldr	r1, [pc, #52]	@ (80038e8 <I2SEx_TxISR_I2SExt+0x90>)
 80038b4:	428b      	cmp	r3, r1
 80038b6:	d101      	bne.n	80038bc <I2SEx_TxISR_I2SExt+0x64>
 80038b8:	4b0c      	ldr	r3, [pc, #48]	@ (80038ec <I2SEx_TxISR_I2SExt+0x94>)
 80038ba:	e001      	b.n	80038c0 <I2SEx_TxISR_I2SExt+0x68>
 80038bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80038c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d106      	bne.n	80038de <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ff81 	bl	80037e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40003800 	.word	0x40003800
 80038ec:	40003400 	.word	0x40003400

080038f0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68d8      	ldr	r0, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003902:	1c99      	adds	r1, r3, #2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003908:	b282      	uxth	r2, r0
 800390a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d113      	bne.n	800394c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003932:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff ff4a 	bl	80037e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a20      	ldr	r2, [pc, #128]	@ (80039e4 <I2SEx_RxISR_I2SExt+0x90>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d101      	bne.n	800396a <I2SEx_RxISR_I2SExt+0x16>
 8003966:	4b20      	ldr	r3, [pc, #128]	@ (80039e8 <I2SEx_RxISR_I2SExt+0x94>)
 8003968:	e001      	b.n	800396e <I2SEx_RxISR_I2SExt+0x1a>
 800396a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800396e:	68d8      	ldr	r0, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003974:	1c99      	adds	r1, r3, #2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800397a:	b282      	uxth	r2, r0
 800397c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d121      	bne.n	80039da <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a12      	ldr	r2, [pc, #72]	@ (80039e4 <I2SEx_RxISR_I2SExt+0x90>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d101      	bne.n	80039a4 <I2SEx_RxISR_I2SExt+0x50>
 80039a0:	4b11      	ldr	r3, [pc, #68]	@ (80039e8 <I2SEx_RxISR_I2SExt+0x94>)
 80039a2:	e001      	b.n	80039a8 <I2SEx_RxISR_I2SExt+0x54>
 80039a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	490d      	ldr	r1, [pc, #52]	@ (80039e4 <I2SEx_RxISR_I2SExt+0x90>)
 80039b0:	428b      	cmp	r3, r1
 80039b2:	d101      	bne.n	80039b8 <I2SEx_RxISR_I2SExt+0x64>
 80039b4:	4b0c      	ldr	r3, [pc, #48]	@ (80039e8 <I2SEx_RxISR_I2SExt+0x94>)
 80039b6:	e001      	b.n	80039bc <I2SEx_RxISR_I2SExt+0x68>
 80039b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039c0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d106      	bne.n	80039da <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff ff03 	bl	80037e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40003800 	.word	0x40003800
 80039e8:	40003400 	.word	0x40003400

080039ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e267      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d075      	beq.n	8003af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a0a:	4b88      	ldr	r3, [pc, #544]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d00c      	beq.n	8003a30 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a16:	4b85      	ldr	r3, [pc, #532]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d112      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a22:	4b82      	ldr	r3, [pc, #520]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a2e:	d10b      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a30:	4b7e      	ldr	r3, [pc, #504]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d05b      	beq.n	8003af4 <HAL_RCC_OscConfig+0x108>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d157      	bne.n	8003af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e242      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a50:	d106      	bne.n	8003a60 <HAL_RCC_OscConfig+0x74>
 8003a52:	4b76      	ldr	r3, [pc, #472]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a75      	ldr	r2, [pc, #468]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e01d      	b.n	8003a9c <HAL_RCC_OscConfig+0xb0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x98>
 8003a6a:	4b70      	ldr	r3, [pc, #448]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a6f      	ldr	r2, [pc, #444]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b6d      	ldr	r3, [pc, #436]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e00b      	b.n	8003a9c <HAL_RCC_OscConfig+0xb0>
 8003a84:	4b69      	ldr	r3, [pc, #420]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a68      	ldr	r2, [pc, #416]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b66      	ldr	r3, [pc, #408]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a65      	ldr	r2, [pc, #404]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d013      	beq.n	8003acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7fd ff9a 	bl	80019dc <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aac:	f7fd ff96 	bl	80019dc <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	@ 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e207      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b5b      	ldr	r3, [pc, #364]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0xc0>
 8003aca:	e014      	b.n	8003af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7fd ff86 	bl	80019dc <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad4:	f7fd ff82 	bl	80019dc <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	@ 0x64
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e1f3      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae6:	4b51      	ldr	r3, [pc, #324]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0xe8>
 8003af2:	e000      	b.n	8003af6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d063      	beq.n	8003bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b02:	4b4a      	ldr	r3, [pc, #296]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00b      	beq.n	8003b26 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b0e:	4b47      	ldr	r3, [pc, #284]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d11c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b1a:	4b44      	ldr	r3, [pc, #272]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d116      	bne.n	8003b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b26:	4b41      	ldr	r3, [pc, #260]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d005      	beq.n	8003b3e <HAL_RCC_OscConfig+0x152>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d001      	beq.n	8003b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e1c7      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4937      	ldr	r1, [pc, #220]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b52:	e03a      	b.n	8003bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d020      	beq.n	8003b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b5c:	4b34      	ldr	r3, [pc, #208]	@ (8003c30 <HAL_RCC_OscConfig+0x244>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fd ff3b 	bl	80019dc <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6a:	f7fd ff37 	bl	80019dc <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e1a8      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b88:	4b28      	ldr	r3, [pc, #160]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4925      	ldr	r1, [pc, #148]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]
 8003b9c:	e015      	b.n	8003bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b9e:	4b24      	ldr	r3, [pc, #144]	@ (8003c30 <HAL_RCC_OscConfig+0x244>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fd ff1a 	bl	80019dc <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bac:	f7fd ff16 	bl	80019dc <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e187      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d036      	beq.n	8003c44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d016      	beq.n	8003c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bde:	4b15      	ldr	r3, [pc, #84]	@ (8003c34 <HAL_RCC_OscConfig+0x248>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be4:	f7fd fefa 	bl	80019dc <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bec:	f7fd fef6 	bl	80019dc <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e167      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x200>
 8003c0a:	e01b      	b.n	8003c44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c0c:	4b09      	ldr	r3, [pc, #36]	@ (8003c34 <HAL_RCC_OscConfig+0x248>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c12:	f7fd fee3 	bl	80019dc <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c18:	e00e      	b.n	8003c38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c1a:	f7fd fedf 	bl	80019dc <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d907      	bls.n	8003c38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e150      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	42470000 	.word	0x42470000
 8003c34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c38:	4b88      	ldr	r3, [pc, #544]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ea      	bne.n	8003c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8097 	beq.w	8003d80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c56:	4b81      	ldr	r3, [pc, #516]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10f      	bne.n	8003c82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	4b7d      	ldr	r3, [pc, #500]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	4a7c      	ldr	r2, [pc, #496]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c72:	4b7a      	ldr	r3, [pc, #488]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7a:	60bb      	str	r3, [r7, #8]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c82:	4b77      	ldr	r3, [pc, #476]	@ (8003e60 <HAL_RCC_OscConfig+0x474>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d118      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8e:	4b74      	ldr	r3, [pc, #464]	@ (8003e60 <HAL_RCC_OscConfig+0x474>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a73      	ldr	r2, [pc, #460]	@ (8003e60 <HAL_RCC_OscConfig+0x474>)
 8003c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9a:	f7fd fe9f 	bl	80019dc <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca2:	f7fd fe9b 	bl	80019dc <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e10c      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb4:	4b6a      	ldr	r3, [pc, #424]	@ (8003e60 <HAL_RCC_OscConfig+0x474>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d106      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x2ea>
 8003cc8:	4b64      	ldr	r3, [pc, #400]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ccc:	4a63      	ldr	r2, [pc, #396]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd4:	e01c      	b.n	8003d10 <HAL_RCC_OscConfig+0x324>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b05      	cmp	r3, #5
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x30c>
 8003cde:	4b5f      	ldr	r3, [pc, #380]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce2:	4a5e      	ldr	r2, [pc, #376]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003ce4:	f043 0304 	orr.w	r3, r3, #4
 8003ce8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cea:	4b5c      	ldr	r3, [pc, #368]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cee:	4a5b      	ldr	r2, [pc, #364]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cf6:	e00b      	b.n	8003d10 <HAL_RCC_OscConfig+0x324>
 8003cf8:	4b58      	ldr	r3, [pc, #352]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfc:	4a57      	ldr	r2, [pc, #348]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d04:	4b55      	ldr	r3, [pc, #340]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d08:	4a54      	ldr	r2, [pc, #336]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d0a:	f023 0304 	bic.w	r3, r3, #4
 8003d0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d015      	beq.n	8003d44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d18:	f7fd fe60 	bl	80019dc <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d20:	f7fd fe5c 	bl	80019dc <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e0cb      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d36:	4b49      	ldr	r3, [pc, #292]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0ee      	beq.n	8003d20 <HAL_RCC_OscConfig+0x334>
 8003d42:	e014      	b.n	8003d6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d44:	f7fd fe4a 	bl	80019dc <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4c:	f7fd fe46 	bl	80019dc <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e0b5      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d62:	4b3e      	ldr	r3, [pc, #248]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1ee      	bne.n	8003d4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d105      	bne.n	8003d80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d74:	4b39      	ldr	r3, [pc, #228]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d78:	4a38      	ldr	r2, [pc, #224]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80a1 	beq.w	8003ecc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d8a:	4b34      	ldr	r3, [pc, #208]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d05c      	beq.n	8003e50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d141      	bne.n	8003e22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9e:	4b31      	ldr	r3, [pc, #196]	@ (8003e64 <HAL_RCC_OscConfig+0x478>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7fd fe1a 	bl	80019dc <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dac:	f7fd fe16 	bl	80019dc <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e087      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbe:	4b27      	ldr	r3, [pc, #156]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69da      	ldr	r2, [r3, #28]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	085b      	lsrs	r3, r3, #1
 8003de2:	3b01      	subs	r3, #1
 8003de4:	041b      	lsls	r3, r3, #16
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dec:	061b      	lsls	r3, r3, #24
 8003dee:	491b      	ldr	r1, [pc, #108]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003df4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e64 <HAL_RCC_OscConfig+0x478>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfa:	f7fd fdef 	bl	80019dc <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e02:	f7fd fdeb 	bl	80019dc <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e05c      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e14:	4b11      	ldr	r3, [pc, #68]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x416>
 8003e20:	e054      	b.n	8003ecc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e22:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <HAL_RCC_OscConfig+0x478>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7fd fdd8 	bl	80019dc <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e30:	f7fd fdd4 	bl	80019dc <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e045      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e42:	4b06      	ldr	r3, [pc, #24]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x444>
 8003e4e:	e03d      	b.n	8003ecc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d107      	bne.n	8003e68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e038      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40007000 	.word	0x40007000
 8003e64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e68:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ec>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d028      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d121      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d11a      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e98:	4013      	ands	r3, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d111      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800

08003edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0cc      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef0:	4b68      	ldr	r3, [pc, #416]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d90c      	bls.n	8003f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efe:	4b65      	ldr	r3, [pc, #404]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f06:	4b63      	ldr	r3, [pc, #396]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d001      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0b8      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d020      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f30:	4b59      	ldr	r3, [pc, #356]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a58      	ldr	r2, [pc, #352]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f48:	4b53      	ldr	r3, [pc, #332]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4a52      	ldr	r2, [pc, #328]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f54:	4b50      	ldr	r3, [pc, #320]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	494d      	ldr	r1, [pc, #308]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d044      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7a:	4b47      	ldr	r3, [pc, #284]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d119      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e07f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d003      	beq.n	8003f9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e06f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003faa:	4b3b      	ldr	r3, [pc, #236]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e067      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fba:	4b37      	ldr	r3, [pc, #220]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f023 0203 	bic.w	r2, r3, #3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4934      	ldr	r1, [pc, #208]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fcc:	f7fd fd06 	bl	80019dc <HAL_GetTick>
 8003fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd2:	e00a      	b.n	8003fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd4:	f7fd fd02 	bl	80019dc <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e04f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fea:	4b2b      	ldr	r3, [pc, #172]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 020c 	and.w	r2, r3, #12
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d1eb      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b25      	ldr	r3, [pc, #148]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d20c      	bcs.n	8004024 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b22      	ldr	r3, [pc, #136]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004012:	4b20      	ldr	r3, [pc, #128]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e032      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004030:	4b19      	ldr	r3, [pc, #100]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4916      	ldr	r1, [pc, #88]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800404e:	4b12      	ldr	r3, [pc, #72]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	490e      	ldr	r1, [pc, #56]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	4313      	orrs	r3, r2
 8004060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004062:	f000 f821 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 8004066:	4602      	mov	r2, r0
 8004068:	4b0b      	ldr	r3, [pc, #44]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	490a      	ldr	r1, [pc, #40]	@ (800409c <HAL_RCC_ClockConfig+0x1c0>)
 8004074:	5ccb      	ldrb	r3, [r1, r3]
 8004076:	fa22 f303 	lsr.w	r3, r2, r3
 800407a:	4a09      	ldr	r2, [pc, #36]	@ (80040a0 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800407e:	4b09      	ldr	r3, [pc, #36]	@ (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd fb38 	bl	80016f8 <HAL_InitTick>

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40023c00 	.word	0x40023c00
 8004098:	40023800 	.word	0x40023800
 800409c:	0800e948 	.word	0x0800e948
 80040a0:	20000004 	.word	0x20000004
 80040a4:	20000008 	.word	0x20000008

080040a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ac:	b094      	sub	sp, #80	@ 0x50
 80040ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040c0:	4b79      	ldr	r3, [pc, #484]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d00d      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0x40>
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	f200 80e1 	bhi.w	8004294 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0x34>
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d003      	beq.n	80040e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040da:	e0db      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040dc:	4b73      	ldr	r3, [pc, #460]	@ (80042ac <HAL_RCC_GetSysClockFreq+0x204>)
 80040de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040e0:	e0db      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040e2:	4b73      	ldr	r3, [pc, #460]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80040e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040e6:	e0d8      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e8:	4b6f      	ldr	r3, [pc, #444]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040f2:	4b6d      	ldr	r3, [pc, #436]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d063      	beq.n	80041c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040fe:	4b6a      	ldr	r3, [pc, #424]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	099b      	lsrs	r3, r3, #6
 8004104:	2200      	movs	r2, #0
 8004106:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004108:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800410a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004110:	633b      	str	r3, [r7, #48]	@ 0x30
 8004112:	2300      	movs	r3, #0
 8004114:	637b      	str	r3, [r7, #52]	@ 0x34
 8004116:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800411a:	4622      	mov	r2, r4
 800411c:	462b      	mov	r3, r5
 800411e:	f04f 0000 	mov.w	r0, #0
 8004122:	f04f 0100 	mov.w	r1, #0
 8004126:	0159      	lsls	r1, r3, #5
 8004128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800412c:	0150      	lsls	r0, r2, #5
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4621      	mov	r1, r4
 8004134:	1a51      	subs	r1, r2, r1
 8004136:	6139      	str	r1, [r7, #16]
 8004138:	4629      	mov	r1, r5
 800413a:	eb63 0301 	sbc.w	r3, r3, r1
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800414c:	4659      	mov	r1, fp
 800414e:	018b      	lsls	r3, r1, #6
 8004150:	4651      	mov	r1, sl
 8004152:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004156:	4651      	mov	r1, sl
 8004158:	018a      	lsls	r2, r1, #6
 800415a:	4651      	mov	r1, sl
 800415c:	ebb2 0801 	subs.w	r8, r2, r1
 8004160:	4659      	mov	r1, fp
 8004162:	eb63 0901 	sbc.w	r9, r3, r1
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800417a:	4690      	mov	r8, r2
 800417c:	4699      	mov	r9, r3
 800417e:	4623      	mov	r3, r4
 8004180:	eb18 0303 	adds.w	r3, r8, r3
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	462b      	mov	r3, r5
 8004188:	eb49 0303 	adc.w	r3, r9, r3
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800419a:	4629      	mov	r1, r5
 800419c:	024b      	lsls	r3, r1, #9
 800419e:	4621      	mov	r1, r4
 80041a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041a4:	4621      	mov	r1, r4
 80041a6:	024a      	lsls	r2, r1, #9
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ae:	2200      	movs	r2, #0
 80041b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041b8:	f7fc f872 	bl	80002a0 <__aeabi_uldivmod>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4613      	mov	r3, r2
 80041c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041c4:	e058      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c6:	4b38      	ldr	r3, [pc, #224]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	2200      	movs	r2, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	4611      	mov	r1, r2
 80041d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	2300      	movs	r3, #0
 80041da:	627b      	str	r3, [r7, #36]	@ 0x24
 80041dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041e0:	4642      	mov	r2, r8
 80041e2:	464b      	mov	r3, r9
 80041e4:	f04f 0000 	mov.w	r0, #0
 80041e8:	f04f 0100 	mov.w	r1, #0
 80041ec:	0159      	lsls	r1, r3, #5
 80041ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f2:	0150      	lsls	r0, r2, #5
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4641      	mov	r1, r8
 80041fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80041fe:	4649      	mov	r1, r9
 8004200:	eb63 0b01 	sbc.w	fp, r3, r1
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004210:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004214:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004218:	ebb2 040a 	subs.w	r4, r2, sl
 800421c:	eb63 050b 	sbc.w	r5, r3, fp
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	00eb      	lsls	r3, r5, #3
 800422a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800422e:	00e2      	lsls	r2, r4, #3
 8004230:	4614      	mov	r4, r2
 8004232:	461d      	mov	r5, r3
 8004234:	4643      	mov	r3, r8
 8004236:	18e3      	adds	r3, r4, r3
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	464b      	mov	r3, r9
 800423c:	eb45 0303 	adc.w	r3, r5, r3
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800424e:	4629      	mov	r1, r5
 8004250:	028b      	lsls	r3, r1, #10
 8004252:	4621      	mov	r1, r4
 8004254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004258:	4621      	mov	r1, r4
 800425a:	028a      	lsls	r2, r1, #10
 800425c:	4610      	mov	r0, r2
 800425e:	4619      	mov	r1, r3
 8004260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004262:	2200      	movs	r2, #0
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	61fa      	str	r2, [r7, #28]
 8004268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800426c:	f7fc f818 	bl	80002a0 <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4613      	mov	r3, r2
 8004276:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004278:	4b0b      	ldr	r3, [pc, #44]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	0c1b      	lsrs	r3, r3, #16
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	3301      	adds	r3, #1
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004288:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800428a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004292:	e002      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004294:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004296:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800429a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800429c:	4618      	mov	r0, r3
 800429e:	3750      	adds	r7, #80	@ 0x50
 80042a0:	46bd      	mov	sp, r7
 80042a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800
 80042ac:	00f42400 	.word	0x00f42400
 80042b0:	007a1200 	.word	0x007a1200

080042b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b8:	4b03      	ldr	r3, [pc, #12]	@ (80042c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ba:	681b      	ldr	r3, [r3, #0]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20000004 	.word	0x20000004

080042cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042d0:	f7ff fff0 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 80042d4:	4602      	mov	r2, r0
 80042d6:	4b05      	ldr	r3, [pc, #20]	@ (80042ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	0a9b      	lsrs	r3, r3, #10
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	4903      	ldr	r1, [pc, #12]	@ (80042f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042e2:	5ccb      	ldrb	r3, [r1, r3]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40023800 	.word	0x40023800
 80042f0:	0800e958 	.word	0x0800e958

080042f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042f8:	f7ff ffdc 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 80042fc:	4602      	mov	r2, r0
 80042fe:	4b05      	ldr	r3, [pc, #20]	@ (8004314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	0b5b      	lsrs	r3, r3, #13
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	4903      	ldr	r1, [pc, #12]	@ (8004318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800430a:	5ccb      	ldrb	r3, [r1, r3]
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40023800 	.word	0x40023800
 8004318:	0800e958 	.word	0x0800e958

0800431c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	220f      	movs	r2, #15
 800432a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800432c:	4b12      	ldr	r3, [pc, #72]	@ (8004378 <HAL_RCC_GetClockConfig+0x5c>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 0203 	and.w	r2, r3, #3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004338:	4b0f      	ldr	r3, [pc, #60]	@ (8004378 <HAL_RCC_GetClockConfig+0x5c>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004344:	4b0c      	ldr	r3, [pc, #48]	@ (8004378 <HAL_RCC_GetClockConfig+0x5c>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004350:	4b09      	ldr	r3, [pc, #36]	@ (8004378 <HAL_RCC_GetClockConfig+0x5c>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	08db      	lsrs	r3, r3, #3
 8004356:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800435e:	4b07      	ldr	r3, [pc, #28]	@ (800437c <HAL_RCC_GetClockConfig+0x60>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0207 	and.w	r2, r3, #7
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	601a      	str	r2, [r3, #0]
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800
 800437c:	40023c00 	.word	0x40023c00

08004380 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d105      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d035      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043a8:	4b62      	ldr	r3, [pc, #392]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ae:	f7fd fb15 	bl	80019dc <HAL_GetTick>
 80043b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043b6:	f7fd fb11 	bl	80019dc <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e0b0      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043c8:	4b5b      	ldr	r3, [pc, #364]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f0      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	019a      	lsls	r2, r3, #6
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	071b      	lsls	r3, r3, #28
 80043e0:	4955      	ldr	r1, [pc, #340]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043e8:	4b52      	ldr	r3, [pc, #328]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ee:	f7fd faf5 	bl	80019dc <HAL_GetTick>
 80043f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043f4:	e008      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043f6:	f7fd faf1 	bl	80019dc <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e090      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004408:	4b4b      	ldr	r3, [pc, #300]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0f0      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8083 	beq.w	8004528 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	4b44      	ldr	r3, [pc, #272]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	4a43      	ldr	r2, [pc, #268]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800442c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004430:	6413      	str	r3, [r2, #64]	@ 0x40
 8004432:	4b41      	ldr	r3, [pc, #260]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800443e:	4b3f      	ldr	r3, [pc, #252]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a3e      	ldr	r2, [pc, #248]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004448:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800444a:	f7fd fac7 	bl	80019dc <HAL_GetTick>
 800444e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004450:	e008      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004452:	f7fd fac3 	bl	80019dc <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e062      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004464:	4b35      	ldr	r3, [pc, #212]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004470:	4b31      	ldr	r3, [pc, #196]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004474:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004478:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d02f      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	429a      	cmp	r2, r3
 800448c:	d028      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800448e:	4b2a      	ldr	r3, [pc, #168]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004492:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004496:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004498:	4b29      	ldr	r3, [pc, #164]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800449e:	4b28      	ldr	r3, [pc, #160]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044a4:	4a24      	ldr	r2, [pc, #144]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044aa:	4b23      	ldr	r3, [pc, #140]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d114      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044b6:	f7fd fa91 	bl	80019dc <HAL_GetTick>
 80044ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044bc:	e00a      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044be:	f7fd fa8d 	bl	80019dc <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e02a      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d4:	4b18      	ldr	r3, [pc, #96]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0ee      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ec:	d10d      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80044ee:	4b12      	ldr	r3, [pc, #72]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80044fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004502:	490d      	ldr	r1, [pc, #52]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004504:	4313      	orrs	r3, r2
 8004506:	608b      	str	r3, [r1, #8]
 8004508:	e005      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800450a:	4b0b      	ldr	r3, [pc, #44]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	4a0a      	ldr	r2, [pc, #40]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004510:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004514:	6093      	str	r3, [r2, #8]
 8004516:	4b08      	ldr	r3, [pc, #32]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004518:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004522:	4905      	ldr	r1, [pc, #20]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004524:	4313      	orrs	r3, r2
 8004526:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	42470068 	.word	0x42470068
 8004538:	40023800 	.word	0x40023800
 800453c:	40007000 	.word	0x40007000
 8004540:	42470e40 	.word	0x42470e40

08004544 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d13f      	bne.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004562:	4b24      	ldr	r3, [pc, #144]	@ (80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800456a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d006      	beq.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004578:	d12f      	bne.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800457a:	4b1f      	ldr	r3, [pc, #124]	@ (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800457c:	617b      	str	r3, [r7, #20]
          break;
 800457e:	e02f      	b.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004580:	4b1c      	ldr	r3, [pc, #112]	@ (80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004588:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800458c:	d108      	bne.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800458e:	4b19      	ldr	r3, [pc, #100]	@ (80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004596:	4a19      	ldr	r2, [pc, #100]	@ (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	e007      	b.n	80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045a0:	4b14      	ldr	r3, [pc, #80]	@ (80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045a8:	4a15      	ldr	r2, [pc, #84]	@ (8004600 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80045aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ae:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80045b0:	4b10      	ldr	r3, [pc, #64]	@ (80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045b6:	099b      	lsrs	r3, r3, #6
 80045b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	fb02 f303 	mul.w	r3, r2, r3
 80045c2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80045c4:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045ca:	0f1b      	lsrs	r3, r3, #28
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	617b      	str	r3, [r7, #20]
          break;
 80045d8:	e002      	b.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
          break;
 80045de:	bf00      	nop
        }
      }
      break;
 80045e0:	e000      	b.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80045e2:	bf00      	nop
    }
  }
  return frequency;
 80045e4:	697b      	ldr	r3, [r7, #20]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	371c      	adds	r7, #28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	00bb8000 	.word	0x00bb8000
 80045fc:	007a1200 	.word	0x007a1200
 8004600:	00f42400 	.word	0x00f42400

08004604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e07b      	b.n	800470e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	2b00      	cmp	r3, #0
 800461c:	d108      	bne.n	8004630 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004626:	d009      	beq.n	800463c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	61da      	str	r2, [r3, #28]
 800462e:	e005      	b.n	800463c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fc fe40 	bl	80012dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004672:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c0:	ea42 0103 	orr.w	r1, r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	0c1b      	lsrs	r3, r3, #16
 80046da:	f003 0104 	and.w	r1, r3, #4
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e2:	f003 0210 	and.w	r2, r3, #16
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69da      	ldr	r2, [r3, #28]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b088      	sub	sp, #32
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	4613      	mov	r3, r2
 8004724:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004726:	f7fd f959 	bl	80019dc <HAL_GetTick>
 800472a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	d001      	beq.n	8004740 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800473c:	2302      	movs	r3, #2
 800473e:	e12a      	b.n	8004996 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_SPI_Transmit+0x36>
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e122      	b.n	8004996 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_SPI_Transmit+0x48>
 800475a:	2302      	movs	r3, #2
 800475c:	e11b      	b.n	8004996 <HAL_SPI_Transmit+0x280>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2203      	movs	r2, #3
 800476a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	88fa      	ldrh	r2, [r7, #6]
 800477e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	88fa      	ldrh	r2, [r7, #6]
 8004784:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ac:	d10f      	bne.n	80047ce <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d8:	2b40      	cmp	r3, #64	@ 0x40
 80047da:	d007      	beq.n	80047ec <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047f4:	d152      	bne.n	800489c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_SPI_Transmit+0xee>
 80047fe:	8b7b      	ldrh	r3, [r7, #26]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d145      	bne.n	8004890 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004808:	881a      	ldrh	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004814:	1c9a      	adds	r2, r3, #2
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004828:	e032      	b.n	8004890 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b02      	cmp	r3, #2
 8004836:	d112      	bne.n	800485e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483c:	881a      	ldrh	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004848:	1c9a      	adds	r2, r3, #2
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800485c:	e018      	b.n	8004890 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800485e:	f7fd f8bd 	bl	80019dc <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d803      	bhi.n	8004876 <HAL_SPI_Transmit+0x160>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004874:	d102      	bne.n	800487c <HAL_SPI_Transmit+0x166>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d109      	bne.n	8004890 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e082      	b.n	8004996 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1c7      	bne.n	800482a <HAL_SPI_Transmit+0x114>
 800489a:	e053      	b.n	8004944 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <HAL_SPI_Transmit+0x194>
 80048a4:	8b7b      	ldrh	r3, [r7, #26]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d147      	bne.n	800493a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	330c      	adds	r3, #12
 80048b4:	7812      	ldrb	r2, [r2, #0]
 80048b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048d0:	e033      	b.n	800493a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d113      	bne.n	8004908 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	7812      	ldrb	r2, [r2, #0]
 80048ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004906:	e018      	b.n	800493a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004908:	f7fd f868 	bl	80019dc <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d803      	bhi.n	8004920 <HAL_SPI_Transmit+0x20a>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491e:	d102      	bne.n	8004926 <HAL_SPI_Transmit+0x210>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e02d      	b.n	8004996 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1c6      	bne.n	80048d2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	6839      	ldr	r1, [r7, #0]
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fa59 	bl	8004e00 <SPI_EndRxTxTransaction>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10a      	bne.n	8004978 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004962:	2300      	movs	r3, #0
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004994:	2300      	movs	r3, #0
  }
}
 8004996:	4618      	mov	r0, r3
 8004998:	3720      	adds	r7, #32
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b08a      	sub	sp, #40	@ 0x28
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049ac:	2301      	movs	r3, #1
 80049ae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049b0:	f7fd f814 	bl	80019dc <HAL_GetTick>
 80049b4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049bc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80049c4:	887b      	ldrh	r3, [r7, #2]
 80049c6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049c8:	7ffb      	ldrb	r3, [r7, #31]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d00c      	beq.n	80049e8 <HAL_SPI_TransmitReceive+0x4a>
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049d4:	d106      	bne.n	80049e4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <HAL_SPI_TransmitReceive+0x46>
 80049de:	7ffb      	ldrb	r3, [r7, #31]
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d001      	beq.n	80049e8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80049e4:	2302      	movs	r3, #2
 80049e6:	e17f      	b.n	8004ce8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d005      	beq.n	80049fa <HAL_SPI_TransmitReceive+0x5c>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <HAL_SPI_TransmitReceive+0x5c>
 80049f4:	887b      	ldrh	r3, [r7, #2]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e174      	b.n	8004ce8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_SPI_TransmitReceive+0x6e>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e16d      	b.n	8004ce8 <HAL_SPI_TransmitReceive+0x34a>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d003      	beq.n	8004a28 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2205      	movs	r2, #5
 8004a24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	887a      	ldrh	r2, [r7, #2]
 8004a38:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	887a      	ldrh	r2, [r7, #2]
 8004a3e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	887a      	ldrh	r2, [r7, #2]
 8004a4a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	887a      	ldrh	r2, [r7, #2]
 8004a50:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a68:	2b40      	cmp	r3, #64	@ 0x40
 8004a6a:	d007      	beq.n	8004a7c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a84:	d17e      	bne.n	8004b84 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <HAL_SPI_TransmitReceive+0xf6>
 8004a8e:	8afb      	ldrh	r3, [r7, #22]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d16c      	bne.n	8004b6e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a98:	881a      	ldrh	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa4:	1c9a      	adds	r2, r3, #2
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ab8:	e059      	b.n	8004b6e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d11b      	bne.n	8004b00 <HAL_SPI_TransmitReceive+0x162>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d016      	beq.n	8004b00 <HAL_SPI_TransmitReceive+0x162>
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d113      	bne.n	8004b00 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004adc:	881a      	ldrh	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae8:	1c9a      	adds	r2, r3, #2
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d119      	bne.n	8004b42 <HAL_SPI_TransmitReceive+0x1a4>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d014      	beq.n	8004b42 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b22:	b292      	uxth	r2, r2
 8004b24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2a:	1c9a      	adds	r2, r3, #2
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b42:	f7fc ff4b 	bl	80019dc <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d80d      	bhi.n	8004b6e <HAL_SPI_TransmitReceive+0x1d0>
 8004b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b58:	d009      	beq.n	8004b6e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e0bc      	b.n	8004ce8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1a0      	bne.n	8004aba <HAL_SPI_TransmitReceive+0x11c>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d19b      	bne.n	8004aba <HAL_SPI_TransmitReceive+0x11c>
 8004b82:	e082      	b.n	8004c8a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <HAL_SPI_TransmitReceive+0x1f4>
 8004b8c:	8afb      	ldrh	r3, [r7, #22]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d171      	bne.n	8004c76 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	330c      	adds	r3, #12
 8004b9c:	7812      	ldrb	r2, [r2, #0]
 8004b9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bb8:	e05d      	b.n	8004c76 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d11c      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x264>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d017      	beq.n	8004c02 <HAL_SPI_TransmitReceive+0x264>
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d114      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	330c      	adds	r3, #12
 8004be2:	7812      	ldrb	r2, [r2, #0]
 8004be4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d119      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x2a6>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d014      	beq.n	8004c44 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c40:	2301      	movs	r3, #1
 8004c42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c44:	f7fc feca 	bl	80019dc <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d803      	bhi.n	8004c5c <HAL_SPI_TransmitReceive+0x2be>
 8004c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5a:	d102      	bne.n	8004c62 <HAL_SPI_TransmitReceive+0x2c4>
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d109      	bne.n	8004c76 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e038      	b.n	8004ce8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d19c      	bne.n	8004bba <HAL_SPI_TransmitReceive+0x21c>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d197      	bne.n	8004bba <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c8a:	6a3a      	ldr	r2, [r7, #32]
 8004c8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f8b6 	bl	8004e00 <SPI_EndRxTxTransaction>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d008      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e01d      	b.n	8004ce8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10a      	bne.n	8004cca <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	613b      	str	r3, [r7, #16]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
  }
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3728      	adds	r7, #40	@ 0x28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d00:	f7fc fe6c 	bl	80019dc <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d10:	f7fc fe64 	bl	80019dc <HAL_GetTick>
 8004d14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d16:	4b39      	ldr	r3, [pc, #228]	@ (8004dfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	015b      	lsls	r3, r3, #5
 8004d1c:	0d1b      	lsrs	r3, r3, #20
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	fb02 f303 	mul.w	r3, r2, r3
 8004d24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d26:	e054      	b.n	8004dd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2e:	d050      	beq.n	8004dd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d30:	f7fc fe54 	bl	80019dc <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d902      	bls.n	8004d46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d13d      	bne.n	8004dc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d5e:	d111      	bne.n	8004d84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d68:	d004      	beq.n	8004d74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d72:	d107      	bne.n	8004d84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d8c:	d10f      	bne.n	8004dae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004dac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e017      	b.n	8004df2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	bf0c      	ite	eq
 8004de2:	2301      	moveq	r3, #1
 8004de4:	2300      	movne	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d19b      	bne.n	8004d28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000004 	.word	0x20000004

08004e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2201      	movs	r2, #1
 8004e14:	2102      	movs	r1, #2
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f7ff ff6a 	bl	8004cf0 <SPI_WaitFlagStateUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e032      	b.n	8004e98 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e32:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea0 <SPI_EndRxTxTransaction+0xa0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea4 <SPI_EndRxTxTransaction+0xa4>)
 8004e38:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3c:	0d5b      	lsrs	r3, r3, #21
 8004e3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e50:	d112      	bne.n	8004e78 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2180      	movs	r1, #128	@ 0x80
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f7ff ff47 	bl	8004cf0 <SPI_WaitFlagStateUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d016      	beq.n	8004e96 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e6c:	f043 0220 	orr.w	r2, r3, #32
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e00f      	b.n	8004e98 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8e:	2b80      	cmp	r3, #128	@ 0x80
 8004e90:	d0f2      	beq.n	8004e78 <SPI_EndRxTxTransaction+0x78>
 8004e92:	e000      	b.n	8004e96 <SPI_EndRxTxTransaction+0x96>
        break;
 8004e94:	bf00      	nop
  }

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20000004 	.word	0x20000004
 8004ea4:	165e9f81 	.word	0x165e9f81

08004ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e041      	b.n	8004f3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fc fa82 	bl	80013d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f000 fc62 	bl	80057b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d001      	beq.n	8004f60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e04e      	b.n	8004ffe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0201 	orr.w	r2, r2, #1
 8004f76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a23      	ldr	r2, [pc, #140]	@ (800500c <HAL_TIM_Base_Start_IT+0xc4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d022      	beq.n	8004fc8 <HAL_TIM_Base_Start_IT+0x80>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f8a:	d01d      	beq.n	8004fc8 <HAL_TIM_Base_Start_IT+0x80>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a1f      	ldr	r2, [pc, #124]	@ (8005010 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d018      	beq.n	8004fc8 <HAL_TIM_Base_Start_IT+0x80>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8005014 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d013      	beq.n	8004fc8 <HAL_TIM_Base_Start_IT+0x80>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8005018 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00e      	beq.n	8004fc8 <HAL_TIM_Base_Start_IT+0x80>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1b      	ldr	r2, [pc, #108]	@ (800501c <HAL_TIM_Base_Start_IT+0xd4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d009      	beq.n	8004fc8 <HAL_TIM_Base_Start_IT+0x80>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a19      	ldr	r2, [pc, #100]	@ (8005020 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d004      	beq.n	8004fc8 <HAL_TIM_Base_Start_IT+0x80>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a18      	ldr	r2, [pc, #96]	@ (8005024 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d111      	bne.n	8004fec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b06      	cmp	r3, #6
 8004fd8:	d010      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0201 	orr.w	r2, r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fea:	e007      	b.n	8004ffc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40010000 	.word	0x40010000
 8005010:	40000400 	.word	0x40000400
 8005014:	40000800 	.word	0x40000800
 8005018:	40000c00 	.word	0x40000c00
 800501c:	40010400 	.word	0x40010400
 8005020:	40014000 	.word	0x40014000
 8005024:	40001800 	.word	0x40001800

08005028 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e041      	b.n	80050be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f839 	bl	80050c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f000 fba2 	bl	80057b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d109      	bne.n	8005100 <HAL_TIM_PWM_Start+0x24>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	bf14      	ite	ne
 80050f8:	2301      	movne	r3, #1
 80050fa:	2300      	moveq	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	e022      	b.n	8005146 <HAL_TIM_PWM_Start+0x6a>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b04      	cmp	r3, #4
 8005104:	d109      	bne.n	800511a <HAL_TIM_PWM_Start+0x3e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b01      	cmp	r3, #1
 8005110:	bf14      	ite	ne
 8005112:	2301      	movne	r3, #1
 8005114:	2300      	moveq	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	e015      	b.n	8005146 <HAL_TIM_PWM_Start+0x6a>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b08      	cmp	r3, #8
 800511e:	d109      	bne.n	8005134 <HAL_TIM_PWM_Start+0x58>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b01      	cmp	r3, #1
 800512a:	bf14      	ite	ne
 800512c:	2301      	movne	r3, #1
 800512e:	2300      	moveq	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	e008      	b.n	8005146 <HAL_TIM_PWM_Start+0x6a>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	bf14      	ite	ne
 8005140:	2301      	movne	r3, #1
 8005142:	2300      	moveq	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e07c      	b.n	8005248 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d104      	bne.n	800515e <HAL_TIM_PWM_Start+0x82>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800515c:	e013      	b.n	8005186 <HAL_TIM_PWM_Start+0xaa>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b04      	cmp	r3, #4
 8005162:	d104      	bne.n	800516e <HAL_TIM_PWM_Start+0x92>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800516c:	e00b      	b.n	8005186 <HAL_TIM_PWM_Start+0xaa>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b08      	cmp	r3, #8
 8005172:	d104      	bne.n	800517e <HAL_TIM_PWM_Start+0xa2>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800517c:	e003      	b.n	8005186 <HAL_TIM_PWM_Start+0xaa>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2201      	movs	r2, #1
 800518c:	6839      	ldr	r1, [r7, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fe04 	bl	8005d9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a2d      	ldr	r2, [pc, #180]	@ (8005250 <HAL_TIM_PWM_Start+0x174>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d004      	beq.n	80051a8 <HAL_TIM_PWM_Start+0xcc>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005254 <HAL_TIM_PWM_Start+0x178>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d101      	bne.n	80051ac <HAL_TIM_PWM_Start+0xd0>
 80051a8:	2301      	movs	r3, #1
 80051aa:	e000      	b.n	80051ae <HAL_TIM_PWM_Start+0xd2>
 80051ac:	2300      	movs	r3, #0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d007      	beq.n	80051c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a22      	ldr	r2, [pc, #136]	@ (8005250 <HAL_TIM_PWM_Start+0x174>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d022      	beq.n	8005212 <HAL_TIM_PWM_Start+0x136>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d4:	d01d      	beq.n	8005212 <HAL_TIM_PWM_Start+0x136>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1f      	ldr	r2, [pc, #124]	@ (8005258 <HAL_TIM_PWM_Start+0x17c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d018      	beq.n	8005212 <HAL_TIM_PWM_Start+0x136>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1d      	ldr	r2, [pc, #116]	@ (800525c <HAL_TIM_PWM_Start+0x180>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d013      	beq.n	8005212 <HAL_TIM_PWM_Start+0x136>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005260 <HAL_TIM_PWM_Start+0x184>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d00e      	beq.n	8005212 <HAL_TIM_PWM_Start+0x136>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a16      	ldr	r2, [pc, #88]	@ (8005254 <HAL_TIM_PWM_Start+0x178>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d009      	beq.n	8005212 <HAL_TIM_PWM_Start+0x136>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a18      	ldr	r2, [pc, #96]	@ (8005264 <HAL_TIM_PWM_Start+0x188>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d004      	beq.n	8005212 <HAL_TIM_PWM_Start+0x136>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a16      	ldr	r2, [pc, #88]	@ (8005268 <HAL_TIM_PWM_Start+0x18c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d111      	bne.n	8005236 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b06      	cmp	r3, #6
 8005222:	d010      	beq.n	8005246 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005234:	e007      	b.n	8005246 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0201 	orr.w	r2, r2, #1
 8005244:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40010000 	.word	0x40010000
 8005254:	40010400 	.word	0x40010400
 8005258:	40000400 	.word	0x40000400
 800525c:	40000800 	.word	0x40000800
 8005260:	40000c00 	.word	0x40000c00
 8005264:	40014000 	.word	0x40014000
 8005268:	40001800 	.word	0x40001800

0800526c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d020      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d01b      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0202 	mvn.w	r2, #2
 80052a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fa5b 	bl	8005772 <HAL_TIM_IC_CaptureCallback>
 80052bc:	e005      	b.n	80052ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fa4d 	bl	800575e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fa5e 	bl	8005786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d020      	beq.n	800531c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01b      	beq.n	800531c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0204 	mvn.w	r2, #4
 80052ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2202      	movs	r2, #2
 80052f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fa35 	bl	8005772 <HAL_TIM_IC_CaptureCallback>
 8005308:	e005      	b.n	8005316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fa27 	bl	800575e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fa38 	bl	8005786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d020      	beq.n	8005368 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01b      	beq.n	8005368 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0208 	mvn.w	r2, #8
 8005338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2204      	movs	r2, #4
 800533e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fa0f 	bl	8005772 <HAL_TIM_IC_CaptureCallback>
 8005354:	e005      	b.n	8005362 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fa01 	bl	800575e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fa12 	bl	8005786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f003 0310 	and.w	r3, r3, #16
 800536e:	2b00      	cmp	r3, #0
 8005370:	d020      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01b      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0210 	mvn.w	r2, #16
 8005384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2208      	movs	r2, #8
 800538a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f9e9 	bl	8005772 <HAL_TIM_IC_CaptureCallback>
 80053a0:	e005      	b.n	80053ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f9db 	bl	800575e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f9ec 	bl	8005786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00c      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0201 	mvn.w	r2, #1
 80053d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fb fd10 	bl	8000df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00c      	beq.n	80053fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d007      	beq.n	80053fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fd7c 	bl	8005ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00c      	beq.n	8005420 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800540c:	2b00      	cmp	r3, #0
 800540e:	d007      	beq.n	8005420 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f9bd 	bl	800579a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00c      	beq.n	8005444 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	d007      	beq.n	8005444 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0220 	mvn.w	r2, #32
 800543c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fd4e 	bl	8005ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005444:	bf00      	nop
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005466:	2302      	movs	r3, #2
 8005468:	e0ae      	b.n	80055c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b0c      	cmp	r3, #12
 8005476:	f200 809f 	bhi.w	80055b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800547a:	a201      	add	r2, pc, #4	@ (adr r2, 8005480 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800547c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005480:	080054b5 	.word	0x080054b5
 8005484:	080055b9 	.word	0x080055b9
 8005488:	080055b9 	.word	0x080055b9
 800548c:	080055b9 	.word	0x080055b9
 8005490:	080054f5 	.word	0x080054f5
 8005494:	080055b9 	.word	0x080055b9
 8005498:	080055b9 	.word	0x080055b9
 800549c:	080055b9 	.word	0x080055b9
 80054a0:	08005537 	.word	0x08005537
 80054a4:	080055b9 	.word	0x080055b9
 80054a8:	080055b9 	.word	0x080055b9
 80054ac:	080055b9 	.word	0x080055b9
 80054b0:	08005577 	.word	0x08005577
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fa24 	bl	8005908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699a      	ldr	r2, [r3, #24]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0208 	orr.w	r2, r2, #8
 80054ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0204 	bic.w	r2, r2, #4
 80054de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6999      	ldr	r1, [r3, #24]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	619a      	str	r2, [r3, #24]
      break;
 80054f2:	e064      	b.n	80055be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 fa74 	bl	80059e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800550e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699a      	ldr	r2, [r3, #24]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800551e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6999      	ldr	r1, [r3, #24]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	021a      	lsls	r2, r3, #8
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	619a      	str	r2, [r3, #24]
      break;
 8005534:	e043      	b.n	80055be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fac9 	bl	8005ad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69da      	ldr	r2, [r3, #28]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f042 0208 	orr.w	r2, r2, #8
 8005550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69da      	ldr	r2, [r3, #28]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0204 	bic.w	r2, r2, #4
 8005560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69d9      	ldr	r1, [r3, #28]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	61da      	str	r2, [r3, #28]
      break;
 8005574:	e023      	b.n	80055be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68b9      	ldr	r1, [r7, #8]
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fb1d 	bl	8005bbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69da      	ldr	r2, [r3, #28]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69da      	ldr	r2, [r3, #28]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69d9      	ldr	r1, [r3, #28]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	021a      	lsls	r2, r3, #8
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	61da      	str	r2, [r3, #28]
      break;
 80055b6:	e002      	b.n	80055be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	75fb      	strb	r3, [r7, #23]
      break;
 80055bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_TIM_ConfigClockSource+0x1c>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e0b4      	b.n	8005756 <HAL_TIM_ConfigClockSource+0x186>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800560a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005612:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005624:	d03e      	beq.n	80056a4 <HAL_TIM_ConfigClockSource+0xd4>
 8005626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800562a:	f200 8087 	bhi.w	800573c <HAL_TIM_ConfigClockSource+0x16c>
 800562e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005632:	f000 8086 	beq.w	8005742 <HAL_TIM_ConfigClockSource+0x172>
 8005636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800563a:	d87f      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x16c>
 800563c:	2b70      	cmp	r3, #112	@ 0x70
 800563e:	d01a      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0xa6>
 8005640:	2b70      	cmp	r3, #112	@ 0x70
 8005642:	d87b      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x16c>
 8005644:	2b60      	cmp	r3, #96	@ 0x60
 8005646:	d050      	beq.n	80056ea <HAL_TIM_ConfigClockSource+0x11a>
 8005648:	2b60      	cmp	r3, #96	@ 0x60
 800564a:	d877      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x16c>
 800564c:	2b50      	cmp	r3, #80	@ 0x50
 800564e:	d03c      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0xfa>
 8005650:	2b50      	cmp	r3, #80	@ 0x50
 8005652:	d873      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x16c>
 8005654:	2b40      	cmp	r3, #64	@ 0x40
 8005656:	d058      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x13a>
 8005658:	2b40      	cmp	r3, #64	@ 0x40
 800565a:	d86f      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x16c>
 800565c:	2b30      	cmp	r3, #48	@ 0x30
 800565e:	d064      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x15a>
 8005660:	2b30      	cmp	r3, #48	@ 0x30
 8005662:	d86b      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x16c>
 8005664:	2b20      	cmp	r3, #32
 8005666:	d060      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x15a>
 8005668:	2b20      	cmp	r3, #32
 800566a:	d867      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x16c>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d05c      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x15a>
 8005670:	2b10      	cmp	r3, #16
 8005672:	d05a      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x15a>
 8005674:	e062      	b.n	800573c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005686:	f000 fb69 	bl	8005d5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005698:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	609a      	str	r2, [r3, #8]
      break;
 80056a2:	e04f      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056b4:	f000 fb52 	bl	8005d5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056c6:	609a      	str	r2, [r3, #8]
      break;
 80056c8:	e03c      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d6:	461a      	mov	r2, r3
 80056d8:	f000 fac6 	bl	8005c68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2150      	movs	r1, #80	@ 0x50
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fb1f 	bl	8005d26 <TIM_ITRx_SetConfig>
      break;
 80056e8:	e02c      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056f6:	461a      	mov	r2, r3
 80056f8:	f000 fae5 	bl	8005cc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2160      	movs	r1, #96	@ 0x60
 8005702:	4618      	mov	r0, r3
 8005704:	f000 fb0f 	bl	8005d26 <TIM_ITRx_SetConfig>
      break;
 8005708:	e01c      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005716:	461a      	mov	r2, r3
 8005718:	f000 faa6 	bl	8005c68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2140      	movs	r1, #64	@ 0x40
 8005722:	4618      	mov	r0, r3
 8005724:	f000 faff 	bl	8005d26 <TIM_ITRx_SetConfig>
      break;
 8005728:	e00c      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f000 faf6 	bl	8005d26 <TIM_ITRx_SetConfig>
      break;
 800573a:	e003      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	73fb      	strb	r3, [r7, #15]
      break;
 8005740:	e000      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005742:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005754:	7bfb      	ldrb	r3, [r7, #15]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
	...

080057b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a46      	ldr	r2, [pc, #280]	@ (80058dc <TIM_Base_SetConfig+0x12c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d013      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ce:	d00f      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a43      	ldr	r2, [pc, #268]	@ (80058e0 <TIM_Base_SetConfig+0x130>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00b      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a42      	ldr	r2, [pc, #264]	@ (80058e4 <TIM_Base_SetConfig+0x134>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d007      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a41      	ldr	r2, [pc, #260]	@ (80058e8 <TIM_Base_SetConfig+0x138>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d003      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a40      	ldr	r2, [pc, #256]	@ (80058ec <TIM_Base_SetConfig+0x13c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d108      	bne.n	8005802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a35      	ldr	r2, [pc, #212]	@ (80058dc <TIM_Base_SetConfig+0x12c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d02b      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005810:	d027      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a32      	ldr	r2, [pc, #200]	@ (80058e0 <TIM_Base_SetConfig+0x130>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d023      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a31      	ldr	r2, [pc, #196]	@ (80058e4 <TIM_Base_SetConfig+0x134>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d01f      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a30      	ldr	r2, [pc, #192]	@ (80058e8 <TIM_Base_SetConfig+0x138>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d01b      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a2f      	ldr	r2, [pc, #188]	@ (80058ec <TIM_Base_SetConfig+0x13c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d017      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a2e      	ldr	r2, [pc, #184]	@ (80058f0 <TIM_Base_SetConfig+0x140>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d013      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a2d      	ldr	r2, [pc, #180]	@ (80058f4 <TIM_Base_SetConfig+0x144>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00f      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a2c      	ldr	r2, [pc, #176]	@ (80058f8 <TIM_Base_SetConfig+0x148>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d00b      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a2b      	ldr	r2, [pc, #172]	@ (80058fc <TIM_Base_SetConfig+0x14c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d007      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a2a      	ldr	r2, [pc, #168]	@ (8005900 <TIM_Base_SetConfig+0x150>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d003      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a29      	ldr	r2, [pc, #164]	@ (8005904 <TIM_Base_SetConfig+0x154>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d108      	bne.n	8005874 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a10      	ldr	r2, [pc, #64]	@ (80058dc <TIM_Base_SetConfig+0x12c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d003      	beq.n	80058a8 <TIM_Base_SetConfig+0xf8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a12      	ldr	r2, [pc, #72]	@ (80058ec <TIM_Base_SetConfig+0x13c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d103      	bne.n	80058b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d105      	bne.n	80058ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f023 0201 	bic.w	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	611a      	str	r2, [r3, #16]
  }
}
 80058ce:	bf00      	nop
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40010000 	.word	0x40010000
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800
 80058e8:	40000c00 	.word	0x40000c00
 80058ec:	40010400 	.word	0x40010400
 80058f0:	40014000 	.word	0x40014000
 80058f4:	40014400 	.word	0x40014400
 80058f8:	40014800 	.word	0x40014800
 80058fc:	40001800 	.word	0x40001800
 8005900:	40001c00 	.word	0x40001c00
 8005904:	40002000 	.word	0x40002000

08005908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f023 0201 	bic.w	r2, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0303 	bic.w	r3, r3, #3
 800593e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f023 0302 	bic.w	r3, r3, #2
 8005950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a20      	ldr	r2, [pc, #128]	@ (80059e0 <TIM_OC1_SetConfig+0xd8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_OC1_SetConfig+0x64>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a1f      	ldr	r2, [pc, #124]	@ (80059e4 <TIM_OC1_SetConfig+0xdc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d10c      	bne.n	8005986 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f023 0308 	bic.w	r3, r3, #8
 8005972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f023 0304 	bic.w	r3, r3, #4
 8005984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a15      	ldr	r2, [pc, #84]	@ (80059e0 <TIM_OC1_SetConfig+0xd8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d003      	beq.n	8005996 <TIM_OC1_SetConfig+0x8e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a14      	ldr	r2, [pc, #80]	@ (80059e4 <TIM_OC1_SetConfig+0xdc>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d111      	bne.n	80059ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800599c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	621a      	str	r2, [r3, #32]
}
 80059d4:	bf00      	nop
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	40010000 	.word	0x40010000
 80059e4:	40010400 	.word	0x40010400

080059e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f023 0210 	bic.w	r2, r3, #16
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f023 0320 	bic.w	r3, r3, #32
 8005a32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a22      	ldr	r2, [pc, #136]	@ (8005acc <TIM_OC2_SetConfig+0xe4>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_OC2_SetConfig+0x68>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a21      	ldr	r2, [pc, #132]	@ (8005ad0 <TIM_OC2_SetConfig+0xe8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d10d      	bne.n	8005a6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a17      	ldr	r2, [pc, #92]	@ (8005acc <TIM_OC2_SetConfig+0xe4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_OC2_SetConfig+0x94>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a16      	ldr	r2, [pc, #88]	@ (8005ad0 <TIM_OC2_SetConfig+0xe8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d113      	bne.n	8005aa4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	621a      	str	r2, [r3, #32]
}
 8005abe:	bf00      	nop
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40010000 	.word	0x40010000
 8005ad0:	40010400 	.word	0x40010400

08005ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0303 	bic.w	r3, r3, #3
 8005b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	021b      	lsls	r3, r3, #8
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a21      	ldr	r2, [pc, #132]	@ (8005bb4 <TIM_OC3_SetConfig+0xe0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d003      	beq.n	8005b3a <TIM_OC3_SetConfig+0x66>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a20      	ldr	r2, [pc, #128]	@ (8005bb8 <TIM_OC3_SetConfig+0xe4>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d10d      	bne.n	8005b56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	021b      	lsls	r3, r3, #8
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a16      	ldr	r2, [pc, #88]	@ (8005bb4 <TIM_OC3_SetConfig+0xe0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d003      	beq.n	8005b66 <TIM_OC3_SetConfig+0x92>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a15      	ldr	r2, [pc, #84]	@ (8005bb8 <TIM_OC3_SetConfig+0xe4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d113      	bne.n	8005b8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	621a      	str	r2, [r3, #32]
}
 8005ba8:	bf00      	nop
 8005baa:	371c      	adds	r7, #28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	40010000 	.word	0x40010000
 8005bb8:	40010400 	.word	0x40010400

08005bbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	021b      	lsls	r3, r3, #8
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	031b      	lsls	r3, r3, #12
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a12      	ldr	r2, [pc, #72]	@ (8005c60 <TIM_OC4_SetConfig+0xa4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_OC4_SetConfig+0x68>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a11      	ldr	r2, [pc, #68]	@ (8005c64 <TIM_OC4_SetConfig+0xa8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d109      	bne.n	8005c38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	019b      	lsls	r3, r3, #6
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	621a      	str	r2, [r3, #32]
}
 8005c52:	bf00      	nop
 8005c54:	371c      	adds	r7, #28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40010000 	.word	0x40010000
 8005c64:	40010400 	.word	0x40010400

08005c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	f023 0201 	bic.w	r2, r3, #1
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f023 030a 	bic.w	r3, r3, #10
 8005ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	621a      	str	r2, [r3, #32]
}
 8005cba:	bf00      	nop
 8005cbc:	371c      	adds	r7, #28
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b087      	sub	sp, #28
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	60f8      	str	r0, [r7, #12]
 8005cce:	60b9      	str	r1, [r7, #8]
 8005cd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	f023 0210 	bic.w	r2, r3, #16
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	031b      	lsls	r3, r3, #12
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	621a      	str	r2, [r3, #32]
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b085      	sub	sp, #20
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f043 0307 	orr.w	r3, r3, #7
 8005d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	609a      	str	r2, [r3, #8]
}
 8005d50:	bf00      	nop
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	021a      	lsls	r2, r3, #8
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	609a      	str	r2, [r3, #8]
}
 8005d90:	bf00      	nop
 8005d92:	371c      	adds	r7, #28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f003 031f 	and.w	r3, r3, #31
 8005dae:	2201      	movs	r2, #1
 8005db0:	fa02 f303 	lsl.w	r3, r2, r3
 8005db4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a1a      	ldr	r2, [r3, #32]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	43db      	mvns	r3, r3
 8005dbe:	401a      	ands	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a1a      	ldr	r2, [r3, #32]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f003 031f 	and.w	r3, r3, #31
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	621a      	str	r2, [r3, #32]
}
 8005dda:	bf00      	nop
 8005ddc:	371c      	adds	r7, #28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
	...

08005de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e05a      	b.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a21      	ldr	r2, [pc, #132]	@ (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d022      	beq.n	8005e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e4c:	d01d      	beq.n	8005e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a1d      	ldr	r2, [pc, #116]	@ (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d018      	beq.n	8005e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d013      	beq.n	8005e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a1a      	ldr	r2, [pc, #104]	@ (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00e      	beq.n	8005e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a18      	ldr	r2, [pc, #96]	@ (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d009      	beq.n	8005e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a17      	ldr	r2, [pc, #92]	@ (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d004      	beq.n	8005e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a15      	ldr	r2, [pc, #84]	@ (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d10c      	bne.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40010000 	.word	0x40010000
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40000800 	.word	0x40000800
 8005ed0:	40000c00 	.word	0x40000c00
 8005ed4:	40010400 	.word	0x40010400
 8005ed8:	40014000 	.word	0x40014000
 8005edc:	40001800 	.word	0x40001800

08005ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e042      	b.n	8005fa0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fb faf4 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2224      	movs	r2, #36	@ 0x24
 8005f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f001 f81d 	bl	8006f8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695a      	ldr	r2, [r3, #20]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	@ 0x28
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	603b      	str	r3, [r7, #0]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d175      	bne.n	80060b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <HAL_UART_Transmit+0x2c>
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e06e      	b.n	80060b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2221      	movs	r2, #33	@ 0x21
 8005fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fe6:	f7fb fcf9 	bl	80019dc <HAL_GetTick>
 8005fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	88fa      	ldrh	r2, [r7, #6]
 8005ff0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	88fa      	ldrh	r2, [r7, #6]
 8005ff6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006000:	d108      	bne.n	8006014 <HAL_UART_Transmit+0x6c>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d104      	bne.n	8006014 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800600a:	2300      	movs	r3, #0
 800600c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	61bb      	str	r3, [r7, #24]
 8006012:	e003      	b.n	800601c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006018:	2300      	movs	r3, #0
 800601a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800601c:	e02e      	b.n	800607c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2200      	movs	r2, #0
 8006026:	2180      	movs	r1, #128	@ 0x80
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 fcf5 	bl	8006a18 <UART_WaitOnFlagUntilTimeout>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e03a      	b.n	80060b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10b      	bne.n	800605e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006054:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	3302      	adds	r3, #2
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	e007      	b.n	800606e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	781a      	ldrb	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	3301      	adds	r3, #1
 800606c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1cb      	bne.n	800601e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2200      	movs	r2, #0
 800608e:	2140      	movs	r1, #64	@ 0x40
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 fcc1 	bl	8006a18 <UART_WaitOnFlagUntilTimeout>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e006      	b.n	80060b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	e000      	b.n	80060b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80060b4:	2302      	movs	r3, #2
  }
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3720      	adds	r7, #32
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b08a      	sub	sp, #40	@ 0x28
 80060c2:	af02      	add	r7, sp, #8
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	603b      	str	r3, [r7, #0]
 80060ca:	4613      	mov	r3, r2
 80060cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b20      	cmp	r3, #32
 80060dc:	f040 8081 	bne.w	80061e2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <HAL_UART_Receive+0x2e>
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e079      	b.n	80061e4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2222      	movs	r2, #34	@ 0x22
 80060fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006104:	f7fb fc6a 	bl	80019dc <HAL_GetTick>
 8006108:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	88fa      	ldrh	r2, [r7, #6]
 800610e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	88fa      	ldrh	r2, [r7, #6]
 8006114:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800611e:	d108      	bne.n	8006132 <HAL_UART_Receive+0x74>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d104      	bne.n	8006132 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006128:	2300      	movs	r3, #0
 800612a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	e003      	b.n	800613a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006136:	2300      	movs	r3, #0
 8006138:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800613a:	e047      	b.n	80061cc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2200      	movs	r2, #0
 8006144:	2120      	movs	r1, #32
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fc66 	bl	8006a18 <UART_WaitOnFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2220      	movs	r2, #32
 8006156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e042      	b.n	80061e4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10c      	bne.n	800617e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006170:	b29a      	uxth	r2, r3
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	3302      	adds	r3, #2
 800617a:	61bb      	str	r3, [r7, #24]
 800617c:	e01f      	b.n	80061be <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006186:	d007      	beq.n	8006198 <HAL_UART_Receive+0xda>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <HAL_UART_Receive+0xe8>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d106      	bne.n	80061a6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	e008      	b.n	80061b8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	3301      	adds	r3, #1
 80061bc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1b2      	bne.n	800613c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2220      	movs	r2, #32
 80061da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	e000      	b.n	80061e4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80061e2:	2302      	movs	r3, #2
  }
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3720      	adds	r7, #32
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08c      	sub	sp, #48	@ 0x30
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	4613      	mov	r3, r2
 80061f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b20      	cmp	r3, #32
 8006204:	d14a      	bne.n	800629c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800620c:	88fb      	ldrh	r3, [r7, #6]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e043      	b.n	800629e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	461a      	mov	r2, r3
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 fc4f 	bl	8006acc <UART_Start_Receive_DMA>
 800622e:	4603      	mov	r3, r0
 8006230:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006234:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006238:	2b00      	cmp	r3, #0
 800623a:	d12c      	bne.n	8006296 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006240:	2b01      	cmp	r3, #1
 8006242:	d125      	bne.n	8006290 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006244:	2300      	movs	r3, #0
 8006246:	613b      	str	r3, [r7, #16]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	613b      	str	r3, [r7, #16]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	613b      	str	r3, [r7, #16]
 8006258:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	330c      	adds	r3, #12
 8006260:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	617b      	str	r3, [r7, #20]
   return(result);
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f043 0310 	orr.w	r3, r3, #16
 8006270:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	330c      	adds	r3, #12
 8006278:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800627a:	627a      	str	r2, [r7, #36]	@ 0x24
 800627c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	6a39      	ldr	r1, [r7, #32]
 8006280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	61fb      	str	r3, [r7, #28]
   return(result);
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1e5      	bne.n	800625a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800628e:	e002      	b.n	8006296 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006296:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800629a:	e000      	b.n	800629e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800629c:	2302      	movs	r3, #2
  }
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3730      	adds	r7, #48	@ 0x30
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b0ba      	sub	sp, #232	@ 0xe8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80062e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10f      	bne.n	800630e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <HAL_UART_IRQHandler+0x66>
 80062fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fd81 	bl	8006e0e <UART_Receive_IT>
      return;
 800630c:	e25b      	b.n	80067c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800630e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 80de 	beq.w	80064d4 <HAL_UART_IRQHandler+0x22c>
 8006318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d106      	bne.n	8006332 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006328:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 80d1 	beq.w	80064d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00b      	beq.n	8006356 <HAL_UART_IRQHandler+0xae>
 800633e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006346:	2b00      	cmp	r3, #0
 8006348:	d005      	beq.n	8006356 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800634e:	f043 0201 	orr.w	r2, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800635a:	f003 0304 	and.w	r3, r3, #4
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00b      	beq.n	800637a <HAL_UART_IRQHandler+0xd2>
 8006362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d005      	beq.n	800637a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006372:	f043 0202 	orr.w	r2, r3, #2
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800637a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00b      	beq.n	800639e <HAL_UART_IRQHandler+0xf6>
 8006386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d005      	beq.n	800639e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006396:	f043 0204 	orr.w	r2, r3, #4
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800639e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063a2:	f003 0308 	and.w	r3, r3, #8
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d011      	beq.n	80063ce <HAL_UART_IRQHandler+0x126>
 80063aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ae:	f003 0320 	and.w	r3, r3, #32
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d105      	bne.n	80063c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d005      	beq.n	80063ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c6:	f043 0208 	orr.w	r2, r3, #8
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 81f2 	beq.w	80067bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d008      	beq.n	80063f6 <HAL_UART_IRQHandler+0x14e>
 80063e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fd0c 	bl	8006e0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006400:	2b40      	cmp	r3, #64	@ 0x40
 8006402:	bf0c      	ite	eq
 8006404:	2301      	moveq	r3, #1
 8006406:	2300      	movne	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	2b00      	cmp	r3, #0
 8006418:	d103      	bne.n	8006422 <HAL_UART_IRQHandler+0x17a>
 800641a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800641e:	2b00      	cmp	r3, #0
 8006420:	d04f      	beq.n	80064c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fc14 	bl	8006c50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006432:	2b40      	cmp	r3, #64	@ 0x40
 8006434:	d141      	bne.n	80064ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3314      	adds	r3, #20
 800643c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006444:	e853 3f00 	ldrex	r3, [r3]
 8006448:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800644c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006450:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006454:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3314      	adds	r3, #20
 800645e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006462:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006466:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800646e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006472:	e841 2300 	strex	r3, r2, [r1]
 8006476:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800647a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1d9      	bne.n	8006436 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d013      	beq.n	80064b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648e:	4a7e      	ldr	r2, [pc, #504]	@ (8006688 <HAL_UART_IRQHandler+0x3e0>)
 8006490:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006496:	4618      	mov	r0, r3
 8006498:	f7fb fd28 	bl	8001eec <HAL_DMA_Abort_IT>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d016      	beq.n	80064d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80064ac:	4610      	mov	r0, r2
 80064ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b0:	e00e      	b.n	80064d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f9a8 	bl	8006808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b8:	e00a      	b.n	80064d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f9a4 	bl	8006808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c0:	e006      	b.n	80064d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f9a0 	bl	8006808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80064ce:	e175      	b.n	80067bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d0:	bf00      	nop
    return;
 80064d2:	e173      	b.n	80067bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d8:	2b01      	cmp	r3, #1
 80064da:	f040 814f 	bne.w	800677c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064e2:	f003 0310 	and.w	r3, r3, #16
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 8148 	beq.w	800677c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80064ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 8141 	beq.w	800677c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064fa:	2300      	movs	r3, #0
 80064fc:	60bb      	str	r3, [r7, #8]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	60bb      	str	r3, [r7, #8]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	60bb      	str	r3, [r7, #8]
 800650e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651a:	2b40      	cmp	r3, #64	@ 0x40
 800651c:	f040 80b6 	bne.w	800668c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800652c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 8145 	beq.w	80067c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800653a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800653e:	429a      	cmp	r2, r3
 8006540:	f080 813e 	bcs.w	80067c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800654a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006556:	f000 8088 	beq.w	800666a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	330c      	adds	r3, #12
 8006560:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006570:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006578:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	330c      	adds	r3, #12
 8006582:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006586:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800658a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006592:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800659e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1d9      	bne.n	800655a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3314      	adds	r3, #20
 80065ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065b8:	f023 0301 	bic.w	r3, r3, #1
 80065bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3314      	adds	r3, #20
 80065c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80065ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80065d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80065d6:	e841 2300 	strex	r3, r2, [r1]
 80065da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80065dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1e1      	bne.n	80065a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3314      	adds	r3, #20
 80065e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80065f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3314      	adds	r3, #20
 8006602:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006606:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006608:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800660c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800660e:	e841 2300 	strex	r3, r2, [r1]
 8006612:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1e3      	bne.n	80065e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2220      	movs	r2, #32
 800661e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	330c      	adds	r3, #12
 800662e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006632:	e853 3f00 	ldrex	r3, [r3]
 8006636:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006638:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800663a:	f023 0310 	bic.w	r3, r3, #16
 800663e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	330c      	adds	r3, #12
 8006648:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800664c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800664e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006652:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800665a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e3      	bne.n	8006628 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006664:	4618      	mov	r0, r3
 8006666:	f7fb fbd1 	bl	8001e0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2202      	movs	r2, #2
 800666e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006678:	b29b      	uxth	r3, r3
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	b29b      	uxth	r3, r3
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 ff7f 	bl	8007584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006686:	e09b      	b.n	80067c0 <HAL_UART_IRQHandler+0x518>
 8006688:	08006d17 	.word	0x08006d17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006694:	b29b      	uxth	r3, r3
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 808e 	beq.w	80067c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80066a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8089 	beq.w	80067c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	330c      	adds	r3, #12
 80066b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066bc:	e853 3f00 	ldrex	r3, [r3]
 80066c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	330c      	adds	r3, #12
 80066d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80066d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80066d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e3      	bne.n	80066b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3314      	adds	r3, #20
 80066f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	623b      	str	r3, [r7, #32]
   return(result);
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	f023 0301 	bic.w	r3, r3, #1
 8006700:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3314      	adds	r3, #20
 800670a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800670e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006710:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800671c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e3      	bne.n	80066ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2220      	movs	r2, #32
 8006726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	330c      	adds	r3, #12
 8006736:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	e853 3f00 	ldrex	r3, [r3]
 800673e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0310 	bic.w	r3, r3, #16
 8006746:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	330c      	adds	r3, #12
 8006750:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006754:	61fa      	str	r2, [r7, #28]
 8006756:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006758:	69b9      	ldr	r1, [r7, #24]
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	e841 2300 	strex	r3, r2, [r1]
 8006760:	617b      	str	r3, [r7, #20]
   return(result);
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1e3      	bne.n	8006730 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800676e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 ff05 	bl	8007584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800677a:	e023      	b.n	80067c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800677c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006784:	2b00      	cmp	r3, #0
 8006786:	d009      	beq.n	800679c <HAL_UART_IRQHandler+0x4f4>
 8006788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800678c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006790:	2b00      	cmp	r3, #0
 8006792:	d003      	beq.n	800679c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fad2 	bl	8006d3e <UART_Transmit_IT>
    return;
 800679a:	e014      	b.n	80067c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800679c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00e      	beq.n	80067c6 <HAL_UART_IRQHandler+0x51e>
 80067a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d008      	beq.n	80067c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fb12 	bl	8006dde <UART_EndTransmit_IT>
    return;
 80067ba:	e004      	b.n	80067c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80067bc:	bf00      	nop
 80067be:	e002      	b.n	80067c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80067c0:	bf00      	nop
 80067c2:	e000      	b.n	80067c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80067c4:	bf00      	nop
  }
}
 80067c6:	37e8      	adds	r7, #232	@ 0xe8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b09c      	sub	sp, #112	@ 0x70
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006828:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006834:	2b00      	cmp	r3, #0
 8006836:	d172      	bne.n	800691e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800683a:	2200      	movs	r2, #0
 800683c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800683e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	330c      	adds	r3, #12
 8006844:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800684e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006854:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	330c      	adds	r3, #12
 800685c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800685e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006860:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006864:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800686c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e5      	bne.n	800683e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006872:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3314      	adds	r3, #20
 8006878:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006884:	f023 0301 	bic.w	r3, r3, #1
 8006888:	667b      	str	r3, [r7, #100]	@ 0x64
 800688a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3314      	adds	r3, #20
 8006890:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006892:	647a      	str	r2, [r7, #68]	@ 0x44
 8006894:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006898:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e5      	bne.n	8006872 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3314      	adds	r3, #20
 80068ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	623b      	str	r3, [r7, #32]
   return(result);
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80068be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3314      	adds	r3, #20
 80068c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80068c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80068c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e5      	bne.n	80068a6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068dc:	2220      	movs	r2, #32
 80068de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d119      	bne.n	800691e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	330c      	adds	r3, #12
 80068f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f023 0310 	bic.w	r3, r3, #16
 8006900:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	330c      	adds	r3, #12
 8006908:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800690a:	61fa      	str	r2, [r7, #28]
 800690c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	69b9      	ldr	r1, [r7, #24]
 8006910:	69fa      	ldr	r2, [r7, #28]
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	617b      	str	r3, [r7, #20]
   return(result);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e5      	bne.n	80068ea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800691e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006920:	2200      	movs	r2, #0
 8006922:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006924:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006928:	2b01      	cmp	r3, #1
 800692a:	d106      	bne.n	800693a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800692c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800692e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006930:	4619      	mov	r1, r3
 8006932:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006934:	f000 fe26 	bl	8007584 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006938:	e002      	b.n	8006940 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800693a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800693c:	f7ff ff50 	bl	80067e0 <HAL_UART_RxCpltCallback>
}
 8006940:	bf00      	nop
 8006942:	3770      	adds	r7, #112	@ 0x70
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006954:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2201      	movs	r2, #1
 800695a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006960:	2b01      	cmp	r3, #1
 8006962:	d108      	bne.n	8006976 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006968:	085b      	lsrs	r3, r3, #1
 800696a:	b29b      	uxth	r3, r3
 800696c:	4619      	mov	r1, r3
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 fe08 	bl	8007584 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006974:	e002      	b.n	800697c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f7ff ff3c 	bl	80067f4 <HAL_UART_RxHalfCpltCallback>
}
 800697c:	bf00      	nop
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006994:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a0:	2b80      	cmp	r3, #128	@ 0x80
 80069a2:	bf0c      	ite	eq
 80069a4:	2301      	moveq	r3, #1
 80069a6:	2300      	movne	r3, #0
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b21      	cmp	r3, #33	@ 0x21
 80069b6:	d108      	bne.n	80069ca <UART_DMAError+0x46>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2200      	movs	r2, #0
 80069c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80069c4:	68b8      	ldr	r0, [r7, #8]
 80069c6:	f000 f91b 	bl	8006c00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d4:	2b40      	cmp	r3, #64	@ 0x40
 80069d6:	bf0c      	ite	eq
 80069d8:	2301      	moveq	r3, #1
 80069da:	2300      	movne	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b22      	cmp	r3, #34	@ 0x22
 80069ea:	d108      	bne.n	80069fe <UART_DMAError+0x7a>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d005      	beq.n	80069fe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2200      	movs	r2, #0
 80069f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80069f8:	68b8      	ldr	r0, [r7, #8]
 80069fa:	f000 f929 	bl	8006c50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a02:	f043 0210 	orr.w	r2, r3, #16
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a0a:	68b8      	ldr	r0, [r7, #8]
 8006a0c:	f7ff fefc 	bl	8006808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a10:	bf00      	nop
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	4613      	mov	r3, r2
 8006a26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a28:	e03b      	b.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a30:	d037      	beq.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a32:	f7fa ffd3 	bl	80019dc <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	6a3a      	ldr	r2, [r7, #32]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d302      	bcc.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e03a      	b.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d023      	beq.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b80      	cmp	r3, #128	@ 0x80
 8006a5e:	d020      	beq.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b40      	cmp	r3, #64	@ 0x40
 8006a64:	d01d      	beq.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0308 	and.w	r3, r3, #8
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d116      	bne.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006a74:	2300      	movs	r3, #0
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 f8e0 	bl	8006c50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2208      	movs	r2, #8
 8006a94:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e00f      	b.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	bf0c      	ite	eq
 8006ab2:	2301      	moveq	r3, #1
 8006ab4:	2300      	movne	r3, #0
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	461a      	mov	r2, r3
 8006aba:	79fb      	ldrb	r3, [r7, #7]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d0b4      	beq.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b098      	sub	sp, #96	@ 0x60
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	88fa      	ldrh	r2, [r7, #6]
 8006ae4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2222      	movs	r2, #34	@ 0x22
 8006af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af8:	4a3e      	ldr	r2, [pc, #248]	@ (8006bf4 <UART_Start_Receive_DMA+0x128>)
 8006afa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b00:	4a3d      	ldr	r2, [pc, #244]	@ (8006bf8 <UART_Start_Receive_DMA+0x12c>)
 8006b02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b08:	4a3c      	ldr	r2, [pc, #240]	@ (8006bfc <UART_Start_Receive_DMA+0x130>)
 8006b0a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b10:	2200      	movs	r2, #0
 8006b12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006b14:	f107 0308 	add.w	r3, r7, #8
 8006b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4619      	mov	r1, r3
 8006b26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	88fb      	ldrh	r3, [r7, #6]
 8006b2c:	f7fb f916 	bl	8001d5c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006b30:	2300      	movs	r3, #0
 8006b32:	613b      	str	r3, [r7, #16]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	613b      	str	r3, [r7, #16]
 8006b44:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d019      	beq.n	8006b82 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	330c      	adds	r3, #12
 8006b54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b58:	e853 3f00 	ldrex	r3, [r3]
 8006b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	330c      	adds	r3, #12
 8006b6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b6e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006b70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006b74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b76:	e841 2300 	strex	r3, r2, [r1]
 8006b7a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1e5      	bne.n	8006b4e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3314      	adds	r3, #20
 8006b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b94:	f043 0301 	orr.w	r3, r3, #1
 8006b98:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3314      	adds	r3, #20
 8006ba0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ba2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006ba4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006ba8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e5      	bne.n	8006b82 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3314      	adds	r3, #20
 8006bbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3314      	adds	r3, #20
 8006bd4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006bd6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006bd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	6a39      	ldr	r1, [r7, #32]
 8006bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e5      	bne.n	8006bb6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3760      	adds	r7, #96	@ 0x60
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	0800681d 	.word	0x0800681d
 8006bf8:	08006949 	.word	0x08006949
 8006bfc:	08006985 	.word	0x08006985

08006c00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b089      	sub	sp, #36	@ 0x24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	330c      	adds	r3, #12
 8006c0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	330c      	adds	r3, #12
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	61ba      	str	r2, [r7, #24]
 8006c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	6979      	ldr	r1, [r7, #20]
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	613b      	str	r3, [r7, #16]
   return(result);
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e5      	bne.n	8006c08 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006c44:	bf00      	nop
 8006c46:	3724      	adds	r7, #36	@ 0x24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b095      	sub	sp, #84	@ 0x54
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	330c      	adds	r3, #12
 8006c5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c62:	e853 3f00 	ldrex	r3, [r3]
 8006c66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	330c      	adds	r3, #12
 8006c76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c78:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c80:	e841 2300 	strex	r3, r2, [r1]
 8006c84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1e5      	bne.n	8006c58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3314      	adds	r3, #20
 8006c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	e853 3f00 	ldrex	r3, [r3]
 8006c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	f023 0301 	bic.w	r3, r3, #1
 8006ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3314      	adds	r3, #20
 8006caa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e5      	bne.n	8006c8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d119      	bne.n	8006cfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	330c      	adds	r3, #12
 8006cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f023 0310 	bic.w	r3, r3, #16
 8006cde:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	330c      	adds	r3, #12
 8006ce6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ce8:	61ba      	str	r2, [r7, #24]
 8006cea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	6979      	ldr	r1, [r7, #20]
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e5      	bne.n	8006cc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d0a:	bf00      	nop
 8006d0c:	3754      	adds	r7, #84	@ 0x54
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f7ff fd69 	bl	8006808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d36:	bf00      	nop
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b085      	sub	sp, #20
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b21      	cmp	r3, #33	@ 0x21
 8006d50:	d13e      	bne.n	8006dd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d5a:	d114      	bne.n	8006d86 <UART_Transmit_IT+0x48>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d110      	bne.n	8006d86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	1c9a      	adds	r2, r3, #2
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	621a      	str	r2, [r3, #32]
 8006d84:	e008      	b.n	8006d98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	1c59      	adds	r1, r3, #1
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6211      	str	r1, [r2, #32]
 8006d90:	781a      	ldrb	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	4619      	mov	r1, r3
 8006da6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10f      	bne.n	8006dcc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006dba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68da      	ldr	r2, [r3, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	e000      	b.n	8006dd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006dd0:	2302      	movs	r3, #2
  }
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006df4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7ff fce4 	bl	80067cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b08c      	sub	sp, #48	@ 0x30
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b22      	cmp	r3, #34	@ 0x22
 8006e20:	f040 80ae 	bne.w	8006f80 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e2c:	d117      	bne.n	8006e5e <UART_Receive_IT+0x50>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d113      	bne.n	8006e5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e56:	1c9a      	adds	r2, r3, #2
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e5c:	e026      	b.n	8006eac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e70:	d007      	beq.n	8006e82 <UART_Receive_IT+0x74>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10a      	bne.n	8006e90 <UART_Receive_IT+0x82>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e8c:	701a      	strb	r2, [r3, #0]
 8006e8e:	e008      	b.n	8006ea2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d15d      	bne.n	8006f7c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 0220 	bic.w	r2, r2, #32
 8006ece:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68da      	ldr	r2, [r3, #12]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ede:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695a      	ldr	r2, [r3, #20]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f022 0201 	bic.w	r2, r2, #1
 8006eee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d135      	bne.n	8006f72 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	330c      	adds	r3, #12
 8006f12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f023 0310 	bic.w	r3, r3, #16
 8006f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	330c      	adds	r3, #12
 8006f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f2c:	623a      	str	r2, [r7, #32]
 8006f2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	69f9      	ldr	r1, [r7, #28]
 8006f32:	6a3a      	ldr	r2, [r7, #32]
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e5      	bne.n	8006f0c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0310 	and.w	r3, r3, #16
 8006f4a:	2b10      	cmp	r3, #16
 8006f4c:	d10a      	bne.n	8006f64 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60fb      	str	r3, [r7, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fb0a 	bl	8007584 <HAL_UARTEx_RxEventCallback>
 8006f70:	e002      	b.n	8006f78 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff fc34 	bl	80067e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	e002      	b.n	8006f82 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e000      	b.n	8006f82 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f80:	2302      	movs	r3, #2
  }
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3730      	adds	r7, #48	@ 0x30
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f90:	b0c0      	sub	sp, #256	@ 0x100
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fa8:	68d9      	ldr	r1, [r3, #12]
 8006faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	ea40 0301 	orr.w	r3, r0, r1
 8006fb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006fe4:	f021 010c 	bic.w	r1, r1, #12
 8006fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ff2:	430b      	orrs	r3, r1
 8006ff4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007006:	6999      	ldr	r1, [r3, #24]
 8007008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	ea40 0301 	orr.w	r3, r0, r1
 8007012:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	4b8f      	ldr	r3, [pc, #572]	@ (8007258 <UART_SetConfig+0x2cc>)
 800701c:	429a      	cmp	r2, r3
 800701e:	d005      	beq.n	800702c <UART_SetConfig+0xa0>
 8007020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	4b8d      	ldr	r3, [pc, #564]	@ (800725c <UART_SetConfig+0x2d0>)
 8007028:	429a      	cmp	r2, r3
 800702a:	d104      	bne.n	8007036 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800702c:	f7fd f962 	bl	80042f4 <HAL_RCC_GetPCLK2Freq>
 8007030:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007034:	e003      	b.n	800703e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007036:	f7fd f949 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
 800703a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800703e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007048:	f040 810c 	bne.w	8007264 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800704c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007050:	2200      	movs	r2, #0
 8007052:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007056:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800705a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800705e:	4622      	mov	r2, r4
 8007060:	462b      	mov	r3, r5
 8007062:	1891      	adds	r1, r2, r2
 8007064:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007066:	415b      	adcs	r3, r3
 8007068:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800706a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800706e:	4621      	mov	r1, r4
 8007070:	eb12 0801 	adds.w	r8, r2, r1
 8007074:	4629      	mov	r1, r5
 8007076:	eb43 0901 	adc.w	r9, r3, r1
 800707a:	f04f 0200 	mov.w	r2, #0
 800707e:	f04f 0300 	mov.w	r3, #0
 8007082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800708a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800708e:	4690      	mov	r8, r2
 8007090:	4699      	mov	r9, r3
 8007092:	4623      	mov	r3, r4
 8007094:	eb18 0303 	adds.w	r3, r8, r3
 8007098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800709c:	462b      	mov	r3, r5
 800709e:	eb49 0303 	adc.w	r3, r9, r3
 80070a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80070a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80070b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80070b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80070ba:	460b      	mov	r3, r1
 80070bc:	18db      	adds	r3, r3, r3
 80070be:	653b      	str	r3, [r7, #80]	@ 0x50
 80070c0:	4613      	mov	r3, r2
 80070c2:	eb42 0303 	adc.w	r3, r2, r3
 80070c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80070c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80070cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80070d0:	f7f9 f8e6 	bl	80002a0 <__aeabi_uldivmod>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4b61      	ldr	r3, [pc, #388]	@ (8007260 <UART_SetConfig+0x2d4>)
 80070da:	fba3 2302 	umull	r2, r3, r3, r2
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	011c      	lsls	r4, r3, #4
 80070e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80070f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80070f4:	4642      	mov	r2, r8
 80070f6:	464b      	mov	r3, r9
 80070f8:	1891      	adds	r1, r2, r2
 80070fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80070fc:	415b      	adcs	r3, r3
 80070fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007100:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007104:	4641      	mov	r1, r8
 8007106:	eb12 0a01 	adds.w	sl, r2, r1
 800710a:	4649      	mov	r1, r9
 800710c:	eb43 0b01 	adc.w	fp, r3, r1
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800711c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007124:	4692      	mov	sl, r2
 8007126:	469b      	mov	fp, r3
 8007128:	4643      	mov	r3, r8
 800712a:	eb1a 0303 	adds.w	r3, sl, r3
 800712e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007132:	464b      	mov	r3, r9
 8007134:	eb4b 0303 	adc.w	r3, fp, r3
 8007138:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800713c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007148:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800714c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007150:	460b      	mov	r3, r1
 8007152:	18db      	adds	r3, r3, r3
 8007154:	643b      	str	r3, [r7, #64]	@ 0x40
 8007156:	4613      	mov	r3, r2
 8007158:	eb42 0303 	adc.w	r3, r2, r3
 800715c:	647b      	str	r3, [r7, #68]	@ 0x44
 800715e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007162:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007166:	f7f9 f89b 	bl	80002a0 <__aeabi_uldivmod>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	4611      	mov	r1, r2
 8007170:	4b3b      	ldr	r3, [pc, #236]	@ (8007260 <UART_SetConfig+0x2d4>)
 8007172:	fba3 2301 	umull	r2, r3, r3, r1
 8007176:	095b      	lsrs	r3, r3, #5
 8007178:	2264      	movs	r2, #100	@ 0x64
 800717a:	fb02 f303 	mul.w	r3, r2, r3
 800717e:	1acb      	subs	r3, r1, r3
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007186:	4b36      	ldr	r3, [pc, #216]	@ (8007260 <UART_SetConfig+0x2d4>)
 8007188:	fba3 2302 	umull	r2, r3, r3, r2
 800718c:	095b      	lsrs	r3, r3, #5
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007194:	441c      	add	r4, r3
 8007196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800719a:	2200      	movs	r2, #0
 800719c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80071a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80071a8:	4642      	mov	r2, r8
 80071aa:	464b      	mov	r3, r9
 80071ac:	1891      	adds	r1, r2, r2
 80071ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80071b0:	415b      	adcs	r3, r3
 80071b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80071b8:	4641      	mov	r1, r8
 80071ba:	1851      	adds	r1, r2, r1
 80071bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80071be:	4649      	mov	r1, r9
 80071c0:	414b      	adcs	r3, r1
 80071c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80071c4:	f04f 0200 	mov.w	r2, #0
 80071c8:	f04f 0300 	mov.w	r3, #0
 80071cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80071d0:	4659      	mov	r1, fp
 80071d2:	00cb      	lsls	r3, r1, #3
 80071d4:	4651      	mov	r1, sl
 80071d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071da:	4651      	mov	r1, sl
 80071dc:	00ca      	lsls	r2, r1, #3
 80071de:	4610      	mov	r0, r2
 80071e0:	4619      	mov	r1, r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	4642      	mov	r2, r8
 80071e6:	189b      	adds	r3, r3, r2
 80071e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071ec:	464b      	mov	r3, r9
 80071ee:	460a      	mov	r2, r1
 80071f0:	eb42 0303 	adc.w	r3, r2, r3
 80071f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007204:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007208:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800720c:	460b      	mov	r3, r1
 800720e:	18db      	adds	r3, r3, r3
 8007210:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007212:	4613      	mov	r3, r2
 8007214:	eb42 0303 	adc.w	r3, r2, r3
 8007218:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800721a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800721e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007222:	f7f9 f83d 	bl	80002a0 <__aeabi_uldivmod>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	4b0d      	ldr	r3, [pc, #52]	@ (8007260 <UART_SetConfig+0x2d4>)
 800722c:	fba3 1302 	umull	r1, r3, r3, r2
 8007230:	095b      	lsrs	r3, r3, #5
 8007232:	2164      	movs	r1, #100	@ 0x64
 8007234:	fb01 f303 	mul.w	r3, r1, r3
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	3332      	adds	r3, #50	@ 0x32
 800723e:	4a08      	ldr	r2, [pc, #32]	@ (8007260 <UART_SetConfig+0x2d4>)
 8007240:	fba2 2303 	umull	r2, r3, r2, r3
 8007244:	095b      	lsrs	r3, r3, #5
 8007246:	f003 0207 	and.w	r2, r3, #7
 800724a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4422      	add	r2, r4
 8007252:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007254:	e106      	b.n	8007464 <UART_SetConfig+0x4d8>
 8007256:	bf00      	nop
 8007258:	40011000 	.word	0x40011000
 800725c:	40011400 	.word	0x40011400
 8007260:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007268:	2200      	movs	r2, #0
 800726a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800726e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007272:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007276:	4642      	mov	r2, r8
 8007278:	464b      	mov	r3, r9
 800727a:	1891      	adds	r1, r2, r2
 800727c:	6239      	str	r1, [r7, #32]
 800727e:	415b      	adcs	r3, r3
 8007280:	627b      	str	r3, [r7, #36]	@ 0x24
 8007282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007286:	4641      	mov	r1, r8
 8007288:	1854      	adds	r4, r2, r1
 800728a:	4649      	mov	r1, r9
 800728c:	eb43 0501 	adc.w	r5, r3, r1
 8007290:	f04f 0200 	mov.w	r2, #0
 8007294:	f04f 0300 	mov.w	r3, #0
 8007298:	00eb      	lsls	r3, r5, #3
 800729a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800729e:	00e2      	lsls	r2, r4, #3
 80072a0:	4614      	mov	r4, r2
 80072a2:	461d      	mov	r5, r3
 80072a4:	4643      	mov	r3, r8
 80072a6:	18e3      	adds	r3, r4, r3
 80072a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072ac:	464b      	mov	r3, r9
 80072ae:	eb45 0303 	adc.w	r3, r5, r3
 80072b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80072b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80072c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	f04f 0300 	mov.w	r3, #0
 80072ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80072d2:	4629      	mov	r1, r5
 80072d4:	008b      	lsls	r3, r1, #2
 80072d6:	4621      	mov	r1, r4
 80072d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072dc:	4621      	mov	r1, r4
 80072de:	008a      	lsls	r2, r1, #2
 80072e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80072e4:	f7f8 ffdc 	bl	80002a0 <__aeabi_uldivmod>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4b60      	ldr	r3, [pc, #384]	@ (8007470 <UART_SetConfig+0x4e4>)
 80072ee:	fba3 2302 	umull	r2, r3, r3, r2
 80072f2:	095b      	lsrs	r3, r3, #5
 80072f4:	011c      	lsls	r4, r3, #4
 80072f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007300:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007304:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007308:	4642      	mov	r2, r8
 800730a:	464b      	mov	r3, r9
 800730c:	1891      	adds	r1, r2, r2
 800730e:	61b9      	str	r1, [r7, #24]
 8007310:	415b      	adcs	r3, r3
 8007312:	61fb      	str	r3, [r7, #28]
 8007314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007318:	4641      	mov	r1, r8
 800731a:	1851      	adds	r1, r2, r1
 800731c:	6139      	str	r1, [r7, #16]
 800731e:	4649      	mov	r1, r9
 8007320:	414b      	adcs	r3, r1
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	f04f 0300 	mov.w	r3, #0
 800732c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007330:	4659      	mov	r1, fp
 8007332:	00cb      	lsls	r3, r1, #3
 8007334:	4651      	mov	r1, sl
 8007336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800733a:	4651      	mov	r1, sl
 800733c:	00ca      	lsls	r2, r1, #3
 800733e:	4610      	mov	r0, r2
 8007340:	4619      	mov	r1, r3
 8007342:	4603      	mov	r3, r0
 8007344:	4642      	mov	r2, r8
 8007346:	189b      	adds	r3, r3, r2
 8007348:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800734c:	464b      	mov	r3, r9
 800734e:	460a      	mov	r2, r1
 8007350:	eb42 0303 	adc.w	r3, r2, r3
 8007354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007362:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	f04f 0300 	mov.w	r3, #0
 800736c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007370:	4649      	mov	r1, r9
 8007372:	008b      	lsls	r3, r1, #2
 8007374:	4641      	mov	r1, r8
 8007376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800737a:	4641      	mov	r1, r8
 800737c:	008a      	lsls	r2, r1, #2
 800737e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007382:	f7f8 ff8d 	bl	80002a0 <__aeabi_uldivmod>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4611      	mov	r1, r2
 800738c:	4b38      	ldr	r3, [pc, #224]	@ (8007470 <UART_SetConfig+0x4e4>)
 800738e:	fba3 2301 	umull	r2, r3, r3, r1
 8007392:	095b      	lsrs	r3, r3, #5
 8007394:	2264      	movs	r2, #100	@ 0x64
 8007396:	fb02 f303 	mul.w	r3, r2, r3
 800739a:	1acb      	subs	r3, r1, r3
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	3332      	adds	r3, #50	@ 0x32
 80073a0:	4a33      	ldr	r2, [pc, #204]	@ (8007470 <UART_SetConfig+0x4e4>)
 80073a2:	fba2 2303 	umull	r2, r3, r2, r3
 80073a6:	095b      	lsrs	r3, r3, #5
 80073a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073ac:	441c      	add	r4, r3
 80073ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073b2:	2200      	movs	r2, #0
 80073b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80073b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80073b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80073bc:	4642      	mov	r2, r8
 80073be:	464b      	mov	r3, r9
 80073c0:	1891      	adds	r1, r2, r2
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	415b      	adcs	r3, r3
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073cc:	4641      	mov	r1, r8
 80073ce:	1851      	adds	r1, r2, r1
 80073d0:	6039      	str	r1, [r7, #0]
 80073d2:	4649      	mov	r1, r9
 80073d4:	414b      	adcs	r3, r1
 80073d6:	607b      	str	r3, [r7, #4]
 80073d8:	f04f 0200 	mov.w	r2, #0
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80073e4:	4659      	mov	r1, fp
 80073e6:	00cb      	lsls	r3, r1, #3
 80073e8:	4651      	mov	r1, sl
 80073ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073ee:	4651      	mov	r1, sl
 80073f0:	00ca      	lsls	r2, r1, #3
 80073f2:	4610      	mov	r0, r2
 80073f4:	4619      	mov	r1, r3
 80073f6:	4603      	mov	r3, r0
 80073f8:	4642      	mov	r2, r8
 80073fa:	189b      	adds	r3, r3, r2
 80073fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073fe:	464b      	mov	r3, r9
 8007400:	460a      	mov	r2, r1
 8007402:	eb42 0303 	adc.w	r3, r2, r3
 8007406:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	663b      	str	r3, [r7, #96]	@ 0x60
 8007412:	667a      	str	r2, [r7, #100]	@ 0x64
 8007414:	f04f 0200 	mov.w	r2, #0
 8007418:	f04f 0300 	mov.w	r3, #0
 800741c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007420:	4649      	mov	r1, r9
 8007422:	008b      	lsls	r3, r1, #2
 8007424:	4641      	mov	r1, r8
 8007426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800742a:	4641      	mov	r1, r8
 800742c:	008a      	lsls	r2, r1, #2
 800742e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007432:	f7f8 ff35 	bl	80002a0 <__aeabi_uldivmod>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4b0d      	ldr	r3, [pc, #52]	@ (8007470 <UART_SetConfig+0x4e4>)
 800743c:	fba3 1302 	umull	r1, r3, r3, r2
 8007440:	095b      	lsrs	r3, r3, #5
 8007442:	2164      	movs	r1, #100	@ 0x64
 8007444:	fb01 f303 	mul.w	r3, r1, r3
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	3332      	adds	r3, #50	@ 0x32
 800744e:	4a08      	ldr	r2, [pc, #32]	@ (8007470 <UART_SetConfig+0x4e4>)
 8007450:	fba2 2303 	umull	r2, r3, r2, r3
 8007454:	095b      	lsrs	r3, r3, #5
 8007456:	f003 020f 	and.w	r2, r3, #15
 800745a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4422      	add	r2, r4
 8007462:	609a      	str	r2, [r3, #8]
}
 8007464:	bf00      	nop
 8007466:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800746a:	46bd      	mov	sp, r7
 800746c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007470:	51eb851f 	.word	0x51eb851f

08007474 <ESP32_Init>:
SemaphoreHandle_t xESP32Mutex;
extern SemaphoreHandle_t ReceiveMsgTimeoutMutex;
char ESP32_reveice_data[100];

void ESP32_Init(UART_HandleTypeDef* eps32_huart, UART_HandleTypeDef* log_huart)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
	eps32_TxRx_huart = eps32_huart;
 800747e:	4a06      	ldr	r2, [pc, #24]	@ (8007498 <ESP32_Init+0x24>)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6013      	str	r3, [r2, #0]
	esp32_log_huart = log_huart;
 8007484:	4a05      	ldr	r2, [pc, #20]	@ (800749c <ESP32_Init+0x28>)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	6013      	str	r3, [r2, #0]
}
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	200007d8 	.word	0x200007d8
 800749c:	200007dc 	.word	0x200007dc

080074a0 <ESP32_OS_Resources_Init>:

void ESP32_OS_Resources_Init()
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
	xESP32Queue = xQueueCreate(4, sizeof(ESP32MsgStruct));
 80074a4:	2200      	movs	r2, #0
 80074a6:	2164      	movs	r1, #100	@ 0x64
 80074a8:	2004      	movs	r0, #4
 80074aa:	f000 ff49 	bl	8008340 <xQueueGenericCreate>
 80074ae:	4603      	mov	r3, r0
 80074b0:	4a12      	ldr	r2, [pc, #72]	@ (80074fc <ESP32_OS_Resources_Init+0x5c>)
 80074b2:	6013      	str	r3, [r2, #0]
	xESP32ReceiverQueue = xQueueCreate(4, sizeof(ESP32MsgStruct));
 80074b4:	2200      	movs	r2, #0
 80074b6:	2164      	movs	r1, #100	@ 0x64
 80074b8:	2004      	movs	r0, #4
 80074ba:	f000 ff41 	bl	8008340 <xQueueGenericCreate>
 80074be:	4603      	mov	r3, r0
 80074c0:	4a0f      	ldr	r2, [pc, #60]	@ (8007500 <ESP32_OS_Resources_Init+0x60>)
 80074c2:	6013      	str	r3, [r2, #0]
	xESP32Mutex = xSemaphoreCreateMutex();
 80074c4:	2001      	movs	r0, #1
 80074c6:	f000 ffb5 	bl	8008434 <xQueueCreateMutex>
 80074ca:	4603      	mov	r3, r0
 80074cc:	4a0d      	ldr	r2, [pc, #52]	@ (8007504 <ESP32_OS_Resources_Init+0x64>)
 80074ce:	6013      	str	r3, [r2, #0]

	// 啟動 Idle-Line DMA 接收
    HAL_UARTEx_ReceiveToIdle_DMA(eps32_TxRx_huart,
 80074d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007508 <ESP32_OS_Resources_Init+0x68>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2264      	movs	r2, #100	@ 0x64
 80074d6:	490d      	ldr	r1, [pc, #52]	@ (800750c <ESP32_OS_Resources_Init+0x6c>)
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fe fe87 	bl	80061ec <HAL_UARTEx_ReceiveToIdle_DMA>
                                 (uint8_t*)ESP32_reveice_data,
                                 sizeof(ESP32_reveice_data));
    // 啟用半滿中斷 (選擇性，用於即時 debug)
    // __HAL_DMA_ENABLE_IT(eps32_TxRx_huart->hdmarx, DMA_IT_HT);
	__HAL_DMA_DISABLE_IT(eps32_TxRx_huart->hdmarx, DMA_IT_HT);
 80074de:	4b0a      	ldr	r3, [pc, #40]	@ (8007508 <ESP32_OS_Resources_Init+0x68>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	4b07      	ldr	r3, [pc, #28]	@ (8007508 <ESP32_OS_Resources_Init+0x68>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f022 0208 	bic.w	r2, r2, #8
 80074f4:	601a      	str	r2, [r3, #0]
}
 80074f6:	bf00      	nop
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	200007e0 	.word	0x200007e0
 8007500:	200007e4 	.word	0x200007e4
 8007504:	200007e8 	.word	0x200007e8
 8007508:	200007d8 	.word	0x200007d8
 800750c:	200007ec 	.word	0x200007ec

08007510 <ESP32Sender>:

void ESP32Sender(void *pvParameters)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b09c      	sub	sp, #112	@ 0x70
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  ESP32MsgStruct esp32Msg;
  while (1)
  {
	if (xQueueReceive(xESP32Queue, &esp32Msg, portMAX_DELAY) == pdPASS) {
 8007518:	4b16      	ldr	r3, [pc, #88]	@ (8007574 <ESP32Sender+0x64>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f107 010c 	add.w	r1, r7, #12
 8007520:	f04f 32ff 	mov.w	r2, #4294967295
 8007524:	4618      	mov	r0, r3
 8007526:	f001 f93b 	bl	80087a0 <xQueueReceive>
 800752a:	4603      	mov	r3, r0
 800752c:	2b01      	cmp	r3, #1
 800752e:	d11c      	bne.n	800756a <ESP32Sender+0x5a>
	  	if (xSemaphoreTake(ReceiveMsgTimeoutMutex, portMAX_DELAY) == pdPASS) {
 8007530:	4b11      	ldr	r3, [pc, #68]	@ (8007578 <ESP32Sender+0x68>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f04f 31ff 	mov.w	r1, #4294967295
 8007538:	4618      	mov	r0, r3
 800753a:	f001 fa13 	bl	8008964 <xQueueSemaphoreTake>
 800753e:	4603      	mov	r3, r0
 8007540:	2b01      	cmp	r3, #1
 8007542:	d10a      	bne.n	800755a <ESP32Sender+0x4a>
			ReceiveMsgTimeout = HAL_MAX_DELAY;
 8007544:	4b0d      	ldr	r3, [pc, #52]	@ (800757c <ESP32Sender+0x6c>)
 8007546:	f04f 32ff 	mov.w	r2, #4294967295
 800754a:	601a      	str	r2, [r3, #0]

			xSemaphoreGive(ReceiveMsgTimeoutMutex);
 800754c:	4b0a      	ldr	r3, [pc, #40]	@ (8007578 <ESP32Sender+0x68>)
 800754e:	6818      	ldr	r0, [r3, #0]
 8007550:	2300      	movs	r3, #0
 8007552:	2200      	movs	r2, #0
 8007554:	2100      	movs	r1, #0
 8007556:	f000 ff85 	bl	8008464 <xQueueGenericSend>
		}
	  	SendMsg(eps32_TxRx_huart, esp32Msg.msg);
 800755a:	4b09      	ldr	r3, [pc, #36]	@ (8007580 <ESP32Sender+0x70>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f107 020c 	add.w	r2, r7, #12
 8007562:	4611      	mov	r1, r2
 8007564:	4618      	mov	r0, r3
 8007566:	f7f9 fc9b 	bl	8000ea0 <SendMsg>
	}

	vTaskDelay(pdMS_TO_TICKS(500));
 800756a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800756e:	f001 fdcf 	bl	8009110 <vTaskDelay>
	if (xQueueReceive(xESP32Queue, &esp32Msg, portMAX_DELAY) == pdPASS) {
 8007572:	e7d1      	b.n	8007518 <ESP32Sender+0x8>
 8007574:	200007e0 	.word	0x200007e0
 8007578:	20000584 	.word	0x20000584
 800757c:	20000000 	.word	0x20000000
 8007580:	200007d8 	.word	0x200007d8

08007584 <HAL_UARTEx_RxEventCallback>:
  }
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b09c      	sub	sp, #112	@ 0x70
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	807b      	strh	r3, [r7, #2]
  if (huart == eps32_TxRx_huart)
 8007590:	4b25      	ldr	r3, [pc, #148]	@ (8007628 <HAL_UARTEx_RxEventCallback+0xa4>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	429a      	cmp	r2, r3
 8007598:	d141      	bne.n	800761e <HAL_UARTEx_RxEventCallback+0x9a>
  {
    ESP32MsgStruct msg;
	memset(msg.msg, 0, sizeof(msg.msg));
 800759a:	f107 0308 	add.w	r3, r7, #8
 800759e:	2264      	movs	r2, #100	@ 0x64
 80075a0:	2100      	movs	r1, #0
 80075a2:	4618      	mov	r0, r3
 80075a4:	f006 f998 	bl	800d8d8 <memset>
    memcpy(msg.msg, ESP32_reveice_data, Size);
 80075a8:	887a      	ldrh	r2, [r7, #2]
 80075aa:	f107 0308 	add.w	r3, r7, #8
 80075ae:	491f      	ldr	r1, [pc, #124]	@ (800762c <HAL_UARTEx_RxEventCallback+0xa8>)
 80075b0:	4618      	mov	r0, r3
 80075b2:	f006 f9ef 	bl	800d994 <memcpy>
    msg.msg[Size] = '\0';
 80075b6:	887b      	ldrh	r3, [r7, #2]
 80075b8:	3370      	adds	r3, #112	@ 0x70
 80075ba:	443b      	add	r3, r7
 80075bc:	2200      	movs	r2, #0
 80075be:	f803 2c68 	strb.w	r2, [r3, #-104]

    // 從 ISR 推送到 Queue
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80075c2:	2300      	movs	r3, #0
 80075c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
	xQueueSendFromISR(xESP32ReceiverQueue, &msg, &xHigherPriorityTaskWoken);
 80075c6:	4b1a      	ldr	r3, [pc, #104]	@ (8007630 <HAL_UARTEx_RxEventCallback+0xac>)
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80075ce:	f107 0108 	add.w	r1, r7, #8
 80075d2:	2300      	movs	r3, #0
 80075d4:	f001 f848 	bl	8008668 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80075d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <HAL_UARTEx_RxEventCallback+0x6a>
 80075de:	4b15      	ldr	r3, [pc, #84]	@ (8007634 <HAL_UARTEx_RxEventCallback+0xb0>)
 80075e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	f3bf 8f6f 	isb	sy

	memset(ESP32_reveice_data, 0, sizeof(ESP32_reveice_data));
 80075ee:	2264      	movs	r2, #100	@ 0x64
 80075f0:	2100      	movs	r1, #0
 80075f2:	480e      	ldr	r0, [pc, #56]	@ (800762c <HAL_UARTEx_RxEventCallback+0xa8>)
 80075f4:	f006 f970 	bl	800d8d8 <memset>
    HAL_UARTEx_ReceiveToIdle_DMA(eps32_TxRx_huart,
 80075f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007628 <HAL_UARTEx_RxEventCallback+0xa4>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2264      	movs	r2, #100	@ 0x64
 80075fe:	490b      	ldr	r1, [pc, #44]	@ (800762c <HAL_UARTEx_RxEventCallback+0xa8>)
 8007600:	4618      	mov	r0, r3
 8007602:	f7fe fdf3 	bl	80061ec <HAL_UARTEx_ReceiveToIdle_DMA>
                                 (uint8_t*)ESP32_reveice_data,
                                 sizeof(ESP32_reveice_data));
	__HAL_DMA_DISABLE_IT(eps32_TxRx_huart->hdmarx, DMA_IT_HT);
 8007606:	4b08      	ldr	r3, [pc, #32]	@ (8007628 <HAL_UARTEx_RxEventCallback+0xa4>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	4b05      	ldr	r3, [pc, #20]	@ (8007628 <HAL_UARTEx_RxEventCallback+0xa4>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0208 	bic.w	r2, r2, #8
 800761c:	601a      	str	r2, [r3, #0]
	
  }
}
 800761e:	bf00      	nop
 8007620:	3770      	adds	r7, #112	@ 0x70
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	200007d8 	.word	0x200007d8
 800762c:	200007ec 	.word	0x200007ec
 8007630:	200007e4 	.word	0x200007e4
 8007634:	e000ed04 	.word	0xe000ed04

08007638 <ESP32Receiver>:
//     vTaskDelay(pdMS_TO_TICKS(2));
//   }
// }

void ESP32Receiver(void *pvParameters)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b09c      	sub	sp, #112	@ 0x70
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  ESP32MsgStruct rxMsg;
  while (1)
  {
    if (xQueueReceive(xESP32ReceiverQueue, &rxMsg, portMAX_DELAY) == pdPASS)
 8007640:	4b0a      	ldr	r3, [pc, #40]	@ (800766c <ESP32Receiver+0x34>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f107 010c 	add.w	r1, r7, #12
 8007648:	f04f 32ff 	mov.w	r2, #4294967295
 800764c:	4618      	mov	r0, r3
 800764e:	f001 f8a7 	bl	80087a0 <xQueueReceive>
 8007652:	4603      	mov	r3, r0
 8007654:	2b01      	cmp	r3, #1
 8007656:	d1f3      	bne.n	8007640 <ESP32Receiver+0x8>
    {
      SendMsg(esp32_log_huart, "\r\nReceive : ESP32: %s\r\n", rxMsg.msg);
 8007658:	4b05      	ldr	r3, [pc, #20]	@ (8007670 <ESP32Receiver+0x38>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f107 020c 	add.w	r2, r7, #12
 8007660:	4904      	ldr	r1, [pc, #16]	@ (8007674 <ESP32Receiver+0x3c>)
 8007662:	4618      	mov	r0, r3
 8007664:	f7f9 fc1c 	bl	8000ea0 <SendMsg>
    if (xQueueReceive(xESP32ReceiverQueue, &rxMsg, portMAX_DELAY) == pdPASS)
 8007668:	e7ea      	b.n	8007640 <ESP32Receiver+0x8>
 800766a:	bf00      	nop
 800766c:	200007e4 	.word	0x200007e4
 8007670:	200007dc 	.word	0x200007dc
 8007674:	0800e300 	.word	0x0800e300

08007678 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800767c:	4904      	ldr	r1, [pc, #16]	@ (8007690 <MX_FATFS_Init+0x18>)
 800767e:	4805      	ldr	r0, [pc, #20]	@ (8007694 <MX_FATFS_Init+0x1c>)
 8007680:	f005 fa52 	bl	800cb28 <FATFS_LinkDriver>
 8007684:	4603      	mov	r3, r0
 8007686:	461a      	mov	r2, r3
 8007688:	4b03      	ldr	r3, [pc, #12]	@ (8007698 <MX_FATFS_Init+0x20>)
 800768a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800768c:	bf00      	nop
 800768e:	bd80      	pop	{r7, pc}
 8007690:	20000854 	.word	0x20000854
 8007694:	20000010 	.word	0x20000010
 8007698:	20000850 	.word	0x20000850

0800769c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	4603      	mov	r3, r0
 80076a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80076a6:	79fb      	ldrb	r3, [r7, #7]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 f9d7 	bl	8007a5c <USER_SPI_initialize>
 80076ae:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80076c2:	79fb      	ldrb	r3, [r7, #7]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 fab5 	bl	8007c34 <USER_SPI_status>
 80076ca:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	607a      	str	r2, [r7, #4]
 80076de:	603b      	str	r3, [r7, #0]
 80076e0:	4603      	mov	r3, r0
 80076e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80076e4:	7bf8      	ldrb	r0, [r7, #15]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	68b9      	ldr	r1, [r7, #8]
 80076ec:	f000 fab8 	bl	8007c60 <USER_SPI_read>
 80076f0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
 8007704:	603b      	str	r3, [r7, #0]
 8007706:	4603      	mov	r3, r0
 8007708:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800770a:	7bf8      	ldrb	r0, [r7, #15]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	f000 fb0b 	bl	8007d2c <USER_SPI_write>
 8007716:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	603a      	str	r2, [r7, #0]
 800772a:	71fb      	strb	r3, [r7, #7]
 800772c:	460b      	mov	r3, r1
 800772e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8007730:	79b9      	ldrb	r1, [r7, #6]
 8007732:	79fb      	ldrb	r3, [r7, #7]
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fb74 	bl	8007e24 <USER_SPI_ioctl>
 800773c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007750:	f7fa f944 	bl	80019dc <HAL_GetTick>
 8007754:	4603      	mov	r3, r0
 8007756:	4a04      	ldr	r2, [pc, #16]	@ (8007768 <SPI_Timer_On+0x20>)
 8007758:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800775a:	4a04      	ldr	r2, [pc, #16]	@ (800776c <SPI_Timer_On+0x24>)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6013      	str	r3, [r2, #0]
}
 8007760:	bf00      	nop
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	2000085c 	.word	0x2000085c
 800776c:	20000860 	.word	0x20000860

08007770 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007774:	f7fa f932 	bl	80019dc <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	4b06      	ldr	r3, [pc, #24]	@ (8007794 <SPI_Timer_Status+0x24>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	4b05      	ldr	r3, [pc, #20]	@ (8007798 <SPI_Timer_Status+0x28>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	bf34      	ite	cc
 8007788:	2301      	movcc	r3, #1
 800778a:	2300      	movcs	r3, #0
 800778c:	b2db      	uxtb	r3, r3
}
 800778e:	4618      	mov	r0, r3
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	2000085c 	.word	0x2000085c
 8007798:	20000860 	.word	0x20000860

0800779c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	4603      	mov	r3, r0
 80077a4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80077a6:	f107 020f 	add.w	r2, r7, #15
 80077aa:	1df9      	adds	r1, r7, #7
 80077ac:	2332      	movs	r3, #50	@ 0x32
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	2301      	movs	r3, #1
 80077b2:	4804      	ldr	r0, [pc, #16]	@ (80077c4 <xchg_spi+0x28>)
 80077b4:	f7fd f8f3 	bl	800499e <HAL_SPI_TransmitReceive>
    return rxDat;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	200003a0 	.word	0x200003a0

080077c8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80077c8:	b590      	push	{r4, r7, lr}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80077d2:	2300      	movs	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]
 80077d6:	e00a      	b.n	80077ee <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	18d4      	adds	r4, r2, r3
 80077de:	20ff      	movs	r0, #255	@ 0xff
 80077e0:	f7ff ffdc 	bl	800779c <xchg_spi>
 80077e4:	4603      	mov	r3, r0
 80077e6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3301      	adds	r3, #1
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d3f0      	bcc.n	80077d8 <rcvr_spi_multi+0x10>
	}
}
 80077f6:	bf00      	nop
 80077f8:	bf00      	nop
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd90      	pop	{r4, r7, pc}

08007800 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	b29a      	uxth	r2, r3
 800780e:	f04f 33ff 	mov.w	r3, #4294967295
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	4803      	ldr	r0, [pc, #12]	@ (8007824 <xmit_spi_multi+0x24>)
 8007816:	f7fc ff7e 	bl	8004716 <HAL_SPI_Transmit>
}
 800781a:	bf00      	nop
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	200003a0 	.word	0x200003a0

08007828 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007830:	f7fa f8d4 	bl	80019dc <HAL_GetTick>
 8007834:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800783a:	20ff      	movs	r0, #255	@ 0xff
 800783c:	f7ff ffae 	bl	800779c <xchg_spi>
 8007840:	4603      	mov	r3, r0
 8007842:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	2bff      	cmp	r3, #255	@ 0xff
 8007848:	d007      	beq.n	800785a <wait_ready+0x32>
 800784a:	f7fa f8c7 	bl	80019dc <HAL_GetTick>
 800784e:	4602      	mov	r2, r0
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	429a      	cmp	r2, r3
 8007858:	d8ef      	bhi.n	800783a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800785a:	7bfb      	ldrb	r3, [r7, #15]
 800785c:	2bff      	cmp	r3, #255	@ 0xff
 800785e:	bf0c      	ite	eq
 8007860:	2301      	moveq	r3, #1
 8007862:	2300      	movne	r3, #0
 8007864:	b2db      	uxtb	r3, r3
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
	...

08007870 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007874:	2201      	movs	r2, #1
 8007876:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800787a:	4804      	ldr	r0, [pc, #16]	@ (800788c <despiselect+0x1c>)
 800787c:	f7fa ff5e 	bl	800273c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007880:	20ff      	movs	r0, #255	@ 0xff
 8007882:	f7ff ff8b 	bl	800779c <xchg_spi>

}
 8007886:	bf00      	nop
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	40020c00 	.word	0x40020c00

08007890 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007894:	2200      	movs	r2, #0
 8007896:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800789a:	480a      	ldr	r0, [pc, #40]	@ (80078c4 <spiselect+0x34>)
 800789c:	f7fa ff4e 	bl	800273c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80078a0:	20ff      	movs	r0, #255	@ 0xff
 80078a2:	f7ff ff7b 	bl	800779c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80078a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80078aa:	f7ff ffbd 	bl	8007828 <wait_ready>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <spiselect+0x28>
 80078b4:	2301      	movs	r3, #1
 80078b6:	e002      	b.n	80078be <spiselect+0x2e>

	despiselect();
 80078b8:	f7ff ffda 	bl	8007870 <despiselect>
	return 0;	/* Timeout */
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	40020c00 	.word	0x40020c00

080078c8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80078d2:	20c8      	movs	r0, #200	@ 0xc8
 80078d4:	f7ff ff38 	bl	8007748 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80078d8:	20ff      	movs	r0, #255	@ 0xff
 80078da:	f7ff ff5f 	bl	800779c <xchg_spi>
 80078de:	4603      	mov	r3, r0
 80078e0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
 80078e4:	2bff      	cmp	r3, #255	@ 0xff
 80078e6:	d104      	bne.n	80078f2 <rcvr_datablock+0x2a>
 80078e8:	f7ff ff42 	bl	8007770 <SPI_Timer_Status>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1f2      	bne.n	80078d8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
 80078f4:	2bfe      	cmp	r3, #254	@ 0xfe
 80078f6:	d001      	beq.n	80078fc <rcvr_datablock+0x34>
 80078f8:	2300      	movs	r3, #0
 80078fa:	e00a      	b.n	8007912 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff ff62 	bl	80077c8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007904:	20ff      	movs	r0, #255	@ 0xff
 8007906:	f7ff ff49 	bl	800779c <xchg_spi>
 800790a:	20ff      	movs	r0, #255	@ 0xff
 800790c:	f7ff ff46 	bl	800779c <xchg_spi>

	return 1;						/* Function succeeded */
 8007910:	2301      	movs	r3, #1
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	460b      	mov	r3, r1
 8007924:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007926:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800792a:	f7ff ff7d 	bl	8007828 <wait_ready>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <xmit_datablock+0x1e>
 8007934:	2300      	movs	r3, #0
 8007936:	e01e      	b.n	8007976 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	4618      	mov	r0, r3
 800793c:	f7ff ff2e 	bl	800779c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	2bfd      	cmp	r3, #253	@ 0xfd
 8007944:	d016      	beq.n	8007974 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007946:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7ff ff58 	bl	8007800 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007950:	20ff      	movs	r0, #255	@ 0xff
 8007952:	f7ff ff23 	bl	800779c <xchg_spi>
 8007956:	20ff      	movs	r0, #255	@ 0xff
 8007958:	f7ff ff20 	bl	800779c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800795c:	20ff      	movs	r0, #255	@ 0xff
 800795e:	f7ff ff1d 	bl	800779c <xchg_spi>
 8007962:	4603      	mov	r3, r0
 8007964:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007966:	7bfb      	ldrb	r3, [r7, #15]
 8007968:	f003 031f 	and.w	r3, r3, #31
 800796c:	2b05      	cmp	r3, #5
 800796e:	d001      	beq.n	8007974 <xmit_datablock+0x5a>
 8007970:	2300      	movs	r3, #0
 8007972:	e000      	b.n	8007976 <xmit_datablock+0x5c>
	}
	return 1;
 8007974:	2301      	movs	r3, #1
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	4603      	mov	r3, r0
 8007986:	6039      	str	r1, [r7, #0]
 8007988:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800798a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800798e:	2b00      	cmp	r3, #0
 8007990:	da0e      	bge.n	80079b0 <send_cmd+0x32>
		cmd &= 0x7F;
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007998:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800799a:	2100      	movs	r1, #0
 800799c:	2037      	movs	r0, #55	@ 0x37
 800799e:	f7ff ffee 	bl	800797e <send_cmd>
 80079a2:	4603      	mov	r3, r0
 80079a4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d901      	bls.n	80079b0 <send_cmd+0x32>
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	e051      	b.n	8007a54 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80079b0:	79fb      	ldrb	r3, [r7, #7]
 80079b2:	2b0c      	cmp	r3, #12
 80079b4:	d008      	beq.n	80079c8 <send_cmd+0x4a>
		despiselect();
 80079b6:	f7ff ff5b 	bl	8007870 <despiselect>
		if (!spiselect()) return 0xFF;
 80079ba:	f7ff ff69 	bl	8007890 <spiselect>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <send_cmd+0x4a>
 80079c4:	23ff      	movs	r3, #255	@ 0xff
 80079c6:	e045      	b.n	8007a54 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80079c8:	79fb      	ldrb	r3, [r7, #7]
 80079ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7ff fee3 	bl	800779c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	0e1b      	lsrs	r3, r3, #24
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	4618      	mov	r0, r3
 80079de:	f7ff fedd 	bl	800779c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	0c1b      	lsrs	r3, r3, #16
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7ff fed7 	bl	800779c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	0a1b      	lsrs	r3, r3, #8
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7ff fed1 	bl	800779c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7ff fecc 	bl	800779c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007a04:	2301      	movs	r3, #1
 8007a06:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007a08:	79fb      	ldrb	r3, [r7, #7]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <send_cmd+0x94>
 8007a0e:	2395      	movs	r3, #149	@ 0x95
 8007a10:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007a12:	79fb      	ldrb	r3, [r7, #7]
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	d101      	bne.n	8007a1c <send_cmd+0x9e>
 8007a18:	2387      	movs	r3, #135	@ 0x87
 8007a1a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7ff febc 	bl	800779c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	2b0c      	cmp	r3, #12
 8007a28:	d102      	bne.n	8007a30 <send_cmd+0xb2>
 8007a2a:	20ff      	movs	r0, #255	@ 0xff
 8007a2c:	f7ff feb6 	bl	800779c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007a30:	230a      	movs	r3, #10
 8007a32:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007a34:	20ff      	movs	r0, #255	@ 0xff
 8007a36:	f7ff feb1 	bl	800779c <xchg_spi>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007a3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	da05      	bge.n	8007a52 <send_cmd+0xd4>
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	73fb      	strb	r3, [r7, #15]
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1f0      	bne.n	8007a34 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007a5c:	b590      	push	{r4, r7, lr}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	4603      	mov	r3, r0
 8007a64:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <USER_SPI_initialize+0x14>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e0d6      	b.n	8007c1e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007a70:	4b6d      	ldr	r3, [pc, #436]	@ (8007c28 <USER_SPI_initialize+0x1cc>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	f003 0302 	and.w	r3, r3, #2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <USER_SPI_initialize+0x2a>
 8007a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8007c28 <USER_SPI_initialize+0x1cc>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	e0cb      	b.n	8007c1e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8007a86:	4b69      	ldr	r3, [pc, #420]	@ (8007c2c <USER_SPI_initialize+0x1d0>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007a90:	4b66      	ldr	r3, [pc, #408]	@ (8007c2c <USER_SPI_initialize+0x1d0>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8007a98:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007a9a:	230a      	movs	r3, #10
 8007a9c:	73fb      	strb	r3, [r7, #15]
 8007a9e:	e005      	b.n	8007aac <USER_SPI_initialize+0x50>
 8007aa0:	20ff      	movs	r0, #255	@ 0xff
 8007aa2:	f7ff fe7b 	bl	800779c <xchg_spi>
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	73fb      	strb	r3, [r7, #15]
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1f6      	bne.n	8007aa0 <USER_SPI_initialize+0x44>

	ty = 0;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	2000      	movs	r0, #0
 8007aba:	f7ff ff60 	bl	800797e <send_cmd>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	f040 808b 	bne.w	8007bdc <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007ac6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007aca:	f7ff fe3d 	bl	8007748 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007ace:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8007ad2:	2008      	movs	r0, #8
 8007ad4:	f7ff ff53 	bl	800797e <send_cmd>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d151      	bne.n	8007b82 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007ade:	2300      	movs	r3, #0
 8007ae0:	73fb      	strb	r3, [r7, #15]
 8007ae2:	e00d      	b.n	8007b00 <USER_SPI_initialize+0xa4>
 8007ae4:	7bfc      	ldrb	r4, [r7, #15]
 8007ae6:	20ff      	movs	r0, #255	@ 0xff
 8007ae8:	f7ff fe58 	bl	800779c <xchg_spi>
 8007aec:	4603      	mov	r3, r0
 8007aee:	461a      	mov	r2, r3
 8007af0:	f104 0310 	add.w	r3, r4, #16
 8007af4:	443b      	add	r3, r7
 8007af6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	3301      	adds	r3, #1
 8007afe:	73fb      	strb	r3, [r7, #15]
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d9ee      	bls.n	8007ae4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007b06:	7abb      	ldrb	r3, [r7, #10]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d167      	bne.n	8007bdc <USER_SPI_initialize+0x180>
 8007b0c:	7afb      	ldrb	r3, [r7, #11]
 8007b0e:	2baa      	cmp	r3, #170	@ 0xaa
 8007b10:	d164      	bne.n	8007bdc <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007b12:	bf00      	nop
 8007b14:	f7ff fe2c 	bl	8007770 <SPI_Timer_Status>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d007      	beq.n	8007b2e <USER_SPI_initialize+0xd2>
 8007b1e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007b22:	20a9      	movs	r0, #169	@ 0xa9
 8007b24:	f7ff ff2b 	bl	800797e <send_cmd>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1f2      	bne.n	8007b14 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007b2e:	f7ff fe1f 	bl	8007770 <SPI_Timer_Status>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d051      	beq.n	8007bdc <USER_SPI_initialize+0x180>
 8007b38:	2100      	movs	r1, #0
 8007b3a:	203a      	movs	r0, #58	@ 0x3a
 8007b3c:	f7ff ff1f 	bl	800797e <send_cmd>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d14a      	bne.n	8007bdc <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007b46:	2300      	movs	r3, #0
 8007b48:	73fb      	strb	r3, [r7, #15]
 8007b4a:	e00d      	b.n	8007b68 <USER_SPI_initialize+0x10c>
 8007b4c:	7bfc      	ldrb	r4, [r7, #15]
 8007b4e:	20ff      	movs	r0, #255	@ 0xff
 8007b50:	f7ff fe24 	bl	800779c <xchg_spi>
 8007b54:	4603      	mov	r3, r0
 8007b56:	461a      	mov	r2, r3
 8007b58:	f104 0310 	add.w	r3, r4, #16
 8007b5c:	443b      	add	r3, r7
 8007b5e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	3301      	adds	r3, #1
 8007b66:	73fb      	strb	r3, [r7, #15]
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d9ee      	bls.n	8007b4c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007b6e:	7a3b      	ldrb	r3, [r7, #8]
 8007b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <USER_SPI_initialize+0x120>
 8007b78:	230c      	movs	r3, #12
 8007b7a:	e000      	b.n	8007b7e <USER_SPI_initialize+0x122>
 8007b7c:	2304      	movs	r3, #4
 8007b7e:	737b      	strb	r3, [r7, #13]
 8007b80:	e02c      	b.n	8007bdc <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007b82:	2100      	movs	r1, #0
 8007b84:	20a9      	movs	r0, #169	@ 0xa9
 8007b86:	f7ff fefa 	bl	800797e <send_cmd>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d804      	bhi.n	8007b9a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007b90:	2302      	movs	r3, #2
 8007b92:	737b      	strb	r3, [r7, #13]
 8007b94:	23a9      	movs	r3, #169	@ 0xa9
 8007b96:	73bb      	strb	r3, [r7, #14]
 8007b98:	e003      	b.n	8007ba2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	737b      	strb	r3, [r7, #13]
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007ba2:	bf00      	nop
 8007ba4:	f7ff fde4 	bl	8007770 <SPI_Timer_Status>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d007      	beq.n	8007bbe <USER_SPI_initialize+0x162>
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7ff fee3 	bl	800797e <send_cmd>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1f2      	bne.n	8007ba4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007bbe:	f7ff fdd7 	bl	8007770 <SPI_Timer_Status>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d007      	beq.n	8007bd8 <USER_SPI_initialize+0x17c>
 8007bc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007bcc:	2010      	movs	r0, #16
 8007bce:	f7ff fed6 	bl	800797e <send_cmd>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <USER_SPI_initialize+0x180>
				ty = 0;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007bdc:	4a14      	ldr	r2, [pc, #80]	@ (8007c30 <USER_SPI_initialize+0x1d4>)
 8007bde:	7b7b      	ldrb	r3, [r7, #13]
 8007be0:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007be2:	f7ff fe45 	bl	8007870 <despiselect>

	if (ty) {			/* OK */
 8007be6:	7b7b      	ldrb	r3, [r7, #13]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d012      	beq.n	8007c12 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007bec:	4b0f      	ldr	r3, [pc, #60]	@ (8007c2c <USER_SPI_initialize+0x1d0>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c2c <USER_SPI_initialize+0x1d0>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f042 0210 	orr.w	r2, r2, #16
 8007bfe:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007c00:	4b09      	ldr	r3, [pc, #36]	@ (8007c28 <USER_SPI_initialize+0x1cc>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	f023 0301 	bic.w	r3, r3, #1
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	4b06      	ldr	r3, [pc, #24]	@ (8007c28 <USER_SPI_initialize+0x1cc>)
 8007c0e:	701a      	strb	r2, [r3, #0]
 8007c10:	e002      	b.n	8007c18 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007c12:	4b05      	ldr	r3, [pc, #20]	@ (8007c28 <USER_SPI_initialize+0x1cc>)
 8007c14:	2201      	movs	r2, #1
 8007c16:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007c18:	4b03      	ldr	r3, [pc, #12]	@ (8007c28 <USER_SPI_initialize+0x1cc>)
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	b2db      	uxtb	r3, r3
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd90      	pop	{r4, r7, pc}
 8007c26:	bf00      	nop
 8007c28:	20000024 	.word	0x20000024
 8007c2c:	200003a0 	.word	0x200003a0
 8007c30:	20000858 	.word	0x20000858

08007c34 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <USER_SPI_status+0x14>
 8007c44:	2301      	movs	r3, #1
 8007c46:	e002      	b.n	8007c4e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007c48:	4b04      	ldr	r3, [pc, #16]	@ (8007c5c <USER_SPI_status+0x28>)
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	b2db      	uxtb	r3, r3
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	20000024 	.word	0x20000024

08007c60 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	607a      	str	r2, [r7, #4]
 8007c6a:	603b      	str	r3, [r7, #0]
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d102      	bne.n	8007c7c <USER_SPI_read+0x1c>
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <USER_SPI_read+0x20>
 8007c7c:	2304      	movs	r3, #4
 8007c7e:	e04d      	b.n	8007d1c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007c80:	4b28      	ldr	r3, [pc, #160]	@ (8007d24 <USER_SPI_read+0xc4>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <USER_SPI_read+0x32>
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e044      	b.n	8007d1c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007c92:	4b25      	ldr	r3, [pc, #148]	@ (8007d28 <USER_SPI_read+0xc8>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	f003 0308 	and.w	r3, r3, #8
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d102      	bne.n	8007ca4 <USER_SPI_read+0x44>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	025b      	lsls	r3, r3, #9
 8007ca2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d111      	bne.n	8007cce <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007caa:	6879      	ldr	r1, [r7, #4]
 8007cac:	2011      	movs	r0, #17
 8007cae:	f7ff fe66 	bl	800797e <send_cmd>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d129      	bne.n	8007d0c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007cb8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007cbc:	68b8      	ldr	r0, [r7, #8]
 8007cbe:	f7ff fe03 	bl	80078c8 <rcvr_datablock>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d021      	beq.n	8007d0c <USER_SPI_read+0xac>
			count = 0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	603b      	str	r3, [r7, #0]
 8007ccc:	e01e      	b.n	8007d0c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007cce:	6879      	ldr	r1, [r7, #4]
 8007cd0:	2012      	movs	r0, #18
 8007cd2:	f7ff fe54 	bl	800797e <send_cmd>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d117      	bne.n	8007d0c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007cdc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007ce0:	68b8      	ldr	r0, [r7, #8]
 8007ce2:	f7ff fdf1 	bl	80078c8 <rcvr_datablock>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00a      	beq.n	8007d02 <USER_SPI_read+0xa2>
				buff += 512;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007cf2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	603b      	str	r3, [r7, #0]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1ed      	bne.n	8007cdc <USER_SPI_read+0x7c>
 8007d00:	e000      	b.n	8007d04 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007d02:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007d04:	2100      	movs	r1, #0
 8007d06:	200c      	movs	r0, #12
 8007d08:	f7ff fe39 	bl	800797e <send_cmd>
		}
	}
	despiselect();
 8007d0c:	f7ff fdb0 	bl	8007870 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	bf14      	ite	ne
 8007d16:	2301      	movne	r3, #1
 8007d18:	2300      	moveq	r3, #0
 8007d1a:	b2db      	uxtb	r3, r3
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	20000024 	.word	0x20000024
 8007d28:	20000858 	.word	0x20000858

08007d2c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60b9      	str	r1, [r7, #8]
 8007d34:	607a      	str	r2, [r7, #4]
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d102      	bne.n	8007d48 <USER_SPI_write+0x1c>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <USER_SPI_write+0x20>
 8007d48:	2304      	movs	r3, #4
 8007d4a:	e063      	b.n	8007e14 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007d4c:	4b33      	ldr	r3, [pc, #204]	@ (8007e1c <USER_SPI_write+0xf0>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <USER_SPI_write+0x32>
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e05a      	b.n	8007e14 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8007e1c <USER_SPI_write+0xf0>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f003 0304 	and.w	r3, r3, #4
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <USER_SPI_write+0x44>
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	e051      	b.n	8007e14 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007d70:	4b2b      	ldr	r3, [pc, #172]	@ (8007e20 <USER_SPI_write+0xf4>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	f003 0308 	and.w	r3, r3, #8
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d102      	bne.n	8007d82 <USER_SPI_write+0x56>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	025b      	lsls	r3, r3, #9
 8007d80:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d110      	bne.n	8007daa <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	2018      	movs	r0, #24
 8007d8c:	f7ff fdf7 	bl	800797e <send_cmd>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d136      	bne.n	8007e04 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007d96:	21fe      	movs	r1, #254	@ 0xfe
 8007d98:	68b8      	ldr	r0, [r7, #8]
 8007d9a:	f7ff fdbe 	bl	800791a <xmit_datablock>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d02f      	beq.n	8007e04 <USER_SPI_write+0xd8>
			count = 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	e02c      	b.n	8007e04 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007daa:	4b1d      	ldr	r3, [pc, #116]	@ (8007e20 <USER_SPI_write+0xf4>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	f003 0306 	and.w	r3, r3, #6
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <USER_SPI_write+0x92>
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	2097      	movs	r0, #151	@ 0x97
 8007dba:	f7ff fde0 	bl	800797e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	2019      	movs	r0, #25
 8007dc2:	f7ff fddc 	bl	800797e <send_cmd>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d11b      	bne.n	8007e04 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007dcc:	21fc      	movs	r1, #252	@ 0xfc
 8007dce:	68b8      	ldr	r0, [r7, #8]
 8007dd0:	f7ff fda3 	bl	800791a <xmit_datablock>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00a      	beq.n	8007df0 <USER_SPI_write+0xc4>
				buff += 512;
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007de0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	3b01      	subs	r3, #1
 8007de6:	603b      	str	r3, [r7, #0]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1ee      	bne.n	8007dcc <USER_SPI_write+0xa0>
 8007dee:	e000      	b.n	8007df2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007df0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007df2:	21fd      	movs	r1, #253	@ 0xfd
 8007df4:	2000      	movs	r0, #0
 8007df6:	f7ff fd90 	bl	800791a <xmit_datablock>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <USER_SPI_write+0xd8>
 8007e00:	2301      	movs	r3, #1
 8007e02:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007e04:	f7ff fd34 	bl	8007870 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	bf14      	ite	ne
 8007e0e:	2301      	movne	r3, #1
 8007e10:	2300      	moveq	r3, #0
 8007e12:	b2db      	uxtb	r3, r3
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	20000024 	.word	0x20000024
 8007e20:	20000858 	.word	0x20000858

08007e24 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08c      	sub	sp, #48	@ 0x30
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	603a      	str	r2, [r7, #0]
 8007e2e:	71fb      	strb	r3, [r7, #7]
 8007e30:	460b      	mov	r3, r1
 8007e32:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <USER_SPI_ioctl+0x1a>
 8007e3a:	2304      	movs	r3, #4
 8007e3c:	e15a      	b.n	80080f4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007e3e:	4baf      	ldr	r3, [pc, #700]	@ (80080fc <USER_SPI_ioctl+0x2d8>)
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <USER_SPI_ioctl+0x2c>
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e151      	b.n	80080f4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8007e56:	79bb      	ldrb	r3, [r7, #6]
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	f200 8136 	bhi.w	80080ca <USER_SPI_ioctl+0x2a6>
 8007e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e64 <USER_SPI_ioctl+0x40>)
 8007e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e64:	08007e79 	.word	0x08007e79
 8007e68:	08007e8d 	.word	0x08007e8d
 8007e6c:	080080cb 	.word	0x080080cb
 8007e70:	08007f39 	.word	0x08007f39
 8007e74:	0800802f 	.word	0x0800802f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007e78:	f7ff fd0a 	bl	8007890 <spiselect>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f000 8127 	beq.w	80080d2 <USER_SPI_ioctl+0x2ae>
 8007e84:	2300      	movs	r3, #0
 8007e86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007e8a:	e122      	b.n	80080d2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	2009      	movs	r0, #9
 8007e90:	f7ff fd75 	bl	800797e <send_cmd>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f040 811d 	bne.w	80080d6 <USER_SPI_ioctl+0x2b2>
 8007e9c:	f107 030c 	add.w	r3, r7, #12
 8007ea0:	2110      	movs	r1, #16
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff fd10 	bl	80078c8 <rcvr_datablock>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 8113 	beq.w	80080d6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007eb0:	7b3b      	ldrb	r3, [r7, #12]
 8007eb2:	099b      	lsrs	r3, r3, #6
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d111      	bne.n	8007ede <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007eba:	7d7b      	ldrb	r3, [r7, #21]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	7d3b      	ldrb	r3, [r7, #20]
 8007ec0:	021b      	lsls	r3, r3, #8
 8007ec2:	4413      	add	r3, r2
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	7cfb      	ldrb	r3, [r7, #19]
 8007ec8:	041b      	lsls	r3, r3, #16
 8007eca:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8007ece:	4413      	add	r3, r2
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	029a      	lsls	r2, r3, #10
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	e028      	b.n	8007f30 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007ede:	7c7b      	ldrb	r3, [r7, #17]
 8007ee0:	f003 030f 	and.w	r3, r3, #15
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	7dbb      	ldrb	r3, [r7, #22]
 8007ee8:	09db      	lsrs	r3, r3, #7
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	4413      	add	r3, r2
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	7d7b      	ldrb	r3, [r7, #21]
 8007ef2:	005b      	lsls	r3, r3, #1
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	f003 0306 	and.w	r3, r3, #6
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	4413      	add	r3, r2
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	3302      	adds	r3, #2
 8007f02:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007f06:	7d3b      	ldrb	r3, [r7, #20]
 8007f08:	099b      	lsrs	r3, r3, #6
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	7cfb      	ldrb	r3, [r7, #19]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	441a      	add	r2, r3
 8007f14:	7cbb      	ldrb	r3, [r7, #18]
 8007f16:	029b      	lsls	r3, r3, #10
 8007f18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007f1c:	4413      	add	r3, r2
 8007f1e:	3301      	adds	r3, #1
 8007f20:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007f22:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007f26:	3b09      	subs	r3, #9
 8007f28:	69fa      	ldr	r2, [r7, #28]
 8007f2a:	409a      	lsls	r2, r3
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007f36:	e0ce      	b.n	80080d6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007f38:	4b71      	ldr	r3, [pc, #452]	@ (8008100 <USER_SPI_ioctl+0x2dc>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d031      	beq.n	8007fa8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007f44:	2100      	movs	r1, #0
 8007f46:	208d      	movs	r0, #141	@ 0x8d
 8007f48:	f7ff fd19 	bl	800797e <send_cmd>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f040 80c3 	bne.w	80080da <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007f54:	20ff      	movs	r0, #255	@ 0xff
 8007f56:	f7ff fc21 	bl	800779c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007f5a:	f107 030c 	add.w	r3, r7, #12
 8007f5e:	2110      	movs	r1, #16
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7ff fcb1 	bl	80078c8 <rcvr_datablock>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 80b6 	beq.w	80080da <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007f6e:	2330      	movs	r3, #48	@ 0x30
 8007f70:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007f74:	e007      	b.n	8007f86 <USER_SPI_ioctl+0x162>
 8007f76:	20ff      	movs	r0, #255	@ 0xff
 8007f78:	f7ff fc10 	bl	800779c <xchg_spi>
 8007f7c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007f80:	3b01      	subs	r3, #1
 8007f82:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007f86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1f3      	bne.n	8007f76 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007f8e:	7dbb      	ldrb	r3, [r7, #22]
 8007f90:	091b      	lsrs	r3, r3, #4
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	461a      	mov	r2, r3
 8007f96:	2310      	movs	r3, #16
 8007f98:	fa03 f202 	lsl.w	r2, r3, r2
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007fa6:	e098      	b.n	80080da <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007fa8:	2100      	movs	r1, #0
 8007faa:	2009      	movs	r0, #9
 8007fac:	f7ff fce7 	bl	800797e <send_cmd>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f040 8091 	bne.w	80080da <USER_SPI_ioctl+0x2b6>
 8007fb8:	f107 030c 	add.w	r3, r7, #12
 8007fbc:	2110      	movs	r1, #16
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff fc82 	bl	80078c8 <rcvr_datablock>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 8087 	beq.w	80080da <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007fcc:	4b4c      	ldr	r3, [pc, #304]	@ (8008100 <USER_SPI_ioctl+0x2dc>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d012      	beq.n	8007ffe <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007fd8:	7dbb      	ldrb	r3, [r7, #22]
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8007fe0:	7dfa      	ldrb	r2, [r7, #23]
 8007fe2:	09d2      	lsrs	r2, r2, #7
 8007fe4:	b2d2      	uxtb	r2, r2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	1c5a      	adds	r2, r3, #1
 8007fea:	7e7b      	ldrb	r3, [r7, #25]
 8007fec:	099b      	lsrs	r3, r3, #6
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	e013      	b.n	8008026 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007ffe:	7dbb      	ldrb	r3, [r7, #22]
 8008000:	109b      	asrs	r3, r3, #2
 8008002:	b29b      	uxth	r3, r3
 8008004:	f003 031f 	and.w	r3, r3, #31
 8008008:	3301      	adds	r3, #1
 800800a:	7dfa      	ldrb	r2, [r7, #23]
 800800c:	00d2      	lsls	r2, r2, #3
 800800e:	f002 0218 	and.w	r2, r2, #24
 8008012:	7df9      	ldrb	r1, [r7, #23]
 8008014:	0949      	lsrs	r1, r1, #5
 8008016:	b2c9      	uxtb	r1, r1
 8008018:	440a      	add	r2, r1
 800801a:	3201      	adds	r2, #1
 800801c:	fb02 f303 	mul.w	r3, r2, r3
 8008020:	461a      	mov	r2, r3
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800802c:	e055      	b.n	80080da <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800802e:	4b34      	ldr	r3, [pc, #208]	@ (8008100 <USER_SPI_ioctl+0x2dc>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	f003 0306 	and.w	r3, r3, #6
 8008036:	2b00      	cmp	r3, #0
 8008038:	d051      	beq.n	80080de <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800803a:	f107 020c 	add.w	r2, r7, #12
 800803e:	79fb      	ldrb	r3, [r7, #7]
 8008040:	210b      	movs	r1, #11
 8008042:	4618      	mov	r0, r3
 8008044:	f7ff feee 	bl	8007e24 <USER_SPI_ioctl>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d149      	bne.n	80080e2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800804e:	7b3b      	ldrb	r3, [r7, #12]
 8008050:	099b      	lsrs	r3, r3, #6
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	d104      	bne.n	8008062 <USER_SPI_ioctl+0x23e>
 8008058:	7dbb      	ldrb	r3, [r7, #22]
 800805a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800805e:	2b00      	cmp	r3, #0
 8008060:	d041      	beq.n	80080e6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	623b      	str	r3, [r7, #32]
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8008072:	4b23      	ldr	r3, [pc, #140]	@ (8008100 <USER_SPI_ioctl+0x2dc>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	f003 0308 	and.w	r3, r3, #8
 800807a:	2b00      	cmp	r3, #0
 800807c:	d105      	bne.n	800808a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800807e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008080:	025b      	lsls	r3, r3, #9
 8008082:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008086:	025b      	lsls	r3, r3, #9
 8008088:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800808a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800808c:	2020      	movs	r0, #32
 800808e:	f7ff fc76 	bl	800797e <send_cmd>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d128      	bne.n	80080ea <USER_SPI_ioctl+0x2c6>
 8008098:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800809a:	2021      	movs	r0, #33	@ 0x21
 800809c:	f7ff fc6f 	bl	800797e <send_cmd>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d121      	bne.n	80080ea <USER_SPI_ioctl+0x2c6>
 80080a6:	2100      	movs	r1, #0
 80080a8:	2026      	movs	r0, #38	@ 0x26
 80080aa:	f7ff fc68 	bl	800797e <send_cmd>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d11a      	bne.n	80080ea <USER_SPI_ioctl+0x2c6>
 80080b4:	f247 5030 	movw	r0, #30000	@ 0x7530
 80080b8:	f7ff fbb6 	bl	8007828 <wait_ready>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d013      	beq.n	80080ea <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80080c2:	2300      	movs	r3, #0
 80080c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80080c8:	e00f      	b.n	80080ea <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80080ca:	2304      	movs	r3, #4
 80080cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80080d0:	e00c      	b.n	80080ec <USER_SPI_ioctl+0x2c8>
		break;
 80080d2:	bf00      	nop
 80080d4:	e00a      	b.n	80080ec <USER_SPI_ioctl+0x2c8>
		break;
 80080d6:	bf00      	nop
 80080d8:	e008      	b.n	80080ec <USER_SPI_ioctl+0x2c8>
		break;
 80080da:	bf00      	nop
 80080dc:	e006      	b.n	80080ec <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80080de:	bf00      	nop
 80080e0:	e004      	b.n	80080ec <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80080e2:	bf00      	nop
 80080e4:	e002      	b.n	80080ec <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80080e6:	bf00      	nop
 80080e8:	e000      	b.n	80080ec <USER_SPI_ioctl+0x2c8>
		break;
 80080ea:	bf00      	nop
	}

	despiselect();
 80080ec:	f7ff fbc0 	bl	8007870 <despiselect>

	return res;
 80080f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3730      	adds	r7, #48	@ 0x30
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20000024 	.word	0x20000024
 8008100:	20000858 	.word	0x20000858

08008104 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f103 0208 	add.w	r2, r3, #8
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f04f 32ff 	mov.w	r2, #4294967295
 800811c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f103 0208 	add.w	r2, r3, #8
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f103 0208 	add.w	r2, r3, #8
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008152:	bf00      	nop
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800815e:	b480      	push	{r7}
 8008160:	b085      	sub	sp, #20
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	683a      	ldr	r2, [r7, #0]
 8008182:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	601a      	str	r2, [r3, #0]
}
 800819a:	bf00      	nop
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081a6:	b480      	push	{r7}
 80081a8:	b085      	sub	sp, #20
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081bc:	d103      	bne.n	80081c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	e00c      	b.n	80081e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	3308      	adds	r3, #8
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	e002      	b.n	80081d4 <vListInsert+0x2e>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d2f6      	bcs.n	80081ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	685a      	ldr	r2, [r3, #4]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	601a      	str	r2, [r3, #0]
}
 800820c:	bf00      	nop
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	6892      	ldr	r2, [r2, #8]
 800822e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	6852      	ldr	r2, [r2, #4]
 8008238:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	429a      	cmp	r2, r3
 8008242:	d103      	bne.n	800824c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	1e5a      	subs	r2, r3, #1
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10b      	bne.n	8008298 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008292:	bf00      	nop
 8008294:	bf00      	nop
 8008296:	e7fd      	b.n	8008294 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008298:	f002 fa0e 	bl	800a6b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082a4:	68f9      	ldr	r1, [r7, #12]
 80082a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80082a8:	fb01 f303 	mul.w	r3, r1, r3
 80082ac:	441a      	add	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082c8:	3b01      	subs	r3, #1
 80082ca:	68f9      	ldr	r1, [r7, #12]
 80082cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80082ce:	fb01 f303 	mul.w	r3, r1, r3
 80082d2:	441a      	add	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	22ff      	movs	r2, #255	@ 0xff
 80082dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	22ff      	movs	r2, #255	@ 0xff
 80082e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d114      	bne.n	8008318 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d01a      	beq.n	800832c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	3310      	adds	r3, #16
 80082fa:	4618      	mov	r0, r3
 80082fc:	f001 f9b0 	bl	8009660 <xTaskRemoveFromEventList>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d012      	beq.n	800832c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008306:	4b0d      	ldr	r3, [pc, #52]	@ (800833c <xQueueGenericReset+0xd0>)
 8008308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	e009      	b.n	800832c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	3310      	adds	r3, #16
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff fef1 	bl	8008104 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3324      	adds	r3, #36	@ 0x24
 8008326:	4618      	mov	r0, r3
 8008328:	f7ff feec 	bl	8008104 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800832c:	f002 f9f6 	bl	800a71c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008330:	2301      	movs	r3, #1
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	e000ed04 	.word	0xe000ed04

08008340 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008340:	b580      	push	{r7, lr}
 8008342:	b08a      	sub	sp, #40	@ 0x28
 8008344:	af02      	add	r7, sp, #8
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	4613      	mov	r3, r2
 800834c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10b      	bne.n	800836c <xQueueGenericCreate+0x2c>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	613b      	str	r3, [r7, #16]
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	e7fd      	b.n	8008368 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d102      	bne.n	8008378 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008372:	2300      	movs	r3, #0
 8008374:	61fb      	str	r3, [r7, #28]
 8008376:	e004      	b.n	8008382 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	fb02 f303 	mul.w	r3, r2, r3
 8008380:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	3350      	adds	r3, #80	@ 0x50
 8008386:	4618      	mov	r0, r3
 8008388:	f002 fab8 	bl	800a8fc <pvPortMalloc>
 800838c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00d      	beq.n	80083b0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	3350      	adds	r3, #80	@ 0x50
 800839c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800839e:	79fa      	ldrb	r2, [r7, #7]
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	4613      	mov	r3, r2
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	68b9      	ldr	r1, [r7, #8]
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 f805 	bl	80083ba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80083b0:	69bb      	ldr	r3, [r7, #24]
	}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3720      	adds	r7, #32
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	60f8      	str	r0, [r7, #12]
 80083c2:	60b9      	str	r1, [r7, #8]
 80083c4:	607a      	str	r2, [r7, #4]
 80083c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d103      	bne.n	80083d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	e002      	b.n	80083dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083e8:	2101      	movs	r1, #1
 80083ea:	69b8      	ldr	r0, [r7, #24]
 80083ec:	f7ff ff3e 	bl	800826c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	78fa      	ldrb	r2, [r7, #3]
 80083f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083f8:	bf00      	nop
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00e      	beq.n	800842c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008420:	2300      	movs	r3, #0
 8008422:	2200      	movs	r2, #0
 8008424:	2100      	movs	r1, #0
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f81c 	bl	8008464 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800842c:	bf00      	nop
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	4603      	mov	r3, r0
 800843c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800843e:	2301      	movs	r3, #1
 8008440:	617b      	str	r3, [r7, #20]
 8008442:	2300      	movs	r3, #0
 8008444:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008446:	79fb      	ldrb	r3, [r7, #7]
 8008448:	461a      	mov	r2, r3
 800844a:	6939      	ldr	r1, [r7, #16]
 800844c:	6978      	ldr	r0, [r7, #20]
 800844e:	f7ff ff77 	bl	8008340 <xQueueGenericCreate>
 8008452:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f7ff ffd3 	bl	8008400 <prvInitialiseMutex>

		return xNewQueue;
 800845a:	68fb      	ldr	r3, [r7, #12]
	}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b08e      	sub	sp, #56	@ 0x38
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008472:	2300      	movs	r3, #0
 8008474:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800847a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10b      	bne.n	8008498 <xQueueGenericSend+0x34>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008492:	bf00      	nop
 8008494:	bf00      	nop
 8008496:	e7fd      	b.n	8008494 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d103      	bne.n	80084a6 <xQueueGenericSend+0x42>
 800849e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <xQueueGenericSend+0x46>
 80084a6:	2301      	movs	r3, #1
 80084a8:	e000      	b.n	80084ac <xQueueGenericSend+0x48>
 80084aa:	2300      	movs	r3, #0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10b      	bne.n	80084c8 <xQueueGenericSend+0x64>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80084c2:	bf00      	nop
 80084c4:	bf00      	nop
 80084c6:	e7fd      	b.n	80084c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d103      	bne.n	80084d6 <xQueueGenericSend+0x72>
 80084ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d101      	bne.n	80084da <xQueueGenericSend+0x76>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e000      	b.n	80084dc <xQueueGenericSend+0x78>
 80084da:	2300      	movs	r3, #0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10b      	bne.n	80084f8 <xQueueGenericSend+0x94>
	__asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	623b      	str	r3, [r7, #32]
}
 80084f2:	bf00      	nop
 80084f4:	bf00      	nop
 80084f6:	e7fd      	b.n	80084f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084f8:	f001 fa52 	bl	80099a0 <xTaskGetSchedulerState>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d102      	bne.n	8008508 <xQueueGenericSend+0xa4>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d101      	bne.n	800850c <xQueueGenericSend+0xa8>
 8008508:	2301      	movs	r3, #1
 800850a:	e000      	b.n	800850e <xQueueGenericSend+0xaa>
 800850c:	2300      	movs	r3, #0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10b      	bne.n	800852a <xQueueGenericSend+0xc6>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	61fb      	str	r3, [r7, #28]
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop
 8008528:	e7fd      	b.n	8008526 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800852a:	f002 f8c5 	bl	800a6b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800852e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008530:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008536:	429a      	cmp	r2, r3
 8008538:	d302      	bcc.n	8008540 <xQueueGenericSend+0xdc>
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	2b02      	cmp	r3, #2
 800853e:	d129      	bne.n	8008594 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	68b9      	ldr	r1, [r7, #8]
 8008544:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008546:	f000 fb35 	bl	8008bb4 <prvCopyDataToQueue>
 800854a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800854c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008550:	2b00      	cmp	r3, #0
 8008552:	d010      	beq.n	8008576 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008556:	3324      	adds	r3, #36	@ 0x24
 8008558:	4618      	mov	r0, r3
 800855a:	f001 f881 	bl	8009660 <xTaskRemoveFromEventList>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d013      	beq.n	800858c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008564:	4b3f      	ldr	r3, [pc, #252]	@ (8008664 <xQueueGenericSend+0x200>)
 8008566:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	e00a      	b.n	800858c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008578:	2b00      	cmp	r3, #0
 800857a:	d007      	beq.n	800858c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800857c:	4b39      	ldr	r3, [pc, #228]	@ (8008664 <xQueueGenericSend+0x200>)
 800857e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800858c:	f002 f8c6 	bl	800a71c <vPortExitCritical>
				return pdPASS;
 8008590:	2301      	movs	r3, #1
 8008592:	e063      	b.n	800865c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d103      	bne.n	80085a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800859a:	f002 f8bf 	bl	800a71c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	e05c      	b.n	800865c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d106      	bne.n	80085b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085a8:	f107 0314 	add.w	r3, r7, #20
 80085ac:	4618      	mov	r0, r3
 80085ae:	f001 f8bb 	bl	8009728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085b2:	2301      	movs	r3, #1
 80085b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085b6:	f002 f8b1 	bl	800a71c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085ba:	f000 fe2d 	bl	8009218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085be:	f002 f87b 	bl	800a6b8 <vPortEnterCritical>
 80085c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085c8:	b25b      	sxtb	r3, r3
 80085ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ce:	d103      	bne.n	80085d8 <xQueueGenericSend+0x174>
 80085d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085de:	b25b      	sxtb	r3, r3
 80085e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e4:	d103      	bne.n	80085ee <xQueueGenericSend+0x18a>
 80085e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085ee:	f002 f895 	bl	800a71c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085f2:	1d3a      	adds	r2, r7, #4
 80085f4:	f107 0314 	add.w	r3, r7, #20
 80085f8:	4611      	mov	r1, r2
 80085fa:	4618      	mov	r0, r3
 80085fc:	f001 f8aa 	bl	8009754 <xTaskCheckForTimeOut>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d124      	bne.n	8008650 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008606:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008608:	f000 fbcc 	bl	8008da4 <prvIsQueueFull>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d018      	beq.n	8008644 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008614:	3310      	adds	r3, #16
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	4611      	mov	r1, r2
 800861a:	4618      	mov	r0, r3
 800861c:	f000 ffce 	bl	80095bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008620:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008622:	f000 fb57 	bl	8008cd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008626:	f000 fe05 	bl	8009234 <xTaskResumeAll>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	f47f af7c 	bne.w	800852a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008632:	4b0c      	ldr	r3, [pc, #48]	@ (8008664 <xQueueGenericSend+0x200>)
 8008634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	e772      	b.n	800852a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008644:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008646:	f000 fb45 	bl	8008cd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800864a:	f000 fdf3 	bl	8009234 <xTaskResumeAll>
 800864e:	e76c      	b.n	800852a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008650:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008652:	f000 fb3f 	bl	8008cd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008656:	f000 fded 	bl	8009234 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800865a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800865c:	4618      	mov	r0, r3
 800865e:	3738      	adds	r7, #56	@ 0x38
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	e000ed04 	.word	0xe000ed04

08008668 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b08e      	sub	sp, #56	@ 0x38
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10b      	bne.n	8008698 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008692:	bf00      	nop
 8008694:	bf00      	nop
 8008696:	e7fd      	b.n	8008694 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d103      	bne.n	80086a6 <xQueueGenericSendFromISR+0x3e>
 800869e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <xQueueGenericSendFromISR+0x42>
 80086a6:	2301      	movs	r3, #1
 80086a8:	e000      	b.n	80086ac <xQueueGenericSendFromISR+0x44>
 80086aa:	2300      	movs	r3, #0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10b      	bne.n	80086c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	623b      	str	r3, [r7, #32]
}
 80086c2:	bf00      	nop
 80086c4:	bf00      	nop
 80086c6:	e7fd      	b.n	80086c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d103      	bne.n	80086d6 <xQueueGenericSendFromISR+0x6e>
 80086ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d101      	bne.n	80086da <xQueueGenericSendFromISR+0x72>
 80086d6:	2301      	movs	r3, #1
 80086d8:	e000      	b.n	80086dc <xQueueGenericSendFromISR+0x74>
 80086da:	2300      	movs	r3, #0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10b      	bne.n	80086f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	61fb      	str	r3, [r7, #28]
}
 80086f2:	bf00      	nop
 80086f4:	bf00      	nop
 80086f6:	e7fd      	b.n	80086f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086f8:	f002 f8be 	bl	800a878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80086fc:	f3ef 8211 	mrs	r2, BASEPRI
 8008700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	61ba      	str	r2, [r7, #24]
 8008712:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008714:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008716:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800871c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008720:	429a      	cmp	r2, r3
 8008722:	d302      	bcc.n	800872a <xQueueGenericSendFromISR+0xc2>
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2b02      	cmp	r3, #2
 8008728:	d12c      	bne.n	8008784 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800872a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008730:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	68b9      	ldr	r1, [r7, #8]
 8008738:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800873a:	f000 fa3b 	bl	8008bb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800873e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008746:	d112      	bne.n	800876e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874c:	2b00      	cmp	r3, #0
 800874e:	d016      	beq.n	800877e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008752:	3324      	adds	r3, #36	@ 0x24
 8008754:	4618      	mov	r0, r3
 8008756:	f000 ff83 	bl	8009660 <xTaskRemoveFromEventList>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00e      	beq.n	800877e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00b      	beq.n	800877e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	601a      	str	r2, [r3, #0]
 800876c:	e007      	b.n	800877e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800876e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008772:	3301      	adds	r3, #1
 8008774:	b2db      	uxtb	r3, r3
 8008776:	b25a      	sxtb	r2, r3
 8008778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800877e:	2301      	movs	r3, #1
 8008780:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008782:	e001      	b.n	8008788 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008784:	2300      	movs	r3, #0
 8008786:	637b      	str	r3, [r7, #52]	@ 0x34
 8008788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008792:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008796:	4618      	mov	r0, r3
 8008798:	3738      	adds	r7, #56	@ 0x38
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
	...

080087a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b08c      	sub	sp, #48	@ 0x30
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80087b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10b      	bne.n	80087d2 <xQueueReceive+0x32>
	__asm volatile
 80087ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	623b      	str	r3, [r7, #32]
}
 80087cc:	bf00      	nop
 80087ce:	bf00      	nop
 80087d0:	e7fd      	b.n	80087ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d103      	bne.n	80087e0 <xQueueReceive+0x40>
 80087d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <xQueueReceive+0x44>
 80087e0:	2301      	movs	r3, #1
 80087e2:	e000      	b.n	80087e6 <xQueueReceive+0x46>
 80087e4:	2300      	movs	r3, #0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10b      	bne.n	8008802 <xQueueReceive+0x62>
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	61fb      	str	r3, [r7, #28]
}
 80087fc:	bf00      	nop
 80087fe:	bf00      	nop
 8008800:	e7fd      	b.n	80087fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008802:	f001 f8cd 	bl	80099a0 <xTaskGetSchedulerState>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d102      	bne.n	8008812 <xQueueReceive+0x72>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d101      	bne.n	8008816 <xQueueReceive+0x76>
 8008812:	2301      	movs	r3, #1
 8008814:	e000      	b.n	8008818 <xQueueReceive+0x78>
 8008816:	2300      	movs	r3, #0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10b      	bne.n	8008834 <xQueueReceive+0x94>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	61bb      	str	r3, [r7, #24]
}
 800882e:	bf00      	nop
 8008830:	bf00      	nop
 8008832:	e7fd      	b.n	8008830 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008834:	f001 ff40 	bl	800a6b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800883c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800883e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01f      	beq.n	8008884 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008844:	68b9      	ldr	r1, [r7, #8]
 8008846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008848:	f000 fa1e 	bl	8008c88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800884c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884e:	1e5a      	subs	r2, r3, #1
 8008850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008852:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00f      	beq.n	800887c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800885c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885e:	3310      	adds	r3, #16
 8008860:	4618      	mov	r0, r3
 8008862:	f000 fefd 	bl	8009660 <xTaskRemoveFromEventList>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d007      	beq.n	800887c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800886c:	4b3c      	ldr	r3, [pc, #240]	@ (8008960 <xQueueReceive+0x1c0>)
 800886e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800887c:	f001 ff4e 	bl	800a71c <vPortExitCritical>
				return pdPASS;
 8008880:	2301      	movs	r3, #1
 8008882:	e069      	b.n	8008958 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d103      	bne.n	8008892 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800888a:	f001 ff47 	bl	800a71c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800888e:	2300      	movs	r3, #0
 8008890:	e062      	b.n	8008958 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008894:	2b00      	cmp	r3, #0
 8008896:	d106      	bne.n	80088a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008898:	f107 0310 	add.w	r3, r7, #16
 800889c:	4618      	mov	r0, r3
 800889e:	f000 ff43 	bl	8009728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088a2:	2301      	movs	r3, #1
 80088a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088a6:	f001 ff39 	bl	800a71c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088aa:	f000 fcb5 	bl	8009218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088ae:	f001 ff03 	bl	800a6b8 <vPortEnterCritical>
 80088b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088b8:	b25b      	sxtb	r3, r3
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088be:	d103      	bne.n	80088c8 <xQueueReceive+0x128>
 80088c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088ce:	b25b      	sxtb	r3, r3
 80088d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d4:	d103      	bne.n	80088de <xQueueReceive+0x13e>
 80088d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088de:	f001 ff1d 	bl	800a71c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088e2:	1d3a      	adds	r2, r7, #4
 80088e4:	f107 0310 	add.w	r3, r7, #16
 80088e8:	4611      	mov	r1, r2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 ff32 	bl	8009754 <xTaskCheckForTimeOut>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d123      	bne.n	800893e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088f8:	f000 fa3e 	bl	8008d78 <prvIsQueueEmpty>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d017      	beq.n	8008932 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008904:	3324      	adds	r3, #36	@ 0x24
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f000 fe56 	bl	80095bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008910:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008912:	f000 f9df 	bl	8008cd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008916:	f000 fc8d 	bl	8009234 <xTaskResumeAll>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d189      	bne.n	8008834 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008920:	4b0f      	ldr	r3, [pc, #60]	@ (8008960 <xQueueReceive+0x1c0>)
 8008922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008926:	601a      	str	r2, [r3, #0]
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	e780      	b.n	8008834 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008932:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008934:	f000 f9ce 	bl	8008cd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008938:	f000 fc7c 	bl	8009234 <xTaskResumeAll>
 800893c:	e77a      	b.n	8008834 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800893e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008940:	f000 f9c8 	bl	8008cd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008944:	f000 fc76 	bl	8009234 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008948:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800894a:	f000 fa15 	bl	8008d78 <prvIsQueueEmpty>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	f43f af6f 	beq.w	8008834 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008956:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008958:	4618      	mov	r0, r3
 800895a:	3730      	adds	r7, #48	@ 0x30
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	e000ed04 	.word	0xe000ed04

08008964 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b08e      	sub	sp, #56	@ 0x38
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800896e:	2300      	movs	r3, #0
 8008970:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008976:	2300      	movs	r3, #0
 8008978:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800897a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10b      	bne.n	8008998 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	623b      	str	r3, [r7, #32]
}
 8008992:	bf00      	nop
 8008994:	bf00      	nop
 8008996:	e7fd      	b.n	8008994 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00b      	beq.n	80089b8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	61fb      	str	r3, [r7, #28]
}
 80089b2:	bf00      	nop
 80089b4:	bf00      	nop
 80089b6:	e7fd      	b.n	80089b4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089b8:	f000 fff2 	bl	80099a0 <xTaskGetSchedulerState>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d102      	bne.n	80089c8 <xQueueSemaphoreTake+0x64>
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <xQueueSemaphoreTake+0x68>
 80089c8:	2301      	movs	r3, #1
 80089ca:	e000      	b.n	80089ce <xQueueSemaphoreTake+0x6a>
 80089cc:	2300      	movs	r3, #0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10b      	bne.n	80089ea <xQueueSemaphoreTake+0x86>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	61bb      	str	r3, [r7, #24]
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop
 80089e8:	e7fd      	b.n	80089e6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089ea:	f001 fe65 	bl	800a6b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80089ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80089f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d024      	beq.n	8008a44 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80089fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fc:	1e5a      	subs	r2, r3, #1
 80089fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a00:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d104      	bne.n	8008a14 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008a0a:	f001 f98b 	bl	8009d24 <pvTaskIncrementMutexHeldCount>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a12:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00f      	beq.n	8008a3c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a1e:	3310      	adds	r3, #16
 8008a20:	4618      	mov	r0, r3
 8008a22:	f000 fe1d 	bl	8009660 <xTaskRemoveFromEventList>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d007      	beq.n	8008a3c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a2c:	4b54      	ldr	r3, [pc, #336]	@ (8008b80 <xQueueSemaphoreTake+0x21c>)
 8008a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a3c:	f001 fe6e 	bl	800a71c <vPortExitCritical>
				return pdPASS;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e098      	b.n	8008b76 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d112      	bne.n	8008a70 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00b      	beq.n	8008a68 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	617b      	str	r3, [r7, #20]
}
 8008a62:	bf00      	nop
 8008a64:	bf00      	nop
 8008a66:	e7fd      	b.n	8008a64 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008a68:	f001 fe58 	bl	800a71c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	e082      	b.n	8008b76 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d106      	bne.n	8008a84 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a76:	f107 030c 	add.w	r3, r7, #12
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 fe54 	bl	8009728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a80:	2301      	movs	r3, #1
 8008a82:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a84:	f001 fe4a 	bl	800a71c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a88:	f000 fbc6 	bl	8009218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a8c:	f001 fe14 	bl	800a6b8 <vPortEnterCritical>
 8008a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a96:	b25b      	sxtb	r3, r3
 8008a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9c:	d103      	bne.n	8008aa6 <xQueueSemaphoreTake+0x142>
 8008a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008aac:	b25b      	sxtb	r3, r3
 8008aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab2:	d103      	bne.n	8008abc <xQueueSemaphoreTake+0x158>
 8008ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008abc:	f001 fe2e 	bl	800a71c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ac0:	463a      	mov	r2, r7
 8008ac2:	f107 030c 	add.w	r3, r7, #12
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fe43 	bl	8009754 <xTaskCheckForTimeOut>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d132      	bne.n	8008b3a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ad4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ad6:	f000 f94f 	bl	8008d78 <prvIsQueueEmpty>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d026      	beq.n	8008b2e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d109      	bne.n	8008afc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008ae8:	f001 fde6 	bl	800a6b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 ff73 	bl	80099dc <xTaskPriorityInherit>
 8008af6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008af8:	f001 fe10 	bl	800a71c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afe:	3324      	adds	r3, #36	@ 0x24
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	4611      	mov	r1, r2
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 fd59 	bl	80095bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b0c:	f000 f8e2 	bl	8008cd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b10:	f000 fb90 	bl	8009234 <xTaskResumeAll>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f47f af67 	bne.w	80089ea <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008b1c:	4b18      	ldr	r3, [pc, #96]	@ (8008b80 <xQueueSemaphoreTake+0x21c>)
 8008b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b22:	601a      	str	r2, [r3, #0]
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	f3bf 8f6f 	isb	sy
 8008b2c:	e75d      	b.n	80089ea <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008b2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b30:	f000 f8d0 	bl	8008cd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b34:	f000 fb7e 	bl	8009234 <xTaskResumeAll>
 8008b38:	e757      	b.n	80089ea <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008b3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b3c:	f000 f8ca 	bl	8008cd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b40:	f000 fb78 	bl	8009234 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b46:	f000 f917 	bl	8008d78 <prvIsQueueEmpty>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f43f af4c 	beq.w	80089ea <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00d      	beq.n	8008b74 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008b58:	f001 fdae 	bl	800a6b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008b5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b5e:	f000 f811 	bl	8008b84 <prvGetDisinheritPriorityAfterTimeout>
 8008b62:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f001 f83e 	bl	8009bec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008b70:	f001 fdd4 	bl	800a71c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3738      	adds	r7, #56	@ 0x38
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	e000ed04 	.word	0xe000ed04

08008b84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d006      	beq.n	8008ba2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f1c3 0305 	rsb	r3, r3, #5
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	e001      	b.n	8008ba6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
	}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10d      	bne.n	8008bee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d14d      	bne.n	8008c76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 ff7c 	bl	8009adc <xTaskPriorityDisinherit>
 8008be4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	609a      	str	r2, [r3, #8]
 8008bec:	e043      	b.n	8008c76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d119      	bne.n	8008c28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6858      	ldr	r0, [r3, #4]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	68b9      	ldr	r1, [r7, #8]
 8008c00:	f004 fec8 	bl	800d994 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0c:	441a      	add	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	685a      	ldr	r2, [r3, #4]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d32b      	bcc.n	8008c76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	605a      	str	r2, [r3, #4]
 8008c26:	e026      	b.n	8008c76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	68d8      	ldr	r0, [r3, #12]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c30:	461a      	mov	r2, r3
 8008c32:	68b9      	ldr	r1, [r7, #8]
 8008c34:	f004 feae 	bl	800d994 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	68da      	ldr	r2, [r3, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c40:	425b      	negs	r3, r3
 8008c42:	441a      	add	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	68da      	ldr	r2, [r3, #12]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d207      	bcs.n	8008c64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	689a      	ldr	r2, [r3, #8]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c5c:	425b      	negs	r3, r3
 8008c5e:	441a      	add	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d105      	bne.n	8008c76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d002      	beq.n	8008c76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	1c5a      	adds	r2, r3, #1
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008c7e:	697b      	ldr	r3, [r7, #20]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3718      	adds	r7, #24
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d018      	beq.n	8008ccc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68da      	ldr	r2, [r3, #12]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca2:	441a      	add	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68da      	ldr	r2, [r3, #12]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d303      	bcc.n	8008cbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68d9      	ldr	r1, [r3, #12]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	6838      	ldr	r0, [r7, #0]
 8008cc8:	f004 fe64 	bl	800d994 <memcpy>
	}
}
 8008ccc:	bf00      	nop
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008cdc:	f001 fcec 	bl	800a6b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ce6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ce8:	e011      	b.n	8008d0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d012      	beq.n	8008d18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	3324      	adds	r3, #36	@ 0x24
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 fcb2 	bl	8009660 <xTaskRemoveFromEventList>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d02:	f000 fd8b 	bl	800981c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	dce9      	bgt.n	8008cea <prvUnlockQueue+0x16>
 8008d16:	e000      	b.n	8008d1a <prvUnlockQueue+0x46>
					break;
 8008d18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	22ff      	movs	r2, #255	@ 0xff
 8008d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008d22:	f001 fcfb 	bl	800a71c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d26:	f001 fcc7 	bl	800a6b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d32:	e011      	b.n	8008d58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d012      	beq.n	8008d62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3310      	adds	r3, #16
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 fc8d 	bl	8009660 <xTaskRemoveFromEventList>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d4c:	f000 fd66 	bl	800981c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	3b01      	subs	r3, #1
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	dce9      	bgt.n	8008d34 <prvUnlockQueue+0x60>
 8008d60:	e000      	b.n	8008d64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	22ff      	movs	r2, #255	@ 0xff
 8008d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008d6c:	f001 fcd6 	bl	800a71c <vPortExitCritical>
}
 8008d70:	bf00      	nop
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d80:	f001 fc9a 	bl	800a6b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d102      	bne.n	8008d92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	e001      	b.n	8008d96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d96:	f001 fcc1 	bl	800a71c <vPortExitCritical>

	return xReturn;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008dac:	f001 fc84 	bl	800a6b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d102      	bne.n	8008dc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	e001      	b.n	8008dc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008dc6:	f001 fca9 	bl	800a71c <vPortExitCritical>

	return xReturn;
 8008dca:	68fb      	ldr	r3, [r7, #12]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008dde:	2300      	movs	r3, #0
 8008de0:	60fb      	str	r3, [r7, #12]
 8008de2:	e014      	b.n	8008e0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008de4:	4a0f      	ldr	r2, [pc, #60]	@ (8008e24 <vQueueAddToRegistry+0x50>)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10b      	bne.n	8008e08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008df0:	490c      	ldr	r1, [pc, #48]	@ (8008e24 <vQueueAddToRegistry+0x50>)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	683a      	ldr	r2, [r7, #0]
 8008df6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8008e24 <vQueueAddToRegistry+0x50>)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	4413      	add	r3, r2
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008e06:	e006      	b.n	8008e16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	60fb      	str	r3, [r7, #12]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2b07      	cmp	r3, #7
 8008e12:	d9e7      	bls.n	8008de4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	20000864 	.word	0x20000864

08008e28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e38:	f001 fc3e 	bl	800a6b8 <vPortEnterCritical>
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e42:	b25b      	sxtb	r3, r3
 8008e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e48:	d103      	bne.n	8008e52 <vQueueWaitForMessageRestricted+0x2a>
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e58:	b25b      	sxtb	r3, r3
 8008e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5e:	d103      	bne.n	8008e68 <vQueueWaitForMessageRestricted+0x40>
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e68:	f001 fc58 	bl	800a71c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d106      	bne.n	8008e82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	3324      	adds	r3, #36	@ 0x24
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	68b9      	ldr	r1, [r7, #8]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 fbc3 	bl	8009608 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e82:	6978      	ldr	r0, [r7, #20]
 8008e84:	f7ff ff26 	bl	8008cd4 <prvUnlockQueue>
	}
 8008e88:	bf00      	nop
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08c      	sub	sp, #48	@ 0x30
 8008e94:	af04      	add	r7, sp, #16
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	603b      	str	r3, [r7, #0]
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ea0:	88fb      	ldrh	r3, [r7, #6]
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f001 fd29 	bl	800a8fc <pvPortMalloc>
 8008eaa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00e      	beq.n	8008ed0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008eb2:	2058      	movs	r0, #88	@ 0x58
 8008eb4:	f001 fd22 	bl	800a8fc <pvPortMalloc>
 8008eb8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	631a      	str	r2, [r3, #48]	@ 0x30
 8008ec6:	e005      	b.n	8008ed4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ec8:	6978      	ldr	r0, [r7, #20]
 8008eca:	f001 fddf 	bl	800aa8c <vPortFree>
 8008ece:	e001      	b.n	8008ed4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d013      	beq.n	8008f02 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008eda:	88fa      	ldrh	r2, [r7, #6]
 8008edc:	2300      	movs	r3, #0
 8008ede:	9303      	str	r3, [sp, #12]
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	9302      	str	r3, [sp, #8]
 8008ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee6:	9301      	str	r3, [sp, #4]
 8008ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	68b9      	ldr	r1, [r7, #8]
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f000 f80e 	bl	8008f12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ef6:	69f8      	ldr	r0, [r7, #28]
 8008ef8:	f000 f89c 	bl	8009034 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008efc:	2301      	movs	r3, #1
 8008efe:	61bb      	str	r3, [r7, #24]
 8008f00:	e002      	b.n	8008f08 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f02:	f04f 33ff 	mov.w	r3, #4294967295
 8008f06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f08:	69bb      	ldr	r3, [r7, #24]
	}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3720      	adds	r7, #32
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b088      	sub	sp, #32
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	60b9      	str	r1, [r7, #8]
 8008f1c:	607a      	str	r2, [r7, #4]
 8008f1e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f22:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	461a      	mov	r2, r3
 8008f2a:	21a5      	movs	r1, #165	@ 0xa5
 8008f2c:	f004 fcd4 	bl	800d8d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	f023 0307 	bic.w	r3, r3, #7
 8008f48:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	f003 0307 	and.w	r3, r3, #7
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00b      	beq.n	8008f6c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	617b      	str	r3, [r7, #20]
}
 8008f66:	bf00      	nop
 8008f68:	bf00      	nop
 8008f6a:	e7fd      	b.n	8008f68 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d01f      	beq.n	8008fb2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f72:	2300      	movs	r3, #0
 8008f74:	61fb      	str	r3, [r7, #28]
 8008f76:	e012      	b.n	8008f9e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	7819      	ldrb	r1, [r3, #0]
 8008f80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	4413      	add	r3, r2
 8008f86:	3334      	adds	r3, #52	@ 0x34
 8008f88:	460a      	mov	r2, r1
 8008f8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	4413      	add	r3, r2
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d006      	beq.n	8008fa6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	61fb      	str	r3, [r7, #28]
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	2b09      	cmp	r3, #9
 8008fa2:	d9e9      	bls.n	8008f78 <prvInitialiseNewTask+0x66>
 8008fa4:	e000      	b.n	8008fa8 <prvInitialiseNewTask+0x96>
			{
				break;
 8008fa6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008faa:	2200      	movs	r2, #0
 8008fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008fb0:	e003      	b.n	8008fba <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fbc:	2b04      	cmp	r3, #4
 8008fbe:	d901      	bls.n	8008fc4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008fc0:	2304      	movs	r3, #4
 8008fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fce:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd8:	3304      	adds	r3, #4
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff f8b2 	bl	8008144 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe2:	3318      	adds	r3, #24
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7ff f8ad 	bl	8008144 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff2:	f1c3 0205 	rsb	r2, r3, #5
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ffe:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009002:	2200      	movs	r2, #0
 8009004:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009008:	2200      	movs	r2, #0
 800900a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	68f9      	ldr	r1, [r7, #12]
 8009012:	69b8      	ldr	r0, [r7, #24]
 8009014:	f001 fa1e 	bl	800a454 <pxPortInitialiseStack>
 8009018:	4602      	mov	r2, r0
 800901a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800901e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009028:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800902a:	bf00      	nop
 800902c:	3720      	adds	r7, #32
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
	...

08009034 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800903c:	f001 fb3c 	bl	800a6b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009040:	4b2c      	ldr	r3, [pc, #176]	@ (80090f4 <prvAddNewTaskToReadyList+0xc0>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3301      	adds	r3, #1
 8009046:	4a2b      	ldr	r2, [pc, #172]	@ (80090f4 <prvAddNewTaskToReadyList+0xc0>)
 8009048:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800904a:	4b2b      	ldr	r3, [pc, #172]	@ (80090f8 <prvAddNewTaskToReadyList+0xc4>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d109      	bne.n	8009066 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009052:	4a29      	ldr	r2, [pc, #164]	@ (80090f8 <prvAddNewTaskToReadyList+0xc4>)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009058:	4b26      	ldr	r3, [pc, #152]	@ (80090f4 <prvAddNewTaskToReadyList+0xc0>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d110      	bne.n	8009082 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009060:	f000 fc00 	bl	8009864 <prvInitialiseTaskLists>
 8009064:	e00d      	b.n	8009082 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009066:	4b25      	ldr	r3, [pc, #148]	@ (80090fc <prvAddNewTaskToReadyList+0xc8>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d109      	bne.n	8009082 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800906e:	4b22      	ldr	r3, [pc, #136]	@ (80090f8 <prvAddNewTaskToReadyList+0xc4>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009078:	429a      	cmp	r2, r3
 800907a:	d802      	bhi.n	8009082 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800907c:	4a1e      	ldr	r2, [pc, #120]	@ (80090f8 <prvAddNewTaskToReadyList+0xc4>)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009082:	4b1f      	ldr	r3, [pc, #124]	@ (8009100 <prvAddNewTaskToReadyList+0xcc>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3301      	adds	r3, #1
 8009088:	4a1d      	ldr	r2, [pc, #116]	@ (8009100 <prvAddNewTaskToReadyList+0xcc>)
 800908a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800908c:	4b1c      	ldr	r3, [pc, #112]	@ (8009100 <prvAddNewTaskToReadyList+0xcc>)
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009098:	2201      	movs	r2, #1
 800909a:	409a      	lsls	r2, r3
 800909c:	4b19      	ldr	r3, [pc, #100]	@ (8009104 <prvAddNewTaskToReadyList+0xd0>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	4a18      	ldr	r2, [pc, #96]	@ (8009104 <prvAddNewTaskToReadyList+0xd0>)
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090aa:	4613      	mov	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4a15      	ldr	r2, [pc, #84]	@ (8009108 <prvAddNewTaskToReadyList+0xd4>)
 80090b4:	441a      	add	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	3304      	adds	r3, #4
 80090ba:	4619      	mov	r1, r3
 80090bc:	4610      	mov	r0, r2
 80090be:	f7ff f84e 	bl	800815e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80090c2:	f001 fb2b 	bl	800a71c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80090c6:	4b0d      	ldr	r3, [pc, #52]	@ (80090fc <prvAddNewTaskToReadyList+0xc8>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00e      	beq.n	80090ec <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80090ce:	4b0a      	ldr	r3, [pc, #40]	@ (80090f8 <prvAddNewTaskToReadyList+0xc4>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d8:	429a      	cmp	r2, r3
 80090da:	d207      	bcs.n	80090ec <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80090dc:	4b0b      	ldr	r3, [pc, #44]	@ (800910c <prvAddNewTaskToReadyList+0xd8>)
 80090de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090e2:	601a      	str	r2, [r3, #0]
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090ec:	bf00      	nop
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	2000097c 	.word	0x2000097c
 80090f8:	200008a4 	.word	0x200008a4
 80090fc:	20000988 	.word	0x20000988
 8009100:	20000998 	.word	0x20000998
 8009104:	20000984 	.word	0x20000984
 8009108:	200008a8 	.word	0x200008a8
 800910c:	e000ed04 	.word	0xe000ed04

08009110 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009118:	2300      	movs	r3, #0
 800911a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d018      	beq.n	8009154 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009122:	4b14      	ldr	r3, [pc, #80]	@ (8009174 <vTaskDelay+0x64>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00b      	beq.n	8009142 <vTaskDelay+0x32>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	60bb      	str	r3, [r7, #8]
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	e7fd      	b.n	800913e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009142:	f000 f869 	bl	8009218 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009146:	2100      	movs	r1, #0
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fdff 	bl	8009d4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800914e:	f000 f871 	bl	8009234 <xTaskResumeAll>
 8009152:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d107      	bne.n	800916a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800915a:	4b07      	ldr	r3, [pc, #28]	@ (8009178 <vTaskDelay+0x68>)
 800915c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800916a:	bf00      	nop
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	200009a4 	.word	0x200009a4
 8009178:	e000ed04 	.word	0xe000ed04

0800917c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009182:	4b1f      	ldr	r3, [pc, #124]	@ (8009200 <vTaskStartScheduler+0x84>)
 8009184:	9301      	str	r3, [sp, #4]
 8009186:	2300      	movs	r3, #0
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	2300      	movs	r3, #0
 800918c:	2282      	movs	r2, #130	@ 0x82
 800918e:	491d      	ldr	r1, [pc, #116]	@ (8009204 <vTaskStartScheduler+0x88>)
 8009190:	481d      	ldr	r0, [pc, #116]	@ (8009208 <vTaskStartScheduler+0x8c>)
 8009192:	f7ff fe7d 	bl	8008e90 <xTaskCreate>
 8009196:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d102      	bne.n	80091a4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800919e:	f000 fe3b 	bl	8009e18 <xTimerCreateTimerTask>
 80091a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d116      	bne.n	80091d8 <vTaskStartScheduler+0x5c>
	__asm volatile
 80091aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	60bb      	str	r3, [r7, #8]
}
 80091bc:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80091be:	4b13      	ldr	r3, [pc, #76]	@ (800920c <vTaskStartScheduler+0x90>)
 80091c0:	f04f 32ff 	mov.w	r2, #4294967295
 80091c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091c6:	4b12      	ldr	r3, [pc, #72]	@ (8009210 <vTaskStartScheduler+0x94>)
 80091c8:	2201      	movs	r2, #1
 80091ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091cc:	4b11      	ldr	r3, [pc, #68]	@ (8009214 <vTaskStartScheduler+0x98>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091d2:	f001 f9cd 	bl	800a570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091d6:	e00f      	b.n	80091f8 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091de:	d10b      	bne.n	80091f8 <vTaskStartScheduler+0x7c>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	607b      	str	r3, [r7, #4]
}
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
 80091f6:	e7fd      	b.n	80091f4 <vTaskStartScheduler+0x78>
}
 80091f8:	bf00      	nop
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	200009a0 	.word	0x200009a0
 8009204:	0800e318 	.word	0x0800e318
 8009208:	08009835 	.word	0x08009835
 800920c:	2000099c 	.word	0x2000099c
 8009210:	20000988 	.word	0x20000988
 8009214:	20000980 	.word	0x20000980

08009218 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009218:	b480      	push	{r7}
 800921a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800921c:	4b04      	ldr	r3, [pc, #16]	@ (8009230 <vTaskSuspendAll+0x18>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3301      	adds	r3, #1
 8009222:	4a03      	ldr	r2, [pc, #12]	@ (8009230 <vTaskSuspendAll+0x18>)
 8009224:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009226:	bf00      	nop
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	200009a4 	.word	0x200009a4

08009234 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800923a:	2300      	movs	r3, #0
 800923c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800923e:	2300      	movs	r3, #0
 8009240:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009242:	4b42      	ldr	r3, [pc, #264]	@ (800934c <xTaskResumeAll+0x118>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10b      	bne.n	8009262 <xTaskResumeAll+0x2e>
	__asm volatile
 800924a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	603b      	str	r3, [r7, #0]
}
 800925c:	bf00      	nop
 800925e:	bf00      	nop
 8009260:	e7fd      	b.n	800925e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009262:	f001 fa29 	bl	800a6b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009266:	4b39      	ldr	r3, [pc, #228]	@ (800934c <xTaskResumeAll+0x118>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3b01      	subs	r3, #1
 800926c:	4a37      	ldr	r2, [pc, #220]	@ (800934c <xTaskResumeAll+0x118>)
 800926e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009270:	4b36      	ldr	r3, [pc, #216]	@ (800934c <xTaskResumeAll+0x118>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d161      	bne.n	800933c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009278:	4b35      	ldr	r3, [pc, #212]	@ (8009350 <xTaskResumeAll+0x11c>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d05d      	beq.n	800933c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009280:	e02e      	b.n	80092e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009282:	4b34      	ldr	r3, [pc, #208]	@ (8009354 <xTaskResumeAll+0x120>)
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3318      	adds	r3, #24
 800928e:	4618      	mov	r0, r3
 8009290:	f7fe ffc2 	bl	8008218 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	3304      	adds	r3, #4
 8009298:	4618      	mov	r0, r3
 800929a:	f7fe ffbd 	bl	8008218 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a2:	2201      	movs	r2, #1
 80092a4:	409a      	lsls	r2, r3
 80092a6:	4b2c      	ldr	r3, [pc, #176]	@ (8009358 <xTaskResumeAll+0x124>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	4a2a      	ldr	r2, [pc, #168]	@ (8009358 <xTaskResumeAll+0x124>)
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092b4:	4613      	mov	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	4413      	add	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4a27      	ldr	r2, [pc, #156]	@ (800935c <xTaskResumeAll+0x128>)
 80092be:	441a      	add	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	3304      	adds	r3, #4
 80092c4:	4619      	mov	r1, r3
 80092c6:	4610      	mov	r0, r2
 80092c8:	f7fe ff49 	bl	800815e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092d0:	4b23      	ldr	r3, [pc, #140]	@ (8009360 <xTaskResumeAll+0x12c>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d302      	bcc.n	80092e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80092da:	4b22      	ldr	r3, [pc, #136]	@ (8009364 <xTaskResumeAll+0x130>)
 80092dc:	2201      	movs	r2, #1
 80092de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009354 <xTaskResumeAll+0x120>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1cc      	bne.n	8009282 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092ee:	f000 fb37 	bl	8009960 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80092f2:	4b1d      	ldr	r3, [pc, #116]	@ (8009368 <xTaskResumeAll+0x134>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d010      	beq.n	8009320 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092fe:	f000 f847 	bl	8009390 <xTaskIncrementTick>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009308:	4b16      	ldr	r3, [pc, #88]	@ (8009364 <xTaskResumeAll+0x130>)
 800930a:	2201      	movs	r2, #1
 800930c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3b01      	subs	r3, #1
 8009312:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1f1      	bne.n	80092fe <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800931a:	4b13      	ldr	r3, [pc, #76]	@ (8009368 <xTaskResumeAll+0x134>)
 800931c:	2200      	movs	r2, #0
 800931e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009320:	4b10      	ldr	r3, [pc, #64]	@ (8009364 <xTaskResumeAll+0x130>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d009      	beq.n	800933c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009328:	2301      	movs	r3, #1
 800932a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800932c:	4b0f      	ldr	r3, [pc, #60]	@ (800936c <xTaskResumeAll+0x138>)
 800932e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800933c:	f001 f9ee 	bl	800a71c <vPortExitCritical>

	return xAlreadyYielded;
 8009340:	68bb      	ldr	r3, [r7, #8]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	200009a4 	.word	0x200009a4
 8009350:	2000097c 	.word	0x2000097c
 8009354:	2000093c 	.word	0x2000093c
 8009358:	20000984 	.word	0x20000984
 800935c:	200008a8 	.word	0x200008a8
 8009360:	200008a4 	.word	0x200008a4
 8009364:	20000990 	.word	0x20000990
 8009368:	2000098c 	.word	0x2000098c
 800936c:	e000ed04 	.word	0xe000ed04

08009370 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009376:	4b05      	ldr	r3, [pc, #20]	@ (800938c <xTaskGetTickCount+0x1c>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800937c:	687b      	ldr	r3, [r7, #4]
}
 800937e:	4618      	mov	r0, r3
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	20000980 	.word	0x20000980

08009390 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009396:	2300      	movs	r3, #0
 8009398:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800939a:	4b4f      	ldr	r3, [pc, #316]	@ (80094d8 <xTaskIncrementTick+0x148>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f040 8089 	bne.w	80094b6 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093a4:	4b4d      	ldr	r3, [pc, #308]	@ (80094dc <xTaskIncrementTick+0x14c>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3301      	adds	r3, #1
 80093aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093ac:	4a4b      	ldr	r2, [pc, #300]	@ (80094dc <xTaskIncrementTick+0x14c>)
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d121      	bne.n	80093fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80093b8:	4b49      	ldr	r3, [pc, #292]	@ (80094e0 <xTaskIncrementTick+0x150>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00b      	beq.n	80093da <xTaskIncrementTick+0x4a>
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	603b      	str	r3, [r7, #0]
}
 80093d4:	bf00      	nop
 80093d6:	bf00      	nop
 80093d8:	e7fd      	b.n	80093d6 <xTaskIncrementTick+0x46>
 80093da:	4b41      	ldr	r3, [pc, #260]	@ (80094e0 <xTaskIncrementTick+0x150>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	4b40      	ldr	r3, [pc, #256]	@ (80094e4 <xTaskIncrementTick+0x154>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a3e      	ldr	r2, [pc, #248]	@ (80094e0 <xTaskIncrementTick+0x150>)
 80093e6:	6013      	str	r3, [r2, #0]
 80093e8:	4a3e      	ldr	r2, [pc, #248]	@ (80094e4 <xTaskIncrementTick+0x154>)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	4b3e      	ldr	r3, [pc, #248]	@ (80094e8 <xTaskIncrementTick+0x158>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	3301      	adds	r3, #1
 80093f4:	4a3c      	ldr	r2, [pc, #240]	@ (80094e8 <xTaskIncrementTick+0x158>)
 80093f6:	6013      	str	r3, [r2, #0]
 80093f8:	f000 fab2 	bl	8009960 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093fc:	4b3b      	ldr	r3, [pc, #236]	@ (80094ec <xTaskIncrementTick+0x15c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	429a      	cmp	r2, r3
 8009404:	d348      	bcc.n	8009498 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009406:	4b36      	ldr	r3, [pc, #216]	@ (80094e0 <xTaskIncrementTick+0x150>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d104      	bne.n	800941a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009410:	4b36      	ldr	r3, [pc, #216]	@ (80094ec <xTaskIncrementTick+0x15c>)
 8009412:	f04f 32ff 	mov.w	r2, #4294967295
 8009416:	601a      	str	r2, [r3, #0]
					break;
 8009418:	e03e      	b.n	8009498 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800941a:	4b31      	ldr	r3, [pc, #196]	@ (80094e0 <xTaskIncrementTick+0x150>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	429a      	cmp	r2, r3
 8009430:	d203      	bcs.n	800943a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009432:	4a2e      	ldr	r2, [pc, #184]	@ (80094ec <xTaskIncrementTick+0x15c>)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009438:	e02e      	b.n	8009498 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	3304      	adds	r3, #4
 800943e:	4618      	mov	r0, r3
 8009440:	f7fe feea 	bl	8008218 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009448:	2b00      	cmp	r3, #0
 800944a:	d004      	beq.n	8009456 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	3318      	adds	r3, #24
 8009450:	4618      	mov	r0, r3
 8009452:	f7fe fee1 	bl	8008218 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945a:	2201      	movs	r2, #1
 800945c:	409a      	lsls	r2, r3
 800945e:	4b24      	ldr	r3, [pc, #144]	@ (80094f0 <xTaskIncrementTick+0x160>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4313      	orrs	r3, r2
 8009464:	4a22      	ldr	r2, [pc, #136]	@ (80094f0 <xTaskIncrementTick+0x160>)
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4a1f      	ldr	r2, [pc, #124]	@ (80094f4 <xTaskIncrementTick+0x164>)
 8009476:	441a      	add	r2, r3
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	3304      	adds	r3, #4
 800947c:	4619      	mov	r1, r3
 800947e:	4610      	mov	r0, r2
 8009480:	f7fe fe6d 	bl	800815e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009488:	4b1b      	ldr	r3, [pc, #108]	@ (80094f8 <xTaskIncrementTick+0x168>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948e:	429a      	cmp	r2, r3
 8009490:	d3b9      	bcc.n	8009406 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009492:	2301      	movs	r3, #1
 8009494:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009496:	e7b6      	b.n	8009406 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009498:	4b17      	ldr	r3, [pc, #92]	@ (80094f8 <xTaskIncrementTick+0x168>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800949e:	4915      	ldr	r1, [pc, #84]	@ (80094f4 <xTaskIncrementTick+0x164>)
 80094a0:	4613      	mov	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d907      	bls.n	80094c0 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80094b0:	2301      	movs	r3, #1
 80094b2:	617b      	str	r3, [r7, #20]
 80094b4:	e004      	b.n	80094c0 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80094b6:	4b11      	ldr	r3, [pc, #68]	@ (80094fc <xTaskIncrementTick+0x16c>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3301      	adds	r3, #1
 80094bc:	4a0f      	ldr	r2, [pc, #60]	@ (80094fc <xTaskIncrementTick+0x16c>)
 80094be:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80094c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009500 <xTaskIncrementTick+0x170>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d001      	beq.n	80094cc <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80094c8:	2301      	movs	r3, #1
 80094ca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80094cc:	697b      	ldr	r3, [r7, #20]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	200009a4 	.word	0x200009a4
 80094dc:	20000980 	.word	0x20000980
 80094e0:	20000934 	.word	0x20000934
 80094e4:	20000938 	.word	0x20000938
 80094e8:	20000994 	.word	0x20000994
 80094ec:	2000099c 	.word	0x2000099c
 80094f0:	20000984 	.word	0x20000984
 80094f4:	200008a8 	.word	0x200008a8
 80094f8:	200008a4 	.word	0x200008a4
 80094fc:	2000098c 	.word	0x2000098c
 8009500:	20000990 	.word	0x20000990

08009504 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009504:	b480      	push	{r7}
 8009506:	b087      	sub	sp, #28
 8009508:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800950a:	4b27      	ldr	r3, [pc, #156]	@ (80095a8 <vTaskSwitchContext+0xa4>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d003      	beq.n	800951a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009512:	4b26      	ldr	r3, [pc, #152]	@ (80095ac <vTaskSwitchContext+0xa8>)
 8009514:	2201      	movs	r2, #1
 8009516:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009518:	e040      	b.n	800959c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800951a:	4b24      	ldr	r3, [pc, #144]	@ (80095ac <vTaskSwitchContext+0xa8>)
 800951c:	2200      	movs	r2, #0
 800951e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009520:	4b23      	ldr	r3, [pc, #140]	@ (80095b0 <vTaskSwitchContext+0xac>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	fab3 f383 	clz	r3, r3
 800952c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800952e:	7afb      	ldrb	r3, [r7, #11]
 8009530:	f1c3 031f 	rsb	r3, r3, #31
 8009534:	617b      	str	r3, [r7, #20]
 8009536:	491f      	ldr	r1, [pc, #124]	@ (80095b4 <vTaskSwitchContext+0xb0>)
 8009538:	697a      	ldr	r2, [r7, #20]
 800953a:	4613      	mov	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	440b      	add	r3, r1
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10b      	bne.n	8009562 <vTaskSwitchContext+0x5e>
	__asm volatile
 800954a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800954e:	f383 8811 	msr	BASEPRI, r3
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	607b      	str	r3, [r7, #4]
}
 800955c:	bf00      	nop
 800955e:	bf00      	nop
 8009560:	e7fd      	b.n	800955e <vTaskSwitchContext+0x5a>
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	4613      	mov	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4413      	add	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4a11      	ldr	r2, [pc, #68]	@ (80095b4 <vTaskSwitchContext+0xb0>)
 800956e:	4413      	add	r3, r2
 8009570:	613b      	str	r3, [r7, #16]
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	685a      	ldr	r2, [r3, #4]
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	605a      	str	r2, [r3, #4]
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	685a      	ldr	r2, [r3, #4]
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	3308      	adds	r3, #8
 8009584:	429a      	cmp	r2, r3
 8009586:	d104      	bne.n	8009592 <vTaskSwitchContext+0x8e>
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	605a      	str	r2, [r3, #4]
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	4a07      	ldr	r2, [pc, #28]	@ (80095b8 <vTaskSwitchContext+0xb4>)
 800959a:	6013      	str	r3, [r2, #0]
}
 800959c:	bf00      	nop
 800959e:	371c      	adds	r7, #28
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	200009a4 	.word	0x200009a4
 80095ac:	20000990 	.word	0x20000990
 80095b0:	20000984 	.word	0x20000984
 80095b4:	200008a8 	.word	0x200008a8
 80095b8:	200008a4 	.word	0x200008a4

080095bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10b      	bne.n	80095e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80095cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	60fb      	str	r3, [r7, #12]
}
 80095de:	bf00      	nop
 80095e0:	bf00      	nop
 80095e2:	e7fd      	b.n	80095e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095e4:	4b07      	ldr	r3, [pc, #28]	@ (8009604 <vTaskPlaceOnEventList+0x48>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3318      	adds	r3, #24
 80095ea:	4619      	mov	r1, r3
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7fe fdda 	bl	80081a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095f2:	2101      	movs	r1, #1
 80095f4:	6838      	ldr	r0, [r7, #0]
 80095f6:	f000 fba9 	bl	8009d4c <prvAddCurrentTaskToDelayedList>
}
 80095fa:	bf00      	nop
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	200008a4 	.word	0x200008a4

08009608 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10b      	bne.n	8009632 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800961a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800961e:	f383 8811 	msr	BASEPRI, r3
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	617b      	str	r3, [r7, #20]
}
 800962c:	bf00      	nop
 800962e:	bf00      	nop
 8009630:	e7fd      	b.n	800962e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009632:	4b0a      	ldr	r3, [pc, #40]	@ (800965c <vTaskPlaceOnEventListRestricted+0x54>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	3318      	adds	r3, #24
 8009638:	4619      	mov	r1, r3
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f7fe fd8f 	bl	800815e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d002      	beq.n	800964c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009646:	f04f 33ff 	mov.w	r3, #4294967295
 800964a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800964c:	6879      	ldr	r1, [r7, #4]
 800964e:	68b8      	ldr	r0, [r7, #8]
 8009650:	f000 fb7c 	bl	8009d4c <prvAddCurrentTaskToDelayedList>
	}
 8009654:	bf00      	nop
 8009656:	3718      	adds	r7, #24
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	200008a4 	.word	0x200008a4

08009660 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d10b      	bne.n	800968e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800967a:	f383 8811 	msr	BASEPRI, r3
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f3bf 8f4f 	dsb	sy
 8009686:	60fb      	str	r3, [r7, #12]
}
 8009688:	bf00      	nop
 800968a:	bf00      	nop
 800968c:	e7fd      	b.n	800968a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	3318      	adds	r3, #24
 8009692:	4618      	mov	r0, r3
 8009694:	f7fe fdc0 	bl	8008218 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009698:	4b1d      	ldr	r3, [pc, #116]	@ (8009710 <xTaskRemoveFromEventList+0xb0>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d11c      	bne.n	80096da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	3304      	adds	r3, #4
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7fe fdb7 	bl	8008218 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ae:	2201      	movs	r2, #1
 80096b0:	409a      	lsls	r2, r3
 80096b2:	4b18      	ldr	r3, [pc, #96]	@ (8009714 <xTaskRemoveFromEventList+0xb4>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	4a16      	ldr	r2, [pc, #88]	@ (8009714 <xTaskRemoveFromEventList+0xb4>)
 80096ba:	6013      	str	r3, [r2, #0]
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096c0:	4613      	mov	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4a13      	ldr	r2, [pc, #76]	@ (8009718 <xTaskRemoveFromEventList+0xb8>)
 80096ca:	441a      	add	r2, r3
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	3304      	adds	r3, #4
 80096d0:	4619      	mov	r1, r3
 80096d2:	4610      	mov	r0, r2
 80096d4:	f7fe fd43 	bl	800815e <vListInsertEnd>
 80096d8:	e005      	b.n	80096e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	3318      	adds	r3, #24
 80096de:	4619      	mov	r1, r3
 80096e0:	480e      	ldr	r0, [pc, #56]	@ (800971c <xTaskRemoveFromEventList+0xbc>)
 80096e2:	f7fe fd3c 	bl	800815e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009720 <xTaskRemoveFromEventList+0xc0>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d905      	bls.n	8009700 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80096f4:	2301      	movs	r3, #1
 80096f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80096f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009724 <xTaskRemoveFromEventList+0xc4>)
 80096fa:	2201      	movs	r2, #1
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	e001      	b.n	8009704 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009700:	2300      	movs	r3, #0
 8009702:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009704:	697b      	ldr	r3, [r7, #20]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	200009a4 	.word	0x200009a4
 8009714:	20000984 	.word	0x20000984
 8009718:	200008a8 	.word	0x200008a8
 800971c:	2000093c 	.word	0x2000093c
 8009720:	200008a4 	.word	0x200008a4
 8009724:	20000990 	.word	0x20000990

08009728 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009730:	4b06      	ldr	r3, [pc, #24]	@ (800974c <vTaskInternalSetTimeOutState+0x24>)
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009738:	4b05      	ldr	r3, [pc, #20]	@ (8009750 <vTaskInternalSetTimeOutState+0x28>)
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	605a      	str	r2, [r3, #4]
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	20000994 	.word	0x20000994
 8009750:	20000980 	.word	0x20000980

08009754 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b088      	sub	sp, #32
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10b      	bne.n	800977c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	613b      	str	r3, [r7, #16]
}
 8009776:	bf00      	nop
 8009778:	bf00      	nop
 800977a:	e7fd      	b.n	8009778 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10b      	bne.n	800979a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009786:	f383 8811 	msr	BASEPRI, r3
 800978a:	f3bf 8f6f 	isb	sy
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	60fb      	str	r3, [r7, #12]
}
 8009794:	bf00      	nop
 8009796:	bf00      	nop
 8009798:	e7fd      	b.n	8009796 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800979a:	f000 ff8d 	bl	800a6b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800979e:	4b1d      	ldr	r3, [pc, #116]	@ (8009814 <xTaskCheckForTimeOut+0xc0>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	69ba      	ldr	r2, [r7, #24]
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b6:	d102      	bne.n	80097be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80097b8:	2300      	movs	r3, #0
 80097ba:	61fb      	str	r3, [r7, #28]
 80097bc:	e023      	b.n	8009806 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	4b15      	ldr	r3, [pc, #84]	@ (8009818 <xTaskCheckForTimeOut+0xc4>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d007      	beq.n	80097da <xTaskCheckForTimeOut+0x86>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	69ba      	ldr	r2, [r7, #24]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d302      	bcc.n	80097da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80097d4:	2301      	movs	r3, #1
 80097d6:	61fb      	str	r3, [r7, #28]
 80097d8:	e015      	b.n	8009806 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d20b      	bcs.n	80097fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	1ad2      	subs	r2, r2, r3
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7ff ff99 	bl	8009728 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80097f6:	2300      	movs	r3, #0
 80097f8:	61fb      	str	r3, [r7, #28]
 80097fa:	e004      	b.n	8009806 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	2200      	movs	r2, #0
 8009800:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009802:	2301      	movs	r3, #1
 8009804:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009806:	f000 ff89 	bl	800a71c <vPortExitCritical>

	return xReturn;
 800980a:	69fb      	ldr	r3, [r7, #28]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3720      	adds	r7, #32
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	20000980 	.word	0x20000980
 8009818:	20000994 	.word	0x20000994

0800981c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800981c:	b480      	push	{r7}
 800981e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009820:	4b03      	ldr	r3, [pc, #12]	@ (8009830 <vTaskMissedYield+0x14>)
 8009822:	2201      	movs	r2, #1
 8009824:	601a      	str	r2, [r3, #0]
}
 8009826:	bf00      	nop
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	20000990 	.word	0x20000990

08009834 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800983c:	f000 f852 	bl	80098e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009840:	4b06      	ldr	r3, [pc, #24]	@ (800985c <prvIdleTask+0x28>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d9f9      	bls.n	800983c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009848:	4b05      	ldr	r3, [pc, #20]	@ (8009860 <prvIdleTask+0x2c>)
 800984a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009858:	e7f0      	b.n	800983c <prvIdleTask+0x8>
 800985a:	bf00      	nop
 800985c:	200008a8 	.word	0x200008a8
 8009860:	e000ed04 	.word	0xe000ed04

08009864 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800986a:	2300      	movs	r3, #0
 800986c:	607b      	str	r3, [r7, #4]
 800986e:	e00c      	b.n	800988a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	4613      	mov	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	4413      	add	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4a12      	ldr	r2, [pc, #72]	@ (80098c4 <prvInitialiseTaskLists+0x60>)
 800987c:	4413      	add	r3, r2
 800987e:	4618      	mov	r0, r3
 8009880:	f7fe fc40 	bl	8008104 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	3301      	adds	r3, #1
 8009888:	607b      	str	r3, [r7, #4]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b04      	cmp	r3, #4
 800988e:	d9ef      	bls.n	8009870 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009890:	480d      	ldr	r0, [pc, #52]	@ (80098c8 <prvInitialiseTaskLists+0x64>)
 8009892:	f7fe fc37 	bl	8008104 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009896:	480d      	ldr	r0, [pc, #52]	@ (80098cc <prvInitialiseTaskLists+0x68>)
 8009898:	f7fe fc34 	bl	8008104 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800989c:	480c      	ldr	r0, [pc, #48]	@ (80098d0 <prvInitialiseTaskLists+0x6c>)
 800989e:	f7fe fc31 	bl	8008104 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80098a2:	480c      	ldr	r0, [pc, #48]	@ (80098d4 <prvInitialiseTaskLists+0x70>)
 80098a4:	f7fe fc2e 	bl	8008104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098a8:	480b      	ldr	r0, [pc, #44]	@ (80098d8 <prvInitialiseTaskLists+0x74>)
 80098aa:	f7fe fc2b 	bl	8008104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098ae:	4b0b      	ldr	r3, [pc, #44]	@ (80098dc <prvInitialiseTaskLists+0x78>)
 80098b0:	4a05      	ldr	r2, [pc, #20]	@ (80098c8 <prvInitialiseTaskLists+0x64>)
 80098b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098b4:	4b0a      	ldr	r3, [pc, #40]	@ (80098e0 <prvInitialiseTaskLists+0x7c>)
 80098b6:	4a05      	ldr	r2, [pc, #20]	@ (80098cc <prvInitialiseTaskLists+0x68>)
 80098b8:	601a      	str	r2, [r3, #0]
}
 80098ba:	bf00      	nop
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	200008a8 	.word	0x200008a8
 80098c8:	2000090c 	.word	0x2000090c
 80098cc:	20000920 	.word	0x20000920
 80098d0:	2000093c 	.word	0x2000093c
 80098d4:	20000950 	.word	0x20000950
 80098d8:	20000968 	.word	0x20000968
 80098dc:	20000934 	.word	0x20000934
 80098e0:	20000938 	.word	0x20000938

080098e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098ea:	e019      	b.n	8009920 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098ec:	f000 fee4 	bl	800a6b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098f0:	4b10      	ldr	r3, [pc, #64]	@ (8009934 <prvCheckTasksWaitingTermination+0x50>)
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	3304      	adds	r3, #4
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7fe fc8b 	bl	8008218 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009902:	4b0d      	ldr	r3, [pc, #52]	@ (8009938 <prvCheckTasksWaitingTermination+0x54>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3b01      	subs	r3, #1
 8009908:	4a0b      	ldr	r2, [pc, #44]	@ (8009938 <prvCheckTasksWaitingTermination+0x54>)
 800990a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800990c:	4b0b      	ldr	r3, [pc, #44]	@ (800993c <prvCheckTasksWaitingTermination+0x58>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	3b01      	subs	r3, #1
 8009912:	4a0a      	ldr	r2, [pc, #40]	@ (800993c <prvCheckTasksWaitingTermination+0x58>)
 8009914:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009916:	f000 ff01 	bl	800a71c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f810 	bl	8009940 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009920:	4b06      	ldr	r3, [pc, #24]	@ (800993c <prvCheckTasksWaitingTermination+0x58>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1e1      	bne.n	80098ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009928:	bf00      	nop
 800992a:	bf00      	nop
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20000950 	.word	0x20000950
 8009938:	2000097c 	.word	0x2000097c
 800993c:	20000964 	.word	0x20000964

08009940 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800994c:	4618      	mov	r0, r3
 800994e:	f001 f89d 	bl	800aa8c <vPortFree>
			vPortFree( pxTCB );
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f001 f89a 	bl	800aa8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009958:	bf00      	nop
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009966:	4b0c      	ldr	r3, [pc, #48]	@ (8009998 <prvResetNextTaskUnblockTime+0x38>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d104      	bne.n	800997a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009970:	4b0a      	ldr	r3, [pc, #40]	@ (800999c <prvResetNextTaskUnblockTime+0x3c>)
 8009972:	f04f 32ff 	mov.w	r2, #4294967295
 8009976:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009978:	e008      	b.n	800998c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800997a:	4b07      	ldr	r3, [pc, #28]	@ (8009998 <prvResetNextTaskUnblockTime+0x38>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	4a04      	ldr	r2, [pc, #16]	@ (800999c <prvResetNextTaskUnblockTime+0x3c>)
 800998a:	6013      	str	r3, [r2, #0]
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr
 8009998:	20000934 	.word	0x20000934
 800999c:	2000099c 	.word	0x2000099c

080099a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80099a6:	4b0b      	ldr	r3, [pc, #44]	@ (80099d4 <xTaskGetSchedulerState+0x34>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d102      	bne.n	80099b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099ae:	2301      	movs	r3, #1
 80099b0:	607b      	str	r3, [r7, #4]
 80099b2:	e008      	b.n	80099c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099b4:	4b08      	ldr	r3, [pc, #32]	@ (80099d8 <xTaskGetSchedulerState+0x38>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d102      	bne.n	80099c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80099bc:	2302      	movs	r3, #2
 80099be:	607b      	str	r3, [r7, #4]
 80099c0:	e001      	b.n	80099c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099c2:	2300      	movs	r3, #0
 80099c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80099c6:	687b      	ldr	r3, [r7, #4]
	}
 80099c8:	4618      	mov	r0, r3
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	20000988 	.word	0x20000988
 80099d8:	200009a4 	.word	0x200009a4

080099dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d069      	beq.n	8009ac6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099f6:	4b36      	ldr	r3, [pc, #216]	@ (8009ad0 <xTaskPriorityInherit+0xf4>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d259      	bcs.n	8009ab4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	db06      	blt.n	8009a16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a08:	4b31      	ldr	r3, [pc, #196]	@ (8009ad0 <xTaskPriorityInherit+0xf4>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a0e:	f1c3 0205 	rsb	r2, r3, #5
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	6959      	ldr	r1, [r3, #20]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a1e:	4613      	mov	r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	4413      	add	r3, r2
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4a2b      	ldr	r2, [pc, #172]	@ (8009ad4 <xTaskPriorityInherit+0xf8>)
 8009a28:	4413      	add	r3, r2
 8009a2a:	4299      	cmp	r1, r3
 8009a2c:	d13a      	bne.n	8009aa4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	3304      	adds	r3, #4
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fe fbf0 	bl	8008218 <uxListRemove>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d115      	bne.n	8009a6a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a42:	4924      	ldr	r1, [pc, #144]	@ (8009ad4 <xTaskPriorityInherit+0xf8>)
 8009a44:	4613      	mov	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	440b      	add	r3, r1
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10a      	bne.n	8009a6a <xTaskPriorityInherit+0x8e>
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a58:	2201      	movs	r2, #1
 8009a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a5e:	43da      	mvns	r2, r3
 8009a60:	4b1d      	ldr	r3, [pc, #116]	@ (8009ad8 <xTaskPriorityInherit+0xfc>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4013      	ands	r3, r2
 8009a66:	4a1c      	ldr	r2, [pc, #112]	@ (8009ad8 <xTaskPriorityInherit+0xfc>)
 8009a68:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a6a:	4b19      	ldr	r3, [pc, #100]	@ (8009ad0 <xTaskPriorityInherit+0xf4>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a78:	2201      	movs	r2, #1
 8009a7a:	409a      	lsls	r2, r3
 8009a7c:	4b16      	ldr	r3, [pc, #88]	@ (8009ad8 <xTaskPriorityInherit+0xfc>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	4a15      	ldr	r2, [pc, #84]	@ (8009ad8 <xTaskPriorityInherit+0xfc>)
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4413      	add	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4a10      	ldr	r2, [pc, #64]	@ (8009ad4 <xTaskPriorityInherit+0xf8>)
 8009a94:	441a      	add	r2, r3
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	3304      	adds	r3, #4
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	f7fe fb5e 	bl	800815e <vListInsertEnd>
 8009aa2:	e004      	b.n	8009aae <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8009ad0 <xTaskPriorityInherit+0xf4>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	60fb      	str	r3, [r7, #12]
 8009ab2:	e008      	b.n	8009ac6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ab8:	4b05      	ldr	r3, [pc, #20]	@ (8009ad0 <xTaskPriorityInherit+0xf4>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d201      	bcs.n	8009ac6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
	}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	200008a4 	.word	0x200008a4
 8009ad4:	200008a8 	.word	0x200008a8
 8009ad8:	20000984 	.word	0x20000984

08009adc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d070      	beq.n	8009bd4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009af2:	4b3b      	ldr	r3, [pc, #236]	@ (8009be0 <xTaskPriorityDisinherit+0x104>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d00b      	beq.n	8009b14 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	60fb      	str	r3, [r7, #12]
}
 8009b0e:	bf00      	nop
 8009b10:	bf00      	nop
 8009b12:	e7fd      	b.n	8009b10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10b      	bne.n	8009b34 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	60bb      	str	r3, [r7, #8]
}
 8009b2e:	bf00      	nop
 8009b30:	bf00      	nop
 8009b32:	e7fd      	b.n	8009b30 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b38:	1e5a      	subs	r2, r3, #1
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d044      	beq.n	8009bd4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d140      	bne.n	8009bd4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	3304      	adds	r3, #4
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fe fb5e 	bl	8008218 <uxListRemove>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d115      	bne.n	8009b8e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b66:	491f      	ldr	r1, [pc, #124]	@ (8009be4 <xTaskPriorityDisinherit+0x108>)
 8009b68:	4613      	mov	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	4413      	add	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	440b      	add	r3, r1
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10a      	bne.n	8009b8e <xTaskPriorityDisinherit+0xb2>
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b82:	43da      	mvns	r2, r3
 8009b84:	4b18      	ldr	r3, [pc, #96]	@ (8009be8 <xTaskPriorityDisinherit+0x10c>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4013      	ands	r3, r2
 8009b8a:	4a17      	ldr	r2, [pc, #92]	@ (8009be8 <xTaskPriorityDisinherit+0x10c>)
 8009b8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9a:	f1c3 0205 	rsb	r2, r3, #5
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	409a      	lsls	r2, r3
 8009baa:	4b0f      	ldr	r3, [pc, #60]	@ (8009be8 <xTaskPriorityDisinherit+0x10c>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8009be8 <xTaskPriorityDisinherit+0x10c>)
 8009bb2:	6013      	str	r3, [r2, #0]
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bb8:	4613      	mov	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4413      	add	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4a08      	ldr	r2, [pc, #32]	@ (8009be4 <xTaskPriorityDisinherit+0x108>)
 8009bc2:	441a      	add	r2, r3
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	4619      	mov	r1, r3
 8009bca:	4610      	mov	r0, r2
 8009bcc:	f7fe fac7 	bl	800815e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bd4:	697b      	ldr	r3, [r7, #20]
	}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3718      	adds	r7, #24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	200008a4 	.word	0x200008a4
 8009be4:	200008a8 	.word	0x200008a8
 8009be8:	20000984 	.word	0x20000984

08009bec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b088      	sub	sp, #32
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 8085 	beq.w	8009d10 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10b      	bne.n	8009c26 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	60fb      	str	r3, [r7, #12]
}
 8009c20:	bf00      	nop
 8009c22:	bf00      	nop
 8009c24:	e7fd      	b.n	8009c22 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d902      	bls.n	8009c36 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	61fb      	str	r3, [r7, #28]
 8009c34:	e002      	b.n	8009c3c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c3a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c40:	69fa      	ldr	r2, [r7, #28]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d064      	beq.n	8009d10 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d15f      	bne.n	8009d10 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009c50:	4b31      	ldr	r3, [pc, #196]	@ (8009d18 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	69ba      	ldr	r2, [r7, #24]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d10b      	bne.n	8009c72 <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	60bb      	str	r3, [r7, #8]
}
 8009c6c:	bf00      	nop
 8009c6e:	bf00      	nop
 8009c70:	e7fd      	b.n	8009c6e <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c76:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	69fa      	ldr	r2, [r7, #28]
 8009c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	db04      	blt.n	8009c90 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	f1c3 0205 	rsb	r2, r3, #5
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	6959      	ldr	r1, [r3, #20]
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	4613      	mov	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	4413      	add	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8009d1c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8009ca0:	4413      	add	r3, r2
 8009ca2:	4299      	cmp	r1, r3
 8009ca4:	d134      	bne.n	8009d10 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	3304      	adds	r3, #4
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe fab4 	bl	8008218 <uxListRemove>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d115      	bne.n	8009ce2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cba:	4918      	ldr	r1, [pc, #96]	@ (8009d1c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	440b      	add	r3, r1
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10a      	bne.n	8009ce2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd6:	43da      	mvns	r2, r3
 8009cd8:	4b11      	ldr	r3, [pc, #68]	@ (8009d20 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4013      	ands	r3, r2
 8009cde:	4a10      	ldr	r2, [pc, #64]	@ (8009d20 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009ce0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	409a      	lsls	r2, r3
 8009cea:	4b0d      	ldr	r3, [pc, #52]	@ (8009d20 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	4a0b      	ldr	r2, [pc, #44]	@ (8009d20 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009cf2:	6013      	str	r3, [r2, #0]
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4a06      	ldr	r2, [pc, #24]	@ (8009d1c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8009d02:	441a      	add	r2, r3
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	3304      	adds	r3, #4
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4610      	mov	r0, r2
 8009d0c:	f7fe fa27 	bl	800815e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d10:	bf00      	nop
 8009d12:	3720      	adds	r7, #32
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	200008a4 	.word	0x200008a4
 8009d1c:	200008a8 	.word	0x200008a8
 8009d20:	20000984 	.word	0x20000984

08009d24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009d24:	b480      	push	{r7}
 8009d26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009d28:	4b07      	ldr	r3, [pc, #28]	@ (8009d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d004      	beq.n	8009d3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009d30:	4b05      	ldr	r3, [pc, #20]	@ (8009d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d36:	3201      	adds	r2, #1
 8009d38:	64da      	str	r2, [r3, #76]	@ 0x4c
		}

		return pxCurrentTCB;
 8009d3a:	4b03      	ldr	r3, [pc, #12]	@ (8009d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
	}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr
 8009d48:	200008a4 	.word	0x200008a4

08009d4c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d56:	4b29      	ldr	r3, [pc, #164]	@ (8009dfc <prvAddCurrentTaskToDelayedList+0xb0>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d5c:	4b28      	ldr	r3, [pc, #160]	@ (8009e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	3304      	adds	r3, #4
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fe fa58 	bl	8008218 <uxListRemove>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10b      	bne.n	8009d86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009d6e:	4b24      	ldr	r3, [pc, #144]	@ (8009e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d74:	2201      	movs	r2, #1
 8009d76:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7a:	43da      	mvns	r2, r3
 8009d7c:	4b21      	ldr	r3, [pc, #132]	@ (8009e04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4013      	ands	r3, r2
 8009d82:	4a20      	ldr	r2, [pc, #128]	@ (8009e04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009d84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d8c:	d10a      	bne.n	8009da4 <prvAddCurrentTaskToDelayedList+0x58>
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d007      	beq.n	8009da4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d94:	4b1a      	ldr	r3, [pc, #104]	@ (8009e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	3304      	adds	r3, #4
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	481a      	ldr	r0, [pc, #104]	@ (8009e08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009d9e:	f7fe f9de 	bl	800815e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009da2:	e026      	b.n	8009df2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4413      	add	r3, r2
 8009daa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009dac:	4b14      	ldr	r3, [pc, #80]	@ (8009e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68ba      	ldr	r2, [r7, #8]
 8009db2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d209      	bcs.n	8009dd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dbc:	4b13      	ldr	r3, [pc, #76]	@ (8009e0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8009e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4610      	mov	r0, r2
 8009dca:	f7fe f9ec 	bl	80081a6 <vListInsert>
}
 8009dce:	e010      	b.n	8009df2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8009e10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8009e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	3304      	adds	r3, #4
 8009dda:	4619      	mov	r1, r3
 8009ddc:	4610      	mov	r0, r2
 8009dde:	f7fe f9e2 	bl	80081a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009de2:	4b0c      	ldr	r3, [pc, #48]	@ (8009e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d202      	bcs.n	8009df2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009dec:	4a09      	ldr	r2, [pc, #36]	@ (8009e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	6013      	str	r3, [r2, #0]
}
 8009df2:	bf00      	nop
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20000980 	.word	0x20000980
 8009e00:	200008a4 	.word	0x200008a4
 8009e04:	20000984 	.word	0x20000984
 8009e08:	20000968 	.word	0x20000968
 8009e0c:	20000938 	.word	0x20000938
 8009e10:	20000934 	.word	0x20000934
 8009e14:	2000099c 	.word	0x2000099c

08009e18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009e22:	f000 fae1 	bl	800a3e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009e26:	4b12      	ldr	r3, [pc, #72]	@ (8009e70 <xTimerCreateTimerTask+0x58>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00b      	beq.n	8009e46 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8009e2e:	4b11      	ldr	r3, [pc, #68]	@ (8009e74 <xTimerCreateTimerTask+0x5c>)
 8009e30:	9301      	str	r3, [sp, #4]
 8009e32:	2302      	movs	r3, #2
 8009e34:	9300      	str	r3, [sp, #0]
 8009e36:	2300      	movs	r3, #0
 8009e38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8009e3c:	490e      	ldr	r1, [pc, #56]	@ (8009e78 <xTimerCreateTimerTask+0x60>)
 8009e3e:	480f      	ldr	r0, [pc, #60]	@ (8009e7c <xTimerCreateTimerTask+0x64>)
 8009e40:	f7ff f826 	bl	8008e90 <xTaskCreate>
 8009e44:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10b      	bne.n	8009e64 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 8009e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e50:	f383 8811 	msr	BASEPRI, r3
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	603b      	str	r3, [r7, #0]
}
 8009e5e:	bf00      	nop
 8009e60:	bf00      	nop
 8009e62:	e7fd      	b.n	8009e60 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8009e64:	687b      	ldr	r3, [r7, #4]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	200009d8 	.word	0x200009d8
 8009e74:	200009dc 	.word	0x200009dc
 8009e78:	0800e320 	.word	0x0800e320
 8009e7c:	08009fb9 	.word	0x08009fb9

08009e80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b08a      	sub	sp, #40	@ 0x28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
 8009e8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10b      	bne.n	8009eb0 <xTimerGenericCommand+0x30>
	__asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	623b      	str	r3, [r7, #32]
}
 8009eaa:	bf00      	nop
 8009eac:	bf00      	nop
 8009eae:	e7fd      	b.n	8009eac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009eb0:	4b19      	ldr	r3, [pc, #100]	@ (8009f18 <xTimerGenericCommand+0x98>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d02a      	beq.n	8009f0e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	2b05      	cmp	r3, #5
 8009ec8:	dc18      	bgt.n	8009efc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009eca:	f7ff fd69 	bl	80099a0 <xTaskGetSchedulerState>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d109      	bne.n	8009ee8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ed4:	4b10      	ldr	r3, [pc, #64]	@ (8009f18 <xTimerGenericCommand+0x98>)
 8009ed6:	6818      	ldr	r0, [r3, #0]
 8009ed8:	f107 0114 	add.w	r1, r7, #20
 8009edc:	2300      	movs	r3, #0
 8009ede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ee0:	f7fe fac0 	bl	8008464 <xQueueGenericSend>
 8009ee4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ee6:	e012      	b.n	8009f0e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8009f18 <xTimerGenericCommand+0x98>)
 8009eea:	6818      	ldr	r0, [r3, #0]
 8009eec:	f107 0114 	add.w	r1, r7, #20
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f7fe fab6 	bl	8008464 <xQueueGenericSend>
 8009ef8:	6278      	str	r0, [r7, #36]	@ 0x24
 8009efa:	e008      	b.n	8009f0e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009efc:	4b06      	ldr	r3, [pc, #24]	@ (8009f18 <xTimerGenericCommand+0x98>)
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	f107 0114 	add.w	r1, r7, #20
 8009f04:	2300      	movs	r3, #0
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	f7fe fbae 	bl	8008668 <xQueueGenericSendFromISR>
 8009f0c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3728      	adds	r7, #40	@ 0x28
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	200009d8 	.word	0x200009d8

08009f1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b088      	sub	sp, #32
 8009f20:	af02      	add	r7, sp, #8
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f26:	4b23      	ldr	r3, [pc, #140]	@ (8009fb4 <prvProcessExpiredTimer+0x98>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	3304      	adds	r3, #4
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fe f96f 	bl	8008218 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f40:	f003 0304 	and.w	r3, r3, #4
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d023      	beq.n	8009f90 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	699a      	ldr	r2, [r3, #24]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	18d1      	adds	r1, r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	6978      	ldr	r0, [r7, #20]
 8009f56:	f000 f8d5 	bl	800a104 <prvInsertTimerInActiveList>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d020      	beq.n	8009fa2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f60:	2300      	movs	r3, #0
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	2300      	movs	r3, #0
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	2100      	movs	r1, #0
 8009f6a:	6978      	ldr	r0, [r7, #20]
 8009f6c:	f7ff ff88 	bl	8009e80 <xTimerGenericCommand>
 8009f70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d114      	bne.n	8009fa2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	60fb      	str	r3, [r7, #12]
}
 8009f8a:	bf00      	nop
 8009f8c:	bf00      	nop
 8009f8e:	e7fd      	b.n	8009f8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f96:	f023 0301 	bic.w	r3, r3, #1
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	6978      	ldr	r0, [r7, #20]
 8009fa8:	4798      	blx	r3
}
 8009faa:	bf00      	nop
 8009fac:	3718      	adds	r7, #24
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	200009d0 	.word	0x200009d0

08009fb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fc0:	f107 0308 	add.w	r3, r7, #8
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f000 f859 	bl	800a07c <prvGetNextExpireTime>
 8009fca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f000 f805 	bl	8009fe0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009fd6:	f000 f8d7 	bl	800a188 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fda:	bf00      	nop
 8009fdc:	e7f0      	b.n	8009fc0 <prvTimerTask+0x8>
	...

08009fe0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009fea:	f7ff f915 	bl	8009218 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fee:	f107 0308 	add.w	r3, r7, #8
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f000 f866 	bl	800a0c4 <prvSampleTimeNow>
 8009ff8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d130      	bne.n	800a062 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10a      	bne.n	800a01c <prvProcessTimerOrBlockTask+0x3c>
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d806      	bhi.n	800a01c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a00e:	f7ff f911 	bl	8009234 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a012:	68f9      	ldr	r1, [r7, #12]
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7ff ff81 	bl	8009f1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a01a:	e024      	b.n	800a066 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d008      	beq.n	800a034 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a022:	4b13      	ldr	r3, [pc, #76]	@ (800a070 <prvProcessTimerOrBlockTask+0x90>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d101      	bne.n	800a030 <prvProcessTimerOrBlockTask+0x50>
 800a02c:	2301      	movs	r3, #1
 800a02e:	e000      	b.n	800a032 <prvProcessTimerOrBlockTask+0x52>
 800a030:	2300      	movs	r3, #0
 800a032:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a034:	4b0f      	ldr	r3, [pc, #60]	@ (800a074 <prvProcessTimerOrBlockTask+0x94>)
 800a036:	6818      	ldr	r0, [r3, #0]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	4619      	mov	r1, r3
 800a042:	f7fe fef1 	bl	8008e28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a046:	f7ff f8f5 	bl	8009234 <xTaskResumeAll>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10a      	bne.n	800a066 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a050:	4b09      	ldr	r3, [pc, #36]	@ (800a078 <prvProcessTimerOrBlockTask+0x98>)
 800a052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a056:	601a      	str	r2, [r3, #0]
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	f3bf 8f6f 	isb	sy
}
 800a060:	e001      	b.n	800a066 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a062:	f7ff f8e7 	bl	8009234 <xTaskResumeAll>
}
 800a066:	bf00      	nop
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	200009d4 	.word	0x200009d4
 800a074:	200009d8 	.word	0x200009d8
 800a078:	e000ed04 	.word	0xe000ed04

0800a07c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a084:	4b0e      	ldr	r3, [pc, #56]	@ (800a0c0 <prvGetNextExpireTime+0x44>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <prvGetNextExpireTime+0x16>
 800a08e:	2201      	movs	r2, #1
 800a090:	e000      	b.n	800a094 <prvGetNextExpireTime+0x18>
 800a092:	2200      	movs	r2, #0
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d105      	bne.n	800a0ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0a0:	4b07      	ldr	r3, [pc, #28]	@ (800a0c0 <prvGetNextExpireTime+0x44>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	60fb      	str	r3, [r7, #12]
 800a0aa:	e001      	b.n	800a0b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3714      	adds	r7, #20
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	200009d0 	.word	0x200009d0

0800a0c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a0cc:	f7ff f950 	bl	8009370 <xTaskGetTickCount>
 800a0d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a0d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a100 <prvSampleTimeNow+0x3c>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d205      	bcs.n	800a0e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a0dc:	f000 f91e 	bl	800a31c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	e002      	b.n	800a0ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a0ee:	4a04      	ldr	r2, [pc, #16]	@ (800a100 <prvSampleTimeNow+0x3c>)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	200009e0 	.word	0x200009e0

0800a104 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a112:	2300      	movs	r3, #0
 800a114:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	429a      	cmp	r2, r3
 800a128:	d812      	bhi.n	800a150 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	1ad2      	subs	r2, r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	699b      	ldr	r3, [r3, #24]
 800a134:	429a      	cmp	r2, r3
 800a136:	d302      	bcc.n	800a13e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a138:	2301      	movs	r3, #1
 800a13a:	617b      	str	r3, [r7, #20]
 800a13c:	e01b      	b.n	800a176 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a13e:	4b10      	ldr	r3, [pc, #64]	@ (800a180 <prvInsertTimerInActiveList+0x7c>)
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	3304      	adds	r3, #4
 800a146:	4619      	mov	r1, r3
 800a148:	4610      	mov	r0, r2
 800a14a:	f7fe f82c 	bl	80081a6 <vListInsert>
 800a14e:	e012      	b.n	800a176 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	429a      	cmp	r2, r3
 800a156:	d206      	bcs.n	800a166 <prvInsertTimerInActiveList+0x62>
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d302      	bcc.n	800a166 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a160:	2301      	movs	r3, #1
 800a162:	617b      	str	r3, [r7, #20]
 800a164:	e007      	b.n	800a176 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a166:	4b07      	ldr	r3, [pc, #28]	@ (800a184 <prvInsertTimerInActiveList+0x80>)
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3304      	adds	r3, #4
 800a16e:	4619      	mov	r1, r3
 800a170:	4610      	mov	r0, r2
 800a172:	f7fe f818 	bl	80081a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a176:	697b      	ldr	r3, [r7, #20]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3718      	adds	r7, #24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	200009d4 	.word	0x200009d4
 800a184:	200009d0 	.word	0x200009d0

0800a188 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b08c      	sub	sp, #48	@ 0x30
 800a18c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a18e:	e0b2      	b.n	800a2f6 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	2b00      	cmp	r3, #0
 800a194:	f2c0 80af 	blt.w	800a2f6 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a19e:	695b      	ldr	r3, [r3, #20]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d004      	beq.n	800a1ae <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7fe f835 	bl	8008218 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1ae:	1d3b      	adds	r3, r7, #4
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7ff ff87 	bl	800a0c4 <prvSampleTimeNow>
 800a1b6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	2b09      	cmp	r3, #9
 800a1bc:	f200 8098 	bhi.w	800a2f0 <prvProcessReceivedCommands+0x168>
 800a1c0:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c8 <prvProcessReceivedCommands+0x40>)
 800a1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c6:	bf00      	nop
 800a1c8:	0800a1f1 	.word	0x0800a1f1
 800a1cc:	0800a1f1 	.word	0x0800a1f1
 800a1d0:	0800a1f1 	.word	0x0800a1f1
 800a1d4:	0800a267 	.word	0x0800a267
 800a1d8:	0800a27b 	.word	0x0800a27b
 800a1dc:	0800a2c7 	.word	0x0800a2c7
 800a1e0:	0800a1f1 	.word	0x0800a1f1
 800a1e4:	0800a1f1 	.word	0x0800a1f1
 800a1e8:	0800a267 	.word	0x0800a267
 800a1ec:	0800a27b 	.word	0x0800a27b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1f6:	f043 0301 	orr.w	r3, r3, #1
 800a1fa:	b2da      	uxtb	r2, r3
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	18d1      	adds	r1, r2, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6a3a      	ldr	r2, [r7, #32]
 800a20e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a210:	f7ff ff78 	bl	800a104 <prvInsertTimerInActiveList>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d06c      	beq.n	800a2f4 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a220:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a224:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a228:	f003 0304 	and.w	r3, r3, #4
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d061      	beq.n	800a2f4 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	441a      	add	r2, r3
 800a238:	2300      	movs	r3, #0
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	2300      	movs	r3, #0
 800a23e:	2100      	movs	r1, #0
 800a240:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a242:	f7ff fe1d 	bl	8009e80 <xTimerGenericCommand>
 800a246:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d152      	bne.n	800a2f4 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800a24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	61bb      	str	r3, [r7, #24]
}
 800a260:	bf00      	nop
 800a262:	bf00      	nop
 800a264:	e7fd      	b.n	800a262 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a268:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a26c:	f023 0301 	bic.w	r3, r3, #1
 800a270:	b2da      	uxtb	r2, r3
 800a272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a274:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a278:	e03d      	b.n	800a2f6 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a280:	f043 0301 	orr.w	r3, r3, #1
 800a284:	b2da      	uxtb	r2, r3
 800a286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a288:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a290:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10b      	bne.n	800a2b2 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800a29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	617b      	str	r3, [r7, #20]
}
 800a2ac:	bf00      	nop
 800a2ae:	bf00      	nop
 800a2b0:	e7fd      	b.n	800a2ae <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b4:	699a      	ldr	r2, [r3, #24]
 800a2b6:	6a3b      	ldr	r3, [r7, #32]
 800a2b8:	18d1      	adds	r1, r2, r3
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	6a3a      	ldr	r2, [r7, #32]
 800a2be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a2c0:	f7ff ff20 	bl	800a104 <prvInsertTimerInActiveList>
					break;
 800a2c4:	e017      	b.n	800a2f6 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2cc:	f003 0302 	and.w	r3, r3, #2
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d103      	bne.n	800a2dc <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800a2d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a2d6:	f000 fbd9 	bl	800aa8c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a2da:	e00c      	b.n	800a2f6 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2e2:	f023 0301 	bic.w	r3, r3, #1
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a2ee:	e002      	b.n	800a2f6 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800a2f0:	bf00      	nop
 800a2f2:	e000      	b.n	800a2f6 <prvProcessReceivedCommands+0x16e>
					break;
 800a2f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a2f6:	4b08      	ldr	r3, [pc, #32]	@ (800a318 <prvProcessReceivedCommands+0x190>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f107 0108 	add.w	r1, r7, #8
 800a2fe:	2200      	movs	r2, #0
 800a300:	4618      	mov	r0, r3
 800a302:	f7fe fa4d 	bl	80087a0 <xQueueReceive>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f47f af41 	bne.w	800a190 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a30e:	bf00      	nop
 800a310:	bf00      	nop
 800a312:	3728      	adds	r7, #40	@ 0x28
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	200009d8 	.word	0x200009d8

0800a31c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b088      	sub	sp, #32
 800a320:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a322:	e049      	b.n	800a3b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a324:	4b2e      	ldr	r3, [pc, #184]	@ (800a3e0 <prvSwitchTimerLists+0xc4>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a32e:	4b2c      	ldr	r3, [pc, #176]	@ (800a3e0 <prvSwitchTimerLists+0xc4>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	3304      	adds	r3, #4
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7fd ff6b 	bl	8008218 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a350:	f003 0304 	and.w	r3, r3, #4
 800a354:	2b00      	cmp	r3, #0
 800a356:	d02f      	beq.n	800a3b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	4413      	add	r3, r2
 800a360:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	429a      	cmp	r2, r3
 800a368:	d90e      	bls.n	800a388 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a376:	4b1a      	ldr	r3, [pc, #104]	@ (800a3e0 <prvSwitchTimerLists+0xc4>)
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3304      	adds	r3, #4
 800a37e:	4619      	mov	r1, r3
 800a380:	4610      	mov	r0, r2
 800a382:	f7fd ff10 	bl	80081a6 <vListInsert>
 800a386:	e017      	b.n	800a3b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a388:	2300      	movs	r3, #0
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	2300      	movs	r3, #0
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	2100      	movs	r1, #0
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f7ff fd74 	bl	8009e80 <xTimerGenericCommand>
 800a398:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10b      	bne.n	800a3b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	603b      	str	r3, [r7, #0]
}
 800a3b2:	bf00      	nop
 800a3b4:	bf00      	nop
 800a3b6:	e7fd      	b.n	800a3b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3b8:	4b09      	ldr	r3, [pc, #36]	@ (800a3e0 <prvSwitchTimerLists+0xc4>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1b0      	bne.n	800a324 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a3c2:	4b07      	ldr	r3, [pc, #28]	@ (800a3e0 <prvSwitchTimerLists+0xc4>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a3c8:	4b06      	ldr	r3, [pc, #24]	@ (800a3e4 <prvSwitchTimerLists+0xc8>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a04      	ldr	r2, [pc, #16]	@ (800a3e0 <prvSwitchTimerLists+0xc4>)
 800a3ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a3d0:	4a04      	ldr	r2, [pc, #16]	@ (800a3e4 <prvSwitchTimerLists+0xc8>)
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	6013      	str	r3, [r2, #0]
}
 800a3d6:	bf00      	nop
 800a3d8:	3718      	adds	r7, #24
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	200009d0 	.word	0x200009d0
 800a3e4:	200009d4 	.word	0x200009d4

0800a3e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a3ec:	f000 f964 	bl	800a6b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a3f0:	4b12      	ldr	r3, [pc, #72]	@ (800a43c <prvCheckForValidListAndQueue+0x54>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d11d      	bne.n	800a434 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800a3f8:	4811      	ldr	r0, [pc, #68]	@ (800a440 <prvCheckForValidListAndQueue+0x58>)
 800a3fa:	f7fd fe83 	bl	8008104 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a3fe:	4811      	ldr	r0, [pc, #68]	@ (800a444 <prvCheckForValidListAndQueue+0x5c>)
 800a400:	f7fd fe80 	bl	8008104 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a404:	4b10      	ldr	r3, [pc, #64]	@ (800a448 <prvCheckForValidListAndQueue+0x60>)
 800a406:	4a0e      	ldr	r2, [pc, #56]	@ (800a440 <prvCheckForValidListAndQueue+0x58>)
 800a408:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a40a:	4b10      	ldr	r3, [pc, #64]	@ (800a44c <prvCheckForValidListAndQueue+0x64>)
 800a40c:	4a0d      	ldr	r2, [pc, #52]	@ (800a444 <prvCheckForValidListAndQueue+0x5c>)
 800a40e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800a410:	2200      	movs	r2, #0
 800a412:	210c      	movs	r1, #12
 800a414:	200a      	movs	r0, #10
 800a416:	f7fd ff93 	bl	8008340 <xQueueGenericCreate>
 800a41a:	4603      	mov	r3, r0
 800a41c:	4a07      	ldr	r2, [pc, #28]	@ (800a43c <prvCheckForValidListAndQueue+0x54>)
 800a41e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a420:	4b06      	ldr	r3, [pc, #24]	@ (800a43c <prvCheckForValidListAndQueue+0x54>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d005      	beq.n	800a434 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a428:	4b04      	ldr	r3, [pc, #16]	@ (800a43c <prvCheckForValidListAndQueue+0x54>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4908      	ldr	r1, [pc, #32]	@ (800a450 <prvCheckForValidListAndQueue+0x68>)
 800a42e:	4618      	mov	r0, r3
 800a430:	f7fe fcd0 	bl	8008dd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a434:	f000 f972 	bl	800a71c <vPortExitCritical>
}
 800a438:	bf00      	nop
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	200009d8 	.word	0x200009d8
 800a440:	200009a8 	.word	0x200009a8
 800a444:	200009bc 	.word	0x200009bc
 800a448:	200009d0 	.word	0x200009d0
 800a44c:	200009d4 	.word	0x200009d4
 800a450:	0800e328 	.word	0x0800e328

0800a454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	3b04      	subs	r3, #4
 800a464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a46c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3b04      	subs	r3, #4
 800a472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	f023 0201 	bic.w	r2, r3, #1
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3b04      	subs	r3, #4
 800a482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a484:	4a0c      	ldr	r2, [pc, #48]	@ (800a4b8 <pxPortInitialiseStack+0x64>)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	3b14      	subs	r3, #20
 800a48e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	3b04      	subs	r3, #4
 800a49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f06f 0202 	mvn.w	r2, #2
 800a4a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3b20      	subs	r3, #32
 800a4a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr
 800a4b8:	0800a4bd 	.word	0x0800a4bd

0800a4bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4c6:	4b13      	ldr	r3, [pc, #76]	@ (800a514 <prvTaskExitError+0x58>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ce:	d00b      	beq.n	800a4e8 <prvTaskExitError+0x2c>
	__asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	60fb      	str	r3, [r7, #12]
}
 800a4e2:	bf00      	nop
 800a4e4:	bf00      	nop
 800a4e6:	e7fd      	b.n	800a4e4 <prvTaskExitError+0x28>
	__asm volatile
 800a4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ec:	f383 8811 	msr	BASEPRI, r3
 800a4f0:	f3bf 8f6f 	isb	sy
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	60bb      	str	r3, [r7, #8]
}
 800a4fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a4fc:	bf00      	nop
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d0fc      	beq.n	800a4fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a504:	bf00      	nop
 800a506:	bf00      	nop
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	20000028 	.word	0x20000028
	...

0800a520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a520:	4b07      	ldr	r3, [pc, #28]	@ (800a540 <pxCurrentTCBConst2>)
 800a522:	6819      	ldr	r1, [r3, #0]
 800a524:	6808      	ldr	r0, [r1, #0]
 800a526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52a:	f380 8809 	msr	PSP, r0
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f04f 0000 	mov.w	r0, #0
 800a536:	f380 8811 	msr	BASEPRI, r0
 800a53a:	4770      	bx	lr
 800a53c:	f3af 8000 	nop.w

0800a540 <pxCurrentTCBConst2>:
 800a540:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a544:	bf00      	nop
 800a546:	bf00      	nop

0800a548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a548:	4808      	ldr	r0, [pc, #32]	@ (800a56c <prvPortStartFirstTask+0x24>)
 800a54a:	6800      	ldr	r0, [r0, #0]
 800a54c:	6800      	ldr	r0, [r0, #0]
 800a54e:	f380 8808 	msr	MSP, r0
 800a552:	f04f 0000 	mov.w	r0, #0
 800a556:	f380 8814 	msr	CONTROL, r0
 800a55a:	b662      	cpsie	i
 800a55c:	b661      	cpsie	f
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	f3bf 8f6f 	isb	sy
 800a566:	df00      	svc	0
 800a568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a56a:	bf00      	nop
 800a56c:	e000ed08 	.word	0xe000ed08

0800a570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a576:	4b47      	ldr	r3, [pc, #284]	@ (800a694 <xPortStartScheduler+0x124>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a47      	ldr	r2, [pc, #284]	@ (800a698 <xPortStartScheduler+0x128>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d10b      	bne.n	800a598 <xPortStartScheduler+0x28>
	__asm volatile
 800a580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	60fb      	str	r3, [r7, #12]
}
 800a592:	bf00      	nop
 800a594:	bf00      	nop
 800a596:	e7fd      	b.n	800a594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a598:	4b3e      	ldr	r3, [pc, #248]	@ (800a694 <xPortStartScheduler+0x124>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a3f      	ldr	r2, [pc, #252]	@ (800a69c <xPortStartScheduler+0x12c>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d10b      	bne.n	800a5ba <xPortStartScheduler+0x4a>
	__asm volatile
 800a5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a6:	f383 8811 	msr	BASEPRI, r3
 800a5aa:	f3bf 8f6f 	isb	sy
 800a5ae:	f3bf 8f4f 	dsb	sy
 800a5b2:	613b      	str	r3, [r7, #16]
}
 800a5b4:	bf00      	nop
 800a5b6:	bf00      	nop
 800a5b8:	e7fd      	b.n	800a5b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5ba:	4b39      	ldr	r3, [pc, #228]	@ (800a6a0 <xPortStartScheduler+0x130>)
 800a5bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	22ff      	movs	r2, #255	@ 0xff
 800a5ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a5d4:	78fb      	ldrb	r3, [r7, #3]
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	4b31      	ldr	r3, [pc, #196]	@ (800a6a4 <xPortStartScheduler+0x134>)
 800a5e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5e2:	4b31      	ldr	r3, [pc, #196]	@ (800a6a8 <xPortStartScheduler+0x138>)
 800a5e4:	2207      	movs	r2, #7
 800a5e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5e8:	e009      	b.n	800a5fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a5ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a6a8 <xPortStartScheduler+0x138>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	4a2d      	ldr	r2, [pc, #180]	@ (800a6a8 <xPortStartScheduler+0x138>)
 800a5f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a5f4:	78fb      	ldrb	r3, [r7, #3]
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	005b      	lsls	r3, r3, #1
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5fe:	78fb      	ldrb	r3, [r7, #3]
 800a600:	b2db      	uxtb	r3, r3
 800a602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a606:	2b80      	cmp	r3, #128	@ 0x80
 800a608:	d0ef      	beq.n	800a5ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a60a:	4b27      	ldr	r3, [pc, #156]	@ (800a6a8 <xPortStartScheduler+0x138>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f1c3 0307 	rsb	r3, r3, #7
 800a612:	2b04      	cmp	r3, #4
 800a614:	d00b      	beq.n	800a62e <xPortStartScheduler+0xbe>
	__asm volatile
 800a616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61a:	f383 8811 	msr	BASEPRI, r3
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	f3bf 8f4f 	dsb	sy
 800a626:	60bb      	str	r3, [r7, #8]
}
 800a628:	bf00      	nop
 800a62a:	bf00      	nop
 800a62c:	e7fd      	b.n	800a62a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a62e:	4b1e      	ldr	r3, [pc, #120]	@ (800a6a8 <xPortStartScheduler+0x138>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	021b      	lsls	r3, r3, #8
 800a634:	4a1c      	ldr	r2, [pc, #112]	@ (800a6a8 <xPortStartScheduler+0x138>)
 800a636:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a638:	4b1b      	ldr	r3, [pc, #108]	@ (800a6a8 <xPortStartScheduler+0x138>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a640:	4a19      	ldr	r2, [pc, #100]	@ (800a6a8 <xPortStartScheduler+0x138>)
 800a642:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	b2da      	uxtb	r2, r3
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a64c:	4b17      	ldr	r3, [pc, #92]	@ (800a6ac <xPortStartScheduler+0x13c>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a16      	ldr	r2, [pc, #88]	@ (800a6ac <xPortStartScheduler+0x13c>)
 800a652:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a656:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a658:	4b14      	ldr	r3, [pc, #80]	@ (800a6ac <xPortStartScheduler+0x13c>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a13      	ldr	r2, [pc, #76]	@ (800a6ac <xPortStartScheduler+0x13c>)
 800a65e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a662:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a664:	f000 f8da 	bl	800a81c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a668:	4b11      	ldr	r3, [pc, #68]	@ (800a6b0 <xPortStartScheduler+0x140>)
 800a66a:	2200      	movs	r2, #0
 800a66c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a66e:	f000 f8f9 	bl	800a864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a672:	4b10      	ldr	r3, [pc, #64]	@ (800a6b4 <xPortStartScheduler+0x144>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a0f      	ldr	r2, [pc, #60]	@ (800a6b4 <xPortStartScheduler+0x144>)
 800a678:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a67c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a67e:	f7ff ff63 	bl	800a548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a682:	f7fe ff3f 	bl	8009504 <vTaskSwitchContext>
	prvTaskExitError();
 800a686:	f7ff ff19 	bl	800a4bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3718      	adds	r7, #24
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	e000ed00 	.word	0xe000ed00
 800a698:	410fc271 	.word	0x410fc271
 800a69c:	410fc270 	.word	0x410fc270
 800a6a0:	e000e400 	.word	0xe000e400
 800a6a4:	200009e4 	.word	0x200009e4
 800a6a8:	200009e8 	.word	0x200009e8
 800a6ac:	e000ed20 	.word	0xe000ed20
 800a6b0:	20000028 	.word	0x20000028
 800a6b4:	e000ef34 	.word	0xe000ef34

0800a6b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	607b      	str	r3, [r7, #4]
}
 800a6d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a6d2:	4b10      	ldr	r3, [pc, #64]	@ (800a714 <vPortEnterCritical+0x5c>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	4a0e      	ldr	r2, [pc, #56]	@ (800a714 <vPortEnterCritical+0x5c>)
 800a6da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a6dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a714 <vPortEnterCritical+0x5c>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d110      	bne.n	800a706 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a6e4:	4b0c      	ldr	r3, [pc, #48]	@ (800a718 <vPortEnterCritical+0x60>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00b      	beq.n	800a706 <vPortEnterCritical+0x4e>
	__asm volatile
 800a6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f2:	f383 8811 	msr	BASEPRI, r3
 800a6f6:	f3bf 8f6f 	isb	sy
 800a6fa:	f3bf 8f4f 	dsb	sy
 800a6fe:	603b      	str	r3, [r7, #0]
}
 800a700:	bf00      	nop
 800a702:	bf00      	nop
 800a704:	e7fd      	b.n	800a702 <vPortEnterCritical+0x4a>
	}
}
 800a706:	bf00      	nop
 800a708:	370c      	adds	r7, #12
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	20000028 	.word	0x20000028
 800a718:	e000ed04 	.word	0xe000ed04

0800a71c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a722:	4b12      	ldr	r3, [pc, #72]	@ (800a76c <vPortExitCritical+0x50>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10b      	bne.n	800a742 <vPortExitCritical+0x26>
	__asm volatile
 800a72a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	607b      	str	r3, [r7, #4]
}
 800a73c:	bf00      	nop
 800a73e:	bf00      	nop
 800a740:	e7fd      	b.n	800a73e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a742:	4b0a      	ldr	r3, [pc, #40]	@ (800a76c <vPortExitCritical+0x50>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	3b01      	subs	r3, #1
 800a748:	4a08      	ldr	r2, [pc, #32]	@ (800a76c <vPortExitCritical+0x50>)
 800a74a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a74c:	4b07      	ldr	r3, [pc, #28]	@ (800a76c <vPortExitCritical+0x50>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d105      	bne.n	800a760 <vPortExitCritical+0x44>
 800a754:	2300      	movs	r3, #0
 800a756:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	f383 8811 	msr	BASEPRI, r3
}
 800a75e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	20000028 	.word	0x20000028

0800a770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a770:	f3ef 8009 	mrs	r0, PSP
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	4b15      	ldr	r3, [pc, #84]	@ (800a7d0 <pxCurrentTCBConst>)
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	f01e 0f10 	tst.w	lr, #16
 800a780:	bf08      	it	eq
 800a782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78a:	6010      	str	r0, [r2, #0]
 800a78c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a790:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a794:	f380 8811 	msr	BASEPRI, r0
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	f3bf 8f6f 	isb	sy
 800a7a0:	f7fe feb0 	bl	8009504 <vTaskSwitchContext>
 800a7a4:	f04f 0000 	mov.w	r0, #0
 800a7a8:	f380 8811 	msr	BASEPRI, r0
 800a7ac:	bc09      	pop	{r0, r3}
 800a7ae:	6819      	ldr	r1, [r3, #0]
 800a7b0:	6808      	ldr	r0, [r1, #0]
 800a7b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b6:	f01e 0f10 	tst.w	lr, #16
 800a7ba:	bf08      	it	eq
 800a7bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a7c0:	f380 8809 	msr	PSP, r0
 800a7c4:	f3bf 8f6f 	isb	sy
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	f3af 8000 	nop.w

0800a7d0 <pxCurrentTCBConst>:
 800a7d0:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a7d4:	bf00      	nop
 800a7d6:	bf00      	nop

0800a7d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	607b      	str	r3, [r7, #4]
}
 800a7f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a7f2:	f7fe fdcd 	bl	8009390 <xTaskIncrementTick>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d003      	beq.n	800a804 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a7fc:	4b06      	ldr	r3, [pc, #24]	@ (800a818 <SysTick_Handler+0x40>)
 800a7fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	2300      	movs	r3, #0
 800a806:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	f383 8811 	msr	BASEPRI, r3
}
 800a80e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a810:	bf00      	nop
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	e000ed04 	.word	0xe000ed04

0800a81c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a81c:	b480      	push	{r7}
 800a81e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a820:	4b0b      	ldr	r3, [pc, #44]	@ (800a850 <vPortSetupTimerInterrupt+0x34>)
 800a822:	2200      	movs	r2, #0
 800a824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a826:	4b0b      	ldr	r3, [pc, #44]	@ (800a854 <vPortSetupTimerInterrupt+0x38>)
 800a828:	2200      	movs	r2, #0
 800a82a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a82c:	4b0a      	ldr	r3, [pc, #40]	@ (800a858 <vPortSetupTimerInterrupt+0x3c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a0a      	ldr	r2, [pc, #40]	@ (800a85c <vPortSetupTimerInterrupt+0x40>)
 800a832:	fba2 2303 	umull	r2, r3, r2, r3
 800a836:	099b      	lsrs	r3, r3, #6
 800a838:	4a09      	ldr	r2, [pc, #36]	@ (800a860 <vPortSetupTimerInterrupt+0x44>)
 800a83a:	3b01      	subs	r3, #1
 800a83c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a83e:	4b04      	ldr	r3, [pc, #16]	@ (800a850 <vPortSetupTimerInterrupt+0x34>)
 800a840:	2207      	movs	r2, #7
 800a842:	601a      	str	r2, [r3, #0]
}
 800a844:	bf00      	nop
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	e000e010 	.word	0xe000e010
 800a854:	e000e018 	.word	0xe000e018
 800a858:	20000004 	.word	0x20000004
 800a85c:	10624dd3 	.word	0x10624dd3
 800a860:	e000e014 	.word	0xe000e014

0800a864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a864:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a874 <vPortEnableVFP+0x10>
 800a868:	6801      	ldr	r1, [r0, #0]
 800a86a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a86e:	6001      	str	r1, [r0, #0]
 800a870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a872:	bf00      	nop
 800a874:	e000ed88 	.word	0xe000ed88

0800a878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a87e:	f3ef 8305 	mrs	r3, IPSR
 800a882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2b0f      	cmp	r3, #15
 800a888:	d915      	bls.n	800a8b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a88a:	4a18      	ldr	r2, [pc, #96]	@ (800a8ec <vPortValidateInterruptPriority+0x74>)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	4413      	add	r3, r2
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a894:	4b16      	ldr	r3, [pc, #88]	@ (800a8f0 <vPortValidateInterruptPriority+0x78>)
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	7afa      	ldrb	r2, [r7, #11]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d20b      	bcs.n	800a8b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a2:	f383 8811 	msr	BASEPRI, r3
 800a8a6:	f3bf 8f6f 	isb	sy
 800a8aa:	f3bf 8f4f 	dsb	sy
 800a8ae:	607b      	str	r3, [r7, #4]
}
 800a8b0:	bf00      	nop
 800a8b2:	bf00      	nop
 800a8b4:	e7fd      	b.n	800a8b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a8b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a8f4 <vPortValidateInterruptPriority+0x7c>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a8be:	4b0e      	ldr	r3, [pc, #56]	@ (800a8f8 <vPortValidateInterruptPriority+0x80>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d90b      	bls.n	800a8de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	603b      	str	r3, [r7, #0]
}
 800a8d8:	bf00      	nop
 800a8da:	bf00      	nop
 800a8dc:	e7fd      	b.n	800a8da <vPortValidateInterruptPriority+0x62>
	}
 800a8de:	bf00      	nop
 800a8e0:	3714      	adds	r7, #20
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	e000e3f0 	.word	0xe000e3f0
 800a8f0:	200009e4 	.word	0x200009e4
 800a8f4:	e000ed0c 	.word	0xe000ed0c
 800a8f8:	200009e8 	.word	0x200009e8

0800a8fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b08a      	sub	sp, #40	@ 0x28
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a904:	2300      	movs	r3, #0
 800a906:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a908:	f7fe fc86 	bl	8009218 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a90c:	4b5a      	ldr	r3, [pc, #360]	@ (800aa78 <pvPortMalloc+0x17c>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a914:	f000 f916 	bl	800ab44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a918:	4b58      	ldr	r3, [pc, #352]	@ (800aa7c <pvPortMalloc+0x180>)
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4013      	ands	r3, r2
 800a920:	2b00      	cmp	r3, #0
 800a922:	f040 8090 	bne.w	800aa46 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d01e      	beq.n	800a96a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a92c:	2208      	movs	r2, #8
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4413      	add	r3, r2
 800a932:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f003 0307 	and.w	r3, r3, #7
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d015      	beq.n	800a96a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f023 0307 	bic.w	r3, r3, #7
 800a944:	3308      	adds	r3, #8
 800a946:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f003 0307 	and.w	r3, r3, #7
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00b      	beq.n	800a96a <pvPortMalloc+0x6e>
	__asm volatile
 800a952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a956:	f383 8811 	msr	BASEPRI, r3
 800a95a:	f3bf 8f6f 	isb	sy
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	617b      	str	r3, [r7, #20]
}
 800a964:	bf00      	nop
 800a966:	bf00      	nop
 800a968:	e7fd      	b.n	800a966 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d06a      	beq.n	800aa46 <pvPortMalloc+0x14a>
 800a970:	4b43      	ldr	r3, [pc, #268]	@ (800aa80 <pvPortMalloc+0x184>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	429a      	cmp	r2, r3
 800a978:	d865      	bhi.n	800aa46 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a97a:	4b42      	ldr	r3, [pc, #264]	@ (800aa84 <pvPortMalloc+0x188>)
 800a97c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a97e:	4b41      	ldr	r3, [pc, #260]	@ (800aa84 <pvPortMalloc+0x188>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a984:	e004      	b.n	800a990 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a988:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	429a      	cmp	r2, r3
 800a998:	d903      	bls.n	800a9a2 <pvPortMalloc+0xa6>
 800a99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1f1      	bne.n	800a986 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9a2:	4b35      	ldr	r3, [pc, #212]	@ (800aa78 <pvPortMalloc+0x17c>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d04c      	beq.n	800aa46 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9ac:	6a3b      	ldr	r3, [r7, #32]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2208      	movs	r2, #8
 800a9b2:	4413      	add	r3, r2
 800a9b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	6a3b      	ldr	r3, [r7, #32]
 800a9bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c0:	685a      	ldr	r2, [r3, #4]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	1ad2      	subs	r2, r2, r3
 800a9c6:	2308      	movs	r3, #8
 800a9c8:	005b      	lsls	r3, r3, #1
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d920      	bls.n	800aa10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a9ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	f003 0307 	and.w	r3, r3, #7
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00b      	beq.n	800a9f8 <pvPortMalloc+0xfc>
	__asm volatile
 800a9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e4:	f383 8811 	msr	BASEPRI, r3
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	613b      	str	r3, [r7, #16]
}
 800a9f2:	bf00      	nop
 800a9f4:	bf00      	nop
 800a9f6:	e7fd      	b.n	800a9f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	1ad2      	subs	r2, r2, r3
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa0a:	69b8      	ldr	r0, [r7, #24]
 800aa0c:	f000 f8fc 	bl	800ac08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa10:	4b1b      	ldr	r3, [pc, #108]	@ (800aa80 <pvPortMalloc+0x184>)
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	4a19      	ldr	r2, [pc, #100]	@ (800aa80 <pvPortMalloc+0x184>)
 800aa1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa1e:	4b18      	ldr	r3, [pc, #96]	@ (800aa80 <pvPortMalloc+0x184>)
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	4b19      	ldr	r3, [pc, #100]	@ (800aa88 <pvPortMalloc+0x18c>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d203      	bcs.n	800aa32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa2a:	4b15      	ldr	r3, [pc, #84]	@ (800aa80 <pvPortMalloc+0x184>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a16      	ldr	r2, [pc, #88]	@ (800aa88 <pvPortMalloc+0x18c>)
 800aa30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa34:	685a      	ldr	r2, [r3, #4]
 800aa36:	4b11      	ldr	r3, [pc, #68]	@ (800aa7c <pvPortMalloc+0x180>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	431a      	orrs	r2, r3
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa42:	2200      	movs	r2, #0
 800aa44:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa46:	f7fe fbf5 	bl	8009234 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	f003 0307 	and.w	r3, r3, #7
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00b      	beq.n	800aa6c <pvPortMalloc+0x170>
	__asm volatile
 800aa54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	60fb      	str	r3, [r7, #12]
}
 800aa66:	bf00      	nop
 800aa68:	bf00      	nop
 800aa6a:	e7fd      	b.n	800aa68 <pvPortMalloc+0x16c>
	return pvReturn;
 800aa6c:	69fb      	ldr	r3, [r7, #28]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3728      	adds	r7, #40	@ 0x28
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	200135f4 	.word	0x200135f4
 800aa7c:	20013600 	.word	0x20013600
 800aa80:	200135f8 	.word	0x200135f8
 800aa84:	200135ec 	.word	0x200135ec
 800aa88:	200135fc 	.word	0x200135fc

0800aa8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b086      	sub	sp, #24
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d04a      	beq.n	800ab34 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa9e:	2308      	movs	r3, #8
 800aaa0:	425b      	negs	r3, r3
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	685a      	ldr	r2, [r3, #4]
 800aab0:	4b22      	ldr	r3, [pc, #136]	@ (800ab3c <vPortFree+0xb0>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4013      	ands	r3, r2
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10b      	bne.n	800aad2 <vPortFree+0x46>
	__asm volatile
 800aaba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	60fb      	str	r3, [r7, #12]
}
 800aacc:	bf00      	nop
 800aace:	bf00      	nop
 800aad0:	e7fd      	b.n	800aace <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00b      	beq.n	800aaf2 <vPortFree+0x66>
	__asm volatile
 800aada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	60bb      	str	r3, [r7, #8]
}
 800aaec:	bf00      	nop
 800aaee:	bf00      	nop
 800aaf0:	e7fd      	b.n	800aaee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	685a      	ldr	r2, [r3, #4]
 800aaf6:	4b11      	ldr	r3, [pc, #68]	@ (800ab3c <vPortFree+0xb0>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4013      	ands	r3, r2
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d019      	beq.n	800ab34 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d115      	bne.n	800ab34 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	685a      	ldr	r2, [r3, #4]
 800ab0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ab3c <vPortFree+0xb0>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	43db      	mvns	r3, r3
 800ab12:	401a      	ands	r2, r3
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab18:	f7fe fb7e 	bl	8009218 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	685a      	ldr	r2, [r3, #4]
 800ab20:	4b07      	ldr	r3, [pc, #28]	@ (800ab40 <vPortFree+0xb4>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4413      	add	r3, r2
 800ab26:	4a06      	ldr	r2, [pc, #24]	@ (800ab40 <vPortFree+0xb4>)
 800ab28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab2a:	6938      	ldr	r0, [r7, #16]
 800ab2c:	f000 f86c 	bl	800ac08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ab30:	f7fe fb80 	bl	8009234 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab34:	bf00      	nop
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	20013600 	.word	0x20013600
 800ab40:	200135f8 	.word	0x200135f8

0800ab44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab4a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800ab4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab50:	4b27      	ldr	r3, [pc, #156]	@ (800abf0 <prvHeapInit+0xac>)
 800ab52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f003 0307 	and.w	r3, r3, #7
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00c      	beq.n	800ab78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	3307      	adds	r3, #7
 800ab62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f023 0307 	bic.w	r3, r3, #7
 800ab6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	1ad3      	subs	r3, r2, r3
 800ab72:	4a1f      	ldr	r2, [pc, #124]	@ (800abf0 <prvHeapInit+0xac>)
 800ab74:	4413      	add	r3, r2
 800ab76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab7c:	4a1d      	ldr	r2, [pc, #116]	@ (800abf4 <prvHeapInit+0xb0>)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab82:	4b1c      	ldr	r3, [pc, #112]	@ (800abf4 <prvHeapInit+0xb0>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab90:	2208      	movs	r2, #8
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	1a9b      	subs	r3, r3, r2
 800ab96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f023 0307 	bic.w	r3, r3, #7
 800ab9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4a15      	ldr	r2, [pc, #84]	@ (800abf8 <prvHeapInit+0xb4>)
 800aba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aba6:	4b14      	ldr	r3, [pc, #80]	@ (800abf8 <prvHeapInit+0xb4>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2200      	movs	r2, #0
 800abac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abae:	4b12      	ldr	r3, [pc, #72]	@ (800abf8 <prvHeapInit+0xb4>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2200      	movs	r2, #0
 800abb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	1ad2      	subs	r2, r2, r3
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800abc4:	4b0c      	ldr	r3, [pc, #48]	@ (800abf8 <prvHeapInit+0xb4>)
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	4a0a      	ldr	r2, [pc, #40]	@ (800abfc <prvHeapInit+0xb8>)
 800abd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	4a09      	ldr	r2, [pc, #36]	@ (800ac00 <prvHeapInit+0xbc>)
 800abda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800abdc:	4b09      	ldr	r3, [pc, #36]	@ (800ac04 <prvHeapInit+0xc0>)
 800abde:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800abe2:	601a      	str	r2, [r3, #0]
}
 800abe4:	bf00      	nop
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	200009ec 	.word	0x200009ec
 800abf4:	200135ec 	.word	0x200135ec
 800abf8:	200135f4 	.word	0x200135f4
 800abfc:	200135fc 	.word	0x200135fc
 800ac00:	200135f8 	.word	0x200135f8
 800ac04:	20013600 	.word	0x20013600

0800ac08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac10:	4b28      	ldr	r3, [pc, #160]	@ (800acb4 <prvInsertBlockIntoFreeList+0xac>)
 800ac12:	60fb      	str	r3, [r7, #12]
 800ac14:	e002      	b.n	800ac1c <prvInsertBlockIntoFreeList+0x14>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	60fb      	str	r3, [r7, #12]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d8f7      	bhi.n	800ac16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	4413      	add	r3, r2
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d108      	bne.n	800ac4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	441a      	add	r2, r3
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	68ba      	ldr	r2, [r7, #8]
 800ac54:	441a      	add	r2, r3
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d118      	bne.n	800ac90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	4b15      	ldr	r3, [pc, #84]	@ (800acb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d00d      	beq.n	800ac86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	441a      	add	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	601a      	str	r2, [r3, #0]
 800ac84:	e008      	b.n	800ac98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac86:	4b0c      	ldr	r3, [pc, #48]	@ (800acb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	e003      	b.n	800ac98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d002      	beq.n	800aca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aca6:	bf00      	nop
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	200135ec 	.word	0x200135ec
 800acb8:	200135f4 	.word	0x200135f4

0800acbc <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b086      	sub	sp, #24
 800acc0:	af02      	add	r7, sp, #8
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	460b      	mov	r3, r1
 800acc6:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 800acc8:	78fb      	ldrb	r3, [r7, #3]
 800acca:	f023 030f 	bic.w	r3, r3, #15
 800acce:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 800acd0:	78fb      	ldrb	r3, [r7, #3]
 800acd2:	011b      	lsls	r3, r3, #4
 800acd4:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 800acd6:	7bfb      	ldrb	r3, [r7, #15]
 800acd8:	f043 030c 	orr.w	r3, r3, #12
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
 800ace2:	f043 0308 	orr.w	r3, r3, #8
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 800acea:	7bbb      	ldrb	r3, [r7, #14]
 800acec:	f043 030c 	orr.w	r3, r3, #12
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 800acf4:	7bbb      	ldrb	r3, [r7, #14]
 800acf6:	f043 0308 	orr.w	r3, r3, #8
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	72fb      	strb	r3, [r7, #11]


    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6818      	ldr	r0, [r3, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	791b      	ldrb	r3, [r3, #4]
 800ad06:	4619      	mov	r1, r3
 800ad08:	f107 0208 	add.w	r2, r7, #8
 800ad0c:	2364      	movs	r3, #100	@ 0x64
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	2304      	movs	r3, #4
 800ad12:	f7f7 fe71 	bl	80029f8 <HAL_I2C_Master_Transmit>
 800ad16:	4603      	mov	r3, r0
 800ad18:	737b      	strb	r3, [r7, #13]
    if (ret != HAL_OK) {

    }
}
 800ad1a:	bf00      	nop
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b086      	sub	sp, #24
 800ad26:	af02      	add	r7, sp, #8
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 800ad2e:	78fb      	ldrb	r3, [r7, #3]
 800ad30:	f023 030f 	bic.w	r3, r3, #15
 800ad34:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 800ad36:	78fb      	ldrb	r3, [r7, #3]
 800ad38:	011b      	lsls	r3, r3, #4
 800ad3a:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 800ad3c:	7bfb      	ldrb	r3, [r7, #15]
 800ad3e:	f043 030d 	orr.w	r3, r3, #13
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 800ad46:	7bfb      	ldrb	r3, [r7, #15]
 800ad48:	f043 0309 	orr.w	r3, r3, #9
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 800ad50:	7bbb      	ldrb	r3, [r7, #14]
 800ad52:	f043 030d 	orr.w	r3, r3, #13
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 800ad5a:	7bbb      	ldrb	r3, [r7, #14]
 800ad5c:	f043 0309 	orr.w	r3, r3, #9
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	72fb      	strb	r3, [r7, #11]

    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6818      	ldr	r0, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	791b      	ldrb	r3, [r3, #4]
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	f107 0208 	add.w	r2, r7, #8
 800ad72:	2364      	movs	r3, #100	@ 0x64
 800ad74:	9300      	str	r3, [sp, #0]
 800ad76:	2304      	movs	r3, #4
 800ad78:	f7f7 fe3e 	bl	80029f8 <HAL_I2C_Master_Transmit>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	737b      	strb	r3, [r7, #13]
    if (ret != HAL_OK) {

	}
}
 800ad80:	bf00      	nop
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b086      	sub	sp, #24
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b03      	cmp	r3, #3
 800ad98:	d824      	bhi.n	800ade4 <lcd_gotoxy+0x5c>
 800ad9a:	a201      	add	r2, pc, #4	@ (adr r2, 800ada0 <lcd_gotoxy+0x18>)
 800ad9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada0:	0800adb1 	.word	0x0800adb1
 800ada4:	0800adbb 	.word	0x0800adbb
 800ada8:	0800adc5 	.word	0x0800adc5
 800adac:	0800adcf 	.word	0x0800adcf
    {
        case 0: address = 0x80 + col; break;  // First row
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	3b80      	subs	r3, #128	@ 0x80
 800adb6:	75fb      	strb	r3, [r7, #23]
 800adb8:	e00e      	b.n	800add8 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	3b40      	subs	r3, #64	@ 0x40
 800adc0:	75fb      	strb	r3, [r7, #23]
 800adc2:	e009      	b.n	800add8 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	3b6c      	subs	r3, #108	@ 0x6c
 800adca:	75fb      	strb	r3, [r7, #23]
 800adcc:	e004      	b.n	800add8 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	b2db      	uxtb	r3, r3
 800add2:	3b2c      	subs	r3, #44	@ 0x2c
 800add4:	75fb      	strb	r3, [r7, #23]
 800add6:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 800add8:	7dfb      	ldrb	r3, [r7, #23]
 800adda:	4619      	mov	r1, r3
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f7ff ff6d 	bl	800acbc <lcd_send_cmd>
 800ade2:	e000      	b.n	800ade6 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 800ade4:	bf00      	nop
}
 800ade6:	3718      	adds	r7, #24
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 800adf4:	2032      	movs	r0, #50	@ 0x32
 800adf6:	f7f6 fdfd 	bl	80019f4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800adfa:	2130      	movs	r1, #48	@ 0x30
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f7ff ff5d 	bl	800acbc <lcd_send_cmd>
    HAL_Delay(5);
 800ae02:	2005      	movs	r0, #5
 800ae04:	f7f6 fdf6 	bl	80019f4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800ae08:	2130      	movs	r1, #48	@ 0x30
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7ff ff56 	bl	800acbc <lcd_send_cmd>
    HAL_Delay(1);
 800ae10:	2001      	movs	r0, #1
 800ae12:	f7f6 fdef 	bl	80019f4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800ae16:	2130      	movs	r1, #48	@ 0x30
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f7ff ff4f 	bl	800acbc <lcd_send_cmd>
    HAL_Delay(10);
 800ae1e:	200a      	movs	r0, #10
 800ae20:	f7f6 fde8 	bl	80019f4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 800ae24:	2120      	movs	r1, #32
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7ff ff48 	bl	800acbc <lcd_send_cmd>
    HAL_Delay(10);
 800ae2c:	200a      	movs	r0, #10
 800ae2e:	f7f6 fde1 	bl	80019f4 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 800ae32:	2128      	movs	r1, #40	@ 0x28
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7ff ff41 	bl	800acbc <lcd_send_cmd>
    HAL_Delay(1);
 800ae3a:	2001      	movs	r0, #1
 800ae3c:	f7f6 fdda 	bl	80019f4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 800ae40:	2108      	movs	r1, #8
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7ff ff3a 	bl	800acbc <lcd_send_cmd>
    HAL_Delay(1);
 800ae48:	2001      	movs	r0, #1
 800ae4a:	f7f6 fdd3 	bl	80019f4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 800ae4e:	2101      	movs	r1, #1
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7ff ff33 	bl	800acbc <lcd_send_cmd>
    HAL_Delay(2);
 800ae56:	2002      	movs	r0, #2
 800ae58:	f7f6 fdcc 	bl	80019f4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 800ae5c:	2106      	movs	r1, #6
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7ff ff2c 	bl	800acbc <lcd_send_cmd>
    HAL_Delay(1);
 800ae64:	2001      	movs	r0, #1
 800ae66:	f7f6 fdc5 	bl	80019f4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 800ae6a:	210c      	movs	r1, #12
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7ff ff25 	bl	800acbc <lcd_send_cmd>
}
 800ae72:	bf00      	nop
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b082      	sub	sp, #8
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 800ae84:	e007      	b.n	800ae96 <lcd_puts+0x1c>
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	1c5a      	adds	r2, r3, #1
 800ae8a:	603a      	str	r2, [r7, #0]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	4619      	mov	r1, r3
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f7ff ff46 	bl	800ad22 <lcd_send_data>
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1f3      	bne.n	800ae86 <lcd_puts+0xc>
}
 800ae9e:	bf00      	nop
 800aea0:	bf00      	nop
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <LCD2004_Init>:
SemaphoreHandle_t xLCDMutex;
I2C_LCD_HandleTypeDef lcd;
extern UART_HandleTypeDef huart2;

void LCD2004_Init(I2C_HandleTypeDef *hi2c, uint8_t address)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	70fb      	strb	r3, [r7, #3]
  lcd.hi2c = hi2c;
 800aeb4:	4a06      	ldr	r2, [pc, #24]	@ (800aed0 <LCD2004_Init+0x28>)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6013      	str	r3, [r2, #0]
  lcd.address = address; //0x4E（0x27 << 1）
 800aeba:	4a05      	ldr	r2, [pc, #20]	@ (800aed0 <LCD2004_Init+0x28>)
 800aebc:	78fb      	ldrb	r3, [r7, #3]
 800aebe:	7113      	strb	r3, [r2, #4]
  lcd_init(&lcd);
 800aec0:	4803      	ldr	r0, [pc, #12]	@ (800aed0 <LCD2004_Init+0x28>)
 800aec2:	f7ff ff93 	bl	800adec <lcd_init>
}
 800aec6:	bf00      	nop
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	2001360c 	.word	0x2001360c

0800aed4 <LCD2004_OS_Resources_Init>:

void LCD2004_OS_Resources_Init()
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	af00      	add	r7, sp, #0
  xLCDQueue = xQueueCreate(4, sizeof(LCDMsgStruct));
 800aed8:	2200      	movs	r2, #0
 800aeda:	2122      	movs	r1, #34	@ 0x22
 800aedc:	2004      	movs	r0, #4
 800aede:	f7fd fa2f 	bl	8008340 <xQueueGenericCreate>
 800aee2:	4603      	mov	r3, r0
 800aee4:	4a04      	ldr	r2, [pc, #16]	@ (800aef8 <LCD2004_OS_Resources_Init+0x24>)
 800aee6:	6013      	str	r3, [r2, #0]
  xLCDMutex = xSemaphoreCreateMutex();
 800aee8:	2001      	movs	r0, #1
 800aeea:	f7fd faa3 	bl	8008434 <xQueueCreateMutex>
 800aeee:	4603      	mov	r3, r0
 800aef0:	4a02      	ldr	r2, [pc, #8]	@ (800aefc <LCD2004_OS_Resources_Init+0x28>)
 800aef2:	6013      	str	r3, [r2, #0]
}
 800aef4:	bf00      	nop
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	20013604 	.word	0x20013604
 800aefc:	20013608 	.word	0x20013608

0800af00 <LCDHandler>:

void LCDHandler(void *pvParameters)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b08c      	sub	sp, #48	@ 0x30
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  LCDMsgStruct lcdMsg;
  while (1)
  {
      if (xQueueReceive(xLCDQueue, &lcdMsg, portMAX_DELAY) == pdPASS) {
 800af08:	4b0f      	ldr	r3, [pc, #60]	@ (800af48 <LCDHandler+0x48>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f107 010c 	add.w	r1, r7, #12
 800af10:	f04f 32ff 	mov.w	r2, #4294967295
 800af14:	4618      	mov	r0, r3
 800af16:	f7fd fc43 	bl	80087a0 <xQueueReceive>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d10d      	bne.n	800af3c <LCDHandler+0x3c>
//          }
//
//          xSemaphoreGive(xLCDMutex);
//	    }
    	  //SendMsg(&huart2, "\n\r LCDReceiveHandler : %d %d %s\n\r", lcdMsg.row, lcdMsg.col, lcdMsg.msg);
          lcd_gotoxy(&lcd, lcdMsg.col, lcdMsg.row);
 800af20:	7b7b      	ldrb	r3, [r7, #13]
 800af22:	4619      	mov	r1, r3
 800af24:	7b3b      	ldrb	r3, [r7, #12]
 800af26:	461a      	mov	r2, r3
 800af28:	4808      	ldr	r0, [pc, #32]	@ (800af4c <LCDHandler+0x4c>)
 800af2a:	f7ff ff2d 	bl	800ad88 <lcd_gotoxy>
          lcd_puts(&lcd, lcdMsg.msg);
 800af2e:	f107 030c 	add.w	r3, r7, #12
 800af32:	3302      	adds	r3, #2
 800af34:	4619      	mov	r1, r3
 800af36:	4805      	ldr	r0, [pc, #20]	@ (800af4c <LCDHandler+0x4c>)
 800af38:	f7ff ff9f 	bl	800ae7a <lcd_puts>
      }
      vTaskDelay(pdMS_TO_TICKS(500));
 800af3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800af40:	f7fe f8e6 	bl	8009110 <vTaskDelay>
      if (xQueueReceive(xLCDQueue, &lcdMsg, portMAX_DELAY) == pdPASS) {
 800af44:	e7e0      	b.n	800af08 <LCDHandler+0x8>
 800af46:	bf00      	nop
 800af48:	20013604 	.word	0x20013604
 800af4c:	2001360c 	.word	0x2001360c

0800af50 <LED_Init>:
extern TIM_HandleTypeDef htim4;
QueueHandle_t xLEDQueue;
SemaphoreHandle_t xLEDMutex;

void LED_Init()
{
 800af50:	b580      	push	{r7, lr}
 800af52:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800af54:	2100      	movs	r1, #0
 800af56:	4806      	ldr	r0, [pc, #24]	@ (800af70 <LED_Init+0x20>)
 800af58:	f7fa f8c0 	bl	80050dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800af5c:	2108      	movs	r1, #8
 800af5e:	4804      	ldr	r0, [pc, #16]	@ (800af70 <LED_Init+0x20>)
 800af60:	f7fa f8bc 	bl	80050dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800af64:	210c      	movs	r1, #12
 800af66:	4802      	ldr	r0, [pc, #8]	@ (800af70 <LED_Init+0x20>)
 800af68:	f7fa f8b8 	bl	80050dc <HAL_TIM_PWM_Start>
}
 800af6c:	bf00      	nop
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	200003f8 	.word	0x200003f8

0800af74 <LED_OS_Resources_Init>:

void LED_OS_Resources_Init()
{
 800af74:	b580      	push	{r7, lr}
 800af76:	af00      	add	r7, sp, #0
	xLEDQueue = xQueueCreate(4, sizeof(LEDMsgStruct));
 800af78:	2200      	movs	r2, #0
 800af7a:	210c      	movs	r1, #12
 800af7c:	2004      	movs	r0, #4
 800af7e:	f7fd f9df 	bl	8008340 <xQueueGenericCreate>
 800af82:	4603      	mov	r3, r0
 800af84:	4a04      	ldr	r2, [pc, #16]	@ (800af98 <LED_OS_Resources_Init+0x24>)
 800af86:	6013      	str	r3, [r2, #0]
	xLEDMutex = xSemaphoreCreateMutex();
 800af88:	2001      	movs	r0, #1
 800af8a:	f7fd fa53 	bl	8008434 <xQueueCreateMutex>
 800af8e:	4603      	mov	r3, r0
 800af90:	4a02      	ldr	r2, [pc, #8]	@ (800af9c <LED_OS_Resources_Init+0x28>)
 800af92:	6013      	str	r3, [r2, #0]
}
 800af94:	bf00      	nop
 800af96:	bd80      	pop	{r7, pc}
 800af98:	20013614 	.word	0x20013614
 800af9c:	20013618 	.word	0x20013618

0800afa0 <setColor>:

void setColor(uint8_t r, uint8_t g, uint8_t b) {
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	4603      	mov	r3, r0
 800afa8:	71fb      	strb	r3, [r7, #7]
 800afaa:	460b      	mov	r3, r1
 800afac:	71bb      	strb	r3, [r7, #6]
 800afae:	4613      	mov	r3, r2
 800afb0:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, r);
 800afb2:	4b09      	ldr	r3, [pc, #36]	@ (800afd8 <setColor+0x38>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	79fa      	ldrb	r2, [r7, #7]
 800afb8:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, g);
 800afba:	4b07      	ldr	r3, [pc, #28]	@ (800afd8 <setColor+0x38>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	79ba      	ldrb	r2, [r7, #6]
 800afc0:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, b);
 800afc2:	4b05      	ldr	r3, [pc, #20]	@ (800afd8 <setColor+0x38>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	797a      	ldrb	r2, [r7, #5]
 800afc8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800afca:	bf00      	nop
 800afcc:	370c      	adds	r7, #12
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	200003f8 	.word	0x200003f8

0800afdc <LEDHandler>:

bool auto_mode = false;
void LEDHandler()
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
	LEDMsgStruct LEDMsg;
	while(1)
	{
		if (xQueueReceive(xLEDQueue, &LEDMsg, portMAX_DELAY) == pdPASS) {
 800afe2:	4b1d      	ldr	r3, [pc, #116]	@ (800b058 <LEDHandler+0x7c>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	1d39      	adds	r1, r7, #4
 800afe8:	f04f 32ff 	mov.w	r2, #4294967295
 800afec:	4618      	mov	r0, r3
 800afee:	f7fd fbd7 	bl	80087a0 <xQueueReceive>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d129      	bne.n	800b04c <LEDHandler+0x70>
			if(LEDMsg.r < 0 || LEDMsg.g < 0 || LEDMsg.b < 0) {
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	db05      	blt.n	800b00a <LEDHandler+0x2e>
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	2b00      	cmp	r3, #0
 800b002:	db02      	blt.n	800b00a <LEDHandler+0x2e>
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	da03      	bge.n	800b012 <LEDHandler+0x36>
				auto_mode = true;
 800b00a:	4b14      	ldr	r3, [pc, #80]	@ (800b05c <LEDHandler+0x80>)
 800b00c:	2201      	movs	r2, #1
 800b00e:	701a      	strb	r2, [r3, #0]
 800b010:	e01c      	b.n	800b04c <LEDHandler+0x70>
			}
			else {
				auto_mode = false;
 800b012:	4b12      	ldr	r3, [pc, #72]	@ (800b05c <LEDHandler+0x80>)
 800b014:	2200      	movs	r2, #0
 800b016:	701a      	strb	r2, [r3, #0]
				if (xSemaphoreTake(xLEDMutex, portMAX_DELAY) == pdPASS) {
 800b018:	4b11      	ldr	r3, [pc, #68]	@ (800b060 <LEDHandler+0x84>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f04f 31ff 	mov.w	r1, #4294967295
 800b020:	4618      	mov	r0, r3
 800b022:	f7fd fc9f 	bl	8008964 <xQueueSemaphoreTake>
 800b026:	4603      	mov	r3, r0
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d10f      	bne.n	800b04c <LEDHandler+0x70>
					setColor(LEDMsg.r, LEDMsg.g, LEDMsg.b);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	68ba      	ldr	r2, [r7, #8]
 800b032:	b2d1      	uxtb	r1, r2
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	b2d2      	uxtb	r2, r2
 800b038:	4618      	mov	r0, r3
 800b03a:	f7ff ffb1 	bl	800afa0 <setColor>
					xSemaphoreGive(xLEDMutex);
 800b03e:	4b08      	ldr	r3, [pc, #32]	@ (800b060 <LEDHandler+0x84>)
 800b040:	6818      	ldr	r0, [r3, #0]
 800b042:	2300      	movs	r3, #0
 800b044:	2200      	movs	r2, #0
 800b046:	2100      	movs	r1, #0
 800b048:	f7fd fa0c 	bl	8008464 <xQueueGenericSend>
				}

			}
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 800b04c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b050:	f7fe f85e 	bl	8009110 <vTaskDelay>
		if (xQueueReceive(xLEDQueue, &LEDMsg, portMAX_DELAY) == pdPASS) {
 800b054:	e7c5      	b.n	800afe2 <LEDHandler+0x6>
 800b056:	bf00      	nop
 800b058:	20013614 	.word	0x20013614
 800b05c:	2001361c 	.word	0x2001361c
 800b060:	20013618 	.word	0x20013618

0800b064 <LEDTask>:
	}
}

void LEDTask()
{
 800b064:	b580      	push	{r7, lr}
 800b066:	af00      	add	r7, sp, #0
	setColor(100, 100, 100);
 800b068:	2264      	movs	r2, #100	@ 0x64
 800b06a:	2164      	movs	r1, #100	@ 0x64
 800b06c:	2064      	movs	r0, #100	@ 0x64
 800b06e:	f7ff ff97 	bl	800afa0 <setColor>
	while(1)
	{
		if (xSemaphoreTake(xLEDMutex, portMAX_DELAY) == pdPASS) {
 800b072:	4b29      	ldr	r3, [pc, #164]	@ (800b118 <LEDTask+0xb4>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f04f 31ff 	mov.w	r1, #4294967295
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fd fc72 	bl	8008964 <xQueueSemaphoreTake>
 800b080:	4603      	mov	r3, r0
 800b082:	2b01      	cmp	r3, #1
 800b084:	d142      	bne.n	800b10c <LEDTask+0xa8>
			if(auto_mode) {
 800b086:	4b25      	ldr	r3, [pc, #148]	@ (800b11c <LEDTask+0xb8>)
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d037      	beq.n	800b0fe <LEDTask+0x9a>
				setColor(255, 0, 0);     // 紅
 800b08e:	2200      	movs	r2, #0
 800b090:	2100      	movs	r1, #0
 800b092:	20ff      	movs	r0, #255	@ 0xff
 800b094:	f7ff ff84 	bl	800afa0 <setColor>
				HAL_Delay(100);
 800b098:	2064      	movs	r0, #100	@ 0x64
 800b09a:	f7f6 fcab 	bl	80019f4 <HAL_Delay>
				setColor(255, 165, 0);   // 橙
 800b09e:	2200      	movs	r2, #0
 800b0a0:	21a5      	movs	r1, #165	@ 0xa5
 800b0a2:	20ff      	movs	r0, #255	@ 0xff
 800b0a4:	f7ff ff7c 	bl	800afa0 <setColor>
				HAL_Delay(100);
 800b0a8:	2064      	movs	r0, #100	@ 0x64
 800b0aa:	f7f6 fca3 	bl	80019f4 <HAL_Delay>
				setColor(255, 255, 0);   // 黃
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	21ff      	movs	r1, #255	@ 0xff
 800b0b2:	20ff      	movs	r0, #255	@ 0xff
 800b0b4:	f7ff ff74 	bl	800afa0 <setColor>
				HAL_Delay(100);
 800b0b8:	2064      	movs	r0, #100	@ 0x64
 800b0ba:	f7f6 fc9b 	bl	80019f4 <HAL_Delay>
				setColor(0, 255, 0);     // 綠
 800b0be:	2200      	movs	r2, #0
 800b0c0:	21ff      	movs	r1, #255	@ 0xff
 800b0c2:	2000      	movs	r0, #0
 800b0c4:	f7ff ff6c 	bl	800afa0 <setColor>
				HAL_Delay(100);
 800b0c8:	2064      	movs	r0, #100	@ 0x64
 800b0ca:	f7f6 fc93 	bl	80019f4 <HAL_Delay>
				setColor(0, 127, 255);     // 藍
 800b0ce:	22ff      	movs	r2, #255	@ 0xff
 800b0d0:	217f      	movs	r1, #127	@ 0x7f
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	f7ff ff64 	bl	800afa0 <setColor>
				HAL_Delay(100);
 800b0d8:	2064      	movs	r0, #100	@ 0x64
 800b0da:	f7f6 fc8b 	bl	80019f4 <HAL_Delay>
				setColor(0, 0, 255);    // 靛
 800b0de:	22ff      	movs	r2, #255	@ 0xff
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	f7ff ff5c 	bl	800afa0 <setColor>
				HAL_Delay(100);
 800b0e8:	2064      	movs	r0, #100	@ 0x64
 800b0ea:	f7f6 fc83 	bl	80019f4 <HAL_Delay>
				setColor(50, 0, 255);   // 紫
 800b0ee:	22ff      	movs	r2, #255	@ 0xff
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	2032      	movs	r0, #50	@ 0x32
 800b0f4:	f7ff ff54 	bl	800afa0 <setColor>
				HAL_Delay(100);
 800b0f8:	2064      	movs	r0, #100	@ 0x64
 800b0fa:	f7f6 fc7b 	bl	80019f4 <HAL_Delay>
			}
			xSemaphoreGive(xLEDMutex);
 800b0fe:	4b06      	ldr	r3, [pc, #24]	@ (800b118 <LEDTask+0xb4>)
 800b100:	6818      	ldr	r0, [r3, #0]
 800b102:	2300      	movs	r3, #0
 800b104:	2200      	movs	r2, #0
 800b106:	2100      	movs	r1, #0
 800b108:	f7fd f9ac 	bl	8008464 <xQueueGenericSend>
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 800b10c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b110:	f7fd fffe 	bl	8009110 <vTaskDelay>
		if (xSemaphoreTake(xLEDMutex, portMAX_DELAY) == pdPASS) {
 800b114:	e7ad      	b.n	800b072 <LEDTask+0xe>
 800b116:	bf00      	nop
 800b118:	20013618 	.word	0x20013618
 800b11c:	2001361c 	.word	0x2001361c

0800b120 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	4603      	mov	r3, r0
 800b128:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b12a:	79fb      	ldrb	r3, [r7, #7]
 800b12c:	4a08      	ldr	r2, [pc, #32]	@ (800b150 <disk_status+0x30>)
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4413      	add	r3, r2
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	79fa      	ldrb	r2, [r7, #7]
 800b138:	4905      	ldr	r1, [pc, #20]	@ (800b150 <disk_status+0x30>)
 800b13a:	440a      	add	r2, r1
 800b13c:	7a12      	ldrb	r2, [r2, #8]
 800b13e:	4610      	mov	r0, r2
 800b140:	4798      	blx	r3
 800b142:	4603      	mov	r3, r0
 800b144:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b146:	7bfb      	ldrb	r3, [r7, #15]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	20013648 	.word	0x20013648

0800b154 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	4603      	mov	r3, r0
 800b15c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b15e:	2300      	movs	r3, #0
 800b160:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b162:	79fb      	ldrb	r3, [r7, #7]
 800b164:	4a0e      	ldr	r2, [pc, #56]	@ (800b1a0 <disk_initialize+0x4c>)
 800b166:	5cd3      	ldrb	r3, [r2, r3]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d114      	bne.n	800b196 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b16c:	79fb      	ldrb	r3, [r7, #7]
 800b16e:	4a0c      	ldr	r2, [pc, #48]	@ (800b1a0 <disk_initialize+0x4c>)
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	79fa      	ldrb	r2, [r7, #7]
 800b17a:	4909      	ldr	r1, [pc, #36]	@ (800b1a0 <disk_initialize+0x4c>)
 800b17c:	440a      	add	r2, r1
 800b17e:	7a12      	ldrb	r2, [r2, #8]
 800b180:	4610      	mov	r0, r2
 800b182:	4798      	blx	r3
 800b184:	4603      	mov	r3, r0
 800b186:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b188:	7bfb      	ldrb	r3, [r7, #15]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d103      	bne.n	800b196 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b18e:	79fb      	ldrb	r3, [r7, #7]
 800b190:	4a03      	ldr	r2, [pc, #12]	@ (800b1a0 <disk_initialize+0x4c>)
 800b192:	2101      	movs	r1, #1
 800b194:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b196:	7bfb      	ldrb	r3, [r7, #15]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	20013648 	.word	0x20013648

0800b1a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b1a4:	b590      	push	{r4, r7, lr}
 800b1a6:	b087      	sub	sp, #28
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60b9      	str	r1, [r7, #8]
 800b1ac:	607a      	str	r2, [r7, #4]
 800b1ae:	603b      	str	r3, [r7, #0]
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
 800b1b6:	4a0a      	ldr	r2, [pc, #40]	@ (800b1e0 <disk_read+0x3c>)
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4413      	add	r3, r2
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	689c      	ldr	r4, [r3, #8]
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
 800b1c2:	4a07      	ldr	r2, [pc, #28]	@ (800b1e0 <disk_read+0x3c>)
 800b1c4:	4413      	add	r3, r2
 800b1c6:	7a18      	ldrb	r0, [r3, #8]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	68b9      	ldr	r1, [r7, #8]
 800b1ce:	47a0      	blx	r4
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b1d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	371c      	adds	r7, #28
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd90      	pop	{r4, r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	20013648 	.word	0x20013648

0800b1e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b1e4:	b590      	push	{r4, r7, lr}
 800b1e6:	b087      	sub	sp, #28
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60b9      	str	r1, [r7, #8]
 800b1ec:	607a      	str	r2, [r7, #4]
 800b1ee:	603b      	str	r3, [r7, #0]
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b1f4:	7bfb      	ldrb	r3, [r7, #15]
 800b1f6:	4a0a      	ldr	r2, [pc, #40]	@ (800b220 <disk_write+0x3c>)
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	4413      	add	r3, r2
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	68dc      	ldr	r4, [r3, #12]
 800b200:	7bfb      	ldrb	r3, [r7, #15]
 800b202:	4a07      	ldr	r2, [pc, #28]	@ (800b220 <disk_write+0x3c>)
 800b204:	4413      	add	r3, r2
 800b206:	7a18      	ldrb	r0, [r3, #8]
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	68b9      	ldr	r1, [r7, #8]
 800b20e:	47a0      	blx	r4
 800b210:	4603      	mov	r3, r0
 800b212:	75fb      	strb	r3, [r7, #23]
  return res;
 800b214:	7dfb      	ldrb	r3, [r7, #23]
}
 800b216:	4618      	mov	r0, r3
 800b218:	371c      	adds	r7, #28
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd90      	pop	{r4, r7, pc}
 800b21e:	bf00      	nop
 800b220:	20013648 	.word	0x20013648

0800b224 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	3301      	adds	r3, #1
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b234:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b238:	021b      	lsls	r3, r3, #8
 800b23a:	b21a      	sxth	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	b21b      	sxth	r3, r3
 800b242:	4313      	orrs	r3, r2
 800b244:	b21b      	sxth	r3, r3
 800b246:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b248:	89fb      	ldrh	r3, [r7, #14]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr

0800b256 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b256:	b480      	push	{r7}
 800b258:	b085      	sub	sp, #20
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	3303      	adds	r3, #3
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	021b      	lsls	r3, r3, #8
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	3202      	adds	r2, #2
 800b26e:	7812      	ldrb	r2, [r2, #0]
 800b270:	4313      	orrs	r3, r2
 800b272:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	021b      	lsls	r3, r3, #8
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	3201      	adds	r2, #1
 800b27c:	7812      	ldrb	r2, [r2, #0]
 800b27e:	4313      	orrs	r3, r2
 800b280:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	021b      	lsls	r3, r3, #8
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	7812      	ldrb	r2, [r2, #0]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	60fb      	str	r3, [r7, #12]
	return rv;
 800b28e:	68fb      	ldr	r3, [r7, #12]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3714      	adds	r7, #20
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	1c5a      	adds	r2, r3, #1
 800b2ac:	607a      	str	r2, [r7, #4]
 800b2ae:	887a      	ldrh	r2, [r7, #2]
 800b2b0:	b2d2      	uxtb	r2, r2
 800b2b2:	701a      	strb	r2, [r3, #0]
 800b2b4:	887b      	ldrh	r3, [r7, #2]
 800b2b6:	0a1b      	lsrs	r3, r3, #8
 800b2b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	1c5a      	adds	r2, r3, #1
 800b2be:	607a      	str	r2, [r7, #4]
 800b2c0:	887a      	ldrh	r2, [r7, #2]
 800b2c2:	b2d2      	uxtb	r2, r2
 800b2c4:	701a      	strb	r2, [r3, #0]
}
 800b2c6:	bf00      	nop
 800b2c8:	370c      	adds	r7, #12
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr

0800b2d2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b2d2:	b480      	push	{r7}
 800b2d4:	b083      	sub	sp, #12
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	1c5a      	adds	r2, r3, #1
 800b2e0:	607a      	str	r2, [r7, #4]
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	b2d2      	uxtb	r2, r2
 800b2e6:	701a      	strb	r2, [r3, #0]
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	0a1b      	lsrs	r3, r3, #8
 800b2ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	1c5a      	adds	r2, r3, #1
 800b2f2:	607a      	str	r2, [r7, #4]
 800b2f4:	683a      	ldr	r2, [r7, #0]
 800b2f6:	b2d2      	uxtb	r2, r2
 800b2f8:	701a      	strb	r2, [r3, #0]
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	0a1b      	lsrs	r3, r3, #8
 800b2fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	1c5a      	adds	r2, r3, #1
 800b304:	607a      	str	r2, [r7, #4]
 800b306:	683a      	ldr	r2, [r7, #0]
 800b308:	b2d2      	uxtb	r2, r2
 800b30a:	701a      	strb	r2, [r3, #0]
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	0a1b      	lsrs	r3, r3, #8
 800b310:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	1c5a      	adds	r2, r3, #1
 800b316:	607a      	str	r2, [r7, #4]
 800b318:	683a      	ldr	r2, [r7, #0]
 800b31a:	b2d2      	uxtb	r2, r2
 800b31c:	701a      	strb	r2, [r3, #0]
}
 800b31e:	bf00      	nop
 800b320:	370c      	adds	r7, #12
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b32a:	b480      	push	{r7}
 800b32c:	b087      	sub	sp, #28
 800b32e:	af00      	add	r7, sp, #0
 800b330:	60f8      	str	r0, [r7, #12]
 800b332:	60b9      	str	r1, [r7, #8]
 800b334:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	1c5a      	adds	r2, r3, #1
 800b33e:	617a      	str	r2, [r7, #20]
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	b2d2      	uxtb	r2, r2
 800b344:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	3b01      	subs	r3, #1
 800b34a:	607b      	str	r3, [r7, #4]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d1f3      	bne.n	800b33a <mem_set+0x10>
}
 800b352:	bf00      	nop
 800b354:	bf00      	nop
 800b356:	371c      	adds	r7, #28
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b360:	b480      	push	{r7}
 800b362:	b089      	sub	sp, #36	@ 0x24
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	61fb      	str	r3, [r7, #28]
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b374:	2300      	movs	r3, #0
 800b376:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	1c5a      	adds	r2, r3, #1
 800b37c:	61fa      	str	r2, [r7, #28]
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	4619      	mov	r1, r3
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	1c5a      	adds	r2, r3, #1
 800b386:	61ba      	str	r2, [r7, #24]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	1acb      	subs	r3, r1, r3
 800b38c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	3b01      	subs	r3, #1
 800b392:	607b      	str	r3, [r7, #4]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d002      	beq.n	800b3a0 <mem_cmp+0x40>
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d0eb      	beq.n	800b378 <mem_cmp+0x18>

	return r;
 800b3a0:	697b      	ldr	r3, [r7, #20]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3724      	adds	r7, #36	@ 0x24
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b3ae:	b480      	push	{r7}
 800b3b0:	b083      	sub	sp, #12
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
 800b3b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b3b8:	e002      	b.n	800b3c0 <chk_chr+0x12>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	607b      	str	r3, [r7, #4]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d005      	beq.n	800b3d4 <chk_chr+0x26>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d1f2      	bne.n	800b3ba <chk_chr+0xc>
	return *str;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	781b      	ldrb	r3, [r3, #0]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	370c      	adds	r7, #12
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	60fb      	str	r3, [r7, #12]
 800b3f2:	e01f      	b.n	800b434 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b3f4:	4a41      	ldr	r2, [pc, #260]	@ (800b4fc <inc_lock+0x118>)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	011b      	lsls	r3, r3, #4
 800b3fa:	4413      	add	r3, r2
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	429a      	cmp	r2, r3
 800b404:	d113      	bne.n	800b42e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b406:	4a3d      	ldr	r2, [pc, #244]	@ (800b4fc <inc_lock+0x118>)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	011b      	lsls	r3, r3, #4
 800b40c:	4413      	add	r3, r2
 800b40e:	3304      	adds	r3, #4
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b416:	429a      	cmp	r2, r3
 800b418:	d109      	bne.n	800b42e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b41a:	4a38      	ldr	r2, [pc, #224]	@ (800b4fc <inc_lock+0x118>)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	011b      	lsls	r3, r3, #4
 800b420:	4413      	add	r3, r2
 800b422:	3308      	adds	r3, #8
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d006      	beq.n	800b43c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	3301      	adds	r3, #1
 800b432:	60fb      	str	r3, [r7, #12]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d9dc      	bls.n	800b3f4 <inc_lock+0x10>
 800b43a:	e000      	b.n	800b43e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b43c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2b02      	cmp	r3, #2
 800b442:	d132      	bne.n	800b4aa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b444:	2300      	movs	r3, #0
 800b446:	60fb      	str	r3, [r7, #12]
 800b448:	e002      	b.n	800b450 <inc_lock+0x6c>
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	3301      	adds	r3, #1
 800b44e:	60fb      	str	r3, [r7, #12]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d806      	bhi.n	800b464 <inc_lock+0x80>
 800b456:	4a29      	ldr	r2, [pc, #164]	@ (800b4fc <inc_lock+0x118>)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	011b      	lsls	r3, r3, #4
 800b45c:	4413      	add	r3, r2
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1f2      	bne.n	800b44a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2b02      	cmp	r3, #2
 800b468:	d101      	bne.n	800b46e <inc_lock+0x8a>
 800b46a:	2300      	movs	r3, #0
 800b46c:	e040      	b.n	800b4f0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	4922      	ldr	r1, [pc, #136]	@ (800b4fc <inc_lock+0x118>)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	011b      	lsls	r3, r3, #4
 800b478:	440b      	add	r3, r1
 800b47a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	689a      	ldr	r2, [r3, #8]
 800b480:	491e      	ldr	r1, [pc, #120]	@ (800b4fc <inc_lock+0x118>)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	011b      	lsls	r3, r3, #4
 800b486:	440b      	add	r3, r1
 800b488:	3304      	adds	r3, #4
 800b48a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	695a      	ldr	r2, [r3, #20]
 800b490:	491a      	ldr	r1, [pc, #104]	@ (800b4fc <inc_lock+0x118>)
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	011b      	lsls	r3, r3, #4
 800b496:	440b      	add	r3, r1
 800b498:	3308      	adds	r3, #8
 800b49a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b49c:	4a17      	ldr	r2, [pc, #92]	@ (800b4fc <inc_lock+0x118>)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	011b      	lsls	r3, r3, #4
 800b4a2:	4413      	add	r3, r2
 800b4a4:	330c      	adds	r3, #12
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d009      	beq.n	800b4c4 <inc_lock+0xe0>
 800b4b0:	4a12      	ldr	r2, [pc, #72]	@ (800b4fc <inc_lock+0x118>)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	011b      	lsls	r3, r3, #4
 800b4b6:	4413      	add	r3, r2
 800b4b8:	330c      	adds	r3, #12
 800b4ba:	881b      	ldrh	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d001      	beq.n	800b4c4 <inc_lock+0xe0>
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	e015      	b.n	800b4f0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d108      	bne.n	800b4dc <inc_lock+0xf8>
 800b4ca:	4a0c      	ldr	r2, [pc, #48]	@ (800b4fc <inc_lock+0x118>)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	011b      	lsls	r3, r3, #4
 800b4d0:	4413      	add	r3, r2
 800b4d2:	330c      	adds	r3, #12
 800b4d4:	881b      	ldrh	r3, [r3, #0]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	e001      	b.n	800b4e0 <inc_lock+0xfc>
 800b4dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b4e0:	4906      	ldr	r1, [pc, #24]	@ (800b4fc <inc_lock+0x118>)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	011b      	lsls	r3, r3, #4
 800b4e6:	440b      	add	r3, r1
 800b4e8:	330c      	adds	r3, #12
 800b4ea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	3301      	adds	r3, #1
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3714      	adds	r7, #20
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	20013628 	.word	0x20013628

0800b500 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	3b01      	subs	r3, #1
 800b50c:	607b      	str	r3, [r7, #4]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d825      	bhi.n	800b560 <dec_lock+0x60>
		n = Files[i].ctr;
 800b514:	4a17      	ldr	r2, [pc, #92]	@ (800b574 <dec_lock+0x74>)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	011b      	lsls	r3, r3, #4
 800b51a:	4413      	add	r3, r2
 800b51c:	330c      	adds	r3, #12
 800b51e:	881b      	ldrh	r3, [r3, #0]
 800b520:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b522:	89fb      	ldrh	r3, [r7, #14]
 800b524:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b528:	d101      	bne.n	800b52e <dec_lock+0x2e>
 800b52a:	2300      	movs	r3, #0
 800b52c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b52e:	89fb      	ldrh	r3, [r7, #14]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <dec_lock+0x3a>
 800b534:	89fb      	ldrh	r3, [r7, #14]
 800b536:	3b01      	subs	r3, #1
 800b538:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b53a:	4a0e      	ldr	r2, [pc, #56]	@ (800b574 <dec_lock+0x74>)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	011b      	lsls	r3, r3, #4
 800b540:	4413      	add	r3, r2
 800b542:	330c      	adds	r3, #12
 800b544:	89fa      	ldrh	r2, [r7, #14]
 800b546:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b548:	89fb      	ldrh	r3, [r7, #14]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d105      	bne.n	800b55a <dec_lock+0x5a>
 800b54e:	4a09      	ldr	r2, [pc, #36]	@ (800b574 <dec_lock+0x74>)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	011b      	lsls	r3, r3, #4
 800b554:	4413      	add	r3, r2
 800b556:	2200      	movs	r2, #0
 800b558:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b55a:	2300      	movs	r3, #0
 800b55c:	737b      	strb	r3, [r7, #13]
 800b55e:	e001      	b.n	800b564 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b560:	2302      	movs	r3, #2
 800b562:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b564:	7b7b      	ldrb	r3, [r7, #13]
}
 800b566:	4618      	mov	r0, r3
 800b568:	3714      	adds	r7, #20
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	20013628 	.word	0x20013628

0800b578 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b578:	b480      	push	{r7}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b580:	2300      	movs	r3, #0
 800b582:	60fb      	str	r3, [r7, #12]
 800b584:	e010      	b.n	800b5a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b586:	4a0d      	ldr	r2, [pc, #52]	@ (800b5bc <clear_lock+0x44>)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	011b      	lsls	r3, r3, #4
 800b58c:	4413      	add	r3, r2
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	429a      	cmp	r2, r3
 800b594:	d105      	bne.n	800b5a2 <clear_lock+0x2a>
 800b596:	4a09      	ldr	r2, [pc, #36]	@ (800b5bc <clear_lock+0x44>)
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	011b      	lsls	r3, r3, #4
 800b59c:	4413      	add	r3, r2
 800b59e:	2200      	movs	r2, #0
 800b5a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	60fb      	str	r3, [r7, #12]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d9eb      	bls.n	800b586 <clear_lock+0xe>
	}
}
 800b5ae:	bf00      	nop
 800b5b0:	bf00      	nop
 800b5b2:	3714      	adds	r7, #20
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	20013628 	.word	0x20013628

0800b5c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	78db      	ldrb	r3, [r3, #3]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d034      	beq.n	800b63e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	7858      	ldrb	r0, [r3, #1]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	697a      	ldr	r2, [r7, #20]
 800b5e8:	f7ff fdfc 	bl	800b1e4 <disk_write>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d002      	beq.n	800b5f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	73fb      	strb	r3, [r7, #15]
 800b5f6:	e022      	b.n	800b63e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a1b      	ldr	r3, [r3, #32]
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	1ad2      	subs	r2, r2, r3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	699b      	ldr	r3, [r3, #24]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d217      	bcs.n	800b63e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	789b      	ldrb	r3, [r3, #2]
 800b612:	613b      	str	r3, [r7, #16]
 800b614:	e010      	b.n	800b638 <sync_window+0x78>
					wsect += fs->fsize;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	697a      	ldr	r2, [r7, #20]
 800b61c:	4413      	add	r3, r2
 800b61e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	7858      	ldrb	r0, [r3, #1]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b62a:	2301      	movs	r3, #1
 800b62c:	697a      	ldr	r2, [r7, #20]
 800b62e:	f7ff fdd9 	bl	800b1e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	3b01      	subs	r3, #1
 800b636:	613b      	str	r3, [r7, #16]
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d8eb      	bhi.n	800b616 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3718      	adds	r7, #24
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b652:	2300      	movs	r3, #0
 800b654:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b65a:	683a      	ldr	r2, [r7, #0]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d01b      	beq.n	800b698 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7ff ffad 	bl	800b5c0 <sync_window>
 800b666:	4603      	mov	r3, r0
 800b668:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b66a:	7bfb      	ldrb	r3, [r7, #15]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d113      	bne.n	800b698 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	7858      	ldrb	r0, [r3, #1]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b67a:	2301      	movs	r3, #1
 800b67c:	683a      	ldr	r2, [r7, #0]
 800b67e:	f7ff fd91 	bl	800b1a4 <disk_read>
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d004      	beq.n	800b692 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b688:	f04f 33ff 	mov.w	r3, #4294967295
 800b68c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b68e:	2301      	movs	r3, #1
 800b690:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	683a      	ldr	r2, [r7, #0]
 800b696:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800b698:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b083      	sub	sp, #12
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	3b02      	subs	r3, #2
 800b6b0:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	695b      	ldr	r3, [r3, #20]
 800b6b6:	3b02      	subs	r3, #2
 800b6b8:	683a      	ldr	r2, [r7, #0]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d301      	bcc.n	800b6c2 <clust2sect+0x20>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	e008      	b.n	800b6d4 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	895b      	ldrh	r3, [r3, #10]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	fb03 f202 	mul.w	r2, r3, r2
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d2:	4413      	add	r3, r2
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	370c      	adds	r7, #12
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b086      	sub	sp, #24
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d904      	bls.n	800b700 <get_fat+0x20>
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	695b      	ldr	r3, [r3, #20]
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d302      	bcc.n	800b706 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b700:	2301      	movs	r3, #1
 800b702:	617b      	str	r3, [r7, #20]
 800b704:	e08e      	b.n	800b824 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b706:	f04f 33ff 	mov.w	r3, #4294967295
 800b70a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	2b03      	cmp	r3, #3
 800b712:	d061      	beq.n	800b7d8 <get_fat+0xf8>
 800b714:	2b03      	cmp	r3, #3
 800b716:	dc7b      	bgt.n	800b810 <get_fat+0x130>
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d002      	beq.n	800b722 <get_fat+0x42>
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d041      	beq.n	800b7a4 <get_fat+0xc4>
 800b720:	e076      	b.n	800b810 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	60fb      	str	r3, [r7, #12]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	085b      	lsrs	r3, r3, #1
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	4413      	add	r3, r2
 800b72e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	6a1a      	ldr	r2, [r3, #32]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	0a5b      	lsrs	r3, r3, #9
 800b738:	4413      	add	r3, r2
 800b73a:	4619      	mov	r1, r3
 800b73c:	6938      	ldr	r0, [r7, #16]
 800b73e:	f7ff ff83 	bl	800b648 <move_window>
 800b742:	4603      	mov	r3, r0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d166      	bne.n	800b816 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	1c5a      	adds	r2, r3, #1
 800b74c:	60fa      	str	r2, [r7, #12]
 800b74e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	4413      	add	r3, r2
 800b756:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b75a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	6a1a      	ldr	r2, [r3, #32]
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	0a5b      	lsrs	r3, r3, #9
 800b764:	4413      	add	r3, r2
 800b766:	4619      	mov	r1, r3
 800b768:	6938      	ldr	r0, [r7, #16]
 800b76a:	f7ff ff6d 	bl	800b648 <move_window>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d152      	bne.n	800b81a <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b77a:	693a      	ldr	r2, [r7, #16]
 800b77c:	4413      	add	r3, r2
 800b77e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b782:	021b      	lsls	r3, r3, #8
 800b784:	68ba      	ldr	r2, [r7, #8]
 800b786:	4313      	orrs	r3, r2
 800b788:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	f003 0301 	and.w	r3, r3, #1
 800b790:	2b00      	cmp	r3, #0
 800b792:	d002      	beq.n	800b79a <get_fat+0xba>
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	091b      	lsrs	r3, r3, #4
 800b798:	e002      	b.n	800b7a0 <get_fat+0xc0>
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7a0:	617b      	str	r3, [r7, #20]
			break;
 800b7a2:	e03f      	b.n	800b824 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	6a1a      	ldr	r2, [r3, #32]
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	0a1b      	lsrs	r3, r3, #8
 800b7ac:	4413      	add	r3, r2
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6938      	ldr	r0, [r7, #16]
 800b7b2:	f7ff ff49 	bl	800b648 <move_window>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d130      	bne.n	800b81e <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	005b      	lsls	r3, r3, #1
 800b7c6:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b7ca:	4413      	add	r3, r2
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7ff fd29 	bl	800b224 <ld_word>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	617b      	str	r3, [r7, #20]
			break;
 800b7d6:	e025      	b.n	800b824 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	6a1a      	ldr	r2, [r3, #32]
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	09db      	lsrs	r3, r3, #7
 800b7e0:	4413      	add	r3, r2
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	6938      	ldr	r0, [r7, #16]
 800b7e6:	f7ff ff2f 	bl	800b648 <move_window>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d118      	bne.n	800b822 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b7fe:	4413      	add	r3, r2
 800b800:	4618      	mov	r0, r3
 800b802:	f7ff fd28 	bl	800b256 <ld_dword>
 800b806:	4603      	mov	r3, r0
 800b808:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b80c:	617b      	str	r3, [r7, #20]
			break;
 800b80e:	e009      	b.n	800b824 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b810:	2301      	movs	r3, #1
 800b812:	617b      	str	r3, [r7, #20]
 800b814:	e006      	b.n	800b824 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b816:	bf00      	nop
 800b818:	e004      	b.n	800b824 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b81a:	bf00      	nop
 800b81c:	e002      	b.n	800b824 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b81e:	bf00      	nop
 800b820:	e000      	b.n	800b824 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b822:	bf00      	nop
		}
	}

	return val;
 800b824:	697b      	ldr	r3, [r7, #20]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3718      	adds	r7, #24
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b82e:	b590      	push	{r4, r7, lr}
 800b830:	b089      	sub	sp, #36	@ 0x24
 800b832:	af00      	add	r7, sp, #0
 800b834:	60f8      	str	r0, [r7, #12]
 800b836:	60b9      	str	r1, [r7, #8]
 800b838:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b83a:	2302      	movs	r3, #2
 800b83c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	2b01      	cmp	r3, #1
 800b842:	f240 80d9 	bls.w	800b9f8 <put_fat+0x1ca>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	f080 80d3 	bcs.w	800b9f8 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	2b03      	cmp	r3, #3
 800b858:	f000 8096 	beq.w	800b988 <put_fat+0x15a>
 800b85c:	2b03      	cmp	r3, #3
 800b85e:	f300 80cb 	bgt.w	800b9f8 <put_fat+0x1ca>
 800b862:	2b01      	cmp	r3, #1
 800b864:	d002      	beq.n	800b86c <put_fat+0x3e>
 800b866:	2b02      	cmp	r3, #2
 800b868:	d06e      	beq.n	800b948 <put_fat+0x11a>
 800b86a:	e0c5      	b.n	800b9f8 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	61bb      	str	r3, [r7, #24]
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	085b      	lsrs	r3, r3, #1
 800b874:	69ba      	ldr	r2, [r7, #24]
 800b876:	4413      	add	r3, r2
 800b878:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6a1a      	ldr	r2, [r3, #32]
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	0a5b      	lsrs	r3, r3, #9
 800b882:	4413      	add	r3, r2
 800b884:	4619      	mov	r1, r3
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	f7ff fede 	bl	800b648 <move_window>
 800b88c:	4603      	mov	r3, r0
 800b88e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b890:	7ffb      	ldrb	r3, [r7, #31]
 800b892:	2b00      	cmp	r3, #0
 800b894:	f040 80a9 	bne.w	800b9ea <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	1c59      	adds	r1, r3, #1
 800b8a2:	61b9      	str	r1, [r7, #24]
 800b8a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8a8:	4413      	add	r3, r2
 800b8aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	f003 0301 	and.w	r3, r3, #1
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00d      	beq.n	800b8d2 <put_fat+0xa4>
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	b25b      	sxtb	r3, r3
 800b8bc:	f003 030f 	and.w	r3, r3, #15
 800b8c0:	b25a      	sxtb	r2, r3
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	b25b      	sxtb	r3, r3
 800b8c6:	011b      	lsls	r3, r3, #4
 800b8c8:	b25b      	sxtb	r3, r3
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	b25b      	sxtb	r3, r3
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	e001      	b.n	800b8d6 <put_fat+0xa8>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	697a      	ldr	r2, [r7, #20]
 800b8d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6a1a      	ldr	r2, [r3, #32]
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	0a5b      	lsrs	r3, r3, #9
 800b8e8:	4413      	add	r3, r2
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	f7ff feab 	bl	800b648 <move_window>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b8f6:	7ffb      	ldrb	r3, [r7, #31]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d178      	bne.n	800b9ee <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b908:	4413      	add	r3, r2
 800b90a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	f003 0301 	and.w	r3, r3, #1
 800b912:	2b00      	cmp	r3, #0
 800b914:	d003      	beq.n	800b91e <put_fat+0xf0>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	091b      	lsrs	r3, r3, #4
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	e00e      	b.n	800b93c <put_fat+0x10e>
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	b25b      	sxtb	r3, r3
 800b924:	f023 030f 	bic.w	r3, r3, #15
 800b928:	b25a      	sxtb	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	0a1b      	lsrs	r3, r3, #8
 800b92e:	b25b      	sxtb	r3, r3
 800b930:	f003 030f 	and.w	r3, r3, #15
 800b934:	b25b      	sxtb	r3, r3
 800b936:	4313      	orrs	r3, r2
 800b938:	b25b      	sxtb	r3, r3
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	697a      	ldr	r2, [r7, #20]
 800b93e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2201      	movs	r2, #1
 800b944:	70da      	strb	r2, [r3, #3]
			break;
 800b946:	e057      	b.n	800b9f8 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6a1a      	ldr	r2, [r3, #32]
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	0a1b      	lsrs	r3, r3, #8
 800b950:	4413      	add	r3, r2
 800b952:	4619      	mov	r1, r3
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f7ff fe77 	bl	800b648 <move_window>
 800b95a:	4603      	mov	r3, r0
 800b95c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b95e:	7ffb      	ldrb	r3, [r7, #31]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d146      	bne.n	800b9f2 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	005b      	lsls	r3, r3, #1
 800b96e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b972:	4413      	add	r3, r2
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	b292      	uxth	r2, r2
 800b978:	4611      	mov	r1, r2
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7ff fc8e 	bl	800b29c <st_word>
			fs->wflag = 1;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2201      	movs	r2, #1
 800b984:	70da      	strb	r2, [r3, #3]
			break;
 800b986:	e037      	b.n	800b9f8 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6a1a      	ldr	r2, [r3, #32]
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	09db      	lsrs	r3, r3, #7
 800b990:	4413      	add	r3, r2
 800b992:	4619      	mov	r1, r3
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f7ff fe57 	bl	800b648 <move_window>
 800b99a:	4603      	mov	r3, r0
 800b99c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b99e:	7ffb      	ldrb	r3, [r7, #31]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d128      	bne.n	800b9f6 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b9b8:	4413      	add	r3, r2
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7ff fc4b 	bl	800b256 <ld_dword>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b9c6:	4323      	orrs	r3, r4
 800b9c8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b9d8:	4413      	add	r3, r2
 800b9da:	6879      	ldr	r1, [r7, #4]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7ff fc78 	bl	800b2d2 <st_dword>
			fs->wflag = 1;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	70da      	strb	r2, [r3, #3]
			break;
 800b9e8:	e006      	b.n	800b9f8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b9ea:	bf00      	nop
 800b9ec:	e004      	b.n	800b9f8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b9ee:	bf00      	nop
 800b9f0:	e002      	b.n	800b9f8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b9f2:	bf00      	nop
 800b9f4:	e000      	b.n	800b9f8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b9f6:	bf00      	nop
		}
	}
	return res;
 800b9f8:	7ffb      	ldrb	r3, [r7, #31]
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3724      	adds	r7, #36	@ 0x24
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd90      	pop	{r4, r7, pc}

0800ba02 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b088      	sub	sp, #32
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
 800ba0a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10d      	bne.n	800ba34 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d004      	beq.n	800ba2e <create_chain+0x2c>
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	695b      	ldr	r3, [r3, #20]
 800ba28:	69ba      	ldr	r2, [r7, #24]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d31b      	bcc.n	800ba66 <create_chain+0x64>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	61bb      	str	r3, [r7, #24]
 800ba32:	e018      	b.n	800ba66 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ba34:	6839      	ldr	r1, [r7, #0]
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7ff fe52 	bl	800b6e0 <get_fat>
 800ba3c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d801      	bhi.n	800ba48 <create_chain+0x46>
 800ba44:	2301      	movs	r3, #1
 800ba46:	e070      	b.n	800bb2a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba4e:	d101      	bne.n	800ba54 <create_chain+0x52>
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	e06a      	b.n	800bb2a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	695b      	ldr	r3, [r3, #20]
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d201      	bcs.n	800ba62 <create_chain+0x60>
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	e063      	b.n	800bb2a <create_chain+0x128>
		scl = clst;
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	695b      	ldr	r3, [r3, #20]
 800ba74:	69fa      	ldr	r2, [r7, #28]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d307      	bcc.n	800ba8a <create_chain+0x88>
				ncl = 2;
 800ba7a:	2302      	movs	r3, #2
 800ba7c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ba7e:	69fa      	ldr	r2, [r7, #28]
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d901      	bls.n	800ba8a <create_chain+0x88>
 800ba86:	2300      	movs	r3, #0
 800ba88:	e04f      	b.n	800bb2a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ba8a:	69f9      	ldr	r1, [r7, #28]
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f7ff fe27 	bl	800b6e0 <get_fat>
 800ba92:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00e      	beq.n	800bab8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d003      	beq.n	800baa8 <create_chain+0xa6>
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa6:	d101      	bne.n	800baac <create_chain+0xaa>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	e03e      	b.n	800bb2a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800baac:	69fa      	ldr	r2, [r7, #28]
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d1da      	bne.n	800ba6a <create_chain+0x68>
 800bab4:	2300      	movs	r3, #0
 800bab6:	e038      	b.n	800bb2a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bab8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800baba:	f04f 32ff 	mov.w	r2, #4294967295
 800babe:	69f9      	ldr	r1, [r7, #28]
 800bac0:	6938      	ldr	r0, [r7, #16]
 800bac2:	f7ff feb4 	bl	800b82e <put_fat>
 800bac6:	4603      	mov	r3, r0
 800bac8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800baca:	7dfb      	ldrb	r3, [r7, #23]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d109      	bne.n	800bae4 <create_chain+0xe2>
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d006      	beq.n	800bae4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bad6:	69fa      	ldr	r2, [r7, #28]
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	6938      	ldr	r0, [r7, #16]
 800badc:	f7ff fea7 	bl	800b82e <put_fat>
 800bae0:	4603      	mov	r3, r0
 800bae2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bae4:	7dfb      	ldrb	r3, [r7, #23]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d116      	bne.n	800bb18 <create_chain+0x116>
		fs->last_clst = ncl;
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	69fa      	ldr	r2, [r7, #28]
 800baee:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	691a      	ldr	r2, [r3, #16]
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	695b      	ldr	r3, [r3, #20]
 800baf8:	3b02      	subs	r3, #2
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d804      	bhi.n	800bb08 <create_chain+0x106>
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	1e5a      	subs	r2, r3, #1
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	791b      	ldrb	r3, [r3, #4]
 800bb0c:	f043 0301 	orr.w	r3, r3, #1
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	711a      	strb	r2, [r3, #4]
 800bb16:	e007      	b.n	800bb28 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bb18:	7dfb      	ldrb	r3, [r7, #23]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d102      	bne.n	800bb24 <create_chain+0x122>
 800bb1e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb22:	e000      	b.n	800bb26 <create_chain+0x124>
 800bb24:	2301      	movs	r3, #1
 800bb26:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bb28:	69fb      	ldr	r3, [r7, #28]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3720      	adds	r7, #32
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b086      	sub	sp, #24
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
 800bb3a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb48:	d204      	bcs.n	800bb54 <dir_sdi+0x22>
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	f003 031f 	and.w	r3, r3, #31
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d001      	beq.n	800bb58 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bb54:	2302      	movs	r3, #2
 800bb56:	e063      	b.n	800bc20 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d106      	bne.n	800bb78 <dir_sdi+0x46>
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	d902      	bls.n	800bb78 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb76:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d10c      	bne.n	800bb98 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	095b      	lsrs	r3, r3, #5
 800bb82:	693a      	ldr	r2, [r7, #16]
 800bb84:	8912      	ldrh	r2, [r2, #8]
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d301      	bcc.n	800bb8e <dir_sdi+0x5c>
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	e048      	b.n	800bc20 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	61da      	str	r2, [r3, #28]
 800bb96:	e029      	b.n	800bbec <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	895b      	ldrh	r3, [r3, #10]
 800bb9c:	025b      	lsls	r3, r3, #9
 800bb9e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bba0:	e019      	b.n	800bbd6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6979      	ldr	r1, [r7, #20]
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7ff fd9a 	bl	800b6e0 <get_fat>
 800bbac:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb4:	d101      	bne.n	800bbba <dir_sdi+0x88>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e032      	b.n	800bc20 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d904      	bls.n	800bbca <dir_sdi+0x98>
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	695b      	ldr	r3, [r3, #20]
 800bbc4:	697a      	ldr	r2, [r7, #20]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d301      	bcc.n	800bbce <dir_sdi+0x9c>
 800bbca:	2302      	movs	r3, #2
 800bbcc:	e028      	b.n	800bc20 <dir_sdi+0xee>
			ofs -= csz;
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d2e1      	bcs.n	800bba2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800bbde:	6979      	ldr	r1, [r7, #20]
 800bbe0:	6938      	ldr	r0, [r7, #16]
 800bbe2:	f7ff fd5e 	bl	800b6a2 <clust2sect>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	697a      	ldr	r2, [r7, #20]
 800bbf0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	69db      	ldr	r3, [r3, #28]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <dir_sdi+0xcc>
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	e010      	b.n	800bc20 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	69da      	ldr	r2, [r3, #28]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	0a5b      	lsrs	r3, r3, #9
 800bc06:	441a      	add	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc18:	441a      	add	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3718      	adds	r7, #24
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b086      	sub	sp, #24
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	695b      	ldr	r3, [r3, #20]
 800bc3c:	3320      	adds	r3, #32
 800bc3e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d003      	beq.n	800bc50 <dir_next+0x28>
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc4e:	d301      	bcc.n	800bc54 <dir_next+0x2c>
 800bc50:	2304      	movs	r3, #4
 800bc52:	e0aa      	b.n	800bdaa <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f040 8098 	bne.w	800bd90 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	69db      	ldr	r3, [r3, #28]
 800bc64:	1c5a      	adds	r2, r3, #1
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	699b      	ldr	r3, [r3, #24]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d10b      	bne.n	800bc8a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	095b      	lsrs	r3, r3, #5
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	8912      	ldrh	r2, [r2, #8]
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	f0c0 8088 	bcc.w	800bd90 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	61da      	str	r2, [r3, #28]
 800bc86:	2304      	movs	r3, #4
 800bc88:	e08f      	b.n	800bdaa <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	0a5b      	lsrs	r3, r3, #9
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	8952      	ldrh	r2, [r2, #10]
 800bc92:	3a01      	subs	r2, #1
 800bc94:	4013      	ands	r3, r2
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d17a      	bne.n	800bd90 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	699b      	ldr	r3, [r3, #24]
 800bca0:	4619      	mov	r1, r3
 800bca2:	4610      	mov	r0, r2
 800bca4:	f7ff fd1c 	bl	800b6e0 <get_fat>
 800bca8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d801      	bhi.n	800bcb4 <dir_next+0x8c>
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	e07a      	b.n	800bdaa <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcba:	d101      	bne.n	800bcc0 <dir_next+0x98>
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	e074      	b.n	800bdaa <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	695b      	ldr	r3, [r3, #20]
 800bcc4:	697a      	ldr	r2, [r7, #20]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d358      	bcc.n	800bd7c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d104      	bne.n	800bcda <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	61da      	str	r2, [r3, #28]
 800bcd6:	2304      	movs	r3, #4
 800bcd8:	e067      	b.n	800bdaa <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	699b      	ldr	r3, [r3, #24]
 800bce0:	4619      	mov	r1, r3
 800bce2:	4610      	mov	r0, r2
 800bce4:	f7ff fe8d 	bl	800ba02 <create_chain>
 800bce8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d101      	bne.n	800bcf4 <dir_next+0xcc>
 800bcf0:	2307      	movs	r3, #7
 800bcf2:	e05a      	b.n	800bdaa <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d101      	bne.n	800bcfe <dir_next+0xd6>
 800bcfa:	2302      	movs	r3, #2
 800bcfc:	e055      	b.n	800bdaa <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd04:	d101      	bne.n	800bd0a <dir_next+0xe2>
 800bd06:	2301      	movs	r3, #1
 800bd08:	e04f      	b.n	800bdaa <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	f7ff fc58 	bl	800b5c0 <sync_window>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d001      	beq.n	800bd1a <dir_next+0xf2>
 800bd16:	2301      	movs	r3, #1
 800bd18:	e047      	b.n	800bdaa <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	3330      	adds	r3, #48	@ 0x30
 800bd1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd22:	2100      	movs	r1, #0
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7ff fb00 	bl	800b32a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	613b      	str	r3, [r7, #16]
 800bd2e:	6979      	ldr	r1, [r7, #20]
 800bd30:	68f8      	ldr	r0, [r7, #12]
 800bd32:	f7ff fcb6 	bl	800b6a2 <clust2sect>
 800bd36:	4602      	mov	r2, r0
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bd3c:	e012      	b.n	800bd64 <dir_next+0x13c>
						fs->wflag = 1;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2201      	movs	r2, #1
 800bd42:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bd44:	68f8      	ldr	r0, [r7, #12]
 800bd46:	f7ff fc3b 	bl	800b5c0 <sync_window>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d001      	beq.n	800bd54 <dir_next+0x12c>
 800bd50:	2301      	movs	r3, #1
 800bd52:	e02a      	b.n	800bdaa <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	3301      	adds	r3, #1
 800bd58:	613b      	str	r3, [r7, #16]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd5e:	1c5a      	adds	r2, r3, #1
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	895b      	ldrh	r3, [r3, #10]
 800bd68:	461a      	mov	r2, r3
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d3e6      	bcc.n	800bd3e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	1ad2      	subs	r2, r2, r3
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bd82:	6979      	ldr	r1, [r7, #20]
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	f7ff fc8c 	bl	800b6a2 <clust2sect>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	68ba      	ldr	r2, [r7, #8]
 800bd94:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda2:	441a      	add	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3718      	adds	r7, #24
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b084      	sub	sp, #16
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	331a      	adds	r3, #26
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7ff fa2f 	bl	800b224 <ld_word>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	2b03      	cmp	r3, #3
 800bdd0:	d109      	bne.n	800bde6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	3314      	adds	r3, #20
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7ff fa24 	bl	800b224 <ld_word>
 800bddc:	4603      	mov	r3, r0
 800bdde:	041b      	lsls	r3, r3, #16
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	4313      	orrs	r3, r2
 800bde4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bde6:	68fb      	ldr	r3, [r7, #12]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b086      	sub	sp, #24
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800bdfa:	2304      	movs	r3, #4
 800bdfc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800be04:	e03c      	b.n	800be80 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	69db      	ldr	r3, [r3, #28]
 800be0a:	4619      	mov	r1, r3
 800be0c:	6938      	ldr	r0, [r7, #16]
 800be0e:	f7ff fc1b 	bl	800b648 <move_window>
 800be12:	4603      	mov	r3, r0
 800be14:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800be16:	7dfb      	ldrb	r3, [r7, #23]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d136      	bne.n	800be8a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a1b      	ldr	r3, [r3, #32]
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800be24:	7bfb      	ldrb	r3, [r7, #15]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d102      	bne.n	800be30 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800be2a:	2304      	movs	r3, #4
 800be2c:	75fb      	strb	r3, [r7, #23]
 800be2e:	e031      	b.n	800be94 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a1b      	ldr	r3, [r3, #32]
 800be34:	330b      	adds	r3, #11
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be3c:	73bb      	strb	r3, [r7, #14]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	7bba      	ldrb	r2, [r7, #14]
 800be42:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800be44:	7bfb      	ldrb	r3, [r7, #15]
 800be46:	2be5      	cmp	r3, #229	@ 0xe5
 800be48:	d011      	beq.n	800be6e <dir_read+0x7e>
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
 800be4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800be4e:	d00e      	beq.n	800be6e <dir_read+0x7e>
 800be50:	7bbb      	ldrb	r3, [r7, #14]
 800be52:	2b0f      	cmp	r3, #15
 800be54:	d00b      	beq.n	800be6e <dir_read+0x7e>
 800be56:	7bbb      	ldrb	r3, [r7, #14]
 800be58:	f023 0320 	bic.w	r3, r3, #32
 800be5c:	2b08      	cmp	r3, #8
 800be5e:	bf0c      	ite	eq
 800be60:	2301      	moveq	r3, #1
 800be62:	2300      	movne	r3, #0
 800be64:	b2db      	uxtb	r3, r3
 800be66:	461a      	mov	r2, r3
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d00f      	beq.n	800be8e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800be6e:	2100      	movs	r1, #0
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f7ff fed9 	bl	800bc28 <dir_next>
 800be76:	4603      	mov	r3, r0
 800be78:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800be7a:	7dfb      	ldrb	r3, [r7, #23]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d108      	bne.n	800be92 <dir_read+0xa2>
	while (dp->sect) {
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	69db      	ldr	r3, [r3, #28]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d1be      	bne.n	800be06 <dir_read+0x16>
 800be88:	e004      	b.n	800be94 <dir_read+0xa4>
		if (res != FR_OK) break;
 800be8a:	bf00      	nop
 800be8c:	e002      	b.n	800be94 <dir_read+0xa4>
				break;
 800be8e:	bf00      	nop
 800be90:	e000      	b.n	800be94 <dir_read+0xa4>
		if (res != FR_OK) break;
 800be92:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800be94:	7dfb      	ldrb	r3, [r7, #23]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d002      	beq.n	800bea0 <dir_read+0xb0>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	61da      	str	r2, [r3, #28]
	return res;
 800bea0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3718      	adds	r7, #24
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b086      	sub	sp, #24
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800beb8:	2100      	movs	r1, #0
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7ff fe39 	bl	800bb32 <dir_sdi>
 800bec0:	4603      	mov	r3, r0
 800bec2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bec4:	7dfb      	ldrb	r3, [r7, #23]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d001      	beq.n	800bece <dir_find+0x24>
 800beca:	7dfb      	ldrb	r3, [r7, #23]
 800becc:	e03e      	b.n	800bf4c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	69db      	ldr	r3, [r3, #28]
 800bed2:	4619      	mov	r1, r3
 800bed4:	6938      	ldr	r0, [r7, #16]
 800bed6:	f7ff fbb7 	bl	800b648 <move_window>
 800beda:	4603      	mov	r3, r0
 800bedc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bede:	7dfb      	ldrb	r3, [r7, #23]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d12f      	bne.n	800bf44 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6a1b      	ldr	r3, [r3, #32]
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800beec:	7bfb      	ldrb	r3, [r7, #15]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d102      	bne.n	800bef8 <dir_find+0x4e>
 800bef2:	2304      	movs	r3, #4
 800bef4:	75fb      	strb	r3, [r7, #23]
 800bef6:	e028      	b.n	800bf4a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a1b      	ldr	r3, [r3, #32]
 800befc:	330b      	adds	r3, #11
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf04:	b2da      	uxtb	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6a1b      	ldr	r3, [r3, #32]
 800bf0e:	330b      	adds	r3, #11
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	f003 0308 	and.w	r3, r3, #8
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d10a      	bne.n	800bf30 <dir_find+0x86>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a18      	ldr	r0, [r3, #32]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	3324      	adds	r3, #36	@ 0x24
 800bf22:	220b      	movs	r2, #11
 800bf24:	4619      	mov	r1, r3
 800bf26:	f7ff fa1b 	bl	800b360 <mem_cmp>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d00b      	beq.n	800bf48 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bf30:	2100      	movs	r1, #0
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f7ff fe78 	bl	800bc28 <dir_next>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bf3c:	7dfb      	ldrb	r3, [r7, #23]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d0c5      	beq.n	800bece <dir_find+0x24>
 800bf42:	e002      	b.n	800bf4a <dir_find+0xa0>
		if (res != FR_OK) break;
 800bf44:	bf00      	nop
 800bf46:	e000      	b.n	800bf4a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bf48:	bf00      	nop

	return res;
 800bf4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3718      	adds	r7, #24
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b086      	sub	sp, #24
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	2200      	movs	r2, #0
 800bf62:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	69db      	ldr	r3, [r3, #28]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d04f      	beq.n	800c00c <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	613b      	str	r3, [r7, #16]
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800bf74:	e022      	b.n	800bfbc <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6a1a      	ldr	r2, [r3, #32]
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	1c59      	adds	r1, r3, #1
 800bf7e:	6179      	str	r1, [r7, #20]
 800bf80:	4413      	add	r3, r2
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800bf86:	7bfb      	ldrb	r3, [r7, #15]
 800bf88:	2b20      	cmp	r3, #32
 800bf8a:	d016      	beq.n	800bfba <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800bf8c:	7bfb      	ldrb	r3, [r7, #15]
 800bf8e:	2b05      	cmp	r3, #5
 800bf90:	d101      	bne.n	800bf96 <get_fileinfo+0x42>
 800bf92:	23e5      	movs	r3, #229	@ 0xe5
 800bf94:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	2b09      	cmp	r3, #9
 800bf9a:	d106      	bne.n	800bfaa <get_fileinfo+0x56>
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	1c5a      	adds	r2, r3, #1
 800bfa0:	613a      	str	r2, [r7, #16]
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	222e      	movs	r2, #46	@ 0x2e
 800bfa8:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	1c5a      	adds	r2, r3, #1
 800bfae:	613a      	str	r2, [r7, #16]
 800bfb0:	683a      	ldr	r2, [r7, #0]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	7bfa      	ldrb	r2, [r7, #15]
 800bfb6:	725a      	strb	r2, [r3, #9]
 800bfb8:	e000      	b.n	800bfbc <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800bfba:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	2b0a      	cmp	r3, #10
 800bfc0:	d9d9      	bls.n	800bf76 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800bfc2:	683a      	ldr	r2, [r7, #0]
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	3309      	adds	r3, #9
 800bfca:	2200      	movs	r2, #0
 800bfcc:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6a1b      	ldr	r3, [r3, #32]
 800bfd2:	7ada      	ldrb	r2, [r3, #11]
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6a1b      	ldr	r3, [r3, #32]
 800bfdc:	331c      	adds	r3, #28
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7ff f939 	bl	800b256 <ld_dword>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6a1b      	ldr	r3, [r3, #32]
 800bfee:	3316      	adds	r3, #22
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7ff f930 	bl	800b256 <ld_dword>
 800bff6:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	b29a      	uxth	r2, r3
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	80da      	strh	r2, [r3, #6]
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	0c1b      	lsrs	r3, r3, #16
 800c004:	b29a      	uxth	r2, r3
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	809a      	strh	r2, [r3, #4]
 800c00a:	e000      	b.n	800c00e <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c00c:	bf00      	nop
}
 800c00e:	3718      	adds	r7, #24
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b088      	sub	sp, #32
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	60fb      	str	r3, [r7, #12]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3324      	adds	r3, #36	@ 0x24
 800c028:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c02a:	220b      	movs	r2, #11
 800c02c:	2120      	movs	r1, #32
 800c02e:	68b8      	ldr	r0, [r7, #8]
 800c030:	f7ff f97b 	bl	800b32a <mem_set>
	si = i = 0; ni = 8;
 800c034:	2300      	movs	r3, #0
 800c036:	613b      	str	r3, [r7, #16]
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	61fb      	str	r3, [r7, #28]
 800c03c:	2308      	movs	r3, #8
 800c03e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	1c5a      	adds	r2, r3, #1
 800c044:	61fa      	str	r2, [r7, #28]
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	4413      	add	r3, r2
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c04e:	7efb      	ldrb	r3, [r7, #27]
 800c050:	2b20      	cmp	r3, #32
 800c052:	d94e      	bls.n	800c0f2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c054:	7efb      	ldrb	r3, [r7, #27]
 800c056:	2b2f      	cmp	r3, #47	@ 0x2f
 800c058:	d006      	beq.n	800c068 <create_name+0x54>
 800c05a:	7efb      	ldrb	r3, [r7, #27]
 800c05c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c05e:	d110      	bne.n	800c082 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c060:	e002      	b.n	800c068 <create_name+0x54>
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	3301      	adds	r3, #1
 800c066:	61fb      	str	r3, [r7, #28]
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	4413      	add	r3, r2
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	2b2f      	cmp	r3, #47	@ 0x2f
 800c072:	d0f6      	beq.n	800c062 <create_name+0x4e>
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	4413      	add	r3, r2
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c07e:	d0f0      	beq.n	800c062 <create_name+0x4e>
			break;
 800c080:	e038      	b.n	800c0f4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c082:	7efb      	ldrb	r3, [r7, #27]
 800c084:	2b2e      	cmp	r3, #46	@ 0x2e
 800c086:	d003      	beq.n	800c090 <create_name+0x7c>
 800c088:	693a      	ldr	r2, [r7, #16]
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d30c      	bcc.n	800c0aa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	2b0b      	cmp	r3, #11
 800c094:	d002      	beq.n	800c09c <create_name+0x88>
 800c096:	7efb      	ldrb	r3, [r7, #27]
 800c098:	2b2e      	cmp	r3, #46	@ 0x2e
 800c09a:	d001      	beq.n	800c0a0 <create_name+0x8c>
 800c09c:	2306      	movs	r3, #6
 800c09e:	e044      	b.n	800c12a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c0a0:	2308      	movs	r3, #8
 800c0a2:	613b      	str	r3, [r7, #16]
 800c0a4:	230b      	movs	r3, #11
 800c0a6:	617b      	str	r3, [r7, #20]
			continue;
 800c0a8:	e022      	b.n	800c0f0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c0aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	da04      	bge.n	800c0bc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c0b2:	7efb      	ldrb	r3, [r7, #27]
 800c0b4:	3b80      	subs	r3, #128	@ 0x80
 800c0b6:	4a1f      	ldr	r2, [pc, #124]	@ (800c134 <create_name+0x120>)
 800c0b8:	5cd3      	ldrb	r3, [r2, r3]
 800c0ba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c0bc:	7efb      	ldrb	r3, [r7, #27]
 800c0be:	4619      	mov	r1, r3
 800c0c0:	481d      	ldr	r0, [pc, #116]	@ (800c138 <create_name+0x124>)
 800c0c2:	f7ff f974 	bl	800b3ae <chk_chr>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <create_name+0xbc>
 800c0cc:	2306      	movs	r3, #6
 800c0ce:	e02c      	b.n	800c12a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c0d0:	7efb      	ldrb	r3, [r7, #27]
 800c0d2:	2b60      	cmp	r3, #96	@ 0x60
 800c0d4:	d905      	bls.n	800c0e2 <create_name+0xce>
 800c0d6:	7efb      	ldrb	r3, [r7, #27]
 800c0d8:	2b7a      	cmp	r3, #122	@ 0x7a
 800c0da:	d802      	bhi.n	800c0e2 <create_name+0xce>
 800c0dc:	7efb      	ldrb	r3, [r7, #27]
 800c0de:	3b20      	subs	r3, #32
 800c0e0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	1c5a      	adds	r2, r3, #1
 800c0e6:	613a      	str	r2, [r7, #16]
 800c0e8:	68ba      	ldr	r2, [r7, #8]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	7efa      	ldrb	r2, [r7, #27]
 800c0ee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c0f0:	e7a6      	b.n	800c040 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c0f2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	69fb      	ldr	r3, [r7, #28]
 800c0f8:	441a      	add	r2, r3
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d101      	bne.n	800c108 <create_name+0xf4>
 800c104:	2306      	movs	r3, #6
 800c106:	e010      	b.n	800c12a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	2be5      	cmp	r3, #229	@ 0xe5
 800c10e:	d102      	bne.n	800c116 <create_name+0x102>
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	2205      	movs	r2, #5
 800c114:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c116:	7efb      	ldrb	r3, [r7, #27]
 800c118:	2b20      	cmp	r3, #32
 800c11a:	d801      	bhi.n	800c120 <create_name+0x10c>
 800c11c:	2204      	movs	r2, #4
 800c11e:	e000      	b.n	800c122 <create_name+0x10e>
 800c120:	2200      	movs	r2, #0
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	330b      	adds	r3, #11
 800c126:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c128:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3720      	adds	r7, #32
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	0800e968 	.word	0x0800e968
 800c138:	0800e330 	.word	0x0800e330

0800c13c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c150:	e002      	b.n	800c158 <follow_path+0x1c>
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	3301      	adds	r3, #1
 800c156:	603b      	str	r3, [r7, #0]
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c15e:	d0f8      	beq.n	800c152 <follow_path+0x16>
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	2b5c      	cmp	r3, #92	@ 0x5c
 800c166:	d0f4      	beq.n	800c152 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	2200      	movs	r2, #0
 800c16c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	2b1f      	cmp	r3, #31
 800c174:	d80a      	bhi.n	800c18c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2280      	movs	r2, #128	@ 0x80
 800c17a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c17e:	2100      	movs	r1, #0
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f7ff fcd6 	bl	800bb32 <dir_sdi>
 800c186:	4603      	mov	r3, r0
 800c188:	75fb      	strb	r3, [r7, #23]
 800c18a:	e043      	b.n	800c214 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c18c:	463b      	mov	r3, r7
 800c18e:	4619      	mov	r1, r3
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7ff ff3f 	bl	800c014 <create_name>
 800c196:	4603      	mov	r3, r0
 800c198:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c19a:	7dfb      	ldrb	r3, [r7, #23]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d134      	bne.n	800c20a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f7ff fe82 	bl	800beaa <dir_find>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c1b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c1b2:	7dfb      	ldrb	r3, [r7, #23]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00a      	beq.n	800c1ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c1b8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ba:	2b04      	cmp	r3, #4
 800c1bc:	d127      	bne.n	800c20e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c1be:	7afb      	ldrb	r3, [r7, #11]
 800c1c0:	f003 0304 	and.w	r3, r3, #4
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d122      	bne.n	800c20e <follow_path+0xd2>
 800c1c8:	2305      	movs	r3, #5
 800c1ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c1cc:	e01f      	b.n	800c20e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c1ce:	7afb      	ldrb	r3, [r7, #11]
 800c1d0:	f003 0304 	and.w	r3, r3, #4
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d11c      	bne.n	800c212 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	799b      	ldrb	r3, [r3, #6]
 800c1dc:	f003 0310 	and.w	r3, r3, #16
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d102      	bne.n	800c1ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c1e4:	2305      	movs	r3, #5
 800c1e6:	75fb      	strb	r3, [r7, #23]
 800c1e8:	e014      	b.n	800c214 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1f8:	4413      	add	r3, r2
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f7ff fdd8 	bl	800bdb2 <ld_clust>
 800c202:	4602      	mov	r2, r0
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c208:	e7c0      	b.n	800c18c <follow_path+0x50>
			if (res != FR_OK) break;
 800c20a:	bf00      	nop
 800c20c:	e002      	b.n	800c214 <follow_path+0xd8>
				break;
 800c20e:	bf00      	nop
 800c210:	e000      	b.n	800c214 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c212:	bf00      	nop
			}
		}
	}

	return res;
 800c214:	7dfb      	ldrb	r3, [r7, #23]
}
 800c216:	4618      	mov	r0, r3
 800c218:	3718      	adds	r7, #24
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c21e:	b480      	push	{r7}
 800c220:	b087      	sub	sp, #28
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c226:	f04f 33ff 	mov.w	r3, #4294967295
 800c22a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d031      	beq.n	800c298 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	617b      	str	r3, [r7, #20]
 800c23a:	e002      	b.n	800c242 <get_ldnumber+0x24>
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	3301      	adds	r3, #1
 800c240:	617b      	str	r3, [r7, #20]
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	2b20      	cmp	r3, #32
 800c248:	d903      	bls.n	800c252 <get_ldnumber+0x34>
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	2b3a      	cmp	r3, #58	@ 0x3a
 800c250:	d1f4      	bne.n	800c23c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	2b3a      	cmp	r3, #58	@ 0x3a
 800c258:	d11c      	bne.n	800c294 <get_ldnumber+0x76>
			tp = *path;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	1c5a      	adds	r2, r3, #1
 800c264:	60fa      	str	r2, [r7, #12]
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	3b30      	subs	r3, #48	@ 0x30
 800c26a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	2b09      	cmp	r3, #9
 800c270:	d80e      	bhi.n	800c290 <get_ldnumber+0x72>
 800c272:	68fa      	ldr	r2, [r7, #12]
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	429a      	cmp	r2, r3
 800c278:	d10a      	bne.n	800c290 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d107      	bne.n	800c290 <get_ldnumber+0x72>
					vol = (int)i;
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	3301      	adds	r3, #1
 800c288:	617b      	str	r3, [r7, #20]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	697a      	ldr	r2, [r7, #20]
 800c28e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	e002      	b.n	800c29a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c294:	2300      	movs	r3, #0
 800c296:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c298:	693b      	ldr	r3, [r7, #16]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	371c      	adds	r7, #28
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr
	...

0800c2a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	70da      	strb	r2, [r3, #3]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c2be:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f7ff f9c0 	bl	800b648 <move_window>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d001      	beq.n	800c2d2 <check_fs+0x2a>
 800c2ce:	2304      	movs	r3, #4
 800c2d0:	e038      	b.n	800c344 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	3330      	adds	r3, #48	@ 0x30
 800c2d6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fe ffa2 	bl	800b224 <ld_word>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d001      	beq.n	800c2f0 <check_fs+0x48>
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	e029      	b.n	800c344 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c2f6:	2be9      	cmp	r3, #233	@ 0xe9
 800c2f8:	d009      	beq.n	800c30e <check_fs+0x66>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c300:	2beb      	cmp	r3, #235	@ 0xeb
 800c302:	d11e      	bne.n	800c342 <check_fs+0x9a>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c30a:	2b90      	cmp	r3, #144	@ 0x90
 800c30c:	d119      	bne.n	800c342 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	3330      	adds	r3, #48	@ 0x30
 800c312:	3336      	adds	r3, #54	@ 0x36
 800c314:	4618      	mov	r0, r3
 800c316:	f7fe ff9e 	bl	800b256 <ld_dword>
 800c31a:	4603      	mov	r3, r0
 800c31c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c320:	4a0a      	ldr	r2, [pc, #40]	@ (800c34c <check_fs+0xa4>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d101      	bne.n	800c32a <check_fs+0x82>
 800c326:	2300      	movs	r3, #0
 800c328:	e00c      	b.n	800c344 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	3330      	adds	r3, #48	@ 0x30
 800c32e:	3352      	adds	r3, #82	@ 0x52
 800c330:	4618      	mov	r0, r3
 800c332:	f7fe ff90 	bl	800b256 <ld_dword>
 800c336:	4603      	mov	r3, r0
 800c338:	4a05      	ldr	r2, [pc, #20]	@ (800c350 <check_fs+0xa8>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d101      	bne.n	800c342 <check_fs+0x9a>
 800c33e:	2300      	movs	r3, #0
 800c340:	e000      	b.n	800c344 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c342:	2302      	movs	r3, #2
}
 800c344:	4618      	mov	r0, r3
 800c346:	3708      	adds	r7, #8
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	00544146 	.word	0x00544146
 800c350:	33544146 	.word	0x33544146

0800c354 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b096      	sub	sp, #88	@ 0x58
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	4613      	mov	r3, r2
 800c360:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	2200      	movs	r2, #0
 800c366:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c368:	68f8      	ldr	r0, [r7, #12]
 800c36a:	f7ff ff58 	bl	800c21e <get_ldnumber>
 800c36e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c372:	2b00      	cmp	r3, #0
 800c374:	da01      	bge.n	800c37a <find_volume+0x26>
 800c376:	230b      	movs	r3, #11
 800c378:	e22d      	b.n	800c7d6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c37a:	4aa1      	ldr	r2, [pc, #644]	@ (800c600 <find_volume+0x2ac>)
 800c37c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c382:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c386:	2b00      	cmp	r3, #0
 800c388:	d101      	bne.n	800c38e <find_volume+0x3a>
 800c38a:	230c      	movs	r3, #12
 800c38c:	e223      	b.n	800c7d6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c392:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c394:	79fb      	ldrb	r3, [r7, #7]
 800c396:	f023 0301 	bic.w	r3, r3, #1
 800c39a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d01a      	beq.n	800c3da <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a6:	785b      	ldrb	r3, [r3, #1]
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7fe feb9 	bl	800b120 <disk_status>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c3b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c3b8:	f003 0301 	and.w	r3, r3, #1
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d10c      	bne.n	800c3da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c3c0:	79fb      	ldrb	r3, [r7, #7]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d007      	beq.n	800c3d6 <find_volume+0x82>
 800c3c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c3ca:	f003 0304 	and.w	r3, r3, #4
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d001      	beq.n	800c3d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c3d2:	230a      	movs	r3, #10
 800c3d4:	e1ff      	b.n	800c7d6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	e1fd      	b.n	800c7d6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3dc:	2200      	movs	r2, #0
 800c3de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c3e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3e2:	b2da      	uxtb	r2, r3
 800c3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ea:	785b      	ldrb	r3, [r3, #1]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7fe feb1 	bl	800b154 <disk_initialize>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c3f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c3fc:	f003 0301 	and.w	r3, r3, #1
 800c400:	2b00      	cmp	r3, #0
 800c402:	d001      	beq.n	800c408 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c404:	2303      	movs	r3, #3
 800c406:	e1e6      	b.n	800c7d6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c408:	79fb      	ldrb	r3, [r7, #7]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d007      	beq.n	800c41e <find_volume+0xca>
 800c40e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c412:	f003 0304 	and.w	r3, r3, #4
 800c416:	2b00      	cmp	r3, #0
 800c418:	d001      	beq.n	800c41e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c41a:	230a      	movs	r3, #10
 800c41c:	e1db      	b.n	800c7d6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c41e:	2300      	movs	r3, #0
 800c420:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c422:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c424:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c426:	f7ff ff3f 	bl	800c2a8 <check_fs>
 800c42a:	4603      	mov	r3, r0
 800c42c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c430:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c434:	2b02      	cmp	r3, #2
 800c436:	d149      	bne.n	800c4cc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c438:	2300      	movs	r3, #0
 800c43a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c43c:	e01e      	b.n	800c47c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c440:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c446:	011b      	lsls	r3, r3, #4
 800c448:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c44c:	4413      	add	r3, r2
 800c44e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c452:	3304      	adds	r3, #4
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d006      	beq.n	800c468 <find_volume+0x114>
 800c45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c45c:	3308      	adds	r3, #8
 800c45e:	4618      	mov	r0, r3
 800c460:	f7fe fef9 	bl	800b256 <ld_dword>
 800c464:	4602      	mov	r2, r0
 800c466:	e000      	b.n	800c46a <find_volume+0x116>
 800c468:	2200      	movs	r2, #0
 800c46a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	3358      	adds	r3, #88	@ 0x58
 800c470:	443b      	add	r3, r7
 800c472:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c478:	3301      	adds	r3, #1
 800c47a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c47c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c47e:	2b03      	cmp	r3, #3
 800c480:	d9dd      	bls.n	800c43e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c482:	2300      	movs	r3, #0
 800c484:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d002      	beq.n	800c492 <find_volume+0x13e>
 800c48c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c48e:	3b01      	subs	r3, #1
 800c490:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	3358      	adds	r3, #88	@ 0x58
 800c498:	443b      	add	r3, r7
 800c49a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c49e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c4a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d005      	beq.n	800c4b2 <find_volume+0x15e>
 800c4a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c4a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c4aa:	f7ff fefd 	bl	800c2a8 <check_fs>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	e000      	b.n	800c4b4 <find_volume+0x160>
 800c4b2:	2303      	movs	r3, #3
 800c4b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c4b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d905      	bls.n	800c4cc <find_volume+0x178>
 800c4c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4c8:	2b03      	cmp	r3, #3
 800c4ca:	d9e2      	bls.n	800c492 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c4cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c4d0:	2b04      	cmp	r3, #4
 800c4d2:	d101      	bne.n	800c4d8 <find_volume+0x184>
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	e17e      	b.n	800c7d6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c4d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d901      	bls.n	800c4e4 <find_volume+0x190>
 800c4e0:	230d      	movs	r3, #13
 800c4e2:	e178      	b.n	800c7d6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e6:	3330      	adds	r3, #48	@ 0x30
 800c4e8:	330b      	adds	r3, #11
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe fe9a 	bl	800b224 <ld_word>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4f6:	d001      	beq.n	800c4fc <find_volume+0x1a8>
 800c4f8:	230d      	movs	r3, #13
 800c4fa:	e16c      	b.n	800c7d6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4fe:	3330      	adds	r3, #48	@ 0x30
 800c500:	3316      	adds	r3, #22
 800c502:	4618      	mov	r0, r3
 800c504:	f7fe fe8e 	bl	800b224 <ld_word>
 800c508:	4603      	mov	r3, r0
 800c50a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c50c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d106      	bne.n	800c520 <find_volume+0x1cc>
 800c512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c514:	3330      	adds	r3, #48	@ 0x30
 800c516:	3324      	adds	r3, #36	@ 0x24
 800c518:	4618      	mov	r0, r3
 800c51a:	f7fe fe9c 	bl	800b256 <ld_dword>
 800c51e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c522:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c524:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c528:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c52e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c532:	789b      	ldrb	r3, [r3, #2]
 800c534:	2b01      	cmp	r3, #1
 800c536:	d005      	beq.n	800c544 <find_volume+0x1f0>
 800c538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c53a:	789b      	ldrb	r3, [r3, #2]
 800c53c:	2b02      	cmp	r3, #2
 800c53e:	d001      	beq.n	800c544 <find_volume+0x1f0>
 800c540:	230d      	movs	r3, #13
 800c542:	e148      	b.n	800c7d6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c546:	789b      	ldrb	r3, [r3, #2]
 800c548:	461a      	mov	r2, r3
 800c54a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c54c:	fb02 f303 	mul.w	r3, r2, r3
 800c550:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c558:	461a      	mov	r2, r3
 800c55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c55c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c560:	895b      	ldrh	r3, [r3, #10]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d008      	beq.n	800c578 <find_volume+0x224>
 800c566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c568:	895b      	ldrh	r3, [r3, #10]
 800c56a:	461a      	mov	r2, r3
 800c56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c56e:	895b      	ldrh	r3, [r3, #10]
 800c570:	3b01      	subs	r3, #1
 800c572:	4013      	ands	r3, r2
 800c574:	2b00      	cmp	r3, #0
 800c576:	d001      	beq.n	800c57c <find_volume+0x228>
 800c578:	230d      	movs	r3, #13
 800c57a:	e12c      	b.n	800c7d6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c57e:	3330      	adds	r3, #48	@ 0x30
 800c580:	3311      	adds	r3, #17
 800c582:	4618      	mov	r0, r3
 800c584:	f7fe fe4e 	bl	800b224 <ld_word>
 800c588:	4603      	mov	r3, r0
 800c58a:	461a      	mov	r2, r3
 800c58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c58e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c592:	891b      	ldrh	r3, [r3, #8]
 800c594:	f003 030f 	and.w	r3, r3, #15
 800c598:	b29b      	uxth	r3, r3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d001      	beq.n	800c5a2 <find_volume+0x24e>
 800c59e:	230d      	movs	r3, #13
 800c5a0:	e119      	b.n	800c7d6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a4:	3330      	adds	r3, #48	@ 0x30
 800c5a6:	3313      	adds	r3, #19
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7fe fe3b 	bl	800b224 <ld_word>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c5b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d106      	bne.n	800c5c6 <find_volume+0x272>
 800c5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ba:	3330      	adds	r3, #48	@ 0x30
 800c5bc:	3320      	adds	r3, #32
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fe fe49 	bl	800b256 <ld_dword>
 800c5c4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c8:	3330      	adds	r3, #48	@ 0x30
 800c5ca:	330e      	adds	r3, #14
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fe fe29 	bl	800b224 <ld_word>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c5d6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d101      	bne.n	800c5e0 <find_volume+0x28c>
 800c5dc:	230d      	movs	r3, #13
 800c5de:	e0fa      	b.n	800c7d6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c5e0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c5e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5e4:	4413      	add	r3, r2
 800c5e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5e8:	8912      	ldrh	r2, [r2, #8]
 800c5ea:	0912      	lsrs	r2, r2, #4
 800c5ec:	b292      	uxth	r2, r2
 800c5ee:	4413      	add	r3, r2
 800c5f0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c5f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d204      	bcs.n	800c604 <find_volume+0x2b0>
 800c5fa:	230d      	movs	r3, #13
 800c5fc:	e0eb      	b.n	800c7d6 <find_volume+0x482>
 800c5fe:	bf00      	nop
 800c600:	20013620 	.word	0x20013620
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c604:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c608:	1ad3      	subs	r3, r2, r3
 800c60a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c60c:	8952      	ldrh	r2, [r2, #10]
 800c60e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c612:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c616:	2b00      	cmp	r3, #0
 800c618:	d101      	bne.n	800c61e <find_volume+0x2ca>
 800c61a:	230d      	movs	r3, #13
 800c61c:	e0db      	b.n	800c7d6 <find_volume+0x482>
		fmt = FS_FAT32;
 800c61e:	2303      	movs	r3, #3
 800c620:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c626:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d802      	bhi.n	800c634 <find_volume+0x2e0>
 800c62e:	2302      	movs	r3, #2
 800c630:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c636:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d802      	bhi.n	800c644 <find_volume+0x2f0>
 800c63e:	2301      	movs	r3, #1
 800c640:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c646:	1c9a      	adds	r2, r3, #2
 800c648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c64a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c64e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c650:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c652:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c656:	441a      	add	r2, r3
 800c658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c65a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c65c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c660:	441a      	add	r2, r3
 800c662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c664:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800c666:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c66a:	2b03      	cmp	r3, #3
 800c66c:	d11e      	bne.n	800c6ac <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c670:	3330      	adds	r3, #48	@ 0x30
 800c672:	332a      	adds	r3, #42	@ 0x2a
 800c674:	4618      	mov	r0, r3
 800c676:	f7fe fdd5 	bl	800b224 <ld_word>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d001      	beq.n	800c684 <find_volume+0x330>
 800c680:	230d      	movs	r3, #13
 800c682:	e0a8      	b.n	800c7d6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c686:	891b      	ldrh	r3, [r3, #8]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d001      	beq.n	800c690 <find_volume+0x33c>
 800c68c:	230d      	movs	r3, #13
 800c68e:	e0a2      	b.n	800c7d6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c692:	3330      	adds	r3, #48	@ 0x30
 800c694:	332c      	adds	r3, #44	@ 0x2c
 800c696:	4618      	mov	r0, r3
 800c698:	f7fe fddd 	bl	800b256 <ld_dword>
 800c69c:	4602      	mov	r2, r0
 800c69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6a0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6a4:	695b      	ldr	r3, [r3, #20]
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6aa:	e01f      	b.n	800c6ec <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ae:	891b      	ldrh	r3, [r3, #8]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d101      	bne.n	800c6b8 <find_volume+0x364>
 800c6b4:	230d      	movs	r3, #13
 800c6b6:	e08e      	b.n	800c7d6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ba:	6a1a      	ldr	r2, [r3, #32]
 800c6bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6be:	441a      	add	r2, r3
 800c6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6c2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c6c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c6c8:	2b02      	cmp	r3, #2
 800c6ca:	d103      	bne.n	800c6d4 <find_volume+0x380>
 800c6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ce:	695b      	ldr	r3, [r3, #20]
 800c6d0:	005b      	lsls	r3, r3, #1
 800c6d2:	e00a      	b.n	800c6ea <find_volume+0x396>
 800c6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d6:	695a      	ldr	r2, [r3, #20]
 800c6d8:	4613      	mov	r3, r2
 800c6da:	005b      	lsls	r3, r3, #1
 800c6dc:	4413      	add	r3, r2
 800c6de:	085a      	lsrs	r2, r3, #1
 800c6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6e2:	695b      	ldr	r3, [r3, #20]
 800c6e4:	f003 0301 	and.w	r3, r3, #1
 800c6e8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c6ea:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ee:	699a      	ldr	r2, [r3, #24]
 800c6f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6f2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c6f6:	0a5b      	lsrs	r3, r3, #9
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d201      	bcs.n	800c700 <find_volume+0x3ac>
 800c6fc:	230d      	movs	r3, #13
 800c6fe:	e06a      	b.n	800c7d6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c702:	f04f 32ff 	mov.w	r2, #4294967295
 800c706:	611a      	str	r2, [r3, #16]
 800c708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c70a:	691a      	ldr	r2, [r3, #16]
 800c70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c70e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c712:	2280      	movs	r2, #128	@ 0x80
 800c714:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c716:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c71a:	2b03      	cmp	r3, #3
 800c71c:	d149      	bne.n	800c7b2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c720:	3330      	adds	r3, #48	@ 0x30
 800c722:	3330      	adds	r3, #48	@ 0x30
 800c724:	4618      	mov	r0, r3
 800c726:	f7fe fd7d 	bl	800b224 <ld_word>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d140      	bne.n	800c7b2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c730:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c732:	3301      	adds	r3, #1
 800c734:	4619      	mov	r1, r3
 800c736:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c738:	f7fe ff86 	bl	800b648 <move_window>
 800c73c:	4603      	mov	r3, r0
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d137      	bne.n	800c7b2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c744:	2200      	movs	r2, #0
 800c746:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74a:	3330      	adds	r3, #48	@ 0x30
 800c74c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c750:	4618      	mov	r0, r3
 800c752:	f7fe fd67 	bl	800b224 <ld_word>
 800c756:	4603      	mov	r3, r0
 800c758:	461a      	mov	r2, r3
 800c75a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c75e:	429a      	cmp	r2, r3
 800c760:	d127      	bne.n	800c7b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c764:	3330      	adds	r3, #48	@ 0x30
 800c766:	4618      	mov	r0, r3
 800c768:	f7fe fd75 	bl	800b256 <ld_dword>
 800c76c:	4603      	mov	r3, r0
 800c76e:	4a1c      	ldr	r2, [pc, #112]	@ (800c7e0 <find_volume+0x48c>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d11e      	bne.n	800c7b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c776:	3330      	adds	r3, #48	@ 0x30
 800c778:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c77c:	4618      	mov	r0, r3
 800c77e:	f7fe fd6a 	bl	800b256 <ld_dword>
 800c782:	4603      	mov	r3, r0
 800c784:	4a17      	ldr	r2, [pc, #92]	@ (800c7e4 <find_volume+0x490>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d113      	bne.n	800c7b2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c78c:	3330      	adds	r3, #48	@ 0x30
 800c78e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c792:	4618      	mov	r0, r3
 800c794:	f7fe fd5f 	bl	800b256 <ld_dword>
 800c798:	4602      	mov	r2, r0
 800c79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a0:	3330      	adds	r3, #48	@ 0x30
 800c7a2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7fe fd55 	bl	800b256 <ld_dword>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c7b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c7ba:	4b0b      	ldr	r3, [pc, #44]	@ (800c7e8 <find_volume+0x494>)
 800c7bc:	881b      	ldrh	r3, [r3, #0]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	4b09      	ldr	r3, [pc, #36]	@ (800c7e8 <find_volume+0x494>)
 800c7c4:	801a      	strh	r2, [r3, #0]
 800c7c6:	4b08      	ldr	r3, [pc, #32]	@ (800c7e8 <find_volume+0x494>)
 800c7c8:	881a      	ldrh	r2, [r3, #0]
 800c7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7cc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c7ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c7d0:	f7fe fed2 	bl	800b578 <clear_lock>
#endif
	return FR_OK;
 800c7d4:	2300      	movs	r3, #0
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3758      	adds	r7, #88	@ 0x58
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	41615252 	.word	0x41615252
 800c7e4:	61417272 	.word	0x61417272
 800c7e8:	20013624 	.word	0x20013624

0800c7ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c7f6:	2309      	movs	r3, #9
 800c7f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d01c      	beq.n	800c83a <validate+0x4e>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d018      	beq.n	800c83a <validate+0x4e>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d013      	beq.n	800c83a <validate+0x4e>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	889a      	ldrh	r2, [r3, #4]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	88db      	ldrh	r3, [r3, #6]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d10c      	bne.n	800c83a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	785b      	ldrb	r3, [r3, #1]
 800c826:	4618      	mov	r0, r3
 800c828:	f7fe fc7a 	bl	800b120 <disk_status>
 800c82c:	4603      	mov	r3, r0
 800c82e:	f003 0301 	and.w	r3, r3, #1
 800c832:	2b00      	cmp	r3, #0
 800c834:	d101      	bne.n	800c83a <validate+0x4e>
			res = FR_OK;
 800c836:	2300      	movs	r3, #0
 800c838:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c83a:	7bfb      	ldrb	r3, [r7, #15]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d102      	bne.n	800c846 <validate+0x5a>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	e000      	b.n	800c848 <validate+0x5c>
 800c846:	2300      	movs	r3, #0
 800c848:	683a      	ldr	r2, [r7, #0]
 800c84a:	6013      	str	r3, [r2, #0]
	return res;
 800c84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3710      	adds	r7, #16
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
	...

0800c858 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b088      	sub	sp, #32
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	4613      	mov	r3, r2
 800c864:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c86a:	f107 0310 	add.w	r3, r7, #16
 800c86e:	4618      	mov	r0, r3
 800c870:	f7ff fcd5 	bl	800c21e <get_ldnumber>
 800c874:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	da01      	bge.n	800c880 <f_mount+0x28>
 800c87c:	230b      	movs	r3, #11
 800c87e:	e02b      	b.n	800c8d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c880:	4a17      	ldr	r2, [pc, #92]	@ (800c8e0 <f_mount+0x88>)
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c888:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d005      	beq.n	800c89c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c890:	69b8      	ldr	r0, [r7, #24]
 800c892:	f7fe fe71 	bl	800b578 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	2200      	movs	r2, #0
 800c89a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d002      	beq.n	800c8a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	490d      	ldr	r1, [pc, #52]	@ (800c8e0 <f_mount+0x88>)
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d002      	beq.n	800c8be <f_mount+0x66>
 800c8b8:	79fb      	ldrb	r3, [r7, #7]
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d001      	beq.n	800c8c2 <f_mount+0x6a>
 800c8be:	2300      	movs	r3, #0
 800c8c0:	e00a      	b.n	800c8d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c8c2:	f107 010c 	add.w	r1, r7, #12
 800c8c6:	f107 0308 	add.w	r3, r7, #8
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7ff fd41 	bl	800c354 <find_volume>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c8d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3720      	adds	r7, #32
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	20013620 	.word	0x20013620

0800c8e4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b086      	sub	sp, #24
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d101      	bne.n	800c8f8 <f_opendir+0x14>
 800c8f4:	2309      	movs	r3, #9
 800c8f6:	e064      	b.n	800c9c2 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c8fc:	f107 010c 	add.w	r1, r7, #12
 800c900:	463b      	mov	r3, r7
 800c902:	2200      	movs	r2, #0
 800c904:	4618      	mov	r0, r3
 800c906:	f7ff fd25 	bl	800c354 <find_volume>
 800c90a:	4603      	mov	r3, r0
 800c90c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c90e:	7dfb      	ldrb	r3, [r7, #23]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d14f      	bne.n	800c9b4 <f_opendir+0xd0>
		obj->fs = fs;
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	4619      	mov	r1, r3
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f7ff fc0c 	bl	800c13c <follow_path>
 800c924:	4603      	mov	r3, r0
 800c926:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c928:	7dfb      	ldrb	r3, [r7, #23]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d13d      	bne.n	800c9aa <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c934:	b25b      	sxtb	r3, r3
 800c936:	2b00      	cmp	r3, #0
 800c938:	db12      	blt.n	800c960 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	799b      	ldrb	r3, [r3, #6]
 800c93e:	f003 0310 	and.w	r3, r3, #16
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00a      	beq.n	800c95c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c946:	68fa      	ldr	r2, [r7, #12]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6a1b      	ldr	r3, [r3, #32]
 800c94c:	4619      	mov	r1, r3
 800c94e:	4610      	mov	r0, r2
 800c950:	f7ff fa2f 	bl	800bdb2 <ld_clust>
 800c954:	4602      	mov	r2, r0
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	609a      	str	r2, [r3, #8]
 800c95a:	e001      	b.n	800c960 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c95c:	2305      	movs	r3, #5
 800c95e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c960:	7dfb      	ldrb	r3, [r7, #23]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d121      	bne.n	800c9aa <f_opendir+0xc6>
				obj->id = fs->id;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	88da      	ldrh	r2, [r3, #6]
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c96e:	2100      	movs	r1, #0
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7ff f8de 	bl	800bb32 <dir_sdi>
 800c976:	4603      	mov	r3, r0
 800c978:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c97a:	7dfb      	ldrb	r3, [r7, #23]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d114      	bne.n	800c9aa <f_opendir+0xc6>
					if (obj->sclust) {
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00d      	beq.n	800c9a4 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c988:	2100      	movs	r1, #0
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f7fe fd2a 	bl	800b3e4 <inc_lock>
 800c990:	4602      	mov	r2, r0
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d105      	bne.n	800c9aa <f_opendir+0xc6>
 800c99e:	2312      	movs	r3, #18
 800c9a0:	75fb      	strb	r3, [r7, #23]
 800c9a2:	e002      	b.n	800c9aa <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c9aa:	7dfb      	ldrb	r3, [r7, #23]
 800c9ac:	2b04      	cmp	r3, #4
 800c9ae:	d101      	bne.n	800c9b4 <f_opendir+0xd0>
 800c9b0:	2305      	movs	r3, #5
 800c9b2:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c9b4:	7dfb      	ldrb	r3, [r7, #23]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d002      	beq.n	800c9c0 <f_opendir+0xdc>
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c9c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3718      	adds	r7, #24
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b084      	sub	sp, #16
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f107 0208 	add.w	r2, r7, #8
 800c9d8:	4611      	mov	r1, r2
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7ff ff06 	bl	800c7ec <validate>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c9e4:	7bfb      	ldrb	r3, [r7, #15]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d110      	bne.n	800ca0c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	691b      	ldr	r3, [r3, #16]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d006      	beq.n	800ca00 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	691b      	ldr	r3, [r3, #16]
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7fe fd82 	bl	800b500 <dec_lock>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800ca00:	7bfb      	ldrb	r3, [r7, #15]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d102      	bne.n	800ca0c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800ca0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b084      	sub	sp, #16
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
 800ca1e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f107 0208 	add.w	r2, r7, #8
 800ca26:	4611      	mov	r1, r2
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7ff fedf 	bl	800c7ec <validate>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ca32:	7bfb      	ldrb	r3, [r7, #15]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d126      	bne.n	800ca86 <f_readdir+0x70>
		if (!fno) {
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d106      	bne.n	800ca4c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800ca3e:	2100      	movs	r1, #0
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f7ff f876 	bl	800bb32 <dir_sdi>
 800ca46:	4603      	mov	r3, r0
 800ca48:	73fb      	strb	r3, [r7, #15]
 800ca4a:	e01c      	b.n	800ca86 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800ca4c:	2100      	movs	r1, #0
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f7ff f9ce 	bl	800bdf0 <dir_read>
 800ca54:	4603      	mov	r3, r0
 800ca56:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800ca58:	7bfb      	ldrb	r3, [r7, #15]
 800ca5a:	2b04      	cmp	r3, #4
 800ca5c:	d101      	bne.n	800ca62 <f_readdir+0x4c>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800ca62:	7bfb      	ldrb	r3, [r7, #15]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10e      	bne.n	800ca86 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ca68:	6839      	ldr	r1, [r7, #0]
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f7ff fa72 	bl	800bf54 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ca70:	2100      	movs	r1, #0
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f7ff f8d8 	bl	800bc28 <dir_next>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ca7c:	7bfb      	ldrb	r3, [r7, #15]
 800ca7e:	2b04      	cmp	r3, #4
 800ca80:	d101      	bne.n	800ca86 <f_readdir+0x70>
 800ca82:	2300      	movs	r3, #0
 800ca84:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ca86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3710      	adds	r7, #16
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b087      	sub	sp, #28
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800caa2:	2300      	movs	r3, #0
 800caa4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800caa6:	4b1f      	ldr	r3, [pc, #124]	@ (800cb24 <FATFS_LinkDriverEx+0x94>)
 800caa8:	7a5b      	ldrb	r3, [r3, #9]
 800caaa:	b2db      	uxtb	r3, r3
 800caac:	2b00      	cmp	r3, #0
 800caae:	d131      	bne.n	800cb14 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cab0:	4b1c      	ldr	r3, [pc, #112]	@ (800cb24 <FATFS_LinkDriverEx+0x94>)
 800cab2:	7a5b      	ldrb	r3, [r3, #9]
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	461a      	mov	r2, r3
 800cab8:	4b1a      	ldr	r3, [pc, #104]	@ (800cb24 <FATFS_LinkDriverEx+0x94>)
 800caba:	2100      	movs	r1, #0
 800cabc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cabe:	4b19      	ldr	r3, [pc, #100]	@ (800cb24 <FATFS_LinkDriverEx+0x94>)
 800cac0:	7a5b      	ldrb	r3, [r3, #9]
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	4a17      	ldr	r2, [pc, #92]	@ (800cb24 <FATFS_LinkDriverEx+0x94>)
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	4413      	add	r3, r2
 800caca:	68fa      	ldr	r2, [r7, #12]
 800cacc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cace:	4b15      	ldr	r3, [pc, #84]	@ (800cb24 <FATFS_LinkDriverEx+0x94>)
 800cad0:	7a5b      	ldrb	r3, [r3, #9]
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	461a      	mov	r2, r3
 800cad6:	4b13      	ldr	r3, [pc, #76]	@ (800cb24 <FATFS_LinkDriverEx+0x94>)
 800cad8:	4413      	add	r3, r2
 800cada:	79fa      	ldrb	r2, [r7, #7]
 800cadc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cade:	4b11      	ldr	r3, [pc, #68]	@ (800cb24 <FATFS_LinkDriverEx+0x94>)
 800cae0:	7a5b      	ldrb	r3, [r3, #9]
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	1c5a      	adds	r2, r3, #1
 800cae6:	b2d1      	uxtb	r1, r2
 800cae8:	4a0e      	ldr	r2, [pc, #56]	@ (800cb24 <FATFS_LinkDriverEx+0x94>)
 800caea:	7251      	strb	r1, [r2, #9]
 800caec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800caee:	7dbb      	ldrb	r3, [r7, #22]
 800caf0:	3330      	adds	r3, #48	@ 0x30
 800caf2:	b2da      	uxtb	r2, r3
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	3301      	adds	r3, #1
 800cafc:	223a      	movs	r2, #58	@ 0x3a
 800cafe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	3302      	adds	r3, #2
 800cb04:	222f      	movs	r2, #47	@ 0x2f
 800cb06:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	3303      	adds	r3, #3
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cb10:	2300      	movs	r3, #0
 800cb12:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cb14:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	371c      	adds	r7, #28
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
 800cb24:	20013648 	.word	0x20013648

0800cb28 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cb32:	2200      	movs	r2, #0
 800cb34:	6839      	ldr	r1, [r7, #0]
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7ff ffaa 	bl	800ca90 <FATFS_LinkDriverEx>
 800cb3c:	4603      	mov	r3, r0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3708      	adds	r7, #8
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
	...

0800cb48 <SD_Init>:

FATFS fs;
uint16_t NumObs = 0;

void SD_Init(UART_HandleTypeDef *huart)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
	sd_huart = huart;
 800cb50:	4a05      	ldr	r2, [pc, #20]	@ (800cb68 <SD_Init+0x20>)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6013      	str	r3, [r2, #0]
	Mount_SD();
 800cb56:	f000 f9a7 	bl	800cea8 <Mount_SD>
	GetFileNumber();
 800cb5a:	f000 f977 	bl	800ce4c <GetFileNumber>
}
 800cb5e:	bf00      	nop
 800cb60:	3708      	adds	r7, #8
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	20013654 	.word	0x20013654

0800cb6c <SD_OS_Resources_Init>:

void SD_OS_Resources_Init()
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	af00      	add	r7, sp, #0
	xSDQueue = xQueueCreate(4, sizeof(SDMsgStruct));
 800cb70:	2200      	movs	r2, #0
 800cb72:	2164      	movs	r1, #100	@ 0x64
 800cb74:	2004      	movs	r0, #4
 800cb76:	f7fb fbe3 	bl	8008340 <xQueueGenericCreate>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	4a01      	ldr	r2, [pc, #4]	@ (800cb84 <SD_OS_Resources_Init+0x18>)
 800cb7e:	6013      	str	r3, [r2, #0]
}
 800cb80:	bf00      	nop
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	20013a34 	.word	0x20013a34

0800cb88 <StorageParse>:


FRESULT StorageParse(const char *pRequestedExtension)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b0a2      	sub	sp, #136	@ 0x88
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  FRESULT res = FR_OK;
 800cb90:	2300      	movs	r3, #0
 800cb92:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  char *ext_dot;

  char lower_req_ext[16]; // Buffer for lowercase requested extension
  char file_ext_lower[16]; // Buffer for lowercase file extension

  if (pRequestedExtension == NULL || strlen(pRequestedExtension) == 0 || strlen(pRequestedExtension) >= sizeof(lower_req_ext)) {
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d009      	beq.n	800cbb0 <StorageParse+0x28>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d005      	beq.n	800cbb0 <StorageParse+0x28>
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7f3 fb1d 	bl	80001e4 <strlen>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b0f      	cmp	r3, #15
 800cbae:	d907      	bls.n	800cbc0 <StorageParse+0x38>
      SendMsg(sd_huart, "StorageParse: Invalid or too long extension provided.\r\n");
 800cbb0:	4b9b      	ldr	r3, [pc, #620]	@ (800ce20 <StorageParse+0x298>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	499b      	ldr	r1, [pc, #620]	@ (800ce24 <StorageParse+0x29c>)
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7f4 f972 	bl	8000ea0 <SendMsg>
      return FR_INVALID_PARAMETER;
 800cbbc:	2313      	movs	r3, #19
 800cbbe:	e12b      	b.n	800ce18 <StorageParse+0x290>
  }

  // Convert requested extension to lowercase for consistent comparison
  strncpy(lower_req_ext, pRequestedExtension, sizeof(lower_req_ext) - 1);
 800cbc0:	f107 0318 	add.w	r3, r7, #24
 800cbc4:	220f      	movs	r2, #15
 800cbc6:	6879      	ldr	r1, [r7, #4]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f000 fe8d 	bl	800d8e8 <strncpy>
  lower_req_ext[sizeof(lower_req_ext) - 1] = '\0';
 800cbce:	2300      	movs	r3, #0
 800cbd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  for (int i = 0; lower_req_ext[i]; i++) {
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cbda:	e024      	b.n	800cc26 <StorageParse+0x9e>
    lower_req_ext[i] = tolower((unsigned char)lower_req_ext[i]);
 800cbdc:	f107 0218 	add.w	r2, r7, #24
 800cbe0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cbe4:	4413      	add	r3, r2
 800cbe6:	781b      	ldrb	r3, [r3, #0]
 800cbe8:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 800cbec:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	4a8d      	ldr	r2, [pc, #564]	@ (800ce28 <StorageParse+0x2a0>)
 800cbf4:	4413      	add	r3, r2
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	f003 0303 	and.w	r3, r3, #3
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d103      	bne.n	800cc08 <StorageParse+0x80>
 800cc00:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800cc04:	3320      	adds	r3, #32
 800cc06:	e001      	b.n	800cc0c <StorageParse+0x84>
 800cc08:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800cc0c:	b2d9      	uxtb	r1, r3
 800cc0e:	f107 0218 	add.w	r2, r7, #24
 800cc12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cc16:	4413      	add	r3, r2
 800cc18:	460a      	mov	r2, r1
 800cc1a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; lower_req_ext[i]; i++) {
 800cc1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cc20:	3301      	adds	r3, #1
 800cc22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cc26:	f107 0218 	add.w	r2, r7, #24
 800cc2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cc2e:	4413      	add	r3, r2
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d1d2      	bne.n	800cbdc <StorageParse+0x54>
  }

  SendMsg(sd_huart, "\r\nParsing SD card for *.%s files...\r\n", lower_req_ext);
 800cc36:	4b7a      	ldr	r3, [pc, #488]	@ (800ce20 <StorageParse+0x298>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f107 0218 	add.w	r2, r7, #24
 800cc3e:	497b      	ldr	r1, [pc, #492]	@ (800ce2c <StorageParse+0x2a4>)
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7f4 f92d 	bl	8000ea0 <SendMsg>

  res = f_opendir(&dir, "");
 800cc46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800cc4a:	4979      	ldr	r1, [pc, #484]	@ (800ce30 <StorageParse+0x2a8>)
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7ff fe49 	bl	800c8e4 <f_opendir>
 800cc52:	4603      	mov	r3, r0
 800cc54:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  if (res != FR_OK) {
 800cc58:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00a      	beq.n	800cc76 <StorageParse+0xee>
      SendMsg(sd_huart, "Failed to open root directory! Error: %d\r\n", res);
 800cc60:	4b6f      	ldr	r3, [pc, #444]	@ (800ce20 <StorageParse+0x298>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800cc68:	4972      	ldr	r1, [pc, #456]	@ (800ce34 <StorageParse+0x2ac>)
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7f4 f918 	bl	8000ea0 <SendMsg>
      return res;
 800cc70:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800cc74:	e0d0      	b.n	800ce18 <StorageParse+0x290>
  }
  FileList.ptr = 0; // Reset file list for each parse
 800cc76:	4b70      	ldr	r3, [pc, #448]	@ (800ce38 <StorageParse+0x2b0>)
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8

  if(res == FR_OK)
 800cc7e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f040 80b3 	bne.w	800cdee <StorageParse+0x266>
  {
    while(1)
    {
      res = f_readdir(&dir, &fno);
 800cc88:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800cc8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800cc90:	4611      	mov	r1, r2
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7ff febf 	bl	800ca16 <f_readdir>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      if(res != FR_OK || fno.fname[0] == 0)
 800cc9e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	f040 80a3 	bne.w	800cdee <StorageParse+0x266>
 800cca8:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f000 809e 	beq.w	800cdee <StorageParse+0x266>
      {
        break;
      }
      if(fno.fname[0] == '.') // Skip hidden files/directories and current/parent dir entries
 800ccb2:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800ccb6:	2b2e      	cmp	r3, #46	@ 0x2e
 800ccb8:	f000 8097 	beq.w	800cdea <StorageParse+0x262>
      {
        continue;
      }

      fn = fno.fname;
 800ccbc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800ccc0:	3309      	adds	r3, #9
 800ccc2:	67bb      	str	r3, [r7, #120]	@ 0x78

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 800ccc4:	4b5c      	ldr	r3, [pc, #368]	@ (800ce38 <StorageParse+0x2b0>)
 800ccc6:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 800ccca:	2b17      	cmp	r3, #23
 800cccc:	f200 8086 	bhi.w	800cddc <StorageParse+0x254>
      {
        if((fno.fattrib & AM_DIR) == 0) // If it's a file
 800ccd0:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800ccd4:	f003 0310 	and.w	r3, r3, #16
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d1d5      	bne.n	800cc88 <StorageParse+0x100>
        {
          ext_dot = strrchr(fn, '.'); // Find the last dot
 800ccdc:	212e      	movs	r1, #46	@ 0x2e
 800ccde:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800cce0:	f000 fe15 	bl	800d90e <strrchr>
 800cce4:	6778      	str	r0, [r7, #116]	@ 0x74
          // Ensure a dot is found, it's not the first character (e.g. ".hiddenfile"),
          // and there's something after the dot.
          if (ext_dot != NULL && ext_dot != fn && *(ext_dot + 1) != '\0') {
 800cce6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d0cd      	beq.n	800cc88 <StorageParse+0x100>
 800ccec:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ccee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d0c9      	beq.n	800cc88 <StorageParse+0x100>
 800ccf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d0c4      	beq.n	800cc88 <StorageParse+0x100>
            strncpy(file_ext_lower, ext_dot + 1, sizeof(file_ext_lower) - 1);
 800ccfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd00:	1c59      	adds	r1, r3, #1
 800cd02:	f107 0308 	add.w	r3, r7, #8
 800cd06:	220f      	movs	r2, #15
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f000 fded 	bl	800d8e8 <strncpy>
            file_ext_lower[sizeof(file_ext_lower) - 1] = '\0';
 800cd0e:	2300      	movs	r3, #0
 800cd10:	75fb      	strb	r3, [r7, #23]
            for (int i = 0; file_ext_lower[i]; i++) {
 800cd12:	2300      	movs	r3, #0
 800cd14:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cd16:	e020      	b.n	800cd5a <StorageParse+0x1d2>
                file_ext_lower[i] = tolower((unsigned char)file_ext_lower[i]);
 800cd18:	f107 0208 	add.w	r2, r7, #8
 800cd1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cd1e:	4413      	add	r3, r2
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800cd26:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	4a3e      	ldr	r2, [pc, #248]	@ (800ce28 <StorageParse+0x2a0>)
 800cd2e:	4413      	add	r3, r2
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	f003 0303 	and.w	r3, r3, #3
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d103      	bne.n	800cd42 <StorageParse+0x1ba>
 800cd3a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800cd3e:	3320      	adds	r3, #32
 800cd40:	e001      	b.n	800cd46 <StorageParse+0x1be>
 800cd42:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800cd46:	b2d9      	uxtb	r1, r3
 800cd48:	f107 0208 	add.w	r2, r7, #8
 800cd4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cd4e:	4413      	add	r3, r2
 800cd50:	460a      	mov	r2, r1
 800cd52:	701a      	strb	r2, [r3, #0]
            for (int i = 0; file_ext_lower[i]; i++) {
 800cd54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cd56:	3301      	adds	r3, #1
 800cd58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cd5a:	f107 0208 	add.w	r2, r7, #8
 800cd5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cd60:	4413      	add	r3, r2
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d1d7      	bne.n	800cd18 <StorageParse+0x190>
            }

            if (strcmp(file_ext_lower, lower_req_ext) == 0)
 800cd68:	f107 0218 	add.w	r2, r7, #24
 800cd6c:	f107 0308 	add.w	r3, r7, #8
 800cd70:	4611      	mov	r1, r2
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7f3 fa2c 	bl	80001d0 <strcmp>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d184      	bne.n	800cc88 <StorageParse+0x100>
            {
              strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 800cd7e:	4b2e      	ldr	r3, [pc, #184]	@ (800ce38 <StorageParse+0x2b0>)
 800cd80:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 800cd84:	461a      	mov	r2, r3
 800cd86:	4613      	mov	r3, r2
 800cd88:	009b      	lsls	r3, r3, #2
 800cd8a:	4413      	add	r3, r2
 800cd8c:	00db      	lsls	r3, r3, #3
 800cd8e:	4413      	add	r3, r2
 800cd90:	4a29      	ldr	r2, [pc, #164]	@ (800ce38 <StorageParse+0x2b0>)
 800cd92:	4413      	add	r3, r2
 800cd94:	3301      	adds	r3, #1
 800cd96:	2228      	movs	r2, #40	@ 0x28
 800cd98:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f000 fda4 	bl	800d8e8 <strncpy>
              FileList.file[FileList.ptr].type = FILETYPE_FILE; // Assuming FILETYPE_FILE is generic
 800cda0:	4b25      	ldr	r3, [pc, #148]	@ (800ce38 <StorageParse+0x2b0>)
 800cda2:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 800cda6:	461a      	mov	r2, r3
 800cda8:	4923      	ldr	r1, [pc, #140]	@ (800ce38 <StorageParse+0x2b0>)
 800cdaa:	4613      	mov	r3, r2
 800cdac:	009b      	lsls	r3, r3, #2
 800cdae:	4413      	add	r3, r2
 800cdb0:	00db      	lsls	r3, r3, #3
 800cdb2:	4413      	add	r3, r2
 800cdb4:	440b      	add	r3, r1
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	701a      	strb	r2, [r3, #0]
              SendMsg(sd_huart, "Found *.%s file: %s\r\n", lower_req_ext, fn);
 800cdba:	4b19      	ldr	r3, [pc, #100]	@ (800ce20 <StorageParse+0x298>)
 800cdbc:	6818      	ldr	r0, [r3, #0]
 800cdbe:	f107 0218 	add.w	r2, r7, #24
 800cdc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cdc4:	491d      	ldr	r1, [pc, #116]	@ (800ce3c <StorageParse+0x2b4>)
 800cdc6:	f7f4 f86b 	bl	8000ea0 <SendMsg>
              FileList.ptr++;
 800cdca:	4b1b      	ldr	r3, [pc, #108]	@ (800ce38 <StorageParse+0x2b0>)
 800cdcc:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	b29a      	uxth	r2, r3
 800cdd4:	4b18      	ldr	r3, [pc, #96]	@ (800ce38 <StorageParse+0x2b0>)
 800cdd6:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8
 800cdda:	e755      	b.n	800cc88 <StorageParse+0x100>
            }
          }
        }
      } else {
        SendMsg(sd_huart, "File list full. Cannot add more files.\r\n");
 800cddc:	4b10      	ldr	r3, [pc, #64]	@ (800ce20 <StorageParse+0x298>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4917      	ldr	r1, [pc, #92]	@ (800ce40 <StorageParse+0x2b8>)
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7f4 f85c 	bl	8000ea0 <SendMsg>
        break; // Stop if file list is full
 800cde8:	e001      	b.n	800cdee <StorageParse+0x266>
        continue;
 800cdea:	bf00      	nop
      res = f_readdir(&dir, &fno);
 800cdec:	e74c      	b.n	800cc88 <StorageParse+0x100>
      }
    }
  }
  NumObs = FileList.ptr;
 800cdee:	4b12      	ldr	r3, [pc, #72]	@ (800ce38 <StorageParse+0x2b0>)
 800cdf0:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	@ 0x3d8
 800cdf4:	4b13      	ldr	r3, [pc, #76]	@ (800ce44 <StorageParse+0x2bc>)
 800cdf6:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 800cdf8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f7ff fde4 	bl	800c9ca <f_closedir>
  SendMsg(sd_huart, "Total *.%s files found: %d\r\n", lower_req_ext, NumObs);
 800ce02:	4b07      	ldr	r3, [pc, #28]	@ (800ce20 <StorageParse+0x298>)
 800ce04:	6818      	ldr	r0, [r3, #0]
 800ce06:	4b0f      	ldr	r3, [pc, #60]	@ (800ce44 <StorageParse+0x2bc>)
 800ce08:	881b      	ldrh	r3, [r3, #0]
 800ce0a:	f107 0218 	add.w	r2, r7, #24
 800ce0e:	490e      	ldr	r1, [pc, #56]	@ (800ce48 <StorageParse+0x2c0>)
 800ce10:	f7f4 f846 	bl	8000ea0 <SendMsg>
  return res;
 800ce14:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3788      	adds	r7, #136	@ 0x88
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	20013654 	.word	0x20013654
 800ce24:	0800e374 	.word	0x0800e374
 800ce28:	0800ea3c 	.word	0x0800ea3c
 800ce2c:	0800e3ac 	.word	0x0800e3ac
 800ce30:	0800e3d4 	.word	0x0800e3d4
 800ce34:	0800e3d8 	.word	0x0800e3d8
 800ce38:	20013658 	.word	0x20013658
 800ce3c:	0800e404 	.word	0x0800e404
 800ce40:	0800e41c 	.word	0x0800e41c
 800ce44:	20013c68 	.word	0x20013c68
 800ce48:	0800e448 	.word	0x0800e448

0800ce4c <GetFileNumber>:

uint16_t GetFileNumber(void)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	af00      	add	r7, sp, #0
	if (NumObs) return NumObs;
 800ce50:	4b06      	ldr	r3, [pc, #24]	@ (800ce6c <GetFileNumber+0x20>)
 800ce52:	881b      	ldrh	r3, [r3, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d002      	beq.n	800ce5e <GetFileNumber+0x12>
 800ce58:	4b04      	ldr	r3, [pc, #16]	@ (800ce6c <GetFileNumber+0x20>)
 800ce5a:	881b      	ldrh	r3, [r3, #0]
 800ce5c:	e001      	b.n	800ce62 <GetFileNumber+0x16>
	else return -1;
 800ce5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr
 800ce6c:	20013c68 	.word	0x20013c68

0800ce70 <SDParseHandler>:

void SDParseHandler(void *pvParameters)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b09c      	sub	sp, #112	@ 0x70
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  SDMsgStruct sdMsg;
  while (1)
  {
	if (xQueueReceive(xSDQueue, &sdMsg, portMAX_DELAY) == pdPASS) {
 800ce78:	4b0a      	ldr	r3, [pc, #40]	@ (800cea4 <SDParseHandler+0x34>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f107 010c 	add.w	r1, r7, #12
 800ce80:	f04f 32ff 	mov.w	r2, #4294967295
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fb fc8b 	bl	80087a0 <xQueueReceive>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d104      	bne.n	800ce9a <SDParseHandler+0x2a>
		StorageParse(sdMsg.msg);
 800ce90:	f107 030c 	add.w	r3, r7, #12
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7ff fe77 	bl	800cb88 <StorageParse>
//		SendMsg(sd_huart, "SDParseHandler\r\n");
	}
	 vTaskDelay(pdMS_TO_TICKS(500));
 800ce9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ce9e:	f7fc f937 	bl	8009110 <vTaskDelay>
	if (xQueueReceive(xSDQueue, &sdMsg, portMAX_DELAY) == pdPASS) {
 800cea2:	e7e9      	b.n	800ce78 <SDParseHandler+0x8>
 800cea4:	20013a34 	.word	0x20013a34

0800cea8 <Mount_SD>:
  }
}

void Mount_SD (void)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
	FRESULT fresult = f_mount(&fs, "", 1);
 800ceae:	2201      	movs	r2, #1
 800ceb0:	490d      	ldr	r1, [pc, #52]	@ (800cee8 <Mount_SD+0x40>)
 800ceb2:	480e      	ldr	r0, [pc, #56]	@ (800ceec <Mount_SD+0x44>)
 800ceb4:	f7ff fcd0 	bl	800c858 <f_mount>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	71fb      	strb	r3, [r7, #7]

	if (fresult != FR_OK) {
 800cebc:	79fb      	ldrb	r3, [r7, #7]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d007      	beq.n	800ced2 <Mount_SD+0x2a>
		SendMsg(sd_huart, "SD card mount failed with error code: %d\r\n", fresult);
 800cec2:	4b0b      	ldr	r3, [pc, #44]	@ (800cef0 <Mount_SD+0x48>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	79fa      	ldrb	r2, [r7, #7]
 800cec8:	490a      	ldr	r1, [pc, #40]	@ (800cef4 <Mount_SD+0x4c>)
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7f3 ffe8 	bl	8000ea0 <SendMsg>
	} else {
		SendMsg(sd_huart, "SD card mounted Successfully.!\r\n");
	}
}
 800ced0:	e005      	b.n	800cede <Mount_SD+0x36>
		SendMsg(sd_huart, "SD card mounted Successfully.!\r\n");
 800ced2:	4b07      	ldr	r3, [pc, #28]	@ (800cef0 <Mount_SD+0x48>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4908      	ldr	r1, [pc, #32]	@ (800cef8 <Mount_SD+0x50>)
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7f3 ffe1 	bl	8000ea0 <SendMsg>
}
 800cede:	bf00      	nop
 800cee0:	3708      	adds	r7, #8
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	0800e3d4 	.word	0x0800e3d4
 800ceec:	20013a38 	.word	0x20013a38
 800cef0:	20013654 	.word	0x20013654
 800cef4:	0800e468 	.word	0x0800e468
 800cef8:	0800e494 	.word	0x0800e494

0800cefc <command_Init>:
	{"sd", "Parse file from SD (Command => sd fileName)", ParseStorage},
	{NULL, NULL, NULL},
};

void command_Init(UART_HandleTypeDef* huart)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
	shell_huart = huart;
 800cf04:	4a04      	ldr	r2, [pc, #16]	@ (800cf18 <command_Init+0x1c>)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6013      	str	r3, [r2, #0]
}
 800cf0a:	bf00      	nop
 800cf0c:	370c      	adds	r7, #12
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	2001406c 	.word	0x2001406c

0800cf1c <ParseStorage>:

void ParseStorage(uint8_t argc, char **argv)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b09c      	sub	sp, #112	@ 0x70
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	4603      	mov	r3, r0
 800cf24:	6039      	str	r1, [r7, #0]
 800cf26:	71fb      	strb	r3, [r7, #7]
	if(argc < 2) {
 800cf28:	79fb      	ldrb	r3, [r7, #7]
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d806      	bhi.n	800cf3c <ParseStorage+0x20>
		SendMsg(shell_huart, "\r\ParseStorage: Not enough arguments for this command.\r\n");
 800cf2e:	4b13      	ldr	r3, [pc, #76]	@ (800cf7c <ParseStorage+0x60>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4913      	ldr	r1, [pc, #76]	@ (800cf80 <ParseStorage+0x64>)
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7f3 ffb3 	bl	8000ea0 <SendMsg>
 800cf3a:	e01c      	b.n	800cf76 <ParseStorage+0x5a>
		return;
	}
	SDMsgStruct sdMsg;
	strncpy(sdMsg.msg, argv[1], sizeof(sdMsg.msg)-1);
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	3304      	adds	r3, #4
 800cf40:	6819      	ldr	r1, [r3, #0]
 800cf42:	f107 030c 	add.w	r3, r7, #12
 800cf46:	2263      	movs	r2, #99	@ 0x63
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f000 fccd 	bl	800d8e8 <strncpy>
	sdMsg.msg[sizeof(sdMsg.msg)-1] = '\0';
 800cf4e:	2300      	movs	r3, #0
 800cf50:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	if (xQueueSend(xSDQueue, &sdMsg, 0) != pdPASS) {
 800cf54:	4b0b      	ldr	r3, [pc, #44]	@ (800cf84 <ParseStorage+0x68>)
 800cf56:	6818      	ldr	r0, [r3, #0]
 800cf58:	f107 010c 	add.w	r1, r7, #12
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f7fb fa80 	bl	8008464 <xQueueGenericSend>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b01      	cmp	r3, #1
 800cf68:	d005      	beq.n	800cf76 <ParseStorage+0x5a>
		SendMsg(shell_huart, "\r\ParseStorage: Queue full or error.\r\n");
 800cf6a:	4b04      	ldr	r3, [pc, #16]	@ (800cf7c <ParseStorage+0x60>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4906      	ldr	r1, [pc, #24]	@ (800cf88 <ParseStorage+0x6c>)
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7f3 ff95 	bl	8000ea0 <SendMsg>
	}
}
 800cf76:	3770      	adds	r7, #112	@ 0x70
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	2001406c 	.word	0x2001406c
 800cf80:	0800e628 	.word	0x0800e628
 800cf84:	20013a34 	.word	0x20013a34
 800cf88:	0800e660 	.word	0x0800e660

0800cf8c <LEDChangeColor>:

void LEDChangeColor(uint8_t argc, char **argv)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b086      	sub	sp, #24
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	4603      	mov	r3, r0
 800cf94:	6039      	str	r1, [r7, #0]
 800cf96:	71fb      	strb	r3, [r7, #7]
	if(argc < 4) {
 800cf98:	79fb      	ldrb	r3, [r7, #7]
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	d806      	bhi.n	800cfac <LEDChangeColor+0x20>
		SendMsg(shell_huart, "\r\ESP32SendMsg: Not enough arguments for this command.\r\n");
 800cf9e:	4b19      	ldr	r3, [pc, #100]	@ (800d004 <LEDChangeColor+0x78>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4919      	ldr	r1, [pc, #100]	@ (800d008 <LEDChangeColor+0x7c>)
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7f3 ff7b 	bl	8000ea0 <SendMsg>
 800cfaa:	e028      	b.n	800cffe <LEDChangeColor+0x72>
		return;
	}

	LEDMsgStruct LEDMsg;
	LEDMsg.r = (int)atoi(argv[1]);
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	3304      	adds	r3, #4
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f000 fbcc 	bl	800d750 <atoi>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	60fb      	str	r3, [r7, #12]
	LEDMsg.g = (int)atoi(argv[2]);
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	3308      	adds	r3, #8
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f000 fbc4 	bl	800d750 <atoi>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	613b      	str	r3, [r7, #16]
	LEDMsg.b = (int)atoi(argv[3]);
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	330c      	adds	r3, #12
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f000 fbbc 	bl	800d750 <atoi>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	617b      	str	r3, [r7, #20]

	if (xQueueSend(xLEDQueue, &LEDMsg, 0) != pdPASS) {
 800cfdc:	4b0b      	ldr	r3, [pc, #44]	@ (800d00c <LEDChangeColor+0x80>)
 800cfde:	6818      	ldr	r0, [r3, #0]
 800cfe0:	f107 010c 	add.w	r1, r7, #12
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f7fb fa3c 	bl	8008464 <xQueueGenericSend>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	d005      	beq.n	800cffe <LEDChangeColor+0x72>
		SendMsg(shell_huart, "\r\LEDMsg: Queue full or error.\r\n");
 800cff2:	4b04      	ldr	r3, [pc, #16]	@ (800d004 <LEDChangeColor+0x78>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4906      	ldr	r1, [pc, #24]	@ (800d010 <LEDChangeColor+0x84>)
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7f3 ff51 	bl	8000ea0 <SendMsg>
	}
}
 800cffe:	3718      	adds	r7, #24
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}
 800d004:	2001406c 	.word	0x2001406c
 800d008:	0800e688 	.word	0x0800e688
 800d00c:	20013614 	.word	0x20013614
 800d010:	0800e6c0 	.word	0x0800e6c0

0800d014 <ESP32SendMsg>:

void ESP32SendMsg(uint8_t argc, char **argv)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b09c      	sub	sp, #112	@ 0x70
 800d018:	af00      	add	r7, sp, #0
 800d01a:	4603      	mov	r3, r0
 800d01c:	6039      	str	r1, [r7, #0]
 800d01e:	71fb      	strb	r3, [r7, #7]
	if(argc < 2) {
 800d020:	79fb      	ldrb	r3, [r7, #7]
 800d022:	2b01      	cmp	r3, #1
 800d024:	d806      	bhi.n	800d034 <ESP32SendMsg+0x20>
		SendMsg(shell_huart, "\r\ESP32SendMsg: Not enough arguments for this command.\r\n");
 800d026:	4b13      	ldr	r3, [pc, #76]	@ (800d074 <ESP32SendMsg+0x60>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4913      	ldr	r1, [pc, #76]	@ (800d078 <ESP32SendMsg+0x64>)
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7f3 ff37 	bl	8000ea0 <SendMsg>
 800d032:	e01c      	b.n	800d06e <ESP32SendMsg+0x5a>
		return;
	}

	SDMsgStruct esp32Msg;
	strncpy(esp32Msg.msg, argv[1], sizeof(esp32Msg.msg)-1);
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	3304      	adds	r3, #4
 800d038:	6819      	ldr	r1, [r3, #0]
 800d03a:	f107 030c 	add.w	r3, r7, #12
 800d03e:	2263      	movs	r2, #99	@ 0x63
 800d040:	4618      	mov	r0, r3
 800d042:	f000 fc51 	bl	800d8e8 <strncpy>
	esp32Msg.msg[sizeof(esp32Msg.msg)-1] = '\0';
 800d046:	2300      	movs	r3, #0
 800d048:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	if (xQueueSend(xESP32Queue, &esp32Msg, 0) != pdPASS) {
 800d04c:	4b0b      	ldr	r3, [pc, #44]	@ (800d07c <ESP32SendMsg+0x68>)
 800d04e:	6818      	ldr	r0, [r3, #0]
 800d050:	f107 010c 	add.w	r1, r7, #12
 800d054:	2300      	movs	r3, #0
 800d056:	2200      	movs	r2, #0
 800d058:	f7fb fa04 	bl	8008464 <xQueueGenericSend>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d005      	beq.n	800d06e <ESP32SendMsg+0x5a>
		SendMsg(shell_huart, "\r\ESP32SendMsg: Queue full or error.\r\n");
 800d062:	4b04      	ldr	r3, [pc, #16]	@ (800d074 <ESP32SendMsg+0x60>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4906      	ldr	r1, [pc, #24]	@ (800d080 <ESP32SendMsg+0x6c>)
 800d068:	4618      	mov	r0, r3
 800d06a:	f7f3 ff19 	bl	8000ea0 <SendMsg>
	}
}
 800d06e:	3770      	adds	r7, #112	@ 0x70
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	2001406c 	.word	0x2001406c
 800d078:	0800e688 	.word	0x0800e688
 800d07c:	200007e0 	.word	0x200007e0
 800d080:	0800e6e0 	.word	0x0800e6e0

0800d084 <LCDShowMsg>:

void LCDShowMsg(uint8_t argc, char **argv)
{
 800d084:	b590      	push	{r4, r7, lr}
 800d086:	b08f      	sub	sp, #60	@ 0x3c
 800d088:	af00      	add	r7, sp, #0
 800d08a:	4603      	mov	r3, r0
 800d08c:	6039      	str	r1, [r7, #0]
 800d08e:	71fb      	strb	r3, [r7, #7]
	if(argc < 4) {
 800d090:	79fb      	ldrb	r3, [r7, #7]
 800d092:	2b03      	cmp	r3, #3
 800d094:	d806      	bhi.n	800d0a4 <LCDShowMsg+0x20>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Not enough arguments for this command.\r\n");
 800d096:	4b52      	ldr	r3, [pc, #328]	@ (800d1e0 <LCDShowMsg+0x15c>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4952      	ldr	r1, [pc, #328]	@ (800d1e4 <LCDShowMsg+0x160>)
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7f3 feff 	bl	8000ea0 <SendMsg>
        return;
 800d0a2:	e099      	b.n	800d1d8 <LCDShowMsg+0x154>
    }
	for(int j = 1; j <= 2; j++) {
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0a8:	e027      	b.n	800d0fa <LCDShowMsg+0x76>
		for (int i = 0; argv[1][i]; i++) {
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800d0ae:	e019      	b.n	800d0e4 <LCDShowMsg+0x60>
			if (argv[1][i] < '0' || argv[1][i] > '9') {
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	3304      	adds	r3, #4
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b8:	4413      	add	r3, r2
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	2b2f      	cmp	r3, #47	@ 0x2f
 800d0be:	d907      	bls.n	800d0d0 <LCDShowMsg+0x4c>
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	3304      	adds	r3, #4
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c8:	4413      	add	r3, r2
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	2b39      	cmp	r3, #57	@ 0x39
 800d0ce:	d906      	bls.n	800d0de <LCDShowMsg+0x5a>
				SendMsg(shell_huart, "\r\nLCDShowMsg: Row and Column must be a number.\r\n");
 800d0d0:	4b43      	ldr	r3, [pc, #268]	@ (800d1e0 <LCDShowMsg+0x15c>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4944      	ldr	r1, [pc, #272]	@ (800d1e8 <LCDShowMsg+0x164>)
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7f3 fee2 	bl	8000ea0 <SendMsg>
				return;
 800d0dc:	e07c      	b.n	800d1d8 <LCDShowMsg+0x154>
		for (int i = 0; argv[1][i]; i++) {
 800d0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	3304      	adds	r3, #4
 800d0e8:	681a      	ldr	r2, [r3, #0]
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ec:	4413      	add	r3, r2
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d1dd      	bne.n	800d0b0 <LCDShowMsg+0x2c>
	for(int j = 1; j <= 2; j++) {
 800d0f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0fc:	2b02      	cmp	r3, #2
 800d0fe:	ddd4      	ble.n	800d0aa <LCDShowMsg+0x26>
			}
		}
	}
	if ((uint8_t)atoi(argv[1]) > 3) {
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	3304      	adds	r3, #4
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4618      	mov	r0, r3
 800d108:	f000 fb22 	bl	800d750 <atoi>
 800d10c:	4603      	mov	r3, r0
 800d10e:	b2db      	uxtb	r3, r3
 800d110:	2b03      	cmp	r3, #3
 800d112:	d906      	bls.n	800d122 <LCDShowMsg+0x9e>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Row out of range (0-3).\r\n");
 800d114:	4b32      	ldr	r3, [pc, #200]	@ (800d1e0 <LCDShowMsg+0x15c>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4934      	ldr	r1, [pc, #208]	@ (800d1ec <LCDShowMsg+0x168>)
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7f3 fec0 	bl	8000ea0 <SendMsg>
        return;
 800d120:	e05a      	b.n	800d1d8 <LCDShowMsg+0x154>
    }
    if ((uint8_t)atoi(argv[2]) > 19) {
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	3308      	adds	r3, #8
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4618      	mov	r0, r3
 800d12a:	f000 fb11 	bl	800d750 <atoi>
 800d12e:	4603      	mov	r3, r0
 800d130:	b2db      	uxtb	r3, r3
 800d132:	2b13      	cmp	r3, #19
 800d134:	d906      	bls.n	800d144 <LCDShowMsg+0xc0>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Column out of range (0-19).\r\n");
 800d136:	4b2a      	ldr	r3, [pc, #168]	@ (800d1e0 <LCDShowMsg+0x15c>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	492d      	ldr	r1, [pc, #180]	@ (800d1f0 <LCDShowMsg+0x16c>)
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7f3 feaf 	bl	8000ea0 <SendMsg>
        return;
 800d142:	e049      	b.n	800d1d8 <LCDShowMsg+0x154>
    }
	if (strlen(argv[3]) > (20 - (uint8_t)atoi(argv[2]))) {
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	330c      	adds	r3, #12
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7f3 f84a 	bl	80001e4 <strlen>
 800d150:	4604      	mov	r4, r0
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	3308      	adds	r3, #8
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4618      	mov	r0, r3
 800d15a:	f000 faf9 	bl	800d750 <atoi>
 800d15e:	4603      	mov	r3, r0
 800d160:	b2db      	uxtb	r3, r3
 800d162:	f1c3 0314 	rsb	r3, r3, #20
 800d166:	429c      	cmp	r4, r3
 800d168:	d906      	bls.n	800d178 <LCDShowMsg+0xf4>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Message too long for this column.\r\n");
 800d16a:	4b1d      	ldr	r3, [pc, #116]	@ (800d1e0 <LCDShowMsg+0x15c>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4921      	ldr	r1, [pc, #132]	@ (800d1f4 <LCDShowMsg+0x170>)
 800d170:	4618      	mov	r0, r3
 800d172:	f7f3 fe95 	bl	8000ea0 <SendMsg>
        return;
 800d176:	e02f      	b.n	800d1d8 <LCDShowMsg+0x154>
    }

    LCDMsgStruct lcdMsg;
    lcdMsg.row = (uint8_t)atoi(argv[1]);
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	3304      	adds	r3, #4
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	4618      	mov	r0, r3
 800d180:	f000 fae6 	bl	800d750 <atoi>
 800d184:	4603      	mov	r3, r0
 800d186:	b2db      	uxtb	r3, r3
 800d188:	733b      	strb	r3, [r7, #12]
    lcdMsg.col = (uint8_t)atoi(argv[2]);
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	3308      	adds	r3, #8
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4618      	mov	r0, r3
 800d192:	f000 fadd 	bl	800d750 <atoi>
 800d196:	4603      	mov	r3, r0
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	737b      	strb	r3, [r7, #13]
    strncpy(lcdMsg.msg, argv[3], sizeof(lcdMsg.msg)-1);
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	330c      	adds	r3, #12
 800d1a0:	6819      	ldr	r1, [r3, #0]
 800d1a2:	f107 030c 	add.w	r3, r7, #12
 800d1a6:	3302      	adds	r3, #2
 800d1a8:	221f      	movs	r2, #31
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f000 fb9c 	bl	800d8e8 <strncpy>
    lcdMsg.msg[sizeof(lcdMsg.msg)-1] = '\0';
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (xQueueSend(xLCDQueue, &lcdMsg, 0) != pdPASS) {
 800d1b6:	4b10      	ldr	r3, [pc, #64]	@ (800d1f8 <LCDShowMsg+0x174>)
 800d1b8:	6818      	ldr	r0, [r3, #0]
 800d1ba:	f107 010c 	add.w	r1, r7, #12
 800d1be:	2300      	movs	r3, #0
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	f7fb f94f 	bl	8008464 <xQueueGenericSend>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d005      	beq.n	800d1d8 <LCDShowMsg+0x154>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Queue full or error.\r\n");
 800d1cc:	4b04      	ldr	r3, [pc, #16]	@ (800d1e0 <LCDShowMsg+0x15c>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	490a      	ldr	r1, [pc, #40]	@ (800d1fc <LCDShowMsg+0x178>)
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7f3 fe64 	bl	8000ea0 <SendMsg>
    }
}
 800d1d8:	373c      	adds	r7, #60	@ 0x3c
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd90      	pop	{r4, r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	2001406c 	.word	0x2001406c
 800d1e4:	0800e708 	.word	0x0800e708
 800d1e8:	0800e740 	.word	0x0800e740
 800d1ec:	0800e774 	.word	0x0800e774
 800d1f0:	0800e79c 	.word	0x0800e79c
 800d1f4:	0800e7c8 	.word	0x0800e7c8
 800d1f8:	20013604 	.word	0x20013604
 800d1fc:	0800e7fc 	.word	0x0800e7fc

0800d200 <CommandPrint>:

static void CommandPrint(uint8_t argc, char **argv)
{
 800d200:	b590      	push	{r4, r7, lr}
 800d202:	b085      	sub	sp, #20
 800d204:	af00      	add	r7, sp, #0
 800d206:	4603      	mov	r3, r0
 800d208:	6039      	str	r1, [r7, #0]
 800d20a:	71fb      	strb	r3, [r7, #7]
	SendMsg(shell_huart, "\r\n------------------------------------------------------------------\r\n");
 800d20c:	4b1b      	ldr	r3, [pc, #108]	@ (800d27c <CommandPrint+0x7c>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	491b      	ldr	r1, [pc, #108]	@ (800d280 <CommandPrint+0x80>)
 800d212:	4618      	mov	r0, r3
 800d214:	f7f3 fe44 	bl	8000ea0 <SendMsg>
	for (uint8_t i=0; CommandList[i].name != NULL; i++)
 800d218:	2300      	movs	r3, #0
 800d21a:	73fb      	strb	r3, [r7, #15]
 800d21c:	e019      	b.n	800d252 <CommandPrint+0x52>
	{
		SendMsg(shell_huart, "    %5s  %s \r\n", CommandList[i].name, CommandList[i].help);
 800d21e:	4b17      	ldr	r3, [pc, #92]	@ (800d27c <CommandPrint+0x7c>)
 800d220:	6818      	ldr	r0, [r3, #0]
 800d222:	7bfa      	ldrb	r2, [r7, #15]
 800d224:	4917      	ldr	r1, [pc, #92]	@ (800d284 <CommandPrint+0x84>)
 800d226:	4613      	mov	r3, r2
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	4413      	add	r3, r2
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	440b      	add	r3, r1
 800d230:	6819      	ldr	r1, [r3, #0]
 800d232:	7bfa      	ldrb	r2, [r7, #15]
 800d234:	4c13      	ldr	r4, [pc, #76]	@ (800d284 <CommandPrint+0x84>)
 800d236:	4613      	mov	r3, r2
 800d238:	005b      	lsls	r3, r3, #1
 800d23a:	4413      	add	r3, r2
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	4423      	add	r3, r4
 800d240:	3304      	adds	r3, #4
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	460a      	mov	r2, r1
 800d246:	4910      	ldr	r1, [pc, #64]	@ (800d288 <CommandPrint+0x88>)
 800d248:	f7f3 fe2a 	bl	8000ea0 <SendMsg>
	for (uint8_t i=0; CommandList[i].name != NULL; i++)
 800d24c:	7bfb      	ldrb	r3, [r7, #15]
 800d24e:	3301      	adds	r3, #1
 800d250:	73fb      	strb	r3, [r7, #15]
 800d252:	7bfa      	ldrb	r2, [r7, #15]
 800d254:	490b      	ldr	r1, [pc, #44]	@ (800d284 <CommandPrint+0x84>)
 800d256:	4613      	mov	r3, r2
 800d258:	005b      	lsls	r3, r3, #1
 800d25a:	4413      	add	r3, r2
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	440b      	add	r3, r1
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d1db      	bne.n	800d21e <CommandPrint+0x1e>
	}
	SendMsg(shell_huart, "------------------------------------------------------------------\r\n");
 800d266:	4b05      	ldr	r3, [pc, #20]	@ (800d27c <CommandPrint+0x7c>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4908      	ldr	r1, [pc, #32]	@ (800d28c <CommandPrint+0x8c>)
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7f3 fe17 	bl	8000ea0 <SendMsg>
}
 800d272:	bf00      	nop
 800d274:	3714      	adds	r7, #20
 800d276:	46bd      	mov	sp, r7
 800d278:	bd90      	pop	{r4, r7, pc}
 800d27a:	bf00      	nop
 800d27c:	2001406c 	.word	0x2001406c
 800d280:	0800e824 	.word	0x0800e824
 800d284:	0800e9e8 	.word	0x0800e9e8
 800d288:	0800e86c 	.word	0x0800e86c
 800d28c:	0800e87c 	.word	0x0800e87c

0800d290 <PrintArgs>:


static uint8_t PrintArgs(uint8_t argc, char **argv)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	4603      	mov	r3, r0
 800d298:	6039      	str	r1, [r7, #0]
 800d29a:	71fb      	strb	r3, [r7, #7]
	SendMsg(shell_huart, "\r\n");
 800d29c:	4b10      	ldr	r3, [pc, #64]	@ (800d2e0 <PrintArgs+0x50>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4910      	ldr	r1, [pc, #64]	@ (800d2e4 <PrintArgs+0x54>)
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7f3 fdfc 	bl	8000ea0 <SendMsg>
	for (uint8_t i=0; i<argc; i++)
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	73fb      	strb	r3, [r7, #15]
 800d2ac:	e00e      	b.n	800d2cc <PrintArgs+0x3c>
	{
		SendMsg(shell_huart, "%d: %s \r\n", i, argv[i]);
 800d2ae:	4b0c      	ldr	r3, [pc, #48]	@ (800d2e0 <PrintArgs+0x50>)
 800d2b0:	6818      	ldr	r0, [r3, #0]
 800d2b2:	7bf9      	ldrb	r1, [r7, #15]
 800d2b4:	7bfb      	ldrb	r3, [r7, #15]
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	683a      	ldr	r2, [r7, #0]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	460a      	mov	r2, r1
 800d2c0:	4909      	ldr	r1, [pc, #36]	@ (800d2e8 <PrintArgs+0x58>)
 800d2c2:	f7f3 fded 	bl	8000ea0 <SendMsg>
	for (uint8_t i=0; i<argc; i++)
 800d2c6:	7bfb      	ldrb	r3, [r7, #15]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	73fb      	strb	r3, [r7, #15]
 800d2cc:	7bfa      	ldrb	r2, [r7, #15]
 800d2ce:	79fb      	ldrb	r3, [r7, #7]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d3ec      	bcc.n	800d2ae <PrintArgs+0x1e>
	}
	return 0;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3710      	adds	r7, #16
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	2001406c 	.word	0x2001406c
 800d2e4:	0800e8c4 	.word	0x0800e8c4
 800d2e8:	0800e8c8 	.word	0x0800e8c8

0800d2ec <CommandExecute>:

bool CommandExecute(uint8_t argc, char **argv)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	6039      	str	r1, [r7, #0]
 800d2f6:	71fb      	strb	r3, [r7, #7]
	if (argc != 0 && argv != NULL)
 800d2f8:	79fb      	ldrb	r3, [r7, #7]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d043      	beq.n	800d386 <CommandExecute+0x9a>
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d040      	beq.n	800d386 <CommandExecute+0x9a>
	{
		for (uint8_t i=0; CommandList[i].name != NULL; i++)
 800d304:	2300      	movs	r3, #0
 800d306:	73fb      	strb	r3, [r7, #15]
 800d308:	e02d      	b.n	800d366 <CommandExecute+0x7a>
		{
			if(strcmp(CommandList[i].name, argv[0]) == 0)
 800d30a:	7bfa      	ldrb	r2, [r7, #15]
 800d30c:	4920      	ldr	r1, [pc, #128]	@ (800d390 <CommandExecute+0xa4>)
 800d30e:	4613      	mov	r3, r2
 800d310:	005b      	lsls	r3, r3, #1
 800d312:	4413      	add	r3, r2
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	440b      	add	r3, r1
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4619      	mov	r1, r3
 800d320:	4610      	mov	r0, r2
 800d322:	f7f2 ff55 	bl	80001d0 <strcmp>
 800d326:	4603      	mov	r3, r0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d119      	bne.n	800d360 <CommandExecute+0x74>
			{
				if(CommandList[i].func != NULL)
 800d32c:	7bfa      	ldrb	r2, [r7, #15]
 800d32e:	4918      	ldr	r1, [pc, #96]	@ (800d390 <CommandExecute+0xa4>)
 800d330:	4613      	mov	r3, r2
 800d332:	005b      	lsls	r3, r3, #1
 800d334:	4413      	add	r3, r2
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	440b      	add	r3, r1
 800d33a:	3308      	adds	r3, #8
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d00e      	beq.n	800d360 <CommandExecute+0x74>
				{
					(CommandList[i].func)(argc, argv);
 800d342:	7bfa      	ldrb	r2, [r7, #15]
 800d344:	4912      	ldr	r1, [pc, #72]	@ (800d390 <CommandExecute+0xa4>)
 800d346:	4613      	mov	r3, r2
 800d348:	005b      	lsls	r3, r3, #1
 800d34a:	4413      	add	r3, r2
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	440b      	add	r3, r1
 800d350:	3308      	adds	r3, #8
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	79fa      	ldrb	r2, [r7, #7]
 800d356:	6839      	ldr	r1, [r7, #0]
 800d358:	4610      	mov	r0, r2
 800d35a:	4798      	blx	r3
					return true;
 800d35c:	2301      	movs	r3, #1
 800d35e:	e013      	b.n	800d388 <CommandExecute+0x9c>
		for (uint8_t i=0; CommandList[i].name != NULL; i++)
 800d360:	7bfb      	ldrb	r3, [r7, #15]
 800d362:	3301      	adds	r3, #1
 800d364:	73fb      	strb	r3, [r7, #15]
 800d366:	7bfa      	ldrb	r2, [r7, #15]
 800d368:	4909      	ldr	r1, [pc, #36]	@ (800d390 <CommandExecute+0xa4>)
 800d36a:	4613      	mov	r3, r2
 800d36c:	005b      	lsls	r3, r3, #1
 800d36e:	4413      	add	r3, r2
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	440b      	add	r3, r1
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1c7      	bne.n	800d30a <CommandExecute+0x1e>
				}
			}
		}
		SendMsg(shell_huart, "\r\nUnknown command. Type 'help' for commands.\r\n");
 800d37a:	4b06      	ldr	r3, [pc, #24]	@ (800d394 <CommandExecute+0xa8>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4906      	ldr	r1, [pc, #24]	@ (800d398 <CommandExecute+0xac>)
 800d380:	4618      	mov	r0, r3
 800d382:	f7f3 fd8d 	bl	8000ea0 <SendMsg>
	}
	return false;
 800d386:	2300      	movs	r3, #0
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3710      	adds	r7, #16
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	0800e9e8 	.word	0x0800e9e8
 800d394:	2001406c 	.word	0x2001406c
 800d398:	0800e8d4 	.word	0x0800e8d4

0800d39c <ReadLine_Init>:
static char prompt[PROMPT_LEN] = "> ";
static char readBuffer[READBUF_LEN] = {0};
extern UART_HandleTypeDef* shell_huart;

void ReadLine_Init(UART_HandleTypeDef* huart)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
	shell_huart = huart;
 800d3a4:	4a04      	ldr	r2, [pc, #16]	@ (800d3b8 <ReadLine_Init+0x1c>)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6013      	str	r3, [r2, #0]
}
 800d3aa:	bf00      	nop
 800d3ac:	370c      	adds	r7, #12
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr
 800d3b6:	bf00      	nop
 800d3b8:	2001406c 	.word	0x2001406c

0800d3bc <GetChar>:

static bool GetChar(char *out_char)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
	if(ReceiveChar(shell_huart, out_char) == HAL_OK)
 800d3c4:	4b07      	ldr	r3, [pc, #28]	@ (800d3e4 <GetChar+0x28>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	6879      	ldr	r1, [r7, #4]
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7f3 fdba 	bl	8000f44 <ReceiveChar>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d101      	bne.n	800d3da <GetChar+0x1e>
		return true;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e000      	b.n	800d3dc <GetChar+0x20>
	return false;
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3708      	adds	r7, #8
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	2001406c 	.word	0x2001406c

0800d3e8 <PutChar>:

static void PutChar(char cChar)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	71fb      	strb	r3, [r7, #7]
	SendChar(shell_huart, cChar);
 800d3f2:	4b05      	ldr	r3, [pc, #20]	@ (800d408 <PutChar+0x20>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	79fa      	ldrb	r2, [r7, #7]
 800d3f8:	4611      	mov	r1, r2
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7f3 fd3e 	bl	8000e7c <SendChar>
}
 800d400:	bf00      	nop
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	2001406c 	.word	0x2001406c

0800d40c <PutString>:

static void PutString(const char *const pcChar)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
	SendMsg(shell_huart, pcChar);
 800d414:	4b04      	ldr	r3, [pc, #16]	@ (800d428 <PutString+0x1c>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	6879      	ldr	r1, [r7, #4]
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7f3 fd40 	bl	8000ea0 <SendMsg>
}
 800d420:	bf00      	nop
 800d422:	3708      	adds	r7, #8
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}
 800d428:	2001406c 	.word	0x2001406c

0800d42c <ReadLine>:

uint32_t ReadLine()
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b086      	sub	sp, #24
 800d430:	af00      	add	r7, sp, #0

	char *pCur = readBuffer; /* the point to ready receive. */
 800d432:	4b6f      	ldr	r3, [pc, #444]	@ (800d5f0 <ReadLine+0x1c4>)
 800d434:	617b      	str	r3, [r7, #20]
	char cChar = 0;
 800d436:	2300      	movs	r3, #0
 800d438:	71bb      	strb	r3, [r7, #6]
	uint32_t receiveCharCnt = 0;
 800d43a:	2300      	movs	r3, #0
 800d43c:	613b      	str	r3, [r7, #16]
	uint32_t PromptLen = 0;
 800d43e:	2300      	movs	r3, #0
 800d440:	60fb      	str	r3, [r7, #12]
	uint32_t outputColumnCnt = 0;
 800d442:	2300      	movs	r3, #0
 800d444:	60bb      	str	r3, [r7, #8]
	memset(readBuffer, 0, sizeof(readBuffer));
 800d446:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d44a:	2100      	movs	r1, #0
 800d44c:	4868      	ldr	r0, [pc, #416]	@ (800d5f0 <ReadLine+0x1c4>)
 800d44e:	f000 fa43 	bl	800d8d8 <memset>
	/* print Prompt */
	if (*prompt)
 800d452:	4b68      	ldr	r3, [pc, #416]	@ (800d5f4 <ReadLine+0x1c8>)
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00b      	beq.n	800d472 <ReadLine+0x46>
	{
		PutString("\n\r");
 800d45a:	4867      	ldr	r0, [pc, #412]	@ (800d5f8 <ReadLine+0x1cc>)
 800d45c:	f7ff ffd6 	bl	800d40c <PutString>
		PromptLen = strlen(prompt);
 800d460:	4864      	ldr	r0, [pc, #400]	@ (800d5f4 <ReadLine+0x1c8>)
 800d462:	f7f2 febf 	bl	80001e4 <strlen>
 800d466:	60f8      	str	r0, [r7, #12]
		outputColumnCnt = PromptLen;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	60bb      	str	r3, [r7, #8]
		PutString(prompt);
 800d46c:	4861      	ldr	r0, [pc, #388]	@ (800d5f4 <ReadLine+0x1c8>)
 800d46e:	f7ff ffcd 	bl	800d40c <PutString>
	}
	for (;;)
	{
		bool isGotChar = GetChar(&cChar);
 800d472:	1dbb      	adds	r3, r7, #6
 800d474:	4618      	mov	r0, r3
 800d476:	f7ff ffa1 	bl	800d3bc <GetChar>
 800d47a:	4603      	mov	r3, r0
 800d47c:	71fb      	strb	r3, [r7, #7]

		if(isGotChar) {
 800d47e:	79fb      	ldrb	r3, [r7, #7]
 800d480:	2b00      	cmp	r3, #0
 800d482:	f000 80ad 	beq.w	800d5e0 <ReadLine+0x1b4>
			switch (cChar)
 800d486:	79bb      	ldrb	r3, [r7, #6]
 800d488:	2b15      	cmp	r3, #21
 800d48a:	dc2d      	bgt.n	800d4e8 <ReadLine+0xbc>
 800d48c:	2b03      	cmp	r3, #3
 800d48e:	db7b      	blt.n	800d588 <ReadLine+0x15c>
 800d490:	3b03      	subs	r3, #3
 800d492:	2b12      	cmp	r3, #18
 800d494:	d878      	bhi.n	800d588 <ReadLine+0x15c>
 800d496:	a201      	add	r2, pc, #4	@ (adr r2, 800d49c <ReadLine+0x70>)
 800d498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d49c:	0800d4ef 	.word	0x0800d4ef
 800d4a0:	0800d589 	.word	0x0800d589
 800d4a4:	0800d589 	.word	0x0800d589
 800d4a8:	0800d589 	.word	0x0800d589
 800d4ac:	0800d589 	.word	0x0800d589
 800d4b0:	0800d589 	.word	0x0800d589
 800d4b4:	0800d589 	.word	0x0800d589
 800d4b8:	0800d4f3 	.word	0x0800d4f3
 800d4bc:	0800d589 	.word	0x0800d589
 800d4c0:	0800d589 	.word	0x0800d589
 800d4c4:	0800d4f3 	.word	0x0800d4f3
 800d4c8:	0800d589 	.word	0x0800d589
 800d4cc:	0800d589 	.word	0x0800d589
 800d4d0:	0800d589 	.word	0x0800d589
 800d4d4:	0800d589 	.word	0x0800d589
 800d4d8:	0800d589 	.word	0x0800d589
 800d4dc:	0800d589 	.word	0x0800d589
 800d4e0:	0800d589 	.word	0x0800d589
 800d4e4:	0800d529 	.word	0x0800d529
 800d4e8:	2b7f      	cmp	r3, #127	@ 0x7f
 800d4ea:	d02f      	beq.n	800d54c <ReadLine+0x120>
 800d4ec:	e04c      	b.n	800d588 <ReadLine+0x15c>
			{
			case 0x03: /* ^C - break */
				return 0;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	e07a      	b.n	800d5e8 <ReadLine+0x1bc>
			case '\r': /*\r*/
			case '\n': /*\n*/
				if ((pCur >= &readBuffer[0]) &&
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	4a3e      	ldr	r2, [pc, #248]	@ (800d5f0 <ReadLine+0x1c4>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d30b      	bcc.n	800d512 <ReadLine+0xe6>
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	4a3f      	ldr	r2, [pc, #252]	@ (800d5fc <ReadLine+0x1d0>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d807      	bhi.n	800d512 <ReadLine+0xe6>
					(pCur <= &readBuffer[READBUF_LEN]))
				{
					*(pCur + 1) = '\0';
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	3301      	adds	r3, #1
 800d506:	2200      	movs	r2, #0
 800d508:	701a      	strb	r2, [r3, #0]
	//				PutString("\n\r");
	//				PutString(readBuffer);
					return (pCur - readBuffer);
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	4a38      	ldr	r2, [pc, #224]	@ (800d5f0 <ReadLine+0x1c4>)
 800d50e:	1a9b      	subs	r3, r3, r2
 800d510:	e06a      	b.n	800d5e8 <ReadLine+0x1bc>
				}
				else /* Buffer full (Overflow) */
				{
					memset(readBuffer, 0, sizeof(readBuffer));
 800d512:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d516:	2100      	movs	r1, #0
 800d518:	4835      	ldr	r0, [pc, #212]	@ (800d5f0 <ReadLine+0x1c4>)
 800d51a:	f000 f9dd 	bl	800d8d8 <memset>
					return 0;
 800d51e:	2300      	movs	r3, #0
 800d520:	e062      	b.n	800d5e8 <ReadLine+0x1bc>
				}

			case 0x15: /* ^U - erase line */
				while (outputColumnCnt > PromptLen)
				{
					outputColumnCnt--;
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	3b01      	subs	r3, #1
 800d526:	60bb      	str	r3, [r7, #8]
				while (outputColumnCnt > PromptLen)
 800d528:	68ba      	ldr	r2, [r7, #8]
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d8f8      	bhi.n	800d522 <ReadLine+0xf6>
				}
				memset(readBuffer, 0, sizeof(readBuffer));
 800d530:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d534:	2100      	movs	r1, #0
 800d536:	482e      	ldr	r0, [pc, #184]	@ (800d5f0 <ReadLine+0x1c4>)
 800d538:	f000 f9ce 	bl	800d8d8 <memset>
				pCur = readBuffer;
 800d53c:	4b2c      	ldr	r3, [pc, #176]	@ (800d5f0 <ReadLine+0x1c4>)
 800d53e:	617b      	str	r3, [r7, #20]
				receiveCharCnt = 0x00;
 800d540:	2300      	movs	r3, #0
 800d542:	613b      	str	r3, [r7, #16]
				PutString("\n\r> ");
 800d544:	482e      	ldr	r0, [pc, #184]	@ (800d600 <ReadLine+0x1d4>)
 800d546:	f7ff ff61 	bl	800d40c <PutString>
				break;
 800d54a:	e045      	b.n	800d5d8 <ReadLine+0x1ac>

			case 0x7F: /* DEL - backspace	*/
				// 鼠標位置大於 promote
				if ((outputColumnCnt > PromptLen) && (pCur > &readBuffer[0]) && (receiveCharCnt > 0x00))
 800d54c:	68ba      	ldr	r2, [r7, #8]
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	429a      	cmp	r2, r3
 800d552:	d940      	bls.n	800d5d6 <ReadLine+0x1aa>
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	4a26      	ldr	r2, [pc, #152]	@ (800d5f0 <ReadLine+0x1c4>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d93c      	bls.n	800d5d6 <ReadLine+0x1aa>
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d039      	beq.n	800d5d6 <ReadLine+0x1aa>
				{
					outputColumnCnt--;
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	3b01      	subs	r3, #1
 800d566:	60bb      	str	r3, [r7, #8]
					pCur--;
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	3b01      	subs	r3, #1
 800d56c:	617b      	str	r3, [r7, #20]
					receiveCharCnt--;
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	3b01      	subs	r3, #1
 800d572:	613b      	str	r3, [r7, #16]
					*pCur = '\0'; /* earse the receice char */
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	2200      	movs	r2, #0
 800d578:	701a      	strb	r2, [r3, #0]
					PutString("\n\r> ");
 800d57a:	4821      	ldr	r0, [pc, #132]	@ (800d600 <ReadLine+0x1d4>)
 800d57c:	f7ff ff46 	bl	800d40c <PutString>
					PutString(readBuffer);
 800d580:	481b      	ldr	r0, [pc, #108]	@ (800d5f0 <ReadLine+0x1c4>)
 800d582:	f7ff ff43 	bl	800d40c <PutString>
				}
				break;
 800d586:	e026      	b.n	800d5d6 <ReadLine+0x1aa>

			default:
				if (receiveCharCnt < sizeof(readBuffer) &&
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d58e:	d21e      	bcs.n	800d5ce <ReadLine+0x1a2>
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	4a17      	ldr	r2, [pc, #92]	@ (800d5f0 <ReadLine+0x1c4>)
 800d594:	4293      	cmp	r3, r2
 800d596:	d31a      	bcc.n	800d5ce <ReadLine+0x1a2>
					(pCur >= &readBuffer[0]) &&
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	4a18      	ldr	r2, [pc, #96]	@ (800d5fc <ReadLine+0x1d0>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d816      	bhi.n	800d5ce <ReadLine+0x1a2>
					(pCur <= &readBuffer[READBUF_LEN]) &&
					(cChar > 0x19 && cChar < 0x7F))
 800d5a0:	79bb      	ldrb	r3, [r7, #6]
					(pCur <= &readBuffer[READBUF_LEN]) &&
 800d5a2:	2b19      	cmp	r3, #25
 800d5a4:	d913      	bls.n	800d5ce <ReadLine+0x1a2>
					(cChar > 0x19 && cChar < 0x7F))
 800d5a6:	79bb      	ldrb	r3, [r7, #6]
 800d5a8:	2b7e      	cmp	r3, #126	@ 0x7e
 800d5aa:	d810      	bhi.n	800d5ce <ReadLine+0x1a2>
				{
					outputColumnCnt++;
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	60bb      	str	r3, [r7, #8]
					PutChar(cChar);
 800d5b2:	79bb      	ldrb	r3, [r7, #6]
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f7ff ff17 	bl	800d3e8 <PutChar>
					*pCur = cChar;
 800d5ba:	79ba      	ldrb	r2, [r7, #6]
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	701a      	strb	r2, [r3, #0]
					pCur++;
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	617b      	str	r3, [r7, #20]
					receiveCharCnt++;
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	3301      	adds	r3, #1
 800d5ca:	613b      	str	r3, [r7, #16]
 800d5cc:	e004      	b.n	800d5d8 <ReadLine+0x1ac>
				}
				else /* Buffer full (Overflow) */
				{
					PutChar('\a');
 800d5ce:	2007      	movs	r0, #7
 800d5d0:	f7ff ff0a 	bl	800d3e8 <PutChar>
 800d5d4:	e000      	b.n	800d5d8 <ReadLine+0x1ac>
				break;
 800d5d6:	bf00      	nop
				}
			}
			vTaskDelay(pdMS_TO_TICKS(0));
 800d5d8:	2000      	movs	r0, #0
 800d5da:	f7fb fd99 	bl	8009110 <vTaskDelay>
 800d5de:	e748      	b.n	800d472 <ReadLine+0x46>
		}
		else {
			vTaskDelay(pdMS_TO_TICKS(50));
 800d5e0:	2032      	movs	r0, #50	@ 0x32
 800d5e2:	f7fb fd95 	bl	8009110 <vTaskDelay>
	{
 800d5e6:	e744      	b.n	800d472 <ReadLine+0x46>
		}
	}
	return 0;
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3718      	adds	r7, #24
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	20013c6c 	.word	0x20013c6c
 800d5f4:	2000002c 	.word	0x2000002c
 800d5f8:	0800e904 	.word	0x0800e904
 800d5fc:	2001406c 	.word	0x2001406c
 800d600:	0800e908 	.word	0x0800e908

0800d604 <ArgAnalyze>:

bool ArgAnalyze(uint8_t *argc, char *argv[])
{
 800d604:	b480      	push	{r7}
 800d606:	b085      	sub	sp, #20
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800d60e:	2300      	movs	r3, #0
 800d610:	60fb      	str	r3, [r7, #12]

	while (*argc < MAX_ARGS)
 800d612:	e049      	b.n	800d6a8 <ArgAnalyze+0xa4>
	{
		/* skip any separator */
		while (readBuffer[i] == ' ')
		{
			i++;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	3301      	adds	r3, #1
 800d618:	60fb      	str	r3, [r7, #12]
		while (readBuffer[i] == ' ')
 800d61a:	4a29      	ldr	r2, [pc, #164]	@ (800d6c0 <ArgAnalyze+0xbc>)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	4413      	add	r3, r2
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	2b20      	cmp	r3, #32
 800d624:	d0f6      	beq.n	800d614 <ArgAnalyze+0x10>
		}
		/* end of line, no more args	*/
		if (readBuffer[i] == '\0')
 800d626:	4a26      	ldr	r2, [pc, #152]	@ (800d6c0 <ArgAnalyze+0xbc>)
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	4413      	add	r3, r2
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d108      	bne.n	800d644 <ArgAnalyze+0x40>
		{
			argv[*argc] = NULL;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	683a      	ldr	r2, [r7, #0]
 800d63a:	4413      	add	r3, r2
 800d63c:	2200      	movs	r2, #0
 800d63e:	601a      	str	r2, [r3, #0]
			return true;
 800d640:	2301      	movs	r3, #1
 800d642:	e036      	b.n	800d6b2 <ArgAnalyze+0xae>
		}
		/* begin of argument string */
		argv[(*argc)++] = &readBuffer[i];
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	1c5a      	adds	r2, r3, #1
 800d64a:	b2d1      	uxtb	r1, r2
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	7011      	strb	r1, [r2, #0]
 800d650:	009b      	lsls	r3, r3, #2
 800d652:	683a      	ldr	r2, [r7, #0]
 800d654:	4413      	add	r3, r2
 800d656:	68fa      	ldr	r2, [r7, #12]
 800d658:	4919      	ldr	r1, [pc, #100]	@ (800d6c0 <ArgAnalyze+0xbc>)
 800d65a:	440a      	add	r2, r1
 800d65c:	601a      	str	r2, [r3, #0]
		/* find end of argument string */
		while (readBuffer[i] && readBuffer[i] != ' ')
 800d65e:	e002      	b.n	800d666 <ArgAnalyze+0x62>
		{
			i++;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	3301      	adds	r3, #1
 800d664:	60fb      	str	r3, [r7, #12]
		while (readBuffer[i] && readBuffer[i] != ' ')
 800d666:	4a16      	ldr	r2, [pc, #88]	@ (800d6c0 <ArgAnalyze+0xbc>)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	4413      	add	r3, r2
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d005      	beq.n	800d67e <ArgAnalyze+0x7a>
 800d672:	4a13      	ldr	r2, [pc, #76]	@ (800d6c0 <ArgAnalyze+0xbc>)
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	4413      	add	r3, r2
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	2b20      	cmp	r3, #32
 800d67c:	d1f0      	bne.n	800d660 <ArgAnalyze+0x5c>
		}
		/* end of line, no more args */
		if (readBuffer[i] == '\0')
 800d67e:	4a10      	ldr	r2, [pc, #64]	@ (800d6c0 <ArgAnalyze+0xbc>)
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	4413      	add	r3, r2
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d108      	bne.n	800d69c <ArgAnalyze+0x98>
		{
			argv[*argc] = NULL;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	683a      	ldr	r2, [r7, #0]
 800d692:	4413      	add	r3, r2
 800d694:	2200      	movs	r2, #0
 800d696:	601a      	str	r2, [r3, #0]
			return true;
 800d698:	2301      	movs	r3, #1
 800d69a:	e00a      	b.n	800d6b2 <ArgAnalyze+0xae>
		}
		readBuffer[i++] = '\0';
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	1c5a      	adds	r2, r3, #1
 800d6a0:	60fa      	str	r2, [r7, #12]
 800d6a2:	4a07      	ldr	r2, [pc, #28]	@ (800d6c0 <ArgAnalyze+0xbc>)
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	54d1      	strb	r1, [r2, r3]
	while (*argc < MAX_ARGS)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	2b09      	cmp	r3, #9
 800d6ae:	d9b4      	bls.n	800d61a <ArgAnalyze+0x16>
	}
	return false;
 800d6b0:	2300      	movs	r3, #0
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3714      	adds	r7, #20
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6bc:	4770      	bx	lr
 800d6be:	bf00      	nop
 800d6c0:	20013c6c 	.word	0x20013c6c

0800d6c4 <Shell_Init>:
#include "msgHandler.h"
#define MAX_ARGS 10
UART_HandleTypeDef* shell_huart;

void Shell_Init(UART_HandleTypeDef *huart)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b084      	sub	sp, #16
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
	shell_huart = huart;
 800d6cc:	4a0a      	ldr	r2, [pc, #40]	@ (800d6f8 <Shell_Init+0x34>)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6013      	str	r3, [r2, #0]
	ReadLine_Init(huart);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f7ff fe62 	bl	800d39c <ReadLine_Init>
	command_Init(huart);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f7ff fc0f 	bl	800cefc <command_Init>

	const char *welcome_msg = "\r\nSTM32 Shell Initialized. Type 'help' for commands.\r\n";
 800d6de:	4b07      	ldr	r3, [pc, #28]	@ (800d6fc <Shell_Init+0x38>)
 800d6e0:	60fb      	str	r3, [r7, #12]
	SendMsg(shell_huart, welcome_msg);
 800d6e2:	4b05      	ldr	r3, [pc, #20]	@ (800d6f8 <Shell_Init+0x34>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	68f9      	ldr	r1, [r7, #12]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7f3 fbd9 	bl	8000ea0 <SendMsg>
}
 800d6ee:	bf00      	nop
 800d6f0:	3710      	adds	r7, #16
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop
 800d6f8:	2001406c 	.word	0x2001406c
 800d6fc:	0800e910 	.word	0x0800e910

0800d700 <ShellHandler>:

void ShellHandler(void *pvParameters)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
	static uint8_t argc = 0;
	static char *argv[MAX_ARGS] = {0};

	while (1)
	{
		if (ReadLine())
 800d708:	f7ff fe90 	bl	800d42c <ReadLine>
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d014      	beq.n	800d73c <ShellHandler+0x3c>
		{
			memset(&argc, 0, sizeof(argc));
 800d712:	4b0d      	ldr	r3, [pc, #52]	@ (800d748 <ShellHandler+0x48>)
 800d714:	2200      	movs	r2, #0
 800d716:	701a      	strb	r2, [r3, #0]
			memset(argv, 0, sizeof(argv));
 800d718:	2228      	movs	r2, #40	@ 0x28
 800d71a:	2100      	movs	r1, #0
 800d71c:	480b      	ldr	r0, [pc, #44]	@ (800d74c <ShellHandler+0x4c>)
 800d71e:	f000 f8db 	bl	800d8d8 <memset>

			if (ArgAnalyze(&argc, argv))
 800d722:	490a      	ldr	r1, [pc, #40]	@ (800d74c <ShellHandler+0x4c>)
 800d724:	4808      	ldr	r0, [pc, #32]	@ (800d748 <ShellHandler+0x48>)
 800d726:	f7ff ff6d 	bl	800d604 <ArgAnalyze>
 800d72a:	4603      	mov	r3, r0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d005      	beq.n	800d73c <ShellHandler+0x3c>
			{
				CommandExecute(argc, argv);
 800d730:	4b05      	ldr	r3, [pc, #20]	@ (800d748 <ShellHandler+0x48>)
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	4905      	ldr	r1, [pc, #20]	@ (800d74c <ShellHandler+0x4c>)
 800d736:	4618      	mov	r0, r3
 800d738:	f7ff fdd8 	bl	800d2ec <CommandExecute>
			}
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 800d73c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800d740:	f7fb fce6 	bl	8009110 <vTaskDelay>
		if (ReadLine())
 800d744:	e7e0      	b.n	800d708 <ShellHandler+0x8>
 800d746:	bf00      	nop
 800d748:	20014070 	.word	0x20014070
 800d74c:	20014074 	.word	0x20014074

0800d750 <atoi>:
 800d750:	220a      	movs	r2, #10
 800d752:	2100      	movs	r1, #0
 800d754:	f000 b87a 	b.w	800d84c <strtol>

0800d758 <_strtol_l.isra.0>:
 800d758:	2b24      	cmp	r3, #36	@ 0x24
 800d75a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d75e:	4686      	mov	lr, r0
 800d760:	4690      	mov	r8, r2
 800d762:	d801      	bhi.n	800d768 <_strtol_l.isra.0+0x10>
 800d764:	2b01      	cmp	r3, #1
 800d766:	d106      	bne.n	800d776 <_strtol_l.isra.0+0x1e>
 800d768:	f000 f8e8 	bl	800d93c <__errno>
 800d76c:	2316      	movs	r3, #22
 800d76e:	6003      	str	r3, [r0, #0]
 800d770:	2000      	movs	r0, #0
 800d772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d776:	4834      	ldr	r0, [pc, #208]	@ (800d848 <_strtol_l.isra.0+0xf0>)
 800d778:	460d      	mov	r5, r1
 800d77a:	462a      	mov	r2, r5
 800d77c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d780:	5d06      	ldrb	r6, [r0, r4]
 800d782:	f016 0608 	ands.w	r6, r6, #8
 800d786:	d1f8      	bne.n	800d77a <_strtol_l.isra.0+0x22>
 800d788:	2c2d      	cmp	r4, #45	@ 0x2d
 800d78a:	d110      	bne.n	800d7ae <_strtol_l.isra.0+0x56>
 800d78c:	782c      	ldrb	r4, [r5, #0]
 800d78e:	2601      	movs	r6, #1
 800d790:	1c95      	adds	r5, r2, #2
 800d792:	f033 0210 	bics.w	r2, r3, #16
 800d796:	d115      	bne.n	800d7c4 <_strtol_l.isra.0+0x6c>
 800d798:	2c30      	cmp	r4, #48	@ 0x30
 800d79a:	d10d      	bne.n	800d7b8 <_strtol_l.isra.0+0x60>
 800d79c:	782a      	ldrb	r2, [r5, #0]
 800d79e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d7a2:	2a58      	cmp	r2, #88	@ 0x58
 800d7a4:	d108      	bne.n	800d7b8 <_strtol_l.isra.0+0x60>
 800d7a6:	786c      	ldrb	r4, [r5, #1]
 800d7a8:	3502      	adds	r5, #2
 800d7aa:	2310      	movs	r3, #16
 800d7ac:	e00a      	b.n	800d7c4 <_strtol_l.isra.0+0x6c>
 800d7ae:	2c2b      	cmp	r4, #43	@ 0x2b
 800d7b0:	bf04      	itt	eq
 800d7b2:	782c      	ldrbeq	r4, [r5, #0]
 800d7b4:	1c95      	addeq	r5, r2, #2
 800d7b6:	e7ec      	b.n	800d792 <_strtol_l.isra.0+0x3a>
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1f6      	bne.n	800d7aa <_strtol_l.isra.0+0x52>
 800d7bc:	2c30      	cmp	r4, #48	@ 0x30
 800d7be:	bf14      	ite	ne
 800d7c0:	230a      	movne	r3, #10
 800d7c2:	2308      	moveq	r3, #8
 800d7c4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d7c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	fbbc f9f3 	udiv	r9, ip, r3
 800d7d2:	4610      	mov	r0, r2
 800d7d4:	fb03 ca19 	mls	sl, r3, r9, ip
 800d7d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d7dc:	2f09      	cmp	r7, #9
 800d7de:	d80f      	bhi.n	800d800 <_strtol_l.isra.0+0xa8>
 800d7e0:	463c      	mov	r4, r7
 800d7e2:	42a3      	cmp	r3, r4
 800d7e4:	dd1b      	ble.n	800d81e <_strtol_l.isra.0+0xc6>
 800d7e6:	1c57      	adds	r7, r2, #1
 800d7e8:	d007      	beq.n	800d7fa <_strtol_l.isra.0+0xa2>
 800d7ea:	4581      	cmp	r9, r0
 800d7ec:	d314      	bcc.n	800d818 <_strtol_l.isra.0+0xc0>
 800d7ee:	d101      	bne.n	800d7f4 <_strtol_l.isra.0+0x9c>
 800d7f0:	45a2      	cmp	sl, r4
 800d7f2:	db11      	blt.n	800d818 <_strtol_l.isra.0+0xc0>
 800d7f4:	fb00 4003 	mla	r0, r0, r3, r4
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d7fe:	e7eb      	b.n	800d7d8 <_strtol_l.isra.0+0x80>
 800d800:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d804:	2f19      	cmp	r7, #25
 800d806:	d801      	bhi.n	800d80c <_strtol_l.isra.0+0xb4>
 800d808:	3c37      	subs	r4, #55	@ 0x37
 800d80a:	e7ea      	b.n	800d7e2 <_strtol_l.isra.0+0x8a>
 800d80c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d810:	2f19      	cmp	r7, #25
 800d812:	d804      	bhi.n	800d81e <_strtol_l.isra.0+0xc6>
 800d814:	3c57      	subs	r4, #87	@ 0x57
 800d816:	e7e4      	b.n	800d7e2 <_strtol_l.isra.0+0x8a>
 800d818:	f04f 32ff 	mov.w	r2, #4294967295
 800d81c:	e7ed      	b.n	800d7fa <_strtol_l.isra.0+0xa2>
 800d81e:	1c53      	adds	r3, r2, #1
 800d820:	d108      	bne.n	800d834 <_strtol_l.isra.0+0xdc>
 800d822:	2322      	movs	r3, #34	@ 0x22
 800d824:	f8ce 3000 	str.w	r3, [lr]
 800d828:	4660      	mov	r0, ip
 800d82a:	f1b8 0f00 	cmp.w	r8, #0
 800d82e:	d0a0      	beq.n	800d772 <_strtol_l.isra.0+0x1a>
 800d830:	1e69      	subs	r1, r5, #1
 800d832:	e006      	b.n	800d842 <_strtol_l.isra.0+0xea>
 800d834:	b106      	cbz	r6, 800d838 <_strtol_l.isra.0+0xe0>
 800d836:	4240      	negs	r0, r0
 800d838:	f1b8 0f00 	cmp.w	r8, #0
 800d83c:	d099      	beq.n	800d772 <_strtol_l.isra.0+0x1a>
 800d83e:	2a00      	cmp	r2, #0
 800d840:	d1f6      	bne.n	800d830 <_strtol_l.isra.0+0xd8>
 800d842:	f8c8 1000 	str.w	r1, [r8]
 800d846:	e794      	b.n	800d772 <_strtol_l.isra.0+0x1a>
 800d848:	0800ea3d 	.word	0x0800ea3d

0800d84c <strtol>:
 800d84c:	4613      	mov	r3, r2
 800d84e:	460a      	mov	r2, r1
 800d850:	4601      	mov	r1, r0
 800d852:	4802      	ldr	r0, [pc, #8]	@ (800d85c <strtol+0x10>)
 800d854:	6800      	ldr	r0, [r0, #0]
 800d856:	f7ff bf7f 	b.w	800d758 <_strtol_l.isra.0>
 800d85a:	bf00      	nop
 800d85c:	2000012c 	.word	0x2000012c

0800d860 <_vsniprintf_r>:
 800d860:	b530      	push	{r4, r5, lr}
 800d862:	4614      	mov	r4, r2
 800d864:	2c00      	cmp	r4, #0
 800d866:	b09b      	sub	sp, #108	@ 0x6c
 800d868:	4605      	mov	r5, r0
 800d86a:	461a      	mov	r2, r3
 800d86c:	da05      	bge.n	800d87a <_vsniprintf_r+0x1a>
 800d86e:	238b      	movs	r3, #139	@ 0x8b
 800d870:	6003      	str	r3, [r0, #0]
 800d872:	f04f 30ff 	mov.w	r0, #4294967295
 800d876:	b01b      	add	sp, #108	@ 0x6c
 800d878:	bd30      	pop	{r4, r5, pc}
 800d87a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d87e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d882:	f04f 0300 	mov.w	r3, #0
 800d886:	9319      	str	r3, [sp, #100]	@ 0x64
 800d888:	bf14      	ite	ne
 800d88a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d88e:	4623      	moveq	r3, r4
 800d890:	9302      	str	r3, [sp, #8]
 800d892:	9305      	str	r3, [sp, #20]
 800d894:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d898:	9100      	str	r1, [sp, #0]
 800d89a:	9104      	str	r1, [sp, #16]
 800d89c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d8a0:	4669      	mov	r1, sp
 800d8a2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d8a4:	f000 f9d8 	bl	800dc58 <_svfiprintf_r>
 800d8a8:	1c43      	adds	r3, r0, #1
 800d8aa:	bfbc      	itt	lt
 800d8ac:	238b      	movlt	r3, #139	@ 0x8b
 800d8ae:	602b      	strlt	r3, [r5, #0]
 800d8b0:	2c00      	cmp	r4, #0
 800d8b2:	d0e0      	beq.n	800d876 <_vsniprintf_r+0x16>
 800d8b4:	9b00      	ldr	r3, [sp, #0]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	701a      	strb	r2, [r3, #0]
 800d8ba:	e7dc      	b.n	800d876 <_vsniprintf_r+0x16>

0800d8bc <vsniprintf>:
 800d8bc:	b507      	push	{r0, r1, r2, lr}
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	460a      	mov	r2, r1
 800d8c4:	4601      	mov	r1, r0
 800d8c6:	4803      	ldr	r0, [pc, #12]	@ (800d8d4 <vsniprintf+0x18>)
 800d8c8:	6800      	ldr	r0, [r0, #0]
 800d8ca:	f7ff ffc9 	bl	800d860 <_vsniprintf_r>
 800d8ce:	b003      	add	sp, #12
 800d8d0:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8d4:	2000012c 	.word	0x2000012c

0800d8d8 <memset>:
 800d8d8:	4402      	add	r2, r0
 800d8da:	4603      	mov	r3, r0
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d100      	bne.n	800d8e2 <memset+0xa>
 800d8e0:	4770      	bx	lr
 800d8e2:	f803 1b01 	strb.w	r1, [r3], #1
 800d8e6:	e7f9      	b.n	800d8dc <memset+0x4>

0800d8e8 <strncpy>:
 800d8e8:	b510      	push	{r4, lr}
 800d8ea:	3901      	subs	r1, #1
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	b132      	cbz	r2, 800d8fe <strncpy+0x16>
 800d8f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d8f4:	f803 4b01 	strb.w	r4, [r3], #1
 800d8f8:	3a01      	subs	r2, #1
 800d8fa:	2c00      	cmp	r4, #0
 800d8fc:	d1f7      	bne.n	800d8ee <strncpy+0x6>
 800d8fe:	441a      	add	r2, r3
 800d900:	2100      	movs	r1, #0
 800d902:	4293      	cmp	r3, r2
 800d904:	d100      	bne.n	800d908 <strncpy+0x20>
 800d906:	bd10      	pop	{r4, pc}
 800d908:	f803 1b01 	strb.w	r1, [r3], #1
 800d90c:	e7f9      	b.n	800d902 <strncpy+0x1a>

0800d90e <strrchr>:
 800d90e:	b538      	push	{r3, r4, r5, lr}
 800d910:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800d914:	4603      	mov	r3, r0
 800d916:	d10e      	bne.n	800d936 <strrchr+0x28>
 800d918:	4621      	mov	r1, r4
 800d91a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d91e:	f000 bc3d 	b.w	800e19c <strchr>
 800d922:	1c43      	adds	r3, r0, #1
 800d924:	4605      	mov	r5, r0
 800d926:	4621      	mov	r1, r4
 800d928:	4618      	mov	r0, r3
 800d92a:	f000 fc37 	bl	800e19c <strchr>
 800d92e:	2800      	cmp	r0, #0
 800d930:	d1f7      	bne.n	800d922 <strrchr+0x14>
 800d932:	4628      	mov	r0, r5
 800d934:	bd38      	pop	{r3, r4, r5, pc}
 800d936:	2500      	movs	r5, #0
 800d938:	e7f5      	b.n	800d926 <strrchr+0x18>
	...

0800d93c <__errno>:
 800d93c:	4b01      	ldr	r3, [pc, #4]	@ (800d944 <__errno+0x8>)
 800d93e:	6818      	ldr	r0, [r3, #0]
 800d940:	4770      	bx	lr
 800d942:	bf00      	nop
 800d944:	2000012c 	.word	0x2000012c

0800d948 <__libc_init_array>:
 800d948:	b570      	push	{r4, r5, r6, lr}
 800d94a:	4d0d      	ldr	r5, [pc, #52]	@ (800d980 <__libc_init_array+0x38>)
 800d94c:	4c0d      	ldr	r4, [pc, #52]	@ (800d984 <__libc_init_array+0x3c>)
 800d94e:	1b64      	subs	r4, r4, r5
 800d950:	10a4      	asrs	r4, r4, #2
 800d952:	2600      	movs	r6, #0
 800d954:	42a6      	cmp	r6, r4
 800d956:	d109      	bne.n	800d96c <__libc_init_array+0x24>
 800d958:	4d0b      	ldr	r5, [pc, #44]	@ (800d988 <__libc_init_array+0x40>)
 800d95a:	4c0c      	ldr	r4, [pc, #48]	@ (800d98c <__libc_init_array+0x44>)
 800d95c:	f000 fc72 	bl	800e244 <_init>
 800d960:	1b64      	subs	r4, r4, r5
 800d962:	10a4      	asrs	r4, r4, #2
 800d964:	2600      	movs	r6, #0
 800d966:	42a6      	cmp	r6, r4
 800d968:	d105      	bne.n	800d976 <__libc_init_array+0x2e>
 800d96a:	bd70      	pop	{r4, r5, r6, pc}
 800d96c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d970:	4798      	blx	r3
 800d972:	3601      	adds	r6, #1
 800d974:	e7ee      	b.n	800d954 <__libc_init_array+0xc>
 800d976:	f855 3b04 	ldr.w	r3, [r5], #4
 800d97a:	4798      	blx	r3
 800d97c:	3601      	adds	r6, #1
 800d97e:	e7f2      	b.n	800d966 <__libc_init_array+0x1e>
 800d980:	0800eb78 	.word	0x0800eb78
 800d984:	0800eb78 	.word	0x0800eb78
 800d988:	0800eb78 	.word	0x0800eb78
 800d98c:	0800eb7c 	.word	0x0800eb7c

0800d990 <__retarget_lock_acquire_recursive>:
 800d990:	4770      	bx	lr

0800d992 <__retarget_lock_release_recursive>:
 800d992:	4770      	bx	lr

0800d994 <memcpy>:
 800d994:	440a      	add	r2, r1
 800d996:	4291      	cmp	r1, r2
 800d998:	f100 33ff 	add.w	r3, r0, #4294967295
 800d99c:	d100      	bne.n	800d9a0 <memcpy+0xc>
 800d99e:	4770      	bx	lr
 800d9a0:	b510      	push	{r4, lr}
 800d9a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9aa:	4291      	cmp	r1, r2
 800d9ac:	d1f9      	bne.n	800d9a2 <memcpy+0xe>
 800d9ae:	bd10      	pop	{r4, pc}

0800d9b0 <_free_r>:
 800d9b0:	b538      	push	{r3, r4, r5, lr}
 800d9b2:	4605      	mov	r5, r0
 800d9b4:	2900      	cmp	r1, #0
 800d9b6:	d041      	beq.n	800da3c <_free_r+0x8c>
 800d9b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9bc:	1f0c      	subs	r4, r1, #4
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	bfb8      	it	lt
 800d9c2:	18e4      	addlt	r4, r4, r3
 800d9c4:	f000 f8e0 	bl	800db88 <__malloc_lock>
 800d9c8:	4a1d      	ldr	r2, [pc, #116]	@ (800da40 <_free_r+0x90>)
 800d9ca:	6813      	ldr	r3, [r2, #0]
 800d9cc:	b933      	cbnz	r3, 800d9dc <_free_r+0x2c>
 800d9ce:	6063      	str	r3, [r4, #4]
 800d9d0:	6014      	str	r4, [r2, #0]
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9d8:	f000 b8dc 	b.w	800db94 <__malloc_unlock>
 800d9dc:	42a3      	cmp	r3, r4
 800d9de:	d908      	bls.n	800d9f2 <_free_r+0x42>
 800d9e0:	6820      	ldr	r0, [r4, #0]
 800d9e2:	1821      	adds	r1, r4, r0
 800d9e4:	428b      	cmp	r3, r1
 800d9e6:	bf01      	itttt	eq
 800d9e8:	6819      	ldreq	r1, [r3, #0]
 800d9ea:	685b      	ldreq	r3, [r3, #4]
 800d9ec:	1809      	addeq	r1, r1, r0
 800d9ee:	6021      	streq	r1, [r4, #0]
 800d9f0:	e7ed      	b.n	800d9ce <_free_r+0x1e>
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	b10b      	cbz	r3, 800d9fc <_free_r+0x4c>
 800d9f8:	42a3      	cmp	r3, r4
 800d9fa:	d9fa      	bls.n	800d9f2 <_free_r+0x42>
 800d9fc:	6811      	ldr	r1, [r2, #0]
 800d9fe:	1850      	adds	r0, r2, r1
 800da00:	42a0      	cmp	r0, r4
 800da02:	d10b      	bne.n	800da1c <_free_r+0x6c>
 800da04:	6820      	ldr	r0, [r4, #0]
 800da06:	4401      	add	r1, r0
 800da08:	1850      	adds	r0, r2, r1
 800da0a:	4283      	cmp	r3, r0
 800da0c:	6011      	str	r1, [r2, #0]
 800da0e:	d1e0      	bne.n	800d9d2 <_free_r+0x22>
 800da10:	6818      	ldr	r0, [r3, #0]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	6053      	str	r3, [r2, #4]
 800da16:	4408      	add	r0, r1
 800da18:	6010      	str	r0, [r2, #0]
 800da1a:	e7da      	b.n	800d9d2 <_free_r+0x22>
 800da1c:	d902      	bls.n	800da24 <_free_r+0x74>
 800da1e:	230c      	movs	r3, #12
 800da20:	602b      	str	r3, [r5, #0]
 800da22:	e7d6      	b.n	800d9d2 <_free_r+0x22>
 800da24:	6820      	ldr	r0, [r4, #0]
 800da26:	1821      	adds	r1, r4, r0
 800da28:	428b      	cmp	r3, r1
 800da2a:	bf04      	itt	eq
 800da2c:	6819      	ldreq	r1, [r3, #0]
 800da2e:	685b      	ldreq	r3, [r3, #4]
 800da30:	6063      	str	r3, [r4, #4]
 800da32:	bf04      	itt	eq
 800da34:	1809      	addeq	r1, r1, r0
 800da36:	6021      	streq	r1, [r4, #0]
 800da38:	6054      	str	r4, [r2, #4]
 800da3a:	e7ca      	b.n	800d9d2 <_free_r+0x22>
 800da3c:	bd38      	pop	{r3, r4, r5, pc}
 800da3e:	bf00      	nop
 800da40:	200141e0 	.word	0x200141e0

0800da44 <sbrk_aligned>:
 800da44:	b570      	push	{r4, r5, r6, lr}
 800da46:	4e0f      	ldr	r6, [pc, #60]	@ (800da84 <sbrk_aligned+0x40>)
 800da48:	460c      	mov	r4, r1
 800da4a:	6831      	ldr	r1, [r6, #0]
 800da4c:	4605      	mov	r5, r0
 800da4e:	b911      	cbnz	r1, 800da56 <sbrk_aligned+0x12>
 800da50:	f000 fbb2 	bl	800e1b8 <_sbrk_r>
 800da54:	6030      	str	r0, [r6, #0]
 800da56:	4621      	mov	r1, r4
 800da58:	4628      	mov	r0, r5
 800da5a:	f000 fbad 	bl	800e1b8 <_sbrk_r>
 800da5e:	1c43      	adds	r3, r0, #1
 800da60:	d103      	bne.n	800da6a <sbrk_aligned+0x26>
 800da62:	f04f 34ff 	mov.w	r4, #4294967295
 800da66:	4620      	mov	r0, r4
 800da68:	bd70      	pop	{r4, r5, r6, pc}
 800da6a:	1cc4      	adds	r4, r0, #3
 800da6c:	f024 0403 	bic.w	r4, r4, #3
 800da70:	42a0      	cmp	r0, r4
 800da72:	d0f8      	beq.n	800da66 <sbrk_aligned+0x22>
 800da74:	1a21      	subs	r1, r4, r0
 800da76:	4628      	mov	r0, r5
 800da78:	f000 fb9e 	bl	800e1b8 <_sbrk_r>
 800da7c:	3001      	adds	r0, #1
 800da7e:	d1f2      	bne.n	800da66 <sbrk_aligned+0x22>
 800da80:	e7ef      	b.n	800da62 <sbrk_aligned+0x1e>
 800da82:	bf00      	nop
 800da84:	200141dc 	.word	0x200141dc

0800da88 <_malloc_r>:
 800da88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da8c:	1ccd      	adds	r5, r1, #3
 800da8e:	f025 0503 	bic.w	r5, r5, #3
 800da92:	3508      	adds	r5, #8
 800da94:	2d0c      	cmp	r5, #12
 800da96:	bf38      	it	cc
 800da98:	250c      	movcc	r5, #12
 800da9a:	2d00      	cmp	r5, #0
 800da9c:	4606      	mov	r6, r0
 800da9e:	db01      	blt.n	800daa4 <_malloc_r+0x1c>
 800daa0:	42a9      	cmp	r1, r5
 800daa2:	d904      	bls.n	800daae <_malloc_r+0x26>
 800daa4:	230c      	movs	r3, #12
 800daa6:	6033      	str	r3, [r6, #0]
 800daa8:	2000      	movs	r0, #0
 800daaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800db84 <_malloc_r+0xfc>
 800dab2:	f000 f869 	bl	800db88 <__malloc_lock>
 800dab6:	f8d8 3000 	ldr.w	r3, [r8]
 800daba:	461c      	mov	r4, r3
 800dabc:	bb44      	cbnz	r4, 800db10 <_malloc_r+0x88>
 800dabe:	4629      	mov	r1, r5
 800dac0:	4630      	mov	r0, r6
 800dac2:	f7ff ffbf 	bl	800da44 <sbrk_aligned>
 800dac6:	1c43      	adds	r3, r0, #1
 800dac8:	4604      	mov	r4, r0
 800daca:	d158      	bne.n	800db7e <_malloc_r+0xf6>
 800dacc:	f8d8 4000 	ldr.w	r4, [r8]
 800dad0:	4627      	mov	r7, r4
 800dad2:	2f00      	cmp	r7, #0
 800dad4:	d143      	bne.n	800db5e <_malloc_r+0xd6>
 800dad6:	2c00      	cmp	r4, #0
 800dad8:	d04b      	beq.n	800db72 <_malloc_r+0xea>
 800dada:	6823      	ldr	r3, [r4, #0]
 800dadc:	4639      	mov	r1, r7
 800dade:	4630      	mov	r0, r6
 800dae0:	eb04 0903 	add.w	r9, r4, r3
 800dae4:	f000 fb68 	bl	800e1b8 <_sbrk_r>
 800dae8:	4581      	cmp	r9, r0
 800daea:	d142      	bne.n	800db72 <_malloc_r+0xea>
 800daec:	6821      	ldr	r1, [r4, #0]
 800daee:	1a6d      	subs	r5, r5, r1
 800daf0:	4629      	mov	r1, r5
 800daf2:	4630      	mov	r0, r6
 800daf4:	f7ff ffa6 	bl	800da44 <sbrk_aligned>
 800daf8:	3001      	adds	r0, #1
 800dafa:	d03a      	beq.n	800db72 <_malloc_r+0xea>
 800dafc:	6823      	ldr	r3, [r4, #0]
 800dafe:	442b      	add	r3, r5
 800db00:	6023      	str	r3, [r4, #0]
 800db02:	f8d8 3000 	ldr.w	r3, [r8]
 800db06:	685a      	ldr	r2, [r3, #4]
 800db08:	bb62      	cbnz	r2, 800db64 <_malloc_r+0xdc>
 800db0a:	f8c8 7000 	str.w	r7, [r8]
 800db0e:	e00f      	b.n	800db30 <_malloc_r+0xa8>
 800db10:	6822      	ldr	r2, [r4, #0]
 800db12:	1b52      	subs	r2, r2, r5
 800db14:	d420      	bmi.n	800db58 <_malloc_r+0xd0>
 800db16:	2a0b      	cmp	r2, #11
 800db18:	d917      	bls.n	800db4a <_malloc_r+0xc2>
 800db1a:	1961      	adds	r1, r4, r5
 800db1c:	42a3      	cmp	r3, r4
 800db1e:	6025      	str	r5, [r4, #0]
 800db20:	bf18      	it	ne
 800db22:	6059      	strne	r1, [r3, #4]
 800db24:	6863      	ldr	r3, [r4, #4]
 800db26:	bf08      	it	eq
 800db28:	f8c8 1000 	streq.w	r1, [r8]
 800db2c:	5162      	str	r2, [r4, r5]
 800db2e:	604b      	str	r3, [r1, #4]
 800db30:	4630      	mov	r0, r6
 800db32:	f000 f82f 	bl	800db94 <__malloc_unlock>
 800db36:	f104 000b 	add.w	r0, r4, #11
 800db3a:	1d23      	adds	r3, r4, #4
 800db3c:	f020 0007 	bic.w	r0, r0, #7
 800db40:	1ac2      	subs	r2, r0, r3
 800db42:	bf1c      	itt	ne
 800db44:	1a1b      	subne	r3, r3, r0
 800db46:	50a3      	strne	r3, [r4, r2]
 800db48:	e7af      	b.n	800daaa <_malloc_r+0x22>
 800db4a:	6862      	ldr	r2, [r4, #4]
 800db4c:	42a3      	cmp	r3, r4
 800db4e:	bf0c      	ite	eq
 800db50:	f8c8 2000 	streq.w	r2, [r8]
 800db54:	605a      	strne	r2, [r3, #4]
 800db56:	e7eb      	b.n	800db30 <_malloc_r+0xa8>
 800db58:	4623      	mov	r3, r4
 800db5a:	6864      	ldr	r4, [r4, #4]
 800db5c:	e7ae      	b.n	800dabc <_malloc_r+0x34>
 800db5e:	463c      	mov	r4, r7
 800db60:	687f      	ldr	r7, [r7, #4]
 800db62:	e7b6      	b.n	800dad2 <_malloc_r+0x4a>
 800db64:	461a      	mov	r2, r3
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	42a3      	cmp	r3, r4
 800db6a:	d1fb      	bne.n	800db64 <_malloc_r+0xdc>
 800db6c:	2300      	movs	r3, #0
 800db6e:	6053      	str	r3, [r2, #4]
 800db70:	e7de      	b.n	800db30 <_malloc_r+0xa8>
 800db72:	230c      	movs	r3, #12
 800db74:	6033      	str	r3, [r6, #0]
 800db76:	4630      	mov	r0, r6
 800db78:	f000 f80c 	bl	800db94 <__malloc_unlock>
 800db7c:	e794      	b.n	800daa8 <_malloc_r+0x20>
 800db7e:	6005      	str	r5, [r0, #0]
 800db80:	e7d6      	b.n	800db30 <_malloc_r+0xa8>
 800db82:	bf00      	nop
 800db84:	200141e0 	.word	0x200141e0

0800db88 <__malloc_lock>:
 800db88:	4801      	ldr	r0, [pc, #4]	@ (800db90 <__malloc_lock+0x8>)
 800db8a:	f7ff bf01 	b.w	800d990 <__retarget_lock_acquire_recursive>
 800db8e:	bf00      	nop
 800db90:	200141d8 	.word	0x200141d8

0800db94 <__malloc_unlock>:
 800db94:	4801      	ldr	r0, [pc, #4]	@ (800db9c <__malloc_unlock+0x8>)
 800db96:	f7ff befc 	b.w	800d992 <__retarget_lock_release_recursive>
 800db9a:	bf00      	nop
 800db9c:	200141d8 	.word	0x200141d8

0800dba0 <__ssputs_r>:
 800dba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dba4:	688e      	ldr	r6, [r1, #8]
 800dba6:	461f      	mov	r7, r3
 800dba8:	42be      	cmp	r6, r7
 800dbaa:	680b      	ldr	r3, [r1, #0]
 800dbac:	4682      	mov	sl, r0
 800dbae:	460c      	mov	r4, r1
 800dbb0:	4690      	mov	r8, r2
 800dbb2:	d82d      	bhi.n	800dc10 <__ssputs_r+0x70>
 800dbb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dbb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dbbc:	d026      	beq.n	800dc0c <__ssputs_r+0x6c>
 800dbbe:	6965      	ldr	r5, [r4, #20]
 800dbc0:	6909      	ldr	r1, [r1, #16]
 800dbc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dbc6:	eba3 0901 	sub.w	r9, r3, r1
 800dbca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dbce:	1c7b      	adds	r3, r7, #1
 800dbd0:	444b      	add	r3, r9
 800dbd2:	106d      	asrs	r5, r5, #1
 800dbd4:	429d      	cmp	r5, r3
 800dbd6:	bf38      	it	cc
 800dbd8:	461d      	movcc	r5, r3
 800dbda:	0553      	lsls	r3, r2, #21
 800dbdc:	d527      	bpl.n	800dc2e <__ssputs_r+0x8e>
 800dbde:	4629      	mov	r1, r5
 800dbe0:	f7ff ff52 	bl	800da88 <_malloc_r>
 800dbe4:	4606      	mov	r6, r0
 800dbe6:	b360      	cbz	r0, 800dc42 <__ssputs_r+0xa2>
 800dbe8:	6921      	ldr	r1, [r4, #16]
 800dbea:	464a      	mov	r2, r9
 800dbec:	f7ff fed2 	bl	800d994 <memcpy>
 800dbf0:	89a3      	ldrh	r3, [r4, #12]
 800dbf2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dbf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbfa:	81a3      	strh	r3, [r4, #12]
 800dbfc:	6126      	str	r6, [r4, #16]
 800dbfe:	6165      	str	r5, [r4, #20]
 800dc00:	444e      	add	r6, r9
 800dc02:	eba5 0509 	sub.w	r5, r5, r9
 800dc06:	6026      	str	r6, [r4, #0]
 800dc08:	60a5      	str	r5, [r4, #8]
 800dc0a:	463e      	mov	r6, r7
 800dc0c:	42be      	cmp	r6, r7
 800dc0e:	d900      	bls.n	800dc12 <__ssputs_r+0x72>
 800dc10:	463e      	mov	r6, r7
 800dc12:	6820      	ldr	r0, [r4, #0]
 800dc14:	4632      	mov	r2, r6
 800dc16:	4641      	mov	r1, r8
 800dc18:	f000 faa6 	bl	800e168 <memmove>
 800dc1c:	68a3      	ldr	r3, [r4, #8]
 800dc1e:	1b9b      	subs	r3, r3, r6
 800dc20:	60a3      	str	r3, [r4, #8]
 800dc22:	6823      	ldr	r3, [r4, #0]
 800dc24:	4433      	add	r3, r6
 800dc26:	6023      	str	r3, [r4, #0]
 800dc28:	2000      	movs	r0, #0
 800dc2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc2e:	462a      	mov	r2, r5
 800dc30:	f000 fad2 	bl	800e1d8 <_realloc_r>
 800dc34:	4606      	mov	r6, r0
 800dc36:	2800      	cmp	r0, #0
 800dc38:	d1e0      	bne.n	800dbfc <__ssputs_r+0x5c>
 800dc3a:	6921      	ldr	r1, [r4, #16]
 800dc3c:	4650      	mov	r0, sl
 800dc3e:	f7ff feb7 	bl	800d9b0 <_free_r>
 800dc42:	230c      	movs	r3, #12
 800dc44:	f8ca 3000 	str.w	r3, [sl]
 800dc48:	89a3      	ldrh	r3, [r4, #12]
 800dc4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc4e:	81a3      	strh	r3, [r4, #12]
 800dc50:	f04f 30ff 	mov.w	r0, #4294967295
 800dc54:	e7e9      	b.n	800dc2a <__ssputs_r+0x8a>
	...

0800dc58 <_svfiprintf_r>:
 800dc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc5c:	4698      	mov	r8, r3
 800dc5e:	898b      	ldrh	r3, [r1, #12]
 800dc60:	061b      	lsls	r3, r3, #24
 800dc62:	b09d      	sub	sp, #116	@ 0x74
 800dc64:	4607      	mov	r7, r0
 800dc66:	460d      	mov	r5, r1
 800dc68:	4614      	mov	r4, r2
 800dc6a:	d510      	bpl.n	800dc8e <_svfiprintf_r+0x36>
 800dc6c:	690b      	ldr	r3, [r1, #16]
 800dc6e:	b973      	cbnz	r3, 800dc8e <_svfiprintf_r+0x36>
 800dc70:	2140      	movs	r1, #64	@ 0x40
 800dc72:	f7ff ff09 	bl	800da88 <_malloc_r>
 800dc76:	6028      	str	r0, [r5, #0]
 800dc78:	6128      	str	r0, [r5, #16]
 800dc7a:	b930      	cbnz	r0, 800dc8a <_svfiprintf_r+0x32>
 800dc7c:	230c      	movs	r3, #12
 800dc7e:	603b      	str	r3, [r7, #0]
 800dc80:	f04f 30ff 	mov.w	r0, #4294967295
 800dc84:	b01d      	add	sp, #116	@ 0x74
 800dc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc8a:	2340      	movs	r3, #64	@ 0x40
 800dc8c:	616b      	str	r3, [r5, #20]
 800dc8e:	2300      	movs	r3, #0
 800dc90:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc92:	2320      	movs	r3, #32
 800dc94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc98:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc9c:	2330      	movs	r3, #48	@ 0x30
 800dc9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800de3c <_svfiprintf_r+0x1e4>
 800dca2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dca6:	f04f 0901 	mov.w	r9, #1
 800dcaa:	4623      	mov	r3, r4
 800dcac:	469a      	mov	sl, r3
 800dcae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcb2:	b10a      	cbz	r2, 800dcb8 <_svfiprintf_r+0x60>
 800dcb4:	2a25      	cmp	r2, #37	@ 0x25
 800dcb6:	d1f9      	bne.n	800dcac <_svfiprintf_r+0x54>
 800dcb8:	ebba 0b04 	subs.w	fp, sl, r4
 800dcbc:	d00b      	beq.n	800dcd6 <_svfiprintf_r+0x7e>
 800dcbe:	465b      	mov	r3, fp
 800dcc0:	4622      	mov	r2, r4
 800dcc2:	4629      	mov	r1, r5
 800dcc4:	4638      	mov	r0, r7
 800dcc6:	f7ff ff6b 	bl	800dba0 <__ssputs_r>
 800dcca:	3001      	adds	r0, #1
 800dccc:	f000 80a7 	beq.w	800de1e <_svfiprintf_r+0x1c6>
 800dcd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcd2:	445a      	add	r2, fp
 800dcd4:	9209      	str	r2, [sp, #36]	@ 0x24
 800dcd6:	f89a 3000 	ldrb.w	r3, [sl]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	f000 809f 	beq.w	800de1e <_svfiprintf_r+0x1c6>
 800dce0:	2300      	movs	r3, #0
 800dce2:	f04f 32ff 	mov.w	r2, #4294967295
 800dce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcea:	f10a 0a01 	add.w	sl, sl, #1
 800dcee:	9304      	str	r3, [sp, #16]
 800dcf0:	9307      	str	r3, [sp, #28]
 800dcf2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dcf6:	931a      	str	r3, [sp, #104]	@ 0x68
 800dcf8:	4654      	mov	r4, sl
 800dcfa:	2205      	movs	r2, #5
 800dcfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd00:	484e      	ldr	r0, [pc, #312]	@ (800de3c <_svfiprintf_r+0x1e4>)
 800dd02:	f7f2 fa7d 	bl	8000200 <memchr>
 800dd06:	9a04      	ldr	r2, [sp, #16]
 800dd08:	b9d8      	cbnz	r0, 800dd42 <_svfiprintf_r+0xea>
 800dd0a:	06d0      	lsls	r0, r2, #27
 800dd0c:	bf44      	itt	mi
 800dd0e:	2320      	movmi	r3, #32
 800dd10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd14:	0711      	lsls	r1, r2, #28
 800dd16:	bf44      	itt	mi
 800dd18:	232b      	movmi	r3, #43	@ 0x2b
 800dd1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd1e:	f89a 3000 	ldrb.w	r3, [sl]
 800dd22:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd24:	d015      	beq.n	800dd52 <_svfiprintf_r+0xfa>
 800dd26:	9a07      	ldr	r2, [sp, #28]
 800dd28:	4654      	mov	r4, sl
 800dd2a:	2000      	movs	r0, #0
 800dd2c:	f04f 0c0a 	mov.w	ip, #10
 800dd30:	4621      	mov	r1, r4
 800dd32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd36:	3b30      	subs	r3, #48	@ 0x30
 800dd38:	2b09      	cmp	r3, #9
 800dd3a:	d94b      	bls.n	800ddd4 <_svfiprintf_r+0x17c>
 800dd3c:	b1b0      	cbz	r0, 800dd6c <_svfiprintf_r+0x114>
 800dd3e:	9207      	str	r2, [sp, #28]
 800dd40:	e014      	b.n	800dd6c <_svfiprintf_r+0x114>
 800dd42:	eba0 0308 	sub.w	r3, r0, r8
 800dd46:	fa09 f303 	lsl.w	r3, r9, r3
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	9304      	str	r3, [sp, #16]
 800dd4e:	46a2      	mov	sl, r4
 800dd50:	e7d2      	b.n	800dcf8 <_svfiprintf_r+0xa0>
 800dd52:	9b03      	ldr	r3, [sp, #12]
 800dd54:	1d19      	adds	r1, r3, #4
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	9103      	str	r1, [sp, #12]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	bfbb      	ittet	lt
 800dd5e:	425b      	neglt	r3, r3
 800dd60:	f042 0202 	orrlt.w	r2, r2, #2
 800dd64:	9307      	strge	r3, [sp, #28]
 800dd66:	9307      	strlt	r3, [sp, #28]
 800dd68:	bfb8      	it	lt
 800dd6a:	9204      	strlt	r2, [sp, #16]
 800dd6c:	7823      	ldrb	r3, [r4, #0]
 800dd6e:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd70:	d10a      	bne.n	800dd88 <_svfiprintf_r+0x130>
 800dd72:	7863      	ldrb	r3, [r4, #1]
 800dd74:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd76:	d132      	bne.n	800ddde <_svfiprintf_r+0x186>
 800dd78:	9b03      	ldr	r3, [sp, #12]
 800dd7a:	1d1a      	adds	r2, r3, #4
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	9203      	str	r2, [sp, #12]
 800dd80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd84:	3402      	adds	r4, #2
 800dd86:	9305      	str	r3, [sp, #20]
 800dd88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800de4c <_svfiprintf_r+0x1f4>
 800dd8c:	7821      	ldrb	r1, [r4, #0]
 800dd8e:	2203      	movs	r2, #3
 800dd90:	4650      	mov	r0, sl
 800dd92:	f7f2 fa35 	bl	8000200 <memchr>
 800dd96:	b138      	cbz	r0, 800dda8 <_svfiprintf_r+0x150>
 800dd98:	9b04      	ldr	r3, [sp, #16]
 800dd9a:	eba0 000a 	sub.w	r0, r0, sl
 800dd9e:	2240      	movs	r2, #64	@ 0x40
 800dda0:	4082      	lsls	r2, r0
 800dda2:	4313      	orrs	r3, r2
 800dda4:	3401      	adds	r4, #1
 800dda6:	9304      	str	r3, [sp, #16]
 800dda8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddac:	4824      	ldr	r0, [pc, #144]	@ (800de40 <_svfiprintf_r+0x1e8>)
 800ddae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ddb2:	2206      	movs	r2, #6
 800ddb4:	f7f2 fa24 	bl	8000200 <memchr>
 800ddb8:	2800      	cmp	r0, #0
 800ddba:	d036      	beq.n	800de2a <_svfiprintf_r+0x1d2>
 800ddbc:	4b21      	ldr	r3, [pc, #132]	@ (800de44 <_svfiprintf_r+0x1ec>)
 800ddbe:	bb1b      	cbnz	r3, 800de08 <_svfiprintf_r+0x1b0>
 800ddc0:	9b03      	ldr	r3, [sp, #12]
 800ddc2:	3307      	adds	r3, #7
 800ddc4:	f023 0307 	bic.w	r3, r3, #7
 800ddc8:	3308      	adds	r3, #8
 800ddca:	9303      	str	r3, [sp, #12]
 800ddcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddce:	4433      	add	r3, r6
 800ddd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddd2:	e76a      	b.n	800dcaa <_svfiprintf_r+0x52>
 800ddd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ddd8:	460c      	mov	r4, r1
 800ddda:	2001      	movs	r0, #1
 800dddc:	e7a8      	b.n	800dd30 <_svfiprintf_r+0xd8>
 800ddde:	2300      	movs	r3, #0
 800dde0:	3401      	adds	r4, #1
 800dde2:	9305      	str	r3, [sp, #20]
 800dde4:	4619      	mov	r1, r3
 800dde6:	f04f 0c0a 	mov.w	ip, #10
 800ddea:	4620      	mov	r0, r4
 800ddec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddf0:	3a30      	subs	r2, #48	@ 0x30
 800ddf2:	2a09      	cmp	r2, #9
 800ddf4:	d903      	bls.n	800ddfe <_svfiprintf_r+0x1a6>
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d0c6      	beq.n	800dd88 <_svfiprintf_r+0x130>
 800ddfa:	9105      	str	r1, [sp, #20]
 800ddfc:	e7c4      	b.n	800dd88 <_svfiprintf_r+0x130>
 800ddfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800de02:	4604      	mov	r4, r0
 800de04:	2301      	movs	r3, #1
 800de06:	e7f0      	b.n	800ddea <_svfiprintf_r+0x192>
 800de08:	ab03      	add	r3, sp, #12
 800de0a:	9300      	str	r3, [sp, #0]
 800de0c:	462a      	mov	r2, r5
 800de0e:	4b0e      	ldr	r3, [pc, #56]	@ (800de48 <_svfiprintf_r+0x1f0>)
 800de10:	a904      	add	r1, sp, #16
 800de12:	4638      	mov	r0, r7
 800de14:	f3af 8000 	nop.w
 800de18:	1c42      	adds	r2, r0, #1
 800de1a:	4606      	mov	r6, r0
 800de1c:	d1d6      	bne.n	800ddcc <_svfiprintf_r+0x174>
 800de1e:	89ab      	ldrh	r3, [r5, #12]
 800de20:	065b      	lsls	r3, r3, #25
 800de22:	f53f af2d 	bmi.w	800dc80 <_svfiprintf_r+0x28>
 800de26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de28:	e72c      	b.n	800dc84 <_svfiprintf_r+0x2c>
 800de2a:	ab03      	add	r3, sp, #12
 800de2c:	9300      	str	r3, [sp, #0]
 800de2e:	462a      	mov	r2, r5
 800de30:	4b05      	ldr	r3, [pc, #20]	@ (800de48 <_svfiprintf_r+0x1f0>)
 800de32:	a904      	add	r1, sp, #16
 800de34:	4638      	mov	r0, r7
 800de36:	f000 f879 	bl	800df2c <_printf_i>
 800de3a:	e7ed      	b.n	800de18 <_svfiprintf_r+0x1c0>
 800de3c:	0800eb3d 	.word	0x0800eb3d
 800de40:	0800eb47 	.word	0x0800eb47
 800de44:	00000000 	.word	0x00000000
 800de48:	0800dba1 	.word	0x0800dba1
 800de4c:	0800eb43 	.word	0x0800eb43

0800de50 <_printf_common>:
 800de50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de54:	4616      	mov	r6, r2
 800de56:	4698      	mov	r8, r3
 800de58:	688a      	ldr	r2, [r1, #8]
 800de5a:	690b      	ldr	r3, [r1, #16]
 800de5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800de60:	4293      	cmp	r3, r2
 800de62:	bfb8      	it	lt
 800de64:	4613      	movlt	r3, r2
 800de66:	6033      	str	r3, [r6, #0]
 800de68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800de6c:	4607      	mov	r7, r0
 800de6e:	460c      	mov	r4, r1
 800de70:	b10a      	cbz	r2, 800de76 <_printf_common+0x26>
 800de72:	3301      	adds	r3, #1
 800de74:	6033      	str	r3, [r6, #0]
 800de76:	6823      	ldr	r3, [r4, #0]
 800de78:	0699      	lsls	r1, r3, #26
 800de7a:	bf42      	ittt	mi
 800de7c:	6833      	ldrmi	r3, [r6, #0]
 800de7e:	3302      	addmi	r3, #2
 800de80:	6033      	strmi	r3, [r6, #0]
 800de82:	6825      	ldr	r5, [r4, #0]
 800de84:	f015 0506 	ands.w	r5, r5, #6
 800de88:	d106      	bne.n	800de98 <_printf_common+0x48>
 800de8a:	f104 0a19 	add.w	sl, r4, #25
 800de8e:	68e3      	ldr	r3, [r4, #12]
 800de90:	6832      	ldr	r2, [r6, #0]
 800de92:	1a9b      	subs	r3, r3, r2
 800de94:	42ab      	cmp	r3, r5
 800de96:	dc26      	bgt.n	800dee6 <_printf_common+0x96>
 800de98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800de9c:	6822      	ldr	r2, [r4, #0]
 800de9e:	3b00      	subs	r3, #0
 800dea0:	bf18      	it	ne
 800dea2:	2301      	movne	r3, #1
 800dea4:	0692      	lsls	r2, r2, #26
 800dea6:	d42b      	bmi.n	800df00 <_printf_common+0xb0>
 800dea8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800deac:	4641      	mov	r1, r8
 800deae:	4638      	mov	r0, r7
 800deb0:	47c8      	blx	r9
 800deb2:	3001      	adds	r0, #1
 800deb4:	d01e      	beq.n	800def4 <_printf_common+0xa4>
 800deb6:	6823      	ldr	r3, [r4, #0]
 800deb8:	6922      	ldr	r2, [r4, #16]
 800deba:	f003 0306 	and.w	r3, r3, #6
 800debe:	2b04      	cmp	r3, #4
 800dec0:	bf02      	ittt	eq
 800dec2:	68e5      	ldreq	r5, [r4, #12]
 800dec4:	6833      	ldreq	r3, [r6, #0]
 800dec6:	1aed      	subeq	r5, r5, r3
 800dec8:	68a3      	ldr	r3, [r4, #8]
 800deca:	bf0c      	ite	eq
 800decc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ded0:	2500      	movne	r5, #0
 800ded2:	4293      	cmp	r3, r2
 800ded4:	bfc4      	itt	gt
 800ded6:	1a9b      	subgt	r3, r3, r2
 800ded8:	18ed      	addgt	r5, r5, r3
 800deda:	2600      	movs	r6, #0
 800dedc:	341a      	adds	r4, #26
 800dede:	42b5      	cmp	r5, r6
 800dee0:	d11a      	bne.n	800df18 <_printf_common+0xc8>
 800dee2:	2000      	movs	r0, #0
 800dee4:	e008      	b.n	800def8 <_printf_common+0xa8>
 800dee6:	2301      	movs	r3, #1
 800dee8:	4652      	mov	r2, sl
 800deea:	4641      	mov	r1, r8
 800deec:	4638      	mov	r0, r7
 800deee:	47c8      	blx	r9
 800def0:	3001      	adds	r0, #1
 800def2:	d103      	bne.n	800defc <_printf_common+0xac>
 800def4:	f04f 30ff 	mov.w	r0, #4294967295
 800def8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800defc:	3501      	adds	r5, #1
 800defe:	e7c6      	b.n	800de8e <_printf_common+0x3e>
 800df00:	18e1      	adds	r1, r4, r3
 800df02:	1c5a      	adds	r2, r3, #1
 800df04:	2030      	movs	r0, #48	@ 0x30
 800df06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800df0a:	4422      	add	r2, r4
 800df0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800df10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800df14:	3302      	adds	r3, #2
 800df16:	e7c7      	b.n	800dea8 <_printf_common+0x58>
 800df18:	2301      	movs	r3, #1
 800df1a:	4622      	mov	r2, r4
 800df1c:	4641      	mov	r1, r8
 800df1e:	4638      	mov	r0, r7
 800df20:	47c8      	blx	r9
 800df22:	3001      	adds	r0, #1
 800df24:	d0e6      	beq.n	800def4 <_printf_common+0xa4>
 800df26:	3601      	adds	r6, #1
 800df28:	e7d9      	b.n	800dede <_printf_common+0x8e>
	...

0800df2c <_printf_i>:
 800df2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df30:	7e0f      	ldrb	r7, [r1, #24]
 800df32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800df34:	2f78      	cmp	r7, #120	@ 0x78
 800df36:	4691      	mov	r9, r2
 800df38:	4680      	mov	r8, r0
 800df3a:	460c      	mov	r4, r1
 800df3c:	469a      	mov	sl, r3
 800df3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800df42:	d807      	bhi.n	800df54 <_printf_i+0x28>
 800df44:	2f62      	cmp	r7, #98	@ 0x62
 800df46:	d80a      	bhi.n	800df5e <_printf_i+0x32>
 800df48:	2f00      	cmp	r7, #0
 800df4a:	f000 80d1 	beq.w	800e0f0 <_printf_i+0x1c4>
 800df4e:	2f58      	cmp	r7, #88	@ 0x58
 800df50:	f000 80b8 	beq.w	800e0c4 <_printf_i+0x198>
 800df54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800df5c:	e03a      	b.n	800dfd4 <_printf_i+0xa8>
 800df5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800df62:	2b15      	cmp	r3, #21
 800df64:	d8f6      	bhi.n	800df54 <_printf_i+0x28>
 800df66:	a101      	add	r1, pc, #4	@ (adr r1, 800df6c <_printf_i+0x40>)
 800df68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800df6c:	0800dfc5 	.word	0x0800dfc5
 800df70:	0800dfd9 	.word	0x0800dfd9
 800df74:	0800df55 	.word	0x0800df55
 800df78:	0800df55 	.word	0x0800df55
 800df7c:	0800df55 	.word	0x0800df55
 800df80:	0800df55 	.word	0x0800df55
 800df84:	0800dfd9 	.word	0x0800dfd9
 800df88:	0800df55 	.word	0x0800df55
 800df8c:	0800df55 	.word	0x0800df55
 800df90:	0800df55 	.word	0x0800df55
 800df94:	0800df55 	.word	0x0800df55
 800df98:	0800e0d7 	.word	0x0800e0d7
 800df9c:	0800e003 	.word	0x0800e003
 800dfa0:	0800e091 	.word	0x0800e091
 800dfa4:	0800df55 	.word	0x0800df55
 800dfa8:	0800df55 	.word	0x0800df55
 800dfac:	0800e0f9 	.word	0x0800e0f9
 800dfb0:	0800df55 	.word	0x0800df55
 800dfb4:	0800e003 	.word	0x0800e003
 800dfb8:	0800df55 	.word	0x0800df55
 800dfbc:	0800df55 	.word	0x0800df55
 800dfc0:	0800e099 	.word	0x0800e099
 800dfc4:	6833      	ldr	r3, [r6, #0]
 800dfc6:	1d1a      	adds	r2, r3, #4
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	6032      	str	r2, [r6, #0]
 800dfcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dfd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e09c      	b.n	800e112 <_printf_i+0x1e6>
 800dfd8:	6833      	ldr	r3, [r6, #0]
 800dfda:	6820      	ldr	r0, [r4, #0]
 800dfdc:	1d19      	adds	r1, r3, #4
 800dfde:	6031      	str	r1, [r6, #0]
 800dfe0:	0606      	lsls	r6, r0, #24
 800dfe2:	d501      	bpl.n	800dfe8 <_printf_i+0xbc>
 800dfe4:	681d      	ldr	r5, [r3, #0]
 800dfe6:	e003      	b.n	800dff0 <_printf_i+0xc4>
 800dfe8:	0645      	lsls	r5, r0, #25
 800dfea:	d5fb      	bpl.n	800dfe4 <_printf_i+0xb8>
 800dfec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dff0:	2d00      	cmp	r5, #0
 800dff2:	da03      	bge.n	800dffc <_printf_i+0xd0>
 800dff4:	232d      	movs	r3, #45	@ 0x2d
 800dff6:	426d      	negs	r5, r5
 800dff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dffc:	4858      	ldr	r0, [pc, #352]	@ (800e160 <_printf_i+0x234>)
 800dffe:	230a      	movs	r3, #10
 800e000:	e011      	b.n	800e026 <_printf_i+0xfa>
 800e002:	6821      	ldr	r1, [r4, #0]
 800e004:	6833      	ldr	r3, [r6, #0]
 800e006:	0608      	lsls	r0, r1, #24
 800e008:	f853 5b04 	ldr.w	r5, [r3], #4
 800e00c:	d402      	bmi.n	800e014 <_printf_i+0xe8>
 800e00e:	0649      	lsls	r1, r1, #25
 800e010:	bf48      	it	mi
 800e012:	b2ad      	uxthmi	r5, r5
 800e014:	2f6f      	cmp	r7, #111	@ 0x6f
 800e016:	4852      	ldr	r0, [pc, #328]	@ (800e160 <_printf_i+0x234>)
 800e018:	6033      	str	r3, [r6, #0]
 800e01a:	bf14      	ite	ne
 800e01c:	230a      	movne	r3, #10
 800e01e:	2308      	moveq	r3, #8
 800e020:	2100      	movs	r1, #0
 800e022:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e026:	6866      	ldr	r6, [r4, #4]
 800e028:	60a6      	str	r6, [r4, #8]
 800e02a:	2e00      	cmp	r6, #0
 800e02c:	db05      	blt.n	800e03a <_printf_i+0x10e>
 800e02e:	6821      	ldr	r1, [r4, #0]
 800e030:	432e      	orrs	r6, r5
 800e032:	f021 0104 	bic.w	r1, r1, #4
 800e036:	6021      	str	r1, [r4, #0]
 800e038:	d04b      	beq.n	800e0d2 <_printf_i+0x1a6>
 800e03a:	4616      	mov	r6, r2
 800e03c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e040:	fb03 5711 	mls	r7, r3, r1, r5
 800e044:	5dc7      	ldrb	r7, [r0, r7]
 800e046:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e04a:	462f      	mov	r7, r5
 800e04c:	42bb      	cmp	r3, r7
 800e04e:	460d      	mov	r5, r1
 800e050:	d9f4      	bls.n	800e03c <_printf_i+0x110>
 800e052:	2b08      	cmp	r3, #8
 800e054:	d10b      	bne.n	800e06e <_printf_i+0x142>
 800e056:	6823      	ldr	r3, [r4, #0]
 800e058:	07df      	lsls	r7, r3, #31
 800e05a:	d508      	bpl.n	800e06e <_printf_i+0x142>
 800e05c:	6923      	ldr	r3, [r4, #16]
 800e05e:	6861      	ldr	r1, [r4, #4]
 800e060:	4299      	cmp	r1, r3
 800e062:	bfde      	ittt	le
 800e064:	2330      	movle	r3, #48	@ 0x30
 800e066:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e06a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e06e:	1b92      	subs	r2, r2, r6
 800e070:	6122      	str	r2, [r4, #16]
 800e072:	f8cd a000 	str.w	sl, [sp]
 800e076:	464b      	mov	r3, r9
 800e078:	aa03      	add	r2, sp, #12
 800e07a:	4621      	mov	r1, r4
 800e07c:	4640      	mov	r0, r8
 800e07e:	f7ff fee7 	bl	800de50 <_printf_common>
 800e082:	3001      	adds	r0, #1
 800e084:	d14a      	bne.n	800e11c <_printf_i+0x1f0>
 800e086:	f04f 30ff 	mov.w	r0, #4294967295
 800e08a:	b004      	add	sp, #16
 800e08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e090:	6823      	ldr	r3, [r4, #0]
 800e092:	f043 0320 	orr.w	r3, r3, #32
 800e096:	6023      	str	r3, [r4, #0]
 800e098:	4832      	ldr	r0, [pc, #200]	@ (800e164 <_printf_i+0x238>)
 800e09a:	2778      	movs	r7, #120	@ 0x78
 800e09c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e0a0:	6823      	ldr	r3, [r4, #0]
 800e0a2:	6831      	ldr	r1, [r6, #0]
 800e0a4:	061f      	lsls	r7, r3, #24
 800e0a6:	f851 5b04 	ldr.w	r5, [r1], #4
 800e0aa:	d402      	bmi.n	800e0b2 <_printf_i+0x186>
 800e0ac:	065f      	lsls	r7, r3, #25
 800e0ae:	bf48      	it	mi
 800e0b0:	b2ad      	uxthmi	r5, r5
 800e0b2:	6031      	str	r1, [r6, #0]
 800e0b4:	07d9      	lsls	r1, r3, #31
 800e0b6:	bf44      	itt	mi
 800e0b8:	f043 0320 	orrmi.w	r3, r3, #32
 800e0bc:	6023      	strmi	r3, [r4, #0]
 800e0be:	b11d      	cbz	r5, 800e0c8 <_printf_i+0x19c>
 800e0c0:	2310      	movs	r3, #16
 800e0c2:	e7ad      	b.n	800e020 <_printf_i+0xf4>
 800e0c4:	4826      	ldr	r0, [pc, #152]	@ (800e160 <_printf_i+0x234>)
 800e0c6:	e7e9      	b.n	800e09c <_printf_i+0x170>
 800e0c8:	6823      	ldr	r3, [r4, #0]
 800e0ca:	f023 0320 	bic.w	r3, r3, #32
 800e0ce:	6023      	str	r3, [r4, #0]
 800e0d0:	e7f6      	b.n	800e0c0 <_printf_i+0x194>
 800e0d2:	4616      	mov	r6, r2
 800e0d4:	e7bd      	b.n	800e052 <_printf_i+0x126>
 800e0d6:	6833      	ldr	r3, [r6, #0]
 800e0d8:	6825      	ldr	r5, [r4, #0]
 800e0da:	6961      	ldr	r1, [r4, #20]
 800e0dc:	1d18      	adds	r0, r3, #4
 800e0de:	6030      	str	r0, [r6, #0]
 800e0e0:	062e      	lsls	r6, r5, #24
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	d501      	bpl.n	800e0ea <_printf_i+0x1be>
 800e0e6:	6019      	str	r1, [r3, #0]
 800e0e8:	e002      	b.n	800e0f0 <_printf_i+0x1c4>
 800e0ea:	0668      	lsls	r0, r5, #25
 800e0ec:	d5fb      	bpl.n	800e0e6 <_printf_i+0x1ba>
 800e0ee:	8019      	strh	r1, [r3, #0]
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	6123      	str	r3, [r4, #16]
 800e0f4:	4616      	mov	r6, r2
 800e0f6:	e7bc      	b.n	800e072 <_printf_i+0x146>
 800e0f8:	6833      	ldr	r3, [r6, #0]
 800e0fa:	1d1a      	adds	r2, r3, #4
 800e0fc:	6032      	str	r2, [r6, #0]
 800e0fe:	681e      	ldr	r6, [r3, #0]
 800e100:	6862      	ldr	r2, [r4, #4]
 800e102:	2100      	movs	r1, #0
 800e104:	4630      	mov	r0, r6
 800e106:	f7f2 f87b 	bl	8000200 <memchr>
 800e10a:	b108      	cbz	r0, 800e110 <_printf_i+0x1e4>
 800e10c:	1b80      	subs	r0, r0, r6
 800e10e:	6060      	str	r0, [r4, #4]
 800e110:	6863      	ldr	r3, [r4, #4]
 800e112:	6123      	str	r3, [r4, #16]
 800e114:	2300      	movs	r3, #0
 800e116:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e11a:	e7aa      	b.n	800e072 <_printf_i+0x146>
 800e11c:	6923      	ldr	r3, [r4, #16]
 800e11e:	4632      	mov	r2, r6
 800e120:	4649      	mov	r1, r9
 800e122:	4640      	mov	r0, r8
 800e124:	47d0      	blx	sl
 800e126:	3001      	adds	r0, #1
 800e128:	d0ad      	beq.n	800e086 <_printf_i+0x15a>
 800e12a:	6823      	ldr	r3, [r4, #0]
 800e12c:	079b      	lsls	r3, r3, #30
 800e12e:	d413      	bmi.n	800e158 <_printf_i+0x22c>
 800e130:	68e0      	ldr	r0, [r4, #12]
 800e132:	9b03      	ldr	r3, [sp, #12]
 800e134:	4298      	cmp	r0, r3
 800e136:	bfb8      	it	lt
 800e138:	4618      	movlt	r0, r3
 800e13a:	e7a6      	b.n	800e08a <_printf_i+0x15e>
 800e13c:	2301      	movs	r3, #1
 800e13e:	4632      	mov	r2, r6
 800e140:	4649      	mov	r1, r9
 800e142:	4640      	mov	r0, r8
 800e144:	47d0      	blx	sl
 800e146:	3001      	adds	r0, #1
 800e148:	d09d      	beq.n	800e086 <_printf_i+0x15a>
 800e14a:	3501      	adds	r5, #1
 800e14c:	68e3      	ldr	r3, [r4, #12]
 800e14e:	9903      	ldr	r1, [sp, #12]
 800e150:	1a5b      	subs	r3, r3, r1
 800e152:	42ab      	cmp	r3, r5
 800e154:	dcf2      	bgt.n	800e13c <_printf_i+0x210>
 800e156:	e7eb      	b.n	800e130 <_printf_i+0x204>
 800e158:	2500      	movs	r5, #0
 800e15a:	f104 0619 	add.w	r6, r4, #25
 800e15e:	e7f5      	b.n	800e14c <_printf_i+0x220>
 800e160:	0800eb4e 	.word	0x0800eb4e
 800e164:	0800eb5f 	.word	0x0800eb5f

0800e168 <memmove>:
 800e168:	4288      	cmp	r0, r1
 800e16a:	b510      	push	{r4, lr}
 800e16c:	eb01 0402 	add.w	r4, r1, r2
 800e170:	d902      	bls.n	800e178 <memmove+0x10>
 800e172:	4284      	cmp	r4, r0
 800e174:	4623      	mov	r3, r4
 800e176:	d807      	bhi.n	800e188 <memmove+0x20>
 800e178:	1e43      	subs	r3, r0, #1
 800e17a:	42a1      	cmp	r1, r4
 800e17c:	d008      	beq.n	800e190 <memmove+0x28>
 800e17e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e182:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e186:	e7f8      	b.n	800e17a <memmove+0x12>
 800e188:	4402      	add	r2, r0
 800e18a:	4601      	mov	r1, r0
 800e18c:	428a      	cmp	r2, r1
 800e18e:	d100      	bne.n	800e192 <memmove+0x2a>
 800e190:	bd10      	pop	{r4, pc}
 800e192:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e196:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e19a:	e7f7      	b.n	800e18c <memmove+0x24>

0800e19c <strchr>:
 800e19c:	b2c9      	uxtb	r1, r1
 800e19e:	4603      	mov	r3, r0
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1a6:	b112      	cbz	r2, 800e1ae <strchr+0x12>
 800e1a8:	428a      	cmp	r2, r1
 800e1aa:	d1f9      	bne.n	800e1a0 <strchr+0x4>
 800e1ac:	4770      	bx	lr
 800e1ae:	2900      	cmp	r1, #0
 800e1b0:	bf18      	it	ne
 800e1b2:	2000      	movne	r0, #0
 800e1b4:	4770      	bx	lr
	...

0800e1b8 <_sbrk_r>:
 800e1b8:	b538      	push	{r3, r4, r5, lr}
 800e1ba:	4d06      	ldr	r5, [pc, #24]	@ (800e1d4 <_sbrk_r+0x1c>)
 800e1bc:	2300      	movs	r3, #0
 800e1be:	4604      	mov	r4, r0
 800e1c0:	4608      	mov	r0, r1
 800e1c2:	602b      	str	r3, [r5, #0]
 800e1c4:	f7f3 fb62 	bl	800188c <_sbrk>
 800e1c8:	1c43      	adds	r3, r0, #1
 800e1ca:	d102      	bne.n	800e1d2 <_sbrk_r+0x1a>
 800e1cc:	682b      	ldr	r3, [r5, #0]
 800e1ce:	b103      	cbz	r3, 800e1d2 <_sbrk_r+0x1a>
 800e1d0:	6023      	str	r3, [r4, #0]
 800e1d2:	bd38      	pop	{r3, r4, r5, pc}
 800e1d4:	200141d4 	.word	0x200141d4

0800e1d8 <_realloc_r>:
 800e1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1dc:	4607      	mov	r7, r0
 800e1de:	4614      	mov	r4, r2
 800e1e0:	460d      	mov	r5, r1
 800e1e2:	b921      	cbnz	r1, 800e1ee <_realloc_r+0x16>
 800e1e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e8:	4611      	mov	r1, r2
 800e1ea:	f7ff bc4d 	b.w	800da88 <_malloc_r>
 800e1ee:	b92a      	cbnz	r2, 800e1fc <_realloc_r+0x24>
 800e1f0:	f7ff fbde 	bl	800d9b0 <_free_r>
 800e1f4:	4625      	mov	r5, r4
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1fc:	f000 f81a 	bl	800e234 <_malloc_usable_size_r>
 800e200:	4284      	cmp	r4, r0
 800e202:	4606      	mov	r6, r0
 800e204:	d802      	bhi.n	800e20c <_realloc_r+0x34>
 800e206:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e20a:	d8f4      	bhi.n	800e1f6 <_realloc_r+0x1e>
 800e20c:	4621      	mov	r1, r4
 800e20e:	4638      	mov	r0, r7
 800e210:	f7ff fc3a 	bl	800da88 <_malloc_r>
 800e214:	4680      	mov	r8, r0
 800e216:	b908      	cbnz	r0, 800e21c <_realloc_r+0x44>
 800e218:	4645      	mov	r5, r8
 800e21a:	e7ec      	b.n	800e1f6 <_realloc_r+0x1e>
 800e21c:	42b4      	cmp	r4, r6
 800e21e:	4622      	mov	r2, r4
 800e220:	4629      	mov	r1, r5
 800e222:	bf28      	it	cs
 800e224:	4632      	movcs	r2, r6
 800e226:	f7ff fbb5 	bl	800d994 <memcpy>
 800e22a:	4629      	mov	r1, r5
 800e22c:	4638      	mov	r0, r7
 800e22e:	f7ff fbbf 	bl	800d9b0 <_free_r>
 800e232:	e7f1      	b.n	800e218 <_realloc_r+0x40>

0800e234 <_malloc_usable_size_r>:
 800e234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e238:	1f18      	subs	r0, r3, #4
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	bfbc      	itt	lt
 800e23e:	580b      	ldrlt	r3, [r1, r0]
 800e240:	18c0      	addlt	r0, r0, r3
 800e242:	4770      	bx	lr

0800e244 <_init>:
 800e244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e246:	bf00      	nop
 800e248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e24a:	bc08      	pop	{r3}
 800e24c:	469e      	mov	lr, r3
 800e24e:	4770      	bx	lr

0800e250 <_fini>:
 800e250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e252:	bf00      	nop
 800e254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e256:	bc08      	pop	{r3}
 800e258:	469e      	mov	lr, r3
 800e25a:	4770      	bx	lr
