
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011540  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d60  080116d0  080116d0  000126d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012430  08012430  00014188  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012430  08012430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012438  08012438  00014188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012438  08012438  00013438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801243c  0801243c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  20000000  08012440  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014188  2**0
                  CONTENTS
 10 .bss          00014100  20000188  20000188  00014188  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014288  20014288  00014188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014188  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026958  00000000  00000000  000141b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000062e8  00000000  00000000  0003ab10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020a0  00000000  00000000  00040df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000193f  00000000  00000000  00042e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a75b  00000000  00000000  000447d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e538  00000000  00000000  0006ef32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4404  00000000  00000000  0009d46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018186e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009608  00000000  00000000  001818b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0018aebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000188 	.word	0x20000188
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080116b8 	.word	0x080116b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000018c 	.word	0x2000018c
 80001cc:	080116b8 	.word	0x080116b8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f001 fb11 	bl	8001bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8d1 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 fbc5 	bl	8000d68 <MX_GPIO_Init>
  MX_DMA_Init();
 80005de:	f000 fb93 	bl	8000d08 <MX_DMA_Init>
  MX_SPI1_Init();
 80005e2:	f000 fa1b 	bl	8000a1c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005e6:	f000 fb3b 	bl	8000c60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005ea:	f000 fb63 	bl	8000cb4 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80005ee:	f000 f95f 	bl	80008b0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005f2:	f000 fb0b 	bl	8000c0c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80005f6:	f000 f92d 	bl	8000854 <MX_I2C1_Init>
  MX_TIM4_Init();
 80005fa:	f000 fa7b 	bl	8000af4 <MX_TIM4_Init>
  MX_SPI2_Init();
 80005fe:	f000 fa43 	bl	8000a88 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000602:	f007 fcb5 	bl	8007f70 <MX_FATFS_Init>
  MX_I2S3_Init();
 8000606:	f000 f981 	bl	800090c <MX_I2S3_Init>
  MX_RTC_Init();
 800060a:	f000 f9ad 	bl	8000968 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // init
  Timer_Init(&huart2);
 800060e:	4846      	ldr	r0, [pc, #280]	@ (8000728 <main+0x15c>)
 8000610:	f00f f860 	bl	800f6d4 <Timer_Init>
  Log_Init(&huart2);
 8000614:	4844      	ldr	r0, [pc, #272]	@ (8000728 <main+0x15c>)
 8000616:	f00d ff57 	bl	800e4c8 <Log_Init>
  MsgHandler_Init(&huart2);
 800061a:	4843      	ldr	r0, [pc, #268]	@ (8000728 <main+0x15c>)
 800061c:	f000 fc8c 	bl	8000f38 <MsgHandler_Init>
  ESP32_Init(&huart3, &huart2);
 8000620:	4941      	ldr	r1, [pc, #260]	@ (8000728 <main+0x15c>)
 8000622:	4842      	ldr	r0, [pc, #264]	@ (800072c <main+0x160>)
 8000624:	f007 fb76 	bl	8007d14 <ESP32_Init>
  LCD2004_Init(&hi2c1, 0x4E, &huart2);
 8000628:	4a3f      	ldr	r2, [pc, #252]	@ (8000728 <main+0x15c>)
 800062a:	214e      	movs	r1, #78	@ 0x4e
 800062c:	4840      	ldr	r0, [pc, #256]	@ (8000730 <main+0x164>)
 800062e:	f00b f8cb 	bl	800b7c8 <LCD2004_Init>
  LED_Init();
 8000632:	f00b f9d7 	bl	800b9e4 <LED_Init>
  SD_Init(&huart2);
 8000636:	483c      	ldr	r0, [pc, #240]	@ (8000728 <main+0x15c>)
 8000638:	f00e f90c 	bl	800e854 <SD_Init>
  Shell_Init(&huart2);
 800063c:	483a      	ldr	r0, [pc, #232]	@ (8000728 <main+0x15c>)
 800063e:	f00e ff15 	bl	800f46c <Shell_Init>


//  my_WM8978_Init();
  //OS Resource
  Log_OS_Resources_Init();
 8000642:	f00d ff51 	bl	800e4e8 <Log_OS_Resources_Init>
  MsgHandler_OS_Resources_Init();
 8000646:	f000 fc87 	bl	8000f58 <MsgHandler_OS_Resources_Init>
  LCD2004_OS_Resources_Init();
 800064a:	f00b f8d9 	bl	800b800 <LCD2004_OS_Resources_Init>
  LED_OS_Resources_Init();
 800064e:	f00b f9db 	bl	800ba08 <LED_OS_Resources_Init>
  SD_OS_Resources_Init();
 8000652:	f00e f911 	bl	800e878 <SD_OS_Resources_Init>
  Shell_OS_Resources_Init();
 8000656:	f00e ff1d 	bl	800f494 <Shell_OS_Resources_Init>
  ESP32_OS_Resources_Init();
 800065a:	f007 fb71 	bl	8007d40 <ESP32_OS_Resources_Init>

//   WM8978_Palyer();
  //Task
  xTaskCreate(ESP32Sender, "ESP32Sender", 128, NULL, 1, NULL);
 800065e:	2300      	movs	r3, #0
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2301      	movs	r3, #1
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	2280      	movs	r2, #128	@ 0x80
 800066a:	4932      	ldr	r1, [pc, #200]	@ (8000734 <main+0x168>)
 800066c:	4832      	ldr	r0, [pc, #200]	@ (8000738 <main+0x16c>)
 800066e:	f009 f893 	bl	8009798 <xTaskCreate>
  xTaskCreate(ESP32Receiver, "ESP32Receiver", 256, NULL, 2, NULL);
 8000672:	2300      	movs	r3, #0
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2302      	movs	r3, #2
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000680:	492e      	ldr	r1, [pc, #184]	@ (800073c <main+0x170>)
 8000682:	482f      	ldr	r0, [pc, #188]	@ (8000740 <main+0x174>)
 8000684:	f009 f888 	bl	8009798 <xTaskCreate>
  xTaskCreate(LCDHandler, "LCDHandler", 256, NULL, 1, NULL);
 8000688:	2300      	movs	r3, #0
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	2301      	movs	r3, #1
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2300      	movs	r3, #0
 8000692:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000696:	492b      	ldr	r1, [pc, #172]	@ (8000744 <main+0x178>)
 8000698:	482b      	ldr	r0, [pc, #172]	@ (8000748 <main+0x17c>)
 800069a:	f009 f87d 	bl	8009798 <xTaskCreate>
  xTaskCreate(ShellHandler, "ShellHandler", 512, NULL, 2, NULL);
 800069e:	2300      	movs	r3, #0
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	2302      	movs	r3, #2
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2300      	movs	r3, #0
 80006a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ac:	4927      	ldr	r1, [pc, #156]	@ (800074c <main+0x180>)
 80006ae:	4828      	ldr	r0, [pc, #160]	@ (8000750 <main+0x184>)
 80006b0:	f009 f872 	bl	8009798 <xTaskCreate>
  xTaskCreate(CommandReceiver, "CommandReceiver", 512, NULL, 3, NULL);
 80006b4:	2300      	movs	r3, #0
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	2303      	movs	r3, #3
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2300      	movs	r3, #0
 80006be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c2:	4924      	ldr	r1, [pc, #144]	@ (8000754 <main+0x188>)
 80006c4:	4824      	ldr	r0, [pc, #144]	@ (8000758 <main+0x18c>)
 80006c6:	f009 f867 	bl	8009798 <xTaskCreate>
  xTaskCreate(LEDHandler, "LEDHandler", 128, NULL, 1, NULL);
 80006ca:	2300      	movs	r3, #0
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2301      	movs	r3, #1
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	2280      	movs	r2, #128	@ 0x80
 80006d6:	4921      	ldr	r1, [pc, #132]	@ (800075c <main+0x190>)
 80006d8:	4821      	ldr	r0, [pc, #132]	@ (8000760 <main+0x194>)
 80006da:	f009 f85d 	bl	8009798 <xTaskCreate>
  xTaskCreate(LEDTask, "LEDTask", 128, NULL, 1, NULL);
 80006de:	2300      	movs	r3, #0
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	2301      	movs	r3, #1
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2300      	movs	r3, #0
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	491e      	ldr	r1, [pc, #120]	@ (8000764 <main+0x198>)
 80006ec:	481e      	ldr	r0, [pc, #120]	@ (8000768 <main+0x19c>)
 80006ee:	f009 f853 	bl	8009798 <xTaskCreate>
  xTaskCreate(SDParseHandler, "SDParseHandler", 512, NULL, 1, NULL);
 80006f2:	2300      	movs	r3, #0
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	2301      	movs	r3, #1
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2300      	movs	r3, #0
 80006fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000700:	491a      	ldr	r1, [pc, #104]	@ (800076c <main+0x1a0>)
 8000702:	481b      	ldr	r0, [pc, #108]	@ (8000770 <main+0x1a4>)
 8000704:	f009 f848 	bl	8009798 <xTaskCreate>
  xTaskCreate(LogHandler, "LogHandler", 512, NULL, 3, NULL);
 8000708:	2300      	movs	r3, #0
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	2303      	movs	r3, #3
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2300      	movs	r3, #0
 8000712:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000716:	4917      	ldr	r1, [pc, #92]	@ (8000774 <main+0x1a8>)
 8000718:	4817      	ldr	r0, [pc, #92]	@ (8000778 <main+0x1ac>)
 800071a:	f009 f83d 	bl	8009798 <xTaskCreate>

//  xTaskCreate(WM8978_Demo, "WM8978_Demo", 512, NULL, 1, NULL);
  // xTaskCreate(NECHandler, "NECHandler", 128, NULL, 1, NULL);

  vTaskStartScheduler();
 800071e:	f009 f9b1 	bl	8009a84 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000722:	bf00      	nop
 8000724:	e7fd      	b.n	8000722 <main+0x156>
 8000726:	bf00      	nop
 8000728:	200004b4 	.word	0x200004b4
 800072c:	200004fc 	.word	0x200004fc
 8000730:	200001a4 	.word	0x200001a4
 8000734:	08011714 	.word	0x08011714
 8000738:	08007db1 	.word	0x08007db1
 800073c:	08011720 	.word	0x08011720
 8000740:	08007ed9 	.word	0x08007ed9
 8000744:	08011730 	.word	0x08011730
 8000748:	0800b995 	.word	0x0800b995
 800074c:	0801173c 	.word	0x0801173c
 8000750:	0800f4d1 	.word	0x0800f4d1
 8000754:	0801174c 	.word	0x0801174c
 8000758:	0800f611 	.word	0x0800f611
 800075c:	0801175c 	.word	0x0801175c
 8000760:	0800ba71 	.word	0x0800ba71
 8000764:	08011768 	.word	0x08011768
 8000768:	0800baf9 	.word	0x0800baf9
 800076c:	08011770 	.word	0x08011770
 8000770:	0800eb7d 	.word	0x0800eb7d
 8000774:	08011780 	.word	0x08011780
 8000778:	0800e71d 	.word	0x0800e71d

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	@ 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f00f fab0 	bl	800fcf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b29      	ldr	r3, [pc, #164]	@ (800084c <SystemClock_Config+0xd0>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	4a28      	ldr	r2, [pc, #160]	@ (800084c <SystemClock_Config+0xd0>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b0:	4b26      	ldr	r3, [pc, #152]	@ (800084c <SystemClock_Config+0xd0>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <SystemClock_Config+0xd4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a22      	ldr	r2, [pc, #136]	@ (8000850 <SystemClock_Config+0xd4>)
 80007c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <SystemClock_Config+0xd4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007d8:	230a      	movs	r3, #10
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e0:	2310      	movs	r3, #16
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007f0:	2308      	movs	r3, #8
 80007f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007f4:	2332      	movs	r3, #50	@ 0x32
 80007f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007fc:	2307      	movs	r3, #7
 80007fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	4618      	mov	r0, r3
 8000806:	f003 fa35 	bl	8003c74 <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000810:	f000 fb8b 	bl	8000f2a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000818:	2302      	movs	r3, #2
 800081a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000820:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f003 fc96 	bl	8004164 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800083e:	f000 fb74 	bl	8000f2a <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	@ 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <MX_I2C1_Init+0x50>)
 800085a:	4a13      	ldr	r2, [pc, #76]	@ (80008a8 <MX_I2C1_Init+0x54>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000860:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <MX_I2C1_Init+0x58>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_I2C1_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000872:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000876:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b0a      	ldr	r3, [pc, #40]	@ (80008a4 <MX_I2C1_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000892:	f002 f8b1 	bl	80029f8 <HAL_I2C_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800089c:	f000 fb45 	bl	8000f2a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200001a4 	.word	0x200001a4
 80008a8:	40005400 	.word	0x40005400
 80008ac:	000186a0 	.word	0x000186a0

080008b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <MX_I2C2_Init+0x50>)
 80008b6:	4a13      	ldr	r2, [pc, #76]	@ (8000904 <MX_I2C2_Init+0x54>)
 80008b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_I2C2_Init+0x50>)
 80008bc:	4a12      	ldr	r2, [pc, #72]	@ (8000908 <MX_I2C2_Init+0x58>)
 80008be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_I2C2_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_I2C2_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_I2C2_Init+0x50>)
 80008ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <MX_I2C2_Init+0x50>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_I2C2_Init+0x50>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <MX_I2C2_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_I2C2_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	@ (8000900 <MX_I2C2_Init+0x50>)
 80008ee:	f002 f883 	bl	80029f8 <HAL_I2C_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008f8:	f000 fb17 	bl	8000f2a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200001f8 	.word	0x200001f8
 8000904:	40005800 	.word	0x40005800
 8000908:	000186a0 	.word	0x000186a0

0800090c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000910:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <MX_I2S3_Init+0x54>)
 8000912:	4a14      	ldr	r2, [pc, #80]	@ (8000964 <MX_I2S3_Init+0x58>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000916:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_I2S3_Init+0x54>)
 8000918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800091c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <MX_I2S3_Init+0x54>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000924:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_I2S3_Init+0x54>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800092a:	4b0d      	ldr	r3, [pc, #52]	@ (8000960 <MX_I2S3_Init+0x54>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000930:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <MX_I2S3_Init+0x54>)
 8000932:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000936:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000938:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_I2S3_Init+0x54>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <MX_I2S3_Init+0x54>)
 8000940:	2200      	movs	r2, #0
 8000942:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_I2S3_Init+0x54>)
 8000946:	2201      	movs	r2, #1
 8000948:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_I2S3_Init+0x54>)
 800094c:	f002 fcf2 	bl	8003334 <HAL_I2S_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000956:	f000 fae8 	bl	8000f2a <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000024c 	.word	0x2000024c
 8000964:	40003c00 	.word	0x40003c00

08000968 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800097c:	2300      	movs	r3, #0
 800097e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000980:	4b24      	ldr	r3, [pc, #144]	@ (8000a14 <MX_RTC_Init+0xac>)
 8000982:	4a25      	ldr	r2, [pc, #148]	@ (8000a18 <MX_RTC_Init+0xb0>)
 8000984:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000986:	4b23      	ldr	r3, [pc, #140]	@ (8000a14 <MX_RTC_Init+0xac>)
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800098c:	4b21      	ldr	r3, [pc, #132]	@ (8000a14 <MX_RTC_Init+0xac>)
 800098e:	227f      	movs	r2, #127	@ 0x7f
 8000990:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000992:	4b20      	ldr	r3, [pc, #128]	@ (8000a14 <MX_RTC_Init+0xac>)
 8000994:	22ff      	movs	r2, #255	@ 0xff
 8000996:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000998:	4b1e      	ldr	r3, [pc, #120]	@ (8000a14 <MX_RTC_Init+0xac>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800099e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <MX_RTC_Init+0xac>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <MX_RTC_Init+0xac>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009aa:	481a      	ldr	r0, [pc, #104]	@ (8000a14 <MX_RTC_Init+0xac>)
 80009ac:	f003 ff6e 	bl	800488c <HAL_RTC_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80009b6:	f000 fab8 	bl	8000f2a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 80009ba:	2315      	movs	r3, #21
 80009bc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 54;
 80009be:	2336      	movs	r3, #54	@ 0x36
 80009c0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	4619      	mov	r1, r3
 80009d4:	480f      	ldr	r0, [pc, #60]	@ (8000a14 <MX_RTC_Init+0xac>)
 80009d6:	f003 ffdc 	bl	8004992 <HAL_RTC_SetTime>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80009e0:	f000 faa3 	bl	8000f2a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80009e4:	2303      	movs	r3, #3
 80009e6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 80009e8:	2306      	movs	r3, #6
 80009ea:	707b      	strb	r3, [r7, #1]
  sDate.Date = 11;
 80009ec:	230b      	movs	r3, #11
 80009ee:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 25;
 80009f0:	2319      	movs	r3, #25
 80009f2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	2200      	movs	r2, #0
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <MX_RTC_Init+0xac>)
 80009fc:	f004 f8c1 	bl	8004b82 <HAL_RTC_SetDate>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000a06:	f000 fa90 	bl	8000f2a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000354 	.word	0x20000354
 8000a18:	40002800 	.word	0x40002800

08000a1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a20:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a22:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <MX_SPI1_Init+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a26:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a68:	220a      	movs	r2, #10
 8000a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a6e:	f004 fa19 	bl	8004ea4 <HAL_SPI_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a78:	f000 fa57 	bl	8000f2a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000374 	.word	0x20000374
 8000a84:	40013000 	.word	0x40013000

08000a88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <MX_SPI2_Init+0x64>)
 8000a8e:	4a18      	ldr	r2, [pc, #96]	@ (8000af0 <MX_SPI2_Init+0x68>)
 8000a90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <MX_SPI2_Init+0x64>)
 8000a94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <MX_SPI2_Init+0x64>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <MX_SPI2_Init+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <MX_SPI2_Init+0x64>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <MX_SPI2_Init+0x64>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_SPI2_Init+0x64>)
 8000ab4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ab8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000aba:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <MX_SPI2_Init+0x64>)
 8000abc:	2230      	movs	r2, #48	@ 0x30
 8000abe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <MX_SPI2_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <MX_SPI2_Init+0x64>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000acc:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <MX_SPI2_Init+0x64>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <MX_SPI2_Init+0x64>)
 8000ad4:	220a      	movs	r2, #10
 8000ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	@ (8000aec <MX_SPI2_Init+0x64>)
 8000ada:	f004 f9e3 	bl	8004ea4 <HAL_SPI_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ae4:	f000 fa21 	bl	8000f2a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200003cc 	.word	0x200003cc
 8000af0:	40003800 	.word	0x40003800

08000af4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08e      	sub	sp, #56	@ 0x38
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b08:	f107 0320 	add.w	r3, r7, #32
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
 8000b20:	615a      	str	r2, [r3, #20]
 8000b22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b24:	4b37      	ldr	r3, [pc, #220]	@ (8000c04 <MX_TIM4_Init+0x110>)
 8000b26:	4a38      	ldr	r2, [pc, #224]	@ (8000c08 <MX_TIM4_Init+0x114>)
 8000b28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000b2a:	4b36      	ldr	r3, [pc, #216]	@ (8000c04 <MX_TIM4_Init+0x110>)
 8000b2c:	2253      	movs	r2, #83	@ 0x53
 8000b2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b34      	ldr	r3, [pc, #208]	@ (8000c04 <MX_TIM4_Init+0x110>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8000b36:	4b33      	ldr	r3, [pc, #204]	@ (8000c04 <MX_TIM4_Init+0x110>)
 8000b38:	22ff      	movs	r2, #255	@ 0xff
 8000b3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3c:	4b31      	ldr	r3, [pc, #196]	@ (8000c04 <MX_TIM4_Init+0x110>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b30      	ldr	r3, [pc, #192]	@ (8000c04 <MX_TIM4_Init+0x110>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b48:	482e      	ldr	r0, [pc, #184]	@ (8000c04 <MX_TIM4_Init+0x110>)
 8000b4a:	f004 fdfd 	bl	8005748 <HAL_TIM_Base_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000b54:	f000 f9e9 	bl	8000f2a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4827      	ldr	r0, [pc, #156]	@ (8000c04 <MX_TIM4_Init+0x110>)
 8000b66:	f005 f983 	bl	8005e70 <HAL_TIM_ConfigClockSource>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000b70:	f000 f9db 	bl	8000f2a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b74:	4823      	ldr	r0, [pc, #140]	@ (8000c04 <MX_TIM4_Init+0x110>)
 8000b76:	f004 fea7 	bl	80058c8 <HAL_TIM_PWM_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000b80:	f000 f9d3 	bl	8000f2a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b8c:	f107 0320 	add.w	r3, r7, #32
 8000b90:	4619      	mov	r1, r3
 8000b92:	481c      	ldr	r0, [pc, #112]	@ (8000c04 <MX_TIM4_Init+0x110>)
 8000b94:	f005 fd78 	bl	8006688 <HAL_TIMEx_MasterConfigSynchronization>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000b9e:	f000 f9c4 	bl	8000f2a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba2:	2360      	movs	r3, #96	@ 0x60
 8000ba4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4812      	ldr	r0, [pc, #72]	@ (8000c04 <MX_TIM4_Init+0x110>)
 8000bba:	f005 f897 	bl	8005cec <HAL_TIM_PWM_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000bc4:	f000 f9b1 	bl	8000f2a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2208      	movs	r2, #8
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480d      	ldr	r0, [pc, #52]	@ (8000c04 <MX_TIM4_Init+0x110>)
 8000bd0:	f005 f88c 	bl	8005cec <HAL_TIM_PWM_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000bda:	f000 f9a6 	bl	8000f2a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	220c      	movs	r2, #12
 8000be2:	4619      	mov	r1, r3
 8000be4:	4807      	ldr	r0, [pc, #28]	@ (8000c04 <MX_TIM4_Init+0x110>)
 8000be6:	f005 f881 	bl	8005cec <HAL_TIM_PWM_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8000bf0:	f000 f99b 	bl	8000f2a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000bf4:	4803      	ldr	r0, [pc, #12]	@ (8000c04 <MX_TIM4_Init+0x110>)
 8000bf6:	f000 fd0b 	bl	8001610 <HAL_TIM_MspPostInit>

}
 8000bfa:	bf00      	nop
 8000bfc:	3738      	adds	r7, #56	@ 0x38
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000424 	.word	0x20000424
 8000c08:	40000800 	.word	0x40000800

08000c0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c10:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <MX_USART1_UART_Init+0x4c>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	@ (8000c5c <MX_USART1_UART_Init+0x50>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <MX_USART1_UART_Init+0x4c>)
 8000c18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <MX_USART1_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <MX_USART1_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c58 <MX_USART1_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <MX_USART1_UART_Init+0x4c>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <MX_USART1_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <MX_USART1_UART_Init+0x4c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <MX_USART1_UART_Init+0x4c>)
 8000c44:	f005 fdb0 	bl	80067a8 <HAL_UART_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c4e:	f000 f96c 	bl	8000f2a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000046c 	.word	0x2000046c
 8000c5c:	40011000 	.word	0x40011000

08000c60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c64:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	@ (8000cb0 <MX_USART2_UART_Init+0x50>)
 8000c68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c98:	f005 fd86 	bl	80067a8 <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ca2:	f000 f942 	bl	8000f2a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200004b4 	.word	0x200004b4
 8000cb0:	40004400 	.word	0x40004400

08000cb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <MX_USART3_UART_Init+0x4c>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <MX_USART3_UART_Init+0x50>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <MX_USART3_UART_Init+0x4c>)
 8000cc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <MX_USART3_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <MX_USART3_UART_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <MX_USART3_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <MX_USART3_UART_Init+0x4c>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <MX_USART3_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <MX_USART3_UART_Init+0x4c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <MX_USART3_UART_Init+0x4c>)
 8000cec:	f005 fd5c 	bl	80067a8 <HAL_UART_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cf6:	f000 f918 	bl	8000f2a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200004fc 	.word	0x200004fc
 8000d04:	40004800 	.word	0x40004800

08000d08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <MX_DMA_Init+0x5c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a13      	ldr	r2, [pc, #76]	@ (8000d64 <MX_DMA_Init+0x5c>)
 8000d18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <MX_DMA_Init+0x5c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	200c      	movs	r0, #12
 8000d30:	f001 f880 	bl	8001e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d34:	200c      	movs	r0, #12
 8000d36:	f001 f899 	bl	8001e6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	200d      	movs	r0, #13
 8000d40:	f001 f878 	bl	8001e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d44:	200d      	movs	r0, #13
 8000d46:	f001 f891 	bl	8001e6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2010      	movs	r0, #16
 8000d50:	f001 f870 	bl	8001e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d54:	2010      	movs	r0, #16
 8000d56:	f001 f889 	bl	8001e6c <HAL_NVIC_EnableIRQ>

}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	@ 0x30
 8000d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
 8000d82:	4b5e      	ldr	r3, [pc, #376]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a5d      	ldr	r2, [pc, #372]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	4b57      	ldr	r3, [pc, #348]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a56      	ldr	r2, [pc, #344]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b54      	ldr	r3, [pc, #336]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	4b50      	ldr	r3, [pc, #320]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a4f      	ldr	r2, [pc, #316]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b4d      	ldr	r3, [pc, #308]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b49      	ldr	r3, [pc, #292]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a48      	ldr	r2, [pc, #288]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b46      	ldr	r3, [pc, #280]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	4b42      	ldr	r3, [pc, #264]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a41      	ldr	r2, [pc, #260]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a3a      	ldr	r2, [pc, #232]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000e14:	f043 0310 	orr.w	r3, r3, #16
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b38      	ldr	r3, [pc, #224]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0310 	and.w	r3, r3, #16
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2101      	movs	r1, #1
 8000e2a:	4835      	ldr	r0, [pc, #212]	@ (8000f00 <MX_GPIO_Init+0x198>)
 8000e2c:	f001 fdca 	bl	80029c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_CS_Pin|GPIO_PIN_0|Audio_RST_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f240 4111 	movw	r1, #1041	@ 0x411
 8000e36:	4833      	ldr	r0, [pc, #204]	@ (8000f04 <MX_GPIO_Init+0x19c>)
 8000e38:	f001 fdc4 	bl	80029c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2140      	movs	r1, #64	@ 0x40
 8000e40:	482f      	ldr	r0, [pc, #188]	@ (8000f00 <MX_GPIO_Init+0x198>)
 8000e42:	f001 fdbf 	bl	80029c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC6 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_6;
 8000e46:	2341      	movs	r3, #65	@ 0x41
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4828      	ldr	r0, [pc, #160]	@ (8000f00 <MX_GPIO_Init+0x198>)
 8000e5e:	f001 fc15 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e62:	2308      	movs	r3, #8
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e72:	2305      	movs	r3, #5
 8000e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4820      	ldr	r0, [pc, #128]	@ (8000f00 <MX_GPIO_Init+0x198>)
 8000e7e:	f001 fc05 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin PD0 Audio_RST_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|GPIO_PIN_0|Audio_RST_Pin;
 8000e82:	f240 4311 	movw	r3, #1041	@ 0x411
 8000e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	481a      	ldr	r0, [pc, #104]	@ (8000f04 <MX_GPIO_Init+0x19c>)
 8000e9c:	f001 fbf6 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ea0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4814      	ldr	r0, [pc, #80]	@ (8000f08 <MX_GPIO_Init+0x1a0>)
 8000eb6:	f001 fbe9 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin;
 8000eba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ecc:	230a      	movs	r3, #10
 8000ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480c      	ldr	r0, [pc, #48]	@ (8000f08 <MX_GPIO_Init+0x1a0>)
 8000ed8:	f001 fbd8 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000edc:	2320      	movs	r3, #32
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_GPIO_Init+0x19c>)
 8000ef0:	f001 fbcc 	bl	800268c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ef4:	bf00      	nop
 8000ef6:	3730      	adds	r7, #48	@ 0x30
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40020c00 	.word	0x40020c00
 8000f08:	40020000 	.word	0x40020000

08000f0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f1c:	d101      	bne.n	8000f22 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f1e:	f000 fe8d 	bl	8001c3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2e:	b672      	cpsid	i
}
 8000f30:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f32:	bf00      	nop
 8000f34:	e7fd      	b.n	8000f32 <Error_Handler+0x8>
	...

08000f38 <MsgHandler_Init>:
SemaphoreHandle_t msgHandlerRx;
SemaphoreHandle_t ReceiveMsgTimeoutMutex;
int ReceiveMsgTimeout = 10;

void MsgHandler_Init(UART_HandleTypeDef* shell_huart)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	msgHandler_shell_huart = shell_huart;
 8000f40:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <MsgHandler_Init+0x1c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200005a4 	.word	0x200005a4

08000f58 <MsgHandler_OS_Resources_Init>:

void MsgHandler_OS_Resources_Init()
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	msgHandlerTx = xSemaphoreCreateMutex();
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f007 feed 	bl	8008d3c <xQueueCreateMutex>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4a07      	ldr	r2, [pc, #28]	@ (8000f84 <MsgHandler_OS_Resources_Init+0x2c>)
 8000f66:	6013      	str	r3, [r2, #0]
	msgHandlerRx = xSemaphoreCreateMutex();
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f007 fee7 	bl	8008d3c <xQueueCreateMutex>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a05      	ldr	r2, [pc, #20]	@ (8000f88 <MsgHandler_OS_Resources_Init+0x30>)
 8000f72:	6013      	str	r3, [r2, #0]
	ReceiveMsgTimeoutMutex = xSemaphoreCreateMutex();
 8000f74:	2001      	movs	r0, #1
 8000f76:	f007 fee1 	bl	8008d3c <xQueueCreateMutex>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a03      	ldr	r2, [pc, #12]	@ (8000f8c <MsgHandler_OS_Resources_Init+0x34>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200005a8 	.word	0x200005a8
 8000f88:	200005ac 	.word	0x200005ac
 8000f8c:	200005b0 	.word	0x200005b0

08000f90 <SendChar>:

void SendChar(UART_HandleTypeDef* huart, const char c)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	70fb      	strb	r3, [r7, #3]
	SendMsg(huart, "%c", c);
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4903      	ldr	r1, [pc, #12]	@ (8000fb0 <SendChar+0x20>)
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f806 	bl	8000fb4 <SendMsg>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	0801178c 	.word	0x0801178c

08000fb4 <SendMsg>:

void SendMsg(UART_HandleTypeDef* huart, const char* fmt, ...)
{
 8000fb4:	b40e      	push	{r1, r2, r3}
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b085      	sub	sp, #20
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
	if(msgHandlerTx){
 8000fbe:	4b23      	ldr	r3, [pc, #140]	@ (800104c <SendMsg+0x98>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d026      	beq.n	8001014 <SendMsg+0x60>
		if (xSemaphoreTake(msgHandlerTx, portMAX_DELAY) == pdPASS) {
 8000fc6:	4b21      	ldr	r3, [pc, #132]	@ (800104c <SendMsg+0x98>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f04f 31ff 	mov.w	r1, #4294967295
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f008 f94c 	bl	800926c <xQueueSemaphoreTake>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d131      	bne.n	800103e <SendMsg+0x8a>
			static char send_data[256];
			va_list args;
			va_start(args, fmt);
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	60fb      	str	r3, [r7, #12]
			vsnprintf(send_data, sizeof(send_data), fmt, args);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fe8:	4819      	ldr	r0, [pc, #100]	@ (8001050 <SendMsg+0x9c>)
 8000fea:	f00e fe73 	bl	800fcd4 <vsniprintf>
			va_end(args);
			HAL_UART_Transmit(huart, (uint8_t *)send_data, strlen(send_data), HAL_MAX_DELAY);
 8000fee:	4818      	ldr	r0, [pc, #96]	@ (8001050 <SendMsg+0x9c>)
 8000ff0:	f7ff f8f8 	bl	80001e4 <strlen>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	4914      	ldr	r1, [pc, #80]	@ (8001050 <SendMsg+0x9c>)
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f005 fc22 	bl	8006848 <HAL_UART_Transmit>

			xSemaphoreGive(msgHandlerTx);
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <SendMsg+0x98>)
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	2300      	movs	r3, #0
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	f007 fead 	bl	8008d6c <xQueueGenericSend>
		vsnprintf(send_data, sizeof(send_data), fmt, args);
		va_end(args);
		HAL_UART_Transmit(huart, (uint8_t *)send_data, strlen(send_data), HAL_MAX_DELAY);

	}
}
 8001012:	e014      	b.n	800103e <SendMsg+0x8a>
		va_start(args, fmt);
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	60bb      	str	r3, [r7, #8]
		vsnprintf(send_data, sizeof(send_data), fmt, args);
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	69fa      	ldr	r2, [r7, #28]
 800101e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001022:	480c      	ldr	r0, [pc, #48]	@ (8001054 <SendMsg+0xa0>)
 8001024:	f00e fe56 	bl	800fcd4 <vsniprintf>
		HAL_UART_Transmit(huart, (uint8_t *)send_data, strlen(send_data), HAL_MAX_DELAY);
 8001028:	480a      	ldr	r0, [pc, #40]	@ (8001054 <SendMsg+0xa0>)
 800102a:	f7ff f8db 	bl	80001e4 <strlen>
 800102e:	4603      	mov	r3, r0
 8001030:	b29a      	uxth	r2, r3
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	4907      	ldr	r1, [pc, #28]	@ (8001054 <SendMsg+0xa0>)
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f005 fc05 	bl	8006848 <HAL_UART_Transmit>
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001048:	b003      	add	sp, #12
 800104a:	4770      	bx	lr
 800104c:	200005a8 	.word	0x200005a8
 8001050:	200005b4 	.word	0x200005b4
 8001054:	200006b4 	.word	0x200006b4

08001058 <ReceiveChar>:

int ReceiveChar(UART_HandleTypeDef* huart, char* receive_data)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
	if (xSemaphoreTake(msgHandlerRx, portMAX_DELAY) == pdPASS) {
 8001062:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <ReceiveChar+0x5c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f04f 31ff 	mov.w	r1, #4294967295
 800106a:	4618      	mov	r0, r3
 800106c:	f008 f8fe 	bl	800926c <xQueueSemaphoreTake>
 8001070:	4603      	mov	r3, r0
 8001072:	2b01      	cmp	r3, #1
 8001074:	d119      	bne.n	80010aa <ReceiveChar+0x52>
		if (HAL_UART_Receive(huart, (uint8_t *)receive_data, 1, 500) == HAL_OK) {
 8001076:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800107a:	2201      	movs	r2, #1
 800107c:	6839      	ldr	r1, [r7, #0]
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f005 fc6d 	bl	800695e <HAL_UART_Receive>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d108      	bne.n	800109c <ReceiveChar+0x44>
			xSemaphoreGive(msgHandlerRx);
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <ReceiveChar+0x5c>)
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	2300      	movs	r3, #0
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	f007 fe6a 	bl	8008d6c <xQueueGenericSend>
			return HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	e007      	b.n	80010ac <ReceiveChar+0x54>
		}
		xSemaphoreGive(msgHandlerRx);
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <ReceiveChar+0x5c>)
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	2300      	movs	r3, #0
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	f007 fe61 	bl	8008d6c <xQueueGenericSend>
	}

	return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200005ac 	.word	0x200005ac

080010b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <HAL_MspInit+0x4c>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001104 <HAL_MspInit+0x4c>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <HAL_MspInit+0x4c>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <HAL_MspInit+0x4c>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	4a08      	ldr	r2, [pc, #32]	@ (8001104 <HAL_MspInit+0x4c>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_MspInit+0x4c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	@ 0x30
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a33      	ldr	r2, [pc, #204]	@ (80011f4 <HAL_I2C_MspInit+0xec>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12d      	bne.n	8001186 <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	4b32      	ldr	r3, [pc, #200]	@ (80011f8 <HAL_I2C_MspInit+0xf0>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a31      	ldr	r2, [pc, #196]	@ (80011f8 <HAL_I2C_MspInit+0xf0>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b2f      	ldr	r3, [pc, #188]	@ (80011f8 <HAL_I2C_MspInit+0xf0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001146:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114c:	2312      	movs	r3, #18
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001158:	2304      	movs	r3, #4
 800115a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	4826      	ldr	r0, [pc, #152]	@ (80011fc <HAL_I2C_MspInit+0xf4>)
 8001164:	f001 fa92 	bl	800268c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <HAL_I2C_MspInit+0xf0>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001170:	4a21      	ldr	r2, [pc, #132]	@ (80011f8 <HAL_I2C_MspInit+0xf0>)
 8001172:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001176:	6413      	str	r3, [r2, #64]	@ 0x40
 8001178:	4b1f      	ldr	r3, [pc, #124]	@ (80011f8 <HAL_I2C_MspInit+0xf0>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001184:	e031      	b.n	80011ea <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a1d      	ldr	r2, [pc, #116]	@ (8001200 <HAL_I2C_MspInit+0xf8>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d12c      	bne.n	80011ea <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <HAL_I2C_MspInit+0xf0>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001198:	4a17      	ldr	r2, [pc, #92]	@ (80011f8 <HAL_I2C_MspInit+0xf0>)
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a0:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <HAL_I2C_MspInit+0xf0>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011ac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b2:	2312      	movs	r3, #18
 80011b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011be:	2304      	movs	r3, #4
 80011c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <HAL_I2C_MspInit+0xf4>)
 80011ca:	f001 fa5f 	bl	800268c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <HAL_I2C_MspInit+0xf0>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a08      	ldr	r2, [pc, #32]	@ (80011f8 <HAL_I2C_MspInit+0xf0>)
 80011d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_I2C_MspInit+0xf0>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
}
 80011ea:	bf00      	nop
 80011ec:	3730      	adds	r7, #48	@ 0x30
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40005400 	.word	0x40005400
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020400 	.word	0x40020400
 8001200:	40005800 	.word	0x40005800

08001204 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	@ 0x38
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a68      	ldr	r2, [pc, #416]	@ (80013d0 <HAL_I2S_MspInit+0x1cc>)
 8001230:	4293      	cmp	r3, r2
 8001232:	f040 80c8 	bne.w	80013c6 <HAL_I2S_MspInit+0x1c2>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001236:	2301      	movs	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800123a:	23c0      	movs	r3, #192	@ 0xc0
 800123c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800123e:	2302      	movs	r3, #2
 8001240:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4618      	mov	r0, r3
 8001248:	f003 f9de 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001252:	f7ff fe6a 	bl	8000f2a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b5e      	ldr	r3, [pc, #376]	@ (80013d4 <HAL_I2S_MspInit+0x1d0>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	4a5d      	ldr	r2, [pc, #372]	@ (80013d4 <HAL_I2S_MspInit+0x1d0>)
 8001260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001264:	6413      	str	r3, [r2, #64]	@ 0x40
 8001266:	4b5b      	ldr	r3, [pc, #364]	@ (80013d4 <HAL_I2S_MspInit+0x1d0>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b57      	ldr	r3, [pc, #348]	@ (80013d4 <HAL_I2S_MspInit+0x1d0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a56      	ldr	r2, [pc, #344]	@ (80013d4 <HAL_I2S_MspInit+0x1d0>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b54      	ldr	r3, [pc, #336]	@ (80013d4 <HAL_I2S_MspInit+0x1d0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b50      	ldr	r3, [pc, #320]	@ (80013d4 <HAL_I2S_MspInit+0x1d0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a4f      	ldr	r2, [pc, #316]	@ (80013d4 <HAL_I2S_MspInit+0x1d0>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b4d      	ldr	r3, [pc, #308]	@ (80013d4 <HAL_I2S_MspInit+0x1d0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|I2S3_SD_Pin;
 80012aa:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012bc:	2306      	movs	r3, #6
 80012be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c4:	4619      	mov	r1, r3
 80012c6:	4844      	ldr	r0, [pc, #272]	@ (80013d8 <HAL_I2S_MspInit+0x1d4>)
 80012c8:	f001 f9e0 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80012cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012de:	2306      	movs	r3, #6
 80012e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e6:	4619      	mov	r1, r3
 80012e8:	483c      	ldr	r0, [pc, #240]	@ (80013dc <HAL_I2S_MspInit+0x1d8>)
 80012ea:	f001 f9cf 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8001300:	2305      	movs	r3, #5
 8001302:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001308:	4619      	mov	r1, r3
 800130a:	4833      	ldr	r0, [pc, #204]	@ (80013d8 <HAL_I2S_MspInit+0x1d4>)
 800130c:	f001 f9be 	bl	800268c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001310:	4b33      	ldr	r3, [pc, #204]	@ (80013e0 <HAL_I2S_MspInit+0x1dc>)
 8001312:	4a34      	ldr	r2, [pc, #208]	@ (80013e4 <HAL_I2S_MspInit+0x1e0>)
 8001314:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001316:	4b32      	ldr	r3, [pc, #200]	@ (80013e0 <HAL_I2S_MspInit+0x1dc>)
 8001318:	2200      	movs	r2, #0
 800131a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800131c:	4b30      	ldr	r3, [pc, #192]	@ (80013e0 <HAL_I2S_MspInit+0x1dc>)
 800131e:	2240      	movs	r2, #64	@ 0x40
 8001320:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001322:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <HAL_I2S_MspInit+0x1dc>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001328:	4b2d      	ldr	r3, [pc, #180]	@ (80013e0 <HAL_I2S_MspInit+0x1dc>)
 800132a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800132e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001330:	4b2b      	ldr	r3, [pc, #172]	@ (80013e0 <HAL_I2S_MspInit+0x1dc>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001336:	4b2a      	ldr	r3, [pc, #168]	@ (80013e0 <HAL_I2S_MspInit+0x1dc>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800133c:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <HAL_I2S_MspInit+0x1dc>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001342:	4b27      	ldr	r3, [pc, #156]	@ (80013e0 <HAL_I2S_MspInit+0x1dc>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001348:	4b25      	ldr	r3, [pc, #148]	@ (80013e0 <HAL_I2S_MspInit+0x1dc>)
 800134a:	2200      	movs	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800134e:	4824      	ldr	r0, [pc, #144]	@ (80013e0 <HAL_I2S_MspInit+0x1dc>)
 8001350:	f000 fd9a 	bl	8001e88 <HAL_DMA_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_I2S_MspInit+0x15a>
    {
      Error_Handler();
 800135a:	f7ff fde6 	bl	8000f2a <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a1f      	ldr	r2, [pc, #124]	@ (80013e0 <HAL_I2S_MspInit+0x1dc>)
 8001362:	639a      	str	r2, [r3, #56]	@ 0x38
 8001364:	4a1e      	ldr	r2, [pc, #120]	@ (80013e0 <HAL_I2S_MspInit+0x1dc>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream2;
 800136a:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <HAL_I2S_MspInit+0x1e4>)
 800136c:	4a1f      	ldr	r2, [pc, #124]	@ (80013ec <HAL_I2S_MspInit+0x1e8>)
 800136e:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_2;
 8001370:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <HAL_I2S_MspInit+0x1e4>)
 8001372:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001376:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001378:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <HAL_I2S_MspInit+0x1e4>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800137e:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <HAL_I2S_MspInit+0x1e4>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001384:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <HAL_I2S_MspInit+0x1e4>)
 8001386:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800138a:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800138c:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <HAL_I2S_MspInit+0x1e4>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <HAL_I2S_MspInit+0x1e4>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_NORMAL;
 8001398:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <HAL_I2S_MspInit+0x1e4>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 800139e:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <HAL_I2S_MspInit+0x1e4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a4:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <HAL_I2S_MspInit+0x1e4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 80013aa:	480f      	ldr	r0, [pc, #60]	@ (80013e8 <HAL_I2S_MspInit+0x1e4>)
 80013ac:	f000 fd6c 	bl	8001e88 <HAL_DMA_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_I2S_MspInit+0x1b6>
    {
      Error_Handler();
 80013b6:	f7ff fdb8 	bl	8000f2a <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s3_ext_rx);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <HAL_I2S_MspInit+0x1e4>)
 80013be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013c0:	4a09      	ldr	r2, [pc, #36]	@ (80013e8 <HAL_I2S_MspInit+0x1e4>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80013c6:	bf00      	nop
 80013c8:	3738      	adds	r7, #56	@ 0x38
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40003c00 	.word	0x40003c00
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020000 	.word	0x40020000
 80013e0:	20000294 	.word	0x20000294
 80013e4:	40026088 	.word	0x40026088
 80013e8:	200002f4 	.word	0x200002f4
 80013ec:	40026040 	.word	0x40026040

080013f0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a0c      	ldr	r2, [pc, #48]	@ (800143c <HAL_RTC_MspInit+0x4c>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d111      	bne.n	8001434 <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001410:	2302      	movs	r3, #2
 8001412:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001414:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001418:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	4618      	mov	r0, r3
 8001420:	f003 f8f2 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800142a:	f7ff fd7e 	bl	8000f2a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800142e:	4b04      	ldr	r3, [pc, #16]	@ (8001440 <HAL_RTC_MspInit+0x50>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001434:	bf00      	nop
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40002800 	.word	0x40002800
 8001440:	42470e3c 	.word	0x42470e3c

08001444 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	@ 0x30
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a32      	ldr	r2, [pc, #200]	@ (800152c <HAL_SPI_MspInit+0xe8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12c      	bne.n	80014c0 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	4b31      	ldr	r3, [pc, #196]	@ (8001530 <HAL_SPI_MspInit+0xec>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	4a30      	ldr	r2, [pc, #192]	@ (8001530 <HAL_SPI_MspInit+0xec>)
 8001470:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001474:	6453      	str	r3, [r2, #68]	@ 0x44
 8001476:	4b2e      	ldr	r3, [pc, #184]	@ (8001530 <HAL_SPI_MspInit+0xec>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800147e:	61bb      	str	r3, [r7, #24]
 8001480:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	4b2a      	ldr	r3, [pc, #168]	@ (8001530 <HAL_SPI_MspInit+0xec>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a29      	ldr	r2, [pc, #164]	@ (8001530 <HAL_SPI_MspInit+0xec>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b27      	ldr	r3, [pc, #156]	@ (8001530 <HAL_SPI_MspInit+0xec>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800149e:	23e0      	movs	r3, #224	@ 0xe0
 80014a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ae:	2305      	movs	r3, #5
 80014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	4619      	mov	r1, r3
 80014b8:	481e      	ldr	r0, [pc, #120]	@ (8001534 <HAL_SPI_MspInit+0xf0>)
 80014ba:	f001 f8e7 	bl	800268c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014be:	e031      	b.n	8001524 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001538 <HAL_SPI_MspInit+0xf4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d12c      	bne.n	8001524 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <HAL_SPI_MspInit+0xec>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	4a17      	ldr	r2, [pc, #92]	@ (8001530 <HAL_SPI_MspInit+0xec>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <HAL_SPI_MspInit+0xec>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <HAL_SPI_MspInit+0xec>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a10      	ldr	r2, [pc, #64]	@ (8001530 <HAL_SPI_MspInit+0xec>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <HAL_SPI_MspInit+0xec>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001502:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001514:	2305      	movs	r3, #5
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	4807      	ldr	r0, [pc, #28]	@ (800153c <HAL_SPI_MspInit+0xf8>)
 8001520:	f001 f8b4 	bl	800268c <HAL_GPIO_Init>
}
 8001524:	bf00      	nop
 8001526:	3730      	adds	r7, #48	@ 0x30
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40013000 	.word	0x40013000
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000
 8001538:	40003800 	.word	0x40003800
 800153c:	40020400 	.word	0x40020400

08001540 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a28      	ldr	r2, [pc, #160]	@ (8001600 <HAL_TIM_Base_MspInit+0xc0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d14a      	bne.n	80015f8 <HAL_TIM_Base_MspInit+0xb8>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b27      	ldr	r3, [pc, #156]	@ (8001604 <HAL_TIM_Base_MspInit+0xc4>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	4a26      	ldr	r2, [pc, #152]	@ (8001604 <HAL_TIM_Base_MspInit+0xc4>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6413      	str	r3, [r2, #64]	@ 0x40
 8001572:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <HAL_TIM_Base_MspInit+0xc4>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_TIM_Base_MspInit+0xc4>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a1f      	ldr	r2, [pc, #124]	@ (8001604 <HAL_TIM_Base_MspInit+0xc4>)
 8001588:	f043 0308 	orr.w	r3, r3, #8
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <HAL_TIM_Base_MspInit+0xc4>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_TIM_Base_MspInit+0xc4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a18      	ldr	r2, [pc, #96]	@ (8001604 <HAL_TIM_Base_MspInit+0xc4>)
 80015a4:	f043 0310 	orr.w	r3, r3, #16
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <HAL_TIM_Base_MspInit+0xc4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015c8:	2302      	movs	r3, #2
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	480d      	ldr	r0, [pc, #52]	@ (8001608 <HAL_TIM_Base_MspInit+0xc8>)
 80015d4:	f001 f85a 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015d8:	2301      	movs	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015e8:	2302      	movs	r3, #2
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	4806      	ldr	r0, [pc, #24]	@ (800160c <HAL_TIM_Base_MspInit+0xcc>)
 80015f4:	f001 f84a 	bl	800268c <HAL_GPIO_Init>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 80015f8:	bf00      	nop
 80015fa:	3728      	adds	r7, #40	@ 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40000800 	.word	0x40000800
 8001604:	40023800 	.word	0x40023800
 8001608:	40020c00 	.word	0x40020c00
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <HAL_TIM_MspPostInit+0x68>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d11e      	bne.n	8001670 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	4b11      	ldr	r3, [pc, #68]	@ (800167c <HAL_TIM_MspPostInit+0x6c>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a10      	ldr	r2, [pc, #64]	@ (800167c <HAL_TIM_MspPostInit+0x6c>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <HAL_TIM_MspPostInit+0x6c>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800164e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001652:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001660:	2302      	movs	r3, #2
 8001662:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	4619      	mov	r1, r3
 800166a:	4805      	ldr	r0, [pc, #20]	@ (8001680 <HAL_TIM_MspPostInit+0x70>)
 800166c:	f001 f80e 	bl	800268c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001670:	bf00      	nop
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40000800 	.word	0x40000800
 800167c:	40023800 	.word	0x40023800
 8001680:	40020c00 	.word	0x40020c00

08001684 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08e      	sub	sp, #56	@ 0x38
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a66      	ldr	r2, [pc, #408]	@ (800183c <HAL_UART_MspInit+0x1b8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d12c      	bne.n	8001700 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
 80016aa:	4b65      	ldr	r3, [pc, #404]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ae:	4a64      	ldr	r2, [pc, #400]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 80016b0:	f043 0310 	orr.w	r3, r3, #16
 80016b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b6:	4b62      	ldr	r3, [pc, #392]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ba:	f003 0310 	and.w	r3, r3, #16
 80016be:	623b      	str	r3, [r7, #32]
 80016c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	4b5e      	ldr	r3, [pc, #376]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a5d      	ldr	r2, [pc, #372]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	61fb      	str	r3, [r7, #28]
 80016dc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016de:	23c0      	movs	r3, #192	@ 0xc0
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ee:	2307      	movs	r3, #7
 80016f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016f6:	4619      	mov	r1, r3
 80016f8:	4852      	ldr	r0, [pc, #328]	@ (8001844 <HAL_UART_MspInit+0x1c0>)
 80016fa:	f000 ffc7 	bl	800268c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80016fe:	e099      	b.n	8001834 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a50      	ldr	r2, [pc, #320]	@ (8001848 <HAL_UART_MspInit+0x1c4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d12c      	bne.n	8001764 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
 800170e:	4b4c      	ldr	r3, [pc, #304]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	4a4b      	ldr	r2, [pc, #300]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 8001714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001718:	6413      	str	r3, [r2, #64]	@ 0x40
 800171a:	4b49      	ldr	r3, [pc, #292]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	4b45      	ldr	r3, [pc, #276]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a44      	ldr	r2, [pc, #272]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b42      	ldr	r3, [pc, #264]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001742:	230c      	movs	r3, #12
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001752:	2307      	movs	r3, #7
 8001754:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175a:	4619      	mov	r1, r3
 800175c:	483b      	ldr	r0, [pc, #236]	@ (800184c <HAL_UART_MspInit+0x1c8>)
 800175e:	f000 ff95 	bl	800268c <HAL_GPIO_Init>
}
 8001762:	e067      	b.n	8001834 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a39      	ldr	r2, [pc, #228]	@ (8001850 <HAL_UART_MspInit+0x1cc>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d162      	bne.n	8001834 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	4b33      	ldr	r3, [pc, #204]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	4a32      	ldr	r2, [pc, #200]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800177c:	6413      	str	r3, [r2, #64]	@ 0x40
 800177e:	4b30      	ldr	r3, [pc, #192]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b2c      	ldr	r3, [pc, #176]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a2b      	ldr	r2, [pc, #172]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b29      	ldr	r3, [pc, #164]	@ (8001840 <HAL_UART_MspInit+0x1bc>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017b8:	2307      	movs	r3, #7
 80017ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	4824      	ldr	r0, [pc, #144]	@ (8001854 <HAL_UART_MspInit+0x1d0>)
 80017c4:	f000 ff62 	bl	800268c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80017c8:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <HAL_UART_MspInit+0x1d4>)
 80017ca:	4a24      	ldr	r2, [pc, #144]	@ (800185c <HAL_UART_MspInit+0x1d8>)
 80017cc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80017ce:	4b22      	ldr	r3, [pc, #136]	@ (8001858 <HAL_UART_MspInit+0x1d4>)
 80017d0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017d4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d6:	4b20      	ldr	r3, [pc, #128]	@ (8001858 <HAL_UART_MspInit+0x1d4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001858 <HAL_UART_MspInit+0x1d4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <HAL_UART_MspInit+0x1d4>)
 80017e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017e8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <HAL_UART_MspInit+0x1d4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_UART_MspInit+0x1d4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80017f6:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <HAL_UART_MspInit+0x1d4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017fc:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <HAL_UART_MspInit+0x1d4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <HAL_UART_MspInit+0x1d4>)
 8001804:	2200      	movs	r2, #0
 8001806:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001808:	4813      	ldr	r0, [pc, #76]	@ (8001858 <HAL_UART_MspInit+0x1d4>)
 800180a:	f000 fb3d 	bl	8001e88 <HAL_DMA_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_UART_MspInit+0x194>
      Error_Handler();
 8001814:	f7ff fb89 	bl	8000f2a <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a0f      	ldr	r2, [pc, #60]	@ (8001858 <HAL_UART_MspInit+0x1d4>)
 800181c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800181e:	4a0e      	ldr	r2, [pc, #56]	@ (8001858 <HAL_UART_MspInit+0x1d4>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	210f      	movs	r1, #15
 8001828:	2027      	movs	r0, #39	@ 0x27
 800182a:	f000 fb03 	bl	8001e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800182e:	2027      	movs	r0, #39	@ 0x27
 8001830:	f000 fb1c 	bl	8001e6c <HAL_NVIC_EnableIRQ>
}
 8001834:	bf00      	nop
 8001836:	3738      	adds	r7, #56	@ 0x38
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40011000 	.word	0x40011000
 8001840:	40023800 	.word	0x40023800
 8001844:	40020400 	.word	0x40020400
 8001848:	40004400 	.word	0x40004400
 800184c:	40020000 	.word	0x40020000
 8001850:	40004800 	.word	0x40004800
 8001854:	40020c00 	.word	0x40020c00
 8001858:	20000544 	.word	0x20000544
 800185c:	40026028 	.word	0x40026028

08001860 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08e      	sub	sp, #56	@ 0x38
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	4b34      	ldr	r3, [pc, #208]	@ (8001948 <HAL_InitTick+0xe8>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	4a33      	ldr	r2, [pc, #204]	@ (8001948 <HAL_InitTick+0xe8>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001880:	4b31      	ldr	r3, [pc, #196]	@ (8001948 <HAL_InitTick+0xe8>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800188c:	f107 0210 	add.w	r2, r7, #16
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f002 fe84 	bl	80045a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d103      	bne.n	80018ae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018a6:	f002 fe55 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 80018aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80018ac:	e004      	b.n	80018b8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018ae:	f002 fe51 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 80018b2:	4603      	mov	r3, r0
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ba:	4a24      	ldr	r2, [pc, #144]	@ (800194c <HAL_InitTick+0xec>)
 80018bc:	fba2 2303 	umull	r2, r3, r2, r3
 80018c0:	0c9b      	lsrs	r3, r3, #18
 80018c2:	3b01      	subs	r3, #1
 80018c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80018c6:	4b22      	ldr	r3, [pc, #136]	@ (8001950 <HAL_InitTick+0xf0>)
 80018c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018cc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80018ce:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <HAL_InitTick+0xf0>)
 80018d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018d4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80018d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001950 <HAL_InitTick+0xf0>)
 80018d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018da:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80018dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <HAL_InitTick+0xf0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <HAL_InitTick+0xf0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e8:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <HAL_InitTick+0xf0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80018ee:	4818      	ldr	r0, [pc, #96]	@ (8001950 <HAL_InitTick+0xf0>)
 80018f0:	f003 ff2a 	bl	8005748 <HAL_TIM_Base_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80018fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d11b      	bne.n	800193a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001902:	4813      	ldr	r0, [pc, #76]	@ (8001950 <HAL_InitTick+0xf0>)
 8001904:	f003 ff70 	bl	80057e8 <HAL_TIM_Base_Start_IT>
 8001908:	4603      	mov	r3, r0
 800190a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800190e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001912:	2b00      	cmp	r3, #0
 8001914:	d111      	bne.n	800193a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001916:	201c      	movs	r0, #28
 8001918:	f000 faa8 	bl	8001e6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b0f      	cmp	r3, #15
 8001920:	d808      	bhi.n	8001934 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001922:	2200      	movs	r2, #0
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	201c      	movs	r0, #28
 8001928:	f000 fa84 	bl	8001e34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800192c:	4a09      	ldr	r2, [pc, #36]	@ (8001954 <HAL_InitTick+0xf4>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e002      	b.n	800193a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800193a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800193e:	4618      	mov	r0, r3
 8001940:	3738      	adds	r7, #56	@ 0x38
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	431bde83 	.word	0x431bde83
 8001950:	200007b4 	.word	0x200007b4
 8001954:	20000008 	.word	0x20000008

08001958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <NMI_Handler+0x4>

08001960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <MemManage_Handler+0x4>

08001970 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <BusFault_Handler+0x4>

08001978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <UsageFault_Handler+0x4>

08001980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001994:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <DMA1_Stream1_IRQHandler+0x10>)
 8001996:	f000 fc0f 	bl	80021b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000544 	.word	0x20000544

080019a4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s3_ext_rx);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <DMA1_Stream2_IRQHandler+0x10>)
 80019aa:	f000 fc05 	bl	80021b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200002f4 	.word	0x200002f4

080019b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80019bc:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <DMA1_Stream5_IRQHandler+0x10>)
 80019be:	f000 fbfb 	bl	80021b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000294 	.word	0x20000294

080019cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019d0:	4802      	ldr	r0, [pc, #8]	@ (80019dc <TIM2_IRQHandler+0x10>)
 80019d2:	f004 f89b 	bl	8005b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200007b4 	.word	0x200007b4

080019e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019e4:	4802      	ldr	r0, [pc, #8]	@ (80019f0 <USART3_IRQHandler+0x10>)
 80019e6:	f005 f8af 	bl	8006b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200004fc 	.word	0x200004fc

080019f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return 1;
 80019f8:	2301      	movs	r3, #1
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <_kill>:

int _kill(int pid, int sig)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a0e:	f00e fa43 	bl	800fe98 <__errno>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2216      	movs	r2, #22
 8001a16:	601a      	str	r2, [r3, #0]
  return -1;
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_exit>:

void _exit (int status)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ffe7 	bl	8001a04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a36:	bf00      	nop
 8001a38:	e7fd      	b.n	8001a36 <_exit+0x12>

08001a3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	e00a      	b.n	8001a62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a4c:	f3af 8000 	nop.w
 8001a50:	4601      	mov	r1, r0
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	60ba      	str	r2, [r7, #8]
 8001a58:	b2ca      	uxtb	r2, r1
 8001a5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	dbf0      	blt.n	8001a4c <_read+0x12>
  }

  return len;
 8001a6a:	687b      	ldr	r3, [r7, #4]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	e009      	b.n	8001a9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	60ba      	str	r2, [r7, #8]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	dbf1      	blt.n	8001a86 <_write+0x12>
  }
  return len;
 8001aa2:	687b      	ldr	r3, [r7, #4]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_close>:

int _close(int file)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ad4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_isatty>:

int _isatty(int file)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aec:	2301      	movs	r3, #1
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b1c:	4a14      	ldr	r2, [pc, #80]	@ (8001b70 <_sbrk+0x5c>)
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <_sbrk+0x60>)
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b28:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d102      	bne.n	8001b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <_sbrk+0x64>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	@ (8001b7c <_sbrk+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d207      	bcs.n	8001b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b44:	f00e f9a8 	bl	800fe98 <__errno>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b52:	e009      	b.n	8001b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b54:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5a:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	4a05      	ldr	r2, [pc, #20]	@ (8001b78 <_sbrk+0x64>)
 8001b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b66:	68fb      	ldr	r3, [r7, #12]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20020000 	.word	0x20020000
 8001b74:	00000400 	.word	0x00000400
 8001b78:	200007fc 	.word	0x200007fc
 8001b7c:	20014288 	.word	0x20014288

08001b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <SystemInit+0x20>)
 8001b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ba0 <SystemInit+0x20>)
 8001b8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ba4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ba8:	f7ff ffea 	bl	8001b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bac:	480c      	ldr	r0, [pc, #48]	@ (8001be0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bae:	490d      	ldr	r1, [pc, #52]	@ (8001be4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001be8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001bf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f00e f967 	bl	800fea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bd6:	f7fe fcf9 	bl	80005cc <main>
  bx  lr    
 8001bda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be4:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8001be8:	08012440 	.word	0x08012440
  ldr r2, =_sbss
 8001bec:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8001bf0:	20014288 	.word	0x20014288

08001bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC_IRQHandler>
	...

08001bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0d      	ldr	r2, [pc, #52]	@ (8001c38 <HAL_Init+0x40>)
 8001c02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_Init+0x40>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <HAL_Init+0x40>)
 8001c0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c14:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <HAL_Init+0x40>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a07      	ldr	r2, [pc, #28]	@ (8001c38 <HAL_Init+0x40>)
 8001c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f000 f8fc 	bl	8001e1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c26:	200f      	movs	r0, #15
 8001c28:	f7ff fe1a 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2c:	f7ff fa44 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023c00 	.word	0x40023c00

08001c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_IncTick+0x20>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_IncTick+0x24>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <HAL_IncTick+0x24>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	2000000c 	.word	0x2000000c
 8001c60:	20000800 	.word	0x20000800

08001c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return uwTick;
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <HAL_GetTick+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000800 	.word	0x20000800

08001c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c84:	f7ff ffee 	bl	8001c64 <HAL_GetTick>
 8001c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c94:	d005      	beq.n	8001ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c96:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <HAL_Delay+0x44>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ca2:	bf00      	nop
 8001ca4:	f7ff ffde 	bl	8001c64 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d8f7      	bhi.n	8001ca4 <HAL_Delay+0x28>
  {
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	2000000c 	.word	0x2000000c

08001cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf6:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	60d3      	str	r3, [r2, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d10:	4b04      	ldr	r3, [pc, #16]	@ (8001d24 <__NVIC_GetPriorityGrouping+0x18>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	f003 0307 	and.w	r3, r3, #7
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	db0b      	blt.n	8001d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	f003 021f 	and.w	r2, r3, #31
 8001d40:	4907      	ldr	r1, [pc, #28]	@ (8001d60 <__NVIC_EnableIRQ+0x38>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	2001      	movs	r0, #1
 8001d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0a      	blt.n	8001d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	@ (8001db0 <__NVIC_SetPriority+0x4c>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d8c:	e00a      	b.n	8001da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4908      	ldr	r1, [pc, #32]	@ (8001db4 <__NVIC_SetPriority+0x50>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	761a      	strb	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	@ 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4313      	orrs	r3, r2
         );
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	@ 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ff4c 	bl	8001cc4 <__NVIC_SetPriorityGrouping>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e46:	f7ff ff61 	bl	8001d0c <__NVIC_GetPriorityGrouping>
 8001e4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	6978      	ldr	r0, [r7, #20]
 8001e52:	f7ff ffb1 	bl	8001db8 <NVIC_EncodePriority>
 8001e56:	4602      	mov	r2, r0
 8001e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff80 	bl	8001d64 <__NVIC_SetPriority>
}
 8001e64:	bf00      	nop
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff54 	bl	8001d28 <__NVIC_EnableIRQ>
}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e94:	f7ff fee6 	bl	8001c64 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e099      	b.n	8001fd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec4:	e00f      	b.n	8001ee6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ec6:	f7ff fecd 	bl	8001c64 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d908      	bls.n	8001ee6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2203      	movs	r2, #3
 8001ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e078      	b.n	8001fd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e8      	bne.n	8001ec6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	4b38      	ldr	r3, [pc, #224]	@ (8001fe0 <HAL_DMA_Init+0x158>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d107      	bne.n	8001f50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f023 0307 	bic.w	r3, r3, #7
 8001f66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d117      	bne.n	8001faa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00e      	beq.n	8001faa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fb01 	bl	8002594 <DMA_CheckFifoParam>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2240      	movs	r2, #64	@ 0x40
 8001f9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e016      	b.n	8001fd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fab8 	bl	8002528 <DMA_CalcBaseAndBitshift>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc0:	223f      	movs	r2, #63	@ 0x3f
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	f010803f 	.word	0xf010803f

08001fe4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_DMA_Start_IT+0x26>
 8002006:	2302      	movs	r3, #2
 8002008:	e040      	b.n	800208c <HAL_DMA_Start_IT+0xa8>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b01      	cmp	r3, #1
 800201c:	d12f      	bne.n	800207e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2202      	movs	r2, #2
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fa4a 	bl	80024cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203c:	223f      	movs	r2, #63	@ 0x3f
 800203e:	409a      	lsls	r2, r3
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0216 	orr.w	r2, r2, #22
 8002052:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0208 	orr.w	r2, r2, #8
 800206a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	e005      	b.n	800208a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002086:	2302      	movs	r3, #2
 8002088:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800208a:	7dfb      	ldrb	r3, [r7, #23]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020a2:	f7ff fddf 	bl	8001c64 <HAL_GetTick>
 80020a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d008      	beq.n	80020c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2280      	movs	r2, #128	@ 0x80
 80020b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e052      	b.n	800216c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0216 	bic.w	r2, r2, #22
 80020d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <HAL_DMA_Abort+0x62>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0208 	bic.w	r2, r2, #8
 8002104:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0201 	bic.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002116:	e013      	b.n	8002140 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002118:	f7ff fda4 	bl	8001c64 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b05      	cmp	r3, #5
 8002124:	d90c      	bls.n	8002140 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2220      	movs	r2, #32
 800212a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2203      	movs	r2, #3
 8002130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e015      	b.n	800216c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1e4      	bne.n	8002118 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002152:	223f      	movs	r2, #63	@ 0x3f
 8002154:	409a      	lsls	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d004      	beq.n	8002192 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2280      	movs	r2, #128	@ 0x80
 800218c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e00c      	b.n	80021ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2205      	movs	r2, #5
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002400 <HAL_DMA_IRQHandler+0x248>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a8e      	ldr	r2, [pc, #568]	@ (8002404 <HAL_DMA_IRQHandler+0x24c>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	0a9b      	lsrs	r3, r3, #10
 80021d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e2:	2208      	movs	r2, #8
 80021e4:	409a      	lsls	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d01a      	beq.n	8002224 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0204 	bic.w	r2, r2, #4
 800220a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002210:	2208      	movs	r2, #8
 8002212:	409a      	lsls	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221c:	f043 0201 	orr.w	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002228:	2201      	movs	r2, #1
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d012      	beq.n	800225a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002246:	2201      	movs	r2, #1
 8002248:	409a      	lsls	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002252:	f043 0202 	orr.w	r2, r3, #2
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225e:	2204      	movs	r2, #4
 8002260:	409a      	lsls	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4013      	ands	r3, r2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d012      	beq.n	8002290 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00b      	beq.n	8002290 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227c:	2204      	movs	r2, #4
 800227e:	409a      	lsls	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002288:	f043 0204 	orr.w	r2, r3, #4
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002294:	2210      	movs	r2, #16
 8002296:	409a      	lsls	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d043      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d03c      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b2:	2210      	movs	r2, #16
 80022b4:	409a      	lsls	r2, r3
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d018      	beq.n	80022fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d108      	bne.n	80022e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d024      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4798      	blx	r3
 80022e6:	e01f      	b.n	8002328 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01b      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
 80022f8:	e016      	b.n	8002328 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d107      	bne.n	8002318 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0208 	bic.w	r2, r2, #8
 8002316:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	2220      	movs	r2, #32
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 808f 	beq.w	8002458 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 8087 	beq.w	8002458 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234e:	2220      	movs	r2, #32
 8002350:	409a      	lsls	r2, r3
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b05      	cmp	r3, #5
 8002360:	d136      	bne.n	80023d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0216 	bic.w	r2, r2, #22
 8002370:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695a      	ldr	r2, [r3, #20]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002380:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	d103      	bne.n	8002392 <HAL_DMA_IRQHandler+0x1da>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0208 	bic.w	r2, r2, #8
 80023a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a6:	223f      	movs	r2, #63	@ 0x3f
 80023a8:	409a      	lsls	r2, r3
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d07e      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	4798      	blx	r3
        }
        return;
 80023ce:	e079      	b.n	80024c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d01d      	beq.n	800241a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10d      	bne.n	8002408 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d031      	beq.n	8002458 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	4798      	blx	r3
 80023fc:	e02c      	b.n	8002458 <HAL_DMA_IRQHandler+0x2a0>
 80023fe:	bf00      	nop
 8002400:	20000004 	.word	0x20000004
 8002404:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240c:	2b00      	cmp	r3, #0
 800240e:	d023      	beq.n	8002458 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
 8002418:	e01e      	b.n	8002458 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10f      	bne.n	8002448 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0210 	bic.w	r2, r2, #16
 8002436:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245c:	2b00      	cmp	r3, #0
 800245e:	d032      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d022      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2205      	movs	r2, #5
 8002470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	3301      	adds	r3, #1
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	429a      	cmp	r2, r3
 800248e:	d307      	bcc.n	80024a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f2      	bne.n	8002484 <HAL_DMA_IRQHandler+0x2cc>
 800249e:	e000      	b.n	80024a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4798      	blx	r3
 80024c2:	e000      	b.n	80024c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024c4:	bf00      	nop
    }
  }
}
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b40      	cmp	r3, #64	@ 0x40
 80024f8:	d108      	bne.n	800250c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800250a:	e007      	b.n	800251c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	60da      	str	r2, [r3, #12]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	3b10      	subs	r3, #16
 8002538:	4a14      	ldr	r2, [pc, #80]	@ (800258c <DMA_CalcBaseAndBitshift+0x64>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	091b      	lsrs	r3, r3, #4
 8002540:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002542:	4a13      	ldr	r2, [pc, #76]	@ (8002590 <DMA_CalcBaseAndBitshift+0x68>)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4413      	add	r3, r2
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d909      	bls.n	800256a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800255e:	f023 0303 	bic.w	r3, r3, #3
 8002562:	1d1a      	adds	r2, r3, #4
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	659a      	str	r2, [r3, #88]	@ 0x58
 8002568:	e007      	b.n	800257a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002572:	f023 0303 	bic.w	r3, r3, #3
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	aaaaaaab 	.word	0xaaaaaaab
 8002590:	08012140 	.word	0x08012140

08002594 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11f      	bne.n	80025ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d856      	bhi.n	8002662 <DMA_CheckFifoParam+0xce>
 80025b4:	a201      	add	r2, pc, #4	@ (adr r2, 80025bc <DMA_CheckFifoParam+0x28>)
 80025b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ba:	bf00      	nop
 80025bc:	080025cd 	.word	0x080025cd
 80025c0:	080025df 	.word	0x080025df
 80025c4:	080025cd 	.word	0x080025cd
 80025c8:	08002663 	.word	0x08002663
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d046      	beq.n	8002666 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025dc:	e043      	b.n	8002666 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025e6:	d140      	bne.n	800266a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ec:	e03d      	b.n	800266a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025f6:	d121      	bne.n	800263c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d837      	bhi.n	800266e <DMA_CheckFifoParam+0xda>
 80025fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002604 <DMA_CheckFifoParam+0x70>)
 8002600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002604:	08002615 	.word	0x08002615
 8002608:	0800261b 	.word	0x0800261b
 800260c:	08002615 	.word	0x08002615
 8002610:	0800262d 	.word	0x0800262d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
      break;
 8002618:	e030      	b.n	800267c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d025      	beq.n	8002672 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800262a:	e022      	b.n	8002672 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002630:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002634:	d11f      	bne.n	8002676 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800263a:	e01c      	b.n	8002676 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d903      	bls.n	800264a <DMA_CheckFifoParam+0xb6>
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d003      	beq.n	8002650 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002648:	e018      	b.n	800267c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	73fb      	strb	r3, [r7, #15]
      break;
 800264e:	e015      	b.n	800267c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002654:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00e      	beq.n	800267a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
      break;
 8002660:	e00b      	b.n	800267a <DMA_CheckFifoParam+0xe6>
      break;
 8002662:	bf00      	nop
 8002664:	e00a      	b.n	800267c <DMA_CheckFifoParam+0xe8>
      break;
 8002666:	bf00      	nop
 8002668:	e008      	b.n	800267c <DMA_CheckFifoParam+0xe8>
      break;
 800266a:	bf00      	nop
 800266c:	e006      	b.n	800267c <DMA_CheckFifoParam+0xe8>
      break;
 800266e:	bf00      	nop
 8002670:	e004      	b.n	800267c <DMA_CheckFifoParam+0xe8>
      break;
 8002672:	bf00      	nop
 8002674:	e002      	b.n	800267c <DMA_CheckFifoParam+0xe8>
      break;   
 8002676:	bf00      	nop
 8002678:	e000      	b.n	800267c <DMA_CheckFifoParam+0xe8>
      break;
 800267a:	bf00      	nop
    }
  } 
  
  return status; 
 800267c:	7bfb      	ldrb	r3, [r7, #15]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop

0800268c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800268c:	b480      	push	{r7}
 800268e:	b089      	sub	sp, #36	@ 0x24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e16b      	b.n	8002980 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026a8:	2201      	movs	r2, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	f040 815a 	bne.w	800297a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d005      	beq.n	80026de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d130      	bne.n	8002740 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	2203      	movs	r2, #3
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002714:	2201      	movs	r2, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	f003 0201 	and.w	r2, r3, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b03      	cmp	r3, #3
 800274a:	d017      	beq.n	800277c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2203      	movs	r2, #3
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d123      	bne.n	80027d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	08da      	lsrs	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3208      	adds	r2, #8
 8002790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	220f      	movs	r2, #15
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	08da      	lsrs	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3208      	adds	r2, #8
 80027ca:	69b9      	ldr	r1, [r7, #24]
 80027cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	2203      	movs	r2, #3
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0203 	and.w	r2, r3, #3
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80b4 	beq.w	800297a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b60      	ldr	r3, [pc, #384]	@ (8002998 <HAL_GPIO_Init+0x30c>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281a:	4a5f      	ldr	r2, [pc, #380]	@ (8002998 <HAL_GPIO_Init+0x30c>)
 800281c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002820:	6453      	str	r3, [r2, #68]	@ 0x44
 8002822:	4b5d      	ldr	r3, [pc, #372]	@ (8002998 <HAL_GPIO_Init+0x30c>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800282e:	4a5b      	ldr	r2, [pc, #364]	@ (800299c <HAL_GPIO_Init+0x310>)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	3302      	adds	r3, #2
 8002836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	220f      	movs	r2, #15
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a52      	ldr	r2, [pc, #328]	@ (80029a0 <HAL_GPIO_Init+0x314>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d02b      	beq.n	80028b2 <HAL_GPIO_Init+0x226>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a51      	ldr	r2, [pc, #324]	@ (80029a4 <HAL_GPIO_Init+0x318>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d025      	beq.n	80028ae <HAL_GPIO_Init+0x222>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a50      	ldr	r2, [pc, #320]	@ (80029a8 <HAL_GPIO_Init+0x31c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d01f      	beq.n	80028aa <HAL_GPIO_Init+0x21e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4f      	ldr	r2, [pc, #316]	@ (80029ac <HAL_GPIO_Init+0x320>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d019      	beq.n	80028a6 <HAL_GPIO_Init+0x21a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4e      	ldr	r2, [pc, #312]	@ (80029b0 <HAL_GPIO_Init+0x324>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <HAL_GPIO_Init+0x216>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4d      	ldr	r2, [pc, #308]	@ (80029b4 <HAL_GPIO_Init+0x328>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00d      	beq.n	800289e <HAL_GPIO_Init+0x212>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4c      	ldr	r2, [pc, #304]	@ (80029b8 <HAL_GPIO_Init+0x32c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <HAL_GPIO_Init+0x20e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4b      	ldr	r2, [pc, #300]	@ (80029bc <HAL_GPIO_Init+0x330>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <HAL_GPIO_Init+0x20a>
 8002892:	2307      	movs	r3, #7
 8002894:	e00e      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 8002896:	2308      	movs	r3, #8
 8002898:	e00c      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 800289a:	2306      	movs	r3, #6
 800289c:	e00a      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 800289e:	2305      	movs	r3, #5
 80028a0:	e008      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 80028a2:	2304      	movs	r3, #4
 80028a4:	e006      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 80028a6:	2303      	movs	r3, #3
 80028a8:	e004      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e002      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 80028b2:	2300      	movs	r3, #0
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	f002 0203 	and.w	r2, r2, #3
 80028ba:	0092      	lsls	r2, r2, #2
 80028bc:	4093      	lsls	r3, r2
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c4:	4935      	ldr	r1, [pc, #212]	@ (800299c <HAL_GPIO_Init+0x310>)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	3302      	adds	r3, #2
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d2:	4b3b      	ldr	r3, [pc, #236]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028f6:	4a32      	ldr	r2, [pc, #200]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028fc:	4b30      	ldr	r3, [pc, #192]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002920:	4a27      	ldr	r2, [pc, #156]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002926:	4b26      	ldr	r3, [pc, #152]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294a:	4a1d      	ldr	r2, [pc, #116]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002950:	4b1b      	ldr	r3, [pc, #108]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002974:	4a12      	ldr	r2, [pc, #72]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3301      	adds	r3, #1
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b0f      	cmp	r3, #15
 8002984:	f67f ae90 	bls.w	80026a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3724      	adds	r7, #36	@ 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	40013800 	.word	0x40013800
 80029a0:	40020000 	.word	0x40020000
 80029a4:	40020400 	.word	0x40020400
 80029a8:	40020800 	.word	0x40020800
 80029ac:	40020c00 	.word	0x40020c00
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40021400 	.word	0x40021400
 80029b8:	40021800 	.word	0x40021800
 80029bc:	40021c00 	.word	0x40021c00
 80029c0:	40013c00 	.word	0x40013c00

080029c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	807b      	strh	r3, [r7, #2]
 80029d0:	4613      	mov	r3, r2
 80029d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d4:	787b      	ldrb	r3, [r7, #1]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029e0:	e003      	b.n	80029ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029e2:	887b      	ldrh	r3, [r7, #2]
 80029e4:	041a      	lsls	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	619a      	str	r2, [r3, #24]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e12b      	b.n	8002c62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fe fb72 	bl	8001108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2224      	movs	r2, #36	@ 0x24
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0201 	bic.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a5c:	f001 fd7a 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 8002a60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4a81      	ldr	r2, [pc, #516]	@ (8002c6c <HAL_I2C_Init+0x274>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d807      	bhi.n	8002a7c <HAL_I2C_Init+0x84>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4a80      	ldr	r2, [pc, #512]	@ (8002c70 <HAL_I2C_Init+0x278>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	bf94      	ite	ls
 8002a74:	2301      	movls	r3, #1
 8002a76:	2300      	movhi	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e006      	b.n	8002a8a <HAL_I2C_Init+0x92>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4a7d      	ldr	r2, [pc, #500]	@ (8002c74 <HAL_I2C_Init+0x27c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	bf94      	ite	ls
 8002a84:	2301      	movls	r3, #1
 8002a86:	2300      	movhi	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e0e7      	b.n	8002c62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4a78      	ldr	r2, [pc, #480]	@ (8002c78 <HAL_I2C_Init+0x280>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	0c9b      	lsrs	r3, r3, #18
 8002a9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c6c <HAL_I2C_Init+0x274>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d802      	bhi.n	8002acc <HAL_I2C_Init+0xd4>
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	e009      	b.n	8002ae0 <HAL_I2C_Init+0xe8>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	4a69      	ldr	r2, [pc, #420]	@ (8002c7c <HAL_I2C_Init+0x284>)
 8002ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8002adc:	099b      	lsrs	r3, r3, #6
 8002ade:	3301      	adds	r3, #1
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002af2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	495c      	ldr	r1, [pc, #368]	@ (8002c6c <HAL_I2C_Init+0x274>)
 8002afc:	428b      	cmp	r3, r1
 8002afe:	d819      	bhi.n	8002b34 <HAL_I2C_Init+0x13c>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1e59      	subs	r1, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b0e:	1c59      	adds	r1, r3, #1
 8002b10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b14:	400b      	ands	r3, r1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_I2C_Init+0x138>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1e59      	subs	r1, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b28:	3301      	adds	r3, #1
 8002b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b2e:	e051      	b.n	8002bd4 <HAL_I2C_Init+0x1dc>
 8002b30:	2304      	movs	r3, #4
 8002b32:	e04f      	b.n	8002bd4 <HAL_I2C_Init+0x1dc>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d111      	bne.n	8002b60 <HAL_I2C_Init+0x168>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1e58      	subs	r0, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	440b      	add	r3, r1
 8002b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	e012      	b.n	8002b86 <HAL_I2C_Init+0x18e>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1e58      	subs	r0, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	0099      	lsls	r1, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Init+0x196>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e022      	b.n	8002bd4 <HAL_I2C_Init+0x1dc>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10e      	bne.n	8002bb4 <HAL_I2C_Init+0x1bc>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1e58      	subs	r0, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6859      	ldr	r1, [r3, #4]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	440b      	add	r3, r1
 8002ba4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bb2:	e00f      	b.n	8002bd4 <HAL_I2C_Init+0x1dc>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1e58      	subs	r0, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	0099      	lsls	r1, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	6809      	ldr	r1, [r1, #0]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69da      	ldr	r2, [r3, #28]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6911      	ldr	r1, [r2, #16]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68d2      	ldr	r2, [r2, #12]
 8002c0e:	4311      	orrs	r1, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	430b      	orrs	r3, r1
 8002c16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	000186a0 	.word	0x000186a0
 8002c70:	001e847f 	.word	0x001e847f
 8002c74:	003d08ff 	.word	0x003d08ff
 8002c78:	431bde83 	.word	0x431bde83
 8002c7c:	10624dd3 	.word	0x10624dd3

08002c80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	817b      	strh	r3, [r7, #10]
 8002c90:	4613      	mov	r3, r2
 8002c92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c94:	f7fe ffe6 	bl	8001c64 <HAL_GetTick>
 8002c98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	f040 80e0 	bne.w	8002e68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	2319      	movs	r3, #25
 8002cae:	2201      	movs	r2, #1
 8002cb0:	4970      	ldr	r1, [pc, #448]	@ (8002e74 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f964 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e0d3      	b.n	8002e6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_I2C_Master_Transmit+0x50>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e0cc      	b.n	8002e6a <HAL_I2C_Master_Transmit+0x1ea>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d007      	beq.n	8002cf6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0201 	orr.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2221      	movs	r2, #33	@ 0x21
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2210      	movs	r2, #16
 8002d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	893a      	ldrh	r2, [r7, #8]
 8002d26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4a50      	ldr	r2, [pc, #320]	@ (8002e78 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d38:	8979      	ldrh	r1, [r7, #10]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	6a3a      	ldr	r2, [r7, #32]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f89c 	bl	8002e7c <I2C_MasterRequestWrite>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e08d      	b.n	8002e6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d64:	e066      	b.n	8002e34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	6a39      	ldr	r1, [r7, #32]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fa22 	bl	80031b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00d      	beq.n	8002d92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d107      	bne.n	8002d8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e06b      	b.n	8002e6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	781a      	ldrb	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d11b      	bne.n	8002e08 <HAL_I2C_Master_Transmit+0x188>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d017      	beq.n	8002e08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	781a      	ldrb	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	6a39      	ldr	r1, [r7, #32]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fa19 	bl	8003244 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00d      	beq.n	8002e34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d107      	bne.n	8002e30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e01a      	b.n	8002e6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d194      	bne.n	8002d66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	e000      	b.n	8002e6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e68:	2302      	movs	r3, #2
  }
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	00100002 	.word	0x00100002
 8002e78:	ffff0000 	.word	0xffff0000

08002e7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d006      	beq.n	8002ea6 <I2C_MasterRequestWrite+0x2a>
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d003      	beq.n	8002ea6 <I2C_MasterRequestWrite+0x2a>
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ea4:	d108      	bne.n	8002eb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	e00b      	b.n	8002ed0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebc:	2b12      	cmp	r3, #18
 8002ebe:	d107      	bne.n	8002ed0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ece:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f84f 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00d      	beq.n	8002f04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ef6:	d103      	bne.n	8002f00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002efe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e035      	b.n	8002f70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f0c:	d108      	bne.n	8002f20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f0e:	897b      	ldrh	r3, [r7, #10]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f1c:	611a      	str	r2, [r3, #16]
 8002f1e:	e01b      	b.n	8002f58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f20:	897b      	ldrh	r3, [r7, #10]
 8002f22:	11db      	asrs	r3, r3, #7
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f003 0306 	and.w	r3, r3, #6
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f063 030f 	orn	r3, r3, #15
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	490e      	ldr	r1, [pc, #56]	@ (8002f78 <I2C_MasterRequestWrite+0xfc>)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f898 	bl	8003074 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e010      	b.n	8002f70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f4e:	897b      	ldrh	r3, [r7, #10]
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	4907      	ldr	r1, [pc, #28]	@ (8002f7c <I2C_MasterRequestWrite+0x100>)
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f888 	bl	8003074 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	00010008 	.word	0x00010008
 8002f7c:	00010002 	.word	0x00010002

08002f80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f90:	e048      	b.n	8003024 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d044      	beq.n	8003024 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9a:	f7fe fe63 	bl	8001c64 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d302      	bcc.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d139      	bne.n	8003024 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	0c1b      	lsrs	r3, r3, #16
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d10d      	bne.n	8002fd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	43da      	mvns	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	e00c      	b.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	43da      	mvns	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d116      	bne.n	8003024 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003010:	f043 0220 	orr.w	r2, r3, #32
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e023      	b.n	800306c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	0c1b      	lsrs	r3, r3, #16
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d10d      	bne.n	800304a <I2C_WaitOnFlagUntilTimeout+0xca>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	43da      	mvns	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4013      	ands	r3, r2
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	e00c      	b.n	8003064 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	43da      	mvns	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	4013      	ands	r3, r2
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	429a      	cmp	r2, r3
 8003068:	d093      	beq.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003082:	e071      	b.n	8003168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800308e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003092:	d123      	bne.n	80030dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	f043 0204 	orr.w	r2, r3, #4
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e067      	b.n	80031ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e2:	d041      	beq.n	8003168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e4:	f7fe fdbe 	bl	8001c64 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d302      	bcc.n	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d136      	bne.n	8003168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	0c1b      	lsrs	r3, r3, #16
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d10c      	bne.n	800311e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	43da      	mvns	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4013      	ands	r3, r2
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	bf14      	ite	ne
 8003116:	2301      	movne	r3, #1
 8003118:	2300      	moveq	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	e00b      	b.n	8003136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	43da      	mvns	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4013      	ands	r3, r2
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d016      	beq.n	8003168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	f043 0220 	orr.w	r2, r3, #32
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e021      	b.n	80031ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	0c1b      	lsrs	r3, r3, #16
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b01      	cmp	r3, #1
 8003170:	d10c      	bne.n	800318c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	43da      	mvns	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	4013      	ands	r3, r2
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf14      	ite	ne
 8003184:	2301      	movne	r3, #1
 8003186:	2300      	moveq	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	e00b      	b.n	80031a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	43da      	mvns	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4013      	ands	r3, r2
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	bf14      	ite	ne
 800319e:	2301      	movne	r3, #1
 80031a0:	2300      	moveq	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f47f af6d 	bne.w	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031c0:	e034      	b.n	800322c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f886 	bl	80032d4 <I2C_IsAcknowledgeFailed>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e034      	b.n	800323c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d028      	beq.n	800322c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031da:	f7fe fd43 	bl	8001c64 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d302      	bcc.n	80031f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d11d      	bne.n	800322c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fa:	2b80      	cmp	r3, #128	@ 0x80
 80031fc:	d016      	beq.n	800322c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e007      	b.n	800323c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003236:	2b80      	cmp	r3, #128	@ 0x80
 8003238:	d1c3      	bne.n	80031c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003250:	e034      	b.n	80032bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f83e 	bl	80032d4 <I2C_IsAcknowledgeFailed>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e034      	b.n	80032cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d028      	beq.n	80032bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326a:	f7fe fcfb 	bl	8001c64 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	429a      	cmp	r2, r3
 8003278:	d302      	bcc.n	8003280 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d11d      	bne.n	80032bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b04      	cmp	r3, #4
 800328c:	d016      	beq.n	80032bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	f043 0220 	orr.w	r2, r3, #32
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e007      	b.n	80032cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d1c3      	bne.n	8003252 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ea:	d11b      	bne.n	8003324 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003310:	f043 0204 	orr.w	r2, r3, #4
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
	...

08003334 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e128      	b.n	8003598 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a90      	ldr	r2, [pc, #576]	@ (80035a0 <HAL_I2S_Init+0x26c>)
 800335e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7fd ff4f 	bl	8001204 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2202      	movs	r2, #2
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800337c:	f023 030f 	bic.w	r3, r3, #15
 8003380:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2202      	movs	r2, #2
 8003388:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d060      	beq.n	8003454 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800339a:	2310      	movs	r3, #16
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	e001      	b.n	80033a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033a0:	2320      	movs	r3, #32
 80033a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d802      	bhi.n	80033b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033b2:	2001      	movs	r0, #1
 80033b4:	f001 fa0a 	bl	80047cc <HAL_RCCEx_GetPeriphCLKFreq>
 80033b8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033c2:	d125      	bne.n	8003410 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d010      	beq.n	80033ee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	461a      	mov	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	3305      	adds	r3, #5
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	e01f      	b.n	800342e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	461a      	mov	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	fbb2 f3f3 	udiv	r3, r2, r3
 800340a:	3305      	adds	r3, #5
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	e00e      	b.n	800342e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	fbb2 f2f3 	udiv	r2, r2, r3
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	461a      	mov	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	3305      	adds	r3, #5
 800342c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4a5c      	ldr	r2, [pc, #368]	@ (80035a4 <HAL_I2S_Init+0x270>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	08db      	lsrs	r3, r3, #3
 8003438:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	e003      	b.n	800345c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003454:	2302      	movs	r3, #2
 8003456:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d902      	bls.n	8003468 <HAL_I2S_Init+0x134>
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	2bff      	cmp	r3, #255	@ 0xff
 8003466:	d907      	bls.n	8003478 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346c:	f043 0210 	orr.w	r2, r3, #16
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e08f      	b.n	8003598 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	ea42 0103 	orr.w	r1, r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	430a      	orrs	r2, r1
 800348a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003496:	f023 030f 	bic.w	r3, r3, #15
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6851      	ldr	r1, [r2, #4]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6892      	ldr	r2, [r2, #8]
 80034a2:	4311      	orrs	r1, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	68d2      	ldr	r2, [r2, #12]
 80034a8:	4311      	orrs	r1, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6992      	ldr	r2, [r2, #24]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034ba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d161      	bne.n	8003588 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a38      	ldr	r2, [pc, #224]	@ (80035a8 <HAL_I2S_Init+0x274>)
 80034c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a37      	ldr	r2, [pc, #220]	@ (80035ac <HAL_I2S_Init+0x278>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d101      	bne.n	80034d8 <HAL_I2S_Init+0x1a4>
 80034d4:	4b36      	ldr	r3, [pc, #216]	@ (80035b0 <HAL_I2S_Init+0x27c>)
 80034d6:	e001      	b.n	80034dc <HAL_I2S_Init+0x1a8>
 80034d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	4932      	ldr	r1, [pc, #200]	@ (80035ac <HAL_I2S_Init+0x278>)
 80034e4:	428a      	cmp	r2, r1
 80034e6:	d101      	bne.n	80034ec <HAL_I2S_Init+0x1b8>
 80034e8:	4a31      	ldr	r2, [pc, #196]	@ (80035b0 <HAL_I2S_Init+0x27c>)
 80034ea:	e001      	b.n	80034f0 <HAL_I2S_Init+0x1bc>
 80034ec:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80034f0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80034f4:	f023 030f 	bic.w	r3, r3, #15
 80034f8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a2b      	ldr	r2, [pc, #172]	@ (80035ac <HAL_I2S_Init+0x278>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d101      	bne.n	8003508 <HAL_I2S_Init+0x1d4>
 8003504:	4b2a      	ldr	r3, [pc, #168]	@ (80035b0 <HAL_I2S_Init+0x27c>)
 8003506:	e001      	b.n	800350c <HAL_I2S_Init+0x1d8>
 8003508:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800350c:	2202      	movs	r2, #2
 800350e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a25      	ldr	r2, [pc, #148]	@ (80035ac <HAL_I2S_Init+0x278>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <HAL_I2S_Init+0x1ea>
 800351a:	4b25      	ldr	r3, [pc, #148]	@ (80035b0 <HAL_I2S_Init+0x27c>)
 800351c:	e001      	b.n	8003522 <HAL_I2S_Init+0x1ee>
 800351e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800352e:	d003      	beq.n	8003538 <HAL_I2S_Init+0x204>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d103      	bne.n	8003540 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003538:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	e001      	b.n	8003544 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003540:	2300      	movs	r3, #0
 8003542:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800354e:	4313      	orrs	r3, r2
 8003550:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003558:	4313      	orrs	r3, r2
 800355a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003562:	4313      	orrs	r3, r2
 8003564:	b29a      	uxth	r2, r3
 8003566:	897b      	ldrh	r3, [r7, #10]
 8003568:	4313      	orrs	r3, r2
 800356a:	b29b      	uxth	r3, r3
 800356c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003570:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a0d      	ldr	r2, [pc, #52]	@ (80035ac <HAL_I2S_Init+0x278>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d101      	bne.n	8003580 <HAL_I2S_Init+0x24c>
 800357c:	4b0c      	ldr	r3, [pc, #48]	@ (80035b0 <HAL_I2S_Init+0x27c>)
 800357e:	e001      	b.n	8003584 <HAL_I2S_Init+0x250>
 8003580:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003584:	897a      	ldrh	r2, [r7, #10]
 8003586:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3720      	adds	r7, #32
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	080036ab 	.word	0x080036ab
 80035a4:	cccccccd 	.word	0xcccccccd
 80035a8:	080037c1 	.word	0x080037c1
 80035ac:	40003800 	.word	0x40003800
 80035b0:	40003400 	.word	0x40003400

080035b4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fc:	881a      	ldrh	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	1c9a      	adds	r2, r3, #2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10e      	bne.n	8003644 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003634:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff ffb8 	bl	80035b4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	b292      	uxth	r2, r2
 8003660:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003666:	1c9a      	adds	r2, r3, #2
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10e      	bne.n	80036a2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003692:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff93 	bl	80035c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b086      	sub	sp, #24
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d13a      	bne.n	800373c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d109      	bne.n	80036e4 <I2S_IRQHandler+0x3a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036da:	2b40      	cmp	r3, #64	@ 0x40
 80036dc:	d102      	bne.n	80036e4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff ffb4 	bl	800364c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ea:	2b40      	cmp	r3, #64	@ 0x40
 80036ec:	d126      	bne.n	800373c <I2S_IRQHandler+0x92>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d11f      	bne.n	800373c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800370a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800370c:	2300      	movs	r3, #0
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372e:	f043 0202 	orr.w	r2, r3, #2
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff ff50 	bl	80035dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b03      	cmp	r3, #3
 8003746:	d136      	bne.n	80037b6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b02      	cmp	r3, #2
 8003750:	d109      	bne.n	8003766 <I2S_IRQHandler+0xbc>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375c:	2b80      	cmp	r3, #128	@ 0x80
 800375e:	d102      	bne.n	8003766 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ff45 	bl	80035f0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b08      	cmp	r3, #8
 800376e:	d122      	bne.n	80037b6 <I2S_IRQHandler+0x10c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b20      	cmp	r3, #32
 800377c:	d11b      	bne.n	80037b6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800378c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a8:	f043 0204 	orr.w	r2, r3, #4
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff ff13 	bl	80035dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037b6:	bf00      	nop
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a92      	ldr	r2, [pc, #584]	@ (8003a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d101      	bne.n	80037de <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037da:	4b92      	ldr	r3, [pc, #584]	@ (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037dc:	e001      	b.n	80037e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a8b      	ldr	r2, [pc, #556]	@ (8003a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d101      	bne.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80037f8:	4b8a      	ldr	r3, [pc, #552]	@ (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037fa:	e001      	b.n	8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80037fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800380c:	d004      	beq.n	8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	f040 8099 	bne.w	800394a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b02      	cmp	r3, #2
 8003820:	d107      	bne.n	8003832 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f925 	bl	8003a7c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b01      	cmp	r3, #1
 800383a:	d107      	bne.n	800384c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f9c8 	bl	8003bdc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003852:	2b40      	cmp	r3, #64	@ 0x40
 8003854:	d13a      	bne.n	80038cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b00      	cmp	r3, #0
 800385e:	d035      	beq.n	80038cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a6e      	ldr	r2, [pc, #440]	@ (8003a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d101      	bne.n	800386e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800386a:	4b6e      	ldr	r3, [pc, #440]	@ (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800386c:	e001      	b.n	8003872 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800386e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4969      	ldr	r1, [pc, #420]	@ (8003a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800387a:	428b      	cmp	r3, r1
 800387c:	d101      	bne.n	8003882 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800387e:	4b69      	ldr	r3, [pc, #420]	@ (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003880:	e001      	b.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003882:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003886:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800388a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800389a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038be:	f043 0202 	orr.w	r2, r3, #2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff fe88 	bl	80035dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	f040 80c3 	bne.w	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80bd 	beq.w	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80038f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a49      	ldr	r2, [pc, #292]	@ (8003a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d101      	bne.n	8003902 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80038fe:	4b49      	ldr	r3, [pc, #292]	@ (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003900:	e001      	b.n	8003906 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003902:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4944      	ldr	r1, [pc, #272]	@ (8003a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800390e:	428b      	cmp	r3, r1
 8003910:	d101      	bne.n	8003916 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003912:	4b44      	ldr	r3, [pc, #272]	@ (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003914:	e001      	b.n	800391a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003916:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800391a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800391e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003920:	2300      	movs	r3, #0
 8003922:	60bb      	str	r3, [r7, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393a:	f043 0204 	orr.w	r2, r3, #4
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff fe4a 	bl	80035dc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003948:	e089      	b.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b02      	cmp	r3, #2
 8003952:	d107      	bne.n	8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f8be 	bl	8003ae0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b01      	cmp	r3, #1
 800396c:	d107      	bne.n	800397e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f8fd 	bl	8003b78 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003984:	2b40      	cmp	r3, #64	@ 0x40
 8003986:	d12f      	bne.n	80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d02a      	beq.n	80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039a0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d101      	bne.n	80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039ae:	e001      	b.n	80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4919      	ldr	r1, [pc, #100]	@ (8003a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039bc:	428b      	cmp	r3, r1
 80039be:	d101      	bne.n	80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039c0:	4b18      	ldr	r3, [pc, #96]	@ (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039c2:	e001      	b.n	80039c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80039cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	f043 0202 	orr.w	r2, r3, #2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff fdfa 	bl	80035dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d136      	bne.n	8003a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d031      	beq.n	8003a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a07      	ldr	r2, [pc, #28]	@ (8003a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d101      	bne.n	8003a0a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a06:	4b07      	ldr	r3, [pc, #28]	@ (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a08:	e001      	b.n	8003a0e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4902      	ldr	r1, [pc, #8]	@ (8003a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a16:	428b      	cmp	r3, r1
 8003a18:	d106      	bne.n	8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003a1a:	4b02      	ldr	r3, [pc, #8]	@ (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a1c:	e006      	b.n	8003a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003a1e:	bf00      	nop
 8003a20:	40003800 	.word	0x40003800
 8003a24:	40003400 	.word	0x40003400
 8003a28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a30:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a40:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4e:	f043 0204 	orr.w	r2, r3, #4
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff fdc0 	bl	80035dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a5c:	e000      	b.n	8003a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a5e:	bf00      	nop
}
 8003a60:	bf00      	nop
 8003a62:	3720      	adds	r7, #32
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	1c99      	adds	r1, r3, #2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6251      	str	r1, [r2, #36]	@ 0x24
 8003a8e:	881a      	ldrh	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d113      	bne.n	8003ad6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003abc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d106      	bne.n	8003ad6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ffc9 	bl	8003a68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	1c99      	adds	r1, r3, #2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6251      	str	r1, [r2, #36]	@ 0x24
 8003af2:	8819      	ldrh	r1, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b70 <I2SEx_TxISR_I2SExt+0x90>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d101      	bne.n	8003b02 <I2SEx_TxISR_I2SExt+0x22>
 8003afe:	4b1d      	ldr	r3, [pc, #116]	@ (8003b74 <I2SEx_TxISR_I2SExt+0x94>)
 8003b00:	e001      	b.n	8003b06 <I2SEx_TxISR_I2SExt+0x26>
 8003b02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b06:	460a      	mov	r2, r1
 8003b08:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d121      	bne.n	8003b66 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a12      	ldr	r2, [pc, #72]	@ (8003b70 <I2SEx_TxISR_I2SExt+0x90>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d101      	bne.n	8003b30 <I2SEx_TxISR_I2SExt+0x50>
 8003b2c:	4b11      	ldr	r3, [pc, #68]	@ (8003b74 <I2SEx_TxISR_I2SExt+0x94>)
 8003b2e:	e001      	b.n	8003b34 <I2SEx_TxISR_I2SExt+0x54>
 8003b30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	490d      	ldr	r1, [pc, #52]	@ (8003b70 <I2SEx_TxISR_I2SExt+0x90>)
 8003b3c:	428b      	cmp	r3, r1
 8003b3e:	d101      	bne.n	8003b44 <I2SEx_TxISR_I2SExt+0x64>
 8003b40:	4b0c      	ldr	r3, [pc, #48]	@ (8003b74 <I2SEx_TxISR_I2SExt+0x94>)
 8003b42:	e001      	b.n	8003b48 <I2SEx_TxISR_I2SExt+0x68>
 8003b44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b48:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b4c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff ff81 	bl	8003a68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40003800 	.word	0x40003800
 8003b74:	40003400 	.word	0x40003400

08003b78 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68d8      	ldr	r0, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8a:	1c99      	adds	r1, r3, #2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003b90:	b282      	uxth	r2, r0
 8003b92:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d113      	bne.n	8003bd4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003bba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff ff4a 	bl	8003a68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a20      	ldr	r2, [pc, #128]	@ (8003c6c <I2SEx_RxISR_I2SExt+0x90>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d101      	bne.n	8003bf2 <I2SEx_RxISR_I2SExt+0x16>
 8003bee:	4b20      	ldr	r3, [pc, #128]	@ (8003c70 <I2SEx_RxISR_I2SExt+0x94>)
 8003bf0:	e001      	b.n	8003bf6 <I2SEx_RxISR_I2SExt+0x1a>
 8003bf2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bf6:	68d8      	ldr	r0, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfc:	1c99      	adds	r1, r3, #2
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003c02:	b282      	uxth	r2, r0
 8003c04:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d121      	bne.n	8003c62 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a12      	ldr	r2, [pc, #72]	@ (8003c6c <I2SEx_RxISR_I2SExt+0x90>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d101      	bne.n	8003c2c <I2SEx_RxISR_I2SExt+0x50>
 8003c28:	4b11      	ldr	r3, [pc, #68]	@ (8003c70 <I2SEx_RxISR_I2SExt+0x94>)
 8003c2a:	e001      	b.n	8003c30 <I2SEx_RxISR_I2SExt+0x54>
 8003c2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	490d      	ldr	r1, [pc, #52]	@ (8003c6c <I2SEx_RxISR_I2SExt+0x90>)
 8003c38:	428b      	cmp	r3, r1
 8003c3a:	d101      	bne.n	8003c40 <I2SEx_RxISR_I2SExt+0x64>
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c70 <I2SEx_RxISR_I2SExt+0x94>)
 8003c3e:	e001      	b.n	8003c44 <I2SEx_RxISR_I2SExt+0x68>
 8003c40:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c44:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c48:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff ff03 	bl	8003a68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c62:	bf00      	nop
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40003800 	.word	0x40003800
 8003c70:	40003400 	.word	0x40003400

08003c74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e267      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d075      	beq.n	8003d7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c92:	4b88      	ldr	r3, [pc, #544]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d00c      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c9e:	4b85      	ldr	r3, [pc, #532]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d112      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003caa:	4b82      	ldr	r3, [pc, #520]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb8:	4b7e      	ldr	r3, [pc, #504]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d05b      	beq.n	8003d7c <HAL_RCC_OscConfig+0x108>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d157      	bne.n	8003d7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e242      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd8:	d106      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x74>
 8003cda:	4b76      	ldr	r3, [pc, #472]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a75      	ldr	r2, [pc, #468]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	e01d      	b.n	8003d24 <HAL_RCC_OscConfig+0xb0>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cf0:	d10c      	bne.n	8003d0c <HAL_RCC_OscConfig+0x98>
 8003cf2:	4b70      	ldr	r3, [pc, #448]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a6f      	ldr	r2, [pc, #444]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	4b6d      	ldr	r3, [pc, #436]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a6c      	ldr	r2, [pc, #432]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	e00b      	b.n	8003d24 <HAL_RCC_OscConfig+0xb0>
 8003d0c:	4b69      	ldr	r3, [pc, #420]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a68      	ldr	r2, [pc, #416]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	4b66      	ldr	r3, [pc, #408]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a65      	ldr	r2, [pc, #404]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d013      	beq.n	8003d54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fd ff9a 	bl	8001c64 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d34:	f7fd ff96 	bl	8001c64 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	@ 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e207      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	4b5b      	ldr	r3, [pc, #364]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0xc0>
 8003d52:	e014      	b.n	8003d7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d54:	f7fd ff86 	bl	8001c64 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d5c:	f7fd ff82 	bl	8001c64 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	@ 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e1f3      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6e:	4b51      	ldr	r3, [pc, #324]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0xe8>
 8003d7a:	e000      	b.n	8003d7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d063      	beq.n	8003e52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d96:	4b47      	ldr	r3, [pc, #284]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d11c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da2:	4b44      	ldr	r3, [pc, #272]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d116      	bne.n	8003ddc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dae:	4b41      	ldr	r3, [pc, #260]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x152>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d001      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e1c7      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4937      	ldr	r1, [pc, #220]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dda:	e03a      	b.n	8003e52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d020      	beq.n	8003e26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003de4:	4b34      	ldr	r3, [pc, #208]	@ (8003eb8 <HAL_RCC_OscConfig+0x244>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dea:	f7fd ff3b 	bl	8001c64 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df2:	f7fd ff37 	bl	8001c64 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e1a8      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e04:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e10:	4b28      	ldr	r3, [pc, #160]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4925      	ldr	r1, [pc, #148]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	600b      	str	r3, [r1, #0]
 8003e24:	e015      	b.n	8003e52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e26:	4b24      	ldr	r3, [pc, #144]	@ (8003eb8 <HAL_RCC_OscConfig+0x244>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fd ff1a 	bl	8001c64 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e34:	f7fd ff16 	bl	8001c64 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e187      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e46:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d036      	beq.n	8003ecc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d016      	beq.n	8003e94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e66:	4b15      	ldr	r3, [pc, #84]	@ (8003ebc <HAL_RCC_OscConfig+0x248>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6c:	f7fd fefa 	bl	8001c64 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e74:	f7fd fef6 	bl	8001c64 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e167      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e86:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x200>
 8003e92:	e01b      	b.n	8003ecc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e94:	4b09      	ldr	r3, [pc, #36]	@ (8003ebc <HAL_RCC_OscConfig+0x248>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9a:	f7fd fee3 	bl	8001c64 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea0:	e00e      	b.n	8003ec0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ea2:	f7fd fedf 	bl	8001c64 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d907      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e150      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	42470000 	.word	0x42470000
 8003ebc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec0:	4b88      	ldr	r3, [pc, #544]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1ea      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8097 	beq.w	8004008 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eda:	2300      	movs	r3, #0
 8003edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ede:	4b81      	ldr	r3, [pc, #516]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10f      	bne.n	8003f0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	4b7d      	ldr	r3, [pc, #500]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	4a7c      	ldr	r2, [pc, #496]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003efa:	4b7a      	ldr	r3, [pc, #488]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f06:	2301      	movs	r3, #1
 8003f08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0a:	4b77      	ldr	r3, [pc, #476]	@ (80040e8 <HAL_RCC_OscConfig+0x474>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d118      	bne.n	8003f48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f16:	4b74      	ldr	r3, [pc, #464]	@ (80040e8 <HAL_RCC_OscConfig+0x474>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a73      	ldr	r2, [pc, #460]	@ (80040e8 <HAL_RCC_OscConfig+0x474>)
 8003f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f22:	f7fd fe9f 	bl	8001c64 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2a:	f7fd fe9b 	bl	8001c64 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e10c      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3c:	4b6a      	ldr	r3, [pc, #424]	@ (80040e8 <HAL_RCC_OscConfig+0x474>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f0      	beq.n	8003f2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCC_OscConfig+0x2ea>
 8003f50:	4b64      	ldr	r3, [pc, #400]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f54:	4a63      	ldr	r2, [pc, #396]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f5c:	e01c      	b.n	8003f98 <HAL_RCC_OscConfig+0x324>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b05      	cmp	r3, #5
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x30c>
 8003f66:	4b5f      	ldr	r3, [pc, #380]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6a:	4a5e      	ldr	r2, [pc, #376]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	f043 0304 	orr.w	r3, r3, #4
 8003f70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f72:	4b5c      	ldr	r3, [pc, #368]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f76:	4a5b      	ldr	r2, [pc, #364]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f7e:	e00b      	b.n	8003f98 <HAL_RCC_OscConfig+0x324>
 8003f80:	4b58      	ldr	r3, [pc, #352]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f84:	4a57      	ldr	r2, [pc, #348]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f8c:	4b55      	ldr	r3, [pc, #340]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f90:	4a54      	ldr	r2, [pc, #336]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f92:	f023 0304 	bic.w	r3, r3, #4
 8003f96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d015      	beq.n	8003fcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa0:	f7fd fe60 	bl	8001c64 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa6:	e00a      	b.n	8003fbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa8:	f7fd fe5c 	bl	8001c64 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e0cb      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbe:	4b49      	ldr	r3, [pc, #292]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0ee      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x334>
 8003fca:	e014      	b.n	8003ff6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fcc:	f7fd fe4a 	bl	8001c64 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd2:	e00a      	b.n	8003fea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd4:	f7fd fe46 	bl	8001c64 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e0b5      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fea:	4b3e      	ldr	r3, [pc, #248]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1ee      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d105      	bne.n	8004008 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffc:	4b39      	ldr	r3, [pc, #228]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	4a38      	ldr	r2, [pc, #224]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8004002:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004006:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80a1 	beq.w	8004154 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004012:	4b34      	ldr	r3, [pc, #208]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b08      	cmp	r3, #8
 800401c:	d05c      	beq.n	80040d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d141      	bne.n	80040aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004026:	4b31      	ldr	r3, [pc, #196]	@ (80040ec <HAL_RCC_OscConfig+0x478>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fd fe1a 	bl	8001c64 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004034:	f7fd fe16 	bl	8001c64 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e087      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004046:	4b27      	ldr	r3, [pc, #156]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69da      	ldr	r2, [r3, #28]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	019b      	lsls	r3, r3, #6
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004068:	085b      	lsrs	r3, r3, #1
 800406a:	3b01      	subs	r3, #1
 800406c:	041b      	lsls	r3, r3, #16
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004074:	061b      	lsls	r3, r3, #24
 8004076:	491b      	ldr	r1, [pc, #108]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800407c:	4b1b      	ldr	r3, [pc, #108]	@ (80040ec <HAL_RCC_OscConfig+0x478>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004082:	f7fd fdef 	bl	8001c64 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408a:	f7fd fdeb 	bl	8001c64 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e05c      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409c:	4b11      	ldr	r3, [pc, #68]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x416>
 80040a8:	e054      	b.n	8004154 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040aa:	4b10      	ldr	r3, [pc, #64]	@ (80040ec <HAL_RCC_OscConfig+0x478>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fd fdd8 	bl	8001c64 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fd fdd4 	bl	8001c64 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e045      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ca:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x444>
 80040d6:	e03d      	b.n	8004154 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d107      	bne.n	80040f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e038      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
 80040e4:	40023800 	.word	0x40023800
 80040e8:	40007000 	.word	0x40007000
 80040ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004160 <HAL_RCC_OscConfig+0x4ec>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d028      	beq.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d121      	bne.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004116:	429a      	cmp	r2, r3
 8004118:	d11a      	bne.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004120:	4013      	ands	r3, r2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004126:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004128:	4293      	cmp	r3, r2
 800412a:	d111      	bne.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004136:	085b      	lsrs	r3, r3, #1
 8004138:	3b01      	subs	r3, #1
 800413a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d107      	bne.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40023800 	.word	0x40023800

08004164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0cc      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004178:	4b68      	ldr	r3, [pc, #416]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d90c      	bls.n	80041a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004186:	4b65      	ldr	r3, [pc, #404]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b63      	ldr	r3, [pc, #396]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0b8      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d020      	beq.n	80041ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b8:	4b59      	ldr	r3, [pc, #356]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4a58      	ldr	r2, [pc, #352]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d0:	4b53      	ldr	r3, [pc, #332]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4a52      	ldr	r2, [pc, #328]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041dc:	4b50      	ldr	r3, [pc, #320]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	494d      	ldr	r1, [pc, #308]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d044      	beq.n	8004284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d107      	bne.n	8004212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004202:	4b47      	ldr	r3, [pc, #284]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d119      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e07f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d003      	beq.n	8004222 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800421e:	2b03      	cmp	r3, #3
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004222:	4b3f      	ldr	r3, [pc, #252]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e06f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	4b3b      	ldr	r3, [pc, #236]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e067      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004242:	4b37      	ldr	r3, [pc, #220]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4934      	ldr	r1, [pc, #208]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	4313      	orrs	r3, r2
 8004252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004254:	f7fd fd06 	bl	8001c64 <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	e00a      	b.n	8004272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800425c:	f7fd fd02 	bl	8001c64 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e04f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004272:	4b2b      	ldr	r3, [pc, #172]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 020c 	and.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	429a      	cmp	r2, r3
 8004282:	d1eb      	bne.n	800425c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004284:	4b25      	ldr	r3, [pc, #148]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d20c      	bcs.n	80042ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004292:	4b22      	ldr	r3, [pc, #136]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800429a:	4b20      	ldr	r3, [pc, #128]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e032      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b8:	4b19      	ldr	r3, [pc, #100]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	4916      	ldr	r1, [pc, #88]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d009      	beq.n	80042ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d6:	4b12      	ldr	r3, [pc, #72]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	490e      	ldr	r1, [pc, #56]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042ea:	f000 f821 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80042ee:	4602      	mov	r2, r0
 80042f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	091b      	lsrs	r3, r3, #4
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	490a      	ldr	r1, [pc, #40]	@ (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 80042fc:	5ccb      	ldrb	r3, [r1, r3]
 80042fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004302:	4a09      	ldr	r2, [pc, #36]	@ (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004306:	4b09      	ldr	r3, [pc, #36]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f7fd faa8 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023c00 	.word	0x40023c00
 8004320:	40023800 	.word	0x40023800
 8004324:	08012128 	.word	0x08012128
 8004328:	20000004 	.word	0x20000004
 800432c:	20000008 	.word	0x20000008

08004330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004334:	b094      	sub	sp, #80	@ 0x50
 8004336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004348:	4b79      	ldr	r3, [pc, #484]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	2b08      	cmp	r3, #8
 8004352:	d00d      	beq.n	8004370 <HAL_RCC_GetSysClockFreq+0x40>
 8004354:	2b08      	cmp	r3, #8
 8004356:	f200 80e1 	bhi.w	800451c <HAL_RCC_GetSysClockFreq+0x1ec>
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_RCC_GetSysClockFreq+0x34>
 800435e:	2b04      	cmp	r3, #4
 8004360:	d003      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0x3a>
 8004362:	e0db      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004364:	4b73      	ldr	r3, [pc, #460]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x204>)
 8004366:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004368:	e0db      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800436a:	4b73      	ldr	r3, [pc, #460]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x208>)
 800436c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800436e:	e0d8      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004370:	4b6f      	ldr	r3, [pc, #444]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004378:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800437a:	4b6d      	ldr	r3, [pc, #436]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d063      	beq.n	800444e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004386:	4b6a      	ldr	r3, [pc, #424]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	099b      	lsrs	r3, r3, #6
 800438c:	2200      	movs	r2, #0
 800438e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004390:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004398:	633b      	str	r3, [r7, #48]	@ 0x30
 800439a:	2300      	movs	r3, #0
 800439c:	637b      	str	r3, [r7, #52]	@ 0x34
 800439e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043a2:	4622      	mov	r2, r4
 80043a4:	462b      	mov	r3, r5
 80043a6:	f04f 0000 	mov.w	r0, #0
 80043aa:	f04f 0100 	mov.w	r1, #0
 80043ae:	0159      	lsls	r1, r3, #5
 80043b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043b4:	0150      	lsls	r0, r2, #5
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4621      	mov	r1, r4
 80043bc:	1a51      	subs	r1, r2, r1
 80043be:	6139      	str	r1, [r7, #16]
 80043c0:	4629      	mov	r1, r5
 80043c2:	eb63 0301 	sbc.w	r3, r3, r1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043d4:	4659      	mov	r1, fp
 80043d6:	018b      	lsls	r3, r1, #6
 80043d8:	4651      	mov	r1, sl
 80043da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043de:	4651      	mov	r1, sl
 80043e0:	018a      	lsls	r2, r1, #6
 80043e2:	4651      	mov	r1, sl
 80043e4:	ebb2 0801 	subs.w	r8, r2, r1
 80043e8:	4659      	mov	r1, fp
 80043ea:	eb63 0901 	sbc.w	r9, r3, r1
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004402:	4690      	mov	r8, r2
 8004404:	4699      	mov	r9, r3
 8004406:	4623      	mov	r3, r4
 8004408:	eb18 0303 	adds.w	r3, r8, r3
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	462b      	mov	r3, r5
 8004410:	eb49 0303 	adc.w	r3, r9, r3
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004422:	4629      	mov	r1, r5
 8004424:	024b      	lsls	r3, r1, #9
 8004426:	4621      	mov	r1, r4
 8004428:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800442c:	4621      	mov	r1, r4
 800442e:	024a      	lsls	r2, r1, #9
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004436:	2200      	movs	r2, #0
 8004438:	62bb      	str	r3, [r7, #40]	@ 0x28
 800443a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800443c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004440:	f7fb ff2e 	bl	80002a0 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4613      	mov	r3, r2
 800444a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800444c:	e058      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444e:	4b38      	ldr	r3, [pc, #224]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	099b      	lsrs	r3, r3, #6
 8004454:	2200      	movs	r2, #0
 8004456:	4618      	mov	r0, r3
 8004458:	4611      	mov	r1, r2
 800445a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800445e:	623b      	str	r3, [r7, #32]
 8004460:	2300      	movs	r3, #0
 8004462:	627b      	str	r3, [r7, #36]	@ 0x24
 8004464:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004468:	4642      	mov	r2, r8
 800446a:	464b      	mov	r3, r9
 800446c:	f04f 0000 	mov.w	r0, #0
 8004470:	f04f 0100 	mov.w	r1, #0
 8004474:	0159      	lsls	r1, r3, #5
 8004476:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800447a:	0150      	lsls	r0, r2, #5
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4641      	mov	r1, r8
 8004482:	ebb2 0a01 	subs.w	sl, r2, r1
 8004486:	4649      	mov	r1, r9
 8004488:	eb63 0b01 	sbc.w	fp, r3, r1
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004498:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800449c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044a0:	ebb2 040a 	subs.w	r4, r2, sl
 80044a4:	eb63 050b 	sbc.w	r5, r3, fp
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	00eb      	lsls	r3, r5, #3
 80044b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044b6:	00e2      	lsls	r2, r4, #3
 80044b8:	4614      	mov	r4, r2
 80044ba:	461d      	mov	r5, r3
 80044bc:	4643      	mov	r3, r8
 80044be:	18e3      	adds	r3, r4, r3
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	464b      	mov	r3, r9
 80044c4:	eb45 0303 	adc.w	r3, r5, r3
 80044c8:	607b      	str	r3, [r7, #4]
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044d6:	4629      	mov	r1, r5
 80044d8:	028b      	lsls	r3, r1, #10
 80044da:	4621      	mov	r1, r4
 80044dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044e0:	4621      	mov	r1, r4
 80044e2:	028a      	lsls	r2, r1, #10
 80044e4:	4610      	mov	r0, r2
 80044e6:	4619      	mov	r1, r3
 80044e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ea:	2200      	movs	r2, #0
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	61fa      	str	r2, [r7, #28]
 80044f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044f4:	f7fb fed4 	bl	80002a0 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4613      	mov	r3, r2
 80044fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004500:	4b0b      	ldr	r3, [pc, #44]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	3301      	adds	r3, #1
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004510:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800451a:	e002      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800451c:	4b05      	ldr	r3, [pc, #20]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x204>)
 800451e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004522:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004524:	4618      	mov	r0, r3
 8004526:	3750      	adds	r7, #80	@ 0x50
 8004528:	46bd      	mov	sp, r7
 800452a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800452e:	bf00      	nop
 8004530:	40023800 	.word	0x40023800
 8004534:	00f42400 	.word	0x00f42400
 8004538:	007a1200 	.word	0x007a1200

0800453c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004540:	4b03      	ldr	r3, [pc, #12]	@ (8004550 <HAL_RCC_GetHCLKFreq+0x14>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	20000004 	.word	0x20000004

08004554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004558:	f7ff fff0 	bl	800453c <HAL_RCC_GetHCLKFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b05      	ldr	r3, [pc, #20]	@ (8004574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	0a9b      	lsrs	r3, r3, #10
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4903      	ldr	r1, [pc, #12]	@ (8004578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40023800 	.word	0x40023800
 8004578:	08012138 	.word	0x08012138

0800457c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004580:	f7ff ffdc 	bl	800453c <HAL_RCC_GetHCLKFreq>
 8004584:	4602      	mov	r2, r0
 8004586:	4b05      	ldr	r3, [pc, #20]	@ (800459c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	0b5b      	lsrs	r3, r3, #13
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	4903      	ldr	r1, [pc, #12]	@ (80045a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004592:	5ccb      	ldrb	r3, [r1, r3]
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004598:	4618      	mov	r0, r3
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40023800 	.word	0x40023800
 80045a0:	08012138 	.word	0x08012138

080045a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	220f      	movs	r2, #15
 80045b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045b4:	4b12      	ldr	r3, [pc, #72]	@ (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0203 	and.w	r2, r3, #3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045d8:	4b09      	ldr	r3, [pc, #36]	@ (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	08db      	lsrs	r3, r3, #3
 80045de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045e6:	4b07      	ldr	r3, [pc, #28]	@ (8004604 <HAL_RCC_GetClockConfig+0x60>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0207 	and.w	r2, r3, #7
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	601a      	str	r2, [r3, #0]
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800
 8004604:	40023c00 	.word	0x40023c00

08004608 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d105      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800462c:	2b00      	cmp	r3, #0
 800462e:	d035      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004630:	4b62      	ldr	r3, [pc, #392]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004636:	f7fd fb15 	bl	8001c64 <HAL_GetTick>
 800463a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800463c:	e008      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800463e:	f7fd fb11 	bl	8001c64 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e0b0      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004650:	4b5b      	ldr	r3, [pc, #364]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1f0      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	019a      	lsls	r2, r3, #6
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	071b      	lsls	r3, r3, #28
 8004668:	4955      	ldr	r1, [pc, #340]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004670:	4b52      	ldr	r3, [pc, #328]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004676:	f7fd faf5 	bl	8001c64 <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800467e:	f7fd faf1 	bl	8001c64 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e090      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004690:	4b4b      	ldr	r3, [pc, #300]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8083 	beq.w	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	4b44      	ldr	r3, [pc, #272]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	4a43      	ldr	r2, [pc, #268]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046ba:	4b41      	ldr	r3, [pc, #260]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046c6:	4b3f      	ldr	r3, [pc, #252]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a3e      	ldr	r2, [pc, #248]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046d2:	f7fd fac7 	bl	8001c64 <HAL_GetTick>
 80046d6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80046d8:	e008      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046da:	f7fd fac3 	bl	8001c64 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e062      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80046ec:	4b35      	ldr	r3, [pc, #212]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046f8:	4b31      	ldr	r3, [pc, #196]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004700:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d02f      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	429a      	cmp	r2, r3
 8004714:	d028      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004716:	4b2a      	ldr	r3, [pc, #168]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800471e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004720:	4b29      	ldr	r3, [pc, #164]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004722:	2201      	movs	r2, #1
 8004724:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004726:	4b28      	ldr	r3, [pc, #160]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800472c:	4a24      	ldr	r2, [pc, #144]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004732:	4b23      	ldr	r3, [pc, #140]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b01      	cmp	r3, #1
 800473c:	d114      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800473e:	f7fd fa91 	bl	8001c64 <HAL_GetTick>
 8004742:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004744:	e00a      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004746:	f7fd fa8d 	bl	8001c64 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004754:	4293      	cmp	r3, r2
 8004756:	d901      	bls.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e02a      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475c:	4b18      	ldr	r3, [pc, #96]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800475e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0ee      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004774:	d10d      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004776:	4b12      	ldr	r3, [pc, #72]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800478a:	490d      	ldr	r1, [pc, #52]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800478c:	4313      	orrs	r3, r2
 800478e:	608b      	str	r3, [r1, #8]
 8004790:	e005      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004792:	4b0b      	ldr	r3, [pc, #44]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	4a0a      	ldr	r2, [pc, #40]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004798:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800479c:	6093      	str	r3, [r2, #8]
 800479e:	4b08      	ldr	r3, [pc, #32]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047aa:	4905      	ldr	r1, [pc, #20]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	42470068 	.word	0x42470068
 80047c0:	40023800 	.word	0x40023800
 80047c4:	40007000 	.word	0x40007000
 80047c8:	42470e40 	.word	0x42470e40

080047cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d13f      	bne.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047ea:	4b24      	ldr	r3, [pc, #144]	@ (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047f2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d006      	beq.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004800:	d12f      	bne.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004802:	4b1f      	ldr	r3, [pc, #124]	@ (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004804:	617b      	str	r3, [r7, #20]
          break;
 8004806:	e02f      	b.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004808:	4b1c      	ldr	r3, [pc, #112]	@ (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004810:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004814:	d108      	bne.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004816:	4b19      	ldr	r3, [pc, #100]	@ (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800481e:	4a19      	ldr	r2, [pc, #100]	@ (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	e007      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004828:	4b14      	ldr	r3, [pc, #80]	@ (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004830:	4a15      	ldr	r2, [pc, #84]	@ (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004832:	fbb2 f3f3 	udiv	r3, r2, r3
 8004836:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004838:	4b10      	ldr	r3, [pc, #64]	@ (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800483a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800483e:	099b      	lsrs	r3, r3, #6
 8004840:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800484c:	4b0b      	ldr	r3, [pc, #44]	@ (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800484e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004852:	0f1b      	lsrs	r3, r3, #28
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	fbb2 f3f3 	udiv	r3, r2, r3
 800485e:	617b      	str	r3, [r7, #20]
          break;
 8004860:	e002      	b.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]
          break;
 8004866:	bf00      	nop
        }
      }
      break;
 8004868:	e000      	b.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800486a:	bf00      	nop
    }
  }
  return frequency;
 800486c:	697b      	ldr	r3, [r7, #20]
}
 800486e:	4618      	mov	r0, r3
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800
 8004880:	00bb8000 	.word	0x00bb8000
 8004884:	007a1200 	.word	0x007a1200
 8004888:	00f42400 	.word	0x00f42400

0800488c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e073      	b.n	800498a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	7f5b      	ldrb	r3, [r3, #29]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d105      	bne.n	80048b8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fc fd9c 	bl	80013f0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0310 	and.w	r3, r3, #16
 80048c8:	2b10      	cmp	r3, #16
 80048ca:	d055      	beq.n	8004978 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	22ca      	movs	r2, #202	@ 0xca
 80048d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2253      	movs	r2, #83	@ 0x53
 80048da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fa49 	bl	8004d74 <RTC_EnterInitMode>
 80048e2:	4603      	mov	r3, r0
 80048e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d12c      	bne.n	8004946 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80048fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048fe:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6899      	ldr	r1, [r3, #8]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	68d2      	ldr	r2, [r2, #12]
 8004926:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6919      	ldr	r1, [r3, #16]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	041a      	lsls	r2, r3, #16
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fa50 	bl	8004de2 <RTC_ExitInitMode>
 8004942:	4603      	mov	r3, r0
 8004944:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d110      	bne.n	800496e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800495a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	22ff      	movs	r2, #255	@ 0xff
 8004974:	625a      	str	r2, [r3, #36]	@ 0x24
 8004976:	e001      	b.n	800497c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004992:	b590      	push	{r4, r7, lr}
 8004994:	b087      	sub	sp, #28
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	7f1b      	ldrb	r3, [r3, #28]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_RTC_SetTime+0x1c>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e087      	b.n	8004abe <HAL_RTC_SetTime+0x12c>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2201      	movs	r2, #1
 80049b2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2202      	movs	r2, #2
 80049b8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d126      	bne.n	8004a0e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d102      	bne.n	80049d4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2200      	movs	r2, #0
 80049d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fa27 	bl	8004e2c <RTC_ByteToBcd2>
 80049de:	4603      	mov	r3, r0
 80049e0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	785b      	ldrb	r3, [r3, #1]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fa20 	bl	8004e2c <RTC_ByteToBcd2>
 80049ec:	4603      	mov	r3, r0
 80049ee:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80049f0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	789b      	ldrb	r3, [r3, #2]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fa18 	bl	8004e2c <RTC_ByteToBcd2>
 80049fc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049fe:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	78db      	ldrb	r3, [r3, #3]
 8004a06:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	e018      	b.n	8004a40 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d102      	bne.n	8004a22 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a2e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004a34:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	78db      	ldrb	r3, [r3, #3]
 8004a3a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	22ca      	movs	r2, #202	@ 0xca
 8004a46:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2253      	movs	r2, #83	@ 0x53
 8004a4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f98f 	bl	8004d74 <RTC_EnterInitMode>
 8004a56:	4603      	mov	r3, r0
 8004a58:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004a5a:	7cfb      	ldrb	r3, [r7, #19]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d120      	bne.n	8004aa2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004a6a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004a6e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a7e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6899      	ldr	r1, [r3, #8]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f9a2 	bl	8004de2 <RTC_ExitInitMode>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004aa2:	7cfb      	ldrb	r3, [r7, #19]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d102      	bne.n	8004aae <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	22ff      	movs	r2, #255	@ 0xff
 8004ab4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	771a      	strb	r2, [r3, #28]

  return status;
 8004abc:	7cfb      	ldrb	r3, [r7, #19]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd90      	pop	{r4, r7, pc}

08004ac6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b086      	sub	sp, #24
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004af8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004afc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	0c1b      	lsrs	r3, r3, #16
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	0a1b      	lsrs	r3, r3, #8
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	0d9b      	lsrs	r3, r3, #22
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d11a      	bne.n	8004b78 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 f98e 	bl	8004e68 <RTC_Bcd2ToByte>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 f985 	bl	8004e68 <RTC_Bcd2ToByte>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	461a      	mov	r2, r3
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	789b      	ldrb	r3, [r3, #2]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 f97c 	bl	8004e68 <RTC_Bcd2ToByte>
 8004b70:	4603      	mov	r3, r0
 8004b72:	461a      	mov	r2, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b82:	b590      	push	{r4, r7, lr}
 8004b84:	b087      	sub	sp, #28
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	7f1b      	ldrb	r3, [r3, #28]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_RTC_SetDate+0x1c>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e071      	b.n	8004c82 <HAL_RTC_SetDate+0x100>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10e      	bne.n	8004bce <HAL_RTC_SetDate+0x4c>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	785b      	ldrb	r3, [r3, #1]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	f023 0310 	bic.w	r3, r3, #16
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	330a      	adds	r3, #10
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d11c      	bne.n	8004c0e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	78db      	ldrb	r3, [r3, #3]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 f927 	bl	8004e2c <RTC_ByteToBcd2>
 8004bde:	4603      	mov	r3, r0
 8004be0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 f920 	bl	8004e2c <RTC_ByteToBcd2>
 8004bec:	4603      	mov	r3, r0
 8004bee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004bf0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	789b      	ldrb	r3, [r3, #2]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f918 	bl	8004e2c <RTC_ByteToBcd2>
 8004bfc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004bfe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	e00e      	b.n	8004c2c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	78db      	ldrb	r3, [r3, #3]
 8004c12:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	785b      	ldrb	r3, [r3, #1]
 8004c18:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c1a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004c20:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	22ca      	movs	r2, #202	@ 0xca
 8004c32:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2253      	movs	r2, #83	@ 0x53
 8004c3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f899 	bl	8004d74 <RTC_EnterInitMode>
 8004c42:	4603      	mov	r3, r0
 8004c44:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004c46:	7cfb      	ldrb	r3, [r7, #19]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10c      	bne.n	8004c66 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004c56:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004c5a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f8c0 	bl	8004de2 <RTC_ExitInitMode>
 8004c62:	4603      	mov	r3, r0
 8004c64:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004c66:	7cfb      	ldrb	r3, [r7, #19]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d102      	bne.n	8004c72 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	22ff      	movs	r2, #255	@ 0xff
 8004c78:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	771a      	strb	r2, [r3, #28]

  return status;
 8004c80:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd90      	pop	{r4, r7, pc}

08004c8a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b086      	sub	sp, #24
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ca4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	0c1b      	lsrs	r3, r3, #16
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	0a1b      	lsrs	r3, r3, #8
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	f003 031f 	and.w	r3, r3, #31
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	0b5b      	lsrs	r3, r3, #13
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d11a      	bne.n	8004d1e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	78db      	ldrb	r3, [r3, #3]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 f8bb 	bl	8004e68 <RTC_Bcd2ToByte>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	785b      	ldrb	r3, [r3, #1]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 f8b2 	bl	8004e68 <RTC_Bcd2ToByte>
 8004d04:	4603      	mov	r3, r0
 8004d06:	461a      	mov	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	789b      	ldrb	r3, [r3, #2]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 f8a9 	bl	8004e68 <RTC_Bcd2ToByte>
 8004d16:	4603      	mov	r3, r0
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a0d      	ldr	r2, [pc, #52]	@ (8004d70 <HAL_RTC_WaitForSynchro+0x48>)
 8004d3a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d3c:	f7fc ff92 	bl	8001c64 <HAL_GetTick>
 8004d40:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d42:	e009      	b.n	8004d58 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d44:	f7fc ff8e 	bl	8001c64 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d52:	d901      	bls.n	8004d58 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e007      	b.n	8004d68 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0ee      	beq.n	8004d44 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	00017f5f 	.word	0x00017f5f

08004d74 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d122      	bne.n	8004dd8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004da0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004da2:	f7fc ff5f 	bl	8001c64 <HAL_GetTick>
 8004da6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004da8:	e00c      	b.n	8004dc4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004daa:	f7fc ff5b 	bl	8001c64 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004db8:	d904      	bls.n	8004dc4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d102      	bne.n	8004dd8 <RTC_EnterInitMode+0x64>
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d1e8      	bne.n	8004daa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004dfc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff ff8b 	bl	8004d28 <HAL_RTC_WaitForSynchro>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2204      	movs	r2, #4
 8004e1c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4603      	mov	r3, r0
 8004e34:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004e3a:	e005      	b.n	8004e48 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	3b0a      	subs	r3, #10
 8004e46:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	2b09      	cmp	r3, #9
 8004e4c:	d8f6      	bhi.n	8004e3c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	b2db      	uxtb	r3, r3
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	091b      	lsrs	r3, r3, #4
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	79fb      	ldrb	r3, [r7, #7]
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	4413      	add	r3, r2
 8004e96:	b2db      	uxtb	r3, r3
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e07b      	b.n	8004fae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d108      	bne.n	8004ed0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ec6:	d009      	beq.n	8004edc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	61da      	str	r2, [r3, #28]
 8004ece:	e005      	b.n	8004edc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fc faa4 	bl	8001444 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f60:	ea42 0103 	orr.w	r1, r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	0c1b      	lsrs	r3, r3, #16
 8004f7a:	f003 0104 	and.w	r1, r3, #4
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f82:	f003 0210 	and.w	r2, r3, #16
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b088      	sub	sp, #32
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	603b      	str	r3, [r7, #0]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fc6:	f7fc fe4d 	bl	8001c64 <HAL_GetTick>
 8004fca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004fcc:	88fb      	ldrh	r3, [r7, #6]
 8004fce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d001      	beq.n	8004fe0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e12a      	b.n	8005236 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <HAL_SPI_Transmit+0x36>
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e122      	b.n	8005236 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_SPI_Transmit+0x48>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e11b      	b.n	8005236 <HAL_SPI_Transmit+0x280>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2203      	movs	r2, #3
 800500a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	88fa      	ldrh	r2, [r7, #6]
 800501e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800504c:	d10f      	bne.n	800506e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800505c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800506c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005078:	2b40      	cmp	r3, #64	@ 0x40
 800507a:	d007      	beq.n	800508c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800508a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005094:	d152      	bne.n	800513c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_SPI_Transmit+0xee>
 800509e:	8b7b      	ldrh	r3, [r7, #26]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d145      	bne.n	8005130 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a8:	881a      	ldrh	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b4:	1c9a      	adds	r2, r3, #2
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050c8:	e032      	b.n	8005130 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d112      	bne.n	80050fe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050dc:	881a      	ldrh	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e8:	1c9a      	adds	r2, r3, #2
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80050fc:	e018      	b.n	8005130 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050fe:	f7fc fdb1 	bl	8001c64 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d803      	bhi.n	8005116 <HAL_SPI_Transmit+0x160>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005114:	d102      	bne.n	800511c <HAL_SPI_Transmit+0x166>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d109      	bne.n	8005130 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e082      	b.n	8005236 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1c7      	bne.n	80050ca <HAL_SPI_Transmit+0x114>
 800513a:	e053      	b.n	80051e4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <HAL_SPI_Transmit+0x194>
 8005144:	8b7b      	ldrh	r3, [r7, #26]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d147      	bne.n	80051da <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	330c      	adds	r3, #12
 8005154:	7812      	ldrb	r2, [r2, #0]
 8005156:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005170:	e033      	b.n	80051da <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b02      	cmp	r3, #2
 800517e:	d113      	bne.n	80051a8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	7812      	ldrb	r2, [r2, #0]
 800518c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80051a6:	e018      	b.n	80051da <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051a8:	f7fc fd5c 	bl	8001c64 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d803      	bhi.n	80051c0 <HAL_SPI_Transmit+0x20a>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051be:	d102      	bne.n	80051c6 <HAL_SPI_Transmit+0x210>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e02d      	b.n	8005236 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051de:	b29b      	uxth	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1c6      	bne.n	8005172 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	6839      	ldr	r1, [r7, #0]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 fa59 	bl	80056a0 <SPI_EndRxTxTransaction>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005234:	2300      	movs	r3, #0
  }
}
 8005236:	4618      	mov	r0, r3
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b08a      	sub	sp, #40	@ 0x28
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	607a      	str	r2, [r7, #4]
 800524a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800524c:	2301      	movs	r3, #1
 800524e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005250:	f7fc fd08 	bl	8001c64 <HAL_GetTick>
 8005254:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800525c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005264:	887b      	ldrh	r3, [r7, #2]
 8005266:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005268:	7ffb      	ldrb	r3, [r7, #31]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d00c      	beq.n	8005288 <HAL_SPI_TransmitReceive+0x4a>
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005274:	d106      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x46>
 800527e:	7ffb      	ldrb	r3, [r7, #31]
 8005280:	2b04      	cmp	r3, #4
 8005282:	d001      	beq.n	8005288 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005284:	2302      	movs	r3, #2
 8005286:	e17f      	b.n	8005588 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d005      	beq.n	800529a <HAL_SPI_TransmitReceive+0x5c>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <HAL_SPI_TransmitReceive+0x5c>
 8005294:	887b      	ldrh	r3, [r7, #2]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e174      	b.n	8005588 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_SPI_TransmitReceive+0x6e>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e16d      	b.n	8005588 <HAL_SPI_TransmitReceive+0x34a>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d003      	beq.n	80052c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2205      	movs	r2, #5
 80052c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	887a      	ldrh	r2, [r7, #2]
 80052d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	887a      	ldrh	r2, [r7, #2]
 80052de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	887a      	ldrh	r2, [r7, #2]
 80052ea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	887a      	ldrh	r2, [r7, #2]
 80052f0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005308:	2b40      	cmp	r3, #64	@ 0x40
 800530a:	d007      	beq.n	800531c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800531a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005324:	d17e      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_SPI_TransmitReceive+0xf6>
 800532e:	8afb      	ldrh	r3, [r7, #22]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d16c      	bne.n	800540e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005338:	881a      	ldrh	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005344:	1c9a      	adds	r2, r3, #2
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005358:	e059      	b.n	800540e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b02      	cmp	r3, #2
 8005366:	d11b      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x162>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d016      	beq.n	80053a0 <HAL_SPI_TransmitReceive+0x162>
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	2b01      	cmp	r3, #1
 8005376:	d113      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537c:	881a      	ldrh	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005388:	1c9a      	adds	r2, r3, #2
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005392:	b29b      	uxth	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d119      	bne.n	80053e2 <HAL_SPI_TransmitReceive+0x1a4>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d014      	beq.n	80053e2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c2:	b292      	uxth	r2, r2
 80053c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ca:	1c9a      	adds	r2, r3, #2
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053de:	2301      	movs	r3, #1
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053e2:	f7fc fc3f 	bl	8001c64 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d80d      	bhi.n	800540e <HAL_SPI_TransmitReceive+0x1d0>
 80053f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f8:	d009      	beq.n	800540e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e0bc      	b.n	8005588 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1a0      	bne.n	800535a <HAL_SPI_TransmitReceive+0x11c>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d19b      	bne.n	800535a <HAL_SPI_TransmitReceive+0x11c>
 8005422:	e082      	b.n	800552a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <HAL_SPI_TransmitReceive+0x1f4>
 800542c:	8afb      	ldrh	r3, [r7, #22]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d171      	bne.n	8005516 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	330c      	adds	r3, #12
 800543c:	7812      	ldrb	r2, [r2, #0]
 800543e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005458:	e05d      	b.n	8005516 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b02      	cmp	r3, #2
 8005466:	d11c      	bne.n	80054a2 <HAL_SPI_TransmitReceive+0x264>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d017      	beq.n	80054a2 <HAL_SPI_TransmitReceive+0x264>
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	2b01      	cmp	r3, #1
 8005476:	d114      	bne.n	80054a2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	330c      	adds	r3, #12
 8005482:	7812      	ldrb	r2, [r2, #0]
 8005484:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d119      	bne.n	80054e4 <HAL_SPI_TransmitReceive+0x2a6>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d014      	beq.n	80054e4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054e0:	2301      	movs	r3, #1
 80054e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054e4:	f7fc fbbe 	bl	8001c64 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d803      	bhi.n	80054fc <HAL_SPI_TransmitReceive+0x2be>
 80054f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fa:	d102      	bne.n	8005502 <HAL_SPI_TransmitReceive+0x2c4>
 80054fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d109      	bne.n	8005516 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e038      	b.n	8005588 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d19c      	bne.n	800545a <HAL_SPI_TransmitReceive+0x21c>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d197      	bne.n	800545a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800552a:	6a3a      	ldr	r2, [r7, #32]
 800552c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f8b6 	bl	80056a0 <SPI_EndRxTxTransaction>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d008      	beq.n	800554c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2220      	movs	r2, #32
 800553e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e01d      	b.n	8005588 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005554:	2300      	movs	r3, #0
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e000      	b.n	8005588 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005586:	2300      	movs	r3, #0
  }
}
 8005588:	4618      	mov	r0, r3
 800558a:	3728      	adds	r7, #40	@ 0x28
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055a0:	f7fc fb60 	bl	8001c64 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	4413      	add	r3, r2
 80055ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055b0:	f7fc fb58 	bl	8001c64 <HAL_GetTick>
 80055b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055b6:	4b39      	ldr	r3, [pc, #228]	@ (800569c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	015b      	lsls	r3, r3, #5
 80055bc:	0d1b      	lsrs	r3, r3, #20
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	fb02 f303 	mul.w	r3, r2, r3
 80055c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055c6:	e054      	b.n	8005672 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ce:	d050      	beq.n	8005672 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055d0:	f7fc fb48 	bl	8001c64 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d902      	bls.n	80055e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d13d      	bne.n	8005662 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055fe:	d111      	bne.n	8005624 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005608:	d004      	beq.n	8005614 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005612:	d107      	bne.n	8005624 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005622:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800562c:	d10f      	bne.n	800564e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800564c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e017      	b.n	8005692 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	3b01      	subs	r3, #1
 8005670:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4013      	ands	r3, r2
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	429a      	cmp	r2, r3
 8005680:	bf0c      	ite	eq
 8005682:	2301      	moveq	r3, #1
 8005684:	2300      	movne	r3, #0
 8005686:	b2db      	uxtb	r3, r3
 8005688:	461a      	mov	r2, r3
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	429a      	cmp	r2, r3
 800568e:	d19b      	bne.n	80055c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20000004 	.word	0x20000004

080056a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2201      	movs	r2, #1
 80056b4:	2102      	movs	r1, #2
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f7ff ff6a 	bl	8005590 <SPI_WaitFlagStateUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c6:	f043 0220 	orr.w	r2, r3, #32
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e032      	b.n	8005738 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80056d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005740 <SPI_EndRxTxTransaction+0xa0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005744 <SPI_EndRxTxTransaction+0xa4>)
 80056d8:	fba2 2303 	umull	r2, r3, r2, r3
 80056dc:	0d5b      	lsrs	r3, r3, #21
 80056de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056e2:	fb02 f303 	mul.w	r3, r2, r3
 80056e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056f0:	d112      	bne.n	8005718 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2200      	movs	r2, #0
 80056fa:	2180      	movs	r1, #128	@ 0x80
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f7ff ff47 	bl	8005590 <SPI_WaitFlagStateUntilTimeout>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d016      	beq.n	8005736 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800570c:	f043 0220 	orr.w	r2, r3, #32
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e00f      	b.n	8005738 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	3b01      	subs	r3, #1
 8005722:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572e:	2b80      	cmp	r3, #128	@ 0x80
 8005730:	d0f2      	beq.n	8005718 <SPI_EndRxTxTransaction+0x78>
 8005732:	e000      	b.n	8005736 <SPI_EndRxTxTransaction+0x96>
        break;
 8005734:	bf00      	nop
  }

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20000004 	.word	0x20000004
 8005744:	165e9f81 	.word	0x165e9f81

08005748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e041      	b.n	80057de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7fb fee6 	bl	8001540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3304      	adds	r3, #4
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f000 fc62 	bl	8006050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d001      	beq.n	8005800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e04e      	b.n	800589e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0201 	orr.w	r2, r2, #1
 8005816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a23      	ldr	r2, [pc, #140]	@ (80058ac <HAL_TIM_Base_Start_IT+0xc4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d022      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x80>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800582a:	d01d      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x80>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1f      	ldr	r2, [pc, #124]	@ (80058b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d018      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x80>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1e      	ldr	r2, [pc, #120]	@ (80058b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d013      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x80>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1c      	ldr	r2, [pc, #112]	@ (80058b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d00e      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x80>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1b      	ldr	r2, [pc, #108]	@ (80058bc <HAL_TIM_Base_Start_IT+0xd4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d009      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x80>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a19      	ldr	r2, [pc, #100]	@ (80058c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d004      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x80>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a18      	ldr	r2, [pc, #96]	@ (80058c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d111      	bne.n	800588c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b06      	cmp	r3, #6
 8005878:	d010      	beq.n	800589c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588a:	e007      	b.n	800589c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0201 	orr.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40010000 	.word	0x40010000
 80058b0:	40000400 	.word	0x40000400
 80058b4:	40000800 	.word	0x40000800
 80058b8:	40000c00 	.word	0x40000c00
 80058bc:	40010400 	.word	0x40010400
 80058c0:	40014000 	.word	0x40014000
 80058c4:	40001800 	.word	0x40001800

080058c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e041      	b.n	800595e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f839 	bl	8005966 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3304      	adds	r3, #4
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f000 fba2 	bl	8006050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
	...

0800597c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d109      	bne.n	80059a0 <HAL_TIM_PWM_Start+0x24>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b01      	cmp	r3, #1
 8005996:	bf14      	ite	ne
 8005998:	2301      	movne	r3, #1
 800599a:	2300      	moveq	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	e022      	b.n	80059e6 <HAL_TIM_PWM_Start+0x6a>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d109      	bne.n	80059ba <HAL_TIM_PWM_Start+0x3e>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	bf14      	ite	ne
 80059b2:	2301      	movne	r3, #1
 80059b4:	2300      	moveq	r3, #0
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	e015      	b.n	80059e6 <HAL_TIM_PWM_Start+0x6a>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d109      	bne.n	80059d4 <HAL_TIM_PWM_Start+0x58>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	bf14      	ite	ne
 80059cc:	2301      	movne	r3, #1
 80059ce:	2300      	moveq	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	e008      	b.n	80059e6 <HAL_TIM_PWM_Start+0x6a>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	bf14      	ite	ne
 80059e0:	2301      	movne	r3, #1
 80059e2:	2300      	moveq	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e07c      	b.n	8005ae8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <HAL_TIM_PWM_Start+0x82>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059fc:	e013      	b.n	8005a26 <HAL_TIM_PWM_Start+0xaa>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d104      	bne.n	8005a0e <HAL_TIM_PWM_Start+0x92>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a0c:	e00b      	b.n	8005a26 <HAL_TIM_PWM_Start+0xaa>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d104      	bne.n	8005a1e <HAL_TIM_PWM_Start+0xa2>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a1c:	e003      	b.n	8005a26 <HAL_TIM_PWM_Start+0xaa>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2202      	movs	r2, #2
 8005a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	6839      	ldr	r1, [r7, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fe04 	bl	800663c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2d      	ldr	r2, [pc, #180]	@ (8005af0 <HAL_TIM_PWM_Start+0x174>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <HAL_TIM_PWM_Start+0xcc>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a2c      	ldr	r2, [pc, #176]	@ (8005af4 <HAL_TIM_PWM_Start+0x178>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d101      	bne.n	8005a4c <HAL_TIM_PWM_Start+0xd0>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <HAL_TIM_PWM_Start+0xd2>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d007      	beq.n	8005a62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a22      	ldr	r2, [pc, #136]	@ (8005af0 <HAL_TIM_PWM_Start+0x174>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d022      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a74:	d01d      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8005af8 <HAL_TIM_PWM_Start+0x17c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d018      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1d      	ldr	r2, [pc, #116]	@ (8005afc <HAL_TIM_PWM_Start+0x180>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8005b00 <HAL_TIM_PWM_Start+0x184>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00e      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a16      	ldr	r2, [pc, #88]	@ (8005af4 <HAL_TIM_PWM_Start+0x178>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d009      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a18      	ldr	r2, [pc, #96]	@ (8005b04 <HAL_TIM_PWM_Start+0x188>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a16      	ldr	r2, [pc, #88]	@ (8005b08 <HAL_TIM_PWM_Start+0x18c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d111      	bne.n	8005ad6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b06      	cmp	r3, #6
 8005ac2:	d010      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad4:	e007      	b.n	8005ae6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0201 	orr.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40010000 	.word	0x40010000
 8005af4:	40010400 	.word	0x40010400
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40000800 	.word	0x40000800
 8005b00:	40000c00 	.word	0x40000c00
 8005b04:	40014000 	.word	0x40014000
 8005b08:	40001800 	.word	0x40001800

08005b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d020      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d01b      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f06f 0202 	mvn.w	r2, #2
 8005b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fa5b 	bl	8006012 <HAL_TIM_IC_CaptureCallback>
 8005b5c:	e005      	b.n	8005b6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fa4d 	bl	8005ffe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fa5e 	bl	8006026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d020      	beq.n	8005bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01b      	beq.n	8005bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0204 	mvn.w	r2, #4
 8005b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fa35 	bl	8006012 <HAL_TIM_IC_CaptureCallback>
 8005ba8:	e005      	b.n	8005bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fa27 	bl	8005ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fa38 	bl	8006026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d020      	beq.n	8005c08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01b      	beq.n	8005c08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f06f 0208 	mvn.w	r2, #8
 8005bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2204      	movs	r2, #4
 8005bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fa0f 	bl	8006012 <HAL_TIM_IC_CaptureCallback>
 8005bf4:	e005      	b.n	8005c02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fa01 	bl	8005ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fa12 	bl	8006026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f003 0310 	and.w	r3, r3, #16
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d020      	beq.n	8005c54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01b      	beq.n	8005c54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0210 	mvn.w	r2, #16
 8005c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2208      	movs	r2, #8
 8005c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f9e9 	bl	8006012 <HAL_TIM_IC_CaptureCallback>
 8005c40:	e005      	b.n	8005c4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f9db 	bl	8005ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f9ec 	bl	8006026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00c      	beq.n	8005c78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d007      	beq.n	8005c78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f06f 0201 	mvn.w	r2, #1
 8005c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fb f94a 	bl	8000f0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00c      	beq.n	8005c9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d007      	beq.n	8005c9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fd7c 	bl	8006794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00c      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d007      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f9bd 	bl	800603a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00c      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d007      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f06f 0220 	mvn.w	r2, #32
 8005cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fd4e 	bl	8006780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ce4:	bf00      	nop
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d06:	2302      	movs	r3, #2
 8005d08:	e0ae      	b.n	8005e68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b0c      	cmp	r3, #12
 8005d16:	f200 809f 	bhi.w	8005e58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d55 	.word	0x08005d55
 8005d24:	08005e59 	.word	0x08005e59
 8005d28:	08005e59 	.word	0x08005e59
 8005d2c:	08005e59 	.word	0x08005e59
 8005d30:	08005d95 	.word	0x08005d95
 8005d34:	08005e59 	.word	0x08005e59
 8005d38:	08005e59 	.word	0x08005e59
 8005d3c:	08005e59 	.word	0x08005e59
 8005d40:	08005dd7 	.word	0x08005dd7
 8005d44:	08005e59 	.word	0x08005e59
 8005d48:	08005e59 	.word	0x08005e59
 8005d4c:	08005e59 	.word	0x08005e59
 8005d50:	08005e17 	.word	0x08005e17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fa24 	bl	80061a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699a      	ldr	r2, [r3, #24]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0208 	orr.w	r2, r2, #8
 8005d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699a      	ldr	r2, [r3, #24]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0204 	bic.w	r2, r2, #4
 8005d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6999      	ldr	r1, [r3, #24]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	691a      	ldr	r2, [r3, #16]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	619a      	str	r2, [r3, #24]
      break;
 8005d92:	e064      	b.n	8005e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fa74 	bl	8006288 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699a      	ldr	r2, [r3, #24]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6999      	ldr	r1, [r3, #24]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	021a      	lsls	r2, r3, #8
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	619a      	str	r2, [r3, #24]
      break;
 8005dd4:	e043      	b.n	8005e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68b9      	ldr	r1, [r7, #8]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 fac9 	bl	8006374 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69da      	ldr	r2, [r3, #28]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f042 0208 	orr.w	r2, r2, #8
 8005df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69da      	ldr	r2, [r3, #28]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 0204 	bic.w	r2, r2, #4
 8005e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69d9      	ldr	r1, [r3, #28]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	61da      	str	r2, [r3, #28]
      break;
 8005e14:	e023      	b.n	8005e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68b9      	ldr	r1, [r7, #8]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fb1d 	bl	800645c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69da      	ldr	r2, [r3, #28]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69da      	ldr	r2, [r3, #28]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69d9      	ldr	r1, [r3, #28]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	021a      	lsls	r2, r3, #8
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	61da      	str	r2, [r3, #28]
      break;
 8005e56:	e002      	b.n	8005e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_TIM_ConfigClockSource+0x1c>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e0b4      	b.n	8005ff6 <HAL_TIM_ConfigClockSource+0x186>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ec4:	d03e      	beq.n	8005f44 <HAL_TIM_ConfigClockSource+0xd4>
 8005ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eca:	f200 8087 	bhi.w	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
 8005ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed2:	f000 8086 	beq.w	8005fe2 <HAL_TIM_ConfigClockSource+0x172>
 8005ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eda:	d87f      	bhi.n	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
 8005edc:	2b70      	cmp	r3, #112	@ 0x70
 8005ede:	d01a      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0xa6>
 8005ee0:	2b70      	cmp	r3, #112	@ 0x70
 8005ee2:	d87b      	bhi.n	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
 8005ee4:	2b60      	cmp	r3, #96	@ 0x60
 8005ee6:	d050      	beq.n	8005f8a <HAL_TIM_ConfigClockSource+0x11a>
 8005ee8:	2b60      	cmp	r3, #96	@ 0x60
 8005eea:	d877      	bhi.n	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
 8005eec:	2b50      	cmp	r3, #80	@ 0x50
 8005eee:	d03c      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0xfa>
 8005ef0:	2b50      	cmp	r3, #80	@ 0x50
 8005ef2:	d873      	bhi.n	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
 8005ef4:	2b40      	cmp	r3, #64	@ 0x40
 8005ef6:	d058      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x13a>
 8005ef8:	2b40      	cmp	r3, #64	@ 0x40
 8005efa:	d86f      	bhi.n	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
 8005efc:	2b30      	cmp	r3, #48	@ 0x30
 8005efe:	d064      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0x15a>
 8005f00:	2b30      	cmp	r3, #48	@ 0x30
 8005f02:	d86b      	bhi.n	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	d060      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0x15a>
 8005f08:	2b20      	cmp	r3, #32
 8005f0a:	d867      	bhi.n	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d05c      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0x15a>
 8005f10:	2b10      	cmp	r3, #16
 8005f12:	d05a      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0x15a>
 8005f14:	e062      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f26:	f000 fb69 	bl	80065fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	609a      	str	r2, [r3, #8]
      break;
 8005f42:	e04f      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f54:	f000 fb52 	bl	80065fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f66:	609a      	str	r2, [r3, #8]
      break;
 8005f68:	e03c      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f76:	461a      	mov	r2, r3
 8005f78:	f000 fac6 	bl	8006508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2150      	movs	r1, #80	@ 0x50
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fb1f 	bl	80065c6 <TIM_ITRx_SetConfig>
      break;
 8005f88:	e02c      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f96:	461a      	mov	r2, r3
 8005f98:	f000 fae5 	bl	8006566 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2160      	movs	r1, #96	@ 0x60
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 fb0f 	bl	80065c6 <TIM_ITRx_SetConfig>
      break;
 8005fa8:	e01c      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f000 faa6 	bl	8006508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2140      	movs	r1, #64	@ 0x40
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 faff 	bl	80065c6 <TIM_ITRx_SetConfig>
      break;
 8005fc8:	e00c      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	f000 faf6 	bl	80065c6 <TIM_ITRx_SetConfig>
      break;
 8005fda:	e003      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe0:	e000      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
	...

08006050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a46      	ldr	r2, [pc, #280]	@ (800617c <TIM_Base_SetConfig+0x12c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d013      	beq.n	8006090 <TIM_Base_SetConfig+0x40>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800606e:	d00f      	beq.n	8006090 <TIM_Base_SetConfig+0x40>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a43      	ldr	r2, [pc, #268]	@ (8006180 <TIM_Base_SetConfig+0x130>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00b      	beq.n	8006090 <TIM_Base_SetConfig+0x40>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a42      	ldr	r2, [pc, #264]	@ (8006184 <TIM_Base_SetConfig+0x134>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d007      	beq.n	8006090 <TIM_Base_SetConfig+0x40>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a41      	ldr	r2, [pc, #260]	@ (8006188 <TIM_Base_SetConfig+0x138>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_Base_SetConfig+0x40>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a40      	ldr	r2, [pc, #256]	@ (800618c <TIM_Base_SetConfig+0x13c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d108      	bne.n	80060a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a35      	ldr	r2, [pc, #212]	@ (800617c <TIM_Base_SetConfig+0x12c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d02b      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b0:	d027      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a32      	ldr	r2, [pc, #200]	@ (8006180 <TIM_Base_SetConfig+0x130>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d023      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a31      	ldr	r2, [pc, #196]	@ (8006184 <TIM_Base_SetConfig+0x134>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d01f      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a30      	ldr	r2, [pc, #192]	@ (8006188 <TIM_Base_SetConfig+0x138>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d01b      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a2f      	ldr	r2, [pc, #188]	@ (800618c <TIM_Base_SetConfig+0x13c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d017      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006190 <TIM_Base_SetConfig+0x140>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d013      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006194 <TIM_Base_SetConfig+0x144>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00f      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006198 <TIM_Base_SetConfig+0x148>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00b      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a2b      	ldr	r2, [pc, #172]	@ (800619c <TIM_Base_SetConfig+0x14c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d007      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a2a      	ldr	r2, [pc, #168]	@ (80061a0 <TIM_Base_SetConfig+0x150>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d003      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a29      	ldr	r2, [pc, #164]	@ (80061a4 <TIM_Base_SetConfig+0x154>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d108      	bne.n	8006114 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a10      	ldr	r2, [pc, #64]	@ (800617c <TIM_Base_SetConfig+0x12c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_Base_SetConfig+0xf8>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a12      	ldr	r2, [pc, #72]	@ (800618c <TIM_Base_SetConfig+0x13c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d103      	bne.n	8006150 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	691a      	ldr	r2, [r3, #16]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b01      	cmp	r3, #1
 8006160:	d105      	bne.n	800616e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f023 0201 	bic.w	r2, r3, #1
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	611a      	str	r2, [r3, #16]
  }
}
 800616e:	bf00      	nop
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	40010000 	.word	0x40010000
 8006180:	40000400 	.word	0x40000400
 8006184:	40000800 	.word	0x40000800
 8006188:	40000c00 	.word	0x40000c00
 800618c:	40010400 	.word	0x40010400
 8006190:	40014000 	.word	0x40014000
 8006194:	40014400 	.word	0x40014400
 8006198:	40014800 	.word	0x40014800
 800619c:	40001800 	.word	0x40001800
 80061a0:	40001c00 	.word	0x40001c00
 80061a4:	40002000 	.word	0x40002000

080061a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	f023 0201 	bic.w	r2, r3, #1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0303 	bic.w	r3, r3, #3
 80061de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f023 0302 	bic.w	r3, r3, #2
 80061f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a20      	ldr	r2, [pc, #128]	@ (8006280 <TIM_OC1_SetConfig+0xd8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d003      	beq.n	800620c <TIM_OC1_SetConfig+0x64>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a1f      	ldr	r2, [pc, #124]	@ (8006284 <TIM_OC1_SetConfig+0xdc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d10c      	bne.n	8006226 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f023 0308 	bic.w	r3, r3, #8
 8006212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f023 0304 	bic.w	r3, r3, #4
 8006224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a15      	ldr	r2, [pc, #84]	@ (8006280 <TIM_OC1_SetConfig+0xd8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d003      	beq.n	8006236 <TIM_OC1_SetConfig+0x8e>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a14      	ldr	r2, [pc, #80]	@ (8006284 <TIM_OC1_SetConfig+0xdc>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d111      	bne.n	800625a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800623c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	621a      	str	r2, [r3, #32]
}
 8006274:	bf00      	nop
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	40010000 	.word	0x40010000
 8006284:	40010400 	.word	0x40010400

08006288 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f023 0210 	bic.w	r2, r3, #16
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f023 0320 	bic.w	r3, r3, #32
 80062d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	4313      	orrs	r3, r2
 80062de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a22      	ldr	r2, [pc, #136]	@ (800636c <TIM_OC2_SetConfig+0xe4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d003      	beq.n	80062f0 <TIM_OC2_SetConfig+0x68>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a21      	ldr	r2, [pc, #132]	@ (8006370 <TIM_OC2_SetConfig+0xe8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d10d      	bne.n	800630c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800630a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a17      	ldr	r2, [pc, #92]	@ (800636c <TIM_OC2_SetConfig+0xe4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d003      	beq.n	800631c <TIM_OC2_SetConfig+0x94>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a16      	ldr	r2, [pc, #88]	@ (8006370 <TIM_OC2_SetConfig+0xe8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d113      	bne.n	8006344 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006322:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800632a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	621a      	str	r2, [r3, #32]
}
 800635e:	bf00      	nop
 8006360:	371c      	adds	r7, #28
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	40010000 	.word	0x40010000
 8006370:	40010400 	.word	0x40010400

08006374 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0303 	bic.w	r3, r3, #3
 80063aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a21      	ldr	r2, [pc, #132]	@ (8006454 <TIM_OC3_SetConfig+0xe0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_OC3_SetConfig+0x66>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a20      	ldr	r2, [pc, #128]	@ (8006458 <TIM_OC3_SetConfig+0xe4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d10d      	bne.n	80063f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a16      	ldr	r2, [pc, #88]	@ (8006454 <TIM_OC3_SetConfig+0xe0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d003      	beq.n	8006406 <TIM_OC3_SetConfig+0x92>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a15      	ldr	r2, [pc, #84]	@ (8006458 <TIM_OC3_SetConfig+0xe4>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d113      	bne.n	800642e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800640c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4313      	orrs	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	621a      	str	r2, [r3, #32]
}
 8006448:	bf00      	nop
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	40010000 	.word	0x40010000
 8006458:	40010400 	.word	0x40010400

0800645c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800648a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	021b      	lsls	r3, r3, #8
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	031b      	lsls	r3, r3, #12
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a12      	ldr	r2, [pc, #72]	@ (8006500 <TIM_OC4_SetConfig+0xa4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_OC4_SetConfig+0x68>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a11      	ldr	r2, [pc, #68]	@ (8006504 <TIM_OC4_SetConfig+0xa8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d109      	bne.n	80064d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	019b      	lsls	r3, r3, #6
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	621a      	str	r2, [r3, #32]
}
 80064f2:	bf00      	nop
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40010000 	.word	0x40010000
 8006504:	40010400 	.word	0x40010400

08006508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	f023 0201 	bic.w	r2, r3, #1
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	011b      	lsls	r3, r3, #4
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	4313      	orrs	r3, r2
 800653c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f023 030a 	bic.w	r3, r3, #10
 8006544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	621a      	str	r2, [r3, #32]
}
 800655a:	bf00      	nop
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006566:	b480      	push	{r7}
 8006568:	b087      	sub	sp, #28
 800656a:	af00      	add	r7, sp, #0
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	f023 0210 	bic.w	r2, r3, #16
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006590:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	031b      	lsls	r3, r3, #12
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4313      	orrs	r3, r2
 800659a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80065a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	621a      	str	r2, [r3, #32]
}
 80065ba:	bf00      	nop
 80065bc:	371c      	adds	r7, #28
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b085      	sub	sp, #20
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	f043 0307 	orr.w	r3, r3, #7
 80065e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	609a      	str	r2, [r3, #8]
}
 80065f0:	bf00      	nop
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	021a      	lsls	r2, r3, #8
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	431a      	orrs	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4313      	orrs	r3, r2
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	609a      	str	r2, [r3, #8]
}
 8006630:	bf00      	nop
 8006632:	371c      	adds	r7, #28
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f003 031f 	and.w	r3, r3, #31
 800664e:	2201      	movs	r2, #1
 8006650:	fa02 f303 	lsl.w	r3, r2, r3
 8006654:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1a      	ldr	r2, [r3, #32]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	43db      	mvns	r3, r3
 800665e:	401a      	ands	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a1a      	ldr	r2, [r3, #32]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f003 031f 	and.w	r3, r3, #31
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	fa01 f303 	lsl.w	r3, r1, r3
 8006674:	431a      	orrs	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	621a      	str	r2, [r3, #32]
}
 800667a:	bf00      	nop
 800667c:	371c      	adds	r7, #28
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
	...

08006688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800669c:	2302      	movs	r3, #2
 800669e:	e05a      	b.n	8006756 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a21      	ldr	r2, [pc, #132]	@ (8006764 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d022      	beq.n	800672a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ec:	d01d      	beq.n	800672a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006768 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d018      	beq.n	800672a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a1b      	ldr	r2, [pc, #108]	@ (800676c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d013      	beq.n	800672a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a1a      	ldr	r2, [pc, #104]	@ (8006770 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d00e      	beq.n	800672a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a18      	ldr	r2, [pc, #96]	@ (8006774 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d009      	beq.n	800672a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a17      	ldr	r2, [pc, #92]	@ (8006778 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d004      	beq.n	800672a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a15      	ldr	r2, [pc, #84]	@ (800677c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d10c      	bne.n	8006744 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006730:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	4313      	orrs	r3, r2
 800673a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	40010000 	.word	0x40010000
 8006768:	40000400 	.word	0x40000400
 800676c:	40000800 	.word	0x40000800
 8006770:	40000c00 	.word	0x40000c00
 8006774:	40010400 	.word	0x40010400
 8006778:	40014000 	.word	0x40014000
 800677c:	40001800 	.word	0x40001800

08006780 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e042      	b.n	8006840 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d106      	bne.n	80067d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7fa ff58 	bl	8001684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2224      	movs	r2, #36	@ 0x24
 80067d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 f81d 	bl	800782c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691a      	ldr	r2, [r3, #16]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695a      	ldr	r2, [r3, #20]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2220      	movs	r2, #32
 800682c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2220      	movs	r2, #32
 8006834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08a      	sub	sp, #40	@ 0x28
 800684c:	af02      	add	r7, sp, #8
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	603b      	str	r3, [r7, #0]
 8006854:	4613      	mov	r3, r2
 8006856:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b20      	cmp	r3, #32
 8006866:	d175      	bne.n	8006954 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <HAL_UART_Transmit+0x2c>
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e06e      	b.n	8006956 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2221      	movs	r2, #33	@ 0x21
 8006882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006886:	f7fb f9ed 	bl	8001c64 <HAL_GetTick>
 800688a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	88fa      	ldrh	r2, [r7, #6]
 8006890:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	88fa      	ldrh	r2, [r7, #6]
 8006896:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068a0:	d108      	bne.n	80068b4 <HAL_UART_Transmit+0x6c>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d104      	bne.n	80068b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	61bb      	str	r3, [r7, #24]
 80068b2:	e003      	b.n	80068bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068b8:	2300      	movs	r3, #0
 80068ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068bc:	e02e      	b.n	800691c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	2200      	movs	r2, #0
 80068c6:	2180      	movs	r1, #128	@ 0x80
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 fcf5 	bl	80072b8 <UART_WaitOnFlagUntilTimeout>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e03a      	b.n	8006956 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10b      	bne.n	80068fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	3302      	adds	r3, #2
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	e007      	b.n	800690e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	781a      	ldrb	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	3301      	adds	r3, #1
 800690c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006912:	b29b      	uxth	r3, r3
 8006914:	3b01      	subs	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006920:	b29b      	uxth	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1cb      	bne.n	80068be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2200      	movs	r2, #0
 800692e:	2140      	movs	r1, #64	@ 0x40
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 fcc1 	bl	80072b8 <UART_WaitOnFlagUntilTimeout>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d005      	beq.n	8006948 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2220      	movs	r2, #32
 8006940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e006      	b.n	8006956 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006950:	2300      	movs	r3, #0
 8006952:	e000      	b.n	8006956 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006954:	2302      	movs	r3, #2
  }
}
 8006956:	4618      	mov	r0, r3
 8006958:	3720      	adds	r7, #32
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b08a      	sub	sp, #40	@ 0x28
 8006962:	af02      	add	r7, sp, #8
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	603b      	str	r3, [r7, #0]
 800696a:	4613      	mov	r3, r2
 800696c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b20      	cmp	r3, #32
 800697c:	f040 8081 	bne.w	8006a82 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <HAL_UART_Receive+0x2e>
 8006986:	88fb      	ldrh	r3, [r7, #6]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e079      	b.n	8006a84 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2222      	movs	r2, #34	@ 0x22
 800699a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069a4:	f7fb f95e 	bl	8001c64 <HAL_GetTick>
 80069a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	88fa      	ldrh	r2, [r7, #6]
 80069ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	88fa      	ldrh	r2, [r7, #6]
 80069b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069be:	d108      	bne.n	80069d2 <HAL_UART_Receive+0x74>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80069c8:	2300      	movs	r3, #0
 80069ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	e003      	b.n	80069da <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80069da:	e047      	b.n	8006a6c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2200      	movs	r2, #0
 80069e4:	2120      	movs	r1, #32
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 fc66 	bl	80072b8 <UART_WaitOnFlagUntilTimeout>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d005      	beq.n	80069fe <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2220      	movs	r2, #32
 80069f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e042      	b.n	8006a84 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10c      	bne.n	8006a1e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	3302      	adds	r3, #2
 8006a1a:	61bb      	str	r3, [r7, #24]
 8006a1c:	e01f      	b.n	8006a5e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a26:	d007      	beq.n	8006a38 <HAL_UART_Receive+0xda>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <HAL_UART_Receive+0xe8>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d106      	bne.n	8006a46 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	e008      	b.n	8006a58 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	3b01      	subs	r3, #1
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1b2      	bne.n	80069dc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	e000      	b.n	8006a84 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006a82:	2302      	movs	r3, #2
  }
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3720      	adds	r7, #32
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08c      	sub	sp, #48	@ 0x30
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	4613      	mov	r3, r2
 8006a98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b20      	cmp	r3, #32
 8006aa4:	d14a      	bne.n	8006b3c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006aac:	88fb      	ldrh	r3, [r7, #6]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e043      	b.n	8006b3e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006ac2:	88fb      	ldrh	r3, [r7, #6]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	68b9      	ldr	r1, [r7, #8]
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 fc4f 	bl	800736c <UART_Start_Receive_DMA>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006ad4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d12c      	bne.n	8006b36 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d125      	bne.n	8006b30 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	613b      	str	r3, [r7, #16]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	613b      	str	r3, [r7, #16]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	613b      	str	r3, [r7, #16]
 8006af8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	330c      	adds	r3, #12
 8006b00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	617b      	str	r3, [r7, #20]
   return(result);
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f043 0310 	orr.w	r3, r3, #16
 8006b10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	330c      	adds	r3, #12
 8006b18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b1a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	6a39      	ldr	r1, [r7, #32]
 8006b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e5      	bne.n	8006afa <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006b2e:	e002      	b.n	8006b36 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006b36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b3a:	e000      	b.n	8006b3e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006b3c:	2302      	movs	r3, #2
  }
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3730      	adds	r7, #48	@ 0x30
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b0ba      	sub	sp, #232	@ 0xe8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006b86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10f      	bne.n	8006bae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b92:	f003 0320 	and.w	r3, r3, #32
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d009      	beq.n	8006bae <HAL_UART_IRQHandler+0x66>
 8006b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b9e:	f003 0320 	and.w	r3, r3, #32
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fd81 	bl	80076ae <UART_Receive_IT>
      return;
 8006bac:	e25b      	b.n	8007066 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f000 80de 	beq.w	8006d74 <HAL_UART_IRQHandler+0x22c>
 8006bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d106      	bne.n	8006bd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bc8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 80d1 	beq.w	8006d74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00b      	beq.n	8006bf6 <HAL_UART_IRQHandler+0xae>
 8006bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d005      	beq.n	8006bf6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bee:	f043 0201 	orr.w	r2, r3, #1
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bfa:	f003 0304 	and.w	r3, r3, #4
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00b      	beq.n	8006c1a <HAL_UART_IRQHandler+0xd2>
 8006c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c12:	f043 0202 	orr.w	r2, r3, #2
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00b      	beq.n	8006c3e <HAL_UART_IRQHandler+0xf6>
 8006c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d005      	beq.n	8006c3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c36:	f043 0204 	orr.w	r2, r3, #4
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c42:	f003 0308 	and.w	r3, r3, #8
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d011      	beq.n	8006c6e <HAL_UART_IRQHandler+0x126>
 8006c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d105      	bne.n	8006c62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d005      	beq.n	8006c6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c66:	f043 0208 	orr.w	r2, r3, #8
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 81f2 	beq.w	800705c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c7c:	f003 0320 	and.w	r3, r3, #32
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d008      	beq.n	8006c96 <HAL_UART_IRQHandler+0x14e>
 8006c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c88:	f003 0320 	and.w	r3, r3, #32
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fd0c 	bl	80076ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca0:	2b40      	cmp	r3, #64	@ 0x40
 8006ca2:	bf0c      	ite	eq
 8006ca4:	2301      	moveq	r3, #1
 8006ca6:	2300      	movne	r3, #0
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cb2:	f003 0308 	and.w	r3, r3, #8
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d103      	bne.n	8006cc2 <HAL_UART_IRQHandler+0x17a>
 8006cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d04f      	beq.n	8006d62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fc14 	bl	80074f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd2:	2b40      	cmp	r3, #64	@ 0x40
 8006cd4:	d141      	bne.n	8006d5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3314      	adds	r3, #20
 8006cdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ce4:	e853 3f00 	ldrex	r3, [r3]
 8006ce8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006cf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3314      	adds	r3, #20
 8006cfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006d0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006d1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1d9      	bne.n	8006cd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d013      	beq.n	8006d52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8006f28 <HAL_UART_IRQHandler+0x3e0>)
 8006d30:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fb fa1c 	bl	8002174 <HAL_DMA_Abort_IT>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d016      	beq.n	8006d70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d50:	e00e      	b.n	8006d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f9a8 	bl	80070a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d58:	e00a      	b.n	8006d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f9a4 	bl	80070a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d60:	e006      	b.n	8006d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f9a0 	bl	80070a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006d6e:	e175      	b.n	800705c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d70:	bf00      	nop
    return;
 8006d72:	e173      	b.n	800705c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	f040 814f 	bne.w	800701c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 8148 	beq.w	800701c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d90:	f003 0310 	and.w	r3, r3, #16
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 8141 	beq.w	800701c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60bb      	str	r3, [r7, #8]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60bb      	str	r3, [r7, #8]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	60bb      	str	r3, [r7, #8]
 8006dae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dba:	2b40      	cmp	r3, #64	@ 0x40
 8006dbc:	f040 80b6 	bne.w	8006f2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006dcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 8145 	beq.w	8007060 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006dda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006dde:	429a      	cmp	r2, r3
 8006de0:	f080 813e 	bcs.w	8007060 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006dea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006df6:	f000 8088 	beq.w	8006f0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	330c      	adds	r3, #12
 8006e00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e08:	e853 3f00 	ldrex	r3, [r3]
 8006e0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	330c      	adds	r3, #12
 8006e22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006e26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006e32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1d9      	bne.n	8006dfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3314      	adds	r3, #20
 8006e4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e58:	f023 0301 	bic.w	r3, r3, #1
 8006e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3314      	adds	r3, #20
 8006e66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006e6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1e1      	bne.n	8006e46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3314      	adds	r3, #20
 8006e88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3314      	adds	r3, #20
 8006ea2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ea6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006eac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006eae:	e841 2300 	strex	r3, r2, [r1]
 8006eb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1e3      	bne.n	8006e82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2220      	movs	r2, #32
 8006ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	330c      	adds	r3, #12
 8006ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ed2:	e853 3f00 	ldrex	r3, [r3]
 8006ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ed8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eda:	f023 0310 	bic.w	r3, r3, #16
 8006ede:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	330c      	adds	r3, #12
 8006ee8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006eec:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006eee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ef2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006efa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1e3      	bne.n	8006ec8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fb f8c5 	bl	8002094 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 ff7f 	bl	8007e24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f26:	e09b      	b.n	8007060 <HAL_UART_IRQHandler+0x518>
 8006f28:	080075b7 	.word	0x080075b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 808e 	beq.w	8007064 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006f48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 8089 	beq.w	8007064 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	330c      	adds	r3, #12
 8006f58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	330c      	adds	r3, #12
 8006f72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006f76:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e3      	bne.n	8006f52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3314      	adds	r3, #20
 8006f90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f94:	e853 3f00 	ldrex	r3, [r3]
 8006f98:	623b      	str	r3, [r7, #32]
   return(result);
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	f023 0301 	bic.w	r3, r3, #1
 8006fa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3314      	adds	r3, #20
 8006faa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006fae:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e3      	bne.n	8006f8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	330c      	adds	r3, #12
 8006fd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	e853 3f00 	ldrex	r3, [r3]
 8006fde:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 0310 	bic.w	r3, r3, #16
 8006fe6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	330c      	adds	r3, #12
 8006ff0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ff4:	61fa      	str	r2, [r7, #28]
 8006ff6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff8:	69b9      	ldr	r1, [r7, #24]
 8006ffa:	69fa      	ldr	r2, [r7, #28]
 8006ffc:	e841 2300 	strex	r3, r2, [r1]
 8007000:	617b      	str	r3, [r7, #20]
   return(result);
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1e3      	bne.n	8006fd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800700e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 ff05 	bl	8007e24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800701a:	e023      	b.n	8007064 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800701c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007024:	2b00      	cmp	r3, #0
 8007026:	d009      	beq.n	800703c <HAL_UART_IRQHandler+0x4f4>
 8007028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800702c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fad2 	bl	80075de <UART_Transmit_IT>
    return;
 800703a:	e014      	b.n	8007066 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800703c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00e      	beq.n	8007066 <HAL_UART_IRQHandler+0x51e>
 8007048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800704c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	d008      	beq.n	8007066 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fb12 	bl	800767e <UART_EndTransmit_IT>
    return;
 800705a:	e004      	b.n	8007066 <HAL_UART_IRQHandler+0x51e>
    return;
 800705c:	bf00      	nop
 800705e:	e002      	b.n	8007066 <HAL_UART_IRQHandler+0x51e>
      return;
 8007060:	bf00      	nop
 8007062:	e000      	b.n	8007066 <HAL_UART_IRQHandler+0x51e>
      return;
 8007064:	bf00      	nop
  }
}
 8007066:	37e8      	adds	r7, #232	@ 0xe8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b09c      	sub	sp, #112	@ 0x70
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d172      	bne.n	80071be <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80070d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070da:	2200      	movs	r2, #0
 80070dc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	330c      	adds	r3, #12
 80070e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070e8:	e853 3f00 	ldrex	r3, [r3]
 80070ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80070ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	330c      	adds	r3, #12
 80070fc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80070fe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007100:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007102:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007104:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007106:	e841 2300 	strex	r3, r2, [r1]
 800710a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800710c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1e5      	bne.n	80070de <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3314      	adds	r3, #20
 8007118:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711c:	e853 3f00 	ldrex	r3, [r3]
 8007120:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007124:	f023 0301 	bic.w	r3, r3, #1
 8007128:	667b      	str	r3, [r7, #100]	@ 0x64
 800712a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3314      	adds	r3, #20
 8007130:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007132:	647a      	str	r2, [r7, #68]	@ 0x44
 8007134:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007138:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e5      	bne.n	8007112 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007146:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3314      	adds	r3, #20
 800714c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	e853 3f00 	ldrex	r3, [r3]
 8007154:	623b      	str	r3, [r7, #32]
   return(result);
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800715c:	663b      	str	r3, [r7, #96]	@ 0x60
 800715e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3314      	adds	r3, #20
 8007164:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007166:	633a      	str	r2, [r7, #48]	@ 0x30
 8007168:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800716c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800716e:	e841 2300 	strex	r3, r2, [r1]
 8007172:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1e5      	bne.n	8007146 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800717a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800717c:	2220      	movs	r2, #32
 800717e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007186:	2b01      	cmp	r3, #1
 8007188:	d119      	bne.n	80071be <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800718a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	330c      	adds	r3, #12
 8007190:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	60fb      	str	r3, [r7, #12]
   return(result);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f023 0310 	bic.w	r3, r3, #16
 80071a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	330c      	adds	r3, #12
 80071a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80071aa:	61fa      	str	r2, [r7, #28]
 80071ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	69b9      	ldr	r1, [r7, #24]
 80071b0:	69fa      	ldr	r2, [r7, #28]
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	617b      	str	r3, [r7, #20]
   return(result);
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e5      	bne.n	800718a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071c0:	2200      	movs	r2, #0
 80071c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d106      	bne.n	80071da <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071d0:	4619      	mov	r1, r3
 80071d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80071d4:	f000 fe26 	bl	8007e24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071d8:	e002      	b.n	80071e0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80071da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80071dc:	f7ff ff50 	bl	8007080 <HAL_UART_RxCpltCallback>
}
 80071e0:	bf00      	nop
 80071e2:	3770      	adds	r7, #112	@ 0x70
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2201      	movs	r2, #1
 80071fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007200:	2b01      	cmp	r3, #1
 8007202:	d108      	bne.n	8007216 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007208:	085b      	lsrs	r3, r3, #1
 800720a:	b29b      	uxth	r3, r3
 800720c:	4619      	mov	r1, r3
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 fe08 	bl	8007e24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007214:	e002      	b.n	800721c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7ff ff3c 	bl	8007094 <HAL_UART_RxHalfCpltCallback>
}
 800721c:	bf00      	nop
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800722c:	2300      	movs	r3, #0
 800722e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007234:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007240:	2b80      	cmp	r3, #128	@ 0x80
 8007242:	bf0c      	ite	eq
 8007244:	2301      	moveq	r3, #1
 8007246:	2300      	movne	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b21      	cmp	r3, #33	@ 0x21
 8007256:	d108      	bne.n	800726a <UART_DMAError+0x46>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2200      	movs	r2, #0
 8007262:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007264:	68b8      	ldr	r0, [r7, #8]
 8007266:	f000 f91b 	bl	80074a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007274:	2b40      	cmp	r3, #64	@ 0x40
 8007276:	bf0c      	ite	eq
 8007278:	2301      	moveq	r3, #1
 800727a:	2300      	movne	r3, #0
 800727c:	b2db      	uxtb	r3, r3
 800727e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b22      	cmp	r3, #34	@ 0x22
 800728a:	d108      	bne.n	800729e <UART_DMAError+0x7a>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d005      	beq.n	800729e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2200      	movs	r2, #0
 8007296:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007298:	68b8      	ldr	r0, [r7, #8]
 800729a:	f000 f929 	bl	80074f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a2:	f043 0210 	orr.w	r2, r3, #16
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072aa:	68b8      	ldr	r0, [r7, #8]
 80072ac:	f7ff fefc 	bl	80070a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072b0:	bf00      	nop
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	4613      	mov	r3, r2
 80072c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072c8:	e03b      	b.n	8007342 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d0:	d037      	beq.n	8007342 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072d2:	f7fa fcc7 	bl	8001c64 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	6a3a      	ldr	r2, [r7, #32]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d302      	bcc.n	80072e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e03a      	b.n	8007362 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	f003 0304 	and.w	r3, r3, #4
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d023      	beq.n	8007342 <UART_WaitOnFlagUntilTimeout+0x8a>
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2b80      	cmp	r3, #128	@ 0x80
 80072fe:	d020      	beq.n	8007342 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2b40      	cmp	r3, #64	@ 0x40
 8007304:	d01d      	beq.n	8007342 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b08      	cmp	r3, #8
 8007312:	d116      	bne.n	8007342 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007314:	2300      	movs	r3, #0
 8007316:	617b      	str	r3, [r7, #20]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	617b      	str	r3, [r7, #20]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	617b      	str	r3, [r7, #20]
 8007328:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 f8e0 	bl	80074f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2208      	movs	r2, #8
 8007334:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e00f      	b.n	8007362 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	4013      	ands	r3, r2
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	429a      	cmp	r2, r3
 8007350:	bf0c      	ite	eq
 8007352:	2301      	moveq	r3, #1
 8007354:	2300      	movne	r3, #0
 8007356:	b2db      	uxtb	r3, r3
 8007358:	461a      	mov	r2, r3
 800735a:	79fb      	ldrb	r3, [r7, #7]
 800735c:	429a      	cmp	r2, r3
 800735e:	d0b4      	beq.n	80072ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b098      	sub	sp, #96	@ 0x60
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	88fa      	ldrh	r2, [r7, #6]
 8007384:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2222      	movs	r2, #34	@ 0x22
 8007390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007398:	4a3e      	ldr	r2, [pc, #248]	@ (8007494 <UART_Start_Receive_DMA+0x128>)
 800739a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a0:	4a3d      	ldr	r2, [pc, #244]	@ (8007498 <UART_Start_Receive_DMA+0x12c>)
 80073a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a8:	4a3c      	ldr	r2, [pc, #240]	@ (800749c <UART_Start_Receive_DMA+0x130>)
 80073aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073b0:	2200      	movs	r2, #0
 80073b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80073b4:	f107 0308 	add.w	r3, r7, #8
 80073b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3304      	adds	r3, #4
 80073c4:	4619      	mov	r1, r3
 80073c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	88fb      	ldrh	r3, [r7, #6]
 80073cc:	f7fa fe0a 	bl	8001fe4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80073d0:	2300      	movs	r3, #0
 80073d2:	613b      	str	r3, [r7, #16]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	613b      	str	r3, [r7, #16]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	613b      	str	r3, [r7, #16]
 80073e4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d019      	beq.n	8007422 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	330c      	adds	r3, #12
 80073f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073f8:	e853 3f00 	ldrex	r3, [r3]
 80073fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007404:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	330c      	adds	r3, #12
 800740c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800740e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007410:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007414:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007416:	e841 2300 	strex	r3, r2, [r1]
 800741a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800741c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e5      	bne.n	80073ee <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3314      	adds	r3, #20
 8007428:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742c:	e853 3f00 	ldrex	r3, [r3]
 8007430:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007434:	f043 0301 	orr.w	r3, r3, #1
 8007438:	657b      	str	r3, [r7, #84]	@ 0x54
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3314      	adds	r3, #20
 8007440:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007442:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007444:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007448:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800744a:	e841 2300 	strex	r3, r2, [r1]
 800744e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1e5      	bne.n	8007422 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3314      	adds	r3, #20
 800745c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	617b      	str	r3, [r7, #20]
   return(result);
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800746c:	653b      	str	r3, [r7, #80]	@ 0x50
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3314      	adds	r3, #20
 8007474:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007476:	627a      	str	r2, [r7, #36]	@ 0x24
 8007478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6a39      	ldr	r1, [r7, #32]
 800747c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	61fb      	str	r3, [r7, #28]
   return(result);
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e5      	bne.n	8007456 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3760      	adds	r7, #96	@ 0x60
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	080070bd 	.word	0x080070bd
 8007498:	080071e9 	.word	0x080071e9
 800749c:	08007225 	.word	0x08007225

080074a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b089      	sub	sp, #36	@ 0x24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	330c      	adds	r3, #12
 80074ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	e853 3f00 	ldrex	r3, [r3]
 80074b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80074be:	61fb      	str	r3, [r7, #28]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	330c      	adds	r3, #12
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	61ba      	str	r2, [r7, #24]
 80074ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074cc:	6979      	ldr	r1, [r7, #20]
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	e841 2300 	strex	r3, r2, [r1]
 80074d4:	613b      	str	r3, [r7, #16]
   return(result);
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e5      	bne.n	80074a8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2220      	movs	r2, #32
 80074e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80074e4:	bf00      	nop
 80074e6:	3724      	adds	r7, #36	@ 0x24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b095      	sub	sp, #84	@ 0x54
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	330c      	adds	r3, #12
 80074fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800750e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	330c      	adds	r3, #12
 8007516:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007518:	643a      	str	r2, [r7, #64]	@ 0x40
 800751a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800751e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e5      	bne.n	80074f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3314      	adds	r3, #20
 8007532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	e853 3f00 	ldrex	r3, [r3]
 800753a:	61fb      	str	r3, [r7, #28]
   return(result);
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	f023 0301 	bic.w	r3, r3, #1
 8007542:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3314      	adds	r3, #20
 800754a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800754c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800754e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007554:	e841 2300 	strex	r3, r2, [r1]
 8007558:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800755a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e5      	bne.n	800752c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007564:	2b01      	cmp	r3, #1
 8007566:	d119      	bne.n	800759c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	330c      	adds	r3, #12
 800756e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	e853 3f00 	ldrex	r3, [r3]
 8007576:	60bb      	str	r3, [r7, #8]
   return(result);
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	f023 0310 	bic.w	r3, r3, #16
 800757e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	330c      	adds	r3, #12
 8007586:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007588:	61ba      	str	r2, [r7, #24]
 800758a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758c:	6979      	ldr	r1, [r7, #20]
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	e841 2300 	strex	r3, r2, [r1]
 8007594:	613b      	str	r3, [r7, #16]
   return(result);
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e5      	bne.n	8007568 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2220      	movs	r2, #32
 80075a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80075aa:	bf00      	nop
 80075ac:	3754      	adds	r7, #84	@ 0x54
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b084      	sub	sp, #16
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f7ff fd69 	bl	80070a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075d6:	bf00      	nop
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075de:	b480      	push	{r7}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b21      	cmp	r3, #33	@ 0x21
 80075f0:	d13e      	bne.n	8007670 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075fa:	d114      	bne.n	8007626 <UART_Transmit_IT+0x48>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d110      	bne.n	8007626 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007618:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	1c9a      	adds	r2, r3, #2
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	621a      	str	r2, [r3, #32]
 8007624:	e008      	b.n	8007638 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	1c59      	adds	r1, r3, #1
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	6211      	str	r1, [r2, #32]
 8007630:	781a      	ldrb	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800763c:	b29b      	uxth	r3, r3
 800763e:	3b01      	subs	r3, #1
 8007640:	b29b      	uxth	r3, r3
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	4619      	mov	r1, r3
 8007646:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10f      	bne.n	800766c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800765a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800766a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	e000      	b.n	8007672 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007670:	2302      	movs	r3, #2
  }
}
 8007672:	4618      	mov	r0, r3
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68da      	ldr	r2, [r3, #12]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007694:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2220      	movs	r2, #32
 800769a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7ff fce4 	bl	800706c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b08c      	sub	sp, #48	@ 0x30
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b22      	cmp	r3, #34	@ 0x22
 80076c0:	f040 80ae 	bne.w	8007820 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076cc:	d117      	bne.n	80076fe <UART_Receive_IT+0x50>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d113      	bne.n	80076fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076de:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f6:	1c9a      	adds	r2, r3, #2
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80076fc:	e026      	b.n	800774c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007702:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007704:	2300      	movs	r3, #0
 8007706:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007710:	d007      	beq.n	8007722 <UART_Receive_IT+0x74>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10a      	bne.n	8007730 <UART_Receive_IT+0x82>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	b2da      	uxtb	r2, r3
 800772a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800772c:	701a      	strb	r2, [r3, #0]
 800772e:	e008      	b.n	8007742 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	b2db      	uxtb	r3, r3
 8007738:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800773c:	b2da      	uxtb	r2, r3
 800773e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007740:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007750:	b29b      	uxth	r3, r3
 8007752:	3b01      	subs	r3, #1
 8007754:	b29b      	uxth	r3, r3
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	4619      	mov	r1, r3
 800775a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800775c:	2b00      	cmp	r3, #0
 800775e:	d15d      	bne.n	800781c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0220 	bic.w	r2, r2, #32
 800776e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800777e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	695a      	ldr	r2, [r3, #20]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0201 	bic.w	r2, r2, #1
 800778e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2220      	movs	r2, #32
 8007794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d135      	bne.n	8007812 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	330c      	adds	r3, #12
 80077b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	613b      	str	r3, [r7, #16]
   return(result);
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f023 0310 	bic.w	r3, r3, #16
 80077c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	330c      	adds	r3, #12
 80077ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077cc:	623a      	str	r2, [r7, #32]
 80077ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	69f9      	ldr	r1, [r7, #28]
 80077d2:	6a3a      	ldr	r2, [r7, #32]
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e5      	bne.n	80077ac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0310 	and.w	r3, r3, #16
 80077ea:	2b10      	cmp	r3, #16
 80077ec:	d10a      	bne.n	8007804 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	60fb      	str	r3, [r7, #12]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	60fb      	str	r3, [r7, #12]
 8007802:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fb0a 	bl	8007e24 <HAL_UARTEx_RxEventCallback>
 8007810:	e002      	b.n	8007818 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7ff fc34 	bl	8007080 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	e002      	b.n	8007822 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	e000      	b.n	8007822 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007820:	2302      	movs	r3, #2
  }
}
 8007822:	4618      	mov	r0, r3
 8007824:	3730      	adds	r7, #48	@ 0x30
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800782c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007830:	b0c0      	sub	sp, #256	@ 0x100
 8007832:	af00      	add	r7, sp, #0
 8007834:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007848:	68d9      	ldr	r1, [r3, #12]
 800784a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	ea40 0301 	orr.w	r3, r0, r1
 8007854:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	431a      	orrs	r2, r3
 8007864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	431a      	orrs	r2, r3
 800786c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	4313      	orrs	r3, r2
 8007874:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007884:	f021 010c 	bic.w	r1, r1, #12
 8007888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007892:	430b      	orrs	r3, r1
 8007894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80078a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a6:	6999      	ldr	r1, [r3, #24]
 80078a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	ea40 0301 	orr.w	r3, r0, r1
 80078b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	4b8f      	ldr	r3, [pc, #572]	@ (8007af8 <UART_SetConfig+0x2cc>)
 80078bc:	429a      	cmp	r2, r3
 80078be:	d005      	beq.n	80078cc <UART_SetConfig+0xa0>
 80078c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	4b8d      	ldr	r3, [pc, #564]	@ (8007afc <UART_SetConfig+0x2d0>)
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d104      	bne.n	80078d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078cc:	f7fc fe56 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 80078d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80078d4:	e003      	b.n	80078de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078d6:	f7fc fe3d 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 80078da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078e8:	f040 810c 	bne.w	8007b04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80078fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80078fe:	4622      	mov	r2, r4
 8007900:	462b      	mov	r3, r5
 8007902:	1891      	adds	r1, r2, r2
 8007904:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007906:	415b      	adcs	r3, r3
 8007908:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800790a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800790e:	4621      	mov	r1, r4
 8007910:	eb12 0801 	adds.w	r8, r2, r1
 8007914:	4629      	mov	r1, r5
 8007916:	eb43 0901 	adc.w	r9, r3, r1
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800792a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800792e:	4690      	mov	r8, r2
 8007930:	4699      	mov	r9, r3
 8007932:	4623      	mov	r3, r4
 8007934:	eb18 0303 	adds.w	r3, r8, r3
 8007938:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800793c:	462b      	mov	r3, r5
 800793e:	eb49 0303 	adc.w	r3, r9, r3
 8007942:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007952:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007956:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800795a:	460b      	mov	r3, r1
 800795c:	18db      	adds	r3, r3, r3
 800795e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007960:	4613      	mov	r3, r2
 8007962:	eb42 0303 	adc.w	r3, r2, r3
 8007966:	657b      	str	r3, [r7, #84]	@ 0x54
 8007968:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800796c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007970:	f7f8 fc96 	bl	80002a0 <__aeabi_uldivmod>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4b61      	ldr	r3, [pc, #388]	@ (8007b00 <UART_SetConfig+0x2d4>)
 800797a:	fba3 2302 	umull	r2, r3, r3, r2
 800797e:	095b      	lsrs	r3, r3, #5
 8007980:	011c      	lsls	r4, r3, #4
 8007982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007986:	2200      	movs	r2, #0
 8007988:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800798c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007990:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007994:	4642      	mov	r2, r8
 8007996:	464b      	mov	r3, r9
 8007998:	1891      	adds	r1, r2, r2
 800799a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800799c:	415b      	adcs	r3, r3
 800799e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80079a4:	4641      	mov	r1, r8
 80079a6:	eb12 0a01 	adds.w	sl, r2, r1
 80079aa:	4649      	mov	r1, r9
 80079ac:	eb43 0b01 	adc.w	fp, r3, r1
 80079b0:	f04f 0200 	mov.w	r2, #0
 80079b4:	f04f 0300 	mov.w	r3, #0
 80079b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079c4:	4692      	mov	sl, r2
 80079c6:	469b      	mov	fp, r3
 80079c8:	4643      	mov	r3, r8
 80079ca:	eb1a 0303 	adds.w	r3, sl, r3
 80079ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079d2:	464b      	mov	r3, r9
 80079d4:	eb4b 0303 	adc.w	r3, fp, r3
 80079d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80079ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079f0:	460b      	mov	r3, r1
 80079f2:	18db      	adds	r3, r3, r3
 80079f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80079f6:	4613      	mov	r3, r2
 80079f8:	eb42 0303 	adc.w	r3, r2, r3
 80079fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80079fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a06:	f7f8 fc4b 	bl	80002a0 <__aeabi_uldivmod>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	4611      	mov	r1, r2
 8007a10:	4b3b      	ldr	r3, [pc, #236]	@ (8007b00 <UART_SetConfig+0x2d4>)
 8007a12:	fba3 2301 	umull	r2, r3, r3, r1
 8007a16:	095b      	lsrs	r3, r3, #5
 8007a18:	2264      	movs	r2, #100	@ 0x64
 8007a1a:	fb02 f303 	mul.w	r3, r2, r3
 8007a1e:	1acb      	subs	r3, r1, r3
 8007a20:	00db      	lsls	r3, r3, #3
 8007a22:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a26:	4b36      	ldr	r3, [pc, #216]	@ (8007b00 <UART_SetConfig+0x2d4>)
 8007a28:	fba3 2302 	umull	r2, r3, r3, r2
 8007a2c:	095b      	lsrs	r3, r3, #5
 8007a2e:	005b      	lsls	r3, r3, #1
 8007a30:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a34:	441c      	add	r4, r3
 8007a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a40:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007a48:	4642      	mov	r2, r8
 8007a4a:	464b      	mov	r3, r9
 8007a4c:	1891      	adds	r1, r2, r2
 8007a4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a50:	415b      	adcs	r3, r3
 8007a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a58:	4641      	mov	r1, r8
 8007a5a:	1851      	adds	r1, r2, r1
 8007a5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a5e:	4649      	mov	r1, r9
 8007a60:	414b      	adcs	r3, r1
 8007a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	f04f 0300 	mov.w	r3, #0
 8007a6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007a70:	4659      	mov	r1, fp
 8007a72:	00cb      	lsls	r3, r1, #3
 8007a74:	4651      	mov	r1, sl
 8007a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a7a:	4651      	mov	r1, sl
 8007a7c:	00ca      	lsls	r2, r1, #3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	4619      	mov	r1, r3
 8007a82:	4603      	mov	r3, r0
 8007a84:	4642      	mov	r2, r8
 8007a86:	189b      	adds	r3, r3, r2
 8007a88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a8c:	464b      	mov	r3, r9
 8007a8e:	460a      	mov	r2, r1
 8007a90:	eb42 0303 	adc.w	r3, r2, r3
 8007a94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007aa4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007aa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007aac:	460b      	mov	r3, r1
 8007aae:	18db      	adds	r3, r3, r3
 8007ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	eb42 0303 	adc.w	r3, r2, r3
 8007ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007aba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007abe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007ac2:	f7f8 fbed 	bl	80002a0 <__aeabi_uldivmod>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	460b      	mov	r3, r1
 8007aca:	4b0d      	ldr	r3, [pc, #52]	@ (8007b00 <UART_SetConfig+0x2d4>)
 8007acc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ad0:	095b      	lsrs	r3, r3, #5
 8007ad2:	2164      	movs	r1, #100	@ 0x64
 8007ad4:	fb01 f303 	mul.w	r3, r1, r3
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	00db      	lsls	r3, r3, #3
 8007adc:	3332      	adds	r3, #50	@ 0x32
 8007ade:	4a08      	ldr	r2, [pc, #32]	@ (8007b00 <UART_SetConfig+0x2d4>)
 8007ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae4:	095b      	lsrs	r3, r3, #5
 8007ae6:	f003 0207 	and.w	r2, r3, #7
 8007aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4422      	add	r2, r4
 8007af2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007af4:	e106      	b.n	8007d04 <UART_SetConfig+0x4d8>
 8007af6:	bf00      	nop
 8007af8:	40011000 	.word	0x40011000
 8007afc:	40011400 	.word	0x40011400
 8007b00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b0e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b16:	4642      	mov	r2, r8
 8007b18:	464b      	mov	r3, r9
 8007b1a:	1891      	adds	r1, r2, r2
 8007b1c:	6239      	str	r1, [r7, #32]
 8007b1e:	415b      	adcs	r3, r3
 8007b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b26:	4641      	mov	r1, r8
 8007b28:	1854      	adds	r4, r2, r1
 8007b2a:	4649      	mov	r1, r9
 8007b2c:	eb43 0501 	adc.w	r5, r3, r1
 8007b30:	f04f 0200 	mov.w	r2, #0
 8007b34:	f04f 0300 	mov.w	r3, #0
 8007b38:	00eb      	lsls	r3, r5, #3
 8007b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b3e:	00e2      	lsls	r2, r4, #3
 8007b40:	4614      	mov	r4, r2
 8007b42:	461d      	mov	r5, r3
 8007b44:	4643      	mov	r3, r8
 8007b46:	18e3      	adds	r3, r4, r3
 8007b48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b4c:	464b      	mov	r3, r9
 8007b4e:	eb45 0303 	adc.w	r3, r5, r3
 8007b52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b66:	f04f 0200 	mov.w	r2, #0
 8007b6a:	f04f 0300 	mov.w	r3, #0
 8007b6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007b72:	4629      	mov	r1, r5
 8007b74:	008b      	lsls	r3, r1, #2
 8007b76:	4621      	mov	r1, r4
 8007b78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	008a      	lsls	r2, r1, #2
 8007b80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007b84:	f7f8 fb8c 	bl	80002a0 <__aeabi_uldivmod>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4b60      	ldr	r3, [pc, #384]	@ (8007d10 <UART_SetConfig+0x4e4>)
 8007b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007b92:	095b      	lsrs	r3, r3, #5
 8007b94:	011c      	lsls	r4, r3, #4
 8007b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ba0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007ba4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007ba8:	4642      	mov	r2, r8
 8007baa:	464b      	mov	r3, r9
 8007bac:	1891      	adds	r1, r2, r2
 8007bae:	61b9      	str	r1, [r7, #24]
 8007bb0:	415b      	adcs	r3, r3
 8007bb2:	61fb      	str	r3, [r7, #28]
 8007bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bb8:	4641      	mov	r1, r8
 8007bba:	1851      	adds	r1, r2, r1
 8007bbc:	6139      	str	r1, [r7, #16]
 8007bbe:	4649      	mov	r1, r9
 8007bc0:	414b      	adcs	r3, r1
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	f04f 0200 	mov.w	r2, #0
 8007bc8:	f04f 0300 	mov.w	r3, #0
 8007bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007bd0:	4659      	mov	r1, fp
 8007bd2:	00cb      	lsls	r3, r1, #3
 8007bd4:	4651      	mov	r1, sl
 8007bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bda:	4651      	mov	r1, sl
 8007bdc:	00ca      	lsls	r2, r1, #3
 8007bde:	4610      	mov	r0, r2
 8007be0:	4619      	mov	r1, r3
 8007be2:	4603      	mov	r3, r0
 8007be4:	4642      	mov	r2, r8
 8007be6:	189b      	adds	r3, r3, r2
 8007be8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007bec:	464b      	mov	r3, r9
 8007bee:	460a      	mov	r2, r1
 8007bf0:	eb42 0303 	adc.w	r3, r2, r3
 8007bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c04:	f04f 0200 	mov.w	r2, #0
 8007c08:	f04f 0300 	mov.w	r3, #0
 8007c0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007c10:	4649      	mov	r1, r9
 8007c12:	008b      	lsls	r3, r1, #2
 8007c14:	4641      	mov	r1, r8
 8007c16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c1a:	4641      	mov	r1, r8
 8007c1c:	008a      	lsls	r2, r1, #2
 8007c1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007c22:	f7f8 fb3d 	bl	80002a0 <__aeabi_uldivmod>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	4b38      	ldr	r3, [pc, #224]	@ (8007d10 <UART_SetConfig+0x4e4>)
 8007c2e:	fba3 2301 	umull	r2, r3, r3, r1
 8007c32:	095b      	lsrs	r3, r3, #5
 8007c34:	2264      	movs	r2, #100	@ 0x64
 8007c36:	fb02 f303 	mul.w	r3, r2, r3
 8007c3a:	1acb      	subs	r3, r1, r3
 8007c3c:	011b      	lsls	r3, r3, #4
 8007c3e:	3332      	adds	r3, #50	@ 0x32
 8007c40:	4a33      	ldr	r2, [pc, #204]	@ (8007d10 <UART_SetConfig+0x4e4>)
 8007c42:	fba2 2303 	umull	r2, r3, r2, r3
 8007c46:	095b      	lsrs	r3, r3, #5
 8007c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c4c:	441c      	add	r4, r3
 8007c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c52:	2200      	movs	r2, #0
 8007c54:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c56:	677a      	str	r2, [r7, #116]	@ 0x74
 8007c58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007c5c:	4642      	mov	r2, r8
 8007c5e:	464b      	mov	r3, r9
 8007c60:	1891      	adds	r1, r2, r2
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	415b      	adcs	r3, r3
 8007c66:	60fb      	str	r3, [r7, #12]
 8007c68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c6c:	4641      	mov	r1, r8
 8007c6e:	1851      	adds	r1, r2, r1
 8007c70:	6039      	str	r1, [r7, #0]
 8007c72:	4649      	mov	r1, r9
 8007c74:	414b      	adcs	r3, r1
 8007c76:	607b      	str	r3, [r7, #4]
 8007c78:	f04f 0200 	mov.w	r2, #0
 8007c7c:	f04f 0300 	mov.w	r3, #0
 8007c80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c84:	4659      	mov	r1, fp
 8007c86:	00cb      	lsls	r3, r1, #3
 8007c88:	4651      	mov	r1, sl
 8007c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c8e:	4651      	mov	r1, sl
 8007c90:	00ca      	lsls	r2, r1, #3
 8007c92:	4610      	mov	r0, r2
 8007c94:	4619      	mov	r1, r3
 8007c96:	4603      	mov	r3, r0
 8007c98:	4642      	mov	r2, r8
 8007c9a:	189b      	adds	r3, r3, r2
 8007c9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c9e:	464b      	mov	r3, r9
 8007ca0:	460a      	mov	r2, r1
 8007ca2:	eb42 0303 	adc.w	r3, r2, r3
 8007ca6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cb2:	667a      	str	r2, [r7, #100]	@ 0x64
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	f04f 0300 	mov.w	r3, #0
 8007cbc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	008b      	lsls	r3, r1, #2
 8007cc4:	4641      	mov	r1, r8
 8007cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cca:	4641      	mov	r1, r8
 8007ccc:	008a      	lsls	r2, r1, #2
 8007cce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007cd2:	f7f8 fae5 	bl	80002a0 <__aeabi_uldivmod>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	4b0d      	ldr	r3, [pc, #52]	@ (8007d10 <UART_SetConfig+0x4e4>)
 8007cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ce0:	095b      	lsrs	r3, r3, #5
 8007ce2:	2164      	movs	r1, #100	@ 0x64
 8007ce4:	fb01 f303 	mul.w	r3, r1, r3
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	011b      	lsls	r3, r3, #4
 8007cec:	3332      	adds	r3, #50	@ 0x32
 8007cee:	4a08      	ldr	r2, [pc, #32]	@ (8007d10 <UART_SetConfig+0x4e4>)
 8007cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf4:	095b      	lsrs	r3, r3, #5
 8007cf6:	f003 020f 	and.w	r2, r3, #15
 8007cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4422      	add	r2, r4
 8007d02:	609a      	str	r2, [r3, #8]
}
 8007d04:	bf00      	nop
 8007d06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d10:	51eb851f 	.word	0x51eb851f

08007d14 <ESP32_Init>:
extern SemaphoreHandle_t ReceiveMsgTimeoutMutex;
extern QueueHandle_t xShellQueue;
char ESP32_reveice_data[100];

void ESP32_Init(UART_HandleTypeDef* eps32_huart, UART_HandleTypeDef* log_huart)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
	eps32_TxRx_huart = eps32_huart;
 8007d1e:	4a06      	ldr	r2, [pc, #24]	@ (8007d38 <ESP32_Init+0x24>)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6013      	str	r3, [r2, #0]
	esp32_log_huart = log_huart;
 8007d24:	4a05      	ldr	r2, [pc, #20]	@ (8007d3c <ESP32_Init+0x28>)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	6013      	str	r3, [r2, #0]
}
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	20000804 	.word	0x20000804
 8007d3c:	20000808 	.word	0x20000808

08007d40 <ESP32_OS_Resources_Init>:

void ESP32_OS_Resources_Init()
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
	xESP32Queue = xQueueCreate(4, sizeof(ESP32MsgStruct));
 8007d44:	2200      	movs	r2, #0
 8007d46:	2164      	movs	r1, #100	@ 0x64
 8007d48:	2004      	movs	r0, #4
 8007d4a:	f000 ff7d 	bl	8008c48 <xQueueGenericCreate>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	4a12      	ldr	r2, [pc, #72]	@ (8007d9c <ESP32_OS_Resources_Init+0x5c>)
 8007d52:	6013      	str	r3, [r2, #0]
	xESP32ReceiverQueue = xQueueCreate(4, sizeof(ESP32MsgStruct));
 8007d54:	2200      	movs	r2, #0
 8007d56:	2164      	movs	r1, #100	@ 0x64
 8007d58:	2004      	movs	r0, #4
 8007d5a:	f000 ff75 	bl	8008c48 <xQueueGenericCreate>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	4a0f      	ldr	r2, [pc, #60]	@ (8007da0 <ESP32_OS_Resources_Init+0x60>)
 8007d62:	6013      	str	r3, [r2, #0]
	xESP32Mutex = xSemaphoreCreateMutex();
 8007d64:	2001      	movs	r0, #1
 8007d66:	f000 ffe9 	bl	8008d3c <xQueueCreateMutex>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8007da4 <ESP32_OS_Resources_Init+0x64>)
 8007d6e:	6013      	str	r3, [r2, #0]

	// 啟動 Idle-Line DMA 接收
    HAL_UARTEx_ReceiveToIdle_DMA(eps32_TxRx_huart,
 8007d70:	4b0d      	ldr	r3, [pc, #52]	@ (8007da8 <ESP32_OS_Resources_Init+0x68>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2264      	movs	r2, #100	@ 0x64
 8007d76:	490d      	ldr	r1, [pc, #52]	@ (8007dac <ESP32_OS_Resources_Init+0x6c>)
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fe fe87 	bl	8006a8c <HAL_UARTEx_ReceiveToIdle_DMA>
                                 (uint8_t*)ESP32_reveice_data,
                                 sizeof(ESP32_reveice_data));
    // 啟用半滿中斷 (選擇性，用於即時 debug)
    // __HAL_DMA_ENABLE_IT(eps32_TxRx_huart->hdmarx, DMA_IT_HT);
	__HAL_DMA_DISABLE_IT(eps32_TxRx_huart->hdmarx, DMA_IT_HT);
 8007d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8007da8 <ESP32_OS_Resources_Init+0x68>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	4b07      	ldr	r3, [pc, #28]	@ (8007da8 <ESP32_OS_Resources_Init+0x68>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0208 	bic.w	r2, r2, #8
 8007d94:	601a      	str	r2, [r3, #0]
}
 8007d96:	bf00      	nop
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	2000080c 	.word	0x2000080c
 8007da0:	20000810 	.word	0x20000810
 8007da4:	20000814 	.word	0x20000814
 8007da8:	20000804 	.word	0x20000804
 8007dac:	20000818 	.word	0x20000818

08007db0 <ESP32Sender>:

void ESP32Sender(void *pvParameters)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b09c      	sub	sp, #112	@ 0x70
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  ESP32MsgStruct esp32Msg;
  while (1)
  {
	if (xQueueReceive(xESP32Queue, &esp32Msg, portMAX_DELAY) == pdPASS) {
 8007db8:	4b16      	ldr	r3, [pc, #88]	@ (8007e14 <ESP32Sender+0x64>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f107 010c 	add.w	r1, r7, #12
 8007dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f001 f96f 	bl	80090a8 <xQueueReceive>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d11c      	bne.n	8007e0a <ESP32Sender+0x5a>
	  	if (xSemaphoreTake(ReceiveMsgTimeoutMutex, portMAX_DELAY) == pdPASS) {
 8007dd0:	4b11      	ldr	r3, [pc, #68]	@ (8007e18 <ESP32Sender+0x68>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f001 fa47 	bl	800926c <xQueueSemaphoreTake>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d10a      	bne.n	8007dfa <ESP32Sender+0x4a>
			ReceiveMsgTimeout = HAL_MAX_DELAY;
 8007de4:	4b0d      	ldr	r3, [pc, #52]	@ (8007e1c <ESP32Sender+0x6c>)
 8007de6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dea:	601a      	str	r2, [r3, #0]

			xSemaphoreGive(ReceiveMsgTimeoutMutex);
 8007dec:	4b0a      	ldr	r3, [pc, #40]	@ (8007e18 <ESP32Sender+0x68>)
 8007dee:	6818      	ldr	r0, [r3, #0]
 8007df0:	2300      	movs	r3, #0
 8007df2:	2200      	movs	r2, #0
 8007df4:	2100      	movs	r1, #0
 8007df6:	f000 ffb9 	bl	8008d6c <xQueueGenericSend>
		}
	  	SendMsg(eps32_TxRx_huart, esp32Msg.msg);
 8007dfa:	4b09      	ldr	r3, [pc, #36]	@ (8007e20 <ESP32Sender+0x70>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f107 020c 	add.w	r2, r7, #12
 8007e02:	4611      	mov	r1, r2
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7f9 f8d5 	bl	8000fb4 <SendMsg>
	}

	vTaskDelay(pdMS_TO_TICKS(500));
 8007e0a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007e0e:	f001 fe03 	bl	8009a18 <vTaskDelay>
	if (xQueueReceive(xESP32Queue, &esp32Msg, portMAX_DELAY) == pdPASS) {
 8007e12:	e7d1      	b.n	8007db8 <ESP32Sender+0x8>
 8007e14:	2000080c 	.word	0x2000080c
 8007e18:	200005b0 	.word	0x200005b0
 8007e1c:	20000000 	.word	0x20000000
 8007e20:	20000804 	.word	0x20000804

08007e24 <HAL_UARTEx_RxEventCallback>:
  }
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b09c      	sub	sp, #112	@ 0x70
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	807b      	strh	r3, [r7, #2]
  if (huart == eps32_TxRx_huart)
 8007e30:	4b25      	ldr	r3, [pc, #148]	@ (8007ec8 <HAL_UARTEx_RxEventCallback+0xa4>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d141      	bne.n	8007ebe <HAL_UARTEx_RxEventCallback+0x9a>
  {
    ESP32MsgStruct msg;
	memset(msg.msg, 0, sizeof(msg.msg));
 8007e3a:	f107 0308 	add.w	r3, r7, #8
 8007e3e:	2264      	movs	r2, #100	@ 0x64
 8007e40:	2100      	movs	r1, #0
 8007e42:	4618      	mov	r0, r3
 8007e44:	f007 ff54 	bl	800fcf0 <memset>
    memcpy(msg.msg, ESP32_reveice_data, Size);
 8007e48:	887a      	ldrh	r2, [r7, #2]
 8007e4a:	f107 0308 	add.w	r3, r7, #8
 8007e4e:	491f      	ldr	r1, [pc, #124]	@ (8007ecc <HAL_UARTEx_RxEventCallback+0xa8>)
 8007e50:	4618      	mov	r0, r3
 8007e52:	f008 f84e 	bl	800fef2 <memcpy>
    msg.msg[Size] = '\0';
 8007e56:	887b      	ldrh	r3, [r7, #2]
 8007e58:	3370      	adds	r3, #112	@ 0x70
 8007e5a:	443b      	add	r3, r7
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f803 2c68 	strb.w	r2, [r3, #-104]

    // 從 ISR 推送到 Queue
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007e62:	2300      	movs	r3, #0
 8007e64:	66fb      	str	r3, [r7, #108]	@ 0x6c
	xQueueSendFromISR(xESP32ReceiverQueue, &msg, &xHigherPriorityTaskWoken);
 8007e66:	4b1a      	ldr	r3, [pc, #104]	@ (8007ed0 <HAL_UARTEx_RxEventCallback+0xac>)
 8007e68:	6818      	ldr	r0, [r3, #0]
 8007e6a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8007e6e:	f107 0108 	add.w	r1, r7, #8
 8007e72:	2300      	movs	r3, #0
 8007e74:	f001 f87c 	bl	8008f70 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8007e78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d007      	beq.n	8007e8e <HAL_UARTEx_RxEventCallback+0x6a>
 8007e7e:	4b15      	ldr	r3, [pc, #84]	@ (8007ed4 <HAL_UARTEx_RxEventCallback+0xb0>)
 8007e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	f3bf 8f6f 	isb	sy

	memset(ESP32_reveice_data, 0, sizeof(ESP32_reveice_data));
 8007e8e:	2264      	movs	r2, #100	@ 0x64
 8007e90:	2100      	movs	r1, #0
 8007e92:	480e      	ldr	r0, [pc, #56]	@ (8007ecc <HAL_UARTEx_RxEventCallback+0xa8>)
 8007e94:	f007 ff2c 	bl	800fcf0 <memset>
    HAL_UARTEx_ReceiveToIdle_DMA(eps32_TxRx_huart,
 8007e98:	4b0b      	ldr	r3, [pc, #44]	@ (8007ec8 <HAL_UARTEx_RxEventCallback+0xa4>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2264      	movs	r2, #100	@ 0x64
 8007e9e:	490b      	ldr	r1, [pc, #44]	@ (8007ecc <HAL_UARTEx_RxEventCallback+0xa8>)
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fe fdf3 	bl	8006a8c <HAL_UARTEx_ReceiveToIdle_DMA>
                                 (uint8_t*)ESP32_reveice_data,
                                 sizeof(ESP32_reveice_data));
	__HAL_DMA_DISABLE_IT(eps32_TxRx_huart->hdmarx, DMA_IT_HT);
 8007ea6:	4b08      	ldr	r3, [pc, #32]	@ (8007ec8 <HAL_UARTEx_RxEventCallback+0xa4>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	4b05      	ldr	r3, [pc, #20]	@ (8007ec8 <HAL_UARTEx_RxEventCallback+0xa4>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 0208 	bic.w	r2, r2, #8
 8007ebc:	601a      	str	r2, [r3, #0]
	
  }
}
 8007ebe:	bf00      	nop
 8007ec0:	3770      	adds	r7, #112	@ 0x70
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20000804 	.word	0x20000804
 8007ecc:	20000818 	.word	0x20000818
 8007ed0:	20000810 	.word	0x20000810
 8007ed4:	e000ed04 	.word	0xe000ed04

08007ed8 <ESP32Receiver>:
//     vTaskDelay(pdMS_TO_TICKS(2));
//   }
// }

void ESP32Receiver(void *pvParameters)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b0ce      	sub	sp, #312	@ 0x138
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ee2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007ee6:	6018      	str	r0, [r3, #0]
  ESP32MsgStruct rxMsg;
  while (1)
  {
    if (xQueueReceive(xESP32ReceiverQueue, &rxMsg, portMAX_DELAY) == pdPASS)
 8007ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8007f5c <ESP32Receiver+0x84>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8007ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f001 f8d7 	bl	80090a8 <xQueueReceive>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d127      	bne.n	8007f50 <ESP32Receiver+0x78>
    {
    	SendMsg(esp32_log_huart, "\r\nReceive : ESP32: %s\r\n", rxMsg.msg);
 8007f00:	4b17      	ldr	r3, [pc, #92]	@ (8007f60 <ESP32Receiver+0x88>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8007f08:	4916      	ldr	r1, [pc, #88]	@ (8007f64 <ESP32Receiver+0x8c>)
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7f9 f852 	bl	8000fb4 <SendMsg>
		
    	ShellMsgStruct shellMsg;
    	strncpy(shellMsg.msg, rxMsg.msg, sizeof(rxMsg.msg)-1);
 8007f10:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8007f14:	f107 030c 	add.w	r3, r7, #12
 8007f18:	2263      	movs	r2, #99	@ 0x63
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f007 fef0 	bl	800fd00 <strncpy>
    	shellMsg.msg[sizeof(shellMsg.msg)-1] = '\0';
 8007f20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7
    	if (xQueueSend(xShellQueue, &shellMsg, 0) != pdPASS) {
 8007f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f68 <ESP32Receiver+0x90>)
 8007f30:	6818      	ldr	r0, [r3, #0]
 8007f32:	f107 010c 	add.w	r1, r7, #12
 8007f36:	2300      	movs	r3, #0
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f000 ff17 	bl	8008d6c <xQueueGenericSend>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d005      	beq.n	8007f50 <ESP32Receiver+0x78>
			SendMsg(esp32_log_huart, "\r\ESP32Receiver: Queue full or error.\r\n");
 8007f44:	4b06      	ldr	r3, [pc, #24]	@ (8007f60 <ESP32Receiver+0x88>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4908      	ldr	r1, [pc, #32]	@ (8007f6c <ESP32Receiver+0x94>)
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7f9 f832 	bl	8000fb4 <SendMsg>
		}
    }
    vTaskDelay(pdMS_TO_TICKS(500));
 8007f50:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007f54:	f001 fd60 	bl	8009a18 <vTaskDelay>
    if (xQueueReceive(xESP32ReceiverQueue, &rxMsg, portMAX_DELAY) == pdPASS)
 8007f58:	e7c6      	b.n	8007ee8 <ESP32Receiver+0x10>
 8007f5a:	bf00      	nop
 8007f5c:	20000810 	.word	0x20000810
 8007f60:	20000808 	.word	0x20000808
 8007f64:	08011790 	.word	0x08011790
 8007f68:	20013cac 	.word	0x20013cac
 8007f6c:	080117a8 	.word	0x080117a8

08007f70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007f74:	4904      	ldr	r1, [pc, #16]	@ (8007f88 <MX_FATFS_Init+0x18>)
 8007f76:	4805      	ldr	r0, [pc, #20]	@ (8007f8c <MX_FATFS_Init+0x1c>)
 8007f78:	f006 fa96 	bl	800e4a8 <FATFS_LinkDriver>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	461a      	mov	r2, r3
 8007f80:	4b03      	ldr	r3, [pc, #12]	@ (8007f90 <MX_FATFS_Init+0x20>)
 8007f82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007f84:	bf00      	nop
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	20000880 	.word	0x20000880
 8007f8c:	20000010 	.word	0x20000010
 8007f90:	2000087c 	.word	0x2000087c

08007f94 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007f94:	b480      	push	{r7}
 8007f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007f98:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	4603      	mov	r3, r0
 8007fac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 f9d7 	bl	8008364 <USER_SPI_initialize>
 8007fb6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 fab5 	bl	800853c <USER_SPI_status>
 8007fd2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60b9      	str	r1, [r7, #8]
 8007fe4:	607a      	str	r2, [r7, #4]
 8007fe6:	603b      	str	r3, [r7, #0]
 8007fe8:	4603      	mov	r3, r0
 8007fea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8007fec:	7bf8      	ldrb	r0, [r7, #15]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	68b9      	ldr	r1, [r7, #8]
 8007ff4:	f000 fab8 	bl	8008568 <USER_SPI_read>
 8007ff8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
 800800c:	603b      	str	r3, [r7, #0]
 800800e:	4603      	mov	r3, r0
 8008010:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8008012:	7bf8      	ldrb	r0, [r7, #15]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	68b9      	ldr	r1, [r7, #8]
 800801a:	f000 fb0b 	bl	8008634 <USER_SPI_write>
 800801e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	4603      	mov	r3, r0
 8008030:	603a      	str	r2, [r7, #0]
 8008032:	71fb      	strb	r3, [r7, #7]
 8008034:	460b      	mov	r3, r1
 8008036:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8008038:	79b9      	ldrb	r1, [r7, #6]
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	683a      	ldr	r2, [r7, #0]
 800803e:	4618      	mov	r0, r3
 8008040:	f000 fb74 	bl	800872c <USER_SPI_ioctl>
 8008044:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008058:	f7f9 fe04 	bl	8001c64 <HAL_GetTick>
 800805c:	4603      	mov	r3, r0
 800805e:	4a04      	ldr	r2, [pc, #16]	@ (8008070 <SPI_Timer_On+0x20>)
 8008060:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8008062:	4a04      	ldr	r2, [pc, #16]	@ (8008074 <SPI_Timer_On+0x24>)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6013      	str	r3, [r2, #0]
}
 8008068:	bf00      	nop
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20000888 	.word	0x20000888
 8008074:	2000088c 	.word	0x2000088c

08008078 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8008078:	b580      	push	{r7, lr}
 800807a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800807c:	f7f9 fdf2 	bl	8001c64 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	4b06      	ldr	r3, [pc, #24]	@ (800809c <SPI_Timer_Status+0x24>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	1ad2      	subs	r2, r2, r3
 8008088:	4b05      	ldr	r3, [pc, #20]	@ (80080a0 <SPI_Timer_Status+0x28>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	bf34      	ite	cc
 8008090:	2301      	movcc	r3, #1
 8008092:	2300      	movcs	r3, #0
 8008094:	b2db      	uxtb	r3, r3
}
 8008096:	4618      	mov	r0, r3
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20000888 	.word	0x20000888
 80080a0:	2000088c 	.word	0x2000088c

080080a4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af02      	add	r7, sp, #8
 80080aa:	4603      	mov	r3, r0
 80080ac:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80080ae:	f107 020f 	add.w	r2, r7, #15
 80080b2:	1df9      	adds	r1, r7, #7
 80080b4:	2332      	movs	r3, #50	@ 0x32
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	2301      	movs	r3, #1
 80080ba:	4804      	ldr	r0, [pc, #16]	@ (80080cc <xchg_spi+0x28>)
 80080bc:	f7fd f8bf 	bl	800523e <HAL_SPI_TransmitReceive>
    return rxDat;
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	200003cc 	.word	0x200003cc

080080d0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80080d0:	b590      	push	{r4, r7, lr}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80080da:	2300      	movs	r3, #0
 80080dc:	60fb      	str	r3, [r7, #12]
 80080de:	e00a      	b.n	80080f6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	18d4      	adds	r4, r2, r3
 80080e6:	20ff      	movs	r0, #255	@ 0xff
 80080e8:	f7ff ffdc 	bl	80080a4 <xchg_spi>
 80080ec:	4603      	mov	r3, r0
 80080ee:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	3301      	adds	r3, #1
 80080f4:	60fb      	str	r3, [r7, #12]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d3f0      	bcc.n	80080e0 <rcvr_spi_multi+0x10>
	}
}
 80080fe:	bf00      	nop
 8008100:	bf00      	nop
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	bd90      	pop	{r4, r7, pc}

08008108 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	b29a      	uxth	r2, r3
 8008116:	f04f 33ff 	mov.w	r3, #4294967295
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	4803      	ldr	r0, [pc, #12]	@ (800812c <xmit_spi_multi+0x24>)
 800811e:	f7fc ff4a 	bl	8004fb6 <HAL_SPI_Transmit>
}
 8008122:	bf00      	nop
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	200003cc 	.word	0x200003cc

08008130 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008138:	f7f9 fd94 	bl	8001c64 <HAL_GetTick>
 800813c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008142:	20ff      	movs	r0, #255	@ 0xff
 8008144:	f7ff ffae 	bl	80080a4 <xchg_spi>
 8008148:	4603      	mov	r3, r0
 800814a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	2bff      	cmp	r3, #255	@ 0xff
 8008150:	d007      	beq.n	8008162 <wait_ready+0x32>
 8008152:	f7f9 fd87 	bl	8001c64 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	429a      	cmp	r2, r3
 8008160:	d8ef      	bhi.n	8008142 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008162:	7bfb      	ldrb	r3, [r7, #15]
 8008164:	2bff      	cmp	r3, #255	@ 0xff
 8008166:	bf0c      	ite	eq
 8008168:	2301      	moveq	r3, #1
 800816a:	2300      	movne	r3, #0
 800816c:	b2db      	uxtb	r3, r3
}
 800816e:	4618      	mov	r0, r3
 8008170:	3718      	adds	r7, #24
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
	...

08008178 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800817c:	2201      	movs	r2, #1
 800817e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008182:	4804      	ldr	r0, [pc, #16]	@ (8008194 <despiselect+0x1c>)
 8008184:	f7fa fc1e 	bl	80029c4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008188:	20ff      	movs	r0, #255	@ 0xff
 800818a:	f7ff ff8b 	bl	80080a4 <xchg_spi>

}
 800818e:	bf00      	nop
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	40020c00 	.word	0x40020c00

08008198 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008198:	b580      	push	{r7, lr}
 800819a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800819c:	2200      	movs	r2, #0
 800819e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80081a2:	480a      	ldr	r0, [pc, #40]	@ (80081cc <spiselect+0x34>)
 80081a4:	f7fa fc0e 	bl	80029c4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80081a8:	20ff      	movs	r0, #255	@ 0xff
 80081aa:	f7ff ff7b 	bl	80080a4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80081ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80081b2:	f7ff ffbd 	bl	8008130 <wait_ready>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <spiselect+0x28>
 80081bc:	2301      	movs	r3, #1
 80081be:	e002      	b.n	80081c6 <spiselect+0x2e>

	despiselect();
 80081c0:	f7ff ffda 	bl	8008178 <despiselect>
	return 0;	/* Timeout */
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	40020c00 	.word	0x40020c00

080081d0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80081da:	20c8      	movs	r0, #200	@ 0xc8
 80081dc:	f7ff ff38 	bl	8008050 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80081e0:	20ff      	movs	r0, #255	@ 0xff
 80081e2:	f7ff ff5f 	bl	80080a4 <xchg_spi>
 80081e6:	4603      	mov	r3, r0
 80081e8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	2bff      	cmp	r3, #255	@ 0xff
 80081ee:	d104      	bne.n	80081fa <rcvr_datablock+0x2a>
 80081f0:	f7ff ff42 	bl	8008078 <SPI_Timer_Status>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1f2      	bne.n	80081e0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	2bfe      	cmp	r3, #254	@ 0xfe
 80081fe:	d001      	beq.n	8008204 <rcvr_datablock+0x34>
 8008200:	2300      	movs	r3, #0
 8008202:	e00a      	b.n	800821a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7ff ff62 	bl	80080d0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800820c:	20ff      	movs	r0, #255	@ 0xff
 800820e:	f7ff ff49 	bl	80080a4 <xchg_spi>
 8008212:	20ff      	movs	r0, #255	@ 0xff
 8008214:	f7ff ff46 	bl	80080a4 <xchg_spi>

	return 1;						/* Function succeeded */
 8008218:	2301      	movs	r3, #1
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	460b      	mov	r3, r1
 800822c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800822e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008232:	f7ff ff7d 	bl	8008130 <wait_ready>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <xmit_datablock+0x1e>
 800823c:	2300      	movs	r3, #0
 800823e:	e01e      	b.n	800827e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff ff2e 	bl	80080a4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008248:	78fb      	ldrb	r3, [r7, #3]
 800824a:	2bfd      	cmp	r3, #253	@ 0xfd
 800824c:	d016      	beq.n	800827c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800824e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7ff ff58 	bl	8008108 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008258:	20ff      	movs	r0, #255	@ 0xff
 800825a:	f7ff ff23 	bl	80080a4 <xchg_spi>
 800825e:	20ff      	movs	r0, #255	@ 0xff
 8008260:	f7ff ff20 	bl	80080a4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008264:	20ff      	movs	r0, #255	@ 0xff
 8008266:	f7ff ff1d 	bl	80080a4 <xchg_spi>
 800826a:	4603      	mov	r3, r0
 800826c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800826e:	7bfb      	ldrb	r3, [r7, #15]
 8008270:	f003 031f 	and.w	r3, r3, #31
 8008274:	2b05      	cmp	r3, #5
 8008276:	d001      	beq.n	800827c <xmit_datablock+0x5a>
 8008278:	2300      	movs	r3, #0
 800827a:	e000      	b.n	800827e <xmit_datablock+0x5c>
	}
	return 1;
 800827c:	2301      	movs	r3, #1
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b084      	sub	sp, #16
 800828a:	af00      	add	r7, sp, #0
 800828c:	4603      	mov	r3, r0
 800828e:	6039      	str	r1, [r7, #0]
 8008290:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8008292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008296:	2b00      	cmp	r3, #0
 8008298:	da0e      	bge.n	80082b8 <send_cmd+0x32>
		cmd &= 0x7F;
 800829a:	79fb      	ldrb	r3, [r7, #7]
 800829c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082a0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80082a2:	2100      	movs	r1, #0
 80082a4:	2037      	movs	r0, #55	@ 0x37
 80082a6:	f7ff ffee 	bl	8008286 <send_cmd>
 80082aa:	4603      	mov	r3, r0
 80082ac:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80082ae:	7bbb      	ldrb	r3, [r7, #14]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d901      	bls.n	80082b8 <send_cmd+0x32>
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
 80082b6:	e051      	b.n	800835c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80082b8:	79fb      	ldrb	r3, [r7, #7]
 80082ba:	2b0c      	cmp	r3, #12
 80082bc:	d008      	beq.n	80082d0 <send_cmd+0x4a>
		despiselect();
 80082be:	f7ff ff5b 	bl	8008178 <despiselect>
		if (!spiselect()) return 0xFF;
 80082c2:	f7ff ff69 	bl	8008198 <spiselect>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <send_cmd+0x4a>
 80082cc:	23ff      	movs	r3, #255	@ 0xff
 80082ce:	e045      	b.n	800835c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	4618      	mov	r0, r3
 80082da:	f7ff fee3 	bl	80080a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	0e1b      	lsrs	r3, r3, #24
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7ff fedd 	bl	80080a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	0c1b      	lsrs	r3, r3, #16
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7ff fed7 	bl	80080a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	0a1b      	lsrs	r3, r3, #8
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7ff fed1 	bl	80080a4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	b2db      	uxtb	r3, r3
 8008306:	4618      	mov	r0, r3
 8008308:	f7ff fecc 	bl	80080a4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008310:	79fb      	ldrb	r3, [r7, #7]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <send_cmd+0x94>
 8008316:	2395      	movs	r3, #149	@ 0x95
 8008318:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800831a:	79fb      	ldrb	r3, [r7, #7]
 800831c:	2b08      	cmp	r3, #8
 800831e:	d101      	bne.n	8008324 <send_cmd+0x9e>
 8008320:	2387      	movs	r3, #135	@ 0x87
 8008322:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8008324:	7bfb      	ldrb	r3, [r7, #15]
 8008326:	4618      	mov	r0, r3
 8008328:	f7ff febc 	bl	80080a4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800832c:	79fb      	ldrb	r3, [r7, #7]
 800832e:	2b0c      	cmp	r3, #12
 8008330:	d102      	bne.n	8008338 <send_cmd+0xb2>
 8008332:	20ff      	movs	r0, #255	@ 0xff
 8008334:	f7ff feb6 	bl	80080a4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8008338:	230a      	movs	r3, #10
 800833a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800833c:	20ff      	movs	r0, #255	@ 0xff
 800833e:	f7ff feb1 	bl	80080a4 <xchg_spi>
 8008342:	4603      	mov	r3, r0
 8008344:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8008346:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800834a:	2b00      	cmp	r3, #0
 800834c:	da05      	bge.n	800835a <send_cmd+0xd4>
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	3b01      	subs	r3, #1
 8008352:	73fb      	strb	r3, [r7, #15]
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1f0      	bne.n	800833c <send_cmd+0xb6>

	return res;							/* Return received response */
 800835a:	7bbb      	ldrb	r3, [r7, #14]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008364:	b590      	push	{r4, r7, lr}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	4603      	mov	r3, r0
 800836c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800836e:	79fb      	ldrb	r3, [r7, #7]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <USER_SPI_initialize+0x14>
 8008374:	2301      	movs	r3, #1
 8008376:	e0d6      	b.n	8008526 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8008378:	4b6d      	ldr	r3, [pc, #436]	@ (8008530 <USER_SPI_initialize+0x1cc>)
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	b2db      	uxtb	r3, r3
 800837e:	f003 0302 	and.w	r3, r3, #2
 8008382:	2b00      	cmp	r3, #0
 8008384:	d003      	beq.n	800838e <USER_SPI_initialize+0x2a>
 8008386:	4b6a      	ldr	r3, [pc, #424]	@ (8008530 <USER_SPI_initialize+0x1cc>)
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	b2db      	uxtb	r3, r3
 800838c:	e0cb      	b.n	8008526 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800838e:	4b69      	ldr	r3, [pc, #420]	@ (8008534 <USER_SPI_initialize+0x1d0>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8008398:	4b66      	ldr	r3, [pc, #408]	@ (8008534 <USER_SPI_initialize+0x1d0>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80083a0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80083a2:	230a      	movs	r3, #10
 80083a4:	73fb      	strb	r3, [r7, #15]
 80083a6:	e005      	b.n	80083b4 <USER_SPI_initialize+0x50>
 80083a8:	20ff      	movs	r0, #255	@ 0xff
 80083aa:	f7ff fe7b 	bl	80080a4 <xchg_spi>
 80083ae:	7bfb      	ldrb	r3, [r7, #15]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	73fb      	strb	r3, [r7, #15]
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1f6      	bne.n	80083a8 <USER_SPI_initialize+0x44>

	ty = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80083be:	2100      	movs	r1, #0
 80083c0:	2000      	movs	r0, #0
 80083c2:	f7ff ff60 	bl	8008286 <send_cmd>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	f040 808b 	bne.w	80084e4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80083ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80083d2:	f7ff fe3d 	bl	8008050 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80083d6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80083da:	2008      	movs	r0, #8
 80083dc:	f7ff ff53 	bl	8008286 <send_cmd>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d151      	bne.n	800848a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80083e6:	2300      	movs	r3, #0
 80083e8:	73fb      	strb	r3, [r7, #15]
 80083ea:	e00d      	b.n	8008408 <USER_SPI_initialize+0xa4>
 80083ec:	7bfc      	ldrb	r4, [r7, #15]
 80083ee:	20ff      	movs	r0, #255	@ 0xff
 80083f0:	f7ff fe58 	bl	80080a4 <xchg_spi>
 80083f4:	4603      	mov	r3, r0
 80083f6:	461a      	mov	r2, r3
 80083f8:	f104 0310 	add.w	r3, r4, #16
 80083fc:	443b      	add	r3, r7
 80083fe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008402:	7bfb      	ldrb	r3, [r7, #15]
 8008404:	3301      	adds	r3, #1
 8008406:	73fb      	strb	r3, [r7, #15]
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	2b03      	cmp	r3, #3
 800840c:	d9ee      	bls.n	80083ec <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800840e:	7abb      	ldrb	r3, [r7, #10]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d167      	bne.n	80084e4 <USER_SPI_initialize+0x180>
 8008414:	7afb      	ldrb	r3, [r7, #11]
 8008416:	2baa      	cmp	r3, #170	@ 0xaa
 8008418:	d164      	bne.n	80084e4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800841a:	bf00      	nop
 800841c:	f7ff fe2c 	bl	8008078 <SPI_Timer_Status>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d007      	beq.n	8008436 <USER_SPI_initialize+0xd2>
 8008426:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800842a:	20a9      	movs	r0, #169	@ 0xa9
 800842c:	f7ff ff2b 	bl	8008286 <send_cmd>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1f2      	bne.n	800841c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8008436:	f7ff fe1f 	bl	8008078 <SPI_Timer_Status>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d051      	beq.n	80084e4 <USER_SPI_initialize+0x180>
 8008440:	2100      	movs	r1, #0
 8008442:	203a      	movs	r0, #58	@ 0x3a
 8008444:	f7ff ff1f 	bl	8008286 <send_cmd>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d14a      	bne.n	80084e4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800844e:	2300      	movs	r3, #0
 8008450:	73fb      	strb	r3, [r7, #15]
 8008452:	e00d      	b.n	8008470 <USER_SPI_initialize+0x10c>
 8008454:	7bfc      	ldrb	r4, [r7, #15]
 8008456:	20ff      	movs	r0, #255	@ 0xff
 8008458:	f7ff fe24 	bl	80080a4 <xchg_spi>
 800845c:	4603      	mov	r3, r0
 800845e:	461a      	mov	r2, r3
 8008460:	f104 0310 	add.w	r3, r4, #16
 8008464:	443b      	add	r3, r7
 8008466:	f803 2c08 	strb.w	r2, [r3, #-8]
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	3301      	adds	r3, #1
 800846e:	73fb      	strb	r3, [r7, #15]
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	2b03      	cmp	r3, #3
 8008474:	d9ee      	bls.n	8008454 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8008476:	7a3b      	ldrb	r3, [r7, #8]
 8008478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <USER_SPI_initialize+0x120>
 8008480:	230c      	movs	r3, #12
 8008482:	e000      	b.n	8008486 <USER_SPI_initialize+0x122>
 8008484:	2304      	movs	r3, #4
 8008486:	737b      	strb	r3, [r7, #13]
 8008488:	e02c      	b.n	80084e4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800848a:	2100      	movs	r1, #0
 800848c:	20a9      	movs	r0, #169	@ 0xa9
 800848e:	f7ff fefa 	bl	8008286 <send_cmd>
 8008492:	4603      	mov	r3, r0
 8008494:	2b01      	cmp	r3, #1
 8008496:	d804      	bhi.n	80084a2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8008498:	2302      	movs	r3, #2
 800849a:	737b      	strb	r3, [r7, #13]
 800849c:	23a9      	movs	r3, #169	@ 0xa9
 800849e:	73bb      	strb	r3, [r7, #14]
 80084a0:	e003      	b.n	80084aa <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80084a2:	2301      	movs	r3, #1
 80084a4:	737b      	strb	r3, [r7, #13]
 80084a6:	2301      	movs	r3, #1
 80084a8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80084aa:	bf00      	nop
 80084ac:	f7ff fde4 	bl	8008078 <SPI_Timer_Status>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d007      	beq.n	80084c6 <USER_SPI_initialize+0x162>
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2100      	movs	r1, #0
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff fee3 	bl	8008286 <send_cmd>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1f2      	bne.n	80084ac <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80084c6:	f7ff fdd7 	bl	8008078 <SPI_Timer_Status>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <USER_SPI_initialize+0x17c>
 80084d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80084d4:	2010      	movs	r0, #16
 80084d6:	f7ff fed6 	bl	8008286 <send_cmd>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d001      	beq.n	80084e4 <USER_SPI_initialize+0x180>
				ty = 0;
 80084e0:	2300      	movs	r3, #0
 80084e2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80084e4:	4a14      	ldr	r2, [pc, #80]	@ (8008538 <USER_SPI_initialize+0x1d4>)
 80084e6:	7b7b      	ldrb	r3, [r7, #13]
 80084e8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80084ea:	f7ff fe45 	bl	8008178 <despiselect>

	if (ty) {			/* OK */
 80084ee:	7b7b      	ldrb	r3, [r7, #13]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d012      	beq.n	800851a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80084f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008534 <USER_SPI_initialize+0x1d0>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80084fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008534 <USER_SPI_initialize+0x1d0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f042 0210 	orr.w	r2, r2, #16
 8008506:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8008508:	4b09      	ldr	r3, [pc, #36]	@ (8008530 <USER_SPI_initialize+0x1cc>)
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	b2db      	uxtb	r3, r3
 800850e:	f023 0301 	bic.w	r3, r3, #1
 8008512:	b2da      	uxtb	r2, r3
 8008514:	4b06      	ldr	r3, [pc, #24]	@ (8008530 <USER_SPI_initialize+0x1cc>)
 8008516:	701a      	strb	r2, [r3, #0]
 8008518:	e002      	b.n	8008520 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800851a:	4b05      	ldr	r3, [pc, #20]	@ (8008530 <USER_SPI_initialize+0x1cc>)
 800851c:	2201      	movs	r2, #1
 800851e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8008520:	4b03      	ldr	r3, [pc, #12]	@ (8008530 <USER_SPI_initialize+0x1cc>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	b2db      	uxtb	r3, r3
}
 8008526:	4618      	mov	r0, r3
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	bd90      	pop	{r4, r7, pc}
 800852e:	bf00      	nop
 8008530:	20000024 	.word	0x20000024
 8008534:	200003cc 	.word	0x200003cc
 8008538:	20000884 	.word	0x20000884

0800853c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	4603      	mov	r3, r0
 8008544:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8008546:	79fb      	ldrb	r3, [r7, #7]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <USER_SPI_status+0x14>
 800854c:	2301      	movs	r3, #1
 800854e:	e002      	b.n	8008556 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8008550:	4b04      	ldr	r3, [pc, #16]	@ (8008564 <USER_SPI_status+0x28>)
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	b2db      	uxtb	r3, r3
}
 8008556:	4618      	mov	r0, r3
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	20000024 	.word	0x20000024

08008568 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	607a      	str	r2, [r7, #4]
 8008572:	603b      	str	r3, [r7, #0]
 8008574:	4603      	mov	r3, r0
 8008576:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d102      	bne.n	8008584 <USER_SPI_read+0x1c>
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <USER_SPI_read+0x20>
 8008584:	2304      	movs	r3, #4
 8008586:	e04d      	b.n	8008624 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008588:	4b28      	ldr	r3, [pc, #160]	@ (800862c <USER_SPI_read+0xc4>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	b2db      	uxtb	r3, r3
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <USER_SPI_read+0x32>
 8008596:	2303      	movs	r3, #3
 8008598:	e044      	b.n	8008624 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800859a:	4b25      	ldr	r3, [pc, #148]	@ (8008630 <USER_SPI_read+0xc8>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	f003 0308 	and.w	r3, r3, #8
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d102      	bne.n	80085ac <USER_SPI_read+0x44>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	025b      	lsls	r3, r3, #9
 80085aa:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d111      	bne.n	80085d6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80085b2:	6879      	ldr	r1, [r7, #4]
 80085b4:	2011      	movs	r0, #17
 80085b6:	f7ff fe66 	bl	8008286 <send_cmd>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d129      	bne.n	8008614 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80085c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80085c4:	68b8      	ldr	r0, [r7, #8]
 80085c6:	f7ff fe03 	bl	80081d0 <rcvr_datablock>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d021      	beq.n	8008614 <USER_SPI_read+0xac>
			count = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	603b      	str	r3, [r7, #0]
 80085d4:	e01e      	b.n	8008614 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	2012      	movs	r0, #18
 80085da:	f7ff fe54 	bl	8008286 <send_cmd>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d117      	bne.n	8008614 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80085e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80085e8:	68b8      	ldr	r0, [r7, #8]
 80085ea:	f7ff fdf1 	bl	80081d0 <rcvr_datablock>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00a      	beq.n	800860a <USER_SPI_read+0xa2>
				buff += 512;
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80085fa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	3b01      	subs	r3, #1
 8008600:	603b      	str	r3, [r7, #0]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1ed      	bne.n	80085e4 <USER_SPI_read+0x7c>
 8008608:	e000      	b.n	800860c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800860a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800860c:	2100      	movs	r1, #0
 800860e:	200c      	movs	r0, #12
 8008610:	f7ff fe39 	bl	8008286 <send_cmd>
		}
	}
	despiselect();
 8008614:	f7ff fdb0 	bl	8008178 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	bf14      	ite	ne
 800861e:	2301      	movne	r3, #1
 8008620:	2300      	moveq	r3, #0
 8008622:	b2db      	uxtb	r3, r3
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	20000024 	.word	0x20000024
 8008630:	20000884 	.word	0x20000884

08008634 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	607a      	str	r2, [r7, #4]
 800863e:	603b      	str	r3, [r7, #0]
 8008640:	4603      	mov	r3, r0
 8008642:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008644:	7bfb      	ldrb	r3, [r7, #15]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d102      	bne.n	8008650 <USER_SPI_write+0x1c>
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <USER_SPI_write+0x20>
 8008650:	2304      	movs	r3, #4
 8008652:	e063      	b.n	800871c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8008654:	4b33      	ldr	r3, [pc, #204]	@ (8008724 <USER_SPI_write+0xf0>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	b2db      	uxtb	r3, r3
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <USER_SPI_write+0x32>
 8008662:	2303      	movs	r3, #3
 8008664:	e05a      	b.n	800871c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8008666:	4b2f      	ldr	r3, [pc, #188]	@ (8008724 <USER_SPI_write+0xf0>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	b2db      	uxtb	r3, r3
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <USER_SPI_write+0x44>
 8008674:	2302      	movs	r3, #2
 8008676:	e051      	b.n	800871c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8008678:	4b2b      	ldr	r3, [pc, #172]	@ (8008728 <USER_SPI_write+0xf4>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	f003 0308 	and.w	r3, r3, #8
 8008680:	2b00      	cmp	r3, #0
 8008682:	d102      	bne.n	800868a <USER_SPI_write+0x56>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	025b      	lsls	r3, r3, #9
 8008688:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d110      	bne.n	80086b2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8008690:	6879      	ldr	r1, [r7, #4]
 8008692:	2018      	movs	r0, #24
 8008694:	f7ff fdf7 	bl	8008286 <send_cmd>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d136      	bne.n	800870c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800869e:	21fe      	movs	r1, #254	@ 0xfe
 80086a0:	68b8      	ldr	r0, [r7, #8]
 80086a2:	f7ff fdbe 	bl	8008222 <xmit_datablock>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d02f      	beq.n	800870c <USER_SPI_write+0xd8>
			count = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	603b      	str	r3, [r7, #0]
 80086b0:	e02c      	b.n	800870c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80086b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008728 <USER_SPI_write+0xf4>)
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	f003 0306 	and.w	r3, r3, #6
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <USER_SPI_write+0x92>
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	2097      	movs	r0, #151	@ 0x97
 80086c2:	f7ff fde0 	bl	8008286 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80086c6:	6879      	ldr	r1, [r7, #4]
 80086c8:	2019      	movs	r0, #25
 80086ca:	f7ff fddc 	bl	8008286 <send_cmd>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d11b      	bne.n	800870c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80086d4:	21fc      	movs	r1, #252	@ 0xfc
 80086d6:	68b8      	ldr	r0, [r7, #8]
 80086d8:	f7ff fda3 	bl	8008222 <xmit_datablock>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00a      	beq.n	80086f8 <USER_SPI_write+0xc4>
				buff += 512;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80086e8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	603b      	str	r3, [r7, #0]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1ee      	bne.n	80086d4 <USER_SPI_write+0xa0>
 80086f6:	e000      	b.n	80086fa <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80086f8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80086fa:	21fd      	movs	r1, #253	@ 0xfd
 80086fc:	2000      	movs	r0, #0
 80086fe:	f7ff fd90 	bl	8008222 <xmit_datablock>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d101      	bne.n	800870c <USER_SPI_write+0xd8>
 8008708:	2301      	movs	r3, #1
 800870a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800870c:	f7ff fd34 	bl	8008178 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	bf14      	ite	ne
 8008716:	2301      	movne	r3, #1
 8008718:	2300      	moveq	r3, #0
 800871a:	b2db      	uxtb	r3, r3
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	20000024 	.word	0x20000024
 8008728:	20000884 	.word	0x20000884

0800872c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b08c      	sub	sp, #48	@ 0x30
 8008730:	af00      	add	r7, sp, #0
 8008732:	4603      	mov	r3, r0
 8008734:	603a      	str	r2, [r7, #0]
 8008736:	71fb      	strb	r3, [r7, #7]
 8008738:	460b      	mov	r3, r1
 800873a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800873c:	79fb      	ldrb	r3, [r7, #7]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <USER_SPI_ioctl+0x1a>
 8008742:	2304      	movs	r3, #4
 8008744:	e15a      	b.n	80089fc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008746:	4baf      	ldr	r3, [pc, #700]	@ (8008a04 <USER_SPI_ioctl+0x2d8>)
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	b2db      	uxtb	r3, r3
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	2b00      	cmp	r3, #0
 8008752:	d001      	beq.n	8008758 <USER_SPI_ioctl+0x2c>
 8008754:	2303      	movs	r3, #3
 8008756:	e151      	b.n	80089fc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800875e:	79bb      	ldrb	r3, [r7, #6]
 8008760:	2b04      	cmp	r3, #4
 8008762:	f200 8136 	bhi.w	80089d2 <USER_SPI_ioctl+0x2a6>
 8008766:	a201      	add	r2, pc, #4	@ (adr r2, 800876c <USER_SPI_ioctl+0x40>)
 8008768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876c:	08008781 	.word	0x08008781
 8008770:	08008795 	.word	0x08008795
 8008774:	080089d3 	.word	0x080089d3
 8008778:	08008841 	.word	0x08008841
 800877c:	08008937 	.word	0x08008937
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8008780:	f7ff fd0a 	bl	8008198 <spiselect>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	f000 8127 	beq.w	80089da <USER_SPI_ioctl+0x2ae>
 800878c:	2300      	movs	r3, #0
 800878e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8008792:	e122      	b.n	80089da <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8008794:	2100      	movs	r1, #0
 8008796:	2009      	movs	r0, #9
 8008798:	f7ff fd75 	bl	8008286 <send_cmd>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f040 811d 	bne.w	80089de <USER_SPI_ioctl+0x2b2>
 80087a4:	f107 030c 	add.w	r3, r7, #12
 80087a8:	2110      	movs	r1, #16
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7ff fd10 	bl	80081d0 <rcvr_datablock>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 8113 	beq.w	80089de <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80087b8:	7b3b      	ldrb	r3, [r7, #12]
 80087ba:	099b      	lsrs	r3, r3, #6
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d111      	bne.n	80087e6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80087c2:	7d7b      	ldrb	r3, [r7, #21]
 80087c4:	461a      	mov	r2, r3
 80087c6:	7d3b      	ldrb	r3, [r7, #20]
 80087c8:	021b      	lsls	r3, r3, #8
 80087ca:	4413      	add	r3, r2
 80087cc:	461a      	mov	r2, r3
 80087ce:	7cfb      	ldrb	r3, [r7, #19]
 80087d0:	041b      	lsls	r3, r3, #16
 80087d2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80087d6:	4413      	add	r3, r2
 80087d8:	3301      	adds	r3, #1
 80087da:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	029a      	lsls	r2, r3, #10
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	e028      	b.n	8008838 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80087e6:	7c7b      	ldrb	r3, [r7, #17]
 80087e8:	f003 030f 	and.w	r3, r3, #15
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	7dbb      	ldrb	r3, [r7, #22]
 80087f0:	09db      	lsrs	r3, r3, #7
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	4413      	add	r3, r2
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	7d7b      	ldrb	r3, [r7, #21]
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	f003 0306 	and.w	r3, r3, #6
 8008802:	b2db      	uxtb	r3, r3
 8008804:	4413      	add	r3, r2
 8008806:	b2db      	uxtb	r3, r3
 8008808:	3302      	adds	r3, #2
 800880a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800880e:	7d3b      	ldrb	r3, [r7, #20]
 8008810:	099b      	lsrs	r3, r3, #6
 8008812:	b2db      	uxtb	r3, r3
 8008814:	461a      	mov	r2, r3
 8008816:	7cfb      	ldrb	r3, [r7, #19]
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	441a      	add	r2, r3
 800881c:	7cbb      	ldrb	r3, [r7, #18]
 800881e:	029b      	lsls	r3, r3, #10
 8008820:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008824:	4413      	add	r3, r2
 8008826:	3301      	adds	r3, #1
 8008828:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800882a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800882e:	3b09      	subs	r3, #9
 8008830:	69fa      	ldr	r2, [r7, #28]
 8008832:	409a      	lsls	r2, r3
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800883e:	e0ce      	b.n	80089de <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8008840:	4b71      	ldr	r3, [pc, #452]	@ (8008a08 <USER_SPI_ioctl+0x2dc>)
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b00      	cmp	r3, #0
 800884a:	d031      	beq.n	80088b0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800884c:	2100      	movs	r1, #0
 800884e:	208d      	movs	r0, #141	@ 0x8d
 8008850:	f7ff fd19 	bl	8008286 <send_cmd>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	f040 80c3 	bne.w	80089e2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800885c:	20ff      	movs	r0, #255	@ 0xff
 800885e:	f7ff fc21 	bl	80080a4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8008862:	f107 030c 	add.w	r3, r7, #12
 8008866:	2110      	movs	r1, #16
 8008868:	4618      	mov	r0, r3
 800886a:	f7ff fcb1 	bl	80081d0 <rcvr_datablock>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	f000 80b6 	beq.w	80089e2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8008876:	2330      	movs	r3, #48	@ 0x30
 8008878:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800887c:	e007      	b.n	800888e <USER_SPI_ioctl+0x162>
 800887e:	20ff      	movs	r0, #255	@ 0xff
 8008880:	f7ff fc10 	bl	80080a4 <xchg_spi>
 8008884:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008888:	3b01      	subs	r3, #1
 800888a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800888e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1f3      	bne.n	800887e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8008896:	7dbb      	ldrb	r3, [r7, #22]
 8008898:	091b      	lsrs	r3, r3, #4
 800889a:	b2db      	uxtb	r3, r3
 800889c:	461a      	mov	r2, r3
 800889e:	2310      	movs	r3, #16
 80088a0:	fa03 f202 	lsl.w	r2, r3, r2
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80088ae:	e098      	b.n	80089e2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80088b0:	2100      	movs	r1, #0
 80088b2:	2009      	movs	r0, #9
 80088b4:	f7ff fce7 	bl	8008286 <send_cmd>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f040 8091 	bne.w	80089e2 <USER_SPI_ioctl+0x2b6>
 80088c0:	f107 030c 	add.w	r3, r7, #12
 80088c4:	2110      	movs	r1, #16
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7ff fc82 	bl	80081d0 <rcvr_datablock>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f000 8087 	beq.w	80089e2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80088d4:	4b4c      	ldr	r3, [pc, #304]	@ (8008a08 <USER_SPI_ioctl+0x2dc>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	f003 0302 	and.w	r3, r3, #2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d012      	beq.n	8008906 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80088e0:	7dbb      	ldrb	r3, [r7, #22]
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80088e8:	7dfa      	ldrb	r2, [r7, #23]
 80088ea:	09d2      	lsrs	r2, r2, #7
 80088ec:	b2d2      	uxtb	r2, r2
 80088ee:	4413      	add	r3, r2
 80088f0:	1c5a      	adds	r2, r3, #1
 80088f2:	7e7b      	ldrb	r3, [r7, #25]
 80088f4:	099b      	lsrs	r3, r3, #6
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	3b01      	subs	r3, #1
 80088fa:	fa02 f303 	lsl.w	r3, r2, r3
 80088fe:	461a      	mov	r2, r3
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	e013      	b.n	800892e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8008906:	7dbb      	ldrb	r3, [r7, #22]
 8008908:	109b      	asrs	r3, r3, #2
 800890a:	b29b      	uxth	r3, r3
 800890c:	f003 031f 	and.w	r3, r3, #31
 8008910:	3301      	adds	r3, #1
 8008912:	7dfa      	ldrb	r2, [r7, #23]
 8008914:	00d2      	lsls	r2, r2, #3
 8008916:	f002 0218 	and.w	r2, r2, #24
 800891a:	7df9      	ldrb	r1, [r7, #23]
 800891c:	0949      	lsrs	r1, r1, #5
 800891e:	b2c9      	uxtb	r1, r1
 8008920:	440a      	add	r2, r1
 8008922:	3201      	adds	r2, #1
 8008924:	fb02 f303 	mul.w	r3, r2, r3
 8008928:	461a      	mov	r2, r3
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8008934:	e055      	b.n	80089e2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008936:	4b34      	ldr	r3, [pc, #208]	@ (8008a08 <USER_SPI_ioctl+0x2dc>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	f003 0306 	and.w	r3, r3, #6
 800893e:	2b00      	cmp	r3, #0
 8008940:	d051      	beq.n	80089e6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008942:	f107 020c 	add.w	r2, r7, #12
 8008946:	79fb      	ldrb	r3, [r7, #7]
 8008948:	210b      	movs	r1, #11
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff feee 	bl	800872c <USER_SPI_ioctl>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d149      	bne.n	80089ea <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008956:	7b3b      	ldrb	r3, [r7, #12]
 8008958:	099b      	lsrs	r3, r3, #6
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b00      	cmp	r3, #0
 800895e:	d104      	bne.n	800896a <USER_SPI_ioctl+0x23e>
 8008960:	7dbb      	ldrb	r3, [r7, #22]
 8008962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008966:	2b00      	cmp	r3, #0
 8008968:	d041      	beq.n	80089ee <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	623b      	str	r3, [r7, #32]
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800897a:	4b23      	ldr	r3, [pc, #140]	@ (8008a08 <USER_SPI_ioctl+0x2dc>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	f003 0308 	and.w	r3, r3, #8
 8008982:	2b00      	cmp	r3, #0
 8008984:	d105      	bne.n	8008992 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8008986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008988:	025b      	lsls	r3, r3, #9
 800898a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800898c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898e:	025b      	lsls	r3, r3, #9
 8008990:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8008992:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008994:	2020      	movs	r0, #32
 8008996:	f7ff fc76 	bl	8008286 <send_cmd>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d128      	bne.n	80089f2 <USER_SPI_ioctl+0x2c6>
 80089a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80089a2:	2021      	movs	r0, #33	@ 0x21
 80089a4:	f7ff fc6f 	bl	8008286 <send_cmd>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d121      	bne.n	80089f2 <USER_SPI_ioctl+0x2c6>
 80089ae:	2100      	movs	r1, #0
 80089b0:	2026      	movs	r0, #38	@ 0x26
 80089b2:	f7ff fc68 	bl	8008286 <send_cmd>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d11a      	bne.n	80089f2 <USER_SPI_ioctl+0x2c6>
 80089bc:	f247 5030 	movw	r0, #30000	@ 0x7530
 80089c0:	f7ff fbb6 	bl	8008130 <wait_ready>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d013      	beq.n	80089f2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80089ca:	2300      	movs	r3, #0
 80089cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80089d0:	e00f      	b.n	80089f2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80089d2:	2304      	movs	r3, #4
 80089d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80089d8:	e00c      	b.n	80089f4 <USER_SPI_ioctl+0x2c8>
		break;
 80089da:	bf00      	nop
 80089dc:	e00a      	b.n	80089f4 <USER_SPI_ioctl+0x2c8>
		break;
 80089de:	bf00      	nop
 80089e0:	e008      	b.n	80089f4 <USER_SPI_ioctl+0x2c8>
		break;
 80089e2:	bf00      	nop
 80089e4:	e006      	b.n	80089f4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80089e6:	bf00      	nop
 80089e8:	e004      	b.n	80089f4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80089ea:	bf00      	nop
 80089ec:	e002      	b.n	80089f4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80089ee:	bf00      	nop
 80089f0:	e000      	b.n	80089f4 <USER_SPI_ioctl+0x2c8>
		break;
 80089f2:	bf00      	nop
	}

	despiselect();
 80089f4:	f7ff fbc0 	bl	8008178 <despiselect>

	return res;
 80089f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3730      	adds	r7, #48	@ 0x30
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	20000024 	.word	0x20000024
 8008a08:	20000884 	.word	0x20000884

08008a0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f103 0208 	add.w	r2, r3, #8
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f04f 32ff 	mov.w	r2, #4294967295
 8008a24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f103 0208 	add.w	r2, r3, #8
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f103 0208 	add.w	r2, r3, #8
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a5a:	bf00      	nop
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a66:	b480      	push	{r7}
 8008a68:	b085      	sub	sp, #20
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	689a      	ldr	r2, [r3, #8]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	1c5a      	adds	r2, r3, #1
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	601a      	str	r2, [r3, #0]
}
 8008aa2:	bf00      	nop
 8008aa4:	3714      	adds	r7, #20
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b085      	sub	sp, #20
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac4:	d103      	bne.n	8008ace <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	e00c      	b.n	8008ae8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	3308      	adds	r3, #8
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	e002      	b.n	8008adc <vListInsert+0x2e>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d2f6      	bcs.n	8008ad6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	1c5a      	adds	r2, r3, #1
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	601a      	str	r2, [r3, #0]
}
 8008b14:	bf00      	nop
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	6892      	ldr	r2, [r2, #8]
 8008b36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	6852      	ldr	r2, [r2, #4]
 8008b40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d103      	bne.n	8008b54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689a      	ldr	r2, [r3, #8]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	1e5a      	subs	r2, r3, #1
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10b      	bne.n	8008ba0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8c:	f383 8811 	msr	BASEPRI, r3
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	f3bf 8f4f 	dsb	sy
 8008b98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b9a:	bf00      	nop
 8008b9c:	bf00      	nop
 8008b9e:	e7fd      	b.n	8008b9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008ba0:	f002 fa0a 	bl	800afb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bac:	68f9      	ldr	r1, [r7, #12]
 8008bae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008bb0:	fb01 f303 	mul.w	r3, r1, r3
 8008bb4:	441a      	add	r2, r3
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	68f9      	ldr	r1, [r7, #12]
 8008bd4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008bd6:	fb01 f303 	mul.w	r3, r1, r3
 8008bda:	441a      	add	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	22ff      	movs	r2, #255	@ 0xff
 8008be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	22ff      	movs	r2, #255	@ 0xff
 8008bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d114      	bne.n	8008c20 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d01a      	beq.n	8008c34 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3310      	adds	r3, #16
 8008c02:	4618      	mov	r0, r3
 8008c04:	f001 f9b0 	bl	8009f68 <xTaskRemoveFromEventList>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d012      	beq.n	8008c34 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c44 <xQueueGenericReset+0xd0>)
 8008c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	e009      	b.n	8008c34 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	3310      	adds	r3, #16
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7ff fef1 	bl	8008a0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3324      	adds	r3, #36	@ 0x24
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7ff feec 	bl	8008a0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c34:	f002 f9f2 	bl	800b01c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c38:	2301      	movs	r3, #1
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	e000ed04 	.word	0xe000ed04

08008c48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b08a      	sub	sp, #40	@ 0x28
 8008c4c:	af02      	add	r7, sp, #8
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	4613      	mov	r3, r2
 8008c54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10b      	bne.n	8008c74 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	613b      	str	r3, [r7, #16]
}
 8008c6e:	bf00      	nop
 8008c70:	bf00      	nop
 8008c72:	e7fd      	b.n	8008c70 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d102      	bne.n	8008c80 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	61fb      	str	r3, [r7, #28]
 8008c7e:	e004      	b.n	8008c8a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	fb02 f303 	mul.w	r3, r2, r3
 8008c88:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	3350      	adds	r3, #80	@ 0x50
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f002 fab4 	bl	800b1fc <pvPortMalloc>
 8008c94:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00d      	beq.n	8008cb8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	3350      	adds	r3, #80	@ 0x50
 8008ca4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ca6:	79fa      	ldrb	r2, [r7, #7]
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	4613      	mov	r3, r2
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	68b9      	ldr	r1, [r7, #8]
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f000 f805 	bl	8008cc2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008cb8:	69bb      	ldr	r3, [r7, #24]
	}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3720      	adds	r7, #32
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	60f8      	str	r0, [r7, #12]
 8008cca:	60b9      	str	r1, [r7, #8]
 8008ccc:	607a      	str	r2, [r7, #4]
 8008cce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d103      	bne.n	8008cde <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	e002      	b.n	8008ce4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	69b8      	ldr	r0, [r7, #24]
 8008cf4:	f7ff ff3e 	bl	8008b74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	78fa      	ldrb	r2, [r7, #3]
 8008cfc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d00:	bf00      	nop
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00e      	beq.n	8008d34 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008d28:	2300      	movs	r3, #0
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f81c 	bl	8008d6c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008d34:	bf00      	nop
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008d46:	2301      	movs	r3, #1
 8008d48:	617b      	str	r3, [r7, #20]
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008d4e:	79fb      	ldrb	r3, [r7, #7]
 8008d50:	461a      	mov	r2, r3
 8008d52:	6939      	ldr	r1, [r7, #16]
 8008d54:	6978      	ldr	r0, [r7, #20]
 8008d56:	f7ff ff77 	bl	8008c48 <xQueueGenericCreate>
 8008d5a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f7ff ffd3 	bl	8008d08 <prvInitialiseMutex>

		return xNewQueue;
 8008d62:	68fb      	ldr	r3, [r7, #12]
	}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3718      	adds	r7, #24
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08e      	sub	sp, #56	@ 0x38
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
 8008d78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10b      	bne.n	8008da0 <xQueueGenericSend+0x34>
	__asm volatile
 8008d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d9a:	bf00      	nop
 8008d9c:	bf00      	nop
 8008d9e:	e7fd      	b.n	8008d9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d103      	bne.n	8008dae <xQueueGenericSend+0x42>
 8008da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <xQueueGenericSend+0x46>
 8008dae:	2301      	movs	r3, #1
 8008db0:	e000      	b.n	8008db4 <xQueueGenericSend+0x48>
 8008db2:	2300      	movs	r3, #0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10b      	bne.n	8008dd0 <xQueueGenericSend+0x64>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008dca:	bf00      	nop
 8008dcc:	bf00      	nop
 8008dce:	e7fd      	b.n	8008dcc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d103      	bne.n	8008dde <xQueueGenericSend+0x72>
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d101      	bne.n	8008de2 <xQueueGenericSend+0x76>
 8008dde:	2301      	movs	r3, #1
 8008de0:	e000      	b.n	8008de4 <xQueueGenericSend+0x78>
 8008de2:	2300      	movs	r3, #0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10b      	bne.n	8008e00 <xQueueGenericSend+0x94>
	__asm volatile
 8008de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	623b      	str	r3, [r7, #32]
}
 8008dfa:	bf00      	nop
 8008dfc:	bf00      	nop
 8008dfe:	e7fd      	b.n	8008dfc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e00:	f001 fa52 	bl	800a2a8 <xTaskGetSchedulerState>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d102      	bne.n	8008e10 <xQueueGenericSend+0xa4>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <xQueueGenericSend+0xa8>
 8008e10:	2301      	movs	r3, #1
 8008e12:	e000      	b.n	8008e16 <xQueueGenericSend+0xaa>
 8008e14:	2300      	movs	r3, #0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10b      	bne.n	8008e32 <xQueueGenericSend+0xc6>
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	61fb      	str	r3, [r7, #28]
}
 8008e2c:	bf00      	nop
 8008e2e:	bf00      	nop
 8008e30:	e7fd      	b.n	8008e2e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e32:	f002 f8c1 	bl	800afb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d302      	bcc.n	8008e48 <xQueueGenericSend+0xdc>
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d129      	bne.n	8008e9c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	68b9      	ldr	r1, [r7, #8]
 8008e4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e4e:	f000 fb35 	bl	80094bc <prvCopyDataToQueue>
 8008e52:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d010      	beq.n	8008e7e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5e:	3324      	adds	r3, #36	@ 0x24
 8008e60:	4618      	mov	r0, r3
 8008e62:	f001 f881 	bl	8009f68 <xTaskRemoveFromEventList>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d013      	beq.n	8008e94 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8008f6c <xQueueGenericSend+0x200>)
 8008e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	e00a      	b.n	8008e94 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d007      	beq.n	8008e94 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e84:	4b39      	ldr	r3, [pc, #228]	@ (8008f6c <xQueueGenericSend+0x200>)
 8008e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e94:	f002 f8c2 	bl	800b01c <vPortExitCritical>
				return pdPASS;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e063      	b.n	8008f64 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d103      	bne.n	8008eaa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ea2:	f002 f8bb 	bl	800b01c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	e05c      	b.n	8008f64 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d106      	bne.n	8008ebe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008eb0:	f107 0314 	add.w	r3, r7, #20
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f001 f8bb 	bl	800a030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ebe:	f002 f8ad 	bl	800b01c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ec2:	f000 fe2d 	bl	8009b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ec6:	f002 f877 	bl	800afb8 <vPortEnterCritical>
 8008eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ecc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ed0:	b25b      	sxtb	r3, r3
 8008ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed6:	d103      	bne.n	8008ee0 <xQueueGenericSend+0x174>
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ee6:	b25b      	sxtb	r3, r3
 8008ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eec:	d103      	bne.n	8008ef6 <xQueueGenericSend+0x18a>
 8008eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ef6:	f002 f891 	bl	800b01c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008efa:	1d3a      	adds	r2, r7, #4
 8008efc:	f107 0314 	add.w	r3, r7, #20
 8008f00:	4611      	mov	r1, r2
 8008f02:	4618      	mov	r0, r3
 8008f04:	f001 f8aa 	bl	800a05c <xTaskCheckForTimeOut>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d124      	bne.n	8008f58 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f10:	f000 fbcc 	bl	80096ac <prvIsQueueFull>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d018      	beq.n	8008f4c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1c:	3310      	adds	r3, #16
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 ffce 	bl	8009ec4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f2a:	f000 fb57 	bl	80095dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f2e:	f000 fe05 	bl	8009b3c <xTaskResumeAll>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f47f af7c 	bne.w	8008e32 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f6c <xQueueGenericSend+0x200>)
 8008f3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f40:	601a      	str	r2, [r3, #0]
 8008f42:	f3bf 8f4f 	dsb	sy
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	e772      	b.n	8008e32 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f4e:	f000 fb45 	bl	80095dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f52:	f000 fdf3 	bl	8009b3c <xTaskResumeAll>
 8008f56:	e76c      	b.n	8008e32 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f5a:	f000 fb3f 	bl	80095dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f5e:	f000 fded 	bl	8009b3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3738      	adds	r7, #56	@ 0x38
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	e000ed04 	.word	0xe000ed04

08008f70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b08e      	sub	sp, #56	@ 0x38
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
 8008f7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10b      	bne.n	8008fa0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008f9a:	bf00      	nop
 8008f9c:	bf00      	nop
 8008f9e:	e7fd      	b.n	8008f9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d103      	bne.n	8008fae <xQueueGenericSendFromISR+0x3e>
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d101      	bne.n	8008fb2 <xQueueGenericSendFromISR+0x42>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e000      	b.n	8008fb4 <xQueueGenericSendFromISR+0x44>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10b      	bne.n	8008fd0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	623b      	str	r3, [r7, #32]
}
 8008fca:	bf00      	nop
 8008fcc:	bf00      	nop
 8008fce:	e7fd      	b.n	8008fcc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d103      	bne.n	8008fde <xQueueGenericSendFromISR+0x6e>
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d101      	bne.n	8008fe2 <xQueueGenericSendFromISR+0x72>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e000      	b.n	8008fe4 <xQueueGenericSendFromISR+0x74>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10b      	bne.n	8009000 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	61fb      	str	r3, [r7, #28]
}
 8008ffa:	bf00      	nop
 8008ffc:	bf00      	nop
 8008ffe:	e7fd      	b.n	8008ffc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009000:	f002 f8ba 	bl	800b178 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009004:	f3ef 8211 	mrs	r2, BASEPRI
 8009008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	61ba      	str	r2, [r7, #24]
 800901a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800901c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800901e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009022:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009028:	429a      	cmp	r2, r3
 800902a:	d302      	bcc.n	8009032 <xQueueGenericSendFromISR+0xc2>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b02      	cmp	r3, #2
 8009030:	d12c      	bne.n	800908c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009034:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009038:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	68b9      	ldr	r1, [r7, #8]
 8009040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009042:	f000 fa3b 	bl	80094bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009046:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800904a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904e:	d112      	bne.n	8009076 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009054:	2b00      	cmp	r3, #0
 8009056:	d016      	beq.n	8009086 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905a:	3324      	adds	r3, #36	@ 0x24
 800905c:	4618      	mov	r0, r3
 800905e:	f000 ff83 	bl	8009f68 <xTaskRemoveFromEventList>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00e      	beq.n	8009086 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00b      	beq.n	8009086 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2201      	movs	r2, #1
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	e007      	b.n	8009086 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009076:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800907a:	3301      	adds	r3, #1
 800907c:	b2db      	uxtb	r3, r3
 800907e:	b25a      	sxtb	r2, r3
 8009080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009082:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009086:	2301      	movs	r3, #1
 8009088:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800908a:	e001      	b.n	8009090 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800908c:	2300      	movs	r3, #0
 800908e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009092:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800909a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800909c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3738      	adds	r7, #56	@ 0x38
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b08c      	sub	sp, #48	@ 0x30
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80090b4:	2300      	movs	r3, #0
 80090b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10b      	bne.n	80090da <xQueueReceive+0x32>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	623b      	str	r3, [r7, #32]
}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop
 80090d8:	e7fd      	b.n	80090d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d103      	bne.n	80090e8 <xQueueReceive+0x40>
 80090e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <xQueueReceive+0x44>
 80090e8:	2301      	movs	r3, #1
 80090ea:	e000      	b.n	80090ee <xQueueReceive+0x46>
 80090ec:	2300      	movs	r3, #0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10b      	bne.n	800910a <xQueueReceive+0x62>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	61fb      	str	r3, [r7, #28]
}
 8009104:	bf00      	nop
 8009106:	bf00      	nop
 8009108:	e7fd      	b.n	8009106 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800910a:	f001 f8cd 	bl	800a2a8 <xTaskGetSchedulerState>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d102      	bne.n	800911a <xQueueReceive+0x72>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <xQueueReceive+0x76>
 800911a:	2301      	movs	r3, #1
 800911c:	e000      	b.n	8009120 <xQueueReceive+0x78>
 800911e:	2300      	movs	r3, #0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10b      	bne.n	800913c <xQueueReceive+0x94>
	__asm volatile
 8009124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009128:	f383 8811 	msr	BASEPRI, r3
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	61bb      	str	r3, [r7, #24]
}
 8009136:	bf00      	nop
 8009138:	bf00      	nop
 800913a:	e7fd      	b.n	8009138 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800913c:	f001 ff3c 	bl	800afb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009144:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009148:	2b00      	cmp	r3, #0
 800914a:	d01f      	beq.n	800918c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800914c:	68b9      	ldr	r1, [r7, #8]
 800914e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009150:	f000 fa1e 	bl	8009590 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009156:	1e5a      	subs	r2, r3, #1
 8009158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800915c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00f      	beq.n	8009184 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009166:	3310      	adds	r3, #16
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fefd 	bl	8009f68 <xTaskRemoveFromEventList>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d007      	beq.n	8009184 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009174:	4b3c      	ldr	r3, [pc, #240]	@ (8009268 <xQueueReceive+0x1c0>)
 8009176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800917a:	601a      	str	r2, [r3, #0]
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009184:	f001 ff4a 	bl	800b01c <vPortExitCritical>
				return pdPASS;
 8009188:	2301      	movs	r3, #1
 800918a:	e069      	b.n	8009260 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d103      	bne.n	800919a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009192:	f001 ff43 	bl	800b01c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009196:	2300      	movs	r3, #0
 8009198:	e062      	b.n	8009260 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800919a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919c:	2b00      	cmp	r3, #0
 800919e:	d106      	bne.n	80091ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091a0:	f107 0310 	add.w	r3, r7, #16
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 ff43 	bl	800a030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091aa:	2301      	movs	r3, #1
 80091ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091ae:	f001 ff35 	bl	800b01c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091b2:	f000 fcb5 	bl	8009b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091b6:	f001 feff 	bl	800afb8 <vPortEnterCritical>
 80091ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091c0:	b25b      	sxtb	r3, r3
 80091c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c6:	d103      	bne.n	80091d0 <xQueueReceive+0x128>
 80091c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091d6:	b25b      	sxtb	r3, r3
 80091d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091dc:	d103      	bne.n	80091e6 <xQueueReceive+0x13e>
 80091de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091e6:	f001 ff19 	bl	800b01c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091ea:	1d3a      	adds	r2, r7, #4
 80091ec:	f107 0310 	add.w	r3, r7, #16
 80091f0:	4611      	mov	r1, r2
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 ff32 	bl	800a05c <xTaskCheckForTimeOut>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d123      	bne.n	8009246 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009200:	f000 fa3e 	bl	8009680 <prvIsQueueEmpty>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d017      	beq.n	800923a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800920a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800920c:	3324      	adds	r3, #36	@ 0x24
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	4611      	mov	r1, r2
 8009212:	4618      	mov	r0, r3
 8009214:	f000 fe56 	bl	8009ec4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009218:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800921a:	f000 f9df 	bl	80095dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800921e:	f000 fc8d 	bl	8009b3c <xTaskResumeAll>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d189      	bne.n	800913c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009228:	4b0f      	ldr	r3, [pc, #60]	@ (8009268 <xQueueReceive+0x1c0>)
 800922a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800922e:	601a      	str	r2, [r3, #0]
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	e780      	b.n	800913c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800923a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800923c:	f000 f9ce 	bl	80095dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009240:	f000 fc7c 	bl	8009b3c <xTaskResumeAll>
 8009244:	e77a      	b.n	800913c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009246:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009248:	f000 f9c8 	bl	80095dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800924c:	f000 fc76 	bl	8009b3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009250:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009252:	f000 fa15 	bl	8009680 <prvIsQueueEmpty>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	f43f af6f 	beq.w	800913c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800925e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009260:	4618      	mov	r0, r3
 8009262:	3730      	adds	r7, #48	@ 0x30
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	e000ed04 	.word	0xe000ed04

0800926c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08e      	sub	sp, #56	@ 0x38
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009276:	2300      	movs	r3, #0
 8009278:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800927e:	2300      	movs	r3, #0
 8009280:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10b      	bne.n	80092a0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	623b      	str	r3, [r7, #32]
}
 800929a:	bf00      	nop
 800929c:	bf00      	nop
 800929e:	e7fd      	b.n	800929c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80092a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00b      	beq.n	80092c0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	61fb      	str	r3, [r7, #28]
}
 80092ba:	bf00      	nop
 80092bc:	bf00      	nop
 80092be:	e7fd      	b.n	80092bc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092c0:	f000 fff2 	bl	800a2a8 <xTaskGetSchedulerState>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d102      	bne.n	80092d0 <xQueueSemaphoreTake+0x64>
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <xQueueSemaphoreTake+0x68>
 80092d0:	2301      	movs	r3, #1
 80092d2:	e000      	b.n	80092d6 <xQueueSemaphoreTake+0x6a>
 80092d4:	2300      	movs	r3, #0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10b      	bne.n	80092f2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	61bb      	str	r3, [r7, #24]
}
 80092ec:	bf00      	nop
 80092ee:	bf00      	nop
 80092f0:	e7fd      	b.n	80092ee <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092f2:	f001 fe61 	bl	800afb8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80092f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092fa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80092fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d024      	beq.n	800934c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009304:	1e5a      	subs	r2, r3, #1
 8009306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009308:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800930a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d104      	bne.n	800931c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009312:	f001 f98b 	bl	800a62c <pvTaskIncrementMutexHeldCount>
 8009316:	4602      	mov	r2, r0
 8009318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800931a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800931c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00f      	beq.n	8009344 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009326:	3310      	adds	r3, #16
 8009328:	4618      	mov	r0, r3
 800932a:	f000 fe1d 	bl	8009f68 <xTaskRemoveFromEventList>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d007      	beq.n	8009344 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009334:	4b54      	ldr	r3, [pc, #336]	@ (8009488 <xQueueSemaphoreTake+0x21c>)
 8009336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800933a:	601a      	str	r2, [r3, #0]
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009344:	f001 fe6a 	bl	800b01c <vPortExitCritical>
				return pdPASS;
 8009348:	2301      	movs	r3, #1
 800934a:	e098      	b.n	800947e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d112      	bne.n	8009378 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00b      	beq.n	8009370 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935c:	f383 8811 	msr	BASEPRI, r3
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	617b      	str	r3, [r7, #20]
}
 800936a:	bf00      	nop
 800936c:	bf00      	nop
 800936e:	e7fd      	b.n	800936c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009370:	f001 fe54 	bl	800b01c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009374:	2300      	movs	r3, #0
 8009376:	e082      	b.n	800947e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800937a:	2b00      	cmp	r3, #0
 800937c:	d106      	bne.n	800938c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800937e:	f107 030c 	add.w	r3, r7, #12
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fe54 	bl	800a030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009388:	2301      	movs	r3, #1
 800938a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800938c:	f001 fe46 	bl	800b01c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009390:	f000 fbc6 	bl	8009b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009394:	f001 fe10 	bl	800afb8 <vPortEnterCritical>
 8009398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800939a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800939e:	b25b      	sxtb	r3, r3
 80093a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a4:	d103      	bne.n	80093ae <xQueueSemaphoreTake+0x142>
 80093a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093b4:	b25b      	sxtb	r3, r3
 80093b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ba:	d103      	bne.n	80093c4 <xQueueSemaphoreTake+0x158>
 80093bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093c4:	f001 fe2a 	bl	800b01c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093c8:	463a      	mov	r2, r7
 80093ca:	f107 030c 	add.w	r3, r7, #12
 80093ce:	4611      	mov	r1, r2
 80093d0:	4618      	mov	r0, r3
 80093d2:	f000 fe43 	bl	800a05c <xTaskCheckForTimeOut>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d132      	bne.n	8009442 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093de:	f000 f94f 	bl	8009680 <prvIsQueueEmpty>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d026      	beq.n	8009436 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d109      	bne.n	8009404 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80093f0:	f001 fde2 	bl	800afb8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 ff73 	bl	800a2e4 <xTaskPriorityInherit>
 80093fe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009400:	f001 fe0c 	bl	800b01c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009406:	3324      	adds	r3, #36	@ 0x24
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	4611      	mov	r1, r2
 800940c:	4618      	mov	r0, r3
 800940e:	f000 fd59 	bl	8009ec4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009412:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009414:	f000 f8e2 	bl	80095dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009418:	f000 fb90 	bl	8009b3c <xTaskResumeAll>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	f47f af67 	bne.w	80092f2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009424:	4b18      	ldr	r3, [pc, #96]	@ (8009488 <xQueueSemaphoreTake+0x21c>)
 8009426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800942a:	601a      	str	r2, [r3, #0]
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	e75d      	b.n	80092f2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009436:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009438:	f000 f8d0 	bl	80095dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800943c:	f000 fb7e 	bl	8009b3c <xTaskResumeAll>
 8009440:	e757      	b.n	80092f2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009442:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009444:	f000 f8ca 	bl	80095dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009448:	f000 fb78 	bl	8009b3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800944c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800944e:	f000 f917 	bl	8009680 <prvIsQueueEmpty>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	f43f af4c 	beq.w	80092f2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800945a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00d      	beq.n	800947c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009460:	f001 fdaa 	bl	800afb8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009464:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009466:	f000 f811 	bl	800948c <prvGetDisinheritPriorityAfterTimeout>
 800946a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800946c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009472:	4618      	mov	r0, r3
 8009474:	f001 f83e 	bl	800a4f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009478:	f001 fdd0 	bl	800b01c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800947c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800947e:	4618      	mov	r0, r3
 8009480:	3738      	adds	r7, #56	@ 0x38
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	e000ed04 	.word	0xe000ed04

0800948c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009498:	2b00      	cmp	r3, #0
 800949a:	d006      	beq.n	80094aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f1c3 0305 	rsb	r3, r3, #5
 80094a6:	60fb      	str	r3, [r7, #12]
 80094a8:	e001      	b.n	80094ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80094aa:	2300      	movs	r3, #0
 80094ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80094ae:	68fb      	ldr	r3, [r7, #12]
	}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3714      	adds	r7, #20
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094c8:	2300      	movs	r3, #0
 80094ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10d      	bne.n	80094f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d14d      	bne.n	800957e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 ff7c 	bl	800a3e4 <xTaskPriorityDisinherit>
 80094ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	609a      	str	r2, [r3, #8]
 80094f4:	e043      	b.n	800957e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d119      	bne.n	8009530 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6858      	ldr	r0, [r3, #4]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009504:	461a      	mov	r2, r3
 8009506:	68b9      	ldr	r1, [r7, #8]
 8009508:	f006 fcf3 	bl	800fef2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	685a      	ldr	r2, [r3, #4]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009514:	441a      	add	r2, r3
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	685a      	ldr	r2, [r3, #4]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	429a      	cmp	r2, r3
 8009524:	d32b      	bcc.n	800957e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	605a      	str	r2, [r3, #4]
 800952e:	e026      	b.n	800957e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	68d8      	ldr	r0, [r3, #12]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009538:	461a      	mov	r2, r3
 800953a:	68b9      	ldr	r1, [r7, #8]
 800953c:	f006 fcd9 	bl	800fef2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	68da      	ldr	r2, [r3, #12]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009548:	425b      	negs	r3, r3
 800954a:	441a      	add	r2, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	68da      	ldr	r2, [r3, #12]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	429a      	cmp	r2, r3
 800955a:	d207      	bcs.n	800956c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	689a      	ldr	r2, [r3, #8]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009564:	425b      	negs	r3, r3
 8009566:	441a      	add	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b02      	cmp	r3, #2
 8009570:	d105      	bne.n	800957e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d002      	beq.n	800957e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	3b01      	subs	r3, #1
 800957c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	1c5a      	adds	r2, r3, #1
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009586:	697b      	ldr	r3, [r7, #20]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3718      	adds	r7, #24
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d018      	beq.n	80095d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68da      	ldr	r2, [r3, #12]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095aa:	441a      	add	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	68da      	ldr	r2, [r3, #12]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d303      	bcc.n	80095c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68d9      	ldr	r1, [r3, #12]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095cc:	461a      	mov	r2, r3
 80095ce:	6838      	ldr	r0, [r7, #0]
 80095d0:	f006 fc8f 	bl	800fef2 <memcpy>
	}
}
 80095d4:	bf00      	nop
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095e4:	f001 fce8 	bl	800afb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095f0:	e011      	b.n	8009616 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d012      	beq.n	8009620 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	3324      	adds	r3, #36	@ 0x24
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 fcb2 	bl	8009f68 <xTaskRemoveFromEventList>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800960a:	f000 fd8b 	bl	800a124 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800960e:	7bfb      	ldrb	r3, [r7, #15]
 8009610:	3b01      	subs	r3, #1
 8009612:	b2db      	uxtb	r3, r3
 8009614:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800961a:	2b00      	cmp	r3, #0
 800961c:	dce9      	bgt.n	80095f2 <prvUnlockQueue+0x16>
 800961e:	e000      	b.n	8009622 <prvUnlockQueue+0x46>
					break;
 8009620:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	22ff      	movs	r2, #255	@ 0xff
 8009626:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800962a:	f001 fcf7 	bl	800b01c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800962e:	f001 fcc3 	bl	800afb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009638:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800963a:	e011      	b.n	8009660 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d012      	beq.n	800966a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	3310      	adds	r3, #16
 8009648:	4618      	mov	r0, r3
 800964a:	f000 fc8d 	bl	8009f68 <xTaskRemoveFromEventList>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009654:	f000 fd66 	bl	800a124 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009658:	7bbb      	ldrb	r3, [r7, #14]
 800965a:	3b01      	subs	r3, #1
 800965c:	b2db      	uxtb	r3, r3
 800965e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009660:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009664:	2b00      	cmp	r3, #0
 8009666:	dce9      	bgt.n	800963c <prvUnlockQueue+0x60>
 8009668:	e000      	b.n	800966c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800966a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	22ff      	movs	r2, #255	@ 0xff
 8009670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009674:	f001 fcd2 	bl	800b01c <vPortExitCritical>
}
 8009678:	bf00      	nop
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009688:	f001 fc96 	bl	800afb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009690:	2b00      	cmp	r3, #0
 8009692:	d102      	bne.n	800969a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009694:	2301      	movs	r3, #1
 8009696:	60fb      	str	r3, [r7, #12]
 8009698:	e001      	b.n	800969e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800969a:	2300      	movs	r3, #0
 800969c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800969e:	f001 fcbd 	bl	800b01c <vPortExitCritical>

	return xReturn;
 80096a2:	68fb      	ldr	r3, [r7, #12]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096b4:	f001 fc80 	bl	800afb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d102      	bne.n	80096ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096c4:	2301      	movs	r3, #1
 80096c6:	60fb      	str	r3, [r7, #12]
 80096c8:	e001      	b.n	80096ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096ca:	2300      	movs	r3, #0
 80096cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096ce:	f001 fca5 	bl	800b01c <vPortExitCritical>

	return xReturn;
 80096d2:	68fb      	ldr	r3, [r7, #12]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096e6:	2300      	movs	r3, #0
 80096e8:	60fb      	str	r3, [r7, #12]
 80096ea:	e014      	b.n	8009716 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096ec:	4a0f      	ldr	r2, [pc, #60]	@ (800972c <vQueueAddToRegistry+0x50>)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10b      	bne.n	8009710 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096f8:	490c      	ldr	r1, [pc, #48]	@ (800972c <vQueueAddToRegistry+0x50>)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009702:	4a0a      	ldr	r2, [pc, #40]	@ (800972c <vQueueAddToRegistry+0x50>)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	00db      	lsls	r3, r3, #3
 8009708:	4413      	add	r3, r2
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800970e:	e006      	b.n	800971e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3301      	adds	r3, #1
 8009714:	60fb      	str	r3, [r7, #12]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2b07      	cmp	r3, #7
 800971a:	d9e7      	bls.n	80096ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800971c:	bf00      	nop
 800971e:	bf00      	nop
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	20000890 	.word	0x20000890

08009730 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009740:	f001 fc3a 	bl	800afb8 <vPortEnterCritical>
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800974a:	b25b      	sxtb	r3, r3
 800974c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009750:	d103      	bne.n	800975a <vQueueWaitForMessageRestricted+0x2a>
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009760:	b25b      	sxtb	r3, r3
 8009762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009766:	d103      	bne.n	8009770 <vQueueWaitForMessageRestricted+0x40>
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009770:	f001 fc54 	bl	800b01c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009778:	2b00      	cmp	r3, #0
 800977a:	d106      	bne.n	800978a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	3324      	adds	r3, #36	@ 0x24
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	68b9      	ldr	r1, [r7, #8]
 8009784:	4618      	mov	r0, r3
 8009786:	f000 fbc3 	bl	8009f10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800978a:	6978      	ldr	r0, [r7, #20]
 800978c:	f7ff ff26 	bl	80095dc <prvUnlockQueue>
	}
 8009790:	bf00      	nop
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08c      	sub	sp, #48	@ 0x30
 800979c:	af04      	add	r7, sp, #16
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	603b      	str	r3, [r7, #0]
 80097a4:	4613      	mov	r3, r2
 80097a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80097a8:	88fb      	ldrh	r3, [r7, #6]
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4618      	mov	r0, r3
 80097ae:	f001 fd25 	bl	800b1fc <pvPortMalloc>
 80097b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00e      	beq.n	80097d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80097ba:	2058      	movs	r0, #88	@ 0x58
 80097bc:	f001 fd1e 	bl	800b1fc <pvPortMalloc>
 80097c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d003      	beq.n	80097d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80097ce:	e005      	b.n	80097dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80097d0:	6978      	ldr	r0, [r7, #20]
 80097d2:	f001 fddb 	bl	800b38c <vPortFree>
 80097d6:	e001      	b.n	80097dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80097d8:	2300      	movs	r3, #0
 80097da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d013      	beq.n	800980a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80097e2:	88fa      	ldrh	r2, [r7, #6]
 80097e4:	2300      	movs	r3, #0
 80097e6:	9303      	str	r3, [sp, #12]
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	9302      	str	r3, [sp, #8]
 80097ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	68b9      	ldr	r1, [r7, #8]
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f000 f80e 	bl	800981a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097fe:	69f8      	ldr	r0, [r7, #28]
 8009800:	f000 f89c 	bl	800993c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009804:	2301      	movs	r3, #1
 8009806:	61bb      	str	r3, [r7, #24]
 8009808:	e002      	b.n	8009810 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800980a:	f04f 33ff 	mov.w	r3, #4294967295
 800980e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009810:	69bb      	ldr	r3, [r7, #24]
	}
 8009812:	4618      	mov	r0, r3
 8009814:	3720      	adds	r7, #32
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b088      	sub	sp, #32
 800981e:	af00      	add	r7, sp, #0
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	60b9      	str	r1, [r7, #8]
 8009824:	607a      	str	r2, [r7, #4]
 8009826:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	461a      	mov	r2, r3
 8009832:	21a5      	movs	r1, #165	@ 0xa5
 8009834:	f006 fa5c 	bl	800fcf0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009842:	3b01      	subs	r3, #1
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	f023 0307 	bic.w	r3, r3, #7
 8009850:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	f003 0307 	and.w	r3, r3, #7
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00b      	beq.n	8009874 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	617b      	str	r3, [r7, #20]
}
 800986e:	bf00      	nop
 8009870:	bf00      	nop
 8009872:	e7fd      	b.n	8009870 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d01f      	beq.n	80098ba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800987a:	2300      	movs	r3, #0
 800987c:	61fb      	str	r3, [r7, #28]
 800987e:	e012      	b.n	80098a6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	4413      	add	r3, r2
 8009886:	7819      	ldrb	r1, [r3, #0]
 8009888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	4413      	add	r3, r2
 800988e:	3334      	adds	r3, #52	@ 0x34
 8009890:	460a      	mov	r2, r1
 8009892:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009894:	68ba      	ldr	r2, [r7, #8]
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	4413      	add	r3, r2
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d006      	beq.n	80098ae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	3301      	adds	r3, #1
 80098a4:	61fb      	str	r3, [r7, #28]
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	2b09      	cmp	r3, #9
 80098aa:	d9e9      	bls.n	8009880 <prvInitialiseNewTask+0x66>
 80098ac:	e000      	b.n	80098b0 <prvInitialiseNewTask+0x96>
			{
				break;
 80098ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80098b8:	e003      	b.n	80098c2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80098ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80098c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	d901      	bls.n	80098cc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80098c8:	2304      	movs	r3, #4
 80098ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80098cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80098d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098d6:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80098d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098da:	2200      	movs	r2, #0
 80098dc:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80098de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e0:	3304      	adds	r3, #4
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7ff f8b2 	bl	8008a4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80098e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ea:	3318      	adds	r3, #24
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7ff f8ad 	bl	8008a4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80098f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fa:	f1c3 0205 	rsb	r2, r3, #5
 80098fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009900:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009906:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990a:	2200      	movs	r2, #0
 800990c:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800990e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009910:	2200      	movs	r2, #0
 8009912:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	68f9      	ldr	r1, [r7, #12]
 800991a:	69b8      	ldr	r0, [r7, #24]
 800991c:	f001 fa1e 	bl	800ad5c <pxPortInitialiseStack>
 8009920:	4602      	mov	r2, r0
 8009922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009924:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009928:	2b00      	cmp	r3, #0
 800992a:	d002      	beq.n	8009932 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800992c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800992e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009930:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009932:	bf00      	nop
 8009934:	3720      	adds	r7, #32
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
	...

0800993c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009944:	f001 fb38 	bl	800afb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009948:	4b2c      	ldr	r3, [pc, #176]	@ (80099fc <prvAddNewTaskToReadyList+0xc0>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3301      	adds	r3, #1
 800994e:	4a2b      	ldr	r2, [pc, #172]	@ (80099fc <prvAddNewTaskToReadyList+0xc0>)
 8009950:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009952:	4b2b      	ldr	r3, [pc, #172]	@ (8009a00 <prvAddNewTaskToReadyList+0xc4>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d109      	bne.n	800996e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800995a:	4a29      	ldr	r2, [pc, #164]	@ (8009a00 <prvAddNewTaskToReadyList+0xc4>)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009960:	4b26      	ldr	r3, [pc, #152]	@ (80099fc <prvAddNewTaskToReadyList+0xc0>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d110      	bne.n	800998a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009968:	f000 fc00 	bl	800a16c <prvInitialiseTaskLists>
 800996c:	e00d      	b.n	800998a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800996e:	4b25      	ldr	r3, [pc, #148]	@ (8009a04 <prvAddNewTaskToReadyList+0xc8>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d109      	bne.n	800998a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009976:	4b22      	ldr	r3, [pc, #136]	@ (8009a00 <prvAddNewTaskToReadyList+0xc4>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009980:	429a      	cmp	r2, r3
 8009982:	d802      	bhi.n	800998a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009984:	4a1e      	ldr	r2, [pc, #120]	@ (8009a00 <prvAddNewTaskToReadyList+0xc4>)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800998a:	4b1f      	ldr	r3, [pc, #124]	@ (8009a08 <prvAddNewTaskToReadyList+0xcc>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	3301      	adds	r3, #1
 8009990:	4a1d      	ldr	r2, [pc, #116]	@ (8009a08 <prvAddNewTaskToReadyList+0xcc>)
 8009992:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009994:	4b1c      	ldr	r3, [pc, #112]	@ (8009a08 <prvAddNewTaskToReadyList+0xcc>)
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a0:	2201      	movs	r2, #1
 80099a2:	409a      	lsls	r2, r3
 80099a4:	4b19      	ldr	r3, [pc, #100]	@ (8009a0c <prvAddNewTaskToReadyList+0xd0>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	4a18      	ldr	r2, [pc, #96]	@ (8009a0c <prvAddNewTaskToReadyList+0xd0>)
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099b2:	4613      	mov	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4a15      	ldr	r2, [pc, #84]	@ (8009a10 <prvAddNewTaskToReadyList+0xd4>)
 80099bc:	441a      	add	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	3304      	adds	r3, #4
 80099c2:	4619      	mov	r1, r3
 80099c4:	4610      	mov	r0, r2
 80099c6:	f7ff f84e 	bl	8008a66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80099ca:	f001 fb27 	bl	800b01c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80099ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009a04 <prvAddNewTaskToReadyList+0xc8>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00e      	beq.n	80099f4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80099d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009a00 <prvAddNewTaskToReadyList+0xc4>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d207      	bcs.n	80099f4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80099e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009a14 <prvAddNewTaskToReadyList+0xd8>)
 80099e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099f4:	bf00      	nop
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	200009a8 	.word	0x200009a8
 8009a00:	200008d0 	.word	0x200008d0
 8009a04:	200009b4 	.word	0x200009b4
 8009a08:	200009c4 	.word	0x200009c4
 8009a0c:	200009b0 	.word	0x200009b0
 8009a10:	200008d4 	.word	0x200008d4
 8009a14:	e000ed04 	.word	0xe000ed04

08009a18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a20:	2300      	movs	r3, #0
 8009a22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d018      	beq.n	8009a5c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a2a:	4b14      	ldr	r3, [pc, #80]	@ (8009a7c <vTaskDelay+0x64>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00b      	beq.n	8009a4a <vTaskDelay+0x32>
	__asm volatile
 8009a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a36:	f383 8811 	msr	BASEPRI, r3
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	60bb      	str	r3, [r7, #8]
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop
 8009a48:	e7fd      	b.n	8009a46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009a4a:	f000 f869 	bl	8009b20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a4e:	2100      	movs	r1, #0
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fdff 	bl	800a654 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009a56:	f000 f871 	bl	8009b3c <xTaskResumeAll>
 8009a5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d107      	bne.n	8009a72 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009a62:	4b07      	ldr	r3, [pc, #28]	@ (8009a80 <vTaskDelay+0x68>)
 8009a64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a68:	601a      	str	r2, [r3, #0]
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a72:	bf00      	nop
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	200009d0 	.word	0x200009d0
 8009a80:	e000ed04 	.word	0xe000ed04

08009a84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8009b08 <vTaskStartScheduler+0x84>)
 8009a8c:	9301      	str	r3, [sp, #4]
 8009a8e:	2300      	movs	r3, #0
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	2300      	movs	r3, #0
 8009a94:	2282      	movs	r2, #130	@ 0x82
 8009a96:	491d      	ldr	r1, [pc, #116]	@ (8009b0c <vTaskStartScheduler+0x88>)
 8009a98:	481d      	ldr	r0, [pc, #116]	@ (8009b10 <vTaskStartScheduler+0x8c>)
 8009a9a:	f7ff fe7d 	bl	8009798 <xTaskCreate>
 8009a9e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d102      	bne.n	8009aac <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8009aa6:	f000 fe3b 	bl	800a720 <xTimerCreateTimerTask>
 8009aaa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d116      	bne.n	8009ae0 <vTaskStartScheduler+0x5c>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	60bb      	str	r3, [r7, #8]
}
 8009ac4:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009ac6:	4b13      	ldr	r3, [pc, #76]	@ (8009b14 <vTaskStartScheduler+0x90>)
 8009ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8009acc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009ace:	4b12      	ldr	r3, [pc, #72]	@ (8009b18 <vTaskStartScheduler+0x94>)
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009ad4:	4b11      	ldr	r3, [pc, #68]	@ (8009b1c <vTaskStartScheduler+0x98>)
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009ada:	f001 f9c9 	bl	800ae70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009ade:	e00f      	b.n	8009b00 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae6:	d10b      	bne.n	8009b00 <vTaskStartScheduler+0x7c>
	__asm volatile
 8009ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	607b      	str	r3, [r7, #4]
}
 8009afa:	bf00      	nop
 8009afc:	bf00      	nop
 8009afe:	e7fd      	b.n	8009afc <vTaskStartScheduler+0x78>
}
 8009b00:	bf00      	nop
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	200009cc 	.word	0x200009cc
 8009b0c:	080117d0 	.word	0x080117d0
 8009b10:	0800a13d 	.word	0x0800a13d
 8009b14:	200009c8 	.word	0x200009c8
 8009b18:	200009b4 	.word	0x200009b4
 8009b1c:	200009ac 	.word	0x200009ac

08009b20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b20:	b480      	push	{r7}
 8009b22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009b24:	4b04      	ldr	r3, [pc, #16]	@ (8009b38 <vTaskSuspendAll+0x18>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	4a03      	ldr	r2, [pc, #12]	@ (8009b38 <vTaskSuspendAll+0x18>)
 8009b2c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009b2e:	bf00      	nop
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr
 8009b38:	200009d0 	.word	0x200009d0

08009b3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b42:	2300      	movs	r3, #0
 8009b44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b46:	2300      	movs	r3, #0
 8009b48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b4a:	4b42      	ldr	r3, [pc, #264]	@ (8009c54 <xTaskResumeAll+0x118>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10b      	bne.n	8009b6a <xTaskResumeAll+0x2e>
	__asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b56:	f383 8811 	msr	BASEPRI, r3
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	603b      	str	r3, [r7, #0]
}
 8009b64:	bf00      	nop
 8009b66:	bf00      	nop
 8009b68:	e7fd      	b.n	8009b66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b6a:	f001 fa25 	bl	800afb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b6e:	4b39      	ldr	r3, [pc, #228]	@ (8009c54 <xTaskResumeAll+0x118>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	3b01      	subs	r3, #1
 8009b74:	4a37      	ldr	r2, [pc, #220]	@ (8009c54 <xTaskResumeAll+0x118>)
 8009b76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b78:	4b36      	ldr	r3, [pc, #216]	@ (8009c54 <xTaskResumeAll+0x118>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d161      	bne.n	8009c44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b80:	4b35      	ldr	r3, [pc, #212]	@ (8009c58 <xTaskResumeAll+0x11c>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d05d      	beq.n	8009c44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b88:	e02e      	b.n	8009be8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b8a:	4b34      	ldr	r3, [pc, #208]	@ (8009c5c <xTaskResumeAll+0x120>)
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	3318      	adds	r3, #24
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fe ffc2 	bl	8008b20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	3304      	adds	r3, #4
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fe ffbd 	bl	8008b20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009baa:	2201      	movs	r2, #1
 8009bac:	409a      	lsls	r2, r3
 8009bae:	4b2c      	ldr	r3, [pc, #176]	@ (8009c60 <xTaskResumeAll+0x124>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	4a2a      	ldr	r2, [pc, #168]	@ (8009c60 <xTaskResumeAll+0x124>)
 8009bb6:	6013      	str	r3, [r2, #0]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4413      	add	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4a27      	ldr	r2, [pc, #156]	@ (8009c64 <xTaskResumeAll+0x128>)
 8009bc6:	441a      	add	r2, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	f7fe ff49 	bl	8008a66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bd8:	4b23      	ldr	r3, [pc, #140]	@ (8009c68 <xTaskResumeAll+0x12c>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d302      	bcc.n	8009be8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009be2:	4b22      	ldr	r3, [pc, #136]	@ (8009c6c <xTaskResumeAll+0x130>)
 8009be4:	2201      	movs	r2, #1
 8009be6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009be8:	4b1c      	ldr	r3, [pc, #112]	@ (8009c5c <xTaskResumeAll+0x120>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1cc      	bne.n	8009b8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009bf6:	f000 fb37 	bl	800a268 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8009c70 <xTaskResumeAll+0x134>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d010      	beq.n	8009c28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c06:	f000 f847 	bl	8009c98 <xTaskIncrementTick>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d002      	beq.n	8009c16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009c10:	4b16      	ldr	r3, [pc, #88]	@ (8009c6c <xTaskResumeAll+0x130>)
 8009c12:	2201      	movs	r2, #1
 8009c14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1f1      	bne.n	8009c06 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009c22:	4b13      	ldr	r3, [pc, #76]	@ (8009c70 <xTaskResumeAll+0x134>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c28:	4b10      	ldr	r3, [pc, #64]	@ (8009c6c <xTaskResumeAll+0x130>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d009      	beq.n	8009c44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c30:	2301      	movs	r3, #1
 8009c32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c34:	4b0f      	ldr	r3, [pc, #60]	@ (8009c74 <xTaskResumeAll+0x138>)
 8009c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c44:	f001 f9ea 	bl	800b01c <vPortExitCritical>

	return xAlreadyYielded;
 8009c48:	68bb      	ldr	r3, [r7, #8]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	200009d0 	.word	0x200009d0
 8009c58:	200009a8 	.word	0x200009a8
 8009c5c:	20000968 	.word	0x20000968
 8009c60:	200009b0 	.word	0x200009b0
 8009c64:	200008d4 	.word	0x200008d4
 8009c68:	200008d0 	.word	0x200008d0
 8009c6c:	200009bc 	.word	0x200009bc
 8009c70:	200009b8 	.word	0x200009b8
 8009c74:	e000ed04 	.word	0xe000ed04

08009c78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009c7e:	4b05      	ldr	r3, [pc, #20]	@ (8009c94 <xTaskGetTickCount+0x1c>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009c84:	687b      	ldr	r3, [r7, #4]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	370c      	adds	r7, #12
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	200009ac 	.word	0x200009ac

08009c98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ca2:	4b4f      	ldr	r3, [pc, #316]	@ (8009de0 <xTaskIncrementTick+0x148>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f040 8089 	bne.w	8009dbe <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009cac:	4b4d      	ldr	r3, [pc, #308]	@ (8009de4 <xTaskIncrementTick+0x14c>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009cb4:	4a4b      	ldr	r2, [pc, #300]	@ (8009de4 <xTaskIncrementTick+0x14c>)
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d121      	bne.n	8009d04 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009cc0:	4b49      	ldr	r3, [pc, #292]	@ (8009de8 <xTaskIncrementTick+0x150>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00b      	beq.n	8009ce2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	603b      	str	r3, [r7, #0]
}
 8009cdc:	bf00      	nop
 8009cde:	bf00      	nop
 8009ce0:	e7fd      	b.n	8009cde <xTaskIncrementTick+0x46>
 8009ce2:	4b41      	ldr	r3, [pc, #260]	@ (8009de8 <xTaskIncrementTick+0x150>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	4b40      	ldr	r3, [pc, #256]	@ (8009dec <xTaskIncrementTick+0x154>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a3e      	ldr	r2, [pc, #248]	@ (8009de8 <xTaskIncrementTick+0x150>)
 8009cee:	6013      	str	r3, [r2, #0]
 8009cf0:	4a3e      	ldr	r2, [pc, #248]	@ (8009dec <xTaskIncrementTick+0x154>)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6013      	str	r3, [r2, #0]
 8009cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8009df0 <xTaskIncrementTick+0x158>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	4a3c      	ldr	r2, [pc, #240]	@ (8009df0 <xTaskIncrementTick+0x158>)
 8009cfe:	6013      	str	r3, [r2, #0]
 8009d00:	f000 fab2 	bl	800a268 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d04:	4b3b      	ldr	r3, [pc, #236]	@ (8009df4 <xTaskIncrementTick+0x15c>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	693a      	ldr	r2, [r7, #16]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d348      	bcc.n	8009da0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d0e:	4b36      	ldr	r3, [pc, #216]	@ (8009de8 <xTaskIncrementTick+0x150>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d104      	bne.n	8009d22 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d18:	4b36      	ldr	r3, [pc, #216]	@ (8009df4 <xTaskIncrementTick+0x15c>)
 8009d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d1e:	601a      	str	r2, [r3, #0]
					break;
 8009d20:	e03e      	b.n	8009da0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d22:	4b31      	ldr	r3, [pc, #196]	@ (8009de8 <xTaskIncrementTick+0x150>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d203      	bcs.n	8009d42 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d3a:	4a2e      	ldr	r2, [pc, #184]	@ (8009df4 <xTaskIncrementTick+0x15c>)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009d40:	e02e      	b.n	8009da0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	3304      	adds	r3, #4
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fe feea 	bl	8008b20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d004      	beq.n	8009d5e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	3318      	adds	r3, #24
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7fe fee1 	bl	8008b20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d62:	2201      	movs	r2, #1
 8009d64:	409a      	lsls	r2, r3
 8009d66:	4b24      	ldr	r3, [pc, #144]	@ (8009df8 <xTaskIncrementTick+0x160>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	4a22      	ldr	r2, [pc, #136]	@ (8009df8 <xTaskIncrementTick+0x160>)
 8009d6e:	6013      	str	r3, [r2, #0]
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d74:	4613      	mov	r3, r2
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8009dfc <xTaskIncrementTick+0x164>)
 8009d7e:	441a      	add	r2, r3
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	3304      	adds	r3, #4
 8009d84:	4619      	mov	r1, r3
 8009d86:	4610      	mov	r0, r2
 8009d88:	f7fe fe6d 	bl	8008a66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d90:	4b1b      	ldr	r3, [pc, #108]	@ (8009e00 <xTaskIncrementTick+0x168>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d3b9      	bcc.n	8009d0e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d9e:	e7b6      	b.n	8009d0e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009da0:	4b17      	ldr	r3, [pc, #92]	@ (8009e00 <xTaskIncrementTick+0x168>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009da6:	4915      	ldr	r1, [pc, #84]	@ (8009dfc <xTaskIncrementTick+0x164>)
 8009da8:	4613      	mov	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	440b      	add	r3, r1
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d907      	bls.n	8009dc8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8009db8:	2301      	movs	r3, #1
 8009dba:	617b      	str	r3, [r7, #20]
 8009dbc:	e004      	b.n	8009dc8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009dbe:	4b11      	ldr	r3, [pc, #68]	@ (8009e04 <xTaskIncrementTick+0x16c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8009e04 <xTaskIncrementTick+0x16c>)
 8009dc6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8009e08 <xTaskIncrementTick+0x170>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009dd4:	697b      	ldr	r3, [r7, #20]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3718      	adds	r7, #24
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	200009d0 	.word	0x200009d0
 8009de4:	200009ac 	.word	0x200009ac
 8009de8:	20000960 	.word	0x20000960
 8009dec:	20000964 	.word	0x20000964
 8009df0:	200009c0 	.word	0x200009c0
 8009df4:	200009c8 	.word	0x200009c8
 8009df8:	200009b0 	.word	0x200009b0
 8009dfc:	200008d4 	.word	0x200008d4
 8009e00:	200008d0 	.word	0x200008d0
 8009e04:	200009b8 	.word	0x200009b8
 8009e08:	200009bc 	.word	0x200009bc

08009e0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b087      	sub	sp, #28
 8009e10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e12:	4b27      	ldr	r3, [pc, #156]	@ (8009eb0 <vTaskSwitchContext+0xa4>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e1a:	4b26      	ldr	r3, [pc, #152]	@ (8009eb4 <vTaskSwitchContext+0xa8>)
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e20:	e040      	b.n	8009ea4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009e22:	4b24      	ldr	r3, [pc, #144]	@ (8009eb4 <vTaskSwitchContext+0xa8>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e28:	4b23      	ldr	r3, [pc, #140]	@ (8009eb8 <vTaskSwitchContext+0xac>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	fab3 f383 	clz	r3, r3
 8009e34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009e36:	7afb      	ldrb	r3, [r7, #11]
 8009e38:	f1c3 031f 	rsb	r3, r3, #31
 8009e3c:	617b      	str	r3, [r7, #20]
 8009e3e:	491f      	ldr	r1, [pc, #124]	@ (8009ebc <vTaskSwitchContext+0xb0>)
 8009e40:	697a      	ldr	r2, [r7, #20]
 8009e42:	4613      	mov	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	440b      	add	r3, r1
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10b      	bne.n	8009e6a <vTaskSwitchContext+0x5e>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	607b      	str	r3, [r7, #4]
}
 8009e64:	bf00      	nop
 8009e66:	bf00      	nop
 8009e68:	e7fd      	b.n	8009e66 <vTaskSwitchContext+0x5a>
 8009e6a:	697a      	ldr	r2, [r7, #20]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4a11      	ldr	r2, [pc, #68]	@ (8009ebc <vTaskSwitchContext+0xb0>)
 8009e76:	4413      	add	r3, r2
 8009e78:	613b      	str	r3, [r7, #16]
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	605a      	str	r2, [r3, #4]
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	685a      	ldr	r2, [r3, #4]
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d104      	bne.n	8009e9a <vTaskSwitchContext+0x8e>
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	685a      	ldr	r2, [r3, #4]
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	605a      	str	r2, [r3, #4]
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	4a07      	ldr	r2, [pc, #28]	@ (8009ec0 <vTaskSwitchContext+0xb4>)
 8009ea2:	6013      	str	r3, [r2, #0]
}
 8009ea4:	bf00      	nop
 8009ea6:	371c      	adds	r7, #28
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	200009d0 	.word	0x200009d0
 8009eb4:	200009bc 	.word	0x200009bc
 8009eb8:	200009b0 	.word	0x200009b0
 8009ebc:	200008d4 	.word	0x200008d4
 8009ec0:	200008d0 	.word	0x200008d0

08009ec4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10b      	bne.n	8009eec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	60fb      	str	r3, [r7, #12]
}
 8009ee6:	bf00      	nop
 8009ee8:	bf00      	nop
 8009eea:	e7fd      	b.n	8009ee8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009eec:	4b07      	ldr	r3, [pc, #28]	@ (8009f0c <vTaskPlaceOnEventList+0x48>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3318      	adds	r3, #24
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7fe fdda 	bl	8008aae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009efa:	2101      	movs	r1, #1
 8009efc:	6838      	ldr	r0, [r7, #0]
 8009efe:	f000 fba9 	bl	800a654 <prvAddCurrentTaskToDelayedList>
}
 8009f02:	bf00      	nop
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	200008d0 	.word	0x200008d0

08009f10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10b      	bne.n	8009f3a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	617b      	str	r3, [r7, #20]
}
 8009f34:	bf00      	nop
 8009f36:	bf00      	nop
 8009f38:	e7fd      	b.n	8009f36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8009f64 <vTaskPlaceOnEventListRestricted+0x54>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	3318      	adds	r3, #24
 8009f40:	4619      	mov	r1, r3
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f7fe fd8f 	bl	8008a66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f52:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009f54:	6879      	ldr	r1, [r7, #4]
 8009f56:	68b8      	ldr	r0, [r7, #8]
 8009f58:	f000 fb7c 	bl	800a654 <prvAddCurrentTaskToDelayedList>
	}
 8009f5c:	bf00      	nop
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	200008d0 	.word	0x200008d0

08009f68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10b      	bne.n	8009f96 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	60fb      	str	r3, [r7, #12]
}
 8009f90:	bf00      	nop
 8009f92:	bf00      	nop
 8009f94:	e7fd      	b.n	8009f92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	3318      	adds	r3, #24
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fe fdc0 	bl	8008b20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fa0:	4b1d      	ldr	r3, [pc, #116]	@ (800a018 <xTaskRemoveFromEventList+0xb0>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d11c      	bne.n	8009fe2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	3304      	adds	r3, #4
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7fe fdb7 	bl	8008b20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	409a      	lsls	r2, r3
 8009fba:	4b18      	ldr	r3, [pc, #96]	@ (800a01c <xTaskRemoveFromEventList+0xb4>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	4a16      	ldr	r2, [pc, #88]	@ (800a01c <xTaskRemoveFromEventList+0xb4>)
 8009fc2:	6013      	str	r3, [r2, #0]
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fc8:	4613      	mov	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	4413      	add	r3, r2
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	4a13      	ldr	r2, [pc, #76]	@ (800a020 <xTaskRemoveFromEventList+0xb8>)
 8009fd2:	441a      	add	r2, r3
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	3304      	adds	r3, #4
 8009fd8:	4619      	mov	r1, r3
 8009fda:	4610      	mov	r0, r2
 8009fdc:	f7fe fd43 	bl	8008a66 <vListInsertEnd>
 8009fe0:	e005      	b.n	8009fee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	3318      	adds	r3, #24
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	480e      	ldr	r0, [pc, #56]	@ (800a024 <xTaskRemoveFromEventList+0xbc>)
 8009fea:	f7fe fd3c 	bl	8008a66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ff2:	4b0d      	ldr	r3, [pc, #52]	@ (800a028 <xTaskRemoveFromEventList+0xc0>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d905      	bls.n	800a008 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a000:	4b0a      	ldr	r3, [pc, #40]	@ (800a02c <xTaskRemoveFromEventList+0xc4>)
 800a002:	2201      	movs	r2, #1
 800a004:	601a      	str	r2, [r3, #0]
 800a006:	e001      	b.n	800a00c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a008:	2300      	movs	r3, #0
 800a00a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a00c:	697b      	ldr	r3, [r7, #20]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3718      	adds	r7, #24
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	200009d0 	.word	0x200009d0
 800a01c:	200009b0 	.word	0x200009b0
 800a020:	200008d4 	.word	0x200008d4
 800a024:	20000968 	.word	0x20000968
 800a028:	200008d0 	.word	0x200008d0
 800a02c:	200009bc 	.word	0x200009bc

0800a030 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a038:	4b06      	ldr	r3, [pc, #24]	@ (800a054 <vTaskInternalSetTimeOutState+0x24>)
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a040:	4b05      	ldr	r3, [pc, #20]	@ (800a058 <vTaskInternalSetTimeOutState+0x28>)
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	605a      	str	r2, [r3, #4]
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr
 800a054:	200009c0 	.word	0x200009c0
 800a058:	200009ac 	.word	0x200009ac

0800a05c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10b      	bne.n	800a084 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	613b      	str	r3, [r7, #16]
}
 800a07e:	bf00      	nop
 800a080:	bf00      	nop
 800a082:	e7fd      	b.n	800a080 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10b      	bne.n	800a0a2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a08e:	f383 8811 	msr	BASEPRI, r3
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	60fb      	str	r3, [r7, #12]
}
 800a09c:	bf00      	nop
 800a09e:	bf00      	nop
 800a0a0:	e7fd      	b.n	800a09e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a0a2:	f000 ff89 	bl	800afb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a0a6:	4b1d      	ldr	r3, [pc, #116]	@ (800a11c <xTaskCheckForTimeOut+0xc0>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	69ba      	ldr	r2, [r7, #24]
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0be:	d102      	bne.n	800a0c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	61fb      	str	r3, [r7, #28]
 800a0c4:	e023      	b.n	800a10e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	4b15      	ldr	r3, [pc, #84]	@ (800a120 <xTaskCheckForTimeOut+0xc4>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d007      	beq.n	800a0e2 <xTaskCheckForTimeOut+0x86>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	69ba      	ldr	r2, [r7, #24]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d302      	bcc.n	800a0e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	61fb      	str	r3, [r7, #28]
 800a0e0:	e015      	b.n	800a10e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d20b      	bcs.n	800a104 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	1ad2      	subs	r2, r2, r3
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f7ff ff99 	bl	800a030 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a0fe:	2300      	movs	r3, #0
 800a100:	61fb      	str	r3, [r7, #28]
 800a102:	e004      	b.n	800a10e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	2200      	movs	r2, #0
 800a108:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a10a:	2301      	movs	r3, #1
 800a10c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a10e:	f000 ff85 	bl	800b01c <vPortExitCritical>

	return xReturn;
 800a112:	69fb      	ldr	r3, [r7, #28]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3720      	adds	r7, #32
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	200009ac 	.word	0x200009ac
 800a120:	200009c0 	.word	0x200009c0

0800a124 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a124:	b480      	push	{r7}
 800a126:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a128:	4b03      	ldr	r3, [pc, #12]	@ (800a138 <vTaskMissedYield+0x14>)
 800a12a:	2201      	movs	r2, #1
 800a12c:	601a      	str	r2, [r3, #0]
}
 800a12e:	bf00      	nop
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	200009bc 	.word	0x200009bc

0800a13c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a144:	f000 f852 	bl	800a1ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a148:	4b06      	ldr	r3, [pc, #24]	@ (800a164 <prvIdleTask+0x28>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d9f9      	bls.n	800a144 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a150:	4b05      	ldr	r3, [pc, #20]	@ (800a168 <prvIdleTask+0x2c>)
 800a152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a156:	601a      	str	r2, [r3, #0]
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a160:	e7f0      	b.n	800a144 <prvIdleTask+0x8>
 800a162:	bf00      	nop
 800a164:	200008d4 	.word	0x200008d4
 800a168:	e000ed04 	.word	0xe000ed04

0800a16c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a172:	2300      	movs	r3, #0
 800a174:	607b      	str	r3, [r7, #4]
 800a176:	e00c      	b.n	800a192 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	4613      	mov	r3, r2
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	4413      	add	r3, r2
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	4a12      	ldr	r2, [pc, #72]	@ (800a1cc <prvInitialiseTaskLists+0x60>)
 800a184:	4413      	add	r3, r2
 800a186:	4618      	mov	r0, r3
 800a188:	f7fe fc40 	bl	8008a0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	3301      	adds	r3, #1
 800a190:	607b      	str	r3, [r7, #4]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b04      	cmp	r3, #4
 800a196:	d9ef      	bls.n	800a178 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a198:	480d      	ldr	r0, [pc, #52]	@ (800a1d0 <prvInitialiseTaskLists+0x64>)
 800a19a:	f7fe fc37 	bl	8008a0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a19e:	480d      	ldr	r0, [pc, #52]	@ (800a1d4 <prvInitialiseTaskLists+0x68>)
 800a1a0:	f7fe fc34 	bl	8008a0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a1a4:	480c      	ldr	r0, [pc, #48]	@ (800a1d8 <prvInitialiseTaskLists+0x6c>)
 800a1a6:	f7fe fc31 	bl	8008a0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a1aa:	480c      	ldr	r0, [pc, #48]	@ (800a1dc <prvInitialiseTaskLists+0x70>)
 800a1ac:	f7fe fc2e 	bl	8008a0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a1b0:	480b      	ldr	r0, [pc, #44]	@ (800a1e0 <prvInitialiseTaskLists+0x74>)
 800a1b2:	f7fe fc2b 	bl	8008a0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a1b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a1e4 <prvInitialiseTaskLists+0x78>)
 800a1b8:	4a05      	ldr	r2, [pc, #20]	@ (800a1d0 <prvInitialiseTaskLists+0x64>)
 800a1ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a1bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a1e8 <prvInitialiseTaskLists+0x7c>)
 800a1be:	4a05      	ldr	r2, [pc, #20]	@ (800a1d4 <prvInitialiseTaskLists+0x68>)
 800a1c0:	601a      	str	r2, [r3, #0]
}
 800a1c2:	bf00      	nop
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	200008d4 	.word	0x200008d4
 800a1d0:	20000938 	.word	0x20000938
 800a1d4:	2000094c 	.word	0x2000094c
 800a1d8:	20000968 	.word	0x20000968
 800a1dc:	2000097c 	.word	0x2000097c
 800a1e0:	20000994 	.word	0x20000994
 800a1e4:	20000960 	.word	0x20000960
 800a1e8:	20000964 	.word	0x20000964

0800a1ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1f2:	e019      	b.n	800a228 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a1f4:	f000 fee0 	bl	800afb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1f8:	4b10      	ldr	r3, [pc, #64]	@ (800a23c <prvCheckTasksWaitingTermination+0x50>)
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	3304      	adds	r3, #4
 800a204:	4618      	mov	r0, r3
 800a206:	f7fe fc8b 	bl	8008b20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a20a:	4b0d      	ldr	r3, [pc, #52]	@ (800a240 <prvCheckTasksWaitingTermination+0x54>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	3b01      	subs	r3, #1
 800a210:	4a0b      	ldr	r2, [pc, #44]	@ (800a240 <prvCheckTasksWaitingTermination+0x54>)
 800a212:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a214:	4b0b      	ldr	r3, [pc, #44]	@ (800a244 <prvCheckTasksWaitingTermination+0x58>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3b01      	subs	r3, #1
 800a21a:	4a0a      	ldr	r2, [pc, #40]	@ (800a244 <prvCheckTasksWaitingTermination+0x58>)
 800a21c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a21e:	f000 fefd 	bl	800b01c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f810 	bl	800a248 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a228:	4b06      	ldr	r3, [pc, #24]	@ (800a244 <prvCheckTasksWaitingTermination+0x58>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1e1      	bne.n	800a1f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a230:	bf00      	nop
 800a232:	bf00      	nop
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	2000097c 	.word	0x2000097c
 800a240:	200009a8 	.word	0x200009a8
 800a244:	20000990 	.word	0x20000990

0800a248 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a254:	4618      	mov	r0, r3
 800a256:	f001 f899 	bl	800b38c <vPortFree>
			vPortFree( pxTCB );
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f001 f896 	bl	800b38c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a260:	bf00      	nop
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a26e:	4b0c      	ldr	r3, [pc, #48]	@ (800a2a0 <prvResetNextTaskUnblockTime+0x38>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d104      	bne.n	800a282 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a278:	4b0a      	ldr	r3, [pc, #40]	@ (800a2a4 <prvResetNextTaskUnblockTime+0x3c>)
 800a27a:	f04f 32ff 	mov.w	r2, #4294967295
 800a27e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a280:	e008      	b.n	800a294 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a282:	4b07      	ldr	r3, [pc, #28]	@ (800a2a0 <prvResetNextTaskUnblockTime+0x38>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	4a04      	ldr	r2, [pc, #16]	@ (800a2a4 <prvResetNextTaskUnblockTime+0x3c>)
 800a292:	6013      	str	r3, [r2, #0]
}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr
 800a2a0:	20000960 	.word	0x20000960
 800a2a4:	200009c8 	.word	0x200009c8

0800a2a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a2ae:	4b0b      	ldr	r3, [pc, #44]	@ (800a2dc <xTaskGetSchedulerState+0x34>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d102      	bne.n	800a2bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	607b      	str	r3, [r7, #4]
 800a2ba:	e008      	b.n	800a2ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2bc:	4b08      	ldr	r3, [pc, #32]	@ (800a2e0 <xTaskGetSchedulerState+0x38>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d102      	bne.n	800a2ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	607b      	str	r3, [r7, #4]
 800a2c8:	e001      	b.n	800a2ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a2ce:	687b      	ldr	r3, [r7, #4]
	}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	200009b4 	.word	0x200009b4
 800a2e0:	200009d0 	.word	0x200009d0

0800a2e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d069      	beq.n	800a3ce <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2fe:	4b36      	ldr	r3, [pc, #216]	@ (800a3d8 <xTaskPriorityInherit+0xf4>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a304:	429a      	cmp	r2, r3
 800a306:	d259      	bcs.n	800a3bc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	db06      	blt.n	800a31e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a310:	4b31      	ldr	r3, [pc, #196]	@ (800a3d8 <xTaskPriorityInherit+0xf4>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a316:	f1c3 0205 	rsb	r2, r3, #5
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	6959      	ldr	r1, [r3, #20]
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a326:	4613      	mov	r3, r2
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	4a2b      	ldr	r2, [pc, #172]	@ (800a3dc <xTaskPriorityInherit+0xf8>)
 800a330:	4413      	add	r3, r2
 800a332:	4299      	cmp	r1, r3
 800a334:	d13a      	bne.n	800a3ac <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	3304      	adds	r3, #4
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fe fbf0 	bl	8008b20 <uxListRemove>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d115      	bne.n	800a372 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a34a:	4924      	ldr	r1, [pc, #144]	@ (800a3dc <xTaskPriorityInherit+0xf8>)
 800a34c:	4613      	mov	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4413      	add	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	440b      	add	r3, r1
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10a      	bne.n	800a372 <xTaskPriorityInherit+0x8e>
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a360:	2201      	movs	r2, #1
 800a362:	fa02 f303 	lsl.w	r3, r2, r3
 800a366:	43da      	mvns	r2, r3
 800a368:	4b1d      	ldr	r3, [pc, #116]	@ (800a3e0 <xTaskPriorityInherit+0xfc>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4013      	ands	r3, r2
 800a36e:	4a1c      	ldr	r2, [pc, #112]	@ (800a3e0 <xTaskPriorityInherit+0xfc>)
 800a370:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a372:	4b19      	ldr	r3, [pc, #100]	@ (800a3d8 <xTaskPriorityInherit+0xf4>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a380:	2201      	movs	r2, #1
 800a382:	409a      	lsls	r2, r3
 800a384:	4b16      	ldr	r3, [pc, #88]	@ (800a3e0 <xTaskPriorityInherit+0xfc>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4313      	orrs	r3, r2
 800a38a:	4a15      	ldr	r2, [pc, #84]	@ (800a3e0 <xTaskPriorityInherit+0xfc>)
 800a38c:	6013      	str	r3, [r2, #0]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a392:	4613      	mov	r3, r2
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	4413      	add	r3, r2
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	4a10      	ldr	r2, [pc, #64]	@ (800a3dc <xTaskPriorityInherit+0xf8>)
 800a39c:	441a      	add	r2, r3
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	3304      	adds	r3, #4
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	f7fe fb5e 	bl	8008a66 <vListInsertEnd>
 800a3aa:	e004      	b.n	800a3b6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a3d8 <xTaskPriorityInherit+0xf4>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	60fb      	str	r3, [r7, #12]
 800a3ba:	e008      	b.n	800a3ce <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a3c0:	4b05      	ldr	r3, [pc, #20]	@ (800a3d8 <xTaskPriorityInherit+0xf4>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d201      	bcs.n	800a3ce <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
	}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	200008d0 	.word	0x200008d0
 800a3dc:	200008d4 	.word	0x200008d4
 800a3e0:	200009b0 	.word	0x200009b0

0800a3e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b086      	sub	sp, #24
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d070      	beq.n	800a4dc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a3fa:	4b3b      	ldr	r3, [pc, #236]	@ (800a4e8 <xTaskPriorityDisinherit+0x104>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	693a      	ldr	r2, [r7, #16]
 800a400:	429a      	cmp	r2, r3
 800a402:	d00b      	beq.n	800a41c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a408:	f383 8811 	msr	BASEPRI, r3
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	f3bf 8f4f 	dsb	sy
 800a414:	60fb      	str	r3, [r7, #12]
}
 800a416:	bf00      	nop
 800a418:	bf00      	nop
 800a41a:	e7fd      	b.n	800a418 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10b      	bne.n	800a43c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a428:	f383 8811 	msr	BASEPRI, r3
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	60bb      	str	r3, [r7, #8]
}
 800a436:	bf00      	nop
 800a438:	bf00      	nop
 800a43a:	e7fd      	b.n	800a438 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a440:	1e5a      	subs	r2, r3, #1
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a44e:	429a      	cmp	r2, r3
 800a450:	d044      	beq.n	800a4dc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a456:	2b00      	cmp	r3, #0
 800a458:	d140      	bne.n	800a4dc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	3304      	adds	r3, #4
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe fb5e 	bl	8008b20 <uxListRemove>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d115      	bne.n	800a496 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a46e:	491f      	ldr	r1, [pc, #124]	@ (800a4ec <xTaskPriorityDisinherit+0x108>)
 800a470:	4613      	mov	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	440b      	add	r3, r1
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10a      	bne.n	800a496 <xTaskPriorityDisinherit+0xb2>
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a484:	2201      	movs	r2, #1
 800a486:	fa02 f303 	lsl.w	r3, r2, r3
 800a48a:	43da      	mvns	r2, r3
 800a48c:	4b18      	ldr	r3, [pc, #96]	@ (800a4f0 <xTaskPriorityDisinherit+0x10c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4013      	ands	r3, r2
 800a492:	4a17      	ldr	r2, [pc, #92]	@ (800a4f0 <xTaskPriorityDisinherit+0x10c>)
 800a494:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a2:	f1c3 0205 	rsb	r2, r3, #5
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	409a      	lsls	r2, r3
 800a4b2:	4b0f      	ldr	r3, [pc, #60]	@ (800a4f0 <xTaskPriorityDisinherit+0x10c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	4a0d      	ldr	r2, [pc, #52]	@ (800a4f0 <xTaskPriorityDisinherit+0x10c>)
 800a4ba:	6013      	str	r3, [r2, #0]
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4413      	add	r3, r2
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	4a08      	ldr	r2, [pc, #32]	@ (800a4ec <xTaskPriorityDisinherit+0x108>)
 800a4ca:	441a      	add	r2, r3
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	4610      	mov	r0, r2
 800a4d4:	f7fe fac7 	bl	8008a66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4dc:	697b      	ldr	r3, [r7, #20]
	}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3718      	adds	r7, #24
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	200008d0 	.word	0x200008d0
 800a4ec:	200008d4 	.word	0x200008d4
 800a4f0:	200009b0 	.word	0x200009b0

0800a4f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a502:	2301      	movs	r3, #1
 800a504:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f000 8085 	beq.w	800a618 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10b      	bne.n	800a52e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800a516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a51a:	f383 8811 	msr	BASEPRI, r3
 800a51e:	f3bf 8f6f 	isb	sy
 800a522:	f3bf 8f4f 	dsb	sy
 800a526:	60fb      	str	r3, [r7, #12]
}
 800a528:	bf00      	nop
 800a52a:	bf00      	nop
 800a52c:	e7fd      	b.n	800a52a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	429a      	cmp	r2, r3
 800a536:	d902      	bls.n	800a53e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	61fb      	str	r3, [r7, #28]
 800a53c:	e002      	b.n	800a544 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a542:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a548:	69fa      	ldr	r2, [r7, #28]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d064      	beq.n	800a618 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	429a      	cmp	r2, r3
 800a556:	d15f      	bne.n	800a618 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a558:	4b31      	ldr	r3, [pc, #196]	@ (800a620 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	69ba      	ldr	r2, [r7, #24]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d10b      	bne.n	800a57a <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 800a562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	60bb      	str	r3, [r7, #8]
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop
 800a578:	e7fd      	b.n	800a576 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a57e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	69fa      	ldr	r2, [r7, #28]
 800a584:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	699b      	ldr	r3, [r3, #24]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	db04      	blt.n	800a598 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	f1c3 0205 	rsb	r2, r3, #5
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	6959      	ldr	r1, [r3, #20]
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4413      	add	r3, r2
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	4a1f      	ldr	r2, [pc, #124]	@ (800a624 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a5a8:	4413      	add	r3, r2
 800a5aa:	4299      	cmp	r1, r3
 800a5ac:	d134      	bne.n	800a618 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fe fab4 	bl	8008b20 <uxListRemove>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d115      	bne.n	800a5ea <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5c2:	4918      	ldr	r1, [pc, #96]	@ (800a624 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	4413      	add	r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	440b      	add	r3, r1
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10a      	bne.n	800a5ea <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5d8:	2201      	movs	r2, #1
 800a5da:	fa02 f303 	lsl.w	r3, r2, r3
 800a5de:	43da      	mvns	r2, r3
 800a5e0:	4b11      	ldr	r3, [pc, #68]	@ (800a628 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	4a10      	ldr	r2, [pc, #64]	@ (800a628 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a5e8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	409a      	lsls	r2, r3
 800a5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a628 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	4a0b      	ldr	r2, [pc, #44]	@ (800a628 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a5fa:	6013      	str	r3, [r2, #0]
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a600:	4613      	mov	r3, r2
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4413      	add	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4a06      	ldr	r2, [pc, #24]	@ (800a624 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a60a:	441a      	add	r2, r3
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	3304      	adds	r3, #4
 800a610:	4619      	mov	r1, r3
 800a612:	4610      	mov	r0, r2
 800a614:	f7fe fa27 	bl	8008a66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a618:	bf00      	nop
 800a61a:	3720      	adds	r7, #32
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	200008d0 	.word	0x200008d0
 800a624:	200008d4 	.word	0x200008d4
 800a628:	200009b0 	.word	0x200009b0

0800a62c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a62c:	b480      	push	{r7}
 800a62e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a630:	4b07      	ldr	r3, [pc, #28]	@ (800a650 <pvTaskIncrementMutexHeldCount+0x24>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d004      	beq.n	800a642 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a638:	4b05      	ldr	r3, [pc, #20]	@ (800a650 <pvTaskIncrementMutexHeldCount+0x24>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a63e:	3201      	adds	r2, #1
 800a640:	64da      	str	r2, [r3, #76]	@ 0x4c
		}

		return pxCurrentTCB;
 800a642:	4b03      	ldr	r3, [pc, #12]	@ (800a650 <pvTaskIncrementMutexHeldCount+0x24>)
 800a644:	681b      	ldr	r3, [r3, #0]
	}
 800a646:	4618      	mov	r0, r3
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	200008d0 	.word	0x200008d0

0800a654 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a65e:	4b29      	ldr	r3, [pc, #164]	@ (800a704 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a664:	4b28      	ldr	r3, [pc, #160]	@ (800a708 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	3304      	adds	r3, #4
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fe fa58 	bl	8008b20 <uxListRemove>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10b      	bne.n	800a68e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a676:	4b24      	ldr	r3, [pc, #144]	@ (800a708 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a67c:	2201      	movs	r2, #1
 800a67e:	fa02 f303 	lsl.w	r3, r2, r3
 800a682:	43da      	mvns	r2, r3
 800a684:	4b21      	ldr	r3, [pc, #132]	@ (800a70c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4013      	ands	r3, r2
 800a68a:	4a20      	ldr	r2, [pc, #128]	@ (800a70c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a68c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a694:	d10a      	bne.n	800a6ac <prvAddCurrentTaskToDelayedList+0x58>
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d007      	beq.n	800a6ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a69c:	4b1a      	ldr	r3, [pc, #104]	@ (800a708 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	3304      	adds	r3, #4
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	481a      	ldr	r0, [pc, #104]	@ (800a710 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a6a6:	f7fe f9de 	bl	8008a66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a6aa:	e026      	b.n	800a6fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a6b4:	4b14      	ldr	r3, [pc, #80]	@ (800a708 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68ba      	ldr	r2, [r7, #8]
 800a6ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d209      	bcs.n	800a6d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6c4:	4b13      	ldr	r3, [pc, #76]	@ (800a714 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	4b0f      	ldr	r3, [pc, #60]	@ (800a708 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	f7fe f9ec 	bl	8008aae <vListInsert>
}
 800a6d6:	e010      	b.n	800a6fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a718 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a708 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4610      	mov	r0, r2
 800a6e6:	f7fe f9e2 	bl	8008aae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a6ea:	4b0c      	ldr	r3, [pc, #48]	@ (800a71c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d202      	bcs.n	800a6fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a6f4:	4a09      	ldr	r2, [pc, #36]	@ (800a71c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	6013      	str	r3, [r2, #0]
}
 800a6fa:	bf00      	nop
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	200009ac 	.word	0x200009ac
 800a708:	200008d0 	.word	0x200008d0
 800a70c:	200009b0 	.word	0x200009b0
 800a710:	20000994 	.word	0x20000994
 800a714:	20000964 	.word	0x20000964
 800a718:	20000960 	.word	0x20000960
 800a71c:	200009c8 	.word	0x200009c8

0800a720 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800a726:	2300      	movs	r3, #0
 800a728:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a72a:	f000 fae1 	bl	800acf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a72e:	4b12      	ldr	r3, [pc, #72]	@ (800a778 <xTimerCreateTimerTask+0x58>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00b      	beq.n	800a74e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800a736:	4b11      	ldr	r3, [pc, #68]	@ (800a77c <xTimerCreateTimerTask+0x5c>)
 800a738:	9301      	str	r3, [sp, #4]
 800a73a:	2302      	movs	r3, #2
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	2300      	movs	r3, #0
 800a740:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a744:	490e      	ldr	r1, [pc, #56]	@ (800a780 <xTimerCreateTimerTask+0x60>)
 800a746:	480f      	ldr	r0, [pc, #60]	@ (800a784 <xTimerCreateTimerTask+0x64>)
 800a748:	f7ff f826 	bl	8009798 <xTaskCreate>
 800a74c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10b      	bne.n	800a76c <xTimerCreateTimerTask+0x4c>
	__asm volatile
 800a754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	603b      	str	r3, [r7, #0]
}
 800a766:	bf00      	nop
 800a768:	bf00      	nop
 800a76a:	e7fd      	b.n	800a768 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800a76c:	687b      	ldr	r3, [r7, #4]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	20000a04 	.word	0x20000a04
 800a77c:	20000a08 	.word	0x20000a08
 800a780:	080117d8 	.word	0x080117d8
 800a784:	0800a8c1 	.word	0x0800a8c1

0800a788 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b08a      	sub	sp, #40	@ 0x28
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	607a      	str	r2, [r7, #4]
 800a794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a796:	2300      	movs	r3, #0
 800a798:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d10b      	bne.n	800a7b8 <xTimerGenericCommand+0x30>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	623b      	str	r3, [r7, #32]
}
 800a7b2:	bf00      	nop
 800a7b4:	bf00      	nop
 800a7b6:	e7fd      	b.n	800a7b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a7b8:	4b19      	ldr	r3, [pc, #100]	@ (800a820 <xTimerGenericCommand+0x98>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d02a      	beq.n	800a816 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	2b05      	cmp	r3, #5
 800a7d0:	dc18      	bgt.n	800a804 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a7d2:	f7ff fd69 	bl	800a2a8 <xTaskGetSchedulerState>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	d109      	bne.n	800a7f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a7dc:	4b10      	ldr	r3, [pc, #64]	@ (800a820 <xTimerGenericCommand+0x98>)
 800a7de:	6818      	ldr	r0, [r3, #0]
 800a7e0:	f107 0114 	add.w	r1, r7, #20
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7e8:	f7fe fac0 	bl	8008d6c <xQueueGenericSend>
 800a7ec:	6278      	str	r0, [r7, #36]	@ 0x24
 800a7ee:	e012      	b.n	800a816 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a7f0:	4b0b      	ldr	r3, [pc, #44]	@ (800a820 <xTimerGenericCommand+0x98>)
 800a7f2:	6818      	ldr	r0, [r3, #0]
 800a7f4:	f107 0114 	add.w	r1, r7, #20
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f7fe fab6 	bl	8008d6c <xQueueGenericSend>
 800a800:	6278      	str	r0, [r7, #36]	@ 0x24
 800a802:	e008      	b.n	800a816 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a804:	4b06      	ldr	r3, [pc, #24]	@ (800a820 <xTimerGenericCommand+0x98>)
 800a806:	6818      	ldr	r0, [r3, #0]
 800a808:	f107 0114 	add.w	r1, r7, #20
 800a80c:	2300      	movs	r3, #0
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	f7fe fbae 	bl	8008f70 <xQueueGenericSendFromISR>
 800a814:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3728      	adds	r7, #40	@ 0x28
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	20000a04 	.word	0x20000a04

0800a824 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b088      	sub	sp, #32
 800a828:	af02      	add	r7, sp, #8
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a82e:	4b23      	ldr	r3, [pc, #140]	@ (800a8bc <prvProcessExpiredTimer+0x98>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	3304      	adds	r3, #4
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fe f96f 	bl	8008b20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a848:	f003 0304 	and.w	r3, r3, #4
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d023      	beq.n	800a898 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	699a      	ldr	r2, [r3, #24]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	18d1      	adds	r1, r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	6978      	ldr	r0, [r7, #20]
 800a85e:	f000 f8d5 	bl	800aa0c <prvInsertTimerInActiveList>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d020      	beq.n	800a8aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a868:	2300      	movs	r3, #0
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	2300      	movs	r3, #0
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	2100      	movs	r1, #0
 800a872:	6978      	ldr	r0, [r7, #20]
 800a874:	f7ff ff88 	bl	800a788 <xTimerGenericCommand>
 800a878:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d114      	bne.n	800a8aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	60fb      	str	r3, [r7, #12]
}
 800a892:	bf00      	nop
 800a894:	bf00      	nop
 800a896:	e7fd      	b.n	800a894 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a89e:	f023 0301 	bic.w	r3, r3, #1
 800a8a2:	b2da      	uxtb	r2, r3
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	6978      	ldr	r0, [r7, #20]
 800a8b0:	4798      	blx	r3
}
 800a8b2:	bf00      	nop
 800a8b4:	3718      	adds	r7, #24
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	200009fc 	.word	0x200009fc

0800a8c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a8c8:	f107 0308 	add.w	r3, r7, #8
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 f859 	bl	800a984 <prvGetNextExpireTime>
 800a8d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f000 f805 	bl	800a8e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a8de:	f000 f8d7 	bl	800aa90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a8e2:	bf00      	nop
 800a8e4:	e7f0      	b.n	800a8c8 <prvTimerTask+0x8>
	...

0800a8e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a8f2:	f7ff f915 	bl	8009b20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8f6:	f107 0308 	add.w	r3, r7, #8
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f000 f866 	bl	800a9cc <prvSampleTimeNow>
 800a900:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d130      	bne.n	800a96a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d10a      	bne.n	800a924 <prvProcessTimerOrBlockTask+0x3c>
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	429a      	cmp	r2, r3
 800a914:	d806      	bhi.n	800a924 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a916:	f7ff f911 	bl	8009b3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a91a:	68f9      	ldr	r1, [r7, #12]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7ff ff81 	bl	800a824 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a922:	e024      	b.n	800a96e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d008      	beq.n	800a93c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a92a:	4b13      	ldr	r3, [pc, #76]	@ (800a978 <prvProcessTimerOrBlockTask+0x90>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d101      	bne.n	800a938 <prvProcessTimerOrBlockTask+0x50>
 800a934:	2301      	movs	r3, #1
 800a936:	e000      	b.n	800a93a <prvProcessTimerOrBlockTask+0x52>
 800a938:	2300      	movs	r3, #0
 800a93a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a93c:	4b0f      	ldr	r3, [pc, #60]	@ (800a97c <prvProcessTimerOrBlockTask+0x94>)
 800a93e:	6818      	ldr	r0, [r3, #0]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	683a      	ldr	r2, [r7, #0]
 800a948:	4619      	mov	r1, r3
 800a94a:	f7fe fef1 	bl	8009730 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a94e:	f7ff f8f5 	bl	8009b3c <xTaskResumeAll>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10a      	bne.n	800a96e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a958:	4b09      	ldr	r3, [pc, #36]	@ (800a980 <prvProcessTimerOrBlockTask+0x98>)
 800a95a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	f3bf 8f6f 	isb	sy
}
 800a968:	e001      	b.n	800a96e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a96a:	f7ff f8e7 	bl	8009b3c <xTaskResumeAll>
}
 800a96e:	bf00      	nop
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20000a00 	.word	0x20000a00
 800a97c:	20000a04 	.word	0x20000a04
 800a980:	e000ed04 	.word	0xe000ed04

0800a984 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a98c:	4b0e      	ldr	r3, [pc, #56]	@ (800a9c8 <prvGetNextExpireTime+0x44>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <prvGetNextExpireTime+0x16>
 800a996:	2201      	movs	r2, #1
 800a998:	e000      	b.n	800a99c <prvGetNextExpireTime+0x18>
 800a99a:	2200      	movs	r2, #0
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d105      	bne.n	800a9b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a9a8:	4b07      	ldr	r3, [pc, #28]	@ (800a9c8 <prvGetNextExpireTime+0x44>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	60fb      	str	r3, [r7, #12]
 800a9b2:	e001      	b.n	800a9b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	200009fc 	.word	0x200009fc

0800a9cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a9d4:	f7ff f950 	bl	8009c78 <xTaskGetTickCount>
 800a9d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a9da:	4b0b      	ldr	r3, [pc, #44]	@ (800aa08 <prvSampleTimeNow+0x3c>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d205      	bcs.n	800a9f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a9e4:	f000 f91e 	bl	800ac24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	601a      	str	r2, [r3, #0]
 800a9ee:	e002      	b.n	800a9f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a9f6:	4a04      	ldr	r2, [pc, #16]	@ (800aa08 <prvSampleTimeNow+0x3c>)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	20000a0c 	.word	0x20000a0c

0800aa0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]
 800aa18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d812      	bhi.n	800aa58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	1ad2      	subs	r2, r2, r3
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d302      	bcc.n	800aa46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aa40:	2301      	movs	r3, #1
 800aa42:	617b      	str	r3, [r7, #20]
 800aa44:	e01b      	b.n	800aa7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aa46:	4b10      	ldr	r3, [pc, #64]	@ (800aa88 <prvInsertTimerInActiveList+0x7c>)
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	3304      	adds	r3, #4
 800aa4e:	4619      	mov	r1, r3
 800aa50:	4610      	mov	r0, r2
 800aa52:	f7fe f82c 	bl	8008aae <vListInsert>
 800aa56:	e012      	b.n	800aa7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d206      	bcs.n	800aa6e <prvInsertTimerInActiveList+0x62>
 800aa60:	68ba      	ldr	r2, [r7, #8]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d302      	bcc.n	800aa6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	617b      	str	r3, [r7, #20]
 800aa6c:	e007      	b.n	800aa7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa6e:	4b07      	ldr	r3, [pc, #28]	@ (800aa8c <prvInsertTimerInActiveList+0x80>)
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	3304      	adds	r3, #4
 800aa76:	4619      	mov	r1, r3
 800aa78:	4610      	mov	r0, r2
 800aa7a:	f7fe f818 	bl	8008aae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aa7e:	697b      	ldr	r3, [r7, #20]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3718      	adds	r7, #24
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	20000a00 	.word	0x20000a00
 800aa8c:	200009fc 	.word	0x200009fc

0800aa90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b08c      	sub	sp, #48	@ 0x30
 800aa94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa96:	e0b2      	b.n	800abfe <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f2c0 80af 	blt.w	800abfe <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d004      	beq.n	800aab6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aaac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaae:	3304      	adds	r3, #4
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7fe f835 	bl	8008b20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aab6:	1d3b      	adds	r3, r7, #4
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7ff ff87 	bl	800a9cc <prvSampleTimeNow>
 800aabe:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	2b09      	cmp	r3, #9
 800aac4:	f200 8098 	bhi.w	800abf8 <prvProcessReceivedCommands+0x168>
 800aac8:	a201      	add	r2, pc, #4	@ (adr r2, 800aad0 <prvProcessReceivedCommands+0x40>)
 800aaca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aace:	bf00      	nop
 800aad0:	0800aaf9 	.word	0x0800aaf9
 800aad4:	0800aaf9 	.word	0x0800aaf9
 800aad8:	0800aaf9 	.word	0x0800aaf9
 800aadc:	0800ab6f 	.word	0x0800ab6f
 800aae0:	0800ab83 	.word	0x0800ab83
 800aae4:	0800abcf 	.word	0x0800abcf
 800aae8:	0800aaf9 	.word	0x0800aaf9
 800aaec:	0800aaf9 	.word	0x0800aaf9
 800aaf0:	0800ab6f 	.word	0x0800ab6f
 800aaf4:	0800ab83 	.word	0x0800ab83
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aafe:	f043 0301 	orr.w	r3, r3, #1
 800ab02:	b2da      	uxtb	r2, r3
 800ab04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	18d1      	adds	r1, r2, r3
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6a3a      	ldr	r2, [r7, #32]
 800ab16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab18:	f7ff ff78 	bl	800aa0c <prvInsertTimerInActiveList>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d06c      	beq.n	800abfc <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab30:	f003 0304 	and.w	r3, r3, #4
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d061      	beq.n	800abfc <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3c:	699b      	ldr	r3, [r3, #24]
 800ab3e:	441a      	add	r2, r3
 800ab40:	2300      	movs	r3, #0
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	2300      	movs	r3, #0
 800ab46:	2100      	movs	r1, #0
 800ab48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab4a:	f7ff fe1d 	bl	800a788 <xTimerGenericCommand>
 800ab4e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d152      	bne.n	800abfc <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800ab56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab5a:	f383 8811 	msr	BASEPRI, r3
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	61bb      	str	r3, [r7, #24]
}
 800ab68:	bf00      	nop
 800ab6a:	bf00      	nop
 800ab6c:	e7fd      	b.n	800ab6a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab74:	f023 0301 	bic.w	r3, r3, #1
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ab80:	e03d      	b.n	800abfe <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab88:	f043 0301 	orr.w	r3, r3, #1
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10b      	bne.n	800abba <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800aba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	617b      	str	r3, [r7, #20]
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop
 800abb8:	e7fd      	b.n	800abb6 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800abba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abbc:	699a      	ldr	r2, [r3, #24]
 800abbe:	6a3b      	ldr	r3, [r7, #32]
 800abc0:	18d1      	adds	r1, r2, r3
 800abc2:	6a3b      	ldr	r3, [r7, #32]
 800abc4:	6a3a      	ldr	r2, [r7, #32]
 800abc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800abc8:	f7ff ff20 	bl	800aa0c <prvInsertTimerInActiveList>
					break;
 800abcc:	e017      	b.n	800abfe <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800abce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abd4:	f003 0302 	and.w	r3, r3, #2
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d103      	bne.n	800abe4 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800abdc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800abde:	f000 fbd5 	bl	800b38c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800abe2:	e00c      	b.n	800abfe <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800abe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abea:	f023 0301 	bic.w	r3, r3, #1
 800abee:	b2da      	uxtb	r2, r3
 800abf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800abf6:	e002      	b.n	800abfe <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800abf8:	bf00      	nop
 800abfa:	e000      	b.n	800abfe <prvProcessReceivedCommands+0x16e>
					break;
 800abfc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abfe:	4b08      	ldr	r3, [pc, #32]	@ (800ac20 <prvProcessReceivedCommands+0x190>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f107 0108 	add.w	r1, r7, #8
 800ac06:	2200      	movs	r2, #0
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7fe fa4d 	bl	80090a8 <xQueueReceive>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f47f af41 	bne.w	800aa98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ac16:	bf00      	nop
 800ac18:	bf00      	nop
 800ac1a:	3728      	adds	r7, #40	@ 0x28
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	20000a04 	.word	0x20000a04

0800ac24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b088      	sub	sp, #32
 800ac28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac2a:	e049      	b.n	800acc0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac2c:	4b2e      	ldr	r3, [pc, #184]	@ (800ace8 <prvSwitchTimerLists+0xc4>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac36:	4b2c      	ldr	r3, [pc, #176]	@ (800ace8 <prvSwitchTimerLists+0xc4>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	3304      	adds	r3, #4
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7fd ff6b 	bl	8008b20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6a1b      	ldr	r3, [r3, #32]
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac58:	f003 0304 	and.w	r3, r3, #4
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d02f      	beq.n	800acc0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	693a      	ldr	r2, [r7, #16]
 800ac66:	4413      	add	r3, r2
 800ac68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d90e      	bls.n	800ac90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac7e:	4b1a      	ldr	r3, [pc, #104]	@ (800ace8 <prvSwitchTimerLists+0xc4>)
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	3304      	adds	r3, #4
 800ac86:	4619      	mov	r1, r3
 800ac88:	4610      	mov	r0, r2
 800ac8a:	f7fd ff10 	bl	8008aae <vListInsert>
 800ac8e:	e017      	b.n	800acc0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac90:	2300      	movs	r3, #0
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	2300      	movs	r3, #0
 800ac96:	693a      	ldr	r2, [r7, #16]
 800ac98:	2100      	movs	r1, #0
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f7ff fd74 	bl	800a788 <xTimerGenericCommand>
 800aca0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10b      	bne.n	800acc0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	603b      	str	r3, [r7, #0]
}
 800acba:	bf00      	nop
 800acbc:	bf00      	nop
 800acbe:	e7fd      	b.n	800acbc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800acc0:	4b09      	ldr	r3, [pc, #36]	@ (800ace8 <prvSwitchTimerLists+0xc4>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1b0      	bne.n	800ac2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800acca:	4b07      	ldr	r3, [pc, #28]	@ (800ace8 <prvSwitchTimerLists+0xc4>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800acd0:	4b06      	ldr	r3, [pc, #24]	@ (800acec <prvSwitchTimerLists+0xc8>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a04      	ldr	r2, [pc, #16]	@ (800ace8 <prvSwitchTimerLists+0xc4>)
 800acd6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800acd8:	4a04      	ldr	r2, [pc, #16]	@ (800acec <prvSwitchTimerLists+0xc8>)
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	6013      	str	r3, [r2, #0]
}
 800acde:	bf00      	nop
 800ace0:	3718      	adds	r7, #24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	200009fc 	.word	0x200009fc
 800acec:	20000a00 	.word	0x20000a00

0800acf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800acf4:	f000 f960 	bl	800afb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800acf8:	4b12      	ldr	r3, [pc, #72]	@ (800ad44 <prvCheckForValidListAndQueue+0x54>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d11d      	bne.n	800ad3c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800ad00:	4811      	ldr	r0, [pc, #68]	@ (800ad48 <prvCheckForValidListAndQueue+0x58>)
 800ad02:	f7fd fe83 	bl	8008a0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ad06:	4811      	ldr	r0, [pc, #68]	@ (800ad4c <prvCheckForValidListAndQueue+0x5c>)
 800ad08:	f7fd fe80 	bl	8008a0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ad0c:	4b10      	ldr	r3, [pc, #64]	@ (800ad50 <prvCheckForValidListAndQueue+0x60>)
 800ad0e:	4a0e      	ldr	r2, [pc, #56]	@ (800ad48 <prvCheckForValidListAndQueue+0x58>)
 800ad10:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ad12:	4b10      	ldr	r3, [pc, #64]	@ (800ad54 <prvCheckForValidListAndQueue+0x64>)
 800ad14:	4a0d      	ldr	r2, [pc, #52]	@ (800ad4c <prvCheckForValidListAndQueue+0x5c>)
 800ad16:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ad18:	2200      	movs	r2, #0
 800ad1a:	210c      	movs	r1, #12
 800ad1c:	200a      	movs	r0, #10
 800ad1e:	f7fd ff93 	bl	8008c48 <xQueueGenericCreate>
 800ad22:	4603      	mov	r3, r0
 800ad24:	4a07      	ldr	r2, [pc, #28]	@ (800ad44 <prvCheckForValidListAndQueue+0x54>)
 800ad26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ad28:	4b06      	ldr	r3, [pc, #24]	@ (800ad44 <prvCheckForValidListAndQueue+0x54>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d005      	beq.n	800ad3c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ad30:	4b04      	ldr	r3, [pc, #16]	@ (800ad44 <prvCheckForValidListAndQueue+0x54>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4908      	ldr	r1, [pc, #32]	@ (800ad58 <prvCheckForValidListAndQueue+0x68>)
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fe fcd0 	bl	80096dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad3c:	f000 f96e 	bl	800b01c <vPortExitCritical>
}
 800ad40:	bf00      	nop
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	20000a04 	.word	0x20000a04
 800ad48:	200009d4 	.word	0x200009d4
 800ad4c:	200009e8 	.word	0x200009e8
 800ad50:	200009fc 	.word	0x200009fc
 800ad54:	20000a00 	.word	0x20000a00
 800ad58:	080117e0 	.word	0x080117e0

0800ad5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	3b04      	subs	r3, #4
 800ad6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ad74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	3b04      	subs	r3, #4
 800ad7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	f023 0201 	bic.w	r2, r3, #1
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	3b04      	subs	r3, #4
 800ad8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ad8c:	4a0c      	ldr	r2, [pc, #48]	@ (800adc0 <pxPortInitialiseStack+0x64>)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	3b14      	subs	r3, #20
 800ad96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	3b04      	subs	r3, #4
 800ada2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f06f 0202 	mvn.w	r2, #2
 800adaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	3b20      	subs	r3, #32
 800adb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800adb2:	68fb      	ldr	r3, [r7, #12]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3714      	adds	r7, #20
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr
 800adc0:	0800adc5 	.word	0x0800adc5

0800adc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800adca:	2300      	movs	r3, #0
 800adcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800adce:	4b13      	ldr	r3, [pc, #76]	@ (800ae1c <prvTaskExitError+0x58>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add6:	d00b      	beq.n	800adf0 <prvTaskExitError+0x2c>
	__asm volatile
 800add8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800addc:	f383 8811 	msr	BASEPRI, r3
 800ade0:	f3bf 8f6f 	isb	sy
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	60fb      	str	r3, [r7, #12]
}
 800adea:	bf00      	nop
 800adec:	bf00      	nop
 800adee:	e7fd      	b.n	800adec <prvTaskExitError+0x28>
	__asm volatile
 800adf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf4:	f383 8811 	msr	BASEPRI, r3
 800adf8:	f3bf 8f6f 	isb	sy
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	60bb      	str	r3, [r7, #8]
}
 800ae02:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ae04:	bf00      	nop
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d0fc      	beq.n	800ae06 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ae0c:	bf00      	nop
 800ae0e:	bf00      	nop
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	20000028 	.word	0x20000028

0800ae20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ae20:	4b07      	ldr	r3, [pc, #28]	@ (800ae40 <pxCurrentTCBConst2>)
 800ae22:	6819      	ldr	r1, [r3, #0]
 800ae24:	6808      	ldr	r0, [r1, #0]
 800ae26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2a:	f380 8809 	msr	PSP, r0
 800ae2e:	f3bf 8f6f 	isb	sy
 800ae32:	f04f 0000 	mov.w	r0, #0
 800ae36:	f380 8811 	msr	BASEPRI, r0
 800ae3a:	4770      	bx	lr
 800ae3c:	f3af 8000 	nop.w

0800ae40 <pxCurrentTCBConst2>:
 800ae40:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ae44:	bf00      	nop
 800ae46:	bf00      	nop

0800ae48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ae48:	4808      	ldr	r0, [pc, #32]	@ (800ae6c <prvPortStartFirstTask+0x24>)
 800ae4a:	6800      	ldr	r0, [r0, #0]
 800ae4c:	6800      	ldr	r0, [r0, #0]
 800ae4e:	f380 8808 	msr	MSP, r0
 800ae52:	f04f 0000 	mov.w	r0, #0
 800ae56:	f380 8814 	msr	CONTROL, r0
 800ae5a:	b662      	cpsie	i
 800ae5c:	b661      	cpsie	f
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	f3bf 8f6f 	isb	sy
 800ae66:	df00      	svc	0
 800ae68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ae6a:	bf00      	nop
 800ae6c:	e000ed08 	.word	0xe000ed08

0800ae70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ae76:	4b47      	ldr	r3, [pc, #284]	@ (800af94 <xPortStartScheduler+0x124>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a47      	ldr	r2, [pc, #284]	@ (800af98 <xPortStartScheduler+0x128>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d10b      	bne.n	800ae98 <xPortStartScheduler+0x28>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	60fb      	str	r3, [r7, #12]
}
 800ae92:	bf00      	nop
 800ae94:	bf00      	nop
 800ae96:	e7fd      	b.n	800ae94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ae98:	4b3e      	ldr	r3, [pc, #248]	@ (800af94 <xPortStartScheduler+0x124>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a3f      	ldr	r2, [pc, #252]	@ (800af9c <xPortStartScheduler+0x12c>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d10b      	bne.n	800aeba <xPortStartScheduler+0x4a>
	__asm volatile
 800aea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	613b      	str	r3, [r7, #16]
}
 800aeb4:	bf00      	nop
 800aeb6:	bf00      	nop
 800aeb8:	e7fd      	b.n	800aeb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aeba:	4b39      	ldr	r3, [pc, #228]	@ (800afa0 <xPortStartScheduler+0x130>)
 800aebc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	22ff      	movs	r2, #255	@ 0xff
 800aeca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aed4:	78fb      	ldrb	r3, [r7, #3]
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800aedc:	b2da      	uxtb	r2, r3
 800aede:	4b31      	ldr	r3, [pc, #196]	@ (800afa4 <xPortStartScheduler+0x134>)
 800aee0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aee2:	4b31      	ldr	r3, [pc, #196]	@ (800afa8 <xPortStartScheduler+0x138>)
 800aee4:	2207      	movs	r2, #7
 800aee6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aee8:	e009      	b.n	800aefe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800aeea:	4b2f      	ldr	r3, [pc, #188]	@ (800afa8 <xPortStartScheduler+0x138>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	3b01      	subs	r3, #1
 800aef0:	4a2d      	ldr	r2, [pc, #180]	@ (800afa8 <xPortStartScheduler+0x138>)
 800aef2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aef4:	78fb      	ldrb	r3, [r7, #3]
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	005b      	lsls	r3, r3, #1
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aefe:	78fb      	ldrb	r3, [r7, #3]
 800af00:	b2db      	uxtb	r3, r3
 800af02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af06:	2b80      	cmp	r3, #128	@ 0x80
 800af08:	d0ef      	beq.n	800aeea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800af0a:	4b27      	ldr	r3, [pc, #156]	@ (800afa8 <xPortStartScheduler+0x138>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f1c3 0307 	rsb	r3, r3, #7
 800af12:	2b04      	cmp	r3, #4
 800af14:	d00b      	beq.n	800af2e <xPortStartScheduler+0xbe>
	__asm volatile
 800af16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af1a:	f383 8811 	msr	BASEPRI, r3
 800af1e:	f3bf 8f6f 	isb	sy
 800af22:	f3bf 8f4f 	dsb	sy
 800af26:	60bb      	str	r3, [r7, #8]
}
 800af28:	bf00      	nop
 800af2a:	bf00      	nop
 800af2c:	e7fd      	b.n	800af2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800af2e:	4b1e      	ldr	r3, [pc, #120]	@ (800afa8 <xPortStartScheduler+0x138>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	021b      	lsls	r3, r3, #8
 800af34:	4a1c      	ldr	r2, [pc, #112]	@ (800afa8 <xPortStartScheduler+0x138>)
 800af36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800af38:	4b1b      	ldr	r3, [pc, #108]	@ (800afa8 <xPortStartScheduler+0x138>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800af40:	4a19      	ldr	r2, [pc, #100]	@ (800afa8 <xPortStartScheduler+0x138>)
 800af42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	b2da      	uxtb	r2, r3
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800af4c:	4b17      	ldr	r3, [pc, #92]	@ (800afac <xPortStartScheduler+0x13c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a16      	ldr	r2, [pc, #88]	@ (800afac <xPortStartScheduler+0x13c>)
 800af52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800af56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800af58:	4b14      	ldr	r3, [pc, #80]	@ (800afac <xPortStartScheduler+0x13c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a13      	ldr	r2, [pc, #76]	@ (800afac <xPortStartScheduler+0x13c>)
 800af5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800af62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800af64:	f000 f8da 	bl	800b11c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800af68:	4b11      	ldr	r3, [pc, #68]	@ (800afb0 <xPortStartScheduler+0x140>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800af6e:	f000 f8f9 	bl	800b164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800af72:	4b10      	ldr	r3, [pc, #64]	@ (800afb4 <xPortStartScheduler+0x144>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a0f      	ldr	r2, [pc, #60]	@ (800afb4 <xPortStartScheduler+0x144>)
 800af78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800af7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800af7e:	f7ff ff63 	bl	800ae48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800af82:	f7fe ff43 	bl	8009e0c <vTaskSwitchContext>
	prvTaskExitError();
 800af86:	f7ff ff1d 	bl	800adc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3718      	adds	r7, #24
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	e000ed00 	.word	0xe000ed00
 800af98:	410fc271 	.word	0x410fc271
 800af9c:	410fc270 	.word	0x410fc270
 800afa0:	e000e400 	.word	0xe000e400
 800afa4:	20000a10 	.word	0x20000a10
 800afa8:	20000a14 	.word	0x20000a14
 800afac:	e000ed20 	.word	0xe000ed20
 800afb0:	20000028 	.word	0x20000028
 800afb4:	e000ef34 	.word	0xe000ef34

0800afb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	607b      	str	r3, [r7, #4]
}
 800afd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800afd2:	4b10      	ldr	r3, [pc, #64]	@ (800b014 <vPortEnterCritical+0x5c>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	3301      	adds	r3, #1
 800afd8:	4a0e      	ldr	r2, [pc, #56]	@ (800b014 <vPortEnterCritical+0x5c>)
 800afda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800afdc:	4b0d      	ldr	r3, [pc, #52]	@ (800b014 <vPortEnterCritical+0x5c>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d110      	bne.n	800b006 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800afe4:	4b0c      	ldr	r3, [pc, #48]	@ (800b018 <vPortEnterCritical+0x60>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00b      	beq.n	800b006 <vPortEnterCritical+0x4e>
	__asm volatile
 800afee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	603b      	str	r3, [r7, #0]
}
 800b000:	bf00      	nop
 800b002:	bf00      	nop
 800b004:	e7fd      	b.n	800b002 <vPortEnterCritical+0x4a>
	}
}
 800b006:	bf00      	nop
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	20000028 	.word	0x20000028
 800b018:	e000ed04 	.word	0xe000ed04

0800b01c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b022:	4b12      	ldr	r3, [pc, #72]	@ (800b06c <vPortExitCritical+0x50>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10b      	bne.n	800b042 <vPortExitCritical+0x26>
	__asm volatile
 800b02a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b02e:	f383 8811 	msr	BASEPRI, r3
 800b032:	f3bf 8f6f 	isb	sy
 800b036:	f3bf 8f4f 	dsb	sy
 800b03a:	607b      	str	r3, [r7, #4]
}
 800b03c:	bf00      	nop
 800b03e:	bf00      	nop
 800b040:	e7fd      	b.n	800b03e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b042:	4b0a      	ldr	r3, [pc, #40]	@ (800b06c <vPortExitCritical+0x50>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	3b01      	subs	r3, #1
 800b048:	4a08      	ldr	r2, [pc, #32]	@ (800b06c <vPortExitCritical+0x50>)
 800b04a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b04c:	4b07      	ldr	r3, [pc, #28]	@ (800b06c <vPortExitCritical+0x50>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d105      	bne.n	800b060 <vPortExitCritical+0x44>
 800b054:	2300      	movs	r3, #0
 800b056:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	f383 8811 	msr	BASEPRI, r3
}
 800b05e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b060:	bf00      	nop
 800b062:	370c      	adds	r7, #12
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr
 800b06c:	20000028 	.word	0x20000028

0800b070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b070:	f3ef 8009 	mrs	r0, PSP
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	4b15      	ldr	r3, [pc, #84]	@ (800b0d0 <pxCurrentTCBConst>)
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	f01e 0f10 	tst.w	lr, #16
 800b080:	bf08      	it	eq
 800b082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08a:	6010      	str	r0, [r2, #0]
 800b08c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b090:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b094:	f380 8811 	msr	BASEPRI, r0
 800b098:	f3bf 8f4f 	dsb	sy
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f7fe feb4 	bl	8009e0c <vTaskSwitchContext>
 800b0a4:	f04f 0000 	mov.w	r0, #0
 800b0a8:	f380 8811 	msr	BASEPRI, r0
 800b0ac:	bc09      	pop	{r0, r3}
 800b0ae:	6819      	ldr	r1, [r3, #0]
 800b0b0:	6808      	ldr	r0, [r1, #0]
 800b0b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b6:	f01e 0f10 	tst.w	lr, #16
 800b0ba:	bf08      	it	eq
 800b0bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b0c0:	f380 8809 	msr	PSP, r0
 800b0c4:	f3bf 8f6f 	isb	sy
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	f3af 8000 	nop.w

0800b0d0 <pxCurrentTCBConst>:
 800b0d0:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b0d4:	bf00      	nop
 800b0d6:	bf00      	nop

0800b0d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	607b      	str	r3, [r7, #4]
}
 800b0f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b0f2:	f7fe fdd1 	bl	8009c98 <xTaskIncrementTick>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d003      	beq.n	800b104 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b0fc:	4b06      	ldr	r3, [pc, #24]	@ (800b118 <SysTick_Handler+0x40>)
 800b0fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b102:	601a      	str	r2, [r3, #0]
 800b104:	2300      	movs	r3, #0
 800b106:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	f383 8811 	msr	BASEPRI, r3
}
 800b10e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b110:	bf00      	nop
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	e000ed04 	.word	0xe000ed04

0800b11c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b11c:	b480      	push	{r7}
 800b11e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b120:	4b0b      	ldr	r3, [pc, #44]	@ (800b150 <vPortSetupTimerInterrupt+0x34>)
 800b122:	2200      	movs	r2, #0
 800b124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b126:	4b0b      	ldr	r3, [pc, #44]	@ (800b154 <vPortSetupTimerInterrupt+0x38>)
 800b128:	2200      	movs	r2, #0
 800b12a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b12c:	4b0a      	ldr	r3, [pc, #40]	@ (800b158 <vPortSetupTimerInterrupt+0x3c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a0a      	ldr	r2, [pc, #40]	@ (800b15c <vPortSetupTimerInterrupt+0x40>)
 800b132:	fba2 2303 	umull	r2, r3, r2, r3
 800b136:	099b      	lsrs	r3, r3, #6
 800b138:	4a09      	ldr	r2, [pc, #36]	@ (800b160 <vPortSetupTimerInterrupt+0x44>)
 800b13a:	3b01      	subs	r3, #1
 800b13c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b13e:	4b04      	ldr	r3, [pc, #16]	@ (800b150 <vPortSetupTimerInterrupt+0x34>)
 800b140:	2207      	movs	r2, #7
 800b142:	601a      	str	r2, [r3, #0]
}
 800b144:	bf00      	nop
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	e000e010 	.word	0xe000e010
 800b154:	e000e018 	.word	0xe000e018
 800b158:	20000004 	.word	0x20000004
 800b15c:	10624dd3 	.word	0x10624dd3
 800b160:	e000e014 	.word	0xe000e014

0800b164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b164:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b174 <vPortEnableVFP+0x10>
 800b168:	6801      	ldr	r1, [r0, #0]
 800b16a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b16e:	6001      	str	r1, [r0, #0]
 800b170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b172:	bf00      	nop
 800b174:	e000ed88 	.word	0xe000ed88

0800b178 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b17e:	f3ef 8305 	mrs	r3, IPSR
 800b182:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2b0f      	cmp	r3, #15
 800b188:	d915      	bls.n	800b1b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b18a:	4a18      	ldr	r2, [pc, #96]	@ (800b1ec <vPortValidateInterruptPriority+0x74>)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	4413      	add	r3, r2
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b194:	4b16      	ldr	r3, [pc, #88]	@ (800b1f0 <vPortValidateInterruptPriority+0x78>)
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	7afa      	ldrb	r2, [r7, #11]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d20b      	bcs.n	800b1b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	607b      	str	r3, [r7, #4]
}
 800b1b0:	bf00      	nop
 800b1b2:	bf00      	nop
 800b1b4:	e7fd      	b.n	800b1b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b1b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b1f4 <vPortValidateInterruptPriority+0x7c>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b1be:	4b0e      	ldr	r3, [pc, #56]	@ (800b1f8 <vPortValidateInterruptPriority+0x80>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d90b      	bls.n	800b1de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ca:	f383 8811 	msr	BASEPRI, r3
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	603b      	str	r3, [r7, #0]
}
 800b1d8:	bf00      	nop
 800b1da:	bf00      	nop
 800b1dc:	e7fd      	b.n	800b1da <vPortValidateInterruptPriority+0x62>
	}
 800b1de:	bf00      	nop
 800b1e0:	3714      	adds	r7, #20
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	e000e3f0 	.word	0xe000e3f0
 800b1f0:	20000a10 	.word	0x20000a10
 800b1f4:	e000ed0c 	.word	0xe000ed0c
 800b1f8:	20000a14 	.word	0x20000a14

0800b1fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b08a      	sub	sp, #40	@ 0x28
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b204:	2300      	movs	r3, #0
 800b206:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b208:	f7fe fc8a 	bl	8009b20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b20c:	4b5a      	ldr	r3, [pc, #360]	@ (800b378 <pvPortMalloc+0x17c>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d101      	bne.n	800b218 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b214:	f000 f916 	bl	800b444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b218:	4b58      	ldr	r3, [pc, #352]	@ (800b37c <pvPortMalloc+0x180>)
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4013      	ands	r3, r2
 800b220:	2b00      	cmp	r3, #0
 800b222:	f040 8090 	bne.w	800b346 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d01e      	beq.n	800b26a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b22c:	2208      	movs	r2, #8
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4413      	add	r3, r2
 800b232:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f003 0307 	and.w	r3, r3, #7
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d015      	beq.n	800b26a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f023 0307 	bic.w	r3, r3, #7
 800b244:	3308      	adds	r3, #8
 800b246:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f003 0307 	and.w	r3, r3, #7
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d00b      	beq.n	800b26a <pvPortMalloc+0x6e>
	__asm volatile
 800b252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b256:	f383 8811 	msr	BASEPRI, r3
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	617b      	str	r3, [r7, #20]
}
 800b264:	bf00      	nop
 800b266:	bf00      	nop
 800b268:	e7fd      	b.n	800b266 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d06a      	beq.n	800b346 <pvPortMalloc+0x14a>
 800b270:	4b43      	ldr	r3, [pc, #268]	@ (800b380 <pvPortMalloc+0x184>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	429a      	cmp	r2, r3
 800b278:	d865      	bhi.n	800b346 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b27a:	4b42      	ldr	r3, [pc, #264]	@ (800b384 <pvPortMalloc+0x188>)
 800b27c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b27e:	4b41      	ldr	r3, [pc, #260]	@ (800b384 <pvPortMalloc+0x188>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b284:	e004      	b.n	800b290 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b288:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	429a      	cmp	r2, r3
 800b298:	d903      	bls.n	800b2a2 <pvPortMalloc+0xa6>
 800b29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d1f1      	bne.n	800b286 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b2a2:	4b35      	ldr	r3, [pc, #212]	@ (800b378 <pvPortMalloc+0x17c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d04c      	beq.n	800b346 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b2ac:	6a3b      	ldr	r3, [r7, #32]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2208      	movs	r2, #8
 800b2b2:	4413      	add	r3, r2
 800b2b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	6a3b      	ldr	r3, [r7, #32]
 800b2bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c0:	685a      	ldr	r2, [r3, #4]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	1ad2      	subs	r2, r2, r3
 800b2c6:	2308      	movs	r3, #8
 800b2c8:	005b      	lsls	r3, r3, #1
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d920      	bls.n	800b310 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b2ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	f003 0307 	and.w	r3, r3, #7
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00b      	beq.n	800b2f8 <pvPortMalloc+0xfc>
	__asm volatile
 800b2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e4:	f383 8811 	msr	BASEPRI, r3
 800b2e8:	f3bf 8f6f 	isb	sy
 800b2ec:	f3bf 8f4f 	dsb	sy
 800b2f0:	613b      	str	r3, [r7, #16]
}
 800b2f2:	bf00      	nop
 800b2f4:	bf00      	nop
 800b2f6:	e7fd      	b.n	800b2f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fa:	685a      	ldr	r2, [r3, #4]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	1ad2      	subs	r2, r2, r3
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b30a:	69b8      	ldr	r0, [r7, #24]
 800b30c:	f000 f8fc 	bl	800b508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b310:	4b1b      	ldr	r3, [pc, #108]	@ (800b380 <pvPortMalloc+0x184>)
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	4a19      	ldr	r2, [pc, #100]	@ (800b380 <pvPortMalloc+0x184>)
 800b31c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b31e:	4b18      	ldr	r3, [pc, #96]	@ (800b380 <pvPortMalloc+0x184>)
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	4b19      	ldr	r3, [pc, #100]	@ (800b388 <pvPortMalloc+0x18c>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	429a      	cmp	r2, r3
 800b328:	d203      	bcs.n	800b332 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b32a:	4b15      	ldr	r3, [pc, #84]	@ (800b380 <pvPortMalloc+0x184>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a16      	ldr	r2, [pc, #88]	@ (800b388 <pvPortMalloc+0x18c>)
 800b330:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	4b11      	ldr	r3, [pc, #68]	@ (800b37c <pvPortMalloc+0x180>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	431a      	orrs	r2, r3
 800b33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b342:	2200      	movs	r2, #0
 800b344:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b346:	f7fe fbf9 	bl	8009b3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	f003 0307 	and.w	r3, r3, #7
 800b350:	2b00      	cmp	r3, #0
 800b352:	d00b      	beq.n	800b36c <pvPortMalloc+0x170>
	__asm volatile
 800b354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b358:	f383 8811 	msr	BASEPRI, r3
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	f3bf 8f4f 	dsb	sy
 800b364:	60fb      	str	r3, [r7, #12]
}
 800b366:	bf00      	nop
 800b368:	bf00      	nop
 800b36a:	e7fd      	b.n	800b368 <pvPortMalloc+0x16c>
	return pvReturn;
 800b36c:	69fb      	ldr	r3, [r7, #28]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3728      	adds	r7, #40	@ 0x28
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	20013620 	.word	0x20013620
 800b37c:	2001362c 	.word	0x2001362c
 800b380:	20013624 	.word	0x20013624
 800b384:	20013618 	.word	0x20013618
 800b388:	20013628 	.word	0x20013628

0800b38c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d04a      	beq.n	800b434 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b39e:	2308      	movs	r3, #8
 800b3a0:	425b      	negs	r3, r3
 800b3a2:	697a      	ldr	r2, [r7, #20]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	685a      	ldr	r2, [r3, #4]
 800b3b0:	4b22      	ldr	r3, [pc, #136]	@ (800b43c <vPortFree+0xb0>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4013      	ands	r3, r2
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10b      	bne.n	800b3d2 <vPortFree+0x46>
	__asm volatile
 800b3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	60fb      	str	r3, [r7, #12]
}
 800b3cc:	bf00      	nop
 800b3ce:	bf00      	nop
 800b3d0:	e7fd      	b.n	800b3ce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d00b      	beq.n	800b3f2 <vPortFree+0x66>
	__asm volatile
 800b3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3de:	f383 8811 	msr	BASEPRI, r3
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	f3bf 8f4f 	dsb	sy
 800b3ea:	60bb      	str	r3, [r7, #8]
}
 800b3ec:	bf00      	nop
 800b3ee:	bf00      	nop
 800b3f0:	e7fd      	b.n	800b3ee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	685a      	ldr	r2, [r3, #4]
 800b3f6:	4b11      	ldr	r3, [pc, #68]	@ (800b43c <vPortFree+0xb0>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4013      	ands	r3, r2
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d019      	beq.n	800b434 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d115      	bne.n	800b434 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	685a      	ldr	r2, [r3, #4]
 800b40c:	4b0b      	ldr	r3, [pc, #44]	@ (800b43c <vPortFree+0xb0>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	43db      	mvns	r3, r3
 800b412:	401a      	ands	r2, r3
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b418:	f7fe fb82 	bl	8009b20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	685a      	ldr	r2, [r3, #4]
 800b420:	4b07      	ldr	r3, [pc, #28]	@ (800b440 <vPortFree+0xb4>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4413      	add	r3, r2
 800b426:	4a06      	ldr	r2, [pc, #24]	@ (800b440 <vPortFree+0xb4>)
 800b428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b42a:	6938      	ldr	r0, [r7, #16]
 800b42c:	f000 f86c 	bl	800b508 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b430:	f7fe fb84 	bl	8009b3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b434:	bf00      	nop
 800b436:	3718      	adds	r7, #24
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	2001362c 	.word	0x2001362c
 800b440:	20013624 	.word	0x20013624

0800b444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b44a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800b44e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b450:	4b27      	ldr	r3, [pc, #156]	@ (800b4f0 <prvHeapInit+0xac>)
 800b452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f003 0307 	and.w	r3, r3, #7
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00c      	beq.n	800b478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	3307      	adds	r3, #7
 800b462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f023 0307 	bic.w	r3, r3, #7
 800b46a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	1ad3      	subs	r3, r2, r3
 800b472:	4a1f      	ldr	r2, [pc, #124]	@ (800b4f0 <prvHeapInit+0xac>)
 800b474:	4413      	add	r3, r2
 800b476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b47c:	4a1d      	ldr	r2, [pc, #116]	@ (800b4f4 <prvHeapInit+0xb0>)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b482:	4b1c      	ldr	r3, [pc, #112]	@ (800b4f4 <prvHeapInit+0xb0>)
 800b484:	2200      	movs	r2, #0
 800b486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	68ba      	ldr	r2, [r7, #8]
 800b48c:	4413      	add	r3, r2
 800b48e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b490:	2208      	movs	r2, #8
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	1a9b      	subs	r3, r3, r2
 800b496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f023 0307 	bic.w	r3, r3, #7
 800b49e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	4a15      	ldr	r2, [pc, #84]	@ (800b4f8 <prvHeapInit+0xb4>)
 800b4a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b4a6:	4b14      	ldr	r3, [pc, #80]	@ (800b4f8 <prvHeapInit+0xb4>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b4ae:	4b12      	ldr	r3, [pc, #72]	@ (800b4f8 <prvHeapInit+0xb4>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	1ad2      	subs	r2, r2, r3
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b4c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b4f8 <prvHeapInit+0xb4>)
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	4a0a      	ldr	r2, [pc, #40]	@ (800b4fc <prvHeapInit+0xb8>)
 800b4d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	4a09      	ldr	r2, [pc, #36]	@ (800b500 <prvHeapInit+0xbc>)
 800b4da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b4dc:	4b09      	ldr	r3, [pc, #36]	@ (800b504 <prvHeapInit+0xc0>)
 800b4de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b4e2:	601a      	str	r2, [r3, #0]
}
 800b4e4:	bf00      	nop
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	20000a18 	.word	0x20000a18
 800b4f4:	20013618 	.word	0x20013618
 800b4f8:	20013620 	.word	0x20013620
 800b4fc:	20013628 	.word	0x20013628
 800b500:	20013624 	.word	0x20013624
 800b504:	2001362c 	.word	0x2001362c

0800b508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b510:	4b28      	ldr	r3, [pc, #160]	@ (800b5b4 <prvInsertBlockIntoFreeList+0xac>)
 800b512:	60fb      	str	r3, [r7, #12]
 800b514:	e002      	b.n	800b51c <prvInsertBlockIntoFreeList+0x14>
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	60fb      	str	r3, [r7, #12]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	429a      	cmp	r2, r3
 800b524:	d8f7      	bhi.n	800b516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	68ba      	ldr	r2, [r7, #8]
 800b530:	4413      	add	r3, r2
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	429a      	cmp	r2, r3
 800b536:	d108      	bne.n	800b54a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	685a      	ldr	r2, [r3, #4]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	441a      	add	r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	441a      	add	r2, r3
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d118      	bne.n	800b590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	4b15      	ldr	r3, [pc, #84]	@ (800b5b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	429a      	cmp	r2, r3
 800b568:	d00d      	beq.n	800b586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	685a      	ldr	r2, [r3, #4]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	441a      	add	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	e008      	b.n	800b598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b586:	4b0c      	ldr	r3, [pc, #48]	@ (800b5b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	601a      	str	r2, [r3, #0]
 800b58e:	e003      	b.n	800b598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d002      	beq.n	800b5a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5a6:	bf00      	nop
 800b5a8:	3714      	adds	r7, #20
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	20013618 	.word	0x20013618
 800b5b8:	20013620 	.word	0x20013620

0800b5bc <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af02      	add	r7, sp, #8
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 800b5c8:	78fb      	ldrb	r3, [r7, #3]
 800b5ca:	f023 030f 	bic.w	r3, r3, #15
 800b5ce:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 800b5d0:	78fb      	ldrb	r3, [r7, #3]
 800b5d2:	011b      	lsls	r3, r3, #4
 800b5d4:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 800b5d6:	7bfb      	ldrb	r3, [r7, #15]
 800b5d8:	f043 030c 	orr.w	r3, r3, #12
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
 800b5e2:	f043 0308 	orr.w	r3, r3, #8
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 800b5ea:	7bbb      	ldrb	r3, [r7, #14]
 800b5ec:	f043 030c 	orr.w	r3, r3, #12
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 800b5f4:	7bbb      	ldrb	r3, [r7, #14]
 800b5f6:	f043 0308 	orr.w	r3, r3, #8
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	72fb      	strb	r3, [r7, #11]


    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6818      	ldr	r0, [r3, #0]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	791b      	ldrb	r3, [r3, #4]
 800b606:	4619      	mov	r1, r3
 800b608:	f107 0208 	add.w	r2, r7, #8
 800b60c:	2364      	movs	r3, #100	@ 0x64
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	2304      	movs	r3, #4
 800b612:	f7f7 fb35 	bl	8002c80 <HAL_I2C_Master_Transmit>
 800b616:	4603      	mov	r3, r0
 800b618:	737b      	strb	r3, [r7, #13]
    if (ret != HAL_OK) {

    }
}
 800b61a:	bf00      	nop
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b086      	sub	sp, #24
 800b626:	af02      	add	r7, sp, #8
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	460b      	mov	r3, r1
 800b62c:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 800b62e:	78fb      	ldrb	r3, [r7, #3]
 800b630:	f023 030f 	bic.w	r3, r3, #15
 800b634:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 800b636:	78fb      	ldrb	r3, [r7, #3]
 800b638:	011b      	lsls	r3, r3, #4
 800b63a:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	f043 030d 	orr.w	r3, r3, #13
 800b642:	b2db      	uxtb	r3, r3
 800b644:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 800b646:	7bfb      	ldrb	r3, [r7, #15]
 800b648:	f043 0309 	orr.w	r3, r3, #9
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 800b650:	7bbb      	ldrb	r3, [r7, #14]
 800b652:	f043 030d 	orr.w	r3, r3, #13
 800b656:	b2db      	uxtb	r3, r3
 800b658:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 800b65a:	7bbb      	ldrb	r3, [r7, #14]
 800b65c:	f043 0309 	orr.w	r3, r3, #9
 800b660:	b2db      	uxtb	r3, r3
 800b662:	72fb      	strb	r3, [r7, #11]

    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6818      	ldr	r0, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	791b      	ldrb	r3, [r3, #4]
 800b66c:	4619      	mov	r1, r3
 800b66e:	f107 0208 	add.w	r2, r7, #8
 800b672:	2364      	movs	r3, #100	@ 0x64
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	2304      	movs	r3, #4
 800b678:	f7f7 fb02 	bl	8002c80 <HAL_I2C_Master_Transmit>
 800b67c:	4603      	mov	r3, r0
 800b67e:	737b      	strb	r3, [r7, #13]
    if (ret != HAL_OK) {

	}
}
 800b680:	bf00      	nop
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b086      	sub	sp, #24
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b03      	cmp	r3, #3
 800b698:	d824      	bhi.n	800b6e4 <lcd_gotoxy+0x5c>
 800b69a:	a201      	add	r2, pc, #4	@ (adr r2, 800b6a0 <lcd_gotoxy+0x18>)
 800b69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a0:	0800b6b1 	.word	0x0800b6b1
 800b6a4:	0800b6bb 	.word	0x0800b6bb
 800b6a8:	0800b6c5 	.word	0x0800b6c5
 800b6ac:	0800b6cf 	.word	0x0800b6cf
    {
        case 0: address = 0x80 + col; break;  // First row
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	3b80      	subs	r3, #128	@ 0x80
 800b6b6:	75fb      	strb	r3, [r7, #23]
 800b6b8:	e00e      	b.n	800b6d8 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	3b40      	subs	r3, #64	@ 0x40
 800b6c0:	75fb      	strb	r3, [r7, #23]
 800b6c2:	e009      	b.n	800b6d8 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	3b6c      	subs	r3, #108	@ 0x6c
 800b6ca:	75fb      	strb	r3, [r7, #23]
 800b6cc:	e004      	b.n	800b6d8 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	3b2c      	subs	r3, #44	@ 0x2c
 800b6d4:	75fb      	strb	r3, [r7, #23]
 800b6d6:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 800b6d8:	7dfb      	ldrb	r3, [r7, #23]
 800b6da:	4619      	mov	r1, r3
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f7ff ff6d 	bl	800b5bc <lcd_send_cmd>
 800b6e2:	e000      	b.n	800b6e6 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 800b6e4:	bf00      	nop
}
 800b6e6:	3718      	adds	r7, #24
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 800b6f4:	2032      	movs	r0, #50	@ 0x32
 800b6f6:	f7f6 fac1 	bl	8001c7c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800b6fa:	2130      	movs	r1, #48	@ 0x30
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f7ff ff5d 	bl	800b5bc <lcd_send_cmd>
    HAL_Delay(5);
 800b702:	2005      	movs	r0, #5
 800b704:	f7f6 faba 	bl	8001c7c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800b708:	2130      	movs	r1, #48	@ 0x30
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7ff ff56 	bl	800b5bc <lcd_send_cmd>
    HAL_Delay(1);
 800b710:	2001      	movs	r0, #1
 800b712:	f7f6 fab3 	bl	8001c7c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800b716:	2130      	movs	r1, #48	@ 0x30
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f7ff ff4f 	bl	800b5bc <lcd_send_cmd>
    HAL_Delay(10);
 800b71e:	200a      	movs	r0, #10
 800b720:	f7f6 faac 	bl	8001c7c <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 800b724:	2120      	movs	r1, #32
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7ff ff48 	bl	800b5bc <lcd_send_cmd>
    HAL_Delay(10);
 800b72c:	200a      	movs	r0, #10
 800b72e:	f7f6 faa5 	bl	8001c7c <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 800b732:	2128      	movs	r1, #40	@ 0x28
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f7ff ff41 	bl	800b5bc <lcd_send_cmd>
    HAL_Delay(1);
 800b73a:	2001      	movs	r0, #1
 800b73c:	f7f6 fa9e 	bl	8001c7c <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 800b740:	2108      	movs	r1, #8
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f7ff ff3a 	bl	800b5bc <lcd_send_cmd>
    HAL_Delay(1);
 800b748:	2001      	movs	r0, #1
 800b74a:	f7f6 fa97 	bl	8001c7c <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 800b74e:	2101      	movs	r1, #1
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7ff ff33 	bl	800b5bc <lcd_send_cmd>
    HAL_Delay(2);
 800b756:	2002      	movs	r0, #2
 800b758:	f7f6 fa90 	bl	8001c7c <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 800b75c:	2106      	movs	r1, #6
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7ff ff2c 	bl	800b5bc <lcd_send_cmd>
    HAL_Delay(1);
 800b764:	2001      	movs	r0, #1
 800b766:	f7f6 fa89 	bl	8001c7c <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 800b76a:	210c      	movs	r1, #12
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7ff ff25 	bl	800b5bc <lcd_send_cmd>
}
 800b772:	bf00      	nop
 800b774:	3708      	adds	r7, #8
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b082      	sub	sp, #8
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 800b784:	e007      	b.n	800b796 <lcd_puts+0x1c>
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	1c5a      	adds	r2, r3, #1
 800b78a:	603a      	str	r2, [r7, #0]
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	4619      	mov	r1, r3
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f7ff ff46 	bl	800b622 <lcd_send_data>
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d1f3      	bne.n	800b786 <lcd_puts+0xc>
}
 800b79e:	bf00      	nop
 800b7a0:	bf00      	nop
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <lcd_putchar>:
 * @param  lcd: Pointer to the LCD handle
 * @param  ch: Character to send
 * @retval None
 */
void lcd_putchar(I2C_LCD_HandleTypeDef *lcd, char ch)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	70fb      	strb	r3, [r7, #3]
    lcd_send_data(lcd, ch);  // Send the character to the display
 800b7b4:	78fb      	ldrb	r3, [r7, #3]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7ff ff32 	bl	800b622 <lcd_send_data>
}
 800b7be:	bf00      	nop
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
	...

0800b7c8 <LCD2004_Init>:
extern RTC_HandleTypeDef hrtc;
extern RTC_TimeTypeDef sTime;
extern RTC_DateTypeDef sDate;

void LCD2004_Init(I2C_HandleTypeDef *hi2c, uint8_t address, UART_HandleTypeDef* haurt)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	607a      	str	r2, [r7, #4]
 800b7d4:	72fb      	strb	r3, [r7, #11]
  lcd.hi2c = hi2c;
 800b7d6:	4a08      	ldr	r2, [pc, #32]	@ (800b7f8 <LCD2004_Init+0x30>)
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	6013      	str	r3, [r2, #0]
  lcd.address = address; //0x4E（0x27 << 1）
 800b7dc:	4a06      	ldr	r2, [pc, #24]	@ (800b7f8 <LCD2004_Init+0x30>)
 800b7de:	7afb      	ldrb	r3, [r7, #11]
 800b7e0:	7113      	strb	r3, [r2, #4]
  lcd_init(&lcd);
 800b7e2:	4805      	ldr	r0, [pc, #20]	@ (800b7f8 <LCD2004_Init+0x30>)
 800b7e4:	f7ff ff82 	bl	800b6ec <lcd_init>
  lcd_huart = haurt;
 800b7e8:	4a04      	ldr	r2, [pc, #16]	@ (800b7fc <LCD2004_Init+0x34>)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6013      	str	r3, [r2, #0]
}
 800b7ee:	bf00      	nop
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20013638 	.word	0x20013638
 800b7fc:	20013640 	.word	0x20013640

0800b800 <LCD2004_OS_Resources_Init>:

void LCD2004_OS_Resources_Init()
{
 800b800:	b580      	push	{r7, lr}
 800b802:	af00      	add	r7, sp, #0
  xLCDQueue = xQueueCreate(4, sizeof(LCDMsgStruct));
 800b804:	2200      	movs	r2, #0
 800b806:	2122      	movs	r1, #34	@ 0x22
 800b808:	2004      	movs	r0, #4
 800b80a:	f7fd fa1d 	bl	8008c48 <xQueueGenericCreate>
 800b80e:	4603      	mov	r3, r0
 800b810:	4a04      	ldr	r2, [pc, #16]	@ (800b824 <LCD2004_OS_Resources_Init+0x24>)
 800b812:	6013      	str	r3, [r2, #0]
  xLCDMutex = xSemaphoreCreateMutex();
 800b814:	2001      	movs	r0, #1
 800b816:	f7fd fa91 	bl	8008d3c <xQueueCreateMutex>
 800b81a:	4603      	mov	r3, r0
 800b81c:	4a02      	ldr	r2, [pc, #8]	@ (800b828 <LCD2004_OS_Resources_Init+0x28>)
 800b81e:	6013      	str	r3, [r2, #0]
}
 800b820:	bf00      	nop
 800b822:	bd80      	pop	{r7, pc}
 800b824:	20013630 	.word	0x20013630
 800b828:	20013634 	.word	0x20013634

0800b82c <LCD_ClearLine>:

void LCD_ClearLine(uint8_t row)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	4603      	mov	r3, r0
 800b834:	71fb      	strb	r3, [r7, #7]
    lcd_gotoxy(&lcd, 0, row);
 800b836:	79fb      	ldrb	r3, [r7, #7]
 800b838:	461a      	mov	r2, r3
 800b83a:	2100      	movs	r1, #0
 800b83c:	480a      	ldr	r0, [pc, #40]	@ (800b868 <LCD_ClearLine+0x3c>)
 800b83e:	f7ff ff23 	bl	800b688 <lcd_gotoxy>
    for (int i = 0; i < 20; i++) {
 800b842:	2300      	movs	r3, #0
 800b844:	60fb      	str	r3, [r7, #12]
 800b846:	e006      	b.n	800b856 <LCD_ClearLine+0x2a>
        lcd_putchar(&lcd, ' ');
 800b848:	2120      	movs	r1, #32
 800b84a:	4807      	ldr	r0, [pc, #28]	@ (800b868 <LCD_ClearLine+0x3c>)
 800b84c:	f7ff ffac 	bl	800b7a8 <lcd_putchar>
    for (int i = 0; i < 20; i++) {
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	3301      	adds	r3, #1
 800b854:	60fb      	str	r3, [r7, #12]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2b13      	cmp	r3, #19
 800b85a:	ddf5      	ble.n	800b848 <LCD_ClearLine+0x1c>
    }
}
 800b85c:	bf00      	nop
 800b85e:	bf00      	nop
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	20013638 	.word	0x20013638

0800b86c <SetLCDCommandStatus>:

void SetLCDCommandStatus(char* str)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b0aa      	sub	sp, #168	@ 0xa8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
	LCD_ClearLine(0);
 800b874:	2000      	movs	r0, #0
 800b876:	f7ff ffd9 	bl	800b82c <LCD_ClearLine>
	LCD_ClearLine(1);
 800b87a:	2001      	movs	r0, #1
 800b87c:	f7ff ffd6 	bl	800b82c <LCD_ClearLine>
	LCD_ClearLine(3);
 800b880:	2003      	movs	r0, #3
 800b882:	f7ff ffd3 	bl	800b82c <LCD_ClearLine>

	LCDMsgStruct commandMsg;
	commandMsg.row = 0;
 800b886:	2300      	movs	r3, #0
 800b888:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
	commandMsg.col = 0;
 800b88c:	2300      	movs	r3, #0
 800b88e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
	char buf[50];
	sprintf(buf, "Command : %s", str);
 800b892:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	4936      	ldr	r1, [pc, #216]	@ (800b974 <SetLCDCommandStatus+0x108>)
 800b89a:	4618      	mov	r0, r3
 800b89c:	f004 f958 	bl	800fb50 <siprintf>
	strncpy(commandMsg.msg, buf, sizeof(commandMsg.msg)-1);
 800b8a0:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800b8a4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800b8a8:	3302      	adds	r3, #2
 800b8aa:	221f      	movs	r2, #31
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f004 fa27 	bl	800fd00 <strncpy>
	commandMsg.msg[sizeof(commandMsg.msg)-1] = '\0';
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5

	if (xQueueSend(xLCDQueue, &commandMsg, 0) != pdPASS) {
 800b8b8:	4b2f      	ldr	r3, [pc, #188]	@ (800b978 <SetLCDCommandStatus+0x10c>)
 800b8ba:	6818      	ldr	r0, [r3, #0]
 800b8bc:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f7fd fa52 	bl	8008d6c <xQueueGenericSend>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d005      	beq.n	800b8da <SetLCDCommandStatus+0x6e>
		SendMsg(lcd_huart, "\r\nLCDShowMsg: Queue full or error.\r\n");
 800b8ce:	4b2b      	ldr	r3, [pc, #172]	@ (800b97c <SetLCDCommandStatus+0x110>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	492b      	ldr	r1, [pc, #172]	@ (800b980 <SetLCDCommandStatus+0x114>)
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7f5 fb6d 	bl	8000fb4 <SendMsg>
	}

	LCDMsgStruct statusMSg;
	statusMSg.row = 1;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	statusMSg.col = 0;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	strncpy(statusMSg.msg, "Status : Success", sizeof(statusMSg.msg)-1);
 800b8e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b8ea:	3302      	adds	r3, #2
 800b8ec:	221f      	movs	r2, #31
 800b8ee:	4925      	ldr	r1, [pc, #148]	@ (800b984 <SetLCDCommandStatus+0x118>)
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f004 fa05 	bl	800fd00 <strncpy>
	statusMSg.msg[sizeof(statusMSg.msg)-1] = '\0';
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

	if (xQueueSend(xLCDQueue, &statusMSg, 0) != pdPASS) {
 800b8fc:	4b1e      	ldr	r3, [pc, #120]	@ (800b978 <SetLCDCommandStatus+0x10c>)
 800b8fe:	6818      	ldr	r0, [r3, #0]
 800b900:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800b904:	2300      	movs	r3, #0
 800b906:	2200      	movs	r2, #0
 800b908:	f7fd fa30 	bl	8008d6c <xQueueGenericSend>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d005      	beq.n	800b91e <SetLCDCommandStatus+0xb2>
		SendMsg(lcd_huart, "\r\nLCDShowMsg: Queue full or error.\r\n");
 800b912:	4b1a      	ldr	r3, [pc, #104]	@ (800b97c <SetLCDCommandStatus+0x110>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	491a      	ldr	r1, [pc, #104]	@ (800b980 <SetLCDCommandStatus+0x114>)
 800b918:	4618      	mov	r0, r3
 800b91a:	f7f5 fb4b 	bl	8000fb4 <SendMsg>
	}



	LCDMsgStruct timeMSg;
	timeMSg.row = 3;
 800b91e:	2303      	movs	r3, #3
 800b920:	723b      	strb	r3, [r7, #8]
	timeMSg.col = 0;
 800b922:	2300      	movs	r3, #0
 800b924:	727b      	strb	r3, [r7, #9]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800b926:	2200      	movs	r2, #0
 800b928:	4917      	ldr	r1, [pc, #92]	@ (800b988 <SetLCDCommandStatus+0x11c>)
 800b92a:	4818      	ldr	r0, [pc, #96]	@ (800b98c <SetLCDCommandStatus+0x120>)
 800b92c:	f7f9 f8cb 	bl	8004ac6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800b930:	2200      	movs	r2, #0
 800b932:	4917      	ldr	r1, [pc, #92]	@ (800b990 <SetLCDCommandStatus+0x124>)
 800b934:	4815      	ldr	r0, [pc, #84]	@ (800b98c <SetLCDCommandStatus+0x120>)
 800b936:	f7f9 f9a8 	bl	8004c8a <HAL_RTC_GetDate>
	getCurrentTime(timeMSg.msg, sizeof(timeMSg.msg));
 800b93a:	f107 0308 	add.w	r3, r7, #8
 800b93e:	3302      	adds	r3, #2
 800b940:	2120      	movs	r1, #32
 800b942:	4618      	mov	r0, r3
 800b944:	f003 fee4 	bl	800f710 <getCurrentTime>

	if (xQueueSend(xLCDQueue, &timeMSg, 0) != pdPASS) {
 800b948:	4b0b      	ldr	r3, [pc, #44]	@ (800b978 <SetLCDCommandStatus+0x10c>)
 800b94a:	6818      	ldr	r0, [r3, #0]
 800b94c:	f107 0108 	add.w	r1, r7, #8
 800b950:	2300      	movs	r3, #0
 800b952:	2200      	movs	r2, #0
 800b954:	f7fd fa0a 	bl	8008d6c <xQueueGenericSend>
 800b958:	4603      	mov	r3, r0
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d005      	beq.n	800b96a <SetLCDCommandStatus+0xfe>
		SendMsg(lcd_huart, "\r\nLCDShowMsg: Queue full or error.\r\n");
 800b95e:	4b07      	ldr	r3, [pc, #28]	@ (800b97c <SetLCDCommandStatus+0x110>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4907      	ldr	r1, [pc, #28]	@ (800b980 <SetLCDCommandStatus+0x114>)
 800b964:	4618      	mov	r0, r3
 800b966:	f7f5 fb25 	bl	8000fb4 <SendMsg>
	}
}
 800b96a:	bf00      	nop
 800b96c:	37a8      	adds	r7, #168	@ 0xa8
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	080117e8 	.word	0x080117e8
 800b978:	20013630 	.word	0x20013630
 800b97c:	20013640 	.word	0x20013640
 800b980:	080117f8 	.word	0x080117f8
 800b984:	08011820 	.word	0x08011820
 800b988:	20014120 	.word	0x20014120
 800b98c:	20000354 	.word	0x20000354
 800b990:	20014134 	.word	0x20014134

0800b994 <LCDHandler>:

void LCDHandler(void *pvParameters)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b08c      	sub	sp, #48	@ 0x30
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  LCDMsgStruct lcdMsg;
  while (1)
  {
      if (xQueueReceive(xLCDQueue, &lcdMsg, portMAX_DELAY) == pdPASS) {
 800b99c:	4b0f      	ldr	r3, [pc, #60]	@ (800b9dc <LCDHandler+0x48>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f107 010c 	add.w	r1, r7, #12
 800b9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7fd fb7d 	bl	80090a8 <xQueueReceive>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d10d      	bne.n	800b9d0 <LCDHandler+0x3c>
//          }
//
//          xSemaphoreGive(xLCDMutex);
//	    }
    	  //SendMsg(&huart2, "\n\r LCDReceiveHandler : %d %d %s\n\r", lcdMsg.row, lcdMsg.col, lcdMsg.msg);
          lcd_gotoxy(&lcd, lcdMsg.col, lcdMsg.row);
 800b9b4:	7b7b      	ldrb	r3, [r7, #13]
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	7b3b      	ldrb	r3, [r7, #12]
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	4808      	ldr	r0, [pc, #32]	@ (800b9e0 <LCDHandler+0x4c>)
 800b9be:	f7ff fe63 	bl	800b688 <lcd_gotoxy>
          lcd_puts(&lcd, lcdMsg.msg);
 800b9c2:	f107 030c 	add.w	r3, r7, #12
 800b9c6:	3302      	adds	r3, #2
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	4805      	ldr	r0, [pc, #20]	@ (800b9e0 <LCDHandler+0x4c>)
 800b9cc:	f7ff fed5 	bl	800b77a <lcd_puts>
      }
      vTaskDelay(pdMS_TO_TICKS(500));
 800b9d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b9d4:	f7fe f820 	bl	8009a18 <vTaskDelay>
      if (xQueueReceive(xLCDQueue, &lcdMsg, portMAX_DELAY) == pdPASS) {
 800b9d8:	e7e0      	b.n	800b99c <LCDHandler+0x8>
 800b9da:	bf00      	nop
 800b9dc:	20013630 	.word	0x20013630
 800b9e0:	20013638 	.word	0x20013638

0800b9e4 <LED_Init>:
extern TIM_HandleTypeDef htim4;
QueueHandle_t xLEDQueue;
SemaphoreHandle_t xLEDMutex;

void LED_Init()
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	4806      	ldr	r0, [pc, #24]	@ (800ba04 <LED_Init+0x20>)
 800b9ec:	f7f9 ffc6 	bl	800597c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800b9f0:	2108      	movs	r1, #8
 800b9f2:	4804      	ldr	r0, [pc, #16]	@ (800ba04 <LED_Init+0x20>)
 800b9f4:	f7f9 ffc2 	bl	800597c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800b9f8:	210c      	movs	r1, #12
 800b9fa:	4802      	ldr	r0, [pc, #8]	@ (800ba04 <LED_Init+0x20>)
 800b9fc:	f7f9 ffbe 	bl	800597c <HAL_TIM_PWM_Start>
}
 800ba00:	bf00      	nop
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	20000424 	.word	0x20000424

0800ba08 <LED_OS_Resources_Init>:

void LED_OS_Resources_Init()
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	af00      	add	r7, sp, #0
	xLEDQueue = xQueueCreate(4, sizeof(LEDMsgStruct));
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	210c      	movs	r1, #12
 800ba10:	2004      	movs	r0, #4
 800ba12:	f7fd f919 	bl	8008c48 <xQueueGenericCreate>
 800ba16:	4603      	mov	r3, r0
 800ba18:	4a04      	ldr	r2, [pc, #16]	@ (800ba2c <LED_OS_Resources_Init+0x24>)
 800ba1a:	6013      	str	r3, [r2, #0]
	xLEDMutex = xSemaphoreCreateMutex();
 800ba1c:	2001      	movs	r0, #1
 800ba1e:	f7fd f98d 	bl	8008d3c <xQueueCreateMutex>
 800ba22:	4603      	mov	r3, r0
 800ba24:	4a02      	ldr	r2, [pc, #8]	@ (800ba30 <LED_OS_Resources_Init+0x28>)
 800ba26:	6013      	str	r3, [r2, #0]
}
 800ba28:	bf00      	nop
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	20013644 	.word	0x20013644
 800ba30:	20013648 	.word	0x20013648

0800ba34 <setColor>:

void setColor(uint8_t r, uint8_t g, uint8_t b) {
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	71fb      	strb	r3, [r7, #7]
 800ba3e:	460b      	mov	r3, r1
 800ba40:	71bb      	strb	r3, [r7, #6]
 800ba42:	4613      	mov	r3, r2
 800ba44:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, r);
 800ba46:	4b09      	ldr	r3, [pc, #36]	@ (800ba6c <setColor+0x38>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	79fa      	ldrb	r2, [r7, #7]
 800ba4c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, g);
 800ba4e:	4b07      	ldr	r3, [pc, #28]	@ (800ba6c <setColor+0x38>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	79ba      	ldrb	r2, [r7, #6]
 800ba54:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, b);
 800ba56:	4b05      	ldr	r3, [pc, #20]	@ (800ba6c <setColor+0x38>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	797a      	ldrb	r2, [r7, #5]
 800ba5c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800ba5e:	bf00      	nop
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	20000424 	.word	0x20000424

0800ba70 <LEDHandler>:

bool auto_mode = false;
void LEDHandler()
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
	LEDMsgStruct LEDMsg;
	while(1)
	{
		if (xQueueReceive(xLEDQueue, &LEDMsg, portMAX_DELAY) == pdPASS) {
 800ba76:	4b1d      	ldr	r3, [pc, #116]	@ (800baec <LEDHandler+0x7c>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	1d39      	adds	r1, r7, #4
 800ba7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fd fb11 	bl	80090a8 <xQueueReceive>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d129      	bne.n	800bae0 <LEDHandler+0x70>
			if(LEDMsg.r < 0 || LEDMsg.g < 0 || LEDMsg.b < 0) {
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	db05      	blt.n	800ba9e <LEDHandler+0x2e>
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	db02      	blt.n	800ba9e <LEDHandler+0x2e>
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	da03      	bge.n	800baa6 <LEDHandler+0x36>
				auto_mode = true;
 800ba9e:	4b14      	ldr	r3, [pc, #80]	@ (800baf0 <LEDHandler+0x80>)
 800baa0:	2201      	movs	r2, #1
 800baa2:	701a      	strb	r2, [r3, #0]
 800baa4:	e01c      	b.n	800bae0 <LEDHandler+0x70>
			}
			else {
				auto_mode = false;
 800baa6:	4b12      	ldr	r3, [pc, #72]	@ (800baf0 <LEDHandler+0x80>)
 800baa8:	2200      	movs	r2, #0
 800baaa:	701a      	strb	r2, [r3, #0]
				if (xSemaphoreTake(xLEDMutex, portMAX_DELAY) == pdPASS) {
 800baac:	4b11      	ldr	r3, [pc, #68]	@ (800baf4 <LEDHandler+0x84>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f04f 31ff 	mov.w	r1, #4294967295
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7fd fbd9 	bl	800926c <xQueueSemaphoreTake>
 800baba:	4603      	mov	r3, r0
 800babc:	2b01      	cmp	r3, #1
 800babe:	d10f      	bne.n	800bae0 <LEDHandler+0x70>
					setColor(LEDMsg.r, LEDMsg.g, LEDMsg.b);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	68ba      	ldr	r2, [r7, #8]
 800bac6:	b2d1      	uxtb	r1, r2
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	b2d2      	uxtb	r2, r2
 800bacc:	4618      	mov	r0, r3
 800bace:	f7ff ffb1 	bl	800ba34 <setColor>
					xSemaphoreGive(xLEDMutex);
 800bad2:	4b08      	ldr	r3, [pc, #32]	@ (800baf4 <LEDHandler+0x84>)
 800bad4:	6818      	ldr	r0, [r3, #0]
 800bad6:	2300      	movs	r3, #0
 800bad8:	2200      	movs	r2, #0
 800bada:	2100      	movs	r1, #0
 800badc:	f7fd f946 	bl	8008d6c <xQueueGenericSend>
				}

			}
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 800bae0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bae4:	f7fd ff98 	bl	8009a18 <vTaskDelay>
		if (xQueueReceive(xLEDQueue, &LEDMsg, portMAX_DELAY) == pdPASS) {
 800bae8:	e7c5      	b.n	800ba76 <LEDHandler+0x6>
 800baea:	bf00      	nop
 800baec:	20013644 	.word	0x20013644
 800baf0:	2001364c 	.word	0x2001364c
 800baf4:	20013648 	.word	0x20013648

0800baf8 <LEDTask>:
	}
}

void LEDTask()
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	af00      	add	r7, sp, #0
	setColor(100, 100, 100);
 800bafc:	2264      	movs	r2, #100	@ 0x64
 800bafe:	2164      	movs	r1, #100	@ 0x64
 800bb00:	2064      	movs	r0, #100	@ 0x64
 800bb02:	f7ff ff97 	bl	800ba34 <setColor>
	while(1)
	{
		if (xSemaphoreTake(xLEDMutex, portMAX_DELAY) == pdPASS) {
 800bb06:	4b29      	ldr	r3, [pc, #164]	@ (800bbac <LEDTask+0xb4>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f04f 31ff 	mov.w	r1, #4294967295
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7fd fbac 	bl	800926c <xQueueSemaphoreTake>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d142      	bne.n	800bba0 <LEDTask+0xa8>
			if(auto_mode) {
 800bb1a:	4b25      	ldr	r3, [pc, #148]	@ (800bbb0 <LEDTask+0xb8>)
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d037      	beq.n	800bb92 <LEDTask+0x9a>
				setColor(255, 0, 0);     // 紅
 800bb22:	2200      	movs	r2, #0
 800bb24:	2100      	movs	r1, #0
 800bb26:	20ff      	movs	r0, #255	@ 0xff
 800bb28:	f7ff ff84 	bl	800ba34 <setColor>
				HAL_Delay(100);
 800bb2c:	2064      	movs	r0, #100	@ 0x64
 800bb2e:	f7f6 f8a5 	bl	8001c7c <HAL_Delay>
				setColor(255, 165, 0);   // 橙
 800bb32:	2200      	movs	r2, #0
 800bb34:	21a5      	movs	r1, #165	@ 0xa5
 800bb36:	20ff      	movs	r0, #255	@ 0xff
 800bb38:	f7ff ff7c 	bl	800ba34 <setColor>
				HAL_Delay(100);
 800bb3c:	2064      	movs	r0, #100	@ 0x64
 800bb3e:	f7f6 f89d 	bl	8001c7c <HAL_Delay>
				setColor(255, 255, 0);   // 黃
 800bb42:	2200      	movs	r2, #0
 800bb44:	21ff      	movs	r1, #255	@ 0xff
 800bb46:	20ff      	movs	r0, #255	@ 0xff
 800bb48:	f7ff ff74 	bl	800ba34 <setColor>
				HAL_Delay(100);
 800bb4c:	2064      	movs	r0, #100	@ 0x64
 800bb4e:	f7f6 f895 	bl	8001c7c <HAL_Delay>
				setColor(0, 255, 0);     // 綠
 800bb52:	2200      	movs	r2, #0
 800bb54:	21ff      	movs	r1, #255	@ 0xff
 800bb56:	2000      	movs	r0, #0
 800bb58:	f7ff ff6c 	bl	800ba34 <setColor>
				HAL_Delay(100);
 800bb5c:	2064      	movs	r0, #100	@ 0x64
 800bb5e:	f7f6 f88d 	bl	8001c7c <HAL_Delay>
				setColor(0, 127, 255);     // 藍
 800bb62:	22ff      	movs	r2, #255	@ 0xff
 800bb64:	217f      	movs	r1, #127	@ 0x7f
 800bb66:	2000      	movs	r0, #0
 800bb68:	f7ff ff64 	bl	800ba34 <setColor>
				HAL_Delay(100);
 800bb6c:	2064      	movs	r0, #100	@ 0x64
 800bb6e:	f7f6 f885 	bl	8001c7c <HAL_Delay>
				setColor(0, 0, 255);    // 靛
 800bb72:	22ff      	movs	r2, #255	@ 0xff
 800bb74:	2100      	movs	r1, #0
 800bb76:	2000      	movs	r0, #0
 800bb78:	f7ff ff5c 	bl	800ba34 <setColor>
				HAL_Delay(100);
 800bb7c:	2064      	movs	r0, #100	@ 0x64
 800bb7e:	f7f6 f87d 	bl	8001c7c <HAL_Delay>
				setColor(50, 0, 255);   // 紫
 800bb82:	22ff      	movs	r2, #255	@ 0xff
 800bb84:	2100      	movs	r1, #0
 800bb86:	2032      	movs	r0, #50	@ 0x32
 800bb88:	f7ff ff54 	bl	800ba34 <setColor>
				HAL_Delay(100);
 800bb8c:	2064      	movs	r0, #100	@ 0x64
 800bb8e:	f7f6 f875 	bl	8001c7c <HAL_Delay>
			}
			xSemaphoreGive(xLEDMutex);
 800bb92:	4b06      	ldr	r3, [pc, #24]	@ (800bbac <LEDTask+0xb4>)
 800bb94:	6818      	ldr	r0, [r3, #0]
 800bb96:	2300      	movs	r3, #0
 800bb98:	2200      	movs	r2, #0
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	f7fd f8e6 	bl	8008d6c <xQueueGenericSend>
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 800bba0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bba4:	f7fd ff38 	bl	8009a18 <vTaskDelay>
		if (xSemaphoreTake(xLEDMutex, portMAX_DELAY) == pdPASS) {
 800bba8:	e7ad      	b.n	800bb06 <LEDTask+0xe>
 800bbaa:	bf00      	nop
 800bbac:	20013648 	.word	0x20013648
 800bbb0:	2001364c 	.word	0x2001364c

0800bbb4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	4603      	mov	r3, r0
 800bbbc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bbbe:	79fb      	ldrb	r3, [r7, #7]
 800bbc0:	4a08      	ldr	r2, [pc, #32]	@ (800bbe4 <disk_status+0x30>)
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	4413      	add	r3, r2
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	79fa      	ldrb	r2, [r7, #7]
 800bbcc:	4905      	ldr	r1, [pc, #20]	@ (800bbe4 <disk_status+0x30>)
 800bbce:	440a      	add	r2, r1
 800bbd0:	7a12      	ldrb	r2, [r2, #8]
 800bbd2:	4610      	mov	r0, r2
 800bbd4:	4798      	blx	r3
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3710      	adds	r7, #16
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	20013678 	.word	0x20013678

0800bbe8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	4603      	mov	r3, r0
 800bbf0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bbf6:	79fb      	ldrb	r3, [r7, #7]
 800bbf8:	4a0e      	ldr	r2, [pc, #56]	@ (800bc34 <disk_initialize+0x4c>)
 800bbfa:	5cd3      	ldrb	r3, [r2, r3]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d114      	bne.n	800bc2a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bc00:	79fb      	ldrb	r3, [r7, #7]
 800bc02:	4a0c      	ldr	r2, [pc, #48]	@ (800bc34 <disk_initialize+0x4c>)
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4413      	add	r3, r2
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	79fa      	ldrb	r2, [r7, #7]
 800bc0e:	4909      	ldr	r1, [pc, #36]	@ (800bc34 <disk_initialize+0x4c>)
 800bc10:	440a      	add	r2, r1
 800bc12:	7a12      	ldrb	r2, [r2, #8]
 800bc14:	4610      	mov	r0, r2
 800bc16:	4798      	blx	r3
 800bc18:	4603      	mov	r3, r0
 800bc1a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800bc1c:	7bfb      	ldrb	r3, [r7, #15]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d103      	bne.n	800bc2a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800bc22:	79fb      	ldrb	r3, [r7, #7]
 800bc24:	4a03      	ldr	r2, [pc, #12]	@ (800bc34 <disk_initialize+0x4c>)
 800bc26:	2101      	movs	r1, #1
 800bc28:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800bc2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	20013678 	.word	0x20013678

0800bc38 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bc38:	b590      	push	{r4, r7, lr}
 800bc3a:	b087      	sub	sp, #28
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60b9      	str	r1, [r7, #8]
 800bc40:	607a      	str	r2, [r7, #4]
 800bc42:	603b      	str	r3, [r7, #0]
 800bc44:	4603      	mov	r3, r0
 800bc46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bc48:	7bfb      	ldrb	r3, [r7, #15]
 800bc4a:	4a0a      	ldr	r2, [pc, #40]	@ (800bc74 <disk_read+0x3c>)
 800bc4c:	009b      	lsls	r3, r3, #2
 800bc4e:	4413      	add	r3, r2
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	689c      	ldr	r4, [r3, #8]
 800bc54:	7bfb      	ldrb	r3, [r7, #15]
 800bc56:	4a07      	ldr	r2, [pc, #28]	@ (800bc74 <disk_read+0x3c>)
 800bc58:	4413      	add	r3, r2
 800bc5a:	7a18      	ldrb	r0, [r3, #8]
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	68b9      	ldr	r1, [r7, #8]
 800bc62:	47a0      	blx	r4
 800bc64:	4603      	mov	r3, r0
 800bc66:	75fb      	strb	r3, [r7, #23]
  return res;
 800bc68:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	371c      	adds	r7, #28
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd90      	pop	{r4, r7, pc}
 800bc72:	bf00      	nop
 800bc74:	20013678 	.word	0x20013678

0800bc78 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bc78:	b590      	push	{r4, r7, lr}
 800bc7a:	b087      	sub	sp, #28
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60b9      	str	r1, [r7, #8]
 800bc80:	607a      	str	r2, [r7, #4]
 800bc82:	603b      	str	r3, [r7, #0]
 800bc84:	4603      	mov	r3, r0
 800bc86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bc88:	7bfb      	ldrb	r3, [r7, #15]
 800bc8a:	4a0a      	ldr	r2, [pc, #40]	@ (800bcb4 <disk_write+0x3c>)
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	68dc      	ldr	r4, [r3, #12]
 800bc94:	7bfb      	ldrb	r3, [r7, #15]
 800bc96:	4a07      	ldr	r2, [pc, #28]	@ (800bcb4 <disk_write+0x3c>)
 800bc98:	4413      	add	r3, r2
 800bc9a:	7a18      	ldrb	r0, [r3, #8]
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	68b9      	ldr	r1, [r7, #8]
 800bca2:	47a0      	blx	r4
 800bca4:	4603      	mov	r3, r0
 800bca6:	75fb      	strb	r3, [r7, #23]
  return res;
 800bca8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	371c      	adds	r7, #28
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd90      	pop	{r4, r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	20013678 	.word	0x20013678

0800bcb8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	603a      	str	r2, [r7, #0]
 800bcc2:	71fb      	strb	r3, [r7, #7]
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bcc8:	79fb      	ldrb	r3, [r7, #7]
 800bcca:	4a09      	ldr	r2, [pc, #36]	@ (800bcf0 <disk_ioctl+0x38>)
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4413      	add	r3, r2
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	79fa      	ldrb	r2, [r7, #7]
 800bcd6:	4906      	ldr	r1, [pc, #24]	@ (800bcf0 <disk_ioctl+0x38>)
 800bcd8:	440a      	add	r2, r1
 800bcda:	7a10      	ldrb	r0, [r2, #8]
 800bcdc:	79b9      	ldrb	r1, [r7, #6]
 800bcde:	683a      	ldr	r2, [r7, #0]
 800bce0:	4798      	blx	r3
 800bce2:	4603      	mov	r3, r0
 800bce4:	73fb      	strb	r3, [r7, #15]
  return res;
 800bce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	20013678 	.word	0x20013678

0800bcf4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bd04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bd08:	021b      	lsls	r3, r3, #8
 800bd0a:	b21a      	sxth	r2, r3
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	b21b      	sxth	r3, r3
 800bd12:	4313      	orrs	r3, r2
 800bd14:	b21b      	sxth	r3, r3
 800bd16:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bd18:	89fb      	ldrh	r3, [r7, #14]
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3714      	adds	r7, #20
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr

0800bd26 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bd26:	b480      	push	{r7}
 800bd28:	b085      	sub	sp, #20
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	3303      	adds	r3, #3
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	021b      	lsls	r3, r3, #8
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	3202      	adds	r2, #2
 800bd3e:	7812      	ldrb	r2, [r2, #0]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	021b      	lsls	r3, r3, #8
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	3201      	adds	r2, #1
 800bd4c:	7812      	ldrb	r2, [r2, #0]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	021b      	lsls	r3, r3, #8
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	7812      	ldrb	r2, [r2, #0]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	60fb      	str	r3, [r7, #12]
	return rv;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3714      	adds	r7, #20
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	460b      	mov	r3, r1
 800bd76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	1c5a      	adds	r2, r3, #1
 800bd7c:	607a      	str	r2, [r7, #4]
 800bd7e:	887a      	ldrh	r2, [r7, #2]
 800bd80:	b2d2      	uxtb	r2, r2
 800bd82:	701a      	strb	r2, [r3, #0]
 800bd84:	887b      	ldrh	r3, [r7, #2]
 800bd86:	0a1b      	lsrs	r3, r3, #8
 800bd88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	1c5a      	adds	r2, r3, #1
 800bd8e:	607a      	str	r2, [r7, #4]
 800bd90:	887a      	ldrh	r2, [r7, #2]
 800bd92:	b2d2      	uxtb	r2, r2
 800bd94:	701a      	strb	r2, [r3, #0]
}
 800bd96:	bf00      	nop
 800bd98:	370c      	adds	r7, #12
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bda2:	b480      	push	{r7}
 800bda4:	b083      	sub	sp, #12
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
 800bdaa:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	1c5a      	adds	r2, r3, #1
 800bdb0:	607a      	str	r2, [r7, #4]
 800bdb2:	683a      	ldr	r2, [r7, #0]
 800bdb4:	b2d2      	uxtb	r2, r2
 800bdb6:	701a      	strb	r2, [r3, #0]
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	0a1b      	lsrs	r3, r3, #8
 800bdbc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	1c5a      	adds	r2, r3, #1
 800bdc2:	607a      	str	r2, [r7, #4]
 800bdc4:	683a      	ldr	r2, [r7, #0]
 800bdc6:	b2d2      	uxtb	r2, r2
 800bdc8:	701a      	strb	r2, [r3, #0]
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	0a1b      	lsrs	r3, r3, #8
 800bdce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	1c5a      	adds	r2, r3, #1
 800bdd4:	607a      	str	r2, [r7, #4]
 800bdd6:	683a      	ldr	r2, [r7, #0]
 800bdd8:	b2d2      	uxtb	r2, r2
 800bdda:	701a      	strb	r2, [r3, #0]
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	0a1b      	lsrs	r3, r3, #8
 800bde0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	1c5a      	adds	r2, r3, #1
 800bde6:	607a      	str	r2, [r7, #4]
 800bde8:	683a      	ldr	r2, [r7, #0]
 800bdea:	b2d2      	uxtb	r2, r2
 800bdec:	701a      	strb	r2, [r3, #0]
}
 800bdee:	bf00      	nop
 800bdf0:	370c      	adds	r7, #12
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr

0800bdfa <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bdfa:	b480      	push	{r7}
 800bdfc:	b087      	sub	sp, #28
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	60f8      	str	r0, [r7, #12]
 800be02:	60b9      	str	r1, [r7, #8]
 800be04:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00d      	beq.n	800be30 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800be14:	693a      	ldr	r2, [r7, #16]
 800be16:	1c53      	adds	r3, r2, #1
 800be18:	613b      	str	r3, [r7, #16]
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	1c59      	adds	r1, r3, #1
 800be1e:	6179      	str	r1, [r7, #20]
 800be20:	7812      	ldrb	r2, [r2, #0]
 800be22:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	3b01      	subs	r3, #1
 800be28:	607b      	str	r3, [r7, #4]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d1f1      	bne.n	800be14 <mem_cpy+0x1a>
	}
}
 800be30:	bf00      	nop
 800be32:	371c      	adds	r7, #28
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr

0800be3c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800be3c:	b480      	push	{r7}
 800be3e:	b087      	sub	sp, #28
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	1c5a      	adds	r2, r3, #1
 800be50:	617a      	str	r2, [r7, #20]
 800be52:	68ba      	ldr	r2, [r7, #8]
 800be54:	b2d2      	uxtb	r2, r2
 800be56:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	607b      	str	r3, [r7, #4]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1f3      	bne.n	800be4c <mem_set+0x10>
}
 800be64:	bf00      	nop
 800be66:	bf00      	nop
 800be68:	371c      	adds	r7, #28
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr

0800be72 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800be72:	b480      	push	{r7}
 800be74:	b089      	sub	sp, #36	@ 0x24
 800be76:	af00      	add	r7, sp, #0
 800be78:	60f8      	str	r0, [r7, #12]
 800be7a:	60b9      	str	r1, [r7, #8]
 800be7c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	61fb      	str	r3, [r7, #28]
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800be86:	2300      	movs	r3, #0
 800be88:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	1c5a      	adds	r2, r3, #1
 800be8e:	61fa      	str	r2, [r7, #28]
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	4619      	mov	r1, r3
 800be94:	69bb      	ldr	r3, [r7, #24]
 800be96:	1c5a      	adds	r2, r3, #1
 800be98:	61ba      	str	r2, [r7, #24]
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	1acb      	subs	r3, r1, r3
 800be9e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	3b01      	subs	r3, #1
 800bea4:	607b      	str	r3, [r7, #4]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d002      	beq.n	800beb2 <mem_cmp+0x40>
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d0eb      	beq.n	800be8a <mem_cmp+0x18>

	return r;
 800beb2:	697b      	ldr	r3, [r7, #20]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3724      	adds	r7, #36	@ 0x24
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bec0:	b480      	push	{r7}
 800bec2:	b083      	sub	sp, #12
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800beca:	e002      	b.n	800bed2 <chk_chr+0x12>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	3301      	adds	r3, #1
 800bed0:	607b      	str	r3, [r7, #4]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d005      	beq.n	800bee6 <chk_chr+0x26>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	461a      	mov	r2, r3
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d1f2      	bne.n	800becc <chk_chr+0xc>
	return *str;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	781b      	ldrb	r3, [r3, #0]
}
 800beea:	4618      	mov	r0, r3
 800beec:	370c      	adds	r7, #12
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr
	...

0800bef8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bef8:	b480      	push	{r7}
 800befa:	b085      	sub	sp, #20
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bf02:	2300      	movs	r3, #0
 800bf04:	60bb      	str	r3, [r7, #8]
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	60fb      	str	r3, [r7, #12]
 800bf0a:	e029      	b.n	800bf60 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bf0c:	4a27      	ldr	r2, [pc, #156]	@ (800bfac <chk_lock+0xb4>)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	011b      	lsls	r3, r3, #4
 800bf12:	4413      	add	r3, r2
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d01d      	beq.n	800bf56 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bf1a:	4a24      	ldr	r2, [pc, #144]	@ (800bfac <chk_lock+0xb4>)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	011b      	lsls	r3, r3, #4
 800bf20:	4413      	add	r3, r2
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d116      	bne.n	800bf5a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bf2c:	4a1f      	ldr	r2, [pc, #124]	@ (800bfac <chk_lock+0xb4>)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	011b      	lsls	r3, r3, #4
 800bf32:	4413      	add	r3, r2
 800bf34:	3304      	adds	r3, #4
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d10c      	bne.n	800bf5a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bf40:	4a1a      	ldr	r2, [pc, #104]	@ (800bfac <chk_lock+0xb4>)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	011b      	lsls	r3, r3, #4
 800bf46:	4413      	add	r3, r2
 800bf48:	3308      	adds	r3, #8
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d102      	bne.n	800bf5a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bf54:	e007      	b.n	800bf66 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bf56:	2301      	movs	r3, #1
 800bf58:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	60fb      	str	r3, [r7, #12]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d9d2      	bls.n	800bf0c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2b02      	cmp	r3, #2
 800bf6a:	d109      	bne.n	800bf80 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d102      	bne.n	800bf78 <chk_lock+0x80>
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d101      	bne.n	800bf7c <chk_lock+0x84>
 800bf78:	2300      	movs	r3, #0
 800bf7a:	e010      	b.n	800bf9e <chk_lock+0xa6>
 800bf7c:	2312      	movs	r3, #18
 800bf7e:	e00e      	b.n	800bf9e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d108      	bne.n	800bf98 <chk_lock+0xa0>
 800bf86:	4a09      	ldr	r2, [pc, #36]	@ (800bfac <chk_lock+0xb4>)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	011b      	lsls	r3, r3, #4
 800bf8c:	4413      	add	r3, r2
 800bf8e:	330c      	adds	r3, #12
 800bf90:	881b      	ldrh	r3, [r3, #0]
 800bf92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf96:	d101      	bne.n	800bf9c <chk_lock+0xa4>
 800bf98:	2310      	movs	r3, #16
 800bf9a:	e000      	b.n	800bf9e <chk_lock+0xa6>
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3714      	adds	r7, #20
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	20013658 	.word	0x20013658

0800bfb0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	607b      	str	r3, [r7, #4]
 800bfba:	e002      	b.n	800bfc2 <enq_lock+0x12>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	607b      	str	r3, [r7, #4]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d806      	bhi.n	800bfd6 <enq_lock+0x26>
 800bfc8:	4a09      	ldr	r2, [pc, #36]	@ (800bff0 <enq_lock+0x40>)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	011b      	lsls	r3, r3, #4
 800bfce:	4413      	add	r3, r2
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1f2      	bne.n	800bfbc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2b02      	cmp	r3, #2
 800bfda:	bf14      	ite	ne
 800bfdc:	2301      	movne	r3, #1
 800bfde:	2300      	moveq	r3, #0
 800bfe0:	b2db      	uxtb	r3, r3
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	370c      	adds	r7, #12
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	20013658 	.word	0x20013658

0800bff4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bffe:	2300      	movs	r3, #0
 800c000:	60fb      	str	r3, [r7, #12]
 800c002:	e01f      	b.n	800c044 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c004:	4a41      	ldr	r2, [pc, #260]	@ (800c10c <inc_lock+0x118>)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	011b      	lsls	r3, r3, #4
 800c00a:	4413      	add	r3, r2
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	429a      	cmp	r2, r3
 800c014:	d113      	bne.n	800c03e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c016:	4a3d      	ldr	r2, [pc, #244]	@ (800c10c <inc_lock+0x118>)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	011b      	lsls	r3, r3, #4
 800c01c:	4413      	add	r3, r2
 800c01e:	3304      	adds	r3, #4
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c026:	429a      	cmp	r2, r3
 800c028:	d109      	bne.n	800c03e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c02a:	4a38      	ldr	r2, [pc, #224]	@ (800c10c <inc_lock+0x118>)
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	011b      	lsls	r3, r3, #4
 800c030:	4413      	add	r3, r2
 800c032:	3308      	adds	r3, #8
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d006      	beq.n	800c04c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	3301      	adds	r3, #1
 800c042:	60fb      	str	r3, [r7, #12]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2b01      	cmp	r3, #1
 800c048:	d9dc      	bls.n	800c004 <inc_lock+0x10>
 800c04a:	e000      	b.n	800c04e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c04c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2b02      	cmp	r3, #2
 800c052:	d132      	bne.n	800c0ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c054:	2300      	movs	r3, #0
 800c056:	60fb      	str	r3, [r7, #12]
 800c058:	e002      	b.n	800c060 <inc_lock+0x6c>
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	3301      	adds	r3, #1
 800c05e:	60fb      	str	r3, [r7, #12]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2b01      	cmp	r3, #1
 800c064:	d806      	bhi.n	800c074 <inc_lock+0x80>
 800c066:	4a29      	ldr	r2, [pc, #164]	@ (800c10c <inc_lock+0x118>)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	011b      	lsls	r3, r3, #4
 800c06c:	4413      	add	r3, r2
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1f2      	bne.n	800c05a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2b02      	cmp	r3, #2
 800c078:	d101      	bne.n	800c07e <inc_lock+0x8a>
 800c07a:	2300      	movs	r3, #0
 800c07c:	e040      	b.n	800c100 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681a      	ldr	r2, [r3, #0]
 800c082:	4922      	ldr	r1, [pc, #136]	@ (800c10c <inc_lock+0x118>)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	011b      	lsls	r3, r3, #4
 800c088:	440b      	add	r3, r1
 800c08a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	689a      	ldr	r2, [r3, #8]
 800c090:	491e      	ldr	r1, [pc, #120]	@ (800c10c <inc_lock+0x118>)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	011b      	lsls	r3, r3, #4
 800c096:	440b      	add	r3, r1
 800c098:	3304      	adds	r3, #4
 800c09a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	695a      	ldr	r2, [r3, #20]
 800c0a0:	491a      	ldr	r1, [pc, #104]	@ (800c10c <inc_lock+0x118>)
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	011b      	lsls	r3, r3, #4
 800c0a6:	440b      	add	r3, r1
 800c0a8:	3308      	adds	r3, #8
 800c0aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c0ac:	4a17      	ldr	r2, [pc, #92]	@ (800c10c <inc_lock+0x118>)
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	011b      	lsls	r3, r3, #4
 800c0b2:	4413      	add	r3, r2
 800c0b4:	330c      	adds	r3, #12
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d009      	beq.n	800c0d4 <inc_lock+0xe0>
 800c0c0:	4a12      	ldr	r2, [pc, #72]	@ (800c10c <inc_lock+0x118>)
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	011b      	lsls	r3, r3, #4
 800c0c6:	4413      	add	r3, r2
 800c0c8:	330c      	adds	r3, #12
 800c0ca:	881b      	ldrh	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d001      	beq.n	800c0d4 <inc_lock+0xe0>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	e015      	b.n	800c100 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d108      	bne.n	800c0ec <inc_lock+0xf8>
 800c0da:	4a0c      	ldr	r2, [pc, #48]	@ (800c10c <inc_lock+0x118>)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	011b      	lsls	r3, r3, #4
 800c0e0:	4413      	add	r3, r2
 800c0e2:	330c      	adds	r3, #12
 800c0e4:	881b      	ldrh	r3, [r3, #0]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	b29a      	uxth	r2, r3
 800c0ea:	e001      	b.n	800c0f0 <inc_lock+0xfc>
 800c0ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c0f0:	4906      	ldr	r1, [pc, #24]	@ (800c10c <inc_lock+0x118>)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	011b      	lsls	r3, r3, #4
 800c0f6:	440b      	add	r3, r1
 800c0f8:	330c      	adds	r3, #12
 800c0fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	3301      	adds	r3, #1
}
 800c100:	4618      	mov	r0, r3
 800c102:	3714      	adds	r7, #20
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr
 800c10c:	20013658 	.word	0x20013658

0800c110 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c110:	b480      	push	{r7}
 800c112:	b085      	sub	sp, #20
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	3b01      	subs	r3, #1
 800c11c:	607b      	str	r3, [r7, #4]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2b01      	cmp	r3, #1
 800c122:	d825      	bhi.n	800c170 <dec_lock+0x60>
		n = Files[i].ctr;
 800c124:	4a17      	ldr	r2, [pc, #92]	@ (800c184 <dec_lock+0x74>)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	011b      	lsls	r3, r3, #4
 800c12a:	4413      	add	r3, r2
 800c12c:	330c      	adds	r3, #12
 800c12e:	881b      	ldrh	r3, [r3, #0]
 800c130:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c132:	89fb      	ldrh	r3, [r7, #14]
 800c134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c138:	d101      	bne.n	800c13e <dec_lock+0x2e>
 800c13a:	2300      	movs	r3, #0
 800c13c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c13e:	89fb      	ldrh	r3, [r7, #14]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d002      	beq.n	800c14a <dec_lock+0x3a>
 800c144:	89fb      	ldrh	r3, [r7, #14]
 800c146:	3b01      	subs	r3, #1
 800c148:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c14a:	4a0e      	ldr	r2, [pc, #56]	@ (800c184 <dec_lock+0x74>)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	011b      	lsls	r3, r3, #4
 800c150:	4413      	add	r3, r2
 800c152:	330c      	adds	r3, #12
 800c154:	89fa      	ldrh	r2, [r7, #14]
 800c156:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c158:	89fb      	ldrh	r3, [r7, #14]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d105      	bne.n	800c16a <dec_lock+0x5a>
 800c15e:	4a09      	ldr	r2, [pc, #36]	@ (800c184 <dec_lock+0x74>)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	011b      	lsls	r3, r3, #4
 800c164:	4413      	add	r3, r2
 800c166:	2200      	movs	r2, #0
 800c168:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c16a:	2300      	movs	r3, #0
 800c16c:	737b      	strb	r3, [r7, #13]
 800c16e:	e001      	b.n	800c174 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c170:	2302      	movs	r3, #2
 800c172:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c174:	7b7b      	ldrb	r3, [r7, #13]
}
 800c176:	4618      	mov	r0, r3
 800c178:	3714      	adds	r7, #20
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	20013658 	.word	0x20013658

0800c188 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c190:	2300      	movs	r3, #0
 800c192:	60fb      	str	r3, [r7, #12]
 800c194:	e010      	b.n	800c1b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c196:	4a0d      	ldr	r2, [pc, #52]	@ (800c1cc <clear_lock+0x44>)
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	011b      	lsls	r3, r3, #4
 800c19c:	4413      	add	r3, r2
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d105      	bne.n	800c1b2 <clear_lock+0x2a>
 800c1a6:	4a09      	ldr	r2, [pc, #36]	@ (800c1cc <clear_lock+0x44>)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	011b      	lsls	r3, r3, #4
 800c1ac:	4413      	add	r3, r2
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	60fb      	str	r3, [r7, #12]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d9eb      	bls.n	800c196 <clear_lock+0xe>
	}
}
 800c1be:	bf00      	nop
 800c1c0:	bf00      	nop
 800c1c2:	3714      	adds	r7, #20
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr
 800c1cc:	20013658 	.word	0x20013658

0800c1d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	78db      	ldrb	r3, [r3, #3]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d034      	beq.n	800c24e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	7858      	ldrb	r0, [r3, #1]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	697a      	ldr	r2, [r7, #20]
 800c1f8:	f7ff fd3e 	bl	800bc78 <disk_write>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d002      	beq.n	800c208 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c202:	2301      	movs	r3, #1
 800c204:	73fb      	strb	r3, [r7, #15]
 800c206:	e022      	b.n	800c24e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6a1b      	ldr	r3, [r3, #32]
 800c212:	697a      	ldr	r2, [r7, #20]
 800c214:	1ad2      	subs	r2, r2, r3
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	699b      	ldr	r3, [r3, #24]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d217      	bcs.n	800c24e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	789b      	ldrb	r3, [r3, #2]
 800c222:	613b      	str	r3, [r7, #16]
 800c224:	e010      	b.n	800c248 <sync_window+0x78>
					wsect += fs->fsize;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	699b      	ldr	r3, [r3, #24]
 800c22a:	697a      	ldr	r2, [r7, #20]
 800c22c:	4413      	add	r3, r2
 800c22e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	7858      	ldrb	r0, [r3, #1]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c23a:	2301      	movs	r3, #1
 800c23c:	697a      	ldr	r2, [r7, #20]
 800c23e:	f7ff fd1b 	bl	800bc78 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	3b01      	subs	r3, #1
 800c246:	613b      	str	r3, [r7, #16]
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d8eb      	bhi.n	800c226 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c24e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c250:	4618      	mov	r0, r3
 800c252:	3718      	adds	r7, #24
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c26a:	683a      	ldr	r2, [r7, #0]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d01b      	beq.n	800c2a8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f7ff ffad 	bl	800c1d0 <sync_window>
 800c276:	4603      	mov	r3, r0
 800c278:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c27a:	7bfb      	ldrb	r3, [r7, #15]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d113      	bne.n	800c2a8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	7858      	ldrb	r0, [r3, #1]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c28a:	2301      	movs	r3, #1
 800c28c:	683a      	ldr	r2, [r7, #0]
 800c28e:	f7ff fcd3 	bl	800bc38 <disk_read>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d004      	beq.n	800c2a2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c298:	f04f 33ff 	mov.w	r3, #4294967295
 800c29c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	683a      	ldr	r2, [r7, #0]
 800c2a6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800c2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
	...

0800c2b4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f7ff ff87 	bl	800c1d0 <sync_window>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c2c6:	7bfb      	ldrb	r3, [r7, #15]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d158      	bne.n	800c37e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	2b03      	cmp	r3, #3
 800c2d2:	d148      	bne.n	800c366 <sync_fs+0xb2>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	791b      	ldrb	r3, [r3, #4]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d144      	bne.n	800c366 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	3330      	adds	r3, #48	@ 0x30
 800c2e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7ff fda8 	bl	800be3c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	3330      	adds	r3, #48	@ 0x30
 800c2f0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c2f4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7ff fd37 	bl	800bd6c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	3330      	adds	r3, #48	@ 0x30
 800c302:	4921      	ldr	r1, [pc, #132]	@ (800c388 <sync_fs+0xd4>)
 800c304:	4618      	mov	r0, r3
 800c306:	f7ff fd4c 	bl	800bda2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	3330      	adds	r3, #48	@ 0x30
 800c30e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c312:	491e      	ldr	r1, [pc, #120]	@ (800c38c <sync_fs+0xd8>)
 800c314:	4618      	mov	r0, r3
 800c316:	f7ff fd44 	bl	800bda2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	3330      	adds	r3, #48	@ 0x30
 800c31e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	691b      	ldr	r3, [r3, #16]
 800c326:	4619      	mov	r1, r3
 800c328:	4610      	mov	r0, r2
 800c32a:	f7ff fd3a 	bl	800bda2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	3330      	adds	r3, #48	@ 0x30
 800c332:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	4619      	mov	r1, r3
 800c33c:	4610      	mov	r0, r2
 800c33e:	f7ff fd30 	bl	800bda2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	69db      	ldr	r3, [r3, #28]
 800c346:	1c5a      	adds	r2, r3, #1
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	7858      	ldrb	r0, [r3, #1]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c35a:	2301      	movs	r3, #1
 800c35c:	f7ff fc8c 	bl	800bc78 <disk_write>
			fs->fsi_flag = 0;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	785b      	ldrb	r3, [r3, #1]
 800c36a:	2200      	movs	r2, #0
 800c36c:	2100      	movs	r1, #0
 800c36e:	4618      	mov	r0, r3
 800c370:	f7ff fca2 	bl	800bcb8 <disk_ioctl>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d001      	beq.n	800c37e <sync_fs+0xca>
 800c37a:	2301      	movs	r3, #1
 800c37c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	41615252 	.word	0x41615252
 800c38c:	61417272 	.word	0x61417272

0800c390 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	3b02      	subs	r3, #2
 800c39e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	695b      	ldr	r3, [r3, #20]
 800c3a4:	3b02      	subs	r3, #2
 800c3a6:	683a      	ldr	r2, [r7, #0]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d301      	bcc.n	800c3b0 <clust2sect+0x20>
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	e008      	b.n	800c3c2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	895b      	ldrh	r3, [r3, #10]
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	fb03 f202 	mul.w	r2, r3, r2
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3c0:	4413      	add	r3, r2
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b086      	sub	sp, #24
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d904      	bls.n	800c3ee <get_fat+0x20>
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	695b      	ldr	r3, [r3, #20]
 800c3e8:	683a      	ldr	r2, [r7, #0]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d302      	bcc.n	800c3f4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	617b      	str	r3, [r7, #20]
 800c3f2:	e08e      	b.n	800c512 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3f8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	2b03      	cmp	r3, #3
 800c400:	d061      	beq.n	800c4c6 <get_fat+0xf8>
 800c402:	2b03      	cmp	r3, #3
 800c404:	dc7b      	bgt.n	800c4fe <get_fat+0x130>
 800c406:	2b01      	cmp	r3, #1
 800c408:	d002      	beq.n	800c410 <get_fat+0x42>
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	d041      	beq.n	800c492 <get_fat+0xc4>
 800c40e:	e076      	b.n	800c4fe <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	60fb      	str	r3, [r7, #12]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	085b      	lsrs	r3, r3, #1
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	4413      	add	r3, r2
 800c41c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	6a1a      	ldr	r2, [r3, #32]
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	0a5b      	lsrs	r3, r3, #9
 800c426:	4413      	add	r3, r2
 800c428:	4619      	mov	r1, r3
 800c42a:	6938      	ldr	r0, [r7, #16]
 800c42c:	f7ff ff14 	bl	800c258 <move_window>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d166      	bne.n	800c504 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	1c5a      	adds	r2, r3, #1
 800c43a:	60fa      	str	r2, [r7, #12]
 800c43c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c440:	693a      	ldr	r2, [r7, #16]
 800c442:	4413      	add	r3, r2
 800c444:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c448:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	6a1a      	ldr	r2, [r3, #32]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	0a5b      	lsrs	r3, r3, #9
 800c452:	4413      	add	r3, r2
 800c454:	4619      	mov	r1, r3
 800c456:	6938      	ldr	r0, [r7, #16]
 800c458:	f7ff fefe 	bl	800c258 <move_window>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d152      	bne.n	800c508 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c468:	693a      	ldr	r2, [r7, #16]
 800c46a:	4413      	add	r3, r2
 800c46c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c470:	021b      	lsls	r3, r3, #8
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	4313      	orrs	r3, r2
 800c476:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	f003 0301 	and.w	r3, r3, #1
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d002      	beq.n	800c488 <get_fat+0xba>
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	091b      	lsrs	r3, r3, #4
 800c486:	e002      	b.n	800c48e <get_fat+0xc0>
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c48e:	617b      	str	r3, [r7, #20]
			break;
 800c490:	e03f      	b.n	800c512 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	6a1a      	ldr	r2, [r3, #32]
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	0a1b      	lsrs	r3, r3, #8
 800c49a:	4413      	add	r3, r2
 800c49c:	4619      	mov	r1, r3
 800c49e:	6938      	ldr	r0, [r7, #16]
 800c4a0:	f7ff feda 	bl	800c258 <move_window>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d130      	bne.n	800c50c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	005b      	lsls	r3, r3, #1
 800c4b4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c4b8:	4413      	add	r3, r2
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7ff fc1a 	bl	800bcf4 <ld_word>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	617b      	str	r3, [r7, #20]
			break;
 800c4c4:	e025      	b.n	800c512 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	6a1a      	ldr	r2, [r3, #32]
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	09db      	lsrs	r3, r3, #7
 800c4ce:	4413      	add	r3, r2
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	6938      	ldr	r0, [r7, #16]
 800c4d4:	f7ff fec0 	bl	800c258 <move_window>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d118      	bne.n	800c510 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c4ec:	4413      	add	r3, r2
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7ff fc19 	bl	800bd26 <ld_dword>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c4fa:	617b      	str	r3, [r7, #20]
			break;
 800c4fc:	e009      	b.n	800c512 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c4fe:	2301      	movs	r3, #1
 800c500:	617b      	str	r3, [r7, #20]
 800c502:	e006      	b.n	800c512 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c504:	bf00      	nop
 800c506:	e004      	b.n	800c512 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c508:	bf00      	nop
 800c50a:	e002      	b.n	800c512 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c50c:	bf00      	nop
 800c50e:	e000      	b.n	800c512 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c510:	bf00      	nop
		}
	}

	return val;
 800c512:	697b      	ldr	r3, [r7, #20]
}
 800c514:	4618      	mov	r0, r3
 800c516:	3718      	adds	r7, #24
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c51c:	b590      	push	{r4, r7, lr}
 800c51e:	b089      	sub	sp, #36	@ 0x24
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c528:	2302      	movs	r3, #2
 800c52a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	2b01      	cmp	r3, #1
 800c530:	f240 80d9 	bls.w	800c6e6 <put_fat+0x1ca>
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	695b      	ldr	r3, [r3, #20]
 800c538:	68ba      	ldr	r2, [r7, #8]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	f080 80d3 	bcs.w	800c6e6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	2b03      	cmp	r3, #3
 800c546:	f000 8096 	beq.w	800c676 <put_fat+0x15a>
 800c54a:	2b03      	cmp	r3, #3
 800c54c:	f300 80cb 	bgt.w	800c6e6 <put_fat+0x1ca>
 800c550:	2b01      	cmp	r3, #1
 800c552:	d002      	beq.n	800c55a <put_fat+0x3e>
 800c554:	2b02      	cmp	r3, #2
 800c556:	d06e      	beq.n	800c636 <put_fat+0x11a>
 800c558:	e0c5      	b.n	800c6e6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	61bb      	str	r3, [r7, #24]
 800c55e:	69bb      	ldr	r3, [r7, #24]
 800c560:	085b      	lsrs	r3, r3, #1
 800c562:	69ba      	ldr	r2, [r7, #24]
 800c564:	4413      	add	r3, r2
 800c566:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6a1a      	ldr	r2, [r3, #32]
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	0a5b      	lsrs	r3, r3, #9
 800c570:	4413      	add	r3, r2
 800c572:	4619      	mov	r1, r3
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f7ff fe6f 	bl	800c258 <move_window>
 800c57a:	4603      	mov	r3, r0
 800c57c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c57e:	7ffb      	ldrb	r3, [r7, #31]
 800c580:	2b00      	cmp	r3, #0
 800c582:	f040 80a9 	bne.w	800c6d8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c58c:	69bb      	ldr	r3, [r7, #24]
 800c58e:	1c59      	adds	r1, r3, #1
 800c590:	61b9      	str	r1, [r7, #24]
 800c592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c596:	4413      	add	r3, r2
 800c598:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	f003 0301 	and.w	r3, r3, #1
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00d      	beq.n	800c5c0 <put_fat+0xa4>
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	b25b      	sxtb	r3, r3
 800c5aa:	f003 030f 	and.w	r3, r3, #15
 800c5ae:	b25a      	sxtb	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	b25b      	sxtb	r3, r3
 800c5b4:	011b      	lsls	r3, r3, #4
 800c5b6:	b25b      	sxtb	r3, r3
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	b25b      	sxtb	r3, r3
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	e001      	b.n	800c5c4 <put_fat+0xa8>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	697a      	ldr	r2, [r7, #20]
 800c5c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6a1a      	ldr	r2, [r3, #32]
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	0a5b      	lsrs	r3, r3, #9
 800c5d6:	4413      	add	r3, r2
 800c5d8:	4619      	mov	r1, r3
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	f7ff fe3c 	bl	800c258 <move_window>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c5e4:	7ffb      	ldrb	r3, [r7, #31]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d178      	bne.n	800c6dc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5f6:	4413      	add	r3, r2
 800c5f8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	f003 0301 	and.w	r3, r3, #1
 800c600:	2b00      	cmp	r3, #0
 800c602:	d003      	beq.n	800c60c <put_fat+0xf0>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	091b      	lsrs	r3, r3, #4
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	e00e      	b.n	800c62a <put_fat+0x10e>
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	b25b      	sxtb	r3, r3
 800c612:	f023 030f 	bic.w	r3, r3, #15
 800c616:	b25a      	sxtb	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	0a1b      	lsrs	r3, r3, #8
 800c61c:	b25b      	sxtb	r3, r3
 800c61e:	f003 030f 	and.w	r3, r3, #15
 800c622:	b25b      	sxtb	r3, r3
 800c624:	4313      	orrs	r3, r2
 800c626:	b25b      	sxtb	r3, r3
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	697a      	ldr	r2, [r7, #20]
 800c62c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2201      	movs	r2, #1
 800c632:	70da      	strb	r2, [r3, #3]
			break;
 800c634:	e057      	b.n	800c6e6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6a1a      	ldr	r2, [r3, #32]
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	0a1b      	lsrs	r3, r3, #8
 800c63e:	4413      	add	r3, r2
 800c640:	4619      	mov	r1, r3
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f7ff fe08 	bl	800c258 <move_window>
 800c648:	4603      	mov	r3, r0
 800c64a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c64c:	7ffb      	ldrb	r3, [r7, #31]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d146      	bne.n	800c6e0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	005b      	lsls	r3, r3, #1
 800c65c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c660:	4413      	add	r3, r2
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	b292      	uxth	r2, r2
 800c666:	4611      	mov	r1, r2
 800c668:	4618      	mov	r0, r3
 800c66a:	f7ff fb7f 	bl	800bd6c <st_word>
			fs->wflag = 1;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2201      	movs	r2, #1
 800c672:	70da      	strb	r2, [r3, #3]
			break;
 800c674:	e037      	b.n	800c6e6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6a1a      	ldr	r2, [r3, #32]
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	09db      	lsrs	r3, r3, #7
 800c67e:	4413      	add	r3, r2
 800c680:	4619      	mov	r1, r3
 800c682:	68f8      	ldr	r0, [r7, #12]
 800c684:	f7ff fde8 	bl	800c258 <move_window>
 800c688:	4603      	mov	r3, r0
 800c68a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c68c:	7ffb      	ldrb	r3, [r7, #31]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d128      	bne.n	800c6e4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c6a6:	4413      	add	r3, r2
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7ff fb3c 	bl	800bd26 <ld_dword>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c6b4:	4323      	orrs	r3, r4
 800c6b6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	009b      	lsls	r3, r3, #2
 800c6c2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c6c6:	4413      	add	r3, r2
 800c6c8:	6879      	ldr	r1, [r7, #4]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7ff fb69 	bl	800bda2 <st_dword>
			fs->wflag = 1;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	70da      	strb	r2, [r3, #3]
			break;
 800c6d6:	e006      	b.n	800c6e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c6d8:	bf00      	nop
 800c6da:	e004      	b.n	800c6e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c6dc:	bf00      	nop
 800c6de:	e002      	b.n	800c6e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c6e0:	bf00      	nop
 800c6e2:	e000      	b.n	800c6e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c6e4:	bf00      	nop
		}
	}
	return res;
 800c6e6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3724      	adds	r7, #36	@ 0x24
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd90      	pop	{r4, r7, pc}

0800c6f0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b088      	sub	sp, #32
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	60b9      	str	r1, [r7, #8]
 800c6fa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d904      	bls.n	800c716 <remove_chain+0x26>
 800c70c:	69bb      	ldr	r3, [r7, #24]
 800c70e:	695b      	ldr	r3, [r3, #20]
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	429a      	cmp	r2, r3
 800c714:	d301      	bcc.n	800c71a <remove_chain+0x2a>
 800c716:	2302      	movs	r3, #2
 800c718:	e04b      	b.n	800c7b2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00c      	beq.n	800c73a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c720:	f04f 32ff 	mov.w	r2, #4294967295
 800c724:	6879      	ldr	r1, [r7, #4]
 800c726:	69b8      	ldr	r0, [r7, #24]
 800c728:	f7ff fef8 	bl	800c51c <put_fat>
 800c72c:	4603      	mov	r3, r0
 800c72e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c730:	7ffb      	ldrb	r3, [r7, #31]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d001      	beq.n	800c73a <remove_chain+0x4a>
 800c736:	7ffb      	ldrb	r3, [r7, #31]
 800c738:	e03b      	b.n	800c7b2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c73a:	68b9      	ldr	r1, [r7, #8]
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f7ff fe46 	bl	800c3ce <get_fat>
 800c742:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d031      	beq.n	800c7ae <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d101      	bne.n	800c754 <remove_chain+0x64>
 800c750:	2302      	movs	r3, #2
 800c752:	e02e      	b.n	800c7b2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c75a:	d101      	bne.n	800c760 <remove_chain+0x70>
 800c75c:	2301      	movs	r3, #1
 800c75e:	e028      	b.n	800c7b2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c760:	2200      	movs	r2, #0
 800c762:	68b9      	ldr	r1, [r7, #8]
 800c764:	69b8      	ldr	r0, [r7, #24]
 800c766:	f7ff fed9 	bl	800c51c <put_fat>
 800c76a:	4603      	mov	r3, r0
 800c76c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c76e:	7ffb      	ldrb	r3, [r7, #31]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d001      	beq.n	800c778 <remove_chain+0x88>
 800c774:	7ffb      	ldrb	r3, [r7, #31]
 800c776:	e01c      	b.n	800c7b2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	691a      	ldr	r2, [r3, #16]
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	695b      	ldr	r3, [r3, #20]
 800c780:	3b02      	subs	r3, #2
 800c782:	429a      	cmp	r2, r3
 800c784:	d20b      	bcs.n	800c79e <remove_chain+0xae>
			fs->free_clst++;
 800c786:	69bb      	ldr	r3, [r7, #24]
 800c788:	691b      	ldr	r3, [r3, #16]
 800c78a:	1c5a      	adds	r2, r3, #1
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	791b      	ldrb	r3, [r3, #4]
 800c794:	f043 0301 	orr.w	r3, r3, #1
 800c798:	b2da      	uxtb	r2, r3
 800c79a:	69bb      	ldr	r3, [r7, #24]
 800c79c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c7a2:	69bb      	ldr	r3, [r7, #24]
 800c7a4:	695b      	ldr	r3, [r3, #20]
 800c7a6:	68ba      	ldr	r2, [r7, #8]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d3c6      	bcc.n	800c73a <remove_chain+0x4a>
 800c7ac:	e000      	b.n	800c7b0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c7ae:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c7b0:	2300      	movs	r3, #0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3720      	adds	r7, #32
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b088      	sub	sp, #32
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
 800c7c2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d10d      	bne.n	800c7ec <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	68db      	ldr	r3, [r3, #12]
 800c7d4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d004      	beq.n	800c7e6 <create_chain+0x2c>
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	695b      	ldr	r3, [r3, #20]
 800c7e0:	69ba      	ldr	r2, [r7, #24]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d31b      	bcc.n	800c81e <create_chain+0x64>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	61bb      	str	r3, [r7, #24]
 800c7ea:	e018      	b.n	800c81e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c7ec:	6839      	ldr	r1, [r7, #0]
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f7ff fded 	bl	800c3ce <get_fat>
 800c7f4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d801      	bhi.n	800c800 <create_chain+0x46>
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e070      	b.n	800c8e2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c806:	d101      	bne.n	800c80c <create_chain+0x52>
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	e06a      	b.n	800c8e2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	695b      	ldr	r3, [r3, #20]
 800c810:	68fa      	ldr	r2, [r7, #12]
 800c812:	429a      	cmp	r2, r3
 800c814:	d201      	bcs.n	800c81a <create_chain+0x60>
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	e063      	b.n	800c8e2 <create_chain+0x128>
		scl = clst;
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c81e:	69bb      	ldr	r3, [r7, #24]
 800c820:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	3301      	adds	r3, #1
 800c826:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	695b      	ldr	r3, [r3, #20]
 800c82c:	69fa      	ldr	r2, [r7, #28]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d307      	bcc.n	800c842 <create_chain+0x88>
				ncl = 2;
 800c832:	2302      	movs	r3, #2
 800c834:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c836:	69fa      	ldr	r2, [r7, #28]
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d901      	bls.n	800c842 <create_chain+0x88>
 800c83e:	2300      	movs	r3, #0
 800c840:	e04f      	b.n	800c8e2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c842:	69f9      	ldr	r1, [r7, #28]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f7ff fdc2 	bl	800c3ce <get_fat>
 800c84a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00e      	beq.n	800c870 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2b01      	cmp	r3, #1
 800c856:	d003      	beq.n	800c860 <create_chain+0xa6>
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c85e:	d101      	bne.n	800c864 <create_chain+0xaa>
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	e03e      	b.n	800c8e2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c864:	69fa      	ldr	r2, [r7, #28]
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d1da      	bne.n	800c822 <create_chain+0x68>
 800c86c:	2300      	movs	r3, #0
 800c86e:	e038      	b.n	800c8e2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c870:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c872:	f04f 32ff 	mov.w	r2, #4294967295
 800c876:	69f9      	ldr	r1, [r7, #28]
 800c878:	6938      	ldr	r0, [r7, #16]
 800c87a:	f7ff fe4f 	bl	800c51c <put_fat>
 800c87e:	4603      	mov	r3, r0
 800c880:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c882:	7dfb      	ldrb	r3, [r7, #23]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d109      	bne.n	800c89c <create_chain+0xe2>
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d006      	beq.n	800c89c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c88e:	69fa      	ldr	r2, [r7, #28]
 800c890:	6839      	ldr	r1, [r7, #0]
 800c892:	6938      	ldr	r0, [r7, #16]
 800c894:	f7ff fe42 	bl	800c51c <put_fat>
 800c898:	4603      	mov	r3, r0
 800c89a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c89c:	7dfb      	ldrb	r3, [r7, #23]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d116      	bne.n	800c8d0 <create_chain+0x116>
		fs->last_clst = ncl;
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	69fa      	ldr	r2, [r7, #28]
 800c8a6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	691a      	ldr	r2, [r3, #16]
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	695b      	ldr	r3, [r3, #20]
 800c8b0:	3b02      	subs	r3, #2
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d804      	bhi.n	800c8c0 <create_chain+0x106>
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	691b      	ldr	r3, [r3, #16]
 800c8ba:	1e5a      	subs	r2, r3, #1
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	791b      	ldrb	r3, [r3, #4]
 800c8c4:	f043 0301 	orr.w	r3, r3, #1
 800c8c8:	b2da      	uxtb	r2, r3
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	711a      	strb	r2, [r3, #4]
 800c8ce:	e007      	b.n	800c8e0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c8d0:	7dfb      	ldrb	r3, [r7, #23]
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d102      	bne.n	800c8dc <create_chain+0x122>
 800c8d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8da:	e000      	b.n	800c8de <create_chain+0x124>
 800c8dc:	2301      	movs	r3, #1
 800c8de:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c8e0:	69fb      	ldr	r3, [r7, #28]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3720      	adds	r7, #32
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c8ea:	b480      	push	{r7}
 800c8ec:	b087      	sub	sp, #28
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
 800c8f2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8fe:	3304      	adds	r3, #4
 800c900:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	0a5b      	lsrs	r3, r3, #9
 800c906:	68fa      	ldr	r2, [r7, #12]
 800c908:	8952      	ldrh	r2, [r2, #10]
 800c90a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c90e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	1d1a      	adds	r2, r3, #4
 800c914:	613a      	str	r2, [r7, #16]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d101      	bne.n	800c924 <clmt_clust+0x3a>
 800c920:	2300      	movs	r3, #0
 800c922:	e010      	b.n	800c946 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c924:	697a      	ldr	r2, [r7, #20]
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d307      	bcc.n	800c93c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c92c:	697a      	ldr	r2, [r7, #20]
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	617b      	str	r3, [r7, #20]
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	3304      	adds	r3, #4
 800c938:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c93a:	e7e9      	b.n	800c910 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c93c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	4413      	add	r3, r2
}
 800c946:	4618      	mov	r0, r3
 800c948:	371c      	adds	r7, #28
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr

0800c952 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b086      	sub	sp, #24
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
 800c95a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c968:	d204      	bcs.n	800c974 <dir_sdi+0x22>
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	f003 031f 	and.w	r3, r3, #31
 800c970:	2b00      	cmp	r3, #0
 800c972:	d001      	beq.n	800c978 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c974:	2302      	movs	r3, #2
 800c976:	e063      	b.n	800ca40 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	683a      	ldr	r2, [r7, #0]
 800c97c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d106      	bne.n	800c998 <dir_sdi+0x46>
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	2b02      	cmp	r3, #2
 800c990:	d902      	bls.n	800c998 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c996:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d10c      	bne.n	800c9b8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	095b      	lsrs	r3, r3, #5
 800c9a2:	693a      	ldr	r2, [r7, #16]
 800c9a4:	8912      	ldrh	r2, [r2, #8]
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d301      	bcc.n	800c9ae <dir_sdi+0x5c>
 800c9aa:	2302      	movs	r3, #2
 800c9ac:	e048      	b.n	800ca40 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	61da      	str	r2, [r3, #28]
 800c9b6:	e029      	b.n	800ca0c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	895b      	ldrh	r3, [r3, #10]
 800c9bc:	025b      	lsls	r3, r3, #9
 800c9be:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c9c0:	e019      	b.n	800c9f6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6979      	ldr	r1, [r7, #20]
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7ff fd01 	bl	800c3ce <get_fat>
 800c9cc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9d4:	d101      	bne.n	800c9da <dir_sdi+0x88>
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e032      	b.n	800ca40 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d904      	bls.n	800c9ea <dir_sdi+0x98>
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	695b      	ldr	r3, [r3, #20]
 800c9e4:	697a      	ldr	r2, [r7, #20]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d301      	bcc.n	800c9ee <dir_sdi+0x9c>
 800c9ea:	2302      	movs	r3, #2
 800c9ec:	e028      	b.n	800ca40 <dir_sdi+0xee>
			ofs -= csz;
 800c9ee:	683a      	ldr	r2, [r7, #0]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	1ad3      	subs	r3, r2, r3
 800c9f4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c9f6:	683a      	ldr	r2, [r7, #0]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d2e1      	bcs.n	800c9c2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c9fe:	6979      	ldr	r1, [r7, #20]
 800ca00:	6938      	ldr	r0, [r7, #16]
 800ca02:	f7ff fcc5 	bl	800c390 <clust2sect>
 800ca06:	4602      	mov	r2, r0
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	697a      	ldr	r2, [r7, #20]
 800ca10:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	69db      	ldr	r3, [r3, #28]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d101      	bne.n	800ca1e <dir_sdi+0xcc>
 800ca1a:	2302      	movs	r3, #2
 800ca1c:	e010      	b.n	800ca40 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	69da      	ldr	r2, [r3, #28]
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	0a5b      	lsrs	r3, r3, #9
 800ca26:	441a      	add	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca38:	441a      	add	r2, r3
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ca3e:	2300      	movs	r3, #0
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3718      	adds	r7, #24
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b086      	sub	sp, #24
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	695b      	ldr	r3, [r3, #20]
 800ca5c:	3320      	adds	r3, #32
 800ca5e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	69db      	ldr	r3, [r3, #28]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d003      	beq.n	800ca70 <dir_next+0x28>
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ca6e:	d301      	bcc.n	800ca74 <dir_next+0x2c>
 800ca70:	2304      	movs	r3, #4
 800ca72:	e0aa      	b.n	800cbca <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	f040 8098 	bne.w	800cbb0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	69db      	ldr	r3, [r3, #28]
 800ca84:	1c5a      	adds	r2, r3, #1
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	699b      	ldr	r3, [r3, #24]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d10b      	bne.n	800caaa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	095b      	lsrs	r3, r3, #5
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	8912      	ldrh	r2, [r2, #8]
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	f0c0 8088 	bcc.w	800cbb0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2200      	movs	r2, #0
 800caa4:	61da      	str	r2, [r3, #28]
 800caa6:	2304      	movs	r3, #4
 800caa8:	e08f      	b.n	800cbca <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	0a5b      	lsrs	r3, r3, #9
 800caae:	68fa      	ldr	r2, [r7, #12]
 800cab0:	8952      	ldrh	r2, [r2, #10]
 800cab2:	3a01      	subs	r2, #1
 800cab4:	4013      	ands	r3, r2
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d17a      	bne.n	800cbb0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	699b      	ldr	r3, [r3, #24]
 800cac0:	4619      	mov	r1, r3
 800cac2:	4610      	mov	r0, r2
 800cac4:	f7ff fc83 	bl	800c3ce <get_fat>
 800cac8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d801      	bhi.n	800cad4 <dir_next+0x8c>
 800cad0:	2302      	movs	r3, #2
 800cad2:	e07a      	b.n	800cbca <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cada:	d101      	bne.n	800cae0 <dir_next+0x98>
 800cadc:	2301      	movs	r3, #1
 800cade:	e074      	b.n	800cbca <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	695b      	ldr	r3, [r3, #20]
 800cae4:	697a      	ldr	r2, [r7, #20]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d358      	bcc.n	800cb9c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d104      	bne.n	800cafa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	61da      	str	r2, [r3, #28]
 800caf6:	2304      	movs	r3, #4
 800caf8:	e067      	b.n	800cbca <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	699b      	ldr	r3, [r3, #24]
 800cb00:	4619      	mov	r1, r3
 800cb02:	4610      	mov	r0, r2
 800cb04:	f7ff fe59 	bl	800c7ba <create_chain>
 800cb08:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d101      	bne.n	800cb14 <dir_next+0xcc>
 800cb10:	2307      	movs	r3, #7
 800cb12:	e05a      	b.n	800cbca <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d101      	bne.n	800cb1e <dir_next+0xd6>
 800cb1a:	2302      	movs	r3, #2
 800cb1c:	e055      	b.n	800cbca <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb24:	d101      	bne.n	800cb2a <dir_next+0xe2>
 800cb26:	2301      	movs	r3, #1
 800cb28:	e04f      	b.n	800cbca <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	f7ff fb50 	bl	800c1d0 <sync_window>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d001      	beq.n	800cb3a <dir_next+0xf2>
 800cb36:	2301      	movs	r3, #1
 800cb38:	e047      	b.n	800cbca <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	3330      	adds	r3, #48	@ 0x30
 800cb3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb42:	2100      	movs	r1, #0
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7ff f979 	bl	800be3c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	613b      	str	r3, [r7, #16]
 800cb4e:	6979      	ldr	r1, [r7, #20]
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f7ff fc1d 	bl	800c390 <clust2sect>
 800cb56:	4602      	mov	r2, r0
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cb5c:	e012      	b.n	800cb84 <dir_next+0x13c>
						fs->wflag = 1;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2201      	movs	r2, #1
 800cb62:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	f7ff fb33 	bl	800c1d0 <sync_window>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d001      	beq.n	800cb74 <dir_next+0x12c>
 800cb70:	2301      	movs	r3, #1
 800cb72:	e02a      	b.n	800cbca <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	3301      	adds	r3, #1
 800cb78:	613b      	str	r3, [r7, #16]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb7e:	1c5a      	adds	r2, r3, #1
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	895b      	ldrh	r3, [r3, #10]
 800cb88:	461a      	mov	r2, r3
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d3e6      	bcc.n	800cb5e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	1ad2      	subs	r2, r2, r3
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	697a      	ldr	r2, [r7, #20]
 800cba0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cba2:	6979      	ldr	r1, [r7, #20]
 800cba4:	68f8      	ldr	r0, [r7, #12]
 800cba6:	f7ff fbf3 	bl	800c390 <clust2sect>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	68ba      	ldr	r2, [r7, #8]
 800cbb4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbc2:	441a      	add	r2, r3
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3718      	adds	r7, #24
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b086      	sub	sp, #24
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
 800cbda:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f7ff feb4 	bl	800c952 <dir_sdi>
 800cbea:	4603      	mov	r3, r0
 800cbec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cbee:	7dfb      	ldrb	r3, [r7, #23]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d12b      	bne.n	800cc4c <dir_alloc+0x7a>
		n = 0;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	69db      	ldr	r3, [r3, #28]
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	68f8      	ldr	r0, [r7, #12]
 800cc00:	f7ff fb2a 	bl	800c258 <move_window>
 800cc04:	4603      	mov	r3, r0
 800cc06:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc08:	7dfb      	ldrb	r3, [r7, #23]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d11d      	bne.n	800cc4a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6a1b      	ldr	r3, [r3, #32]
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	2be5      	cmp	r3, #229	@ 0xe5
 800cc16:	d004      	beq.n	800cc22 <dir_alloc+0x50>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6a1b      	ldr	r3, [r3, #32]
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d107      	bne.n	800cc32 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	3301      	adds	r3, #1
 800cc26:	613b      	str	r3, [r7, #16]
 800cc28:	693a      	ldr	r2, [r7, #16]
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d102      	bne.n	800cc36 <dir_alloc+0x64>
 800cc30:	e00c      	b.n	800cc4c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cc32:	2300      	movs	r3, #0
 800cc34:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cc36:	2101      	movs	r1, #1
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f7ff ff05 	bl	800ca48 <dir_next>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cc42:	7dfb      	ldrb	r3, [r7, #23]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d0d7      	beq.n	800cbf8 <dir_alloc+0x26>
 800cc48:	e000      	b.n	800cc4c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cc4a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cc4c:	7dfb      	ldrb	r3, [r7, #23]
 800cc4e:	2b04      	cmp	r3, #4
 800cc50:	d101      	bne.n	800cc56 <dir_alloc+0x84>
 800cc52:	2307      	movs	r3, #7
 800cc54:	75fb      	strb	r3, [r7, #23]
	return res;
 800cc56:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3718      	adds	r7, #24
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	331a      	adds	r3, #26
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7ff f840 	bl	800bcf4 <ld_word>
 800cc74:	4603      	mov	r3, r0
 800cc76:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	2b03      	cmp	r3, #3
 800cc7e:	d109      	bne.n	800cc94 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	3314      	adds	r3, #20
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7ff f835 	bl	800bcf4 <ld_word>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	041b      	lsls	r3, r3, #16
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	4313      	orrs	r3, r2
 800cc92:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cc94:	68fb      	ldr	r3, [r7, #12]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3710      	adds	r7, #16
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b084      	sub	sp, #16
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	60f8      	str	r0, [r7, #12]
 800cca6:	60b9      	str	r1, [r7, #8]
 800cca8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	331a      	adds	r3, #26
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	b292      	uxth	r2, r2
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7ff f859 	bl	800bd6c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	2b03      	cmp	r3, #3
 800ccc0:	d109      	bne.n	800ccd6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	f103 0214 	add.w	r2, r3, #20
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	0c1b      	lsrs	r3, r3, #16
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	4619      	mov	r1, r3
 800ccd0:	4610      	mov	r0, r2
 800ccd2:	f7ff f84b 	bl	800bd6c <st_word>
	}
}
 800ccd6:	bf00      	nop
 800ccd8:	3710      	adds	r7, #16
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b086      	sub	sp, #24
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800cce8:	2304      	movs	r3, #4
 800ccea:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800ccf2:	e03c      	b.n	800cd6e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	69db      	ldr	r3, [r3, #28]
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	6938      	ldr	r0, [r7, #16]
 800ccfc:	f7ff faac 	bl	800c258 <move_window>
 800cd00:	4603      	mov	r3, r0
 800cd02:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cd04:	7dfb      	ldrb	r3, [r7, #23]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d136      	bne.n	800cd78 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6a1b      	ldr	r3, [r3, #32]
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800cd12:	7bfb      	ldrb	r3, [r7, #15]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d102      	bne.n	800cd1e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800cd18:	2304      	movs	r3, #4
 800cd1a:	75fb      	strb	r3, [r7, #23]
 800cd1c:	e031      	b.n	800cd82 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6a1b      	ldr	r3, [r3, #32]
 800cd22:	330b      	adds	r3, #11
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cd2a:	73bb      	strb	r3, [r7, #14]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	7bba      	ldrb	r2, [r7, #14]
 800cd30:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800cd32:	7bfb      	ldrb	r3, [r7, #15]
 800cd34:	2be5      	cmp	r3, #229	@ 0xe5
 800cd36:	d011      	beq.n	800cd5c <dir_read+0x7e>
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
 800cd3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd3c:	d00e      	beq.n	800cd5c <dir_read+0x7e>
 800cd3e:	7bbb      	ldrb	r3, [r7, #14]
 800cd40:	2b0f      	cmp	r3, #15
 800cd42:	d00b      	beq.n	800cd5c <dir_read+0x7e>
 800cd44:	7bbb      	ldrb	r3, [r7, #14]
 800cd46:	f023 0320 	bic.w	r3, r3, #32
 800cd4a:	2b08      	cmp	r3, #8
 800cd4c:	bf0c      	ite	eq
 800cd4e:	2301      	moveq	r3, #1
 800cd50:	2300      	movne	r3, #0
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	461a      	mov	r2, r3
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d00f      	beq.n	800cd7c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f7ff fe72 	bl	800ca48 <dir_next>
 800cd64:	4603      	mov	r3, r0
 800cd66:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cd68:	7dfb      	ldrb	r3, [r7, #23]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d108      	bne.n	800cd80 <dir_read+0xa2>
	while (dp->sect) {
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	69db      	ldr	r3, [r3, #28]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d1be      	bne.n	800ccf4 <dir_read+0x16>
 800cd76:	e004      	b.n	800cd82 <dir_read+0xa4>
		if (res != FR_OK) break;
 800cd78:	bf00      	nop
 800cd7a:	e002      	b.n	800cd82 <dir_read+0xa4>
				break;
 800cd7c:	bf00      	nop
 800cd7e:	e000      	b.n	800cd82 <dir_read+0xa4>
		if (res != FR_OK) break;
 800cd80:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cd82:	7dfb      	ldrb	r3, [r7, #23]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d002      	beq.n	800cd8e <dir_read+0xb0>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	61da      	str	r2, [r3, #28]
	return res;
 800cd8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3718      	adds	r7, #24
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b086      	sub	sp, #24
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cda6:	2100      	movs	r1, #0
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f7ff fdd2 	bl	800c952 <dir_sdi>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cdb2:	7dfb      	ldrb	r3, [r7, #23]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d001      	beq.n	800cdbc <dir_find+0x24>
 800cdb8:	7dfb      	ldrb	r3, [r7, #23]
 800cdba:	e03e      	b.n	800ce3a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	69db      	ldr	r3, [r3, #28]
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	6938      	ldr	r0, [r7, #16]
 800cdc4:	f7ff fa48 	bl	800c258 <move_window>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cdcc:	7dfb      	ldrb	r3, [r7, #23]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d12f      	bne.n	800ce32 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6a1b      	ldr	r3, [r3, #32]
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cdda:	7bfb      	ldrb	r3, [r7, #15]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d102      	bne.n	800cde6 <dir_find+0x4e>
 800cde0:	2304      	movs	r3, #4
 800cde2:	75fb      	strb	r3, [r7, #23]
 800cde4:	e028      	b.n	800ce38 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6a1b      	ldr	r3, [r3, #32]
 800cdea:	330b      	adds	r3, #11
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cdf2:	b2da      	uxtb	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6a1b      	ldr	r3, [r3, #32]
 800cdfc:	330b      	adds	r3, #11
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	f003 0308 	and.w	r3, r3, #8
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d10a      	bne.n	800ce1e <dir_find+0x86>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6a18      	ldr	r0, [r3, #32]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	3324      	adds	r3, #36	@ 0x24
 800ce10:	220b      	movs	r2, #11
 800ce12:	4619      	mov	r1, r3
 800ce14:	f7ff f82d 	bl	800be72 <mem_cmp>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00b      	beq.n	800ce36 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ce1e:	2100      	movs	r1, #0
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f7ff fe11 	bl	800ca48 <dir_next>
 800ce26:	4603      	mov	r3, r0
 800ce28:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ce2a:	7dfb      	ldrb	r3, [r7, #23]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d0c5      	beq.n	800cdbc <dir_find+0x24>
 800ce30:	e002      	b.n	800ce38 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ce32:	bf00      	nop
 800ce34:	e000      	b.n	800ce38 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ce36:	bf00      	nop

	return res;
 800ce38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3718      	adds	r7, #24
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}

0800ce42 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ce42:	b580      	push	{r7, lr}
 800ce44:	b084      	sub	sp, #16
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ce50:	2101      	movs	r1, #1
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f7ff febd 	bl	800cbd2 <dir_alloc>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ce5c:	7bfb      	ldrb	r3, [r7, #15]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d11c      	bne.n	800ce9c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	69db      	ldr	r3, [r3, #28]
 800ce66:	4619      	mov	r1, r3
 800ce68:	68b8      	ldr	r0, [r7, #8]
 800ce6a:	f7ff f9f5 	bl	800c258 <move_window>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ce72:	7bfb      	ldrb	r3, [r7, #15]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d111      	bne.n	800ce9c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6a1b      	ldr	r3, [r3, #32]
 800ce7c:	2220      	movs	r2, #32
 800ce7e:	2100      	movs	r1, #0
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7fe ffdb 	bl	800be3c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6a18      	ldr	r0, [r3, #32]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	3324      	adds	r3, #36	@ 0x24
 800ce8e:	220b      	movs	r2, #11
 800ce90:	4619      	mov	r1, r3
 800ce92:	f7fe ffb2 	bl	800bdfa <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	2201      	movs	r2, #1
 800ce9a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ce9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}

0800cea6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cea6:	b580      	push	{r7, lr}
 800cea8:	b086      	sub	sp, #24
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
 800ceae:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	69db      	ldr	r3, [r3, #28]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d04f      	beq.n	800cf5e <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800cebe:	2300      	movs	r3, #0
 800cec0:	613b      	str	r3, [r7, #16]
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800cec6:	e022      	b.n	800cf0e <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6a1a      	ldr	r2, [r3, #32]
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	1c59      	adds	r1, r3, #1
 800ced0:	6179      	str	r1, [r7, #20]
 800ced2:	4413      	add	r3, r2
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ced8:	7bfb      	ldrb	r3, [r7, #15]
 800ceda:	2b20      	cmp	r3, #32
 800cedc:	d016      	beq.n	800cf0c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cede:	7bfb      	ldrb	r3, [r7, #15]
 800cee0:	2b05      	cmp	r3, #5
 800cee2:	d101      	bne.n	800cee8 <get_fileinfo+0x42>
 800cee4:	23e5      	movs	r3, #229	@ 0xe5
 800cee6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	2b09      	cmp	r3, #9
 800ceec:	d106      	bne.n	800cefc <get_fileinfo+0x56>
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	1c5a      	adds	r2, r3, #1
 800cef2:	613a      	str	r2, [r7, #16]
 800cef4:	683a      	ldr	r2, [r7, #0]
 800cef6:	4413      	add	r3, r2
 800cef8:	222e      	movs	r2, #46	@ 0x2e
 800cefa:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	1c5a      	adds	r2, r3, #1
 800cf00:	613a      	str	r2, [r7, #16]
 800cf02:	683a      	ldr	r2, [r7, #0]
 800cf04:	4413      	add	r3, r2
 800cf06:	7bfa      	ldrb	r2, [r7, #15]
 800cf08:	725a      	strb	r2, [r3, #9]
 800cf0a:	e000      	b.n	800cf0e <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800cf0c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	2b0a      	cmp	r3, #10
 800cf12:	d9d9      	bls.n	800cec8 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800cf14:	683a      	ldr	r2, [r7, #0]
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	4413      	add	r3, r2
 800cf1a:	3309      	adds	r3, #9
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6a1b      	ldr	r3, [r3, #32]
 800cf24:	7ada      	ldrb	r2, [r3, #11]
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6a1b      	ldr	r3, [r3, #32]
 800cf2e:	331c      	adds	r3, #28
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7fe fef8 	bl	800bd26 <ld_dword>
 800cf36:	4602      	mov	r2, r0
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6a1b      	ldr	r3, [r3, #32]
 800cf40:	3316      	adds	r3, #22
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fe feef 	bl	800bd26 <ld_dword>
 800cf48:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	b29a      	uxth	r2, r3
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	80da      	strh	r2, [r3, #6]
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	0c1b      	lsrs	r3, r3, #16
 800cf56:	b29a      	uxth	r2, r3
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	809a      	strh	r2, [r3, #4]
 800cf5c:	e000      	b.n	800cf60 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cf5e:	bf00      	nop
}
 800cf60:	3718      	adds	r7, #24
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
	...

0800cf68 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b088      	sub	sp, #32
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	60fb      	str	r3, [r7, #12]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	3324      	adds	r3, #36	@ 0x24
 800cf7c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cf7e:	220b      	movs	r2, #11
 800cf80:	2120      	movs	r1, #32
 800cf82:	68b8      	ldr	r0, [r7, #8]
 800cf84:	f7fe ff5a 	bl	800be3c <mem_set>
	si = i = 0; ni = 8;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	613b      	str	r3, [r7, #16]
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	61fb      	str	r3, [r7, #28]
 800cf90:	2308      	movs	r3, #8
 800cf92:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	1c5a      	adds	r2, r3, #1
 800cf98:	61fa      	str	r2, [r7, #28]
 800cf9a:	68fa      	ldr	r2, [r7, #12]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cfa2:	7efb      	ldrb	r3, [r7, #27]
 800cfa4:	2b20      	cmp	r3, #32
 800cfa6:	d94e      	bls.n	800d046 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cfa8:	7efb      	ldrb	r3, [r7, #27]
 800cfaa:	2b2f      	cmp	r3, #47	@ 0x2f
 800cfac:	d006      	beq.n	800cfbc <create_name+0x54>
 800cfae:	7efb      	ldrb	r3, [r7, #27]
 800cfb0:	2b5c      	cmp	r3, #92	@ 0x5c
 800cfb2:	d110      	bne.n	800cfd6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cfb4:	e002      	b.n	800cfbc <create_name+0x54>
 800cfb6:	69fb      	ldr	r3, [r7, #28]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	61fb      	str	r3, [r7, #28]
 800cfbc:	68fa      	ldr	r2, [r7, #12]
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	2b2f      	cmp	r3, #47	@ 0x2f
 800cfc6:	d0f6      	beq.n	800cfb6 <create_name+0x4e>
 800cfc8:	68fa      	ldr	r2, [r7, #12]
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	4413      	add	r3, r2
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	2b5c      	cmp	r3, #92	@ 0x5c
 800cfd2:	d0f0      	beq.n	800cfb6 <create_name+0x4e>
			break;
 800cfd4:	e038      	b.n	800d048 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cfd6:	7efb      	ldrb	r3, [r7, #27]
 800cfd8:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfda:	d003      	beq.n	800cfe4 <create_name+0x7c>
 800cfdc:	693a      	ldr	r2, [r7, #16]
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d30c      	bcc.n	800cffe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	2b0b      	cmp	r3, #11
 800cfe8:	d002      	beq.n	800cff0 <create_name+0x88>
 800cfea:	7efb      	ldrb	r3, [r7, #27]
 800cfec:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfee:	d001      	beq.n	800cff4 <create_name+0x8c>
 800cff0:	2306      	movs	r3, #6
 800cff2:	e044      	b.n	800d07e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cff4:	2308      	movs	r3, #8
 800cff6:	613b      	str	r3, [r7, #16]
 800cff8:	230b      	movs	r3, #11
 800cffa:	617b      	str	r3, [r7, #20]
			continue;
 800cffc:	e022      	b.n	800d044 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cffe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d002:	2b00      	cmp	r3, #0
 800d004:	da04      	bge.n	800d010 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d006:	7efb      	ldrb	r3, [r7, #27]
 800d008:	3b80      	subs	r3, #128	@ 0x80
 800d00a:	4a1f      	ldr	r2, [pc, #124]	@ (800d088 <create_name+0x120>)
 800d00c:	5cd3      	ldrb	r3, [r2, r3]
 800d00e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d010:	7efb      	ldrb	r3, [r7, #27]
 800d012:	4619      	mov	r1, r3
 800d014:	481d      	ldr	r0, [pc, #116]	@ (800d08c <create_name+0x124>)
 800d016:	f7fe ff53 	bl	800bec0 <chk_chr>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d001      	beq.n	800d024 <create_name+0xbc>
 800d020:	2306      	movs	r3, #6
 800d022:	e02c      	b.n	800d07e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d024:	7efb      	ldrb	r3, [r7, #27]
 800d026:	2b60      	cmp	r3, #96	@ 0x60
 800d028:	d905      	bls.n	800d036 <create_name+0xce>
 800d02a:	7efb      	ldrb	r3, [r7, #27]
 800d02c:	2b7a      	cmp	r3, #122	@ 0x7a
 800d02e:	d802      	bhi.n	800d036 <create_name+0xce>
 800d030:	7efb      	ldrb	r3, [r7, #27]
 800d032:	3b20      	subs	r3, #32
 800d034:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	1c5a      	adds	r2, r3, #1
 800d03a:	613a      	str	r2, [r7, #16]
 800d03c:	68ba      	ldr	r2, [r7, #8]
 800d03e:	4413      	add	r3, r2
 800d040:	7efa      	ldrb	r2, [r7, #27]
 800d042:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d044:	e7a6      	b.n	800cf94 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d046:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	441a      	add	r2, r3
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d101      	bne.n	800d05c <create_name+0xf4>
 800d058:	2306      	movs	r3, #6
 800d05a:	e010      	b.n	800d07e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	2be5      	cmp	r3, #229	@ 0xe5
 800d062:	d102      	bne.n	800d06a <create_name+0x102>
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	2205      	movs	r2, #5
 800d068:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d06a:	7efb      	ldrb	r3, [r7, #27]
 800d06c:	2b20      	cmp	r3, #32
 800d06e:	d801      	bhi.n	800d074 <create_name+0x10c>
 800d070:	2204      	movs	r2, #4
 800d072:	e000      	b.n	800d076 <create_name+0x10e>
 800d074:	2200      	movs	r2, #0
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	330b      	adds	r3, #11
 800d07a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d07c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3720      	adds	r7, #32
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	08012148 	.word	0x08012148
 800d08c:	08011834 	.word	0x08011834

0800d090 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d0a4:	e002      	b.n	800d0ac <follow_path+0x1c>
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	603b      	str	r3, [r7, #0]
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d0b2:	d0f8      	beq.n	800d0a6 <follow_path+0x16>
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	2b5c      	cmp	r3, #92	@ 0x5c
 800d0ba:	d0f4      	beq.n	800d0a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	2b1f      	cmp	r3, #31
 800d0c8:	d80a      	bhi.n	800d0e0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2280      	movs	r2, #128	@ 0x80
 800d0ce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d0d2:	2100      	movs	r1, #0
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f7ff fc3c 	bl	800c952 <dir_sdi>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	75fb      	strb	r3, [r7, #23]
 800d0de:	e043      	b.n	800d168 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d0e0:	463b      	mov	r3, r7
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f7ff ff3f 	bl	800cf68 <create_name>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d0ee:	7dfb      	ldrb	r3, [r7, #23]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d134      	bne.n	800d15e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f7ff fe4f 	bl	800cd98 <dir_find>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d104:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d106:	7dfb      	ldrb	r3, [r7, #23]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d00a      	beq.n	800d122 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d10c:	7dfb      	ldrb	r3, [r7, #23]
 800d10e:	2b04      	cmp	r3, #4
 800d110:	d127      	bne.n	800d162 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d112:	7afb      	ldrb	r3, [r7, #11]
 800d114:	f003 0304 	and.w	r3, r3, #4
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d122      	bne.n	800d162 <follow_path+0xd2>
 800d11c:	2305      	movs	r3, #5
 800d11e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d120:	e01f      	b.n	800d162 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d122:	7afb      	ldrb	r3, [r7, #11]
 800d124:	f003 0304 	and.w	r3, r3, #4
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d11c      	bne.n	800d166 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	799b      	ldrb	r3, [r3, #6]
 800d130:	f003 0310 	and.w	r3, r3, #16
 800d134:	2b00      	cmp	r3, #0
 800d136:	d102      	bne.n	800d13e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d138:	2305      	movs	r3, #5
 800d13a:	75fb      	strb	r3, [r7, #23]
 800d13c:	e014      	b.n	800d168 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	695b      	ldr	r3, [r3, #20]
 800d148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d14c:	4413      	add	r3, r2
 800d14e:	4619      	mov	r1, r3
 800d150:	68f8      	ldr	r0, [r7, #12]
 800d152:	f7ff fd85 	bl	800cc60 <ld_clust>
 800d156:	4602      	mov	r2, r0
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d15c:	e7c0      	b.n	800d0e0 <follow_path+0x50>
			if (res != FR_OK) break;
 800d15e:	bf00      	nop
 800d160:	e002      	b.n	800d168 <follow_path+0xd8>
				break;
 800d162:	bf00      	nop
 800d164:	e000      	b.n	800d168 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d166:	bf00      	nop
			}
		}
	}

	return res;
 800d168:	7dfb      	ldrb	r3, [r7, #23]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3718      	adds	r7, #24
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}

0800d172 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d172:	b480      	push	{r7}
 800d174:	b087      	sub	sp, #28
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d17a:	f04f 33ff 	mov.w	r3, #4294967295
 800d17e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d031      	beq.n	800d1ec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	617b      	str	r3, [r7, #20]
 800d18e:	e002      	b.n	800d196 <get_ldnumber+0x24>
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	3301      	adds	r3, #1
 800d194:	617b      	str	r3, [r7, #20]
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	2b20      	cmp	r3, #32
 800d19c:	d903      	bls.n	800d1a6 <get_ldnumber+0x34>
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	2b3a      	cmp	r3, #58	@ 0x3a
 800d1a4:	d1f4      	bne.n	800d190 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	2b3a      	cmp	r3, #58	@ 0x3a
 800d1ac:	d11c      	bne.n	800d1e8 <get_ldnumber+0x76>
			tp = *path;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	1c5a      	adds	r2, r3, #1
 800d1b8:	60fa      	str	r2, [r7, #12]
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	3b30      	subs	r3, #48	@ 0x30
 800d1be:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	2b09      	cmp	r3, #9
 800d1c4:	d80e      	bhi.n	800d1e4 <get_ldnumber+0x72>
 800d1c6:	68fa      	ldr	r2, [r7, #12]
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d10a      	bne.n	800d1e4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d107      	bne.n	800d1e4 <get_ldnumber+0x72>
					vol = (int)i;
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	617b      	str	r3, [r7, #20]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	697a      	ldr	r2, [r7, #20]
 800d1e2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	e002      	b.n	800d1ee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d1ec:	693b      	ldr	r3, [r7, #16]
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	371c      	adds	r7, #28
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr
	...

0800d1fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2200      	movs	r2, #0
 800d20a:	70da      	strb	r2, [r3, #3]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f04f 32ff 	mov.w	r2, #4294967295
 800d212:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d214:	6839      	ldr	r1, [r7, #0]
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f7ff f81e 	bl	800c258 <move_window>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d001      	beq.n	800d226 <check_fs+0x2a>
 800d222:	2304      	movs	r3, #4
 800d224:	e038      	b.n	800d298 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	3330      	adds	r3, #48	@ 0x30
 800d22a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d22e:	4618      	mov	r0, r3
 800d230:	f7fe fd60 	bl	800bcf4 <ld_word>
 800d234:	4603      	mov	r3, r0
 800d236:	461a      	mov	r2, r3
 800d238:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d001      	beq.n	800d244 <check_fs+0x48>
 800d240:	2303      	movs	r3, #3
 800d242:	e029      	b.n	800d298 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d24a:	2be9      	cmp	r3, #233	@ 0xe9
 800d24c:	d009      	beq.n	800d262 <check_fs+0x66>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d254:	2beb      	cmp	r3, #235	@ 0xeb
 800d256:	d11e      	bne.n	800d296 <check_fs+0x9a>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d25e:	2b90      	cmp	r3, #144	@ 0x90
 800d260:	d119      	bne.n	800d296 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	3330      	adds	r3, #48	@ 0x30
 800d266:	3336      	adds	r3, #54	@ 0x36
 800d268:	4618      	mov	r0, r3
 800d26a:	f7fe fd5c 	bl	800bd26 <ld_dword>
 800d26e:	4603      	mov	r3, r0
 800d270:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d274:	4a0a      	ldr	r2, [pc, #40]	@ (800d2a0 <check_fs+0xa4>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d101      	bne.n	800d27e <check_fs+0x82>
 800d27a:	2300      	movs	r3, #0
 800d27c:	e00c      	b.n	800d298 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	3330      	adds	r3, #48	@ 0x30
 800d282:	3352      	adds	r3, #82	@ 0x52
 800d284:	4618      	mov	r0, r3
 800d286:	f7fe fd4e 	bl	800bd26 <ld_dword>
 800d28a:	4603      	mov	r3, r0
 800d28c:	4a05      	ldr	r2, [pc, #20]	@ (800d2a4 <check_fs+0xa8>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d101      	bne.n	800d296 <check_fs+0x9a>
 800d292:	2300      	movs	r3, #0
 800d294:	e000      	b.n	800d298 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d296:	2302      	movs	r3, #2
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3708      	adds	r7, #8
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	00544146 	.word	0x00544146
 800d2a4:	33544146 	.word	0x33544146

0800d2a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b096      	sub	sp, #88	@ 0x58
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	60b9      	str	r1, [r7, #8]
 800d2b2:	4613      	mov	r3, r2
 800d2b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d2bc:	68f8      	ldr	r0, [r7, #12]
 800d2be:	f7ff ff58 	bl	800d172 <get_ldnumber>
 800d2c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d2c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	da01      	bge.n	800d2ce <find_volume+0x26>
 800d2ca:	230b      	movs	r3, #11
 800d2cc:	e22d      	b.n	800d72a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d2ce:	4aa1      	ldr	r2, [pc, #644]	@ (800d554 <find_volume+0x2ac>)
 800d2d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2d6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d101      	bne.n	800d2e2 <find_volume+0x3a>
 800d2de:	230c      	movs	r3, #12
 800d2e0:	e223      	b.n	800d72a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d2e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d2e8:	79fb      	ldrb	r3, [r7, #7]
 800d2ea:	f023 0301 	bic.w	r3, r3, #1
 800d2ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d01a      	beq.n	800d32e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2fa:	785b      	ldrb	r3, [r3, #1]
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7fe fc59 	bl	800bbb4 <disk_status>
 800d302:	4603      	mov	r3, r0
 800d304:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d308:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d30c:	f003 0301 	and.w	r3, r3, #1
 800d310:	2b00      	cmp	r3, #0
 800d312:	d10c      	bne.n	800d32e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d314:	79fb      	ldrb	r3, [r7, #7]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d007      	beq.n	800d32a <find_volume+0x82>
 800d31a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d31e:	f003 0304 	and.w	r3, r3, #4
 800d322:	2b00      	cmp	r3, #0
 800d324:	d001      	beq.n	800d32a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d326:	230a      	movs	r3, #10
 800d328:	e1ff      	b.n	800d72a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d32a:	2300      	movs	r3, #0
 800d32c:	e1fd      	b.n	800d72a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d330:	2200      	movs	r2, #0
 800d332:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d336:	b2da      	uxtb	r2, r3
 800d338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d33a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d33e:	785b      	ldrb	r3, [r3, #1]
 800d340:	4618      	mov	r0, r3
 800d342:	f7fe fc51 	bl	800bbe8 <disk_initialize>
 800d346:	4603      	mov	r3, r0
 800d348:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d34c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d350:	f003 0301 	and.w	r3, r3, #1
 800d354:	2b00      	cmp	r3, #0
 800d356:	d001      	beq.n	800d35c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d358:	2303      	movs	r3, #3
 800d35a:	e1e6      	b.n	800d72a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d35c:	79fb      	ldrb	r3, [r7, #7]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d007      	beq.n	800d372 <find_volume+0xca>
 800d362:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d366:	f003 0304 	and.w	r3, r3, #4
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d001      	beq.n	800d372 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d36e:	230a      	movs	r3, #10
 800d370:	e1db      	b.n	800d72a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d372:	2300      	movs	r3, #0
 800d374:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d376:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d378:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d37a:	f7ff ff3f 	bl	800d1fc <check_fs>
 800d37e:	4603      	mov	r3, r0
 800d380:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d384:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d388:	2b02      	cmp	r3, #2
 800d38a:	d149      	bne.n	800d420 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d38c:	2300      	movs	r3, #0
 800d38e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d390:	e01e      	b.n	800d3d0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d394:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d39a:	011b      	lsls	r3, r3, #4
 800d39c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d3a0:	4413      	add	r3, r2
 800d3a2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a6:	3304      	adds	r3, #4
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d006      	beq.n	800d3bc <find_volume+0x114>
 800d3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b0:	3308      	adds	r3, #8
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7fe fcb7 	bl	800bd26 <ld_dword>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	e000      	b.n	800d3be <find_volume+0x116>
 800d3bc:	2200      	movs	r2, #0
 800d3be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3c0:	009b      	lsls	r3, r3, #2
 800d3c2:	3358      	adds	r3, #88	@ 0x58
 800d3c4:	443b      	add	r3, r7
 800d3c6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d3ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800d3d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3d2:	2b03      	cmp	r3, #3
 800d3d4:	d9dd      	bls.n	800d392 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d3da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d002      	beq.n	800d3e6 <find_volume+0x13e>
 800d3e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3e2:	3b01      	subs	r3, #1
 800d3e4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d3e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3e8:	009b      	lsls	r3, r3, #2
 800d3ea:	3358      	adds	r3, #88	@ 0x58
 800d3ec:	443b      	add	r3, r7
 800d3ee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d3f2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d3f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d005      	beq.n	800d406 <find_volume+0x15e>
 800d3fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d3fc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d3fe:	f7ff fefd 	bl	800d1fc <check_fs>
 800d402:	4603      	mov	r3, r0
 800d404:	e000      	b.n	800d408 <find_volume+0x160>
 800d406:	2303      	movs	r3, #3
 800d408:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d40c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d410:	2b01      	cmp	r3, #1
 800d412:	d905      	bls.n	800d420 <find_volume+0x178>
 800d414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d416:	3301      	adds	r3, #1
 800d418:	643b      	str	r3, [r7, #64]	@ 0x40
 800d41a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d41c:	2b03      	cmp	r3, #3
 800d41e:	d9e2      	bls.n	800d3e6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d420:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d424:	2b04      	cmp	r3, #4
 800d426:	d101      	bne.n	800d42c <find_volume+0x184>
 800d428:	2301      	movs	r3, #1
 800d42a:	e17e      	b.n	800d72a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d42c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d430:	2b01      	cmp	r3, #1
 800d432:	d901      	bls.n	800d438 <find_volume+0x190>
 800d434:	230d      	movs	r3, #13
 800d436:	e178      	b.n	800d72a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d43a:	3330      	adds	r3, #48	@ 0x30
 800d43c:	330b      	adds	r3, #11
 800d43e:	4618      	mov	r0, r3
 800d440:	f7fe fc58 	bl	800bcf4 <ld_word>
 800d444:	4603      	mov	r3, r0
 800d446:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d44a:	d001      	beq.n	800d450 <find_volume+0x1a8>
 800d44c:	230d      	movs	r3, #13
 800d44e:	e16c      	b.n	800d72a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d452:	3330      	adds	r3, #48	@ 0x30
 800d454:	3316      	adds	r3, #22
 800d456:	4618      	mov	r0, r3
 800d458:	f7fe fc4c 	bl	800bcf4 <ld_word>
 800d45c:	4603      	mov	r3, r0
 800d45e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d462:	2b00      	cmp	r3, #0
 800d464:	d106      	bne.n	800d474 <find_volume+0x1cc>
 800d466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d468:	3330      	adds	r3, #48	@ 0x30
 800d46a:	3324      	adds	r3, #36	@ 0x24
 800d46c:	4618      	mov	r0, r3
 800d46e:	f7fe fc5a 	bl	800bd26 <ld_dword>
 800d472:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d476:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d478:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800d480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d482:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d486:	789b      	ldrb	r3, [r3, #2]
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d005      	beq.n	800d498 <find_volume+0x1f0>
 800d48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d48e:	789b      	ldrb	r3, [r3, #2]
 800d490:	2b02      	cmp	r3, #2
 800d492:	d001      	beq.n	800d498 <find_volume+0x1f0>
 800d494:	230d      	movs	r3, #13
 800d496:	e148      	b.n	800d72a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d49a:	789b      	ldrb	r3, [r3, #2]
 800d49c:	461a      	mov	r2, r3
 800d49e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4a0:	fb02 f303 	mul.w	r3, r2, r3
 800d4a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4b4:	895b      	ldrh	r3, [r3, #10]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d008      	beq.n	800d4cc <find_volume+0x224>
 800d4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4bc:	895b      	ldrh	r3, [r3, #10]
 800d4be:	461a      	mov	r2, r3
 800d4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c2:	895b      	ldrh	r3, [r3, #10]
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	4013      	ands	r3, r2
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d001      	beq.n	800d4d0 <find_volume+0x228>
 800d4cc:	230d      	movs	r3, #13
 800d4ce:	e12c      	b.n	800d72a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d2:	3330      	adds	r3, #48	@ 0x30
 800d4d4:	3311      	adds	r3, #17
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fe fc0c 	bl	800bcf4 <ld_word>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	461a      	mov	r2, r3
 800d4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e6:	891b      	ldrh	r3, [r3, #8]
 800d4e8:	f003 030f 	and.w	r3, r3, #15
 800d4ec:	b29b      	uxth	r3, r3
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d001      	beq.n	800d4f6 <find_volume+0x24e>
 800d4f2:	230d      	movs	r3, #13
 800d4f4:	e119      	b.n	800d72a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f8:	3330      	adds	r3, #48	@ 0x30
 800d4fa:	3313      	adds	r3, #19
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7fe fbf9 	bl	800bcf4 <ld_word>
 800d502:	4603      	mov	r3, r0
 800d504:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d106      	bne.n	800d51a <find_volume+0x272>
 800d50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d50e:	3330      	adds	r3, #48	@ 0x30
 800d510:	3320      	adds	r3, #32
 800d512:	4618      	mov	r0, r3
 800d514:	f7fe fc07 	bl	800bd26 <ld_dword>
 800d518:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d51c:	3330      	adds	r3, #48	@ 0x30
 800d51e:	330e      	adds	r3, #14
 800d520:	4618      	mov	r0, r3
 800d522:	f7fe fbe7 	bl	800bcf4 <ld_word>
 800d526:	4603      	mov	r3, r0
 800d528:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d52a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d101      	bne.n	800d534 <find_volume+0x28c>
 800d530:	230d      	movs	r3, #13
 800d532:	e0fa      	b.n	800d72a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d534:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d538:	4413      	add	r3, r2
 800d53a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d53c:	8912      	ldrh	r2, [r2, #8]
 800d53e:	0912      	lsrs	r2, r2, #4
 800d540:	b292      	uxth	r2, r2
 800d542:	4413      	add	r3, r2
 800d544:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d546:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d204      	bcs.n	800d558 <find_volume+0x2b0>
 800d54e:	230d      	movs	r3, #13
 800d550:	e0eb      	b.n	800d72a <find_volume+0x482>
 800d552:	bf00      	nop
 800d554:	20013650 	.word	0x20013650
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d558:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d55c:	1ad3      	subs	r3, r2, r3
 800d55e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d560:	8952      	ldrh	r2, [r2, #10]
 800d562:	fbb3 f3f2 	udiv	r3, r3, r2
 800d566:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d101      	bne.n	800d572 <find_volume+0x2ca>
 800d56e:	230d      	movs	r3, #13
 800d570:	e0db      	b.n	800d72a <find_volume+0x482>
		fmt = FS_FAT32;
 800d572:	2303      	movs	r3, #3
 800d574:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d57e:	4293      	cmp	r3, r2
 800d580:	d802      	bhi.n	800d588 <find_volume+0x2e0>
 800d582:	2302      	movs	r3, #2
 800d584:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d58a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d58e:	4293      	cmp	r3, r2
 800d590:	d802      	bhi.n	800d598 <find_volume+0x2f0>
 800d592:	2301      	movs	r3, #1
 800d594:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d59a:	1c9a      	adds	r2, r3, #2
 800d59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d59e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d5a4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d5a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d5a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5aa:	441a      	add	r2, r3
 800d5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ae:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d5b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b4:	441a      	add	r2, r3
 800d5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5b8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800d5ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d5be:	2b03      	cmp	r3, #3
 800d5c0:	d11e      	bne.n	800d600 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5c4:	3330      	adds	r3, #48	@ 0x30
 800d5c6:	332a      	adds	r3, #42	@ 0x2a
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7fe fb93 	bl	800bcf4 <ld_word>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d001      	beq.n	800d5d8 <find_volume+0x330>
 800d5d4:	230d      	movs	r3, #13
 800d5d6:	e0a8      	b.n	800d72a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5da:	891b      	ldrh	r3, [r3, #8]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d001      	beq.n	800d5e4 <find_volume+0x33c>
 800d5e0:	230d      	movs	r3, #13
 800d5e2:	e0a2      	b.n	800d72a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e6:	3330      	adds	r3, #48	@ 0x30
 800d5e8:	332c      	adds	r3, #44	@ 0x2c
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7fe fb9b 	bl	800bd26 <ld_dword>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f8:	695b      	ldr	r3, [r3, #20]
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800d5fe:	e01f      	b.n	800d640 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d602:	891b      	ldrh	r3, [r3, #8]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d101      	bne.n	800d60c <find_volume+0x364>
 800d608:	230d      	movs	r3, #13
 800d60a:	e08e      	b.n	800d72a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d60e:	6a1a      	ldr	r2, [r3, #32]
 800d610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d612:	441a      	add	r2, r3
 800d614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d616:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d618:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d61c:	2b02      	cmp	r3, #2
 800d61e:	d103      	bne.n	800d628 <find_volume+0x380>
 800d620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d622:	695b      	ldr	r3, [r3, #20]
 800d624:	005b      	lsls	r3, r3, #1
 800d626:	e00a      	b.n	800d63e <find_volume+0x396>
 800d628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d62a:	695a      	ldr	r2, [r3, #20]
 800d62c:	4613      	mov	r3, r2
 800d62e:	005b      	lsls	r3, r3, #1
 800d630:	4413      	add	r3, r2
 800d632:	085a      	lsrs	r2, r3, #1
 800d634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d636:	695b      	ldr	r3, [r3, #20]
 800d638:	f003 0301 	and.w	r3, r3, #1
 800d63c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d63e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d642:	699a      	ldr	r2, [r3, #24]
 800d644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d646:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d64a:	0a5b      	lsrs	r3, r3, #9
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d201      	bcs.n	800d654 <find_volume+0x3ac>
 800d650:	230d      	movs	r3, #13
 800d652:	e06a      	b.n	800d72a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d656:	f04f 32ff 	mov.w	r2, #4294967295
 800d65a:	611a      	str	r2, [r3, #16]
 800d65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d65e:	691a      	ldr	r2, [r3, #16]
 800d660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d662:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d666:	2280      	movs	r2, #128	@ 0x80
 800d668:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d66a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d66e:	2b03      	cmp	r3, #3
 800d670:	d149      	bne.n	800d706 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d674:	3330      	adds	r3, #48	@ 0x30
 800d676:	3330      	adds	r3, #48	@ 0x30
 800d678:	4618      	mov	r0, r3
 800d67a:	f7fe fb3b 	bl	800bcf4 <ld_word>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b01      	cmp	r3, #1
 800d682:	d140      	bne.n	800d706 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d684:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d686:	3301      	adds	r3, #1
 800d688:	4619      	mov	r1, r3
 800d68a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d68c:	f7fe fde4 	bl	800c258 <move_window>
 800d690:	4603      	mov	r3, r0
 800d692:	2b00      	cmp	r3, #0
 800d694:	d137      	bne.n	800d706 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d698:	2200      	movs	r2, #0
 800d69a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69e:	3330      	adds	r3, #48	@ 0x30
 800d6a0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7fe fb25 	bl	800bcf4 <ld_word>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d127      	bne.n	800d706 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b8:	3330      	adds	r3, #48	@ 0x30
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fe fb33 	bl	800bd26 <ld_dword>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	4a1c      	ldr	r2, [pc, #112]	@ (800d734 <find_volume+0x48c>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d11e      	bne.n	800d706 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ca:	3330      	adds	r3, #48	@ 0x30
 800d6cc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7fe fb28 	bl	800bd26 <ld_dword>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	4a17      	ldr	r2, [pc, #92]	@ (800d738 <find_volume+0x490>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d113      	bne.n	800d706 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e0:	3330      	adds	r3, #48	@ 0x30
 800d6e2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fe fb1d 	bl	800bd26 <ld_dword>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f4:	3330      	adds	r3, #48	@ 0x30
 800d6f6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7fe fb13 	bl	800bd26 <ld_dword>
 800d700:	4602      	mov	r2, r0
 800d702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d704:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d708:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d70c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d70e:	4b0b      	ldr	r3, [pc, #44]	@ (800d73c <find_volume+0x494>)
 800d710:	881b      	ldrh	r3, [r3, #0]
 800d712:	3301      	adds	r3, #1
 800d714:	b29a      	uxth	r2, r3
 800d716:	4b09      	ldr	r3, [pc, #36]	@ (800d73c <find_volume+0x494>)
 800d718:	801a      	strh	r2, [r3, #0]
 800d71a:	4b08      	ldr	r3, [pc, #32]	@ (800d73c <find_volume+0x494>)
 800d71c:	881a      	ldrh	r2, [r3, #0]
 800d71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d720:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d722:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d724:	f7fe fd30 	bl	800c188 <clear_lock>
#endif
	return FR_OK;
 800d728:	2300      	movs	r3, #0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3758      	adds	r7, #88	@ 0x58
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	41615252 	.word	0x41615252
 800d738:	61417272 	.word	0x61417272
 800d73c:	20013654 	.word	0x20013654

0800d740 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d74a:	2309      	movs	r3, #9
 800d74c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d01c      	beq.n	800d78e <validate+0x4e>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d018      	beq.n	800d78e <validate+0x4e>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d013      	beq.n	800d78e <validate+0x4e>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	889a      	ldrh	r2, [r3, #4]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	88db      	ldrh	r3, [r3, #6]
 800d770:	429a      	cmp	r2, r3
 800d772:	d10c      	bne.n	800d78e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	785b      	ldrb	r3, [r3, #1]
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7fe fa1a 	bl	800bbb4 <disk_status>
 800d780:	4603      	mov	r3, r0
 800d782:	f003 0301 	and.w	r3, r3, #1
 800d786:	2b00      	cmp	r3, #0
 800d788:	d101      	bne.n	800d78e <validate+0x4e>
			res = FR_OK;
 800d78a:	2300      	movs	r3, #0
 800d78c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d78e:	7bfb      	ldrb	r3, [r7, #15]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d102      	bne.n	800d79a <validate+0x5a>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	e000      	b.n	800d79c <validate+0x5c>
 800d79a:	2300      	movs	r3, #0
 800d79c:	683a      	ldr	r2, [r7, #0]
 800d79e:	6013      	str	r3, [r2, #0]
	return res;
 800d7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3710      	adds	r7, #16
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
	...

0800d7ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b088      	sub	sp, #32
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	4613      	mov	r3, r2
 800d7b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d7be:	f107 0310 	add.w	r3, r7, #16
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7ff fcd5 	bl	800d172 <get_ldnumber>
 800d7c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d7ca:	69fb      	ldr	r3, [r7, #28]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	da01      	bge.n	800d7d4 <f_mount+0x28>
 800d7d0:	230b      	movs	r3, #11
 800d7d2:	e02b      	b.n	800d82c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d7d4:	4a17      	ldr	r2, [pc, #92]	@ (800d834 <f_mount+0x88>)
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d7de:	69bb      	ldr	r3, [r7, #24]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d005      	beq.n	800d7f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d7e4:	69b8      	ldr	r0, [r7, #24]
 800d7e6:	f7fe fccf 	bl	800c188 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d7ea:	69bb      	ldr	r3, [r7, #24]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d002      	beq.n	800d7fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d7fc:	68fa      	ldr	r2, [r7, #12]
 800d7fe:	490d      	ldr	r1, [pc, #52]	@ (800d834 <f_mount+0x88>)
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <f_mount+0x66>
 800d80c:	79fb      	ldrb	r3, [r7, #7]
 800d80e:	2b01      	cmp	r3, #1
 800d810:	d001      	beq.n	800d816 <f_mount+0x6a>
 800d812:	2300      	movs	r3, #0
 800d814:	e00a      	b.n	800d82c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d816:	f107 010c 	add.w	r1, r7, #12
 800d81a:	f107 0308 	add.w	r3, r7, #8
 800d81e:	2200      	movs	r2, #0
 800d820:	4618      	mov	r0, r3
 800d822:	f7ff fd41 	bl	800d2a8 <find_volume>
 800d826:	4603      	mov	r3, r0
 800d828:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d82a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3720      	adds	r7, #32
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	20013650 	.word	0x20013650

0800d838 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b098      	sub	sp, #96	@ 0x60
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	60f8      	str	r0, [r7, #12]
 800d840:	60b9      	str	r1, [r7, #8]
 800d842:	4613      	mov	r3, r2
 800d844:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d101      	bne.n	800d850 <f_open+0x18>
 800d84c:	2309      	movs	r3, #9
 800d84e:	e1a9      	b.n	800dba4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d850:	79fb      	ldrb	r3, [r7, #7]
 800d852:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d856:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d858:	79fa      	ldrb	r2, [r7, #7]
 800d85a:	f107 0110 	add.w	r1, r7, #16
 800d85e:	f107 0308 	add.w	r3, r7, #8
 800d862:	4618      	mov	r0, r3
 800d864:	f7ff fd20 	bl	800d2a8 <find_volume>
 800d868:	4603      	mov	r3, r0
 800d86a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d86e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d872:	2b00      	cmp	r3, #0
 800d874:	f040 818d 	bne.w	800db92 <f_open+0x35a>
		dj.obj.fs = fs;
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d87c:	68ba      	ldr	r2, [r7, #8]
 800d87e:	f107 0314 	add.w	r3, r7, #20
 800d882:	4611      	mov	r1, r2
 800d884:	4618      	mov	r0, r3
 800d886:	f7ff fc03 	bl	800d090 <follow_path>
 800d88a:	4603      	mov	r3, r0
 800d88c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d890:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d894:	2b00      	cmp	r3, #0
 800d896:	d118      	bne.n	800d8ca <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d898:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d89c:	b25b      	sxtb	r3, r3
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	da03      	bge.n	800d8aa <f_open+0x72>
				res = FR_INVALID_NAME;
 800d8a2:	2306      	movs	r3, #6
 800d8a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d8a8:	e00f      	b.n	800d8ca <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d8aa:	79fb      	ldrb	r3, [r7, #7]
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	bf8c      	ite	hi
 800d8b0:	2301      	movhi	r3, #1
 800d8b2:	2300      	movls	r3, #0
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	f107 0314 	add.w	r3, r7, #20
 800d8bc:	4611      	mov	r1, r2
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7fe fb1a 	bl	800bef8 <chk_lock>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d8ca:	79fb      	ldrb	r3, [r7, #7]
 800d8cc:	f003 031c 	and.w	r3, r3, #28
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d07f      	beq.n	800d9d4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d8d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d017      	beq.n	800d90c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d8dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d8e0:	2b04      	cmp	r3, #4
 800d8e2:	d10e      	bne.n	800d902 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d8e4:	f7fe fb64 	bl	800bfb0 <enq_lock>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d006      	beq.n	800d8fc <f_open+0xc4>
 800d8ee:	f107 0314 	add.w	r3, r7, #20
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7ff faa5 	bl	800ce42 <dir_register>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	e000      	b.n	800d8fe <f_open+0xc6>
 800d8fc:	2312      	movs	r3, #18
 800d8fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d902:	79fb      	ldrb	r3, [r7, #7]
 800d904:	f043 0308 	orr.w	r3, r3, #8
 800d908:	71fb      	strb	r3, [r7, #7]
 800d90a:	e010      	b.n	800d92e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d90c:	7ebb      	ldrb	r3, [r7, #26]
 800d90e:	f003 0311 	and.w	r3, r3, #17
 800d912:	2b00      	cmp	r3, #0
 800d914:	d003      	beq.n	800d91e <f_open+0xe6>
					res = FR_DENIED;
 800d916:	2307      	movs	r3, #7
 800d918:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d91c:	e007      	b.n	800d92e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d91e:	79fb      	ldrb	r3, [r7, #7]
 800d920:	f003 0304 	and.w	r3, r3, #4
 800d924:	2b00      	cmp	r3, #0
 800d926:	d002      	beq.n	800d92e <f_open+0xf6>
 800d928:	2308      	movs	r3, #8
 800d92a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d92e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d932:	2b00      	cmp	r3, #0
 800d934:	d168      	bne.n	800da08 <f_open+0x1d0>
 800d936:	79fb      	ldrb	r3, [r7, #7]
 800d938:	f003 0308 	and.w	r3, r3, #8
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d063      	beq.n	800da08 <f_open+0x1d0>
				dw = GET_FATTIME();
 800d940:	f7fa fb28 	bl	8007f94 <get_fattime>
 800d944:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d948:	330e      	adds	r3, #14
 800d94a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7fe fa28 	bl	800bda2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d954:	3316      	adds	r3, #22
 800d956:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d958:	4618      	mov	r0, r3
 800d95a:	f7fe fa22 	bl	800bda2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d95e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d960:	330b      	adds	r3, #11
 800d962:	2220      	movs	r2, #32
 800d964:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d96a:	4611      	mov	r1, r2
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7ff f977 	bl	800cc60 <ld_clust>
 800d972:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d978:	2200      	movs	r2, #0
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7ff f98f 	bl	800cc9e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d982:	331c      	adds	r3, #28
 800d984:	2100      	movs	r1, #0
 800d986:	4618      	mov	r0, r3
 800d988:	f7fe fa0b 	bl	800bda2 <st_dword>
					fs->wflag = 1;
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	2201      	movs	r2, #1
 800d990:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d994:	2b00      	cmp	r3, #0
 800d996:	d037      	beq.n	800da08 <f_open+0x1d0>
						dw = fs->winsect;
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d99c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d99e:	f107 0314 	add.w	r3, r7, #20
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fe fea2 	bl	800c6f0 <remove_chain>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d9b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d126      	bne.n	800da08 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7fe fc4a 	bl	800c258 <move_window>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d9ce:	3a01      	subs	r2, #1
 800d9d0:	60da      	str	r2, [r3, #12]
 800d9d2:	e019      	b.n	800da08 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d9d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d115      	bne.n	800da08 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d9dc:	7ebb      	ldrb	r3, [r7, #26]
 800d9de:	f003 0310 	and.w	r3, r3, #16
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d003      	beq.n	800d9ee <f_open+0x1b6>
					res = FR_NO_FILE;
 800d9e6:	2304      	movs	r3, #4
 800d9e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d9ec:	e00c      	b.n	800da08 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d9ee:	79fb      	ldrb	r3, [r7, #7]
 800d9f0:	f003 0302 	and.w	r3, r3, #2
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d007      	beq.n	800da08 <f_open+0x1d0>
 800d9f8:	7ebb      	ldrb	r3, [r7, #26]
 800d9fa:	f003 0301 	and.w	r3, r3, #1
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d002      	beq.n	800da08 <f_open+0x1d0>
						res = FR_DENIED;
 800da02:	2307      	movs	r3, #7
 800da04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800da08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d126      	bne.n	800da5e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800da10:	79fb      	ldrb	r3, [r7, #7]
 800da12:	f003 0308 	and.w	r3, r3, #8
 800da16:	2b00      	cmp	r3, #0
 800da18:	d003      	beq.n	800da22 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800da1a:	79fb      	ldrb	r3, [r7, #7]
 800da1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da20:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800da2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800da30:	79fb      	ldrb	r3, [r7, #7]
 800da32:	2b01      	cmp	r3, #1
 800da34:	bf8c      	ite	hi
 800da36:	2301      	movhi	r3, #1
 800da38:	2300      	movls	r3, #0
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	461a      	mov	r2, r3
 800da3e:	f107 0314 	add.w	r3, r7, #20
 800da42:	4611      	mov	r1, r2
 800da44:	4618      	mov	r0, r3
 800da46:	f7fe fad5 	bl	800bff4 <inc_lock>
 800da4a:	4602      	mov	r2, r0
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	691b      	ldr	r3, [r3, #16]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d102      	bne.n	800da5e <f_open+0x226>
 800da58:	2302      	movs	r3, #2
 800da5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800da5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da62:	2b00      	cmp	r3, #0
 800da64:	f040 8095 	bne.w	800db92 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da6c:	4611      	mov	r1, r2
 800da6e:	4618      	mov	r0, r3
 800da70:	f7ff f8f6 	bl	800cc60 <ld_clust>
 800da74:	4602      	mov	r2, r0
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800da7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da7c:	331c      	adds	r3, #28
 800da7e:	4618      	mov	r0, r3
 800da80:	f7fe f951 	bl	800bd26 <ld_dword>
 800da84:	4602      	mov	r2, r0
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2200      	movs	r2, #0
 800da8e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800da90:	693a      	ldr	r2, [r7, #16]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	88da      	ldrh	r2, [r3, #6]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	79fa      	ldrb	r2, [r7, #7]
 800daa2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2200      	movs	r2, #0
 800daa8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2200      	movs	r2, #0
 800daae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2200      	movs	r2, #0
 800dab4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	3330      	adds	r3, #48	@ 0x30
 800daba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dabe:	2100      	movs	r1, #0
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7fe f9bb 	bl	800be3c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dac6:	79fb      	ldrb	r3, [r7, #7]
 800dac8:	f003 0320 	and.w	r3, r3, #32
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d060      	beq.n	800db92 <f_open+0x35a>
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	68db      	ldr	r3, [r3, #12]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d05c      	beq.n	800db92 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	68da      	ldr	r2, [r3, #12]
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	895b      	ldrh	r3, [r3, #10]
 800dae4:	025b      	lsls	r3, r3, #9
 800dae6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	657b      	str	r3, [r7, #84]	@ 0x54
 800daf4:	e016      	b.n	800db24 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fe fc67 	bl	800c3ce <get_fat>
 800db00:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800db02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800db04:	2b01      	cmp	r3, #1
 800db06:	d802      	bhi.n	800db0e <f_open+0x2d6>
 800db08:	2302      	movs	r3, #2
 800db0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800db0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800db10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db14:	d102      	bne.n	800db1c <f_open+0x2e4>
 800db16:	2301      	movs	r3, #1
 800db18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800db1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db20:	1ad3      	subs	r3, r2, r3
 800db22:	657b      	str	r3, [r7, #84]	@ 0x54
 800db24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d103      	bne.n	800db34 <f_open+0x2fc>
 800db2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db30:	429a      	cmp	r2, r3
 800db32:	d8e0      	bhi.n	800daf6 <f_open+0x2be>
				}
				fp->clust = clst;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db38:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800db3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d127      	bne.n	800db92 <f_open+0x35a>
 800db42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d022      	beq.n	800db92 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800db50:	4618      	mov	r0, r3
 800db52:	f7fe fc1d 	bl	800c390 <clust2sect>
 800db56:	6478      	str	r0, [r7, #68]	@ 0x44
 800db58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d103      	bne.n	800db66 <f_open+0x32e>
						res = FR_INT_ERR;
 800db5e:	2302      	movs	r3, #2
 800db60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800db64:	e015      	b.n	800db92 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800db66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db68:	0a5a      	lsrs	r2, r3, #9
 800db6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db6c:	441a      	add	r2, r3
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	7858      	ldrb	r0, [r3, #1]
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	6a1a      	ldr	r2, [r3, #32]
 800db80:	2301      	movs	r3, #1
 800db82:	f7fe f859 	bl	800bc38 <disk_read>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d002      	beq.n	800db92 <f_open+0x35a>
 800db8c:	2301      	movs	r3, #1
 800db8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800db92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db96:	2b00      	cmp	r3, #0
 800db98:	d002      	beq.n	800dba0 <f_open+0x368>
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2200      	movs	r2, #0
 800db9e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dba0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3760      	adds	r7, #96	@ 0x60
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b08e      	sub	sp, #56	@ 0x38
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	60f8      	str	r0, [r7, #12]
 800dbb4:	60b9      	str	r1, [r7, #8]
 800dbb6:	607a      	str	r2, [r7, #4]
 800dbb8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f107 0214 	add.w	r2, r7, #20
 800dbca:	4611      	mov	r1, r2
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f7ff fdb7 	bl	800d740 <validate>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dbd8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d107      	bne.n	800dbf0 <f_read+0x44>
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	7d5b      	ldrb	r3, [r3, #21]
 800dbe4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dbe8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d002      	beq.n	800dbf6 <f_read+0x4a>
 800dbf0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dbf4:	e115      	b.n	800de22 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	7d1b      	ldrb	r3, [r3, #20]
 800dbfa:	f003 0301 	and.w	r3, r3, #1
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d101      	bne.n	800dc06 <f_read+0x5a>
 800dc02:	2307      	movs	r3, #7
 800dc04:	e10d      	b.n	800de22 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	68da      	ldr	r2, [r3, #12]
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	699b      	ldr	r3, [r3, #24]
 800dc0e:	1ad3      	subs	r3, r2, r3
 800dc10:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	6a3b      	ldr	r3, [r7, #32]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	f240 80fe 	bls.w	800de18 <f_read+0x26c>
 800dc1c:	6a3b      	ldr	r3, [r7, #32]
 800dc1e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800dc20:	e0fa      	b.n	800de18 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	699b      	ldr	r3, [r3, #24]
 800dc26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f040 80c6 	bne.w	800ddbc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	699b      	ldr	r3, [r3, #24]
 800dc34:	0a5b      	lsrs	r3, r3, #9
 800dc36:	697a      	ldr	r2, [r7, #20]
 800dc38:	8952      	ldrh	r2, [r2, #10]
 800dc3a:	3a01      	subs	r2, #1
 800dc3c:	4013      	ands	r3, r2
 800dc3e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d12f      	bne.n	800dca6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	699b      	ldr	r3, [r3, #24]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d103      	bne.n	800dc56 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	689b      	ldr	r3, [r3, #8]
 800dc52:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc54:	e013      	b.n	800dc7e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d007      	beq.n	800dc6e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	699b      	ldr	r3, [r3, #24]
 800dc62:	4619      	mov	r1, r3
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f7fe fe40 	bl	800c8ea <clmt_clust>
 800dc6a:	6338      	str	r0, [r7, #48]	@ 0x30
 800dc6c:	e007      	b.n	800dc7e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800dc6e:	68fa      	ldr	r2, [r7, #12]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	69db      	ldr	r3, [r3, #28]
 800dc74:	4619      	mov	r1, r3
 800dc76:	4610      	mov	r0, r2
 800dc78:	f7fe fba9 	bl	800c3ce <get_fat>
 800dc7c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800dc7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d804      	bhi.n	800dc8e <f_read+0xe2>
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2202      	movs	r2, #2
 800dc88:	755a      	strb	r2, [r3, #21]
 800dc8a:	2302      	movs	r3, #2
 800dc8c:	e0c9      	b.n	800de22 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc94:	d104      	bne.n	800dca0 <f_read+0xf4>
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2201      	movs	r2, #1
 800dc9a:	755a      	strb	r2, [r3, #21]
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e0c0      	b.n	800de22 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dca4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dca6:	697a      	ldr	r2, [r7, #20]
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	69db      	ldr	r3, [r3, #28]
 800dcac:	4619      	mov	r1, r3
 800dcae:	4610      	mov	r0, r2
 800dcb0:	f7fe fb6e 	bl	800c390 <clust2sect>
 800dcb4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d104      	bne.n	800dcc6 <f_read+0x11a>
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2202      	movs	r2, #2
 800dcc0:	755a      	strb	r2, [r3, #21]
 800dcc2:	2302      	movs	r3, #2
 800dcc4:	e0ad      	b.n	800de22 <f_read+0x276>
			sect += csect;
 800dcc6:	69ba      	ldr	r2, [r7, #24]
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	4413      	add	r3, r2
 800dccc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	0a5b      	lsrs	r3, r3, #9
 800dcd2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800dcd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d039      	beq.n	800dd4e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dcda:	69fa      	ldr	r2, [r7, #28]
 800dcdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcde:	4413      	add	r3, r2
 800dce0:	697a      	ldr	r2, [r7, #20]
 800dce2:	8952      	ldrh	r2, [r2, #10]
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d905      	bls.n	800dcf4 <f_read+0x148>
					cc = fs->csize - csect;
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	895b      	ldrh	r3, [r3, #10]
 800dcec:	461a      	mov	r2, r3
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	1ad3      	subs	r3, r2, r3
 800dcf2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	7858      	ldrb	r0, [r3, #1]
 800dcf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcfa:	69ba      	ldr	r2, [r7, #24]
 800dcfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dcfe:	f7fd ff9b 	bl	800bc38 <disk_read>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d004      	beq.n	800dd12 <f_read+0x166>
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	755a      	strb	r2, [r3, #21]
 800dd0e:	2301      	movs	r3, #1
 800dd10:	e087      	b.n	800de22 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	7d1b      	ldrb	r3, [r3, #20]
 800dd16:	b25b      	sxtb	r3, r3
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	da14      	bge.n	800dd46 <f_read+0x19a>
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6a1a      	ldr	r2, [r3, #32]
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	1ad3      	subs	r3, r2, r3
 800dd24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d90d      	bls.n	800dd46 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	6a1a      	ldr	r2, [r3, #32]
 800dd2e:	69bb      	ldr	r3, [r7, #24]
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	025b      	lsls	r3, r3, #9
 800dd34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd36:	18d0      	adds	r0, r2, r3
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	3330      	adds	r3, #48	@ 0x30
 800dd3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd40:	4619      	mov	r1, r3
 800dd42:	f7fe f85a 	bl	800bdfa <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800dd46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd48:	025b      	lsls	r3, r3, #9
 800dd4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800dd4c:	e050      	b.n	800ddf0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6a1b      	ldr	r3, [r3, #32]
 800dd52:	69ba      	ldr	r2, [r7, #24]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d02e      	beq.n	800ddb6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	7d1b      	ldrb	r3, [r3, #20]
 800dd5c:	b25b      	sxtb	r3, r3
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	da18      	bge.n	800dd94 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	7858      	ldrb	r0, [r3, #1]
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6a1a      	ldr	r2, [r3, #32]
 800dd70:	2301      	movs	r3, #1
 800dd72:	f7fd ff81 	bl	800bc78 <disk_write>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d004      	beq.n	800dd86 <f_read+0x1da>
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	755a      	strb	r2, [r3, #21]
 800dd82:	2301      	movs	r3, #1
 800dd84:	e04d      	b.n	800de22 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	7d1b      	ldrb	r3, [r3, #20]
 800dd8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd8e:	b2da      	uxtb	r2, r3
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	7858      	ldrb	r0, [r3, #1]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dd9e:	2301      	movs	r3, #1
 800dda0:	69ba      	ldr	r2, [r7, #24]
 800dda2:	f7fd ff49 	bl	800bc38 <disk_read>
 800dda6:	4603      	mov	r3, r0
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d004      	beq.n	800ddb6 <f_read+0x20a>
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2201      	movs	r2, #1
 800ddb0:	755a      	strb	r2, [r3, #21]
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	e035      	b.n	800de22 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	69ba      	ldr	r2, [r7, #24]
 800ddba:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	699b      	ldr	r3, [r3, #24]
 800ddc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddc4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ddc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ddca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d901      	bls.n	800ddd6 <f_read+0x22a>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	699b      	ldr	r3, [r3, #24]
 800dde0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dde4:	4413      	add	r3, r2
 800dde6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dde8:	4619      	mov	r1, r3
 800ddea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ddec:	f7fe f805 	bl	800bdfa <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ddf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddf4:	4413      	add	r3, r2
 800ddf6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	699a      	ldr	r2, [r3, #24]
 800ddfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddfe:	441a      	add	r2, r3
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	619a      	str	r2, [r3, #24]
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de0a:	441a      	add	r2, r3
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	601a      	str	r2, [r3, #0]
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de14:	1ad3      	subs	r3, r2, r3
 800de16:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f47f af01 	bne.w	800dc22 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800de20:	2300      	movs	r3, #0
}
 800de22:	4618      	mov	r0, r3
 800de24:	3738      	adds	r7, #56	@ 0x38
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}

0800de2a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b08c      	sub	sp, #48	@ 0x30
 800de2e:	af00      	add	r7, sp, #0
 800de30:	60f8      	str	r0, [r7, #12]
 800de32:	60b9      	str	r1, [r7, #8]
 800de34:	607a      	str	r2, [r7, #4]
 800de36:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	2200      	movs	r2, #0
 800de40:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f107 0210 	add.w	r2, r7, #16
 800de48:	4611      	mov	r1, r2
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7ff fc78 	bl	800d740 <validate>
 800de50:	4603      	mov	r3, r0
 800de52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800de56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d107      	bne.n	800de6e <f_write+0x44>
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	7d5b      	ldrb	r3, [r3, #21]
 800de62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800de66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d002      	beq.n	800de74 <f_write+0x4a>
 800de6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800de72:	e14b      	b.n	800e10c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	7d1b      	ldrb	r3, [r3, #20]
 800de78:	f003 0302 	and.w	r3, r3, #2
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d101      	bne.n	800de84 <f_write+0x5a>
 800de80:	2307      	movs	r3, #7
 800de82:	e143      	b.n	800e10c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	699a      	ldr	r2, [r3, #24]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	441a      	add	r2, r3
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	699b      	ldr	r3, [r3, #24]
 800de90:	429a      	cmp	r2, r3
 800de92:	f080 812d 	bcs.w	800e0f0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	699b      	ldr	r3, [r3, #24]
 800de9a:	43db      	mvns	r3, r3
 800de9c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800de9e:	e127      	b.n	800e0f0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	699b      	ldr	r3, [r3, #24]
 800dea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f040 80e3 	bne.w	800e074 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	699b      	ldr	r3, [r3, #24]
 800deb2:	0a5b      	lsrs	r3, r3, #9
 800deb4:	693a      	ldr	r2, [r7, #16]
 800deb6:	8952      	ldrh	r2, [r2, #10]
 800deb8:	3a01      	subs	r2, #1
 800deba:	4013      	ands	r3, r2
 800debc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d143      	bne.n	800df4c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	699b      	ldr	r3, [r3, #24]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d10c      	bne.n	800dee6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	689b      	ldr	r3, [r3, #8]
 800ded0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ded2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d11a      	bne.n	800df0e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2100      	movs	r1, #0
 800dedc:	4618      	mov	r0, r3
 800dede:	f7fe fc6c 	bl	800c7ba <create_chain>
 800dee2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800dee4:	e013      	b.n	800df0e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deea:	2b00      	cmp	r3, #0
 800deec:	d007      	beq.n	800defe <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	699b      	ldr	r3, [r3, #24]
 800def2:	4619      	mov	r1, r3
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	f7fe fcf8 	bl	800c8ea <clmt_clust>
 800defa:	62b8      	str	r0, [r7, #40]	@ 0x28
 800defc:	e007      	b.n	800df0e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800defe:	68fa      	ldr	r2, [r7, #12]
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	69db      	ldr	r3, [r3, #28]
 800df04:	4619      	mov	r1, r3
 800df06:	4610      	mov	r0, r2
 800df08:	f7fe fc57 	bl	800c7ba <create_chain>
 800df0c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800df0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df10:	2b00      	cmp	r3, #0
 800df12:	f000 80f2 	beq.w	800e0fa <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800df16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d104      	bne.n	800df26 <f_write+0xfc>
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2202      	movs	r2, #2
 800df20:	755a      	strb	r2, [r3, #21]
 800df22:	2302      	movs	r3, #2
 800df24:	e0f2      	b.n	800e10c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800df26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df2c:	d104      	bne.n	800df38 <f_write+0x10e>
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2201      	movs	r2, #1
 800df32:	755a      	strb	r2, [r3, #21]
 800df34:	2301      	movs	r3, #1
 800df36:	e0e9      	b.n	800e10c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df3c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	689b      	ldr	r3, [r3, #8]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d102      	bne.n	800df4c <f_write+0x122>
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df4a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	7d1b      	ldrb	r3, [r3, #20]
 800df50:	b25b      	sxtb	r3, r3
 800df52:	2b00      	cmp	r3, #0
 800df54:	da18      	bge.n	800df88 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	7858      	ldrb	r0, [r3, #1]
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	6a1a      	ldr	r2, [r3, #32]
 800df64:	2301      	movs	r3, #1
 800df66:	f7fd fe87 	bl	800bc78 <disk_write>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d004      	beq.n	800df7a <f_write+0x150>
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2201      	movs	r2, #1
 800df74:	755a      	strb	r2, [r3, #21]
 800df76:	2301      	movs	r3, #1
 800df78:	e0c8      	b.n	800e10c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	7d1b      	ldrb	r3, [r3, #20]
 800df7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df82:	b2da      	uxtb	r2, r3
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800df88:	693a      	ldr	r2, [r7, #16]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	69db      	ldr	r3, [r3, #28]
 800df8e:	4619      	mov	r1, r3
 800df90:	4610      	mov	r0, r2
 800df92:	f7fe f9fd 	bl	800c390 <clust2sect>
 800df96:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d104      	bne.n	800dfa8 <f_write+0x17e>
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2202      	movs	r2, #2
 800dfa2:	755a      	strb	r2, [r3, #21]
 800dfa4:	2302      	movs	r3, #2
 800dfa6:	e0b1      	b.n	800e10c <f_write+0x2e2>
			sect += csect;
 800dfa8:	697a      	ldr	r2, [r7, #20]
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	4413      	add	r3, r2
 800dfae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	0a5b      	lsrs	r3, r3, #9
 800dfb4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dfb6:	6a3b      	ldr	r3, [r7, #32]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d03c      	beq.n	800e036 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dfbc:	69ba      	ldr	r2, [r7, #24]
 800dfbe:	6a3b      	ldr	r3, [r7, #32]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	693a      	ldr	r2, [r7, #16]
 800dfc4:	8952      	ldrh	r2, [r2, #10]
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d905      	bls.n	800dfd6 <f_write+0x1ac>
					cc = fs->csize - csect;
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	895b      	ldrh	r3, [r3, #10]
 800dfce:	461a      	mov	r2, r3
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	1ad3      	subs	r3, r2, r3
 800dfd4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	7858      	ldrb	r0, [r3, #1]
 800dfda:	6a3b      	ldr	r3, [r7, #32]
 800dfdc:	697a      	ldr	r2, [r7, #20]
 800dfde:	69f9      	ldr	r1, [r7, #28]
 800dfe0:	f7fd fe4a 	bl	800bc78 <disk_write>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d004      	beq.n	800dff4 <f_write+0x1ca>
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2201      	movs	r2, #1
 800dfee:	755a      	strb	r2, [r3, #21]
 800dff0:	2301      	movs	r3, #1
 800dff2:	e08b      	b.n	800e10c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6a1a      	ldr	r2, [r3, #32]
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	1ad3      	subs	r3, r2, r3
 800dffc:	6a3a      	ldr	r2, [r7, #32]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d915      	bls.n	800e02e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6a1a      	ldr	r2, [r3, #32]
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	1ad3      	subs	r3, r2, r3
 800e010:	025b      	lsls	r3, r3, #9
 800e012:	69fa      	ldr	r2, [r7, #28]
 800e014:	4413      	add	r3, r2
 800e016:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e01a:	4619      	mov	r1, r3
 800e01c:	f7fd feed 	bl	800bdfa <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	7d1b      	ldrb	r3, [r3, #20]
 800e024:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e028:	b2da      	uxtb	r2, r3
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e02e:	6a3b      	ldr	r3, [r7, #32]
 800e030:	025b      	lsls	r3, r3, #9
 800e032:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800e034:	e03f      	b.n	800e0b6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	6a1b      	ldr	r3, [r3, #32]
 800e03a:	697a      	ldr	r2, [r7, #20]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d016      	beq.n	800e06e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	699a      	ldr	r2, [r3, #24]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e048:	429a      	cmp	r2, r3
 800e04a:	d210      	bcs.n	800e06e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	7858      	ldrb	r0, [r3, #1]
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e056:	2301      	movs	r3, #1
 800e058:	697a      	ldr	r2, [r7, #20]
 800e05a:	f7fd fded 	bl	800bc38 <disk_read>
 800e05e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e060:	2b00      	cmp	r3, #0
 800e062:	d004      	beq.n	800e06e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2201      	movs	r2, #1
 800e068:	755a      	strb	r2, [r3, #21]
 800e06a:	2301      	movs	r3, #1
 800e06c:	e04e      	b.n	800e10c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	697a      	ldr	r2, [r7, #20]
 800e072:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	699b      	ldr	r3, [r3, #24]
 800e078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e07c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e080:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	429a      	cmp	r2, r3
 800e088:	d901      	bls.n	800e08e <f_write+0x264>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	699b      	ldr	r3, [r3, #24]
 800e098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e09c:	4413      	add	r3, r2
 800e09e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0a0:	69f9      	ldr	r1, [r7, #28]
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fd fea9 	bl	800bdfa <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	7d1b      	ldrb	r3, [r3, #20]
 800e0ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e0b0:	b2da      	uxtb	r2, r3
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e0b6:	69fa      	ldr	r2, [r7, #28]
 800e0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ba:	4413      	add	r3, r2
 800e0bc:	61fb      	str	r3, [r7, #28]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	699a      	ldr	r2, [r3, #24]
 800e0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c4:	441a      	add	r2, r3
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	619a      	str	r2, [r3, #24]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	68da      	ldr	r2, [r3, #12]
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	699b      	ldr	r3, [r3, #24]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	bf38      	it	cc
 800e0d6:	461a      	movcc	r2, r3
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	60da      	str	r2, [r3, #12]
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	681a      	ldr	r2, [r3, #0]
 800e0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e2:	441a      	add	r2, r3
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	601a      	str	r2, [r3, #0]
 800e0e8:	687a      	ldr	r2, [r7, #4]
 800e0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ec:	1ad3      	subs	r3, r2, r3
 800e0ee:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	f47f aed4 	bne.w	800dea0 <f_write+0x76>
 800e0f8:	e000      	b.n	800e0fc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e0fa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	7d1b      	ldrb	r3, [r3, #20]
 800e100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e104:	b2da      	uxtb	r2, r3
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e10a:	2300      	movs	r3, #0
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3730      	adds	r7, #48	@ 0x30
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b086      	sub	sp, #24
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f107 0208 	add.w	r2, r7, #8
 800e122:	4611      	mov	r1, r2
 800e124:	4618      	mov	r0, r3
 800e126:	f7ff fb0b 	bl	800d740 <validate>
 800e12a:	4603      	mov	r3, r0
 800e12c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e12e:	7dfb      	ldrb	r3, [r7, #23]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d168      	bne.n	800e206 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	7d1b      	ldrb	r3, [r3, #20]
 800e138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d062      	beq.n	800e206 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	7d1b      	ldrb	r3, [r3, #20]
 800e144:	b25b      	sxtb	r3, r3
 800e146:	2b00      	cmp	r3, #0
 800e148:	da15      	bge.n	800e176 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	7858      	ldrb	r0, [r3, #1]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6a1a      	ldr	r2, [r3, #32]
 800e158:	2301      	movs	r3, #1
 800e15a:	f7fd fd8d 	bl	800bc78 <disk_write>
 800e15e:	4603      	mov	r3, r0
 800e160:	2b00      	cmp	r3, #0
 800e162:	d001      	beq.n	800e168 <f_sync+0x54>
 800e164:	2301      	movs	r3, #1
 800e166:	e04f      	b.n	800e208 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	7d1b      	ldrb	r3, [r3, #20]
 800e16c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e170:	b2da      	uxtb	r2, r3
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e176:	f7f9 ff0d 	bl	8007f94 <get_fattime>
 800e17a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e17c:	68ba      	ldr	r2, [r7, #8]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e182:	4619      	mov	r1, r3
 800e184:	4610      	mov	r0, r2
 800e186:	f7fe f867 	bl	800c258 <move_window>
 800e18a:	4603      	mov	r3, r0
 800e18c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e18e:	7dfb      	ldrb	r3, [r7, #23]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d138      	bne.n	800e206 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e198:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	330b      	adds	r3, #11
 800e19e:	781a      	ldrb	r2, [r3, #0]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	330b      	adds	r3, #11
 800e1a4:	f042 0220 	orr.w	r2, r2, #32
 800e1a8:	b2d2      	uxtb	r2, r2
 800e1aa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6818      	ldr	r0, [r3, #0]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	68f9      	ldr	r1, [r7, #12]
 800e1b8:	f7fe fd71 	bl	800cc9e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	f103 021c 	add.w	r2, r3, #28
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	68db      	ldr	r3, [r3, #12]
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	4610      	mov	r0, r2
 800e1ca:	f7fd fdea 	bl	800bda2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	3316      	adds	r3, #22
 800e1d2:	6939      	ldr	r1, [r7, #16]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7fd fde4 	bl	800bda2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	3312      	adds	r3, #18
 800e1de:	2100      	movs	r1, #0
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fd fdc3 	bl	800bd6c <st_word>
					fs->wflag = 1;
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fe f860 	bl	800c2b4 <sync_fs>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	7d1b      	ldrb	r3, [r3, #20]
 800e1fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e200:	b2da      	uxtb	r2, r3
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e206:	7dfb      	ldrb	r3, [r7, #23]
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3718      	adds	r7, #24
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f7ff ff7b 	bl	800e114 <f_sync>
 800e21e:	4603      	mov	r3, r0
 800e220:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e222:	7bfb      	ldrb	r3, [r7, #15]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d118      	bne.n	800e25a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f107 0208 	add.w	r2, r7, #8
 800e22e:	4611      	mov	r1, r2
 800e230:	4618      	mov	r0, r3
 800e232:	f7ff fa85 	bl	800d740 <validate>
 800e236:	4603      	mov	r3, r0
 800e238:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e23a:	7bfb      	ldrb	r3, [r7, #15]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d10c      	bne.n	800e25a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	691b      	ldr	r3, [r3, #16]
 800e244:	4618      	mov	r0, r3
 800e246:	f7fd ff63 	bl	800c110 <dec_lock>
 800e24a:	4603      	mov	r3, r0
 800e24c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e24e:	7bfb      	ldrb	r3, [r7, #15]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d102      	bne.n	800e25a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2200      	movs	r2, #0
 800e258:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3710      	adds	r7, #16
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b086      	sub	sp, #24
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d101      	bne.n	800e278 <f_opendir+0x14>
 800e274:	2309      	movs	r3, #9
 800e276:	e064      	b.n	800e342 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e27c:	f107 010c 	add.w	r1, r7, #12
 800e280:	463b      	mov	r3, r7
 800e282:	2200      	movs	r2, #0
 800e284:	4618      	mov	r0, r3
 800e286:	f7ff f80f 	bl	800d2a8 <find_volume>
 800e28a:	4603      	mov	r3, r0
 800e28c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e28e:	7dfb      	ldrb	r3, [r7, #23]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d14f      	bne.n	800e334 <f_opendir+0xd0>
		obj->fs = fs;
 800e294:	68fa      	ldr	r2, [r7, #12]
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	4619      	mov	r1, r3
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f7fe fef6 	bl	800d090 <follow_path>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e2a8:	7dfb      	ldrb	r3, [r7, #23]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d13d      	bne.n	800e32a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e2b4:	b25b      	sxtb	r3, r3
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	db12      	blt.n	800e2e0 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	799b      	ldrb	r3, [r3, #6]
 800e2be:	f003 0310 	and.w	r3, r3, #16
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00a      	beq.n	800e2dc <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e2c6:	68fa      	ldr	r2, [r7, #12]
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6a1b      	ldr	r3, [r3, #32]
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	4610      	mov	r0, r2
 800e2d0:	f7fe fcc6 	bl	800cc60 <ld_clust>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	609a      	str	r2, [r3, #8]
 800e2da:	e001      	b.n	800e2e0 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e2dc:	2305      	movs	r3, #5
 800e2de:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e2e0:	7dfb      	ldrb	r3, [r7, #23]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d121      	bne.n	800e32a <f_opendir+0xc6>
				obj->id = fs->id;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	88da      	ldrh	r2, [r3, #6]
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e2ee:	2100      	movs	r1, #0
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7fe fb2e 	bl	800c952 <dir_sdi>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e2fa:	7dfb      	ldrb	r3, [r7, #23]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d114      	bne.n	800e32a <f_opendir+0xc6>
					if (obj->sclust) {
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d00d      	beq.n	800e324 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e308:	2100      	movs	r1, #0
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f7fd fe72 	bl	800bff4 <inc_lock>
 800e310:	4602      	mov	r2, r0
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	691b      	ldr	r3, [r3, #16]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d105      	bne.n	800e32a <f_opendir+0xc6>
 800e31e:	2312      	movs	r3, #18
 800e320:	75fb      	strb	r3, [r7, #23]
 800e322:	e002      	b.n	800e32a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	2200      	movs	r2, #0
 800e328:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e32a:	7dfb      	ldrb	r3, [r7, #23]
 800e32c:	2b04      	cmp	r3, #4
 800e32e:	d101      	bne.n	800e334 <f_opendir+0xd0>
 800e330:	2305      	movs	r3, #5
 800e332:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e334:	7dfb      	ldrb	r3, [r7, #23]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d002      	beq.n	800e340 <f_opendir+0xdc>
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	2200      	movs	r2, #0
 800e33e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e340:	7dfb      	ldrb	r3, [r7, #23]
}
 800e342:	4618      	mov	r0, r3
 800e344:	3718      	adds	r7, #24
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}

0800e34a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e34a:	b580      	push	{r7, lr}
 800e34c:	b084      	sub	sp, #16
 800e34e:	af00      	add	r7, sp, #0
 800e350:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f107 0208 	add.w	r2, r7, #8
 800e358:	4611      	mov	r1, r2
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7ff f9f0 	bl	800d740 <validate>
 800e360:	4603      	mov	r3, r0
 800e362:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e364:	7bfb      	ldrb	r3, [r7, #15]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d110      	bne.n	800e38c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	691b      	ldr	r3, [r3, #16]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d006      	beq.n	800e380 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	691b      	ldr	r3, [r3, #16]
 800e376:	4618      	mov	r0, r3
 800e378:	f7fd feca 	bl	800c110 <dec_lock>
 800e37c:	4603      	mov	r3, r0
 800e37e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e380:	7bfb      	ldrb	r3, [r7, #15]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d102      	bne.n	800e38c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2200      	movs	r2, #0
 800e38a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3710      	adds	r7, #16
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}

0800e396 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e396:	b580      	push	{r7, lr}
 800e398:	b084      	sub	sp, #16
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	6078      	str	r0, [r7, #4]
 800e39e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f107 0208 	add.w	r2, r7, #8
 800e3a6:	4611      	mov	r1, r2
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7ff f9c9 	bl	800d740 <validate>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e3b2:	7bfb      	ldrb	r3, [r7, #15]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d126      	bne.n	800e406 <f_readdir+0x70>
		if (!fno) {
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d106      	bne.n	800e3cc <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e3be:	2100      	movs	r1, #0
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f7fe fac6 	bl	800c952 <dir_sdi>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	73fb      	strb	r3, [r7, #15]
 800e3ca:	e01c      	b.n	800e406 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e3cc:	2100      	movs	r1, #0
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f7fe fc85 	bl	800ccde <dir_read>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e3d8:	7bfb      	ldrb	r3, [r7, #15]
 800e3da:	2b04      	cmp	r3, #4
 800e3dc:	d101      	bne.n	800e3e2 <f_readdir+0x4c>
 800e3de:	2300      	movs	r3, #0
 800e3e0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e3e2:	7bfb      	ldrb	r3, [r7, #15]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d10e      	bne.n	800e406 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e3e8:	6839      	ldr	r1, [r7, #0]
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f7fe fd5b 	bl	800cea6 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e3f0:	2100      	movs	r1, #0
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f7fe fb28 	bl	800ca48 <dir_next>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e3fc:	7bfb      	ldrb	r3, [r7, #15]
 800e3fe:	2b04      	cmp	r3, #4
 800e400:	d101      	bne.n	800e406 <f_readdir+0x70>
 800e402:	2300      	movs	r3, #0
 800e404:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e406:	7bfb      	ldrb	r3, [r7, #15]
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e410:	b480      	push	{r7}
 800e412:	b087      	sub	sp, #28
 800e414:	af00      	add	r7, sp, #0
 800e416:	60f8      	str	r0, [r7, #12]
 800e418:	60b9      	str	r1, [r7, #8]
 800e41a:	4613      	mov	r3, r2
 800e41c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e41e:	2301      	movs	r3, #1
 800e420:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e422:	2300      	movs	r3, #0
 800e424:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e426:	4b1f      	ldr	r3, [pc, #124]	@ (800e4a4 <FATFS_LinkDriverEx+0x94>)
 800e428:	7a5b      	ldrb	r3, [r3, #9]
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d131      	bne.n	800e494 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e430:	4b1c      	ldr	r3, [pc, #112]	@ (800e4a4 <FATFS_LinkDriverEx+0x94>)
 800e432:	7a5b      	ldrb	r3, [r3, #9]
 800e434:	b2db      	uxtb	r3, r3
 800e436:	461a      	mov	r2, r3
 800e438:	4b1a      	ldr	r3, [pc, #104]	@ (800e4a4 <FATFS_LinkDriverEx+0x94>)
 800e43a:	2100      	movs	r1, #0
 800e43c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e43e:	4b19      	ldr	r3, [pc, #100]	@ (800e4a4 <FATFS_LinkDriverEx+0x94>)
 800e440:	7a5b      	ldrb	r3, [r3, #9]
 800e442:	b2db      	uxtb	r3, r3
 800e444:	4a17      	ldr	r2, [pc, #92]	@ (800e4a4 <FATFS_LinkDriverEx+0x94>)
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	4413      	add	r3, r2
 800e44a:	68fa      	ldr	r2, [r7, #12]
 800e44c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e44e:	4b15      	ldr	r3, [pc, #84]	@ (800e4a4 <FATFS_LinkDriverEx+0x94>)
 800e450:	7a5b      	ldrb	r3, [r3, #9]
 800e452:	b2db      	uxtb	r3, r3
 800e454:	461a      	mov	r2, r3
 800e456:	4b13      	ldr	r3, [pc, #76]	@ (800e4a4 <FATFS_LinkDriverEx+0x94>)
 800e458:	4413      	add	r3, r2
 800e45a:	79fa      	ldrb	r2, [r7, #7]
 800e45c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e45e:	4b11      	ldr	r3, [pc, #68]	@ (800e4a4 <FATFS_LinkDriverEx+0x94>)
 800e460:	7a5b      	ldrb	r3, [r3, #9]
 800e462:	b2db      	uxtb	r3, r3
 800e464:	1c5a      	adds	r2, r3, #1
 800e466:	b2d1      	uxtb	r1, r2
 800e468:	4a0e      	ldr	r2, [pc, #56]	@ (800e4a4 <FATFS_LinkDriverEx+0x94>)
 800e46a:	7251      	strb	r1, [r2, #9]
 800e46c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e46e:	7dbb      	ldrb	r3, [r7, #22]
 800e470:	3330      	adds	r3, #48	@ 0x30
 800e472:	b2da      	uxtb	r2, r3
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	3301      	adds	r3, #1
 800e47c:	223a      	movs	r2, #58	@ 0x3a
 800e47e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	3302      	adds	r3, #2
 800e484:	222f      	movs	r2, #47	@ 0x2f
 800e486:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	3303      	adds	r3, #3
 800e48c:	2200      	movs	r2, #0
 800e48e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e490:	2300      	movs	r3, #0
 800e492:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e494:	7dfb      	ldrb	r3, [r7, #23]
}
 800e496:	4618      	mov	r0, r3
 800e498:	371c      	adds	r7, #28
 800e49a:	46bd      	mov	sp, r7
 800e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a0:	4770      	bx	lr
 800e4a2:	bf00      	nop
 800e4a4:	20013678 	.word	0x20013678

0800e4a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	6839      	ldr	r1, [r7, #0]
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f7ff ffaa 	bl	800e410 <FATFS_LinkDriverEx>
 800e4bc:	4603      	mov	r3, r0
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
	...

0800e4c8 <Log_Init>:
UART_HandleTypeDef* log_huart;
QueueHandle_t xLogQueue;
SemaphoreHandle_t xLogMutex;

void Log_Init(UART_HandleTypeDef* huart)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
	log_huart = huart;
 800e4d0:	4a04      	ldr	r2, [pc, #16]	@ (800e4e4 <Log_Init+0x1c>)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6013      	str	r3, [r2, #0]
}
 800e4d6:	bf00      	nop
 800e4d8:	370c      	adds	r7, #12
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	20013684 	.word	0x20013684

0800e4e8 <Log_OS_Resources_Init>:

void Log_OS_Resources_Init()
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 800e4ee:	af00      	add	r7, sp, #0
	xLogQueue = xQueueCreate(4, sizeof(LogMsgStruct));
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	2164      	movs	r1, #100	@ 0x64
 800e4f4:	2004      	movs	r0, #4
 800e4f6:	f7fa fba7 	bl	8008c48 <xQueueGenericCreate>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	4a1d      	ldr	r2, [pc, #116]	@ (800e574 <Log_OS_Resources_Init+0x8c>)
 800e4fe:	6013      	str	r3, [r2, #0]
	xLogMutex = xSemaphoreCreateMutex();
 800e500:	2001      	movs	r0, #1
 800e502:	f7fa fc1b 	bl	8008d3c <xQueueCreateMutex>
 800e506:	4603      	mov	r3, r0
 800e508:	4a1b      	ldr	r2, [pc, #108]	@ (800e578 <Log_OS_Resources_Init+0x90>)
 800e50a:	6013      	str	r3, [r2, #0]

	// creat and clear
	FIL logFile;
	FRESULT fr;
	xSemaphoreTake(xLogMutex, portMAX_DELAY);
 800e50c:	4b1a      	ldr	r3, [pc, #104]	@ (800e578 <Log_OS_Resources_Init+0x90>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f04f 31ff 	mov.w	r1, #4294967295
 800e514:	4618      	mov	r0, r3
 800e516:	f7fa fea9 	bl	800926c <xQueueSemaphoreTake>
	fr = f_open(&logFile, "log.txt", FA_WRITE | FA_CREATE_ALWAYS);
 800e51a:	1d3b      	adds	r3, r7, #4
 800e51c:	220a      	movs	r2, #10
 800e51e:	4917      	ldr	r1, [pc, #92]	@ (800e57c <Log_OS_Resources_Init+0x94>)
 800e520:	4618      	mov	r0, r3
 800e522:	f7ff f989 	bl	800d838 <f_open>
 800e526:	4603      	mov	r3, r0
 800e528:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
	if (fr == FR_OK) {
 800e52c:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 800e530:	2b00      	cmp	r3, #0
 800e532:	d10a      	bne.n	800e54a <Log_OS_Resources_Init+0x62>
		f_close(&logFile);
 800e534:	1d3b      	adds	r3, r7, #4
 800e536:	4618      	mov	r0, r3
 800e538:	f7ff fe6a 	bl	800e210 <f_close>
		SendMsg(log_huart, "Log file cleared.\r\n");
 800e53c:	4b10      	ldr	r3, [pc, #64]	@ (800e580 <Log_OS_Resources_Init+0x98>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4910      	ldr	r1, [pc, #64]	@ (800e584 <Log_OS_Resources_Init+0x9c>)
 800e542:	4618      	mov	r0, r3
 800e544:	f7f2 fd36 	bl	8000fb4 <SendMsg>
 800e548:	e007      	b.n	800e55a <Log_OS_Resources_Init+0x72>
	} else {
		SendMsg(log_huart, "Failed to clear log file, error = %d\r\n", fr);
 800e54a:	4b0d      	ldr	r3, [pc, #52]	@ (800e580 <Log_OS_Resources_Init+0x98>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f897 2237 	ldrb.w	r2, [r7, #567]	@ 0x237
 800e552:	490d      	ldr	r1, [pc, #52]	@ (800e588 <Log_OS_Resources_Init+0xa0>)
 800e554:	4618      	mov	r0, r3
 800e556:	f7f2 fd2d 	bl	8000fb4 <SendMsg>
	}
	xSemaphoreGive(xLogMutex);
 800e55a:	4b07      	ldr	r3, [pc, #28]	@ (800e578 <Log_OS_Resources_Init+0x90>)
 800e55c:	6818      	ldr	r0, [r3, #0]
 800e55e:	2300      	movs	r3, #0
 800e560:	2200      	movs	r2, #0
 800e562:	2100      	movs	r1, #0
 800e564:	f7fa fc02 	bl	8008d6c <xQueueGenericSend>
}
 800e568:	bf00      	nop
 800e56a:	f507 770e 	add.w	r7, r7, #568	@ 0x238
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	20013688 	.word	0x20013688
 800e578:	2001368c 	.word	0x2001368c
 800e57c:	08011878 	.word	0x08011878
 800e580:	20013684 	.word	0x20013684
 800e584:	08011880 	.word	0x08011880
 800e588:	08011894 	.word	0x08011894

0800e58c <LogWriter>:

void LogWriter(const char *format, ...)
{
 800e58c:	b40f      	push	{r0, r1, r2, r3}
 800e58e:	b580      	push	{r7, lr}
 800e590:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800e594:	af02      	add	r7, sp, #8
  char* buf[100];
  va_list args;
  va_start(args, format);
 800e596:	f507 7207 	add.w	r2, r7, #540	@ 0x21c
 800e59a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800e59e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800e5a2:	601a      	str	r2, [r3, #0]
  vsnprintf(buf, sizeof(buf), format, args);
 800e5a4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800e5a8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800e5ac:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 800e5b6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800e5ba:	f001 fb8b 	bl	800fcd4 <vsniprintf>
  va_end(args);

  char time[20];
  getTimeSinceStart(time, sizeof(time));
 800e5be:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800e5c2:	2114      	movs	r1, #20
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f001 f8dd 	bl	800f784 <getTimeSinceStart>

  LogMsgStruct logMsg;
  snprintf(logMsg.msg, sizeof(logMsg.msg), "%s  %s\n\r", time, buf);
 800e5ca:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800e5ce:	1d38      	adds	r0, r7, #4
 800e5d0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	4613      	mov	r3, r2
 800e5d8:	4a0d      	ldr	r2, [pc, #52]	@ (800e610 <LogWriter+0x84>)
 800e5da:	2164      	movs	r1, #100	@ 0x64
 800e5dc:	f001 fa82 	bl	800fae4 <sniprintf>
  if (xQueueSend(xLogQueue, &logMsg, pdMS_TO_TICKS(100)) != pdPASS)
 800e5e0:	4b0c      	ldr	r3, [pc, #48]	@ (800e614 <LogWriter+0x88>)
 800e5e2:	6818      	ldr	r0, [r3, #0]
 800e5e4:	1d39      	adds	r1, r7, #4
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	2264      	movs	r2, #100	@ 0x64
 800e5ea:	f7fa fbbf 	bl	8008d6c <xQueueGenericSend>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d005      	beq.n	800e600 <LogWriter+0x74>
  {
	  SendMsg(log_huart, "Failed to send log message!\r\n");
 800e5f4:	4b08      	ldr	r3, [pc, #32]	@ (800e618 <LogWriter+0x8c>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4908      	ldr	r1, [pc, #32]	@ (800e61c <LogWriter+0x90>)
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7f2 fcda 	bl	8000fb4 <SendMsg>
  }
}
 800e600:	bf00      	nop
 800e602:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800e606:	46bd      	mov	sp, r7
 800e608:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e60c:	b004      	add	sp, #16
 800e60e:	4770      	bx	lr
 800e610:	080118bc 	.word	0x080118bc
 800e614:	20013688 	.word	0x20013688
 800e618:	20013684 	.word	0x20013684
 800e61c:	080118c8 	.word	0x080118c8

0800e620 <PrintLogFile>:

 void PrintLogFile(void) {
 800e620:	b580      	push	{r7, lr}
 800e622:	f5ad 7d2e 	sub.w	sp, sp, #696	@ 0x2b8
 800e626:	af00      	add	r7, sp, #0
	FIL logFile;
	FRESULT fr;
	UINT br;
	char buffer[128];
	xSemaphoreTake(xLogMutex, portMAX_DELAY);
 800e628:	4b35      	ldr	r3, [pc, #212]	@ (800e700 <PrintLogFile+0xe0>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f04f 31ff 	mov.w	r1, #4294967295
 800e630:	4618      	mov	r0, r3
 800e632:	f7fa fe1b 	bl	800926c <xQueueSemaphoreTake>
	fr = f_open(&logFile, "log.txt", FA_READ);
 800e636:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800e63a:	2201      	movs	r2, #1
 800e63c:	4931      	ldr	r1, [pc, #196]	@ (800e704 <PrintLogFile+0xe4>)
 800e63e:	4618      	mov	r0, r3
 800e640:	f7ff f8fa 	bl	800d838 <f_open>
 800e644:	4603      	mov	r3, r0
 800e646:	f887 32b7 	strb.w	r3, [r7, #695]	@ 0x2b7
	if (fr != FR_OK) {
 800e64a:	f897 32b7 	ldrb.w	r3, [r7, #695]	@ 0x2b7
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d00f      	beq.n	800e672 <PrintLogFile+0x52>
		SendMsg(log_huart, "Failed to open log.txt (Error: %d)\r\n", fr);
 800e652:	4b2d      	ldr	r3, [pc, #180]	@ (800e708 <PrintLogFile+0xe8>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	f897 22b7 	ldrb.w	r2, [r7, #695]	@ 0x2b7
 800e65a:	492c      	ldr	r1, [pc, #176]	@ (800e70c <PrintLogFile+0xec>)
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7f2 fca9 	bl	8000fb4 <SendMsg>
		xSemaphoreGive(xLogMutex);
 800e662:	4b27      	ldr	r3, [pc, #156]	@ (800e700 <PrintLogFile+0xe0>)
 800e664:	6818      	ldr	r0, [r3, #0]
 800e666:	2300      	movs	r3, #0
 800e668:	2200      	movs	r2, #0
 800e66a:	2100      	movs	r1, #0
 800e66c:	f7fa fb7e 	bl	8008d6c <xQueueGenericSend>
 800e670:	e042      	b.n	800e6f8 <PrintLogFile+0xd8>
		return;
	}
	SendMsg(log_huart, "\r\nLog file contents:\r\n");
 800e672:	4b25      	ldr	r3, [pc, #148]	@ (800e708 <PrintLogFile+0xe8>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	4926      	ldr	r1, [pc, #152]	@ (800e710 <PrintLogFile+0xf0>)
 800e678:	4618      	mov	r0, r3
 800e67a:	f7f2 fc9b 	bl	8000fb4 <SendMsg>
	do {
		fr = f_read(&logFile, buffer, sizeof(buffer) - 1, &br);
 800e67e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800e682:	4639      	mov	r1, r7
 800e684:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 800e688:	227f      	movs	r2, #127	@ 0x7f
 800e68a:	f7ff fa8f 	bl	800dbac <f_read>
 800e68e:	4603      	mov	r3, r0
 800e690:	f887 32b7 	strb.w	r3, [r7, #695]	@ 0x2b7
		if (fr != FR_OK) {
 800e694:	f897 32b7 	ldrb.w	r3, [r7, #695]	@ 0x2b7
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d008      	beq.n	800e6ae <PrintLogFile+0x8e>
			SendMsg(log_huart, "Error reading log.txt (Error: %d)\r\n", fr);
 800e69c:	4b1a      	ldr	r3, [pc, #104]	@ (800e708 <PrintLogFile+0xe8>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f897 22b7 	ldrb.w	r2, [r7, #695]	@ 0x2b7
 800e6a4:	491b      	ldr	r1, [pc, #108]	@ (800e714 <PrintLogFile+0xf4>)
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7f2 fc84 	bl	8000fb4 <SendMsg>
			break;
 800e6ac:	e018      	b.n	800e6e0 <PrintLogFile+0xc0>
		}
		buffer[br] = '\0';
 800e6ae:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800e6b2:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 800e6bc:	f5a2 722e 	sub.w	r2, r2, #696	@ 0x2b8
 800e6c0:	2100      	movs	r1, #0
 800e6c2:	54d1      	strb	r1, [r2, r3]
		SendMsg(log_huart, "%s", buffer);
 800e6c4:	4b10      	ldr	r3, [pc, #64]	@ (800e708 <PrintLogFile+0xe8>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	463a      	mov	r2, r7
 800e6ca:	4913      	ldr	r1, [pc, #76]	@ (800e718 <PrintLogFile+0xf8>)
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7f2 fc71 	bl	8000fb4 <SendMsg>
	} while (br == sizeof(buffer) - 1);
 800e6d2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800e6d6:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	2b7f      	cmp	r3, #127	@ 0x7f
 800e6de:	d0ce      	beq.n	800e67e <PrintLogFile+0x5e>
	f_close(&logFile);
 800e6e0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7ff fd93 	bl	800e210 <f_close>
	xSemaphoreGive(xLogMutex);
 800e6ea:	4b05      	ldr	r3, [pc, #20]	@ (800e700 <PrintLogFile+0xe0>)
 800e6ec:	6818      	ldr	r0, [r3, #0]
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	2100      	movs	r1, #0
 800e6f4:	f7fa fb3a 	bl	8008d6c <xQueueGenericSend>
 }
 800e6f8:	f507 772e 	add.w	r7, r7, #696	@ 0x2b8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	2001368c 	.word	0x2001368c
 800e704:	08011878 	.word	0x08011878
 800e708:	20013684 	.word	0x20013684
 800e70c:	080118e8 	.word	0x080118e8
 800e710:	08011910 	.word	0x08011910
 800e714:	08011928 	.word	0x08011928
 800e718:	0801194c 	.word	0x0801194c

0800e71c <LogHandler>:

 void LogHandler(void *pvParameters) {
 800e71c:	b580      	push	{r7, lr}
 800e71e:	f5ad 7d2a 	sub.w	sp, sp, #680	@ 0x2a8
 800e722:	af00      	add	r7, sp, #0
 800e724:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800e728:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800e72c:	6018      	str	r0, [r3, #0]
	FIL logFile;
	FRESULT fr;
	UINT bw;
	LogMsgStruct logMsg;
	bool fileOpened = false;
 800e72e:	2300      	movs	r3, #0
 800e730:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7

	while(1){
		if (xQueueReceive(xLogQueue, &logMsg, portMAX_DELAY) == pdPASS) {
 800e734:	4b40      	ldr	r3, [pc, #256]	@ (800e838 <LogHandler+0x11c>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	f107 010c 	add.w	r1, r7, #12
 800e73c:	f04f 32ff 	mov.w	r2, #4294967295
 800e740:	4618      	mov	r0, r3
 800e742:	f7fa fcb1 	bl	80090a8 <xQueueReceive>
 800e746:	4603      	mov	r3, r0
 800e748:	2b01      	cmp	r3, #1
 800e74a:	d16f      	bne.n	800e82c <LogHandler+0x110>
			xSemaphoreTake(xLogMutex, portMAX_DELAY);
 800e74c:	4b3b      	ldr	r3, [pc, #236]	@ (800e83c <LogHandler+0x120>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f04f 31ff 	mov.w	r1, #4294967295
 800e754:	4618      	mov	r0, r3
 800e756:	f7fa fd89 	bl	800926c <xQueueSemaphoreTake>
			if(!fileOpened) {
 800e75a:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800e75e:	f083 0301 	eor.w	r3, r3, #1
 800e762:	b2db      	uxtb	r3, r3
 800e764:	2b00      	cmp	r3, #0
 800e766:	d020      	beq.n	800e7aa <LogHandler+0x8e>
				fr = f_open(&logFile, "log.txt", FA_OPEN_APPEND | FA_WRITE);
 800e768:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e76c:	2232      	movs	r2, #50	@ 0x32
 800e76e:	4934      	ldr	r1, [pc, #208]	@ (800e840 <LogHandler+0x124>)
 800e770:	4618      	mov	r0, r3
 800e772:	f7ff f861 	bl	800d838 <f_open>
 800e776:	4603      	mov	r3, r0
 800e778:	f887 32a6 	strb.w	r3, [r7, #678]	@ 0x2a6
				if (fr != FR_OK){
 800e77c:	f897 32a6 	ldrb.w	r3, [r7, #678]	@ 0x2a6
 800e780:	2b00      	cmp	r3, #0
 800e782:	d00f      	beq.n	800e7a4 <LogHandler+0x88>
					SendMsg(log_huart, "LogTask: Failed to open log.txt, error = %d\r\n", fr);
 800e784:	4b2f      	ldr	r3, [pc, #188]	@ (800e844 <LogHandler+0x128>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f897 22a6 	ldrb.w	r2, [r7, #678]	@ 0x2a6
 800e78c:	492e      	ldr	r1, [pc, #184]	@ (800e848 <LogHandler+0x12c>)
 800e78e:	4618      	mov	r0, r3
 800e790:	f7f2 fc10 	bl	8000fb4 <SendMsg>
					xSemaphoreGive(xLogMutex);
 800e794:	4b29      	ldr	r3, [pc, #164]	@ (800e83c <LogHandler+0x120>)
 800e796:	6818      	ldr	r0, [r3, #0]
 800e798:	2300      	movs	r3, #0
 800e79a:	2200      	movs	r2, #0
 800e79c:	2100      	movs	r1, #0
 800e79e:	f7fa fae5 	bl	8008d6c <xQueueGenericSend>
					continue;
 800e7a2:	e047      	b.n	800e834 <LogHandler+0x118>
				}
				fileOpened = true;
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
			}

			fr = f_write(&logFile, logMsg.msg, strlen(logMsg.msg), &bw);
 800e7aa:	f107 030c 	add.w	r3, r7, #12
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7f1 fd18 	bl	80001e4 <strlen>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800e7ba:	f107 010c 	add.w	r1, r7, #12
 800e7be:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 800e7c2:	f7ff fb32 	bl	800de2a <f_write>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	f887 32a6 	strb.w	r3, [r7, #678]	@ 0x2a6
			if (fr == FR_OK){
 800e7cc:	f897 32a6 	ldrb.w	r3, [r7, #678]	@ 0x2a6
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d11c      	bne.n	800e80e <LogHandler+0xf2>
				f_sync(&logFile);
 800e7d4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7ff fc9b 	bl	800e114 <f_sync>
				SendMsg(log_huart, "LogTask: Wrote log entry.\r\n");
 800e7de:	4b19      	ldr	r3, [pc, #100]	@ (800e844 <LogHandler+0x128>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	491a      	ldr	r1, [pc, #104]	@ (800e84c <LogHandler+0x130>)
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7f2 fbe5 	bl	8000fb4 <SendMsg>
				f_close(&logFile);
 800e7ea:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7ff fd0e 	bl	800e210 <f_close>
				fileOpened = false;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
				xSemaphoreGive(xLogMutex);
 800e7fa:	4b10      	ldr	r3, [pc, #64]	@ (800e83c <LogHandler+0x120>)
 800e7fc:	6818      	ldr	r0, [r3, #0]
 800e7fe:	2300      	movs	r3, #0
 800e800:	2200      	movs	r2, #0
 800e802:	2100      	movs	r1, #0
 800e804:	f7fa fab2 	bl	8008d6c <xQueueGenericSend>
				PrintLogFile();
 800e808:	f7ff ff0a 	bl	800e620 <PrintLogFile>
 800e80c:	e00e      	b.n	800e82c <LogHandler+0x110>
			} else {
				SendMsg(log_huart, "LogTask: f_write error: %d\r\n", fr);
 800e80e:	4b0d      	ldr	r3, [pc, #52]	@ (800e844 <LogHandler+0x128>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f897 22a6 	ldrb.w	r2, [r7, #678]	@ 0x2a6
 800e816:	490e      	ldr	r1, [pc, #56]	@ (800e850 <LogHandler+0x134>)
 800e818:	4618      	mov	r0, r3
 800e81a:	f7f2 fbcb 	bl	8000fb4 <SendMsg>
				xSemaphoreGive(xLogMutex);
 800e81e:	4b07      	ldr	r3, [pc, #28]	@ (800e83c <LogHandler+0x120>)
 800e820:	6818      	ldr	r0, [r3, #0]
 800e822:	2300      	movs	r3, #0
 800e824:	2200      	movs	r2, #0
 800e826:	2100      	movs	r1, #0
 800e828:	f7fa faa0 	bl	8008d6c <xQueueGenericSend>
			}
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 800e82c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800e830:	f7fb f8f2 	bl	8009a18 <vTaskDelay>
		if (xQueueReceive(xLogQueue, &logMsg, portMAX_DELAY) == pdPASS) {
 800e834:	e77e      	b.n	800e734 <LogHandler+0x18>
 800e836:	bf00      	nop
 800e838:	20013688 	.word	0x20013688
 800e83c:	2001368c 	.word	0x2001368c
 800e840:	08011878 	.word	0x08011878
 800e844:	20013684 	.word	0x20013684
 800e848:	08011950 	.word	0x08011950
 800e84c:	08011980 	.word	0x08011980
 800e850:	0801199c 	.word	0x0801199c

0800e854 <SD_Init>:

FATFS fs;
uint16_t NumObs = 0;

void SD_Init(UART_HandleTypeDef *huart)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
	sd_huart = huart;
 800e85c:	4a05      	ldr	r2, [pc, #20]	@ (800e874 <SD_Init+0x20>)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6013      	str	r3, [r2, #0]
	Mount_SD();
 800e862:	f000 f9a7 	bl	800ebb4 <Mount_SD>
	GetFileNumber();
 800e866:	f000 f977 	bl	800eb58 <GetFileNumber>
}
 800e86a:	bf00      	nop
 800e86c:	3708      	adds	r7, #8
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	20013690 	.word	0x20013690

0800e878 <SD_OS_Resources_Init>:

void SD_OS_Resources_Init()
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	af00      	add	r7, sp, #0
	xSDQueue = xQueueCreate(4, sizeof(SDMsgStruct));
 800e87c:	2200      	movs	r2, #0
 800e87e:	2164      	movs	r1, #100	@ 0x64
 800e880:	2004      	movs	r0, #4
 800e882:	f7fa f9e1 	bl	8008c48 <xQueueGenericCreate>
 800e886:	4603      	mov	r3, r0
 800e888:	4a01      	ldr	r2, [pc, #4]	@ (800e890 <SD_OS_Resources_Init+0x18>)
 800e88a:	6013      	str	r3, [r2, #0]
}
 800e88c:	bf00      	nop
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	20013a70 	.word	0x20013a70

0800e894 <StorageParse>:


FRESULT StorageParse(const char *pRequestedExtension)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b0a2      	sub	sp, #136	@ 0x88
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
  FRESULT res = FR_OK;
 800e89c:	2300      	movs	r3, #0
 800e89e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  char *ext_dot;

  char lower_req_ext[16]; // Buffer for lowercase requested extension
  char file_ext_lower[16]; // Buffer for lowercase file extension

  if (pRequestedExtension == NULL || strlen(pRequestedExtension) == 0 || strlen(pRequestedExtension) >= sizeof(lower_req_ext)) {
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d009      	beq.n	800e8bc <StorageParse+0x28>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d005      	beq.n	800e8bc <StorageParse+0x28>
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f7f1 fc97 	bl	80001e4 <strlen>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	2b0f      	cmp	r3, #15
 800e8ba:	d907      	bls.n	800e8cc <StorageParse+0x38>
      SendMsg(sd_huart, "StorageParse: Invalid or too long extension provided.\r\n");
 800e8bc:	4b9b      	ldr	r3, [pc, #620]	@ (800eb2c <StorageParse+0x298>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	499b      	ldr	r1, [pc, #620]	@ (800eb30 <StorageParse+0x29c>)
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7f2 fb76 	bl	8000fb4 <SendMsg>
      return FR_INVALID_PARAMETER;
 800e8c8:	2313      	movs	r3, #19
 800e8ca:	e12b      	b.n	800eb24 <StorageParse+0x290>
  }

  // Convert requested extension to lowercase for consistent comparison
  strncpy(lower_req_ext, pRequestedExtension, sizeof(lower_req_ext) - 1);
 800e8cc:	f107 0318 	add.w	r3, r7, #24
 800e8d0:	220f      	movs	r2, #15
 800e8d2:	6879      	ldr	r1, [r7, #4]
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f001 fa13 	bl	800fd00 <strncpy>
  lower_req_ext[sizeof(lower_req_ext) - 1] = '\0';
 800e8da:	2300      	movs	r3, #0
 800e8dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  for (int i = 0; lower_req_ext[i]; i++) {
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e8e6:	e024      	b.n	800e932 <StorageParse+0x9e>
    lower_req_ext[i] = tolower((unsigned char)lower_req_ext[i]);
 800e8e8:	f107 0218 	add.w	r2, r7, #24
 800e8ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e8f0:	4413      	add	r3, r2
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 800e8f8:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800e8fc:	3301      	adds	r3, #1
 800e8fe:	4a8d      	ldr	r2, [pc, #564]	@ (800eb34 <StorageParse+0x2a0>)
 800e900:	4413      	add	r3, r2
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	f003 0303 	and.w	r3, r3, #3
 800e908:	2b01      	cmp	r3, #1
 800e90a:	d103      	bne.n	800e914 <StorageParse+0x80>
 800e90c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800e910:	3320      	adds	r3, #32
 800e912:	e001      	b.n	800e918 <StorageParse+0x84>
 800e914:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800e918:	b2d9      	uxtb	r1, r3
 800e91a:	f107 0218 	add.w	r2, r7, #24
 800e91e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e922:	4413      	add	r3, r2
 800e924:	460a      	mov	r2, r1
 800e926:	701a      	strb	r2, [r3, #0]
  for (int i = 0; lower_req_ext[i]; i++) {
 800e928:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e92c:	3301      	adds	r3, #1
 800e92e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e932:	f107 0218 	add.w	r2, r7, #24
 800e936:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e93a:	4413      	add	r3, r2
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d1d2      	bne.n	800e8e8 <StorageParse+0x54>
  }

  SendMsg(sd_huart, "\r\nParsing SD card for *.%s files...\r\n", lower_req_ext);
 800e942:	4b7a      	ldr	r3, [pc, #488]	@ (800eb2c <StorageParse+0x298>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f107 0218 	add.w	r2, r7, #24
 800e94a:	497b      	ldr	r1, [pc, #492]	@ (800eb38 <StorageParse+0x2a4>)
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7f2 fb31 	bl	8000fb4 <SendMsg>

  res = f_opendir(&dir, "");
 800e952:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e956:	4979      	ldr	r1, [pc, #484]	@ (800eb3c <StorageParse+0x2a8>)
 800e958:	4618      	mov	r0, r3
 800e95a:	f7ff fc83 	bl	800e264 <f_opendir>
 800e95e:	4603      	mov	r3, r0
 800e960:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  if (res != FR_OK) {
 800e964:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d00a      	beq.n	800e982 <StorageParse+0xee>
      SendMsg(sd_huart, "Failed to open root directory! Error: %d\r\n", res);
 800e96c:	4b6f      	ldr	r3, [pc, #444]	@ (800eb2c <StorageParse+0x298>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800e974:	4972      	ldr	r1, [pc, #456]	@ (800eb40 <StorageParse+0x2ac>)
 800e976:	4618      	mov	r0, r3
 800e978:	f7f2 fb1c 	bl	8000fb4 <SendMsg>
      return res;
 800e97c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800e980:	e0d0      	b.n	800eb24 <StorageParse+0x290>
  }
  FileList.ptr = 0; // Reset file list for each parse
 800e982:	4b70      	ldr	r3, [pc, #448]	@ (800eb44 <StorageParse+0x2b0>)
 800e984:	2200      	movs	r2, #0
 800e986:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8

  if(res == FR_OK)
 800e98a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800e98e:	2b00      	cmp	r3, #0
 800e990:	f040 80b3 	bne.w	800eafa <StorageParse+0x266>
  {
    while(1)
    {
      res = f_readdir(&dir, &fno);
 800e994:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800e998:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e99c:	4611      	mov	r1, r2
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7ff fcf9 	bl	800e396 <f_readdir>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      if(res != FR_OK || fno.fname[0] == 0)
 800e9aa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	f040 80a3 	bne.w	800eafa <StorageParse+0x266>
 800e9b4:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	f000 809e 	beq.w	800eafa <StorageParse+0x266>
      {
        break;
      }
      if(fno.fname[0] == '.') // Skip hidden files/directories and current/parent dir entries
 800e9be:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800e9c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e9c4:	f000 8097 	beq.w	800eaf6 <StorageParse+0x262>
      {
        continue;
      }

      fn = fno.fname;
 800e9c8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800e9cc:	3309      	adds	r3, #9
 800e9ce:	67bb      	str	r3, [r7, #120]	@ 0x78

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 800e9d0:	4b5c      	ldr	r3, [pc, #368]	@ (800eb44 <StorageParse+0x2b0>)
 800e9d2:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 800e9d6:	2b17      	cmp	r3, #23
 800e9d8:	f200 8086 	bhi.w	800eae8 <StorageParse+0x254>
      {
        if((fno.fattrib & AM_DIR) == 0) // If it's a file
 800e9dc:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800e9e0:	f003 0310 	and.w	r3, r3, #16
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d1d5      	bne.n	800e994 <StorageParse+0x100>
        {
          ext_dot = strrchr(fn, '.'); // Find the last dot
 800e9e8:	212e      	movs	r1, #46	@ 0x2e
 800e9ea:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800e9ec:	f001 f99b 	bl	800fd26 <strrchr>
 800e9f0:	6778      	str	r0, [r7, #116]	@ 0x74
          // Ensure a dot is found, it's not the first character (e.g. ".hiddenfile"),
          // and there's something after the dot.
          if (ext_dot != NULL && ext_dot != fn && *(ext_dot + 1) != '\0') {
 800e9f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d0cd      	beq.n	800e994 <StorageParse+0x100>
 800e9f8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800e9fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d0c9      	beq.n	800e994 <StorageParse+0x100>
 800ea00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ea02:	3301      	adds	r3, #1
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d0c4      	beq.n	800e994 <StorageParse+0x100>
            strncpy(file_ext_lower, ext_dot + 1, sizeof(file_ext_lower) - 1);
 800ea0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ea0c:	1c59      	adds	r1, r3, #1
 800ea0e:	f107 0308 	add.w	r3, r7, #8
 800ea12:	220f      	movs	r2, #15
 800ea14:	4618      	mov	r0, r3
 800ea16:	f001 f973 	bl	800fd00 <strncpy>
            file_ext_lower[sizeof(file_ext_lower) - 1] = '\0';
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	75fb      	strb	r3, [r7, #23]
            for (int i = 0; file_ext_lower[i]; i++) {
 800ea1e:	2300      	movs	r3, #0
 800ea20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ea22:	e020      	b.n	800ea66 <StorageParse+0x1d2>
                file_ext_lower[i] = tolower((unsigned char)file_ext_lower[i]);
 800ea24:	f107 0208 	add.w	r2, r7, #8
 800ea28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ea2a:	4413      	add	r3, r2
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800ea32:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800ea36:	3301      	adds	r3, #1
 800ea38:	4a3e      	ldr	r2, [pc, #248]	@ (800eb34 <StorageParse+0x2a0>)
 800ea3a:	4413      	add	r3, r2
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	f003 0303 	and.w	r3, r3, #3
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d103      	bne.n	800ea4e <StorageParse+0x1ba>
 800ea46:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800ea4a:	3320      	adds	r3, #32
 800ea4c:	e001      	b.n	800ea52 <StorageParse+0x1be>
 800ea4e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800ea52:	b2d9      	uxtb	r1, r3
 800ea54:	f107 0208 	add.w	r2, r7, #8
 800ea58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ea5a:	4413      	add	r3, r2
 800ea5c:	460a      	mov	r2, r1
 800ea5e:	701a      	strb	r2, [r3, #0]
            for (int i = 0; file_ext_lower[i]; i++) {
 800ea60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ea62:	3301      	adds	r3, #1
 800ea64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ea66:	f107 0208 	add.w	r2, r7, #8
 800ea6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ea6c:	4413      	add	r3, r2
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d1d7      	bne.n	800ea24 <StorageParse+0x190>
            }

            if (strcmp(file_ext_lower, lower_req_ext) == 0)
 800ea74:	f107 0218 	add.w	r2, r7, #24
 800ea78:	f107 0308 	add.w	r3, r7, #8
 800ea7c:	4611      	mov	r1, r2
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7f1 fba6 	bl	80001d0 <strcmp>
 800ea84:	4603      	mov	r3, r0
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d184      	bne.n	800e994 <StorageParse+0x100>
            {
              strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 800ea8a:	4b2e      	ldr	r3, [pc, #184]	@ (800eb44 <StorageParse+0x2b0>)
 800ea8c:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 800ea90:	461a      	mov	r2, r3
 800ea92:	4613      	mov	r3, r2
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	4413      	add	r3, r2
 800ea98:	00db      	lsls	r3, r3, #3
 800ea9a:	4413      	add	r3, r2
 800ea9c:	4a29      	ldr	r2, [pc, #164]	@ (800eb44 <StorageParse+0x2b0>)
 800ea9e:	4413      	add	r3, r2
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	2228      	movs	r2, #40	@ 0x28
 800eaa4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f001 f92a 	bl	800fd00 <strncpy>
              FileList.file[FileList.ptr].type = FILETYPE_FILE; // Assuming FILETYPE_FILE is generic
 800eaac:	4b25      	ldr	r3, [pc, #148]	@ (800eb44 <StorageParse+0x2b0>)
 800eaae:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 800eab2:	461a      	mov	r2, r3
 800eab4:	4923      	ldr	r1, [pc, #140]	@ (800eb44 <StorageParse+0x2b0>)
 800eab6:	4613      	mov	r3, r2
 800eab8:	009b      	lsls	r3, r3, #2
 800eaba:	4413      	add	r3, r2
 800eabc:	00db      	lsls	r3, r3, #3
 800eabe:	4413      	add	r3, r2
 800eac0:	440b      	add	r3, r1
 800eac2:	2201      	movs	r2, #1
 800eac4:	701a      	strb	r2, [r3, #0]
              SendMsg(sd_huart, "Found *.%s file: %s\r\n", lower_req_ext, fn);
 800eac6:	4b19      	ldr	r3, [pc, #100]	@ (800eb2c <StorageParse+0x298>)
 800eac8:	6818      	ldr	r0, [r3, #0]
 800eaca:	f107 0218 	add.w	r2, r7, #24
 800eace:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ead0:	491d      	ldr	r1, [pc, #116]	@ (800eb48 <StorageParse+0x2b4>)
 800ead2:	f7f2 fa6f 	bl	8000fb4 <SendMsg>
              FileList.ptr++;
 800ead6:	4b1b      	ldr	r3, [pc, #108]	@ (800eb44 <StorageParse+0x2b0>)
 800ead8:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 800eadc:	3301      	adds	r3, #1
 800eade:	b29a      	uxth	r2, r3
 800eae0:	4b18      	ldr	r3, [pc, #96]	@ (800eb44 <StorageParse+0x2b0>)
 800eae2:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8
 800eae6:	e755      	b.n	800e994 <StorageParse+0x100>
            }
          }
        }
      } else {
        SendMsg(sd_huart, "File list full. Cannot add more files.\r\n");
 800eae8:	4b10      	ldr	r3, [pc, #64]	@ (800eb2c <StorageParse+0x298>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4917      	ldr	r1, [pc, #92]	@ (800eb4c <StorageParse+0x2b8>)
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7f2 fa60 	bl	8000fb4 <SendMsg>
        break; // Stop if file list is full
 800eaf4:	e001      	b.n	800eafa <StorageParse+0x266>
        continue;
 800eaf6:	bf00      	nop
      res = f_readdir(&dir, &fno);
 800eaf8:	e74c      	b.n	800e994 <StorageParse+0x100>
      }
    }
  }
  NumObs = FileList.ptr;
 800eafa:	4b12      	ldr	r3, [pc, #72]	@ (800eb44 <StorageParse+0x2b0>)
 800eafc:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	@ 0x3d8
 800eb00:	4b13      	ldr	r3, [pc, #76]	@ (800eb50 <StorageParse+0x2bc>)
 800eb02:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 800eb04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7ff fc1e 	bl	800e34a <f_closedir>
  SendMsg(sd_huart, "Total *.%s files found: %d\r\n", lower_req_ext, NumObs);
 800eb0e:	4b07      	ldr	r3, [pc, #28]	@ (800eb2c <StorageParse+0x298>)
 800eb10:	6818      	ldr	r0, [r3, #0]
 800eb12:	4b0f      	ldr	r3, [pc, #60]	@ (800eb50 <StorageParse+0x2bc>)
 800eb14:	881b      	ldrh	r3, [r3, #0]
 800eb16:	f107 0218 	add.w	r2, r7, #24
 800eb1a:	490e      	ldr	r1, [pc, #56]	@ (800eb54 <StorageParse+0x2c0>)
 800eb1c:	f7f2 fa4a 	bl	8000fb4 <SendMsg>
  return res;
 800eb20:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3788      	adds	r7, #136	@ 0x88
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	20013690 	.word	0x20013690
 800eb30:	080119bc 	.word	0x080119bc
 800eb34:	08012234 	.word	0x08012234
 800eb38:	080119f4 	.word	0x080119f4
 800eb3c:	08011a1c 	.word	0x08011a1c
 800eb40:	08011a20 	.word	0x08011a20
 800eb44:	20013694 	.word	0x20013694
 800eb48:	08011a4c 	.word	0x08011a4c
 800eb4c:	08011a64 	.word	0x08011a64
 800eb50:	20013ca4 	.word	0x20013ca4
 800eb54:	08011a90 	.word	0x08011a90

0800eb58 <GetFileNumber>:

uint16_t GetFileNumber(void)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	af00      	add	r7, sp, #0
	if (NumObs) return NumObs;
 800eb5c:	4b06      	ldr	r3, [pc, #24]	@ (800eb78 <GetFileNumber+0x20>)
 800eb5e:	881b      	ldrh	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d002      	beq.n	800eb6a <GetFileNumber+0x12>
 800eb64:	4b04      	ldr	r3, [pc, #16]	@ (800eb78 <GetFileNumber+0x20>)
 800eb66:	881b      	ldrh	r3, [r3, #0]
 800eb68:	e001      	b.n	800eb6e <GetFileNumber+0x16>
	else return -1;
 800eb6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr
 800eb78:	20013ca4 	.word	0x20013ca4

0800eb7c <SDParseHandler>:

void SDParseHandler(void *pvParameters)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b09c      	sub	sp, #112	@ 0x70
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  SDMsgStruct sdMsg;
  while (1)
  {
	if (xQueueReceive(xSDQueue, &sdMsg, portMAX_DELAY) == pdPASS) {
 800eb84:	4b0a      	ldr	r3, [pc, #40]	@ (800ebb0 <SDParseHandler+0x34>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f107 010c 	add.w	r1, r7, #12
 800eb8c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7fa fa89 	bl	80090a8 <xQueueReceive>
 800eb96:	4603      	mov	r3, r0
 800eb98:	2b01      	cmp	r3, #1
 800eb9a:	d104      	bne.n	800eba6 <SDParseHandler+0x2a>
		StorageParse(sdMsg.msg);
 800eb9c:	f107 030c 	add.w	r3, r7, #12
 800eba0:	4618      	mov	r0, r3
 800eba2:	f7ff fe77 	bl	800e894 <StorageParse>
//		SendMsg(sd_huart, "SDParseHandler\r\n");
	}
	 vTaskDelay(pdMS_TO_TICKS(500));
 800eba6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ebaa:	f7fa ff35 	bl	8009a18 <vTaskDelay>
	if (xQueueReceive(xSDQueue, &sdMsg, portMAX_DELAY) == pdPASS) {
 800ebae:	e7e9      	b.n	800eb84 <SDParseHandler+0x8>
 800ebb0:	20013a70 	.word	0x20013a70

0800ebb4 <Mount_SD>:
  }
}

void Mount_SD (void)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
	FRESULT fresult = f_mount(&fs, "", 1);
 800ebba:	2201      	movs	r2, #1
 800ebbc:	490d      	ldr	r1, [pc, #52]	@ (800ebf4 <Mount_SD+0x40>)
 800ebbe:	480e      	ldr	r0, [pc, #56]	@ (800ebf8 <Mount_SD+0x44>)
 800ebc0:	f7fe fdf4 	bl	800d7ac <f_mount>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	71fb      	strb	r3, [r7, #7]

	if (fresult != FR_OK) {
 800ebc8:	79fb      	ldrb	r3, [r7, #7]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d007      	beq.n	800ebde <Mount_SD+0x2a>
		SendMsg(sd_huart, "SD card mount failed with error code: %d\r\n", fresult);
 800ebce:	4b0b      	ldr	r3, [pc, #44]	@ (800ebfc <Mount_SD+0x48>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	79fa      	ldrb	r2, [r7, #7]
 800ebd4:	490a      	ldr	r1, [pc, #40]	@ (800ec00 <Mount_SD+0x4c>)
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7f2 f9ec 	bl	8000fb4 <SendMsg>
	} else {
		SendMsg(sd_huart, "SD card mounted Successfully.!\r\n");
	}
}
 800ebdc:	e005      	b.n	800ebea <Mount_SD+0x36>
		SendMsg(sd_huart, "SD card mounted Successfully.!\r\n");
 800ebde:	4b07      	ldr	r3, [pc, #28]	@ (800ebfc <Mount_SD+0x48>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	4908      	ldr	r1, [pc, #32]	@ (800ec04 <Mount_SD+0x50>)
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7f2 f9e5 	bl	8000fb4 <SendMsg>
}
 800ebea:	bf00      	nop
 800ebec:	3708      	adds	r7, #8
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	08011a1c 	.word	0x08011a1c
 800ebf8:	20013a74 	.word	0x20013a74
 800ebfc:	20013690 	.word	0x20013690
 800ec00:	08011ab0 	.word	0x08011ab0
 800ec04:	08011adc 	.word	0x08011adc

0800ec08 <command_Init>:
	{"logPrint", "Write log (Command => log message)", PrintLog},
	{NULL, NULL, NULL},
};

void command_Init(UART_HandleTypeDef* huart)
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b083      	sub	sp, #12
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
	shell_huart = huart;
 800ec10:	4a04      	ldr	r2, [pc, #16]	@ (800ec24 <command_Init+0x1c>)
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6013      	str	r3, [r2, #0]
}
 800ec16:	bf00      	nop
 800ec18:	370c      	adds	r7, #12
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec20:	4770      	bx	lr
 800ec22:	bf00      	nop
 800ec24:	20013ca8 	.word	0x20013ca8

0800ec28 <PrintLog>:

void PrintLog(uint8_t argc, char **argv)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	4603      	mov	r3, r0
 800ec30:	6039      	str	r1, [r7, #0]
 800ec32:	71fb      	strb	r3, [r7, #7]
	PrintLogFile();
 800ec34:	f7ff fcf4 	bl	800e620 <PrintLogFile>
}
 800ec38:	bf00      	nop
 800ec3a:	3708      	adds	r7, #8
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <WriteLog>:

void WriteLog(uint8_t argc, char **argv)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	4603      	mov	r3, r0
 800ec48:	6039      	str	r1, [r7, #0]
 800ec4a:	71fb      	strb	r3, [r7, #7]
	if(argc < 2) {
 800ec4c:	79fb      	ldrb	r3, [r7, #7]
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d806      	bhi.n	800ec60 <WriteLog+0x20>
		SendMsg(shell_huart, "\r\WriteLog: Not enough arguments for this command.\r\n");
 800ec52:	4b08      	ldr	r3, [pc, #32]	@ (800ec74 <WriteLog+0x34>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4908      	ldr	r1, [pc, #32]	@ (800ec78 <WriteLog+0x38>)
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7f2 f9ab 	bl	8000fb4 <SendMsg>
		return;
 800ec5e:	e005      	b.n	800ec6c <WriteLog+0x2c>
	}
	LogWriter(argv[1]);
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	3304      	adds	r3, #4
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7ff fc90 	bl	800e58c <LogWriter>
}
 800ec6c:	3708      	adds	r7, #8
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	20013ca8 	.word	0x20013ca8
 800ec78:	08011ca4 	.word	0x08011ca4

0800ec7c <ParseStorage>:

void ParseStorage(uint8_t argc, char **argv)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b09c      	sub	sp, #112	@ 0x70
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	4603      	mov	r3, r0
 800ec84:	6039      	str	r1, [r7, #0]
 800ec86:	71fb      	strb	r3, [r7, #7]
	if(argc < 2) {
 800ec88:	79fb      	ldrb	r3, [r7, #7]
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	d806      	bhi.n	800ec9c <ParseStorage+0x20>
		SendMsg(shell_huart, "\r\nParseStorage: Not enough arguments for this command.\r\n");
 800ec8e:	4b15      	ldr	r3, [pc, #84]	@ (800ece4 <ParseStorage+0x68>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	4915      	ldr	r1, [pc, #84]	@ (800ece8 <ParseStorage+0x6c>)
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7f2 f98d 	bl	8000fb4 <SendMsg>
 800ec9a:	e01f      	b.n	800ecdc <ParseStorage+0x60>
		return;
	}

	LogWriter("ParseStorage");
 800ec9c:	4813      	ldr	r0, [pc, #76]	@ (800ecec <ParseStorage+0x70>)
 800ec9e:	f7ff fc75 	bl	800e58c <LogWriter>
	SDMsgStruct sdMsg;
	strncpy(sdMsg.msg, argv[1], sizeof(sdMsg.msg)-1);
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	3304      	adds	r3, #4
 800eca6:	6819      	ldr	r1, [r3, #0]
 800eca8:	f107 030c 	add.w	r3, r7, #12
 800ecac:	2263      	movs	r2, #99	@ 0x63
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f001 f826 	bl	800fd00 <strncpy>
	sdMsg.msg[sizeof(sdMsg.msg)-1] = '\0';
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	if (xQueueSend(xSDQueue, &sdMsg, 0) != pdPASS) {
 800ecba:	4b0d      	ldr	r3, [pc, #52]	@ (800ecf0 <ParseStorage+0x74>)
 800ecbc:	6818      	ldr	r0, [r3, #0]
 800ecbe:	f107 010c 	add.w	r1, r7, #12
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	f7fa f851 	bl	8008d6c <xQueueGenericSend>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2b01      	cmp	r3, #1
 800ecce:	d005      	beq.n	800ecdc <ParseStorage+0x60>
		SendMsg(shell_huart, "\r\ParseStorage: Queue full or error.\r\n");
 800ecd0:	4b04      	ldr	r3, [pc, #16]	@ (800ece4 <ParseStorage+0x68>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4907      	ldr	r1, [pc, #28]	@ (800ecf4 <ParseStorage+0x78>)
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7f2 f96c 	bl	8000fb4 <SendMsg>
	}
}
 800ecdc:	3770      	adds	r7, #112	@ 0x70
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop
 800ece4:	20013ca8 	.word	0x20013ca8
 800ece8:	08011cd8 	.word	0x08011cd8
 800ecec:	08011d14 	.word	0x08011d14
 800ecf0:	20013a70 	.word	0x20013a70
 800ecf4:	08011d24 	.word	0x08011d24

0800ecf8 <LEDChangeColor>:

void LEDChangeColor(uint8_t argc, char **argv)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b086      	sub	sp, #24
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	4603      	mov	r3, r0
 800ed00:	6039      	str	r1, [r7, #0]
 800ed02:	71fb      	strb	r3, [r7, #7]
	if(argc < 4) {
 800ed04:	79fb      	ldrb	r3, [r7, #7]
 800ed06:	2b03      	cmp	r3, #3
 800ed08:	d806      	bhi.n	800ed18 <LEDChangeColor+0x20>
		SendMsg(shell_huart, "\r\ESP32SendMsg: Not enough arguments for this command.\r\n");
 800ed0a:	4b1b      	ldr	r3, [pc, #108]	@ (800ed78 <LEDChangeColor+0x80>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	491b      	ldr	r1, [pc, #108]	@ (800ed7c <LEDChangeColor+0x84>)
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7f2 f94f 	bl	8000fb4 <SendMsg>
 800ed16:	e02b      	b.n	800ed70 <LEDChangeColor+0x78>
		return;
	}

	LogWriter("LEDChangeColor");
 800ed18:	4819      	ldr	r0, [pc, #100]	@ (800ed80 <LEDChangeColor+0x88>)
 800ed1a:	f7ff fc37 	bl	800e58c <LogWriter>
	LEDMsgStruct LEDMsg;
	LEDMsg.r = (int)atoi(argv[1]);
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	3304      	adds	r3, #4
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4618      	mov	r0, r3
 800ed26:	f000 fd91 	bl	800f84c <atoi>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	60fb      	str	r3, [r7, #12]
	LEDMsg.g = (int)atoi(argv[2]);
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	3308      	adds	r3, #8
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4618      	mov	r0, r3
 800ed36:	f000 fd89 	bl	800f84c <atoi>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	613b      	str	r3, [r7, #16]
	LEDMsg.b = (int)atoi(argv[3]);
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	330c      	adds	r3, #12
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4618      	mov	r0, r3
 800ed46:	f000 fd81 	bl	800f84c <atoi>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	617b      	str	r3, [r7, #20]

	if (xQueueSend(xLEDQueue, &LEDMsg, 0) != pdPASS) {
 800ed4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ed84 <LEDChangeColor+0x8c>)
 800ed50:	6818      	ldr	r0, [r3, #0]
 800ed52:	f107 010c 	add.w	r1, r7, #12
 800ed56:	2300      	movs	r3, #0
 800ed58:	2200      	movs	r2, #0
 800ed5a:	f7fa f807 	bl	8008d6c <xQueueGenericSend>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	2b01      	cmp	r3, #1
 800ed62:	d005      	beq.n	800ed70 <LEDChangeColor+0x78>
		SendMsg(shell_huart, "\r\LEDMsg: Queue full or error.\r\n");
 800ed64:	4b04      	ldr	r3, [pc, #16]	@ (800ed78 <LEDChangeColor+0x80>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4907      	ldr	r1, [pc, #28]	@ (800ed88 <LEDChangeColor+0x90>)
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7f2 f922 	bl	8000fb4 <SendMsg>
	}
}
 800ed70:	3718      	adds	r7, #24
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	20013ca8 	.word	0x20013ca8
 800ed7c:	08011d4c 	.word	0x08011d4c
 800ed80:	08011d84 	.word	0x08011d84
 800ed84:	20013644 	.word	0x20013644
 800ed88:	08011d94 	.word	0x08011d94

0800ed8c <ESP32SendMsg>:

void ESP32SendMsg(uint8_t argc, char **argv)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b09c      	sub	sp, #112	@ 0x70
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	4603      	mov	r3, r0
 800ed94:	6039      	str	r1, [r7, #0]
 800ed96:	71fb      	strb	r3, [r7, #7]
	if(argc < 2) {
 800ed98:	79fb      	ldrb	r3, [r7, #7]
 800ed9a:	2b01      	cmp	r3, #1
 800ed9c:	d806      	bhi.n	800edac <ESP32SendMsg+0x20>
		SendMsg(shell_huart, "\r\ESP32SendMsg: Not enough arguments for this command.\r\n");
 800ed9e:	4b15      	ldr	r3, [pc, #84]	@ (800edf4 <ESP32SendMsg+0x68>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	4915      	ldr	r1, [pc, #84]	@ (800edf8 <ESP32SendMsg+0x6c>)
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7f2 f905 	bl	8000fb4 <SendMsg>
 800edaa:	e01f      	b.n	800edec <ESP32SendMsg+0x60>
		return;
	}

	LogWriter("ESP32SendMsg");
 800edac:	4813      	ldr	r0, [pc, #76]	@ (800edfc <ESP32SendMsg+0x70>)
 800edae:	f7ff fbed 	bl	800e58c <LogWriter>
	SDMsgStruct esp32Msg;
	strncpy(esp32Msg.msg, argv[1], sizeof(esp32Msg.msg)-1);
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	3304      	adds	r3, #4
 800edb6:	6819      	ldr	r1, [r3, #0]
 800edb8:	f107 030c 	add.w	r3, r7, #12
 800edbc:	2263      	movs	r2, #99	@ 0x63
 800edbe:	4618      	mov	r0, r3
 800edc0:	f000 ff9e 	bl	800fd00 <strncpy>
	esp32Msg.msg[sizeof(esp32Msg.msg)-1] = '\0';
 800edc4:	2300      	movs	r3, #0
 800edc6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	if (xQueueSend(xESP32Queue, &esp32Msg, 0) != pdPASS) {
 800edca:	4b0d      	ldr	r3, [pc, #52]	@ (800ee00 <ESP32SendMsg+0x74>)
 800edcc:	6818      	ldr	r0, [r3, #0]
 800edce:	f107 010c 	add.w	r1, r7, #12
 800edd2:	2300      	movs	r3, #0
 800edd4:	2200      	movs	r2, #0
 800edd6:	f7f9 ffc9 	bl	8008d6c <xQueueGenericSend>
 800edda:	4603      	mov	r3, r0
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d005      	beq.n	800edec <ESP32SendMsg+0x60>
		SendMsg(shell_huart, "\r\ESP32SendMsg: Queue full or error.\r\n");
 800ede0:	4b04      	ldr	r3, [pc, #16]	@ (800edf4 <ESP32SendMsg+0x68>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	4907      	ldr	r1, [pc, #28]	@ (800ee04 <ESP32SendMsg+0x78>)
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7f2 f8e4 	bl	8000fb4 <SendMsg>
	}
}
 800edec:	3770      	adds	r7, #112	@ 0x70
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	20013ca8 	.word	0x20013ca8
 800edf8:	08011d4c 	.word	0x08011d4c
 800edfc:	08011db4 	.word	0x08011db4
 800ee00:	2000080c 	.word	0x2000080c
 800ee04:	08011dc4 	.word	0x08011dc4

0800ee08 <LCDShowMsg>:

void LCDShowMsg(uint8_t argc, char **argv)
{
 800ee08:	b590      	push	{r4, r7, lr}
 800ee0a:	b08f      	sub	sp, #60	@ 0x3c
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	4603      	mov	r3, r0
 800ee10:	6039      	str	r1, [r7, #0]
 800ee12:	71fb      	strb	r3, [r7, #7]
	if(argc < 4) {
 800ee14:	79fb      	ldrb	r3, [r7, #7]
 800ee16:	2b03      	cmp	r3, #3
 800ee18:	d806      	bhi.n	800ee28 <LCDShowMsg+0x20>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Not enough arguments for this command.\r\n");
 800ee1a:	4b53      	ldr	r3, [pc, #332]	@ (800ef68 <LCDShowMsg+0x160>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	4953      	ldr	r1, [pc, #332]	@ (800ef6c <LCDShowMsg+0x164>)
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7f2 f8c7 	bl	8000fb4 <SendMsg>
        return;
 800ee26:	e09c      	b.n	800ef62 <LCDShowMsg+0x15a>
    }
	for(int j = 1; j <= 2; j++) {
 800ee28:	2301      	movs	r3, #1
 800ee2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee2c:	e027      	b.n	800ee7e <LCDShowMsg+0x76>
		for (int i = 0; argv[1][i]; i++) {
 800ee2e:	2300      	movs	r3, #0
 800ee30:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee32:	e019      	b.n	800ee68 <LCDShowMsg+0x60>
			if (argv[1][i] < '0' || argv[1][i] > '9') {
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	3304      	adds	r3, #4
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee3c:	4413      	add	r3, r2
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	2b2f      	cmp	r3, #47	@ 0x2f
 800ee42:	d907      	bls.n	800ee54 <LCDShowMsg+0x4c>
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	3304      	adds	r3, #4
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee4c:	4413      	add	r3, r2
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	2b39      	cmp	r3, #57	@ 0x39
 800ee52:	d906      	bls.n	800ee62 <LCDShowMsg+0x5a>
				SendMsg(shell_huart, "\r\nLCDShowMsg: Row and Column must be a number.\r\n");
 800ee54:	4b44      	ldr	r3, [pc, #272]	@ (800ef68 <LCDShowMsg+0x160>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	4945      	ldr	r1, [pc, #276]	@ (800ef70 <LCDShowMsg+0x168>)
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7f2 f8aa 	bl	8000fb4 <SendMsg>
				return;
 800ee60:	e07f      	b.n	800ef62 <LCDShowMsg+0x15a>
		for (int i = 0; argv[1][i]; i++) {
 800ee62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee64:	3301      	adds	r3, #1
 800ee66:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	3304      	adds	r3, #4
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee70:	4413      	add	r3, r2
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d1dd      	bne.n	800ee34 <LCDShowMsg+0x2c>
	for(int j = 1; j <= 2; j++) {
 800ee78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee80:	2b02      	cmp	r3, #2
 800ee82:	ddd4      	ble.n	800ee2e <LCDShowMsg+0x26>
			}
		}
	}
	if ((uint8_t)atoi(argv[1]) > 3) {
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	3304      	adds	r3, #4
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f000 fcde 	bl	800f84c <atoi>
 800ee90:	4603      	mov	r3, r0
 800ee92:	b2db      	uxtb	r3, r3
 800ee94:	2b03      	cmp	r3, #3
 800ee96:	d906      	bls.n	800eea6 <LCDShowMsg+0x9e>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Row out of range (0-3).\r\n");
 800ee98:	4b33      	ldr	r3, [pc, #204]	@ (800ef68 <LCDShowMsg+0x160>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4935      	ldr	r1, [pc, #212]	@ (800ef74 <LCDShowMsg+0x16c>)
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7f2 f888 	bl	8000fb4 <SendMsg>
        return;
 800eea4:	e05d      	b.n	800ef62 <LCDShowMsg+0x15a>
    }
    if ((uint8_t)atoi(argv[2]) > 19) {
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	3308      	adds	r3, #8
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4618      	mov	r0, r3
 800eeae:	f000 fccd 	bl	800f84c <atoi>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	b2db      	uxtb	r3, r3
 800eeb6:	2b13      	cmp	r3, #19
 800eeb8:	d906      	bls.n	800eec8 <LCDShowMsg+0xc0>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Column out of range (0-19).\r\n");
 800eeba:	4b2b      	ldr	r3, [pc, #172]	@ (800ef68 <LCDShowMsg+0x160>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	492e      	ldr	r1, [pc, #184]	@ (800ef78 <LCDShowMsg+0x170>)
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7f2 f877 	bl	8000fb4 <SendMsg>
        return;
 800eec6:	e04c      	b.n	800ef62 <LCDShowMsg+0x15a>
    }
	if (strlen(argv[3]) > (20 - (uint8_t)atoi(argv[2]))) {
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	330c      	adds	r3, #12
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4618      	mov	r0, r3
 800eed0:	f7f1 f988 	bl	80001e4 <strlen>
 800eed4:	4604      	mov	r4, r0
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	3308      	adds	r3, #8
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4618      	mov	r0, r3
 800eede:	f000 fcb5 	bl	800f84c <atoi>
 800eee2:	4603      	mov	r3, r0
 800eee4:	b2db      	uxtb	r3, r3
 800eee6:	f1c3 0314 	rsb	r3, r3, #20
 800eeea:	429c      	cmp	r4, r3
 800eeec:	d906      	bls.n	800eefc <LCDShowMsg+0xf4>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Message too long for this column.\r\n");
 800eeee:	4b1e      	ldr	r3, [pc, #120]	@ (800ef68 <LCDShowMsg+0x160>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	4922      	ldr	r1, [pc, #136]	@ (800ef7c <LCDShowMsg+0x174>)
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7f2 f85d 	bl	8000fb4 <SendMsg>
        return;
 800eefa:	e032      	b.n	800ef62 <LCDShowMsg+0x15a>
    }

	LogWriter("LCDShowMsg");
 800eefc:	4820      	ldr	r0, [pc, #128]	@ (800ef80 <LCDShowMsg+0x178>)
 800eefe:	f7ff fb45 	bl	800e58c <LogWriter>
    LCDMsgStruct lcdMsg;
    lcdMsg.row = (uint8_t)atoi(argv[1]);
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	3304      	adds	r3, #4
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f000 fc9f 	bl	800f84c <atoi>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	733b      	strb	r3, [r7, #12]
    lcdMsg.col = (uint8_t)atoi(argv[2]);
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	3308      	adds	r3, #8
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f000 fc96 	bl	800f84c <atoi>
 800ef20:	4603      	mov	r3, r0
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	737b      	strb	r3, [r7, #13]
    strncpy(lcdMsg.msg, argv[3], sizeof(lcdMsg.msg)-1);
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	330c      	adds	r3, #12
 800ef2a:	6819      	ldr	r1, [r3, #0]
 800ef2c:	f107 030c 	add.w	r3, r7, #12
 800ef30:	3302      	adds	r3, #2
 800ef32:	221f      	movs	r2, #31
 800ef34:	4618      	mov	r0, r3
 800ef36:	f000 fee3 	bl	800fd00 <strncpy>
    lcdMsg.msg[sizeof(lcdMsg.msg)-1] = '\0';
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (xQueueSend(xLCDQueue, &lcdMsg, 0) != pdPASS) {
 800ef40:	4b10      	ldr	r3, [pc, #64]	@ (800ef84 <LCDShowMsg+0x17c>)
 800ef42:	6818      	ldr	r0, [r3, #0]
 800ef44:	f107 010c 	add.w	r1, r7, #12
 800ef48:	2300      	movs	r3, #0
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	f7f9 ff0e 	bl	8008d6c <xQueueGenericSend>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b01      	cmp	r3, #1
 800ef54:	d005      	beq.n	800ef62 <LCDShowMsg+0x15a>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Queue full or error.\r\n");
 800ef56:	4b04      	ldr	r3, [pc, #16]	@ (800ef68 <LCDShowMsg+0x160>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	490b      	ldr	r1, [pc, #44]	@ (800ef88 <LCDShowMsg+0x180>)
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7f2 f829 	bl	8000fb4 <SendMsg>
    }
}
 800ef62:	373c      	adds	r7, #60	@ 0x3c
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd90      	pop	{r4, r7, pc}
 800ef68:	20013ca8 	.word	0x20013ca8
 800ef6c:	08011dec 	.word	0x08011dec
 800ef70:	08011e24 	.word	0x08011e24
 800ef74:	08011e58 	.word	0x08011e58
 800ef78:	08011e80 	.word	0x08011e80
 800ef7c:	08011eac 	.word	0x08011eac
 800ef80:	08011ee0 	.word	0x08011ee0
 800ef84:	20013630 	.word	0x20013630
 800ef88:	08011eec 	.word	0x08011eec

0800ef8c <CommandPrint>:

static void CommandPrint(uint8_t argc, char **argv)
{
 800ef8c:	b590      	push	{r4, r7, lr}
 800ef8e:	b085      	sub	sp, #20
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	4603      	mov	r3, r0
 800ef94:	6039      	str	r1, [r7, #0]
 800ef96:	71fb      	strb	r3, [r7, #7]
	LogWriter("Help");
 800ef98:	481c      	ldr	r0, [pc, #112]	@ (800f00c <CommandPrint+0x80>)
 800ef9a:	f7ff faf7 	bl	800e58c <LogWriter>
	SendMsg(shell_huart, "\r\n------------------------------------------------------------------\r\n");
 800ef9e:	4b1c      	ldr	r3, [pc, #112]	@ (800f010 <CommandPrint+0x84>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	491c      	ldr	r1, [pc, #112]	@ (800f014 <CommandPrint+0x88>)
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7f2 f805 	bl	8000fb4 <SendMsg>
	for (uint8_t i=0; CommandList[i].name != NULL; i++)
 800efaa:	2300      	movs	r3, #0
 800efac:	73fb      	strb	r3, [r7, #15]
 800efae:	e019      	b.n	800efe4 <CommandPrint+0x58>
	{
		SendMsg(shell_huart, "    %5s  %s \r\n", CommandList[i].name, CommandList[i].help);
 800efb0:	4b17      	ldr	r3, [pc, #92]	@ (800f010 <CommandPrint+0x84>)
 800efb2:	6818      	ldr	r0, [r3, #0]
 800efb4:	7bfa      	ldrb	r2, [r7, #15]
 800efb6:	4918      	ldr	r1, [pc, #96]	@ (800f018 <CommandPrint+0x8c>)
 800efb8:	4613      	mov	r3, r2
 800efba:	005b      	lsls	r3, r3, #1
 800efbc:	4413      	add	r3, r2
 800efbe:	009b      	lsls	r3, r3, #2
 800efc0:	440b      	add	r3, r1
 800efc2:	6819      	ldr	r1, [r3, #0]
 800efc4:	7bfa      	ldrb	r2, [r7, #15]
 800efc6:	4c14      	ldr	r4, [pc, #80]	@ (800f018 <CommandPrint+0x8c>)
 800efc8:	4613      	mov	r3, r2
 800efca:	005b      	lsls	r3, r3, #1
 800efcc:	4413      	add	r3, r2
 800efce:	009b      	lsls	r3, r3, #2
 800efd0:	4423      	add	r3, r4
 800efd2:	3304      	adds	r3, #4
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	460a      	mov	r2, r1
 800efd8:	4910      	ldr	r1, [pc, #64]	@ (800f01c <CommandPrint+0x90>)
 800efda:	f7f1 ffeb 	bl	8000fb4 <SendMsg>
	for (uint8_t i=0; CommandList[i].name != NULL; i++)
 800efde:	7bfb      	ldrb	r3, [r7, #15]
 800efe0:	3301      	adds	r3, #1
 800efe2:	73fb      	strb	r3, [r7, #15]
 800efe4:	7bfa      	ldrb	r2, [r7, #15]
 800efe6:	490c      	ldr	r1, [pc, #48]	@ (800f018 <CommandPrint+0x8c>)
 800efe8:	4613      	mov	r3, r2
 800efea:	005b      	lsls	r3, r3, #1
 800efec:	4413      	add	r3, r2
 800efee:	009b      	lsls	r3, r3, #2
 800eff0:	440b      	add	r3, r1
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d1db      	bne.n	800efb0 <CommandPrint+0x24>
	}
	SendMsg(shell_huart, "------------------------------------------------------------------\r\n");
 800eff8:	4b05      	ldr	r3, [pc, #20]	@ (800f010 <CommandPrint+0x84>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	4908      	ldr	r1, [pc, #32]	@ (800f020 <CommandPrint+0x94>)
 800effe:	4618      	mov	r0, r3
 800f000:	f7f1 ffd8 	bl	8000fb4 <SendMsg>
}
 800f004:	bf00      	nop
 800f006:	3714      	adds	r7, #20
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd90      	pop	{r4, r7, pc}
 800f00c:	08011f14 	.word	0x08011f14
 800f010:	20013ca8 	.word	0x20013ca8
 800f014:	08011f1c 	.word	0x08011f1c
 800f018:	080121c8 	.word	0x080121c8
 800f01c:	08011f64 	.word	0x08011f64
 800f020:	08011f74 	.word	0x08011f74

0800f024 <PrintArgs>:


static uint8_t PrintArgs(uint8_t argc, char **argv)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b084      	sub	sp, #16
 800f028:	af00      	add	r7, sp, #0
 800f02a:	4603      	mov	r3, r0
 800f02c:	6039      	str	r1, [r7, #0]
 800f02e:	71fb      	strb	r3, [r7, #7]
	LogWriter("PrintArgs");
 800f030:	4811      	ldr	r0, [pc, #68]	@ (800f078 <PrintArgs+0x54>)
 800f032:	f7ff faab 	bl	800e58c <LogWriter>
	SendMsg(shell_huart, "\r\n");
 800f036:	4b11      	ldr	r3, [pc, #68]	@ (800f07c <PrintArgs+0x58>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	4911      	ldr	r1, [pc, #68]	@ (800f080 <PrintArgs+0x5c>)
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7f1 ffb9 	bl	8000fb4 <SendMsg>
	for (uint8_t i=0; i<argc; i++)
 800f042:	2300      	movs	r3, #0
 800f044:	73fb      	strb	r3, [r7, #15]
 800f046:	e00e      	b.n	800f066 <PrintArgs+0x42>
	{
		SendMsg(shell_huart, "%d: %s \r\n", i, argv[i]);
 800f048:	4b0c      	ldr	r3, [pc, #48]	@ (800f07c <PrintArgs+0x58>)
 800f04a:	6818      	ldr	r0, [r3, #0]
 800f04c:	7bf9      	ldrb	r1, [r7, #15]
 800f04e:	7bfb      	ldrb	r3, [r7, #15]
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	683a      	ldr	r2, [r7, #0]
 800f054:	4413      	add	r3, r2
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	460a      	mov	r2, r1
 800f05a:	490a      	ldr	r1, [pc, #40]	@ (800f084 <PrintArgs+0x60>)
 800f05c:	f7f1 ffaa 	bl	8000fb4 <SendMsg>
	for (uint8_t i=0; i<argc; i++)
 800f060:	7bfb      	ldrb	r3, [r7, #15]
 800f062:	3301      	adds	r3, #1
 800f064:	73fb      	strb	r3, [r7, #15]
 800f066:	7bfa      	ldrb	r2, [r7, #15]
 800f068:	79fb      	ldrb	r3, [r7, #7]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d3ec      	bcc.n	800f048 <PrintArgs+0x24>
	}
	return 0;
 800f06e:	2300      	movs	r3, #0
}
 800f070:	4618      	mov	r0, r3
 800f072:	3710      	adds	r7, #16
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}
 800f078:	08011fbc 	.word	0x08011fbc
 800f07c:	20013ca8 	.word	0x20013ca8
 800f080:	08011fc8 	.word	0x08011fc8
 800f084:	08011fcc 	.word	0x08011fcc

0800f088 <CommandExecute>:

bool CommandExecute(uint8_t argc, char **argv)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	4603      	mov	r3, r0
 800f090:	6039      	str	r1, [r7, #0]
 800f092:	71fb      	strb	r3, [r7, #7]
	if (argc != 0 && argv != NULL)
 800f094:	79fb      	ldrb	r3, [r7, #7]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d045      	beq.n	800f126 <CommandExecute+0x9e>
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d042      	beq.n	800f126 <CommandExecute+0x9e>
	{
		for (uint8_t i=0; CommandList[i].name != NULL; i++)
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	73fb      	strb	r3, [r7, #15]
 800f0a4:	e02d      	b.n	800f102 <CommandExecute+0x7a>
		{
			if(strcmp(CommandList[i].name, argv[0]) == 0)
 800f0a6:	7bfa      	ldrb	r2, [r7, #15]
 800f0a8:	4921      	ldr	r1, [pc, #132]	@ (800f130 <CommandExecute+0xa8>)
 800f0aa:	4613      	mov	r3, r2
 800f0ac:	005b      	lsls	r3, r3, #1
 800f0ae:	4413      	add	r3, r2
 800f0b0:	009b      	lsls	r3, r3, #2
 800f0b2:	440b      	add	r3, r1
 800f0b4:	681a      	ldr	r2, [r3, #0]
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	4610      	mov	r0, r2
 800f0be:	f7f1 f887 	bl	80001d0 <strcmp>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d119      	bne.n	800f0fc <CommandExecute+0x74>
			{
				if(CommandList[i].func != NULL)
 800f0c8:	7bfa      	ldrb	r2, [r7, #15]
 800f0ca:	4919      	ldr	r1, [pc, #100]	@ (800f130 <CommandExecute+0xa8>)
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	005b      	lsls	r3, r3, #1
 800f0d0:	4413      	add	r3, r2
 800f0d2:	009b      	lsls	r3, r3, #2
 800f0d4:	440b      	add	r3, r1
 800f0d6:	3308      	adds	r3, #8
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00e      	beq.n	800f0fc <CommandExecute+0x74>
				{
					(CommandList[i].func)(argc, argv);
 800f0de:	7bfa      	ldrb	r2, [r7, #15]
 800f0e0:	4913      	ldr	r1, [pc, #76]	@ (800f130 <CommandExecute+0xa8>)
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	005b      	lsls	r3, r3, #1
 800f0e6:	4413      	add	r3, r2
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	440b      	add	r3, r1
 800f0ec:	3308      	adds	r3, #8
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	79fa      	ldrb	r2, [r7, #7]
 800f0f2:	6839      	ldr	r1, [r7, #0]
 800f0f4:	4610      	mov	r0, r2
 800f0f6:	4798      	blx	r3
					return true;
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	e015      	b.n	800f128 <CommandExecute+0xa0>
		for (uint8_t i=0; CommandList[i].name != NULL; i++)
 800f0fc:	7bfb      	ldrb	r3, [r7, #15]
 800f0fe:	3301      	adds	r3, #1
 800f100:	73fb      	strb	r3, [r7, #15]
 800f102:	7bfa      	ldrb	r2, [r7, #15]
 800f104:	490a      	ldr	r1, [pc, #40]	@ (800f130 <CommandExecute+0xa8>)
 800f106:	4613      	mov	r3, r2
 800f108:	005b      	lsls	r3, r3, #1
 800f10a:	4413      	add	r3, r2
 800f10c:	009b      	lsls	r3, r3, #2
 800f10e:	440b      	add	r3, r1
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d1c7      	bne.n	800f0a6 <CommandExecute+0x1e>
				}
			}
		}
		SendMsg(shell_huart, "\r\nUnknown command : %s. Type 'help' for commands.\r\n", argv[0]);
 800f116:	4b07      	ldr	r3, [pc, #28]	@ (800f134 <CommandExecute+0xac>)
 800f118:	6818      	ldr	r0, [r3, #0]
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	461a      	mov	r2, r3
 800f120:	4905      	ldr	r1, [pc, #20]	@ (800f138 <CommandExecute+0xb0>)
 800f122:	f7f1 ff47 	bl	8000fb4 <SendMsg>
	}
	return false;
 800f126:	2300      	movs	r3, #0
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3710      	adds	r7, #16
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	080121c8 	.word	0x080121c8
 800f134:	20013ca8 	.word	0x20013ca8
 800f138:	08011fd8 	.word	0x08011fd8

0800f13c <ReadLine_Init>:
#include "msgHandler.h"
static char prompt[PROMPT_LEN] = "> ";
extern UART_HandleTypeDef* shell_huart;

void ReadLine_Init(UART_HandleTypeDef* huart)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b083      	sub	sp, #12
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
	shell_huart = huart;
 800f144:	4a04      	ldr	r2, [pc, #16]	@ (800f158 <ReadLine_Init+0x1c>)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6013      	str	r3, [r2, #0]
}
 800f14a:	bf00      	nop
 800f14c:	370c      	adds	r7, #12
 800f14e:	46bd      	mov	sp, r7
 800f150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f154:	4770      	bx	lr
 800f156:	bf00      	nop
 800f158:	20013ca8 	.word	0x20013ca8

0800f15c <GetChar>:

static bool GetChar(char *out_char)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
	if(ReceiveChar(shell_huart, out_char) == HAL_OK)
 800f164:	4b07      	ldr	r3, [pc, #28]	@ (800f184 <GetChar+0x28>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	6879      	ldr	r1, [r7, #4]
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7f1 ff74 	bl	8001058 <ReceiveChar>
 800f170:	4603      	mov	r3, r0
 800f172:	2b00      	cmp	r3, #0
 800f174:	d101      	bne.n	800f17a <GetChar+0x1e>
		return true;
 800f176:	2301      	movs	r3, #1
 800f178:	e000      	b.n	800f17c <GetChar+0x20>
	return false;
 800f17a:	2300      	movs	r3, #0
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3708      	adds	r7, #8
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	20013ca8 	.word	0x20013ca8

0800f188 <PutChar>:

static void PutChar(char cChar)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	4603      	mov	r3, r0
 800f190:	71fb      	strb	r3, [r7, #7]
	SendChar(shell_huart, cChar);
 800f192:	4b05      	ldr	r3, [pc, #20]	@ (800f1a8 <PutChar+0x20>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	79fa      	ldrb	r2, [r7, #7]
 800f198:	4611      	mov	r1, r2
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7f1 fef8 	bl	8000f90 <SendChar>
}
 800f1a0:	bf00      	nop
 800f1a2:	3708      	adds	r7, #8
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	20013ca8 	.word	0x20013ca8

0800f1ac <PutString>:

static void PutString(const char *const pcChar)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
	SendMsg(shell_huart, pcChar);
 800f1b4:	4b04      	ldr	r3, [pc, #16]	@ (800f1c8 <PutString+0x1c>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	6879      	ldr	r1, [r7, #4]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7f1 fefa 	bl	8000fb4 <SendMsg>
}
 800f1c0:	bf00      	nop
 800f1c2:	3708      	adds	r7, #8
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}
 800f1c8:	20013ca8 	.word	0x20013ca8

0800f1cc <ReadLine>:

uint32_t ReadLine(char* readBuffer, int bufferSize)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b088      	sub	sp, #32
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	6039      	str	r1, [r7, #0]

	char *pCur = readBuffer; /* the point to ready receive. */
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	61fb      	str	r3, [r7, #28]
	char cChar = 0;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	73bb      	strb	r3, [r7, #14]
	uint32_t receiveCharCnt = 0;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	61bb      	str	r3, [r7, #24]
	uint32_t PromptLen = 0;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	617b      	str	r3, [r7, #20]
	uint32_t outputColumnCnt = 0;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	613b      	str	r3, [r7, #16]
	memset(readBuffer, 0, bufferSize);
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	461a      	mov	r2, r3
 800f1ee:	2100      	movs	r1, #0
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f000 fd7d 	bl	800fcf0 <memset>
	/* print Prompt */
	if (*prompt)
 800f1f6:	4b6a      	ldr	r3, [pc, #424]	@ (800f3a0 <ReadLine+0x1d4>)
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d00b      	beq.n	800f216 <ReadLine+0x4a>
	{
		PutString("\n\r");
 800f1fe:	4869      	ldr	r0, [pc, #420]	@ (800f3a4 <ReadLine+0x1d8>)
 800f200:	f7ff ffd4 	bl	800f1ac <PutString>
		PromptLen = strlen(prompt);
 800f204:	4866      	ldr	r0, [pc, #408]	@ (800f3a0 <ReadLine+0x1d4>)
 800f206:	f7f0 ffed 	bl	80001e4 <strlen>
 800f20a:	6178      	str	r0, [r7, #20]
		outputColumnCnt = PromptLen;
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	613b      	str	r3, [r7, #16]
		PutString(prompt);
 800f210:	4863      	ldr	r0, [pc, #396]	@ (800f3a0 <ReadLine+0x1d4>)
 800f212:	f7ff ffcb 	bl	800f1ac <PutString>
	}
	for (;;)
	{
		bool isGotChar = GetChar(&cChar);
 800f216:	f107 030e 	add.w	r3, r7, #14
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7ff ff9e 	bl	800f15c <GetChar>
 800f220:	4603      	mov	r3, r0
 800f222:	73fb      	strb	r3, [r7, #15]

		if(isGotChar) {
 800f224:	7bfb      	ldrb	r3, [r7, #15]
 800f226:	2b00      	cmp	r3, #0
 800f228:	f000 80b2 	beq.w	800f390 <ReadLine+0x1c4>
			switch (cChar)
 800f22c:	7bbb      	ldrb	r3, [r7, #14]
 800f22e:	2b15      	cmp	r3, #21
 800f230:	dc2e      	bgt.n	800f290 <ReadLine+0xc4>
 800f232:	2b03      	cmp	r3, #3
 800f234:	db7e      	blt.n	800f334 <ReadLine+0x168>
 800f236:	3b03      	subs	r3, #3
 800f238:	2b12      	cmp	r3, #18
 800f23a:	d87b      	bhi.n	800f334 <ReadLine+0x168>
 800f23c:	a201      	add	r2, pc, #4	@ (adr r2, 800f244 <ReadLine+0x78>)
 800f23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f242:	bf00      	nop
 800f244:	0800f297 	.word	0x0800f297
 800f248:	0800f335 	.word	0x0800f335
 800f24c:	0800f335 	.word	0x0800f335
 800f250:	0800f335 	.word	0x0800f335
 800f254:	0800f335 	.word	0x0800f335
 800f258:	0800f335 	.word	0x0800f335
 800f25c:	0800f335 	.word	0x0800f335
 800f260:	0800f29b 	.word	0x0800f29b
 800f264:	0800f335 	.word	0x0800f335
 800f268:	0800f335 	.word	0x0800f335
 800f26c:	0800f29b 	.word	0x0800f29b
 800f270:	0800f335 	.word	0x0800f335
 800f274:	0800f335 	.word	0x0800f335
 800f278:	0800f335 	.word	0x0800f335
 800f27c:	0800f335 	.word	0x0800f335
 800f280:	0800f335 	.word	0x0800f335
 800f284:	0800f335 	.word	0x0800f335
 800f288:	0800f335 	.word	0x0800f335
 800f28c:	0800f2d5 	.word	0x0800f2d5
 800f290:	2b7f      	cmp	r3, #127	@ 0x7f
 800f292:	d031      	beq.n	800f2f8 <ReadLine+0x12c>
 800f294:	e04e      	b.n	800f334 <ReadLine+0x168>
			{
			case 0x03: /* ^C - break */
				return 0;
 800f296:	2300      	movs	r3, #0
 800f298:	e07e      	b.n	800f398 <ReadLine+0x1cc>
			case '\r': /*\r*/
			case '\n': /*\n*/
				if ((pCur >= &readBuffer[0]) &&
 800f29a:	69fa      	ldr	r2, [r7, #28]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d30d      	bcc.n	800f2be <ReadLine+0xf2>
					(pCur <= &readBuffer[READBUF_LEN]))
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
				if ((pCur >= &readBuffer[0]) &&
 800f2a8:	69fa      	ldr	r2, [r7, #28]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d807      	bhi.n	800f2be <ReadLine+0xf2>
				{
					*(pCur + 1) = '\0';
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	701a      	strb	r2, [r3, #0]
	//				PutString("\n\r");
	//				PutString(readBuffer);
					return (pCur - readBuffer);
 800f2b6:	69fa      	ldr	r2, [r7, #28]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	1ad3      	subs	r3, r2, r3
 800f2bc:	e06c      	b.n	800f398 <ReadLine+0x1cc>
				}
				else /* Buffer full (Overflow) */
				{
					memset(readBuffer, 0, bufferSize);
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	2100      	movs	r1, #0
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f000 fd13 	bl	800fcf0 <memset>
					return 0;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	e064      	b.n	800f398 <ReadLine+0x1cc>
				}

			case 0x15: /* ^U - erase line */
				while (outputColumnCnt > PromptLen)
				{
					outputColumnCnt--;
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	3b01      	subs	r3, #1
 800f2d2:	613b      	str	r3, [r7, #16]
				while (outputColumnCnt > PromptLen)
 800f2d4:	693a      	ldr	r2, [r7, #16]
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d8f8      	bhi.n	800f2ce <ReadLine+0x102>
				}
				memset(readBuffer, 0, bufferSize);
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	461a      	mov	r2, r3
 800f2e0:	2100      	movs	r1, #0
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f000 fd04 	bl	800fcf0 <memset>
				pCur = readBuffer;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	61fb      	str	r3, [r7, #28]
				receiveCharCnt = 0x00;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	61bb      	str	r3, [r7, #24]
				PutString("\n\r> ");
 800f2f0:	482d      	ldr	r0, [pc, #180]	@ (800f3a8 <ReadLine+0x1dc>)
 800f2f2:	f7ff ff5b 	bl	800f1ac <PutString>
				break;
 800f2f6:	e047      	b.n	800f388 <ReadLine+0x1bc>

			case 0x7F: /* DEL - backspace	*/
				// 鼠標位置大於 promote
				if ((outputColumnCnt > PromptLen) && (pCur > &readBuffer[0]) && (receiveCharCnt > 0x00))
 800f2f8:	693a      	ldr	r2, [r7, #16]
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d942      	bls.n	800f386 <ReadLine+0x1ba>
 800f300:	69fa      	ldr	r2, [r7, #28]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	429a      	cmp	r2, r3
 800f306:	d93e      	bls.n	800f386 <ReadLine+0x1ba>
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d03b      	beq.n	800f386 <ReadLine+0x1ba>
				{
					outputColumnCnt--;
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	3b01      	subs	r3, #1
 800f312:	613b      	str	r3, [r7, #16]
					pCur--;
 800f314:	69fb      	ldr	r3, [r7, #28]
 800f316:	3b01      	subs	r3, #1
 800f318:	61fb      	str	r3, [r7, #28]
					receiveCharCnt--;
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	3b01      	subs	r3, #1
 800f31e:	61bb      	str	r3, [r7, #24]
					*pCur = '\0'; /* earse the receice char */
 800f320:	69fb      	ldr	r3, [r7, #28]
 800f322:	2200      	movs	r2, #0
 800f324:	701a      	strb	r2, [r3, #0]
					PutString("\n\r> ");
 800f326:	4820      	ldr	r0, [pc, #128]	@ (800f3a8 <ReadLine+0x1dc>)
 800f328:	f7ff ff40 	bl	800f1ac <PutString>
					PutString(readBuffer);
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f7ff ff3d 	bl	800f1ac <PutString>
				}
				break;
 800f332:	e028      	b.n	800f386 <ReadLine+0x1ba>

			default:
				if (receiveCharCnt < bufferSize &&
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	69ba      	ldr	r2, [r7, #24]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d220      	bcs.n	800f37e <ReadLine+0x1b2>
 800f33c:	69fa      	ldr	r2, [r7, #28]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	429a      	cmp	r2, r3
 800f342:	d31c      	bcc.n	800f37e <ReadLine+0x1b2>
					(pCur >= &readBuffer[0]) &&
					(pCur <= &readBuffer[READBUF_LEN]) &&
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
					(pCur >= &readBuffer[0]) &&
 800f34a:	69fa      	ldr	r2, [r7, #28]
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d816      	bhi.n	800f37e <ReadLine+0x1b2>
					(cChar > 0x19 && cChar < 0x7F))
 800f350:	7bbb      	ldrb	r3, [r7, #14]
					(pCur <= &readBuffer[READBUF_LEN]) &&
 800f352:	2b19      	cmp	r3, #25
 800f354:	d913      	bls.n	800f37e <ReadLine+0x1b2>
					(cChar > 0x19 && cChar < 0x7F))
 800f356:	7bbb      	ldrb	r3, [r7, #14]
 800f358:	2b7e      	cmp	r3, #126	@ 0x7e
 800f35a:	d810      	bhi.n	800f37e <ReadLine+0x1b2>
				{
					outputColumnCnt++;
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	3301      	adds	r3, #1
 800f360:	613b      	str	r3, [r7, #16]
					PutChar(cChar);
 800f362:	7bbb      	ldrb	r3, [r7, #14]
 800f364:	4618      	mov	r0, r3
 800f366:	f7ff ff0f 	bl	800f188 <PutChar>
					*pCur = cChar;
 800f36a:	7bba      	ldrb	r2, [r7, #14]
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	701a      	strb	r2, [r3, #0]
					pCur++;
 800f370:	69fb      	ldr	r3, [r7, #28]
 800f372:	3301      	adds	r3, #1
 800f374:	61fb      	str	r3, [r7, #28]
					receiveCharCnt++;
 800f376:	69bb      	ldr	r3, [r7, #24]
 800f378:	3301      	adds	r3, #1
 800f37a:	61bb      	str	r3, [r7, #24]
 800f37c:	e004      	b.n	800f388 <ReadLine+0x1bc>
				}
				else /* Buffer full (Overflow) */
				{
					PutChar('\a');
 800f37e:	2007      	movs	r0, #7
 800f380:	f7ff ff02 	bl	800f188 <PutChar>
 800f384:	e000      	b.n	800f388 <ReadLine+0x1bc>
				break;
 800f386:	bf00      	nop
				}
			}
			vTaskDelay(pdMS_TO_TICKS(0));
 800f388:	2000      	movs	r0, #0
 800f38a:	f7fa fb45 	bl	8009a18 <vTaskDelay>
 800f38e:	e742      	b.n	800f216 <ReadLine+0x4a>
		}
		else {
			vTaskDelay(pdMS_TO_TICKS(50));
 800f390:	2032      	movs	r0, #50	@ 0x32
 800f392:	f7fa fb41 	bl	8009a18 <vTaskDelay>
	{
 800f396:	e73e      	b.n	800f216 <ReadLine+0x4a>
		}
	}
	return 0;
}
 800f398:	4618      	mov	r0, r3
 800f39a:	3720      	adds	r7, #32
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}
 800f3a0:	2000002c 	.word	0x2000002c
 800f3a4:	0801200c 	.word	0x0801200c
 800f3a8:	08012010 	.word	0x08012010

0800f3ac <ArgAnalyze>:

bool ArgAnalyze(char* readBuffer, uint8_t *argc, char *argv[])
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b087      	sub	sp, #28
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	617b      	str	r3, [r7, #20]

	while (*argc < MAX_ARGS)
 800f3bc:	e04a      	b.n	800f454 <ArgAnalyze+0xa8>
	{
		/* skip any separator */
		while (readBuffer[i] == ' ')
		{
			i++;
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	617b      	str	r3, [r7, #20]
		while (readBuffer[i] == ' ')
 800f3c4:	68fa      	ldr	r2, [r7, #12]
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	4413      	add	r3, r2
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	2b20      	cmp	r3, #32
 800f3ce:	d0f6      	beq.n	800f3be <ArgAnalyze+0x12>
		}
		/* end of line, no more args	*/
		if (readBuffer[i] == '\0')
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	4413      	add	r3, r2
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d108      	bne.n	800f3ee <ArgAnalyze+0x42>
		{
			argv[*argc] = NULL;
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	781b      	ldrb	r3, [r3, #0]
 800f3e0:	009b      	lsls	r3, r3, #2
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	4413      	add	r3, r2
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	601a      	str	r2, [r3, #0]
			return true;
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	e037      	b.n	800f45e <ArgAnalyze+0xb2>
		}
		/* begin of argument string */
		argv[(*argc)++] = &readBuffer[i];
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	1c5a      	adds	r2, r3, #1
 800f3f4:	b2d1      	uxtb	r1, r2
 800f3f6:	68ba      	ldr	r2, [r7, #8]
 800f3f8:	7011      	strb	r1, [r2, #0]
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	687a      	ldr	r2, [r7, #4]
 800f3fe:	4413      	add	r3, r2
 800f400:	68f9      	ldr	r1, [r7, #12]
 800f402:	697a      	ldr	r2, [r7, #20]
 800f404:	440a      	add	r2, r1
 800f406:	601a      	str	r2, [r3, #0]
		/* find end of argument string */
		while (readBuffer[i] && readBuffer[i] != ' ')
 800f408:	e002      	b.n	800f410 <ArgAnalyze+0x64>
		{
			i++;
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	3301      	adds	r3, #1
 800f40e:	617b      	str	r3, [r7, #20]
		while (readBuffer[i] && readBuffer[i] != ' ')
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	4413      	add	r3, r2
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d005      	beq.n	800f428 <ArgAnalyze+0x7c>
 800f41c:	68fa      	ldr	r2, [r7, #12]
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	4413      	add	r3, r2
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	2b20      	cmp	r3, #32
 800f426:	d1f0      	bne.n	800f40a <ArgAnalyze+0x5e>
		}
		/* end of line, no more args */
		if (readBuffer[i] == '\0')
 800f428:	68fa      	ldr	r2, [r7, #12]
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	4413      	add	r3, r2
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d108      	bne.n	800f446 <ArgAnalyze+0x9a>
		{
			argv[*argc] = NULL;
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	009b      	lsls	r3, r3, #2
 800f43a:	687a      	ldr	r2, [r7, #4]
 800f43c:	4413      	add	r3, r2
 800f43e:	2200      	movs	r2, #0
 800f440:	601a      	str	r2, [r3, #0]
			return true;
 800f442:	2301      	movs	r3, #1
 800f444:	e00b      	b.n	800f45e <ArgAnalyze+0xb2>
		}
		readBuffer[i++] = '\0';
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	1c5a      	adds	r2, r3, #1
 800f44a:	617a      	str	r2, [r7, #20]
 800f44c:	68fa      	ldr	r2, [r7, #12]
 800f44e:	4413      	add	r3, r2
 800f450:	2200      	movs	r2, #0
 800f452:	701a      	strb	r2, [r3, #0]
	while (*argc < MAX_ARGS)
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	2b09      	cmp	r3, #9
 800f45a:	d9b3      	bls.n	800f3c4 <ArgAnalyze+0x18>
	}
	return false;
 800f45c:	2300      	movs	r3, #0
}
 800f45e:	4618      	mov	r0, r3
 800f460:	371c      	adds	r7, #28
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr
	...

0800f46c <Shell_Init>:
UART_HandleTypeDef* shell_huart;
QueueHandle_t xShellQueue;
char readBuffer[READBUF_LEN] = {0};

void Shell_Init(UART_HandleTypeDef *huart)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
	shell_huart = huart;
 800f474:	4a06      	ldr	r2, [pc, #24]	@ (800f490 <Shell_Init+0x24>)
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6013      	str	r3, [r2, #0]
	ReadLine_Init(huart);
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f7ff fe5e 	bl	800f13c <ReadLine_Init>
	command_Init(huart);
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f7ff fbc1 	bl	800ec08 <command_Init>
}
 800f486:	bf00      	nop
 800f488:	3708      	adds	r7, #8
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	20013ca8 	.word	0x20013ca8

0800f494 <Shell_OS_Resources_Init>:

void Shell_OS_Resources_Init()
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
	xShellQueue = xQueueCreate(4, sizeof(ShellMsgStruct));
 800f49a:	2200      	movs	r2, #0
 800f49c:	21c8      	movs	r1, #200	@ 0xc8
 800f49e:	2004      	movs	r0, #4
 800f4a0:	f7f9 fbd2 	bl	8008c48 <xQueueGenericCreate>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	4a07      	ldr	r2, [pc, #28]	@ (800f4c4 <Shell_OS_Resources_Init+0x30>)
 800f4a8:	6013      	str	r3, [r2, #0]

	const char *welcome_msg = "\r\nSTM32 Shell Initialized. Type 'help' for commands.\r\n";
 800f4aa:	4b07      	ldr	r3, [pc, #28]	@ (800f4c8 <Shell_OS_Resources_Init+0x34>)
 800f4ac:	607b      	str	r3, [r7, #4]
	SendMsg(shell_huart, welcome_msg);
 800f4ae:	4b07      	ldr	r3, [pc, #28]	@ (800f4cc <Shell_OS_Resources_Init+0x38>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	6879      	ldr	r1, [r7, #4]
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f7f1 fd7d 	bl	8000fb4 <SendMsg>
}
 800f4ba:	bf00      	nop
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	20013cac 	.word	0x20013cac
 800f4c8:	08012018 	.word	0x08012018
 800f4cc:	20013ca8 	.word	0x20013ca8

0800f4d0 <ShellHandler>:

void ShellHandler(void *pvParameters)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
	static uint8_t argc = 0;
	static char *argv[MAX_ARGS] = {0};

	while (1)
	{
		if (ReadLine(readBuffer, READBUF_LEN))
 800f4d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f4dc:	4812      	ldr	r0, [pc, #72]	@ (800f528 <ShellHandler+0x58>)
 800f4de:	f7ff fe75 	bl	800f1cc <ReadLine>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d01a      	beq.n	800f51e <ShellHandler+0x4e>
		{
			memset(&argc, 0, sizeof(argc));
 800f4e8:	4b10      	ldr	r3, [pc, #64]	@ (800f52c <ShellHandler+0x5c>)
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	701a      	strb	r2, [r3, #0]
			memset(argv, 0, sizeof(argv));
 800f4ee:	2228      	movs	r2, #40	@ 0x28
 800f4f0:	2100      	movs	r1, #0
 800f4f2:	480f      	ldr	r0, [pc, #60]	@ (800f530 <ShellHandler+0x60>)
 800f4f4:	f000 fbfc 	bl	800fcf0 <memset>

			if (ArgAnalyze(readBuffer, &argc, argv))
 800f4f8:	4a0d      	ldr	r2, [pc, #52]	@ (800f530 <ShellHandler+0x60>)
 800f4fa:	490c      	ldr	r1, [pc, #48]	@ (800f52c <ShellHandler+0x5c>)
 800f4fc:	480a      	ldr	r0, [pc, #40]	@ (800f528 <ShellHandler+0x58>)
 800f4fe:	f7ff ff55 	bl	800f3ac <ArgAnalyze>
 800f502:	4603      	mov	r3, r0
 800f504:	2b00      	cmp	r3, #0
 800f506:	d00a      	beq.n	800f51e <ShellHandler+0x4e>
			{
				CommandExecute(argc, argv);
 800f508:	4b08      	ldr	r3, [pc, #32]	@ (800f52c <ShellHandler+0x5c>)
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	4908      	ldr	r1, [pc, #32]	@ (800f530 <ShellHandler+0x60>)
 800f50e:	4618      	mov	r0, r3
 800f510:	f7ff fdba 	bl	800f088 <CommandExecute>
				SetLCDCommandStatus(argv[0]);
 800f514:	4b06      	ldr	r3, [pc, #24]	@ (800f530 <ShellHandler+0x60>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	4618      	mov	r0, r3
 800f51a:	f7fc f9a7 	bl	800b86c <SetLCDCommandStatus>
			}
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 800f51e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800f522:	f7fa fa79 	bl	8009a18 <vTaskDelay>
		if (ReadLine(readBuffer, READBUF_LEN))
 800f526:	e7d7      	b.n	800f4d8 <ShellHandler+0x8>
 800f528:	20013cb0 	.word	0x20013cb0
 800f52c:	200140b0 	.word	0x200140b0
 800f530:	200140b4 	.word	0x200140b4

0800f534 <TryGetCommand>:
	}
}

bool TryGetCommand(ShellMsgStruct* pShellMsg, char* cmd)
{	
 800f534:	b580      	push	{r7, lr}
 800f536:	b0a4      	sub	sp, #144	@ 0x90
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
	char buf[128];
	strncpy(buf, pShellMsg->msg, sizeof(buf)-1);
 800f53e:	6879      	ldr	r1, [r7, #4]
 800f540:	f107 0308 	add.w	r3, r7, #8
 800f544:	227f      	movs	r2, #127	@ 0x7f
 800f546:	4618      	mov	r0, r3
 800f548:	f000 fbda 	bl	800fd00 <strncpy>
	buf[sizeof(buf)-1] = '\0';
 800f54c:	2300      	movs	r3, #0
 800f54e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

	char *token = strtok(buf, " ");
 800f552:	f107 0308 	add.w	r3, r7, #8
 800f556:	4913      	ldr	r1, [pc, #76]	@ (800f5a4 <TryGetCommand+0x70>)
 800f558:	4618      	mov	r0, r3
 800f55a:	f000 fbfb 	bl	800fd54 <strtok>
 800f55e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	if (token != NULL) {
 800f562:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f566:	2b00      	cmp	r3, #0
 800f568:	d017      	beq.n	800f59a <TryGetCommand+0x66>
		int len = strlen(token);
 800f56a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800f56e:	f7f0 fe39 	bl	80001e4 <strlen>
 800f572:	4603      	mov	r3, r0
 800f574:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		strncpy(cmd, token, len + 1);
 800f578:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f57c:	3301      	adds	r3, #1
 800f57e:	461a      	mov	r2, r3
 800f580:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800f584:	6838      	ldr	r0, [r7, #0]
 800f586:	f000 fbbb 	bl	800fd00 <strncpy>
        cmd[len] = '\0';
 800f58a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f58e:	683a      	ldr	r2, [r7, #0]
 800f590:	4413      	add	r3, r2
 800f592:	2200      	movs	r2, #0
 800f594:	701a      	strb	r2, [r3, #0]
		return true;
 800f596:	2301      	movs	r3, #1
 800f598:	e000      	b.n	800f59c <TryGetCommand+0x68>
	}
	return false;
 800f59a:	2300      	movs	r3, #0
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3790      	adds	r7, #144	@ 0x90
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	08012050 	.word	0x08012050

0800f5a8 <ParserCommand>:

void ParserCommand(ShellMsgStruct* pShellMsg, char* cmd)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b08a      	sub	sp, #40	@ 0x28
 800f5ac:	af04      	add	r7, sp, #16
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6039      	str	r1, [r7, #0]
	if(strcmp(cmd, "led") == 0)
 800f5b2:	4914      	ldr	r1, [pc, #80]	@ (800f604 <ParserCommand+0x5c>)
 800f5b4:	6838      	ldr	r0, [r7, #0]
 800f5b6:	f7f0 fe0b 	bl	80001d0 <strcmp>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d11c      	bne.n	800f5fa <ParserCommand+0x52>
	{
		int r, g, b;
		if (sscanf(pShellMsg->msg,
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f107 0214 	add.w	r2, r7, #20
 800f5c6:	f107 030c 	add.w	r3, r7, #12
 800f5ca:	9301      	str	r3, [sp, #4]
 800f5cc:	f107 0310 	add.w	r3, r7, #16
 800f5d0:	9300      	str	r3, [sp, #0]
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	683a      	ldr	r2, [r7, #0]
 800f5d6:	490c      	ldr	r1, [pc, #48]	@ (800f608 <ParserCommand+0x60>)
 800f5d8:	f000 fadc 	bl	800fb94 <siscanf>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	2b04      	cmp	r3, #4
 800f5e0:	d10b      	bne.n	800f5fa <ParserCommand+0x52>
					"%15s {\"r\":%d,\"g\":%d,\"b\":%d}",
					cmd, &r, &g, &b) == 4)
		{
			snprintf(pShellMsg->msg, sizeof(pShellMsg->msg), "%s %d %d %d", cmd, r, g, b);
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	693a      	ldr	r2, [r7, #16]
 800f5e8:	68f9      	ldr	r1, [r7, #12]
 800f5ea:	9102      	str	r1, [sp, #8]
 800f5ec:	9201      	str	r2, [sp, #4]
 800f5ee:	9300      	str	r3, [sp, #0]
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	4a06      	ldr	r2, [pc, #24]	@ (800f60c <ParserCommand+0x64>)
 800f5f4:	21c8      	movs	r1, #200	@ 0xc8
 800f5f6:	f000 fa75 	bl	800fae4 <sniprintf>
		}
	}
}
 800f5fa:	bf00      	nop
 800f5fc:	3718      	adds	r7, #24
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	08012054 	.word	0x08012054
 800f608:	08012058 	.word	0x08012058
 800f60c:	08012074 	.word	0x08012074

0800f610 <CommandReceiver>:

void CommandReceiver(void *pvParameters)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b0be      	sub	sp, #248	@ 0xf8
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
	static uint8_t argc = 0;
	static char *argv[MAX_ARGS] = {0};
	ShellMsgStruct shellMsg;
	while(1)
	{
		if (xQueueReceive(xShellQueue, &shellMsg, portMAX_DELAY) == pdPASS) {
 800f618:	4b28      	ldr	r3, [pc, #160]	@ (800f6bc <CommandReceiver+0xac>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	f107 0108 	add.w	r1, r7, #8
 800f620:	f04f 32ff 	mov.w	r2, #4294967295
 800f624:	4618      	mov	r0, r3
 800f626:	f7f9 fd3f 	bl	80090a8 <xQueueReceive>
 800f62a:	4603      	mov	r3, r0
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d13f      	bne.n	800f6b0 <CommandReceiver+0xa0>

			if(TryGetCommand(&shellMsg, cmd))
 800f630:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800f634:	f107 0308 	add.w	r3, r7, #8
 800f638:	4611      	mov	r1, r2
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7ff ff7a 	bl	800f534 <TryGetCommand>
 800f640:	4603      	mov	r3, r0
 800f642:	2b00      	cmp	r3, #0
 800f644:	d00f      	beq.n	800f666 <CommandReceiver+0x56>
			{
				SendMsg(shell_huart, "Command : %s\r\n", cmd);
 800f646:	4b1e      	ldr	r3, [pc, #120]	@ (800f6c0 <CommandReceiver+0xb0>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800f64e:	491d      	ldr	r1, [pc, #116]	@ (800f6c4 <CommandReceiver+0xb4>)
 800f650:	4618      	mov	r0, r3
 800f652:	f7f1 fcaf 	bl	8000fb4 <SendMsg>
				ParserCommand(&shellMsg, cmd);
 800f656:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800f65a:	f107 0308 	add.w	r3, r7, #8
 800f65e:	4611      	mov	r1, r2
 800f660:	4618      	mov	r0, r3
 800f662:	f7ff ffa1 	bl	800f5a8 <ParserCommand>
			}

			SendMsg(shell_huart, "ParserCommand : %s\r\n", shellMsg.msg);
 800f666:	4b16      	ldr	r3, [pc, #88]	@ (800f6c0 <CommandReceiver+0xb0>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f107 0208 	add.w	r2, r7, #8
 800f66e:	4916      	ldr	r1, [pc, #88]	@ (800f6c8 <CommandReceiver+0xb8>)
 800f670:	4618      	mov	r0, r3
 800f672:	f7f1 fc9f 	bl	8000fb4 <SendMsg>


			memset(&argc, 0, sizeof(argc));
 800f676:	4b15      	ldr	r3, [pc, #84]	@ (800f6cc <CommandReceiver+0xbc>)
 800f678:	2200      	movs	r2, #0
 800f67a:	701a      	strb	r2, [r3, #0]
			memset(argv, 0, sizeof(argv));
 800f67c:	2228      	movs	r2, #40	@ 0x28
 800f67e:	2100      	movs	r1, #0
 800f680:	4813      	ldr	r0, [pc, #76]	@ (800f6d0 <CommandReceiver+0xc0>)
 800f682:	f000 fb35 	bl	800fcf0 <memset>
			if (ArgAnalyze(shellMsg.msg, &argc, argv))
 800f686:	f107 0308 	add.w	r3, r7, #8
 800f68a:	4a11      	ldr	r2, [pc, #68]	@ (800f6d0 <CommandReceiver+0xc0>)
 800f68c:	490f      	ldr	r1, [pc, #60]	@ (800f6cc <CommandReceiver+0xbc>)
 800f68e:	4618      	mov	r0, r3
 800f690:	f7ff fe8c 	bl	800f3ac <ArgAnalyze>
 800f694:	4603      	mov	r3, r0
 800f696:	2b00      	cmp	r3, #0
 800f698:	d00a      	beq.n	800f6b0 <CommandReceiver+0xa0>
			{
				CommandExecute(argc, argv);
 800f69a:	4b0c      	ldr	r3, [pc, #48]	@ (800f6cc <CommandReceiver+0xbc>)
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	490c      	ldr	r1, [pc, #48]	@ (800f6d0 <CommandReceiver+0xc0>)
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f7ff fcf1 	bl	800f088 <CommandExecute>
				SetLCDCommandStatus(argv[0]);
 800f6a6:	4b0a      	ldr	r3, [pc, #40]	@ (800f6d0 <CommandReceiver+0xc0>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7fc f8de 	bl	800b86c <SetLCDCommandStatus>
			}
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 800f6b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800f6b4:	f7fa f9b0 	bl	8009a18 <vTaskDelay>
		if (xQueueReceive(xShellQueue, &shellMsg, portMAX_DELAY) == pdPASS) {
 800f6b8:	e7ae      	b.n	800f618 <CommandReceiver+0x8>
 800f6ba:	bf00      	nop
 800f6bc:	20013cac 	.word	0x20013cac
 800f6c0:	20013ca8 	.word	0x20013ca8
 800f6c4:	08012080 	.word	0x08012080
 800f6c8:	08012090 	.word	0x08012090
 800f6cc:	200140dc 	.word	0x200140dc
 800f6d0:	200140e0 	.word	0x200140e0

0800f6d4 <Timer_Init>:
UART_HandleTypeDef* timer_huart;
extern RTC_HandleTypeDef hrtc;


void Timer_Init(UART_HandleTypeDef* huart)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
	timer_huart = huart;
 800f6dc:	4a08      	ldr	r2, [pc, #32]	@ (800f700 <Timer_Init+0x2c>)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6013      	str	r3, [r2, #0]
	HAL_RTC_GetTime(&hrtc, &sTime_Init, RTC_FORMAT_BIN);
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	4907      	ldr	r1, [pc, #28]	@ (800f704 <Timer_Init+0x30>)
 800f6e6:	4808      	ldr	r0, [pc, #32]	@ (800f708 <Timer_Init+0x34>)
 800f6e8:	f7f5 f9ed 	bl	8004ac6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate_Init, RTC_FORMAT_BIN);
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	4907      	ldr	r1, [pc, #28]	@ (800f70c <Timer_Init+0x38>)
 800f6f0:	4805      	ldr	r0, [pc, #20]	@ (800f708 <Timer_Init+0x34>)
 800f6f2:	f7f5 faca 	bl	8004c8a <HAL_RTC_GetDate>
}
 800f6f6:	bf00      	nop
 800f6f8:	3708      	adds	r7, #8
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	20014138 	.word	0x20014138
 800f704:	20014108 	.word	0x20014108
 800f708:	20000354 	.word	0x20000354
 800f70c:	2001411c 	.word	0x2001411c

0800f710 <getCurrentTime>:

void getCurrentTime(char* time, int size)
{
 800f710:	b5b0      	push	{r4, r5, r7, lr}
 800f712:	b086      	sub	sp, #24
 800f714:	af04      	add	r7, sp, #16
 800f716:	6078      	str	r0, [r7, #4]
 800f718:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800f71a:	2200      	movs	r2, #0
 800f71c:	4915      	ldr	r1, [pc, #84]	@ (800f774 <getCurrentTime+0x64>)
 800f71e:	4816      	ldr	r0, [pc, #88]	@ (800f778 <getCurrentTime+0x68>)
 800f720:	f7f5 f9d1 	bl	8004ac6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800f724:	2200      	movs	r2, #0
 800f726:	4915      	ldr	r1, [pc, #84]	@ (800f77c <getCurrentTime+0x6c>)
 800f728:	4813      	ldr	r0, [pc, #76]	@ (800f778 <getCurrentTime+0x68>)
 800f72a:	f7f5 faae 	bl	8004c8a <HAL_RTC_GetDate>
	snprintf(time, size, "%02d/%02d %02d:%02d:%02d",
 800f72e:	6839      	ldr	r1, [r7, #0]
				sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 800f730:	4b12      	ldr	r3, [pc, #72]	@ (800f77c <getCurrentTime+0x6c>)
 800f732:	785b      	ldrb	r3, [r3, #1]
	snprintf(time, size, "%02d/%02d %02d:%02d:%02d",
 800f734:	461d      	mov	r5, r3
				sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 800f736:	4b11      	ldr	r3, [pc, #68]	@ (800f77c <getCurrentTime+0x6c>)
 800f738:	789b      	ldrb	r3, [r3, #2]
	snprintf(time, size, "%02d/%02d %02d:%02d:%02d",
 800f73a:	461a      	mov	r2, r3
				sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 800f73c:	4b0d      	ldr	r3, [pc, #52]	@ (800f774 <getCurrentTime+0x64>)
 800f73e:	781b      	ldrb	r3, [r3, #0]
	snprintf(time, size, "%02d/%02d %02d:%02d:%02d",
 800f740:	4618      	mov	r0, r3
				sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 800f742:	4b0c      	ldr	r3, [pc, #48]	@ (800f774 <getCurrentTime+0x64>)
 800f744:	785b      	ldrb	r3, [r3, #1]
	snprintf(time, size, "%02d/%02d %02d:%02d:%02d",
 800f746:	461c      	mov	r4, r3
				sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 800f748:	4b0a      	ldr	r3, [pc, #40]	@ (800f774 <getCurrentTime+0x64>)
 800f74a:	789b      	ldrb	r3, [r3, #2]
	snprintf(time, size, "%02d/%02d %02d:%02d:%02d",
 800f74c:	9303      	str	r3, [sp, #12]
 800f74e:	9402      	str	r4, [sp, #8]
 800f750:	9001      	str	r0, [sp, #4]
 800f752:	9200      	str	r2, [sp, #0]
 800f754:	462b      	mov	r3, r5
 800f756:	4a0a      	ldr	r2, [pc, #40]	@ (800f780 <getCurrentTime+0x70>)
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f000 f9c3 	bl	800fae4 <sniprintf>
	time[size-1] = '\0';
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	3b01      	subs	r3, #1
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	4413      	add	r3, r2
 800f766:	2200      	movs	r2, #0
 800f768:	701a      	strb	r2, [r3, #0]
}
 800f76a:	bf00      	nop
 800f76c:	3708      	adds	r7, #8
 800f76e:	46bd      	mov	sp, r7
 800f770:	bdb0      	pop	{r4, r5, r7, pc}
 800f772:	bf00      	nop
 800f774:	20014120 	.word	0x20014120
 800f778:	20000354 	.word	0x20000354
 800f77c:	20014134 	.word	0x20014134
 800f780:	080120a8 	.word	0x080120a8

0800f784 <getTimeSinceStart>:

void getTimeSinceStart(char* time, int size)
{
 800f784:	b590      	push	{r4, r7, lr}
 800f786:	b085      	sub	sp, #20
 800f788:	af02      	add	r7, sp, #8
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800f78e:	2200      	movs	r2, #0
 800f790:	4925      	ldr	r1, [pc, #148]	@ (800f828 <getTimeSinceStart+0xa4>)
 800f792:	4826      	ldr	r0, [pc, #152]	@ (800f82c <getTimeSinceStart+0xa8>)
 800f794:	f7f5 f997 	bl	8004ac6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800f798:	2200      	movs	r2, #0
 800f79a:	4925      	ldr	r1, [pc, #148]	@ (800f830 <getTimeSinceStart+0xac>)
 800f79c:	4823      	ldr	r0, [pc, #140]	@ (800f82c <getTimeSinceStart+0xa8>)
 800f79e:	f7f5 fa74 	bl	8004c8a <HAL_RTC_GetDate>
	SendMsg(timer_huart, "Hours: %02d %02d\n\r", sTime.Hours, sTime_Init.Hours);
 800f7a2:	4b24      	ldr	r3, [pc, #144]	@ (800f834 <getTimeSinceStart+0xb0>)
 800f7a4:	6818      	ldr	r0, [r3, #0]
 800f7a6:	4b20      	ldr	r3, [pc, #128]	@ (800f828 <getTimeSinceStart+0xa4>)
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	4b22      	ldr	r3, [pc, #136]	@ (800f838 <getTimeSinceStart+0xb4>)
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	4922      	ldr	r1, [pc, #136]	@ (800f83c <getTimeSinceStart+0xb8>)
 800f7b2:	f7f1 fbff 	bl	8000fb4 <SendMsg>
	SendMsg(timer_huart, "Minutes: %02d %02d\n\r", sTime.Minutes, sTime_Init.Minutes);
 800f7b6:	4b1f      	ldr	r3, [pc, #124]	@ (800f834 <getTimeSinceStart+0xb0>)
 800f7b8:	6818      	ldr	r0, [r3, #0]
 800f7ba:	4b1b      	ldr	r3, [pc, #108]	@ (800f828 <getTimeSinceStart+0xa4>)
 800f7bc:	785b      	ldrb	r3, [r3, #1]
 800f7be:	461a      	mov	r2, r3
 800f7c0:	4b1d      	ldr	r3, [pc, #116]	@ (800f838 <getTimeSinceStart+0xb4>)
 800f7c2:	785b      	ldrb	r3, [r3, #1]
 800f7c4:	491e      	ldr	r1, [pc, #120]	@ (800f840 <getTimeSinceStart+0xbc>)
 800f7c6:	f7f1 fbf5 	bl	8000fb4 <SendMsg>
	SendMsg(timer_huart, "Seconds: %02d %02d\n\r", sTime.Seconds, sTime_Init.Seconds);
 800f7ca:	4b1a      	ldr	r3, [pc, #104]	@ (800f834 <getTimeSinceStart+0xb0>)
 800f7cc:	6818      	ldr	r0, [r3, #0]
 800f7ce:	4b16      	ldr	r3, [pc, #88]	@ (800f828 <getTimeSinceStart+0xa4>)
 800f7d0:	789b      	ldrb	r3, [r3, #2]
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	4b18      	ldr	r3, [pc, #96]	@ (800f838 <getTimeSinceStart+0xb4>)
 800f7d6:	789b      	ldrb	r3, [r3, #2]
 800f7d8:	491a      	ldr	r1, [pc, #104]	@ (800f844 <getTimeSinceStart+0xc0>)
 800f7da:	f7f1 fbeb 	bl	8000fb4 <SendMsg>
	snprintf(time, size, "[%02d:%02d:%02d]", sTime.Hours - sTime_Init.Hours, sTime.Minutes - sTime_Init.Minutes, sTime.Seconds - sTime_Init.Seconds);
 800f7de:	6839      	ldr	r1, [r7, #0]
 800f7e0:	4b11      	ldr	r3, [pc, #68]	@ (800f828 <getTimeSinceStart+0xa4>)
 800f7e2:	781b      	ldrb	r3, [r3, #0]
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	4b14      	ldr	r3, [pc, #80]	@ (800f838 <getTimeSinceStart+0xb4>)
 800f7e8:	781b      	ldrb	r3, [r3, #0]
 800f7ea:	1ad0      	subs	r0, r2, r3
 800f7ec:	4b0e      	ldr	r3, [pc, #56]	@ (800f828 <getTimeSinceStart+0xa4>)
 800f7ee:	785b      	ldrb	r3, [r3, #1]
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	4b11      	ldr	r3, [pc, #68]	@ (800f838 <getTimeSinceStart+0xb4>)
 800f7f4:	785b      	ldrb	r3, [r3, #1]
 800f7f6:	1ad3      	subs	r3, r2, r3
 800f7f8:	4a0b      	ldr	r2, [pc, #44]	@ (800f828 <getTimeSinceStart+0xa4>)
 800f7fa:	7892      	ldrb	r2, [r2, #2]
 800f7fc:	4614      	mov	r4, r2
 800f7fe:	4a0e      	ldr	r2, [pc, #56]	@ (800f838 <getTimeSinceStart+0xb4>)
 800f800:	7892      	ldrb	r2, [r2, #2]
 800f802:	1aa2      	subs	r2, r4, r2
 800f804:	9201      	str	r2, [sp, #4]
 800f806:	9300      	str	r3, [sp, #0]
 800f808:	4603      	mov	r3, r0
 800f80a:	4a0f      	ldr	r2, [pc, #60]	@ (800f848 <getTimeSinceStart+0xc4>)
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 f969 	bl	800fae4 <sniprintf>
	time[size-1] = '\0';
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	3b01      	subs	r3, #1
 800f816:	687a      	ldr	r2, [r7, #4]
 800f818:	4413      	add	r3, r2
 800f81a:	2200      	movs	r2, #0
 800f81c:	701a      	strb	r2, [r3, #0]
}
 800f81e:	bf00      	nop
 800f820:	370c      	adds	r7, #12
 800f822:	46bd      	mov	sp, r7
 800f824:	bd90      	pop	{r4, r7, pc}
 800f826:	bf00      	nop
 800f828:	20014120 	.word	0x20014120
 800f82c:	20000354 	.word	0x20000354
 800f830:	20014134 	.word	0x20014134
 800f834:	20014138 	.word	0x20014138
 800f838:	20014108 	.word	0x20014108
 800f83c:	080120c4 	.word	0x080120c4
 800f840:	080120d8 	.word	0x080120d8
 800f844:	080120f0 	.word	0x080120f0
 800f848:	08012108 	.word	0x08012108

0800f84c <atoi>:
 800f84c:	220a      	movs	r2, #10
 800f84e:	2100      	movs	r1, #0
 800f850:	f000 b87c 	b.w	800f94c <strtol>

0800f854 <_strtol_l.isra.0>:
 800f854:	2b24      	cmp	r3, #36	@ 0x24
 800f856:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f85a:	4686      	mov	lr, r0
 800f85c:	4690      	mov	r8, r2
 800f85e:	d801      	bhi.n	800f864 <_strtol_l.isra.0+0x10>
 800f860:	2b01      	cmp	r3, #1
 800f862:	d106      	bne.n	800f872 <_strtol_l.isra.0+0x1e>
 800f864:	f000 fb18 	bl	800fe98 <__errno>
 800f868:	2316      	movs	r3, #22
 800f86a:	6003      	str	r3, [r0, #0]
 800f86c:	2000      	movs	r0, #0
 800f86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f872:	4834      	ldr	r0, [pc, #208]	@ (800f944 <_strtol_l.isra.0+0xf0>)
 800f874:	460d      	mov	r5, r1
 800f876:	462a      	mov	r2, r5
 800f878:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f87c:	5d06      	ldrb	r6, [r0, r4]
 800f87e:	f016 0608 	ands.w	r6, r6, #8
 800f882:	d1f8      	bne.n	800f876 <_strtol_l.isra.0+0x22>
 800f884:	2c2d      	cmp	r4, #45	@ 0x2d
 800f886:	d110      	bne.n	800f8aa <_strtol_l.isra.0+0x56>
 800f888:	782c      	ldrb	r4, [r5, #0]
 800f88a:	2601      	movs	r6, #1
 800f88c:	1c95      	adds	r5, r2, #2
 800f88e:	f033 0210 	bics.w	r2, r3, #16
 800f892:	d115      	bne.n	800f8c0 <_strtol_l.isra.0+0x6c>
 800f894:	2c30      	cmp	r4, #48	@ 0x30
 800f896:	d10d      	bne.n	800f8b4 <_strtol_l.isra.0+0x60>
 800f898:	782a      	ldrb	r2, [r5, #0]
 800f89a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f89e:	2a58      	cmp	r2, #88	@ 0x58
 800f8a0:	d108      	bne.n	800f8b4 <_strtol_l.isra.0+0x60>
 800f8a2:	786c      	ldrb	r4, [r5, #1]
 800f8a4:	3502      	adds	r5, #2
 800f8a6:	2310      	movs	r3, #16
 800f8a8:	e00a      	b.n	800f8c0 <_strtol_l.isra.0+0x6c>
 800f8aa:	2c2b      	cmp	r4, #43	@ 0x2b
 800f8ac:	bf04      	itt	eq
 800f8ae:	782c      	ldrbeq	r4, [r5, #0]
 800f8b0:	1c95      	addeq	r5, r2, #2
 800f8b2:	e7ec      	b.n	800f88e <_strtol_l.isra.0+0x3a>
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d1f6      	bne.n	800f8a6 <_strtol_l.isra.0+0x52>
 800f8b8:	2c30      	cmp	r4, #48	@ 0x30
 800f8ba:	bf14      	ite	ne
 800f8bc:	230a      	movne	r3, #10
 800f8be:	2308      	moveq	r3, #8
 800f8c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f8c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	fbbc f9f3 	udiv	r9, ip, r3
 800f8ce:	4610      	mov	r0, r2
 800f8d0:	fb03 ca19 	mls	sl, r3, r9, ip
 800f8d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f8d8:	2f09      	cmp	r7, #9
 800f8da:	d80f      	bhi.n	800f8fc <_strtol_l.isra.0+0xa8>
 800f8dc:	463c      	mov	r4, r7
 800f8de:	42a3      	cmp	r3, r4
 800f8e0:	dd1b      	ble.n	800f91a <_strtol_l.isra.0+0xc6>
 800f8e2:	1c57      	adds	r7, r2, #1
 800f8e4:	d007      	beq.n	800f8f6 <_strtol_l.isra.0+0xa2>
 800f8e6:	4581      	cmp	r9, r0
 800f8e8:	d314      	bcc.n	800f914 <_strtol_l.isra.0+0xc0>
 800f8ea:	d101      	bne.n	800f8f0 <_strtol_l.isra.0+0x9c>
 800f8ec:	45a2      	cmp	sl, r4
 800f8ee:	db11      	blt.n	800f914 <_strtol_l.isra.0+0xc0>
 800f8f0:	fb00 4003 	mla	r0, r0, r3, r4
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8fa:	e7eb      	b.n	800f8d4 <_strtol_l.isra.0+0x80>
 800f8fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f900:	2f19      	cmp	r7, #25
 800f902:	d801      	bhi.n	800f908 <_strtol_l.isra.0+0xb4>
 800f904:	3c37      	subs	r4, #55	@ 0x37
 800f906:	e7ea      	b.n	800f8de <_strtol_l.isra.0+0x8a>
 800f908:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f90c:	2f19      	cmp	r7, #25
 800f90e:	d804      	bhi.n	800f91a <_strtol_l.isra.0+0xc6>
 800f910:	3c57      	subs	r4, #87	@ 0x57
 800f912:	e7e4      	b.n	800f8de <_strtol_l.isra.0+0x8a>
 800f914:	f04f 32ff 	mov.w	r2, #4294967295
 800f918:	e7ed      	b.n	800f8f6 <_strtol_l.isra.0+0xa2>
 800f91a:	1c53      	adds	r3, r2, #1
 800f91c:	d108      	bne.n	800f930 <_strtol_l.isra.0+0xdc>
 800f91e:	2322      	movs	r3, #34	@ 0x22
 800f920:	f8ce 3000 	str.w	r3, [lr]
 800f924:	4660      	mov	r0, ip
 800f926:	f1b8 0f00 	cmp.w	r8, #0
 800f92a:	d0a0      	beq.n	800f86e <_strtol_l.isra.0+0x1a>
 800f92c:	1e69      	subs	r1, r5, #1
 800f92e:	e006      	b.n	800f93e <_strtol_l.isra.0+0xea>
 800f930:	b106      	cbz	r6, 800f934 <_strtol_l.isra.0+0xe0>
 800f932:	4240      	negs	r0, r0
 800f934:	f1b8 0f00 	cmp.w	r8, #0
 800f938:	d099      	beq.n	800f86e <_strtol_l.isra.0+0x1a>
 800f93a:	2a00      	cmp	r2, #0
 800f93c:	d1f6      	bne.n	800f92c <_strtol_l.isra.0+0xd8>
 800f93e:	f8c8 1000 	str.w	r1, [r8]
 800f942:	e794      	b.n	800f86e <_strtol_l.isra.0+0x1a>
 800f944:	08012235 	.word	0x08012235

0800f948 <_strtol_r>:
 800f948:	f7ff bf84 	b.w	800f854 <_strtol_l.isra.0>

0800f94c <strtol>:
 800f94c:	4613      	mov	r3, r2
 800f94e:	460a      	mov	r2, r1
 800f950:	4601      	mov	r1, r0
 800f952:	4802      	ldr	r0, [pc, #8]	@ (800f95c <strtol+0x10>)
 800f954:	6800      	ldr	r0, [r0, #0]
 800f956:	f7ff bf7d 	b.w	800f854 <_strtol_l.isra.0>
 800f95a:	bf00      	nop
 800f95c:	20000138 	.word	0x20000138

0800f960 <std>:
 800f960:	2300      	movs	r3, #0
 800f962:	b510      	push	{r4, lr}
 800f964:	4604      	mov	r4, r0
 800f966:	e9c0 3300 	strd	r3, r3, [r0]
 800f96a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f96e:	6083      	str	r3, [r0, #8]
 800f970:	8181      	strh	r1, [r0, #12]
 800f972:	6643      	str	r3, [r0, #100]	@ 0x64
 800f974:	81c2      	strh	r2, [r0, #14]
 800f976:	6183      	str	r3, [r0, #24]
 800f978:	4619      	mov	r1, r3
 800f97a:	2208      	movs	r2, #8
 800f97c:	305c      	adds	r0, #92	@ 0x5c
 800f97e:	f000 f9b7 	bl	800fcf0 <memset>
 800f982:	4b0d      	ldr	r3, [pc, #52]	@ (800f9b8 <std+0x58>)
 800f984:	6263      	str	r3, [r4, #36]	@ 0x24
 800f986:	4b0d      	ldr	r3, [pc, #52]	@ (800f9bc <std+0x5c>)
 800f988:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f98a:	4b0d      	ldr	r3, [pc, #52]	@ (800f9c0 <std+0x60>)
 800f98c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f98e:	4b0d      	ldr	r3, [pc, #52]	@ (800f9c4 <std+0x64>)
 800f990:	6323      	str	r3, [r4, #48]	@ 0x30
 800f992:	4b0d      	ldr	r3, [pc, #52]	@ (800f9c8 <std+0x68>)
 800f994:	6224      	str	r4, [r4, #32]
 800f996:	429c      	cmp	r4, r3
 800f998:	d006      	beq.n	800f9a8 <std+0x48>
 800f99a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f99e:	4294      	cmp	r4, r2
 800f9a0:	d002      	beq.n	800f9a8 <std+0x48>
 800f9a2:	33d0      	adds	r3, #208	@ 0xd0
 800f9a4:	429c      	cmp	r4, r3
 800f9a6:	d105      	bne.n	800f9b4 <std+0x54>
 800f9a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9b0:	f000 ba9c 	b.w	800feec <__retarget_lock_init_recursive>
 800f9b4:	bd10      	pop	{r4, pc}
 800f9b6:	bf00      	nop
 800f9b8:	0800fbed 	.word	0x0800fbed
 800f9bc:	0800fc13 	.word	0x0800fc13
 800f9c0:	0800fc4b 	.word	0x0800fc4b
 800f9c4:	0800fc6f 	.word	0x0800fc6f
 800f9c8:	2001413c 	.word	0x2001413c

0800f9cc <stdio_exit_handler>:
 800f9cc:	4a02      	ldr	r2, [pc, #8]	@ (800f9d8 <stdio_exit_handler+0xc>)
 800f9ce:	4903      	ldr	r1, [pc, #12]	@ (800f9dc <stdio_exit_handler+0x10>)
 800f9d0:	4803      	ldr	r0, [pc, #12]	@ (800f9e0 <stdio_exit_handler+0x14>)
 800f9d2:	f000 b869 	b.w	800faa8 <_fwalk_sglue>
 800f9d6:	bf00      	nop
 800f9d8:	2000012c 	.word	0x2000012c
 800f9dc:	08010e59 	.word	0x08010e59
 800f9e0:	2000013c 	.word	0x2000013c

0800f9e4 <cleanup_stdio>:
 800f9e4:	6841      	ldr	r1, [r0, #4]
 800f9e6:	4b0c      	ldr	r3, [pc, #48]	@ (800fa18 <cleanup_stdio+0x34>)
 800f9e8:	4299      	cmp	r1, r3
 800f9ea:	b510      	push	{r4, lr}
 800f9ec:	4604      	mov	r4, r0
 800f9ee:	d001      	beq.n	800f9f4 <cleanup_stdio+0x10>
 800f9f0:	f001 fa32 	bl	8010e58 <_fflush_r>
 800f9f4:	68a1      	ldr	r1, [r4, #8]
 800f9f6:	4b09      	ldr	r3, [pc, #36]	@ (800fa1c <cleanup_stdio+0x38>)
 800f9f8:	4299      	cmp	r1, r3
 800f9fa:	d002      	beq.n	800fa02 <cleanup_stdio+0x1e>
 800f9fc:	4620      	mov	r0, r4
 800f9fe:	f001 fa2b 	bl	8010e58 <_fflush_r>
 800fa02:	68e1      	ldr	r1, [r4, #12]
 800fa04:	4b06      	ldr	r3, [pc, #24]	@ (800fa20 <cleanup_stdio+0x3c>)
 800fa06:	4299      	cmp	r1, r3
 800fa08:	d004      	beq.n	800fa14 <cleanup_stdio+0x30>
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa10:	f001 ba22 	b.w	8010e58 <_fflush_r>
 800fa14:	bd10      	pop	{r4, pc}
 800fa16:	bf00      	nop
 800fa18:	2001413c 	.word	0x2001413c
 800fa1c:	200141a4 	.word	0x200141a4
 800fa20:	2001420c 	.word	0x2001420c

0800fa24 <global_stdio_init.part.0>:
 800fa24:	b510      	push	{r4, lr}
 800fa26:	4b0b      	ldr	r3, [pc, #44]	@ (800fa54 <global_stdio_init.part.0+0x30>)
 800fa28:	4c0b      	ldr	r4, [pc, #44]	@ (800fa58 <global_stdio_init.part.0+0x34>)
 800fa2a:	4a0c      	ldr	r2, [pc, #48]	@ (800fa5c <global_stdio_init.part.0+0x38>)
 800fa2c:	601a      	str	r2, [r3, #0]
 800fa2e:	4620      	mov	r0, r4
 800fa30:	2200      	movs	r2, #0
 800fa32:	2104      	movs	r1, #4
 800fa34:	f7ff ff94 	bl	800f960 <std>
 800fa38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fa3c:	2201      	movs	r2, #1
 800fa3e:	2109      	movs	r1, #9
 800fa40:	f7ff ff8e 	bl	800f960 <std>
 800fa44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fa48:	2202      	movs	r2, #2
 800fa4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa4e:	2112      	movs	r1, #18
 800fa50:	f7ff bf86 	b.w	800f960 <std>
 800fa54:	20014274 	.word	0x20014274
 800fa58:	2001413c 	.word	0x2001413c
 800fa5c:	0800f9cd 	.word	0x0800f9cd

0800fa60 <__sfp_lock_acquire>:
 800fa60:	4801      	ldr	r0, [pc, #4]	@ (800fa68 <__sfp_lock_acquire+0x8>)
 800fa62:	f000 ba44 	b.w	800feee <__retarget_lock_acquire_recursive>
 800fa66:	bf00      	nop
 800fa68:	2001427d 	.word	0x2001427d

0800fa6c <__sfp_lock_release>:
 800fa6c:	4801      	ldr	r0, [pc, #4]	@ (800fa74 <__sfp_lock_release+0x8>)
 800fa6e:	f000 ba3f 	b.w	800fef0 <__retarget_lock_release_recursive>
 800fa72:	bf00      	nop
 800fa74:	2001427d 	.word	0x2001427d

0800fa78 <__sinit>:
 800fa78:	b510      	push	{r4, lr}
 800fa7a:	4604      	mov	r4, r0
 800fa7c:	f7ff fff0 	bl	800fa60 <__sfp_lock_acquire>
 800fa80:	6a23      	ldr	r3, [r4, #32]
 800fa82:	b11b      	cbz	r3, 800fa8c <__sinit+0x14>
 800fa84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa88:	f7ff bff0 	b.w	800fa6c <__sfp_lock_release>
 800fa8c:	4b04      	ldr	r3, [pc, #16]	@ (800faa0 <__sinit+0x28>)
 800fa8e:	6223      	str	r3, [r4, #32]
 800fa90:	4b04      	ldr	r3, [pc, #16]	@ (800faa4 <__sinit+0x2c>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d1f5      	bne.n	800fa84 <__sinit+0xc>
 800fa98:	f7ff ffc4 	bl	800fa24 <global_stdio_init.part.0>
 800fa9c:	e7f2      	b.n	800fa84 <__sinit+0xc>
 800fa9e:	bf00      	nop
 800faa0:	0800f9e5 	.word	0x0800f9e5
 800faa4:	20014274 	.word	0x20014274

0800faa8 <_fwalk_sglue>:
 800faa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faac:	4607      	mov	r7, r0
 800faae:	4688      	mov	r8, r1
 800fab0:	4614      	mov	r4, r2
 800fab2:	2600      	movs	r6, #0
 800fab4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fab8:	f1b9 0901 	subs.w	r9, r9, #1
 800fabc:	d505      	bpl.n	800faca <_fwalk_sglue+0x22>
 800fabe:	6824      	ldr	r4, [r4, #0]
 800fac0:	2c00      	cmp	r4, #0
 800fac2:	d1f7      	bne.n	800fab4 <_fwalk_sglue+0xc>
 800fac4:	4630      	mov	r0, r6
 800fac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faca:	89ab      	ldrh	r3, [r5, #12]
 800facc:	2b01      	cmp	r3, #1
 800face:	d907      	bls.n	800fae0 <_fwalk_sglue+0x38>
 800fad0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fad4:	3301      	adds	r3, #1
 800fad6:	d003      	beq.n	800fae0 <_fwalk_sglue+0x38>
 800fad8:	4629      	mov	r1, r5
 800fada:	4638      	mov	r0, r7
 800fadc:	47c0      	blx	r8
 800fade:	4306      	orrs	r6, r0
 800fae0:	3568      	adds	r5, #104	@ 0x68
 800fae2:	e7e9      	b.n	800fab8 <_fwalk_sglue+0x10>

0800fae4 <sniprintf>:
 800fae4:	b40c      	push	{r2, r3}
 800fae6:	b530      	push	{r4, r5, lr}
 800fae8:	4b18      	ldr	r3, [pc, #96]	@ (800fb4c <sniprintf+0x68>)
 800faea:	1e0c      	subs	r4, r1, #0
 800faec:	681d      	ldr	r5, [r3, #0]
 800faee:	b09d      	sub	sp, #116	@ 0x74
 800faf0:	da08      	bge.n	800fb04 <sniprintf+0x20>
 800faf2:	238b      	movs	r3, #139	@ 0x8b
 800faf4:	602b      	str	r3, [r5, #0]
 800faf6:	f04f 30ff 	mov.w	r0, #4294967295
 800fafa:	b01d      	add	sp, #116	@ 0x74
 800fafc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb00:	b002      	add	sp, #8
 800fb02:	4770      	bx	lr
 800fb04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fb08:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fb0c:	f04f 0300 	mov.w	r3, #0
 800fb10:	931b      	str	r3, [sp, #108]	@ 0x6c
 800fb12:	bf14      	ite	ne
 800fb14:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fb18:	4623      	moveq	r3, r4
 800fb1a:	9304      	str	r3, [sp, #16]
 800fb1c:	9307      	str	r3, [sp, #28]
 800fb1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fb22:	9002      	str	r0, [sp, #8]
 800fb24:	9006      	str	r0, [sp, #24]
 800fb26:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fb2a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fb2c:	ab21      	add	r3, sp, #132	@ 0x84
 800fb2e:	a902      	add	r1, sp, #8
 800fb30:	4628      	mov	r0, r5
 800fb32:	9301      	str	r3, [sp, #4]
 800fb34:	f000 fb66 	bl	8010204 <_svfiprintf_r>
 800fb38:	1c43      	adds	r3, r0, #1
 800fb3a:	bfbc      	itt	lt
 800fb3c:	238b      	movlt	r3, #139	@ 0x8b
 800fb3e:	602b      	strlt	r3, [r5, #0]
 800fb40:	2c00      	cmp	r4, #0
 800fb42:	d0da      	beq.n	800fafa <sniprintf+0x16>
 800fb44:	9b02      	ldr	r3, [sp, #8]
 800fb46:	2200      	movs	r2, #0
 800fb48:	701a      	strb	r2, [r3, #0]
 800fb4a:	e7d6      	b.n	800fafa <sniprintf+0x16>
 800fb4c:	20000138 	.word	0x20000138

0800fb50 <siprintf>:
 800fb50:	b40e      	push	{r1, r2, r3}
 800fb52:	b510      	push	{r4, lr}
 800fb54:	b09d      	sub	sp, #116	@ 0x74
 800fb56:	ab1f      	add	r3, sp, #124	@ 0x7c
 800fb58:	9002      	str	r0, [sp, #8]
 800fb5a:	9006      	str	r0, [sp, #24]
 800fb5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fb60:	480a      	ldr	r0, [pc, #40]	@ (800fb8c <siprintf+0x3c>)
 800fb62:	9107      	str	r1, [sp, #28]
 800fb64:	9104      	str	r1, [sp, #16]
 800fb66:	490a      	ldr	r1, [pc, #40]	@ (800fb90 <siprintf+0x40>)
 800fb68:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb6c:	9105      	str	r1, [sp, #20]
 800fb6e:	2400      	movs	r4, #0
 800fb70:	a902      	add	r1, sp, #8
 800fb72:	6800      	ldr	r0, [r0, #0]
 800fb74:	9301      	str	r3, [sp, #4]
 800fb76:	941b      	str	r4, [sp, #108]	@ 0x6c
 800fb78:	f000 fb44 	bl	8010204 <_svfiprintf_r>
 800fb7c:	9b02      	ldr	r3, [sp, #8]
 800fb7e:	701c      	strb	r4, [r3, #0]
 800fb80:	b01d      	add	sp, #116	@ 0x74
 800fb82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb86:	b003      	add	sp, #12
 800fb88:	4770      	bx	lr
 800fb8a:	bf00      	nop
 800fb8c:	20000138 	.word	0x20000138
 800fb90:	ffff0208 	.word	0xffff0208

0800fb94 <siscanf>:
 800fb94:	b40e      	push	{r1, r2, r3}
 800fb96:	b570      	push	{r4, r5, r6, lr}
 800fb98:	b09d      	sub	sp, #116	@ 0x74
 800fb9a:	ac21      	add	r4, sp, #132	@ 0x84
 800fb9c:	2500      	movs	r5, #0
 800fb9e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800fba2:	f854 6b04 	ldr.w	r6, [r4], #4
 800fba6:	f8ad 2014 	strh.w	r2, [sp, #20]
 800fbaa:	951b      	str	r5, [sp, #108]	@ 0x6c
 800fbac:	9002      	str	r0, [sp, #8]
 800fbae:	9006      	str	r0, [sp, #24]
 800fbb0:	f7f0 fb18 	bl	80001e4 <strlen>
 800fbb4:	4b0b      	ldr	r3, [pc, #44]	@ (800fbe4 <siscanf+0x50>)
 800fbb6:	9003      	str	r0, [sp, #12]
 800fbb8:	9007      	str	r0, [sp, #28]
 800fbba:	480b      	ldr	r0, [pc, #44]	@ (800fbe8 <siscanf+0x54>)
 800fbbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fbbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fbc2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fbc6:	4632      	mov	r2, r6
 800fbc8:	4623      	mov	r3, r4
 800fbca:	a902      	add	r1, sp, #8
 800fbcc:	6800      	ldr	r0, [r0, #0]
 800fbce:	950f      	str	r5, [sp, #60]	@ 0x3c
 800fbd0:	9514      	str	r5, [sp, #80]	@ 0x50
 800fbd2:	9401      	str	r4, [sp, #4]
 800fbd4:	f000 fc6c 	bl	80104b0 <__ssvfiscanf_r>
 800fbd8:	b01d      	add	sp, #116	@ 0x74
 800fbda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fbde:	b003      	add	sp, #12
 800fbe0:	4770      	bx	lr
 800fbe2:	bf00      	nop
 800fbe4:	0800fc0f 	.word	0x0800fc0f
 800fbe8:	20000138 	.word	0x20000138

0800fbec <__sread>:
 800fbec:	b510      	push	{r4, lr}
 800fbee:	460c      	mov	r4, r1
 800fbf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbf4:	f000 f92c 	bl	800fe50 <_read_r>
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	bfab      	itete	ge
 800fbfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fbfe:	89a3      	ldrhlt	r3, [r4, #12]
 800fc00:	181b      	addge	r3, r3, r0
 800fc02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fc06:	bfac      	ite	ge
 800fc08:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fc0a:	81a3      	strhlt	r3, [r4, #12]
 800fc0c:	bd10      	pop	{r4, pc}

0800fc0e <__seofread>:
 800fc0e:	2000      	movs	r0, #0
 800fc10:	4770      	bx	lr

0800fc12 <__swrite>:
 800fc12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc16:	461f      	mov	r7, r3
 800fc18:	898b      	ldrh	r3, [r1, #12]
 800fc1a:	05db      	lsls	r3, r3, #23
 800fc1c:	4605      	mov	r5, r0
 800fc1e:	460c      	mov	r4, r1
 800fc20:	4616      	mov	r6, r2
 800fc22:	d505      	bpl.n	800fc30 <__swrite+0x1e>
 800fc24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc28:	2302      	movs	r3, #2
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	f000 f8fe 	bl	800fe2c <_lseek_r>
 800fc30:	89a3      	ldrh	r3, [r4, #12]
 800fc32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fc3a:	81a3      	strh	r3, [r4, #12]
 800fc3c:	4632      	mov	r2, r6
 800fc3e:	463b      	mov	r3, r7
 800fc40:	4628      	mov	r0, r5
 800fc42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc46:	f000 b915 	b.w	800fe74 <_write_r>

0800fc4a <__sseek>:
 800fc4a:	b510      	push	{r4, lr}
 800fc4c:	460c      	mov	r4, r1
 800fc4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc52:	f000 f8eb 	bl	800fe2c <_lseek_r>
 800fc56:	1c43      	adds	r3, r0, #1
 800fc58:	89a3      	ldrh	r3, [r4, #12]
 800fc5a:	bf15      	itete	ne
 800fc5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fc5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fc62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fc66:	81a3      	strheq	r3, [r4, #12]
 800fc68:	bf18      	it	ne
 800fc6a:	81a3      	strhne	r3, [r4, #12]
 800fc6c:	bd10      	pop	{r4, pc}

0800fc6e <__sclose>:
 800fc6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc72:	f000 b8cb 	b.w	800fe0c <_close_r>

0800fc76 <_vsniprintf_r>:
 800fc76:	b530      	push	{r4, r5, lr}
 800fc78:	4614      	mov	r4, r2
 800fc7a:	2c00      	cmp	r4, #0
 800fc7c:	b09b      	sub	sp, #108	@ 0x6c
 800fc7e:	4605      	mov	r5, r0
 800fc80:	461a      	mov	r2, r3
 800fc82:	da05      	bge.n	800fc90 <_vsniprintf_r+0x1a>
 800fc84:	238b      	movs	r3, #139	@ 0x8b
 800fc86:	6003      	str	r3, [r0, #0]
 800fc88:	f04f 30ff 	mov.w	r0, #4294967295
 800fc8c:	b01b      	add	sp, #108	@ 0x6c
 800fc8e:	bd30      	pop	{r4, r5, pc}
 800fc90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fc94:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fc98:	f04f 0300 	mov.w	r3, #0
 800fc9c:	9319      	str	r3, [sp, #100]	@ 0x64
 800fc9e:	bf14      	ite	ne
 800fca0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fca4:	4623      	moveq	r3, r4
 800fca6:	9302      	str	r3, [sp, #8]
 800fca8:	9305      	str	r3, [sp, #20]
 800fcaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fcae:	9100      	str	r1, [sp, #0]
 800fcb0:	9104      	str	r1, [sp, #16]
 800fcb2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fcb6:	4669      	mov	r1, sp
 800fcb8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fcba:	f000 faa3 	bl	8010204 <_svfiprintf_r>
 800fcbe:	1c43      	adds	r3, r0, #1
 800fcc0:	bfbc      	itt	lt
 800fcc2:	238b      	movlt	r3, #139	@ 0x8b
 800fcc4:	602b      	strlt	r3, [r5, #0]
 800fcc6:	2c00      	cmp	r4, #0
 800fcc8:	d0e0      	beq.n	800fc8c <_vsniprintf_r+0x16>
 800fcca:	9b00      	ldr	r3, [sp, #0]
 800fccc:	2200      	movs	r2, #0
 800fcce:	701a      	strb	r2, [r3, #0]
 800fcd0:	e7dc      	b.n	800fc8c <_vsniprintf_r+0x16>
	...

0800fcd4 <vsniprintf>:
 800fcd4:	b507      	push	{r0, r1, r2, lr}
 800fcd6:	9300      	str	r3, [sp, #0]
 800fcd8:	4613      	mov	r3, r2
 800fcda:	460a      	mov	r2, r1
 800fcdc:	4601      	mov	r1, r0
 800fcde:	4803      	ldr	r0, [pc, #12]	@ (800fcec <vsniprintf+0x18>)
 800fce0:	6800      	ldr	r0, [r0, #0]
 800fce2:	f7ff ffc8 	bl	800fc76 <_vsniprintf_r>
 800fce6:	b003      	add	sp, #12
 800fce8:	f85d fb04 	ldr.w	pc, [sp], #4
 800fcec:	20000138 	.word	0x20000138

0800fcf0 <memset>:
 800fcf0:	4402      	add	r2, r0
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	d100      	bne.n	800fcfa <memset+0xa>
 800fcf8:	4770      	bx	lr
 800fcfa:	f803 1b01 	strb.w	r1, [r3], #1
 800fcfe:	e7f9      	b.n	800fcf4 <memset+0x4>

0800fd00 <strncpy>:
 800fd00:	b510      	push	{r4, lr}
 800fd02:	3901      	subs	r1, #1
 800fd04:	4603      	mov	r3, r0
 800fd06:	b132      	cbz	r2, 800fd16 <strncpy+0x16>
 800fd08:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fd0c:	f803 4b01 	strb.w	r4, [r3], #1
 800fd10:	3a01      	subs	r2, #1
 800fd12:	2c00      	cmp	r4, #0
 800fd14:	d1f7      	bne.n	800fd06 <strncpy+0x6>
 800fd16:	441a      	add	r2, r3
 800fd18:	2100      	movs	r1, #0
 800fd1a:	4293      	cmp	r3, r2
 800fd1c:	d100      	bne.n	800fd20 <strncpy+0x20>
 800fd1e:	bd10      	pop	{r4, pc}
 800fd20:	f803 1b01 	strb.w	r1, [r3], #1
 800fd24:	e7f9      	b.n	800fd1a <strncpy+0x1a>

0800fd26 <strrchr>:
 800fd26:	b538      	push	{r3, r4, r5, lr}
 800fd28:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	d10e      	bne.n	800fd4e <strrchr+0x28>
 800fd30:	4621      	mov	r1, r4
 800fd32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd36:	f001 b956 	b.w	8010fe6 <strchr>
 800fd3a:	1c43      	adds	r3, r0, #1
 800fd3c:	4605      	mov	r5, r0
 800fd3e:	4621      	mov	r1, r4
 800fd40:	4618      	mov	r0, r3
 800fd42:	f001 f950 	bl	8010fe6 <strchr>
 800fd46:	2800      	cmp	r0, #0
 800fd48:	d1f7      	bne.n	800fd3a <strrchr+0x14>
 800fd4a:	4628      	mov	r0, r5
 800fd4c:	bd38      	pop	{r3, r4, r5, pc}
 800fd4e:	2500      	movs	r5, #0
 800fd50:	e7f5      	b.n	800fd3e <strrchr+0x18>
	...

0800fd54 <strtok>:
 800fd54:	4b16      	ldr	r3, [pc, #88]	@ (800fdb0 <strtok+0x5c>)
 800fd56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd5a:	681f      	ldr	r7, [r3, #0]
 800fd5c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800fd5e:	4605      	mov	r5, r0
 800fd60:	460e      	mov	r6, r1
 800fd62:	b9ec      	cbnz	r4, 800fda0 <strtok+0x4c>
 800fd64:	2050      	movs	r0, #80	@ 0x50
 800fd66:	f000 f93b 	bl	800ffe0 <malloc>
 800fd6a:	4602      	mov	r2, r0
 800fd6c:	6478      	str	r0, [r7, #68]	@ 0x44
 800fd6e:	b920      	cbnz	r0, 800fd7a <strtok+0x26>
 800fd70:	4b10      	ldr	r3, [pc, #64]	@ (800fdb4 <strtok+0x60>)
 800fd72:	4811      	ldr	r0, [pc, #68]	@ (800fdb8 <strtok+0x64>)
 800fd74:	215b      	movs	r1, #91	@ 0x5b
 800fd76:	f000 f8cb 	bl	800ff10 <__assert_func>
 800fd7a:	e9c0 4400 	strd	r4, r4, [r0]
 800fd7e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800fd82:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800fd86:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800fd8a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800fd8e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800fd92:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800fd96:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800fd9a:	6184      	str	r4, [r0, #24]
 800fd9c:	7704      	strb	r4, [r0, #28]
 800fd9e:	6244      	str	r4, [r0, #36]	@ 0x24
 800fda0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fda2:	4631      	mov	r1, r6
 800fda4:	4628      	mov	r0, r5
 800fda6:	2301      	movs	r3, #1
 800fda8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdac:	f000 b806 	b.w	800fdbc <__strtok_r>
 800fdb0:	20000138 	.word	0x20000138
 800fdb4:	08012335 	.word	0x08012335
 800fdb8:	0801234c 	.word	0x0801234c

0800fdbc <__strtok_r>:
 800fdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	b908      	cbnz	r0, 800fdc6 <__strtok_r+0xa>
 800fdc2:	6814      	ldr	r4, [r2, #0]
 800fdc4:	b144      	cbz	r4, 800fdd8 <__strtok_r+0x1c>
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800fdcc:	460f      	mov	r7, r1
 800fdce:	f817 6b01 	ldrb.w	r6, [r7], #1
 800fdd2:	b91e      	cbnz	r6, 800fddc <__strtok_r+0x20>
 800fdd4:	b965      	cbnz	r5, 800fdf0 <__strtok_r+0x34>
 800fdd6:	6015      	str	r5, [r2, #0]
 800fdd8:	2000      	movs	r0, #0
 800fdda:	e005      	b.n	800fde8 <__strtok_r+0x2c>
 800fddc:	42b5      	cmp	r5, r6
 800fdde:	d1f6      	bne.n	800fdce <__strtok_r+0x12>
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d1f0      	bne.n	800fdc6 <__strtok_r+0xa>
 800fde4:	6014      	str	r4, [r2, #0]
 800fde6:	7003      	strb	r3, [r0, #0]
 800fde8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdea:	461c      	mov	r4, r3
 800fdec:	e00c      	b.n	800fe08 <__strtok_r+0x4c>
 800fdee:	b91d      	cbnz	r5, 800fdf8 <__strtok_r+0x3c>
 800fdf0:	4627      	mov	r7, r4
 800fdf2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fdf6:	460e      	mov	r6, r1
 800fdf8:	f816 5b01 	ldrb.w	r5, [r6], #1
 800fdfc:	42ab      	cmp	r3, r5
 800fdfe:	d1f6      	bne.n	800fdee <__strtok_r+0x32>
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d0f2      	beq.n	800fdea <__strtok_r+0x2e>
 800fe04:	2300      	movs	r3, #0
 800fe06:	703b      	strb	r3, [r7, #0]
 800fe08:	6014      	str	r4, [r2, #0]
 800fe0a:	e7ed      	b.n	800fde8 <__strtok_r+0x2c>

0800fe0c <_close_r>:
 800fe0c:	b538      	push	{r3, r4, r5, lr}
 800fe0e:	4d06      	ldr	r5, [pc, #24]	@ (800fe28 <_close_r+0x1c>)
 800fe10:	2300      	movs	r3, #0
 800fe12:	4604      	mov	r4, r0
 800fe14:	4608      	mov	r0, r1
 800fe16:	602b      	str	r3, [r5, #0]
 800fe18:	f7f1 fe48 	bl	8001aac <_close>
 800fe1c:	1c43      	adds	r3, r0, #1
 800fe1e:	d102      	bne.n	800fe26 <_close_r+0x1a>
 800fe20:	682b      	ldr	r3, [r5, #0]
 800fe22:	b103      	cbz	r3, 800fe26 <_close_r+0x1a>
 800fe24:	6023      	str	r3, [r4, #0]
 800fe26:	bd38      	pop	{r3, r4, r5, pc}
 800fe28:	20014278 	.word	0x20014278

0800fe2c <_lseek_r>:
 800fe2c:	b538      	push	{r3, r4, r5, lr}
 800fe2e:	4d07      	ldr	r5, [pc, #28]	@ (800fe4c <_lseek_r+0x20>)
 800fe30:	4604      	mov	r4, r0
 800fe32:	4608      	mov	r0, r1
 800fe34:	4611      	mov	r1, r2
 800fe36:	2200      	movs	r2, #0
 800fe38:	602a      	str	r2, [r5, #0]
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	f7f1 fe5d 	bl	8001afa <_lseek>
 800fe40:	1c43      	adds	r3, r0, #1
 800fe42:	d102      	bne.n	800fe4a <_lseek_r+0x1e>
 800fe44:	682b      	ldr	r3, [r5, #0]
 800fe46:	b103      	cbz	r3, 800fe4a <_lseek_r+0x1e>
 800fe48:	6023      	str	r3, [r4, #0]
 800fe4a:	bd38      	pop	{r3, r4, r5, pc}
 800fe4c:	20014278 	.word	0x20014278

0800fe50 <_read_r>:
 800fe50:	b538      	push	{r3, r4, r5, lr}
 800fe52:	4d07      	ldr	r5, [pc, #28]	@ (800fe70 <_read_r+0x20>)
 800fe54:	4604      	mov	r4, r0
 800fe56:	4608      	mov	r0, r1
 800fe58:	4611      	mov	r1, r2
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	602a      	str	r2, [r5, #0]
 800fe5e:	461a      	mov	r2, r3
 800fe60:	f7f1 fdeb 	bl	8001a3a <_read>
 800fe64:	1c43      	adds	r3, r0, #1
 800fe66:	d102      	bne.n	800fe6e <_read_r+0x1e>
 800fe68:	682b      	ldr	r3, [r5, #0]
 800fe6a:	b103      	cbz	r3, 800fe6e <_read_r+0x1e>
 800fe6c:	6023      	str	r3, [r4, #0]
 800fe6e:	bd38      	pop	{r3, r4, r5, pc}
 800fe70:	20014278 	.word	0x20014278

0800fe74 <_write_r>:
 800fe74:	b538      	push	{r3, r4, r5, lr}
 800fe76:	4d07      	ldr	r5, [pc, #28]	@ (800fe94 <_write_r+0x20>)
 800fe78:	4604      	mov	r4, r0
 800fe7a:	4608      	mov	r0, r1
 800fe7c:	4611      	mov	r1, r2
 800fe7e:	2200      	movs	r2, #0
 800fe80:	602a      	str	r2, [r5, #0]
 800fe82:	461a      	mov	r2, r3
 800fe84:	f7f1 fdf6 	bl	8001a74 <_write>
 800fe88:	1c43      	adds	r3, r0, #1
 800fe8a:	d102      	bne.n	800fe92 <_write_r+0x1e>
 800fe8c:	682b      	ldr	r3, [r5, #0]
 800fe8e:	b103      	cbz	r3, 800fe92 <_write_r+0x1e>
 800fe90:	6023      	str	r3, [r4, #0]
 800fe92:	bd38      	pop	{r3, r4, r5, pc}
 800fe94:	20014278 	.word	0x20014278

0800fe98 <__errno>:
 800fe98:	4b01      	ldr	r3, [pc, #4]	@ (800fea0 <__errno+0x8>)
 800fe9a:	6818      	ldr	r0, [r3, #0]
 800fe9c:	4770      	bx	lr
 800fe9e:	bf00      	nop
 800fea0:	20000138 	.word	0x20000138

0800fea4 <__libc_init_array>:
 800fea4:	b570      	push	{r4, r5, r6, lr}
 800fea6:	4d0d      	ldr	r5, [pc, #52]	@ (800fedc <__libc_init_array+0x38>)
 800fea8:	4c0d      	ldr	r4, [pc, #52]	@ (800fee0 <__libc_init_array+0x3c>)
 800feaa:	1b64      	subs	r4, r4, r5
 800feac:	10a4      	asrs	r4, r4, #2
 800feae:	2600      	movs	r6, #0
 800feb0:	42a6      	cmp	r6, r4
 800feb2:	d109      	bne.n	800fec8 <__libc_init_array+0x24>
 800feb4:	4d0b      	ldr	r5, [pc, #44]	@ (800fee4 <__libc_init_array+0x40>)
 800feb6:	4c0c      	ldr	r4, [pc, #48]	@ (800fee8 <__libc_init_array+0x44>)
 800feb8:	f001 fbfe 	bl	80116b8 <_init>
 800febc:	1b64      	subs	r4, r4, r5
 800febe:	10a4      	asrs	r4, r4, #2
 800fec0:	2600      	movs	r6, #0
 800fec2:	42a6      	cmp	r6, r4
 800fec4:	d105      	bne.n	800fed2 <__libc_init_array+0x2e>
 800fec6:	bd70      	pop	{r4, r5, r6, pc}
 800fec8:	f855 3b04 	ldr.w	r3, [r5], #4
 800fecc:	4798      	blx	r3
 800fece:	3601      	adds	r6, #1
 800fed0:	e7ee      	b.n	800feb0 <__libc_init_array+0xc>
 800fed2:	f855 3b04 	ldr.w	r3, [r5], #4
 800fed6:	4798      	blx	r3
 800fed8:	3601      	adds	r6, #1
 800feda:	e7f2      	b.n	800fec2 <__libc_init_array+0x1e>
 800fedc:	08012438 	.word	0x08012438
 800fee0:	08012438 	.word	0x08012438
 800fee4:	08012438 	.word	0x08012438
 800fee8:	0801243c 	.word	0x0801243c

0800feec <__retarget_lock_init_recursive>:
 800feec:	4770      	bx	lr

0800feee <__retarget_lock_acquire_recursive>:
 800feee:	4770      	bx	lr

0800fef0 <__retarget_lock_release_recursive>:
 800fef0:	4770      	bx	lr

0800fef2 <memcpy>:
 800fef2:	440a      	add	r2, r1
 800fef4:	4291      	cmp	r1, r2
 800fef6:	f100 33ff 	add.w	r3, r0, #4294967295
 800fefa:	d100      	bne.n	800fefe <memcpy+0xc>
 800fefc:	4770      	bx	lr
 800fefe:	b510      	push	{r4, lr}
 800ff00:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff04:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff08:	4291      	cmp	r1, r2
 800ff0a:	d1f9      	bne.n	800ff00 <memcpy+0xe>
 800ff0c:	bd10      	pop	{r4, pc}
	...

0800ff10 <__assert_func>:
 800ff10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff12:	4614      	mov	r4, r2
 800ff14:	461a      	mov	r2, r3
 800ff16:	4b09      	ldr	r3, [pc, #36]	@ (800ff3c <__assert_func+0x2c>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	4605      	mov	r5, r0
 800ff1c:	68d8      	ldr	r0, [r3, #12]
 800ff1e:	b14c      	cbz	r4, 800ff34 <__assert_func+0x24>
 800ff20:	4b07      	ldr	r3, [pc, #28]	@ (800ff40 <__assert_func+0x30>)
 800ff22:	9100      	str	r1, [sp, #0]
 800ff24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff28:	4906      	ldr	r1, [pc, #24]	@ (800ff44 <__assert_func+0x34>)
 800ff2a:	462b      	mov	r3, r5
 800ff2c:	f000 ffbc 	bl	8010ea8 <fiprintf>
 800ff30:	f001 f876 	bl	8011020 <abort>
 800ff34:	4b04      	ldr	r3, [pc, #16]	@ (800ff48 <__assert_func+0x38>)
 800ff36:	461c      	mov	r4, r3
 800ff38:	e7f3      	b.n	800ff22 <__assert_func+0x12>
 800ff3a:	bf00      	nop
 800ff3c:	20000138 	.word	0x20000138
 800ff40:	080123a6 	.word	0x080123a6
 800ff44:	080123b3 	.word	0x080123b3
 800ff48:	080123e1 	.word	0x080123e1

0800ff4c <_free_r>:
 800ff4c:	b538      	push	{r3, r4, r5, lr}
 800ff4e:	4605      	mov	r5, r0
 800ff50:	2900      	cmp	r1, #0
 800ff52:	d041      	beq.n	800ffd8 <_free_r+0x8c>
 800ff54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff58:	1f0c      	subs	r4, r1, #4
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	bfb8      	it	lt
 800ff5e:	18e4      	addlt	r4, r4, r3
 800ff60:	f000 f8e8 	bl	8010134 <__malloc_lock>
 800ff64:	4a1d      	ldr	r2, [pc, #116]	@ (800ffdc <_free_r+0x90>)
 800ff66:	6813      	ldr	r3, [r2, #0]
 800ff68:	b933      	cbnz	r3, 800ff78 <_free_r+0x2c>
 800ff6a:	6063      	str	r3, [r4, #4]
 800ff6c:	6014      	str	r4, [r2, #0]
 800ff6e:	4628      	mov	r0, r5
 800ff70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff74:	f000 b8e4 	b.w	8010140 <__malloc_unlock>
 800ff78:	42a3      	cmp	r3, r4
 800ff7a:	d908      	bls.n	800ff8e <_free_r+0x42>
 800ff7c:	6820      	ldr	r0, [r4, #0]
 800ff7e:	1821      	adds	r1, r4, r0
 800ff80:	428b      	cmp	r3, r1
 800ff82:	bf01      	itttt	eq
 800ff84:	6819      	ldreq	r1, [r3, #0]
 800ff86:	685b      	ldreq	r3, [r3, #4]
 800ff88:	1809      	addeq	r1, r1, r0
 800ff8a:	6021      	streq	r1, [r4, #0]
 800ff8c:	e7ed      	b.n	800ff6a <_free_r+0x1e>
 800ff8e:	461a      	mov	r2, r3
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	b10b      	cbz	r3, 800ff98 <_free_r+0x4c>
 800ff94:	42a3      	cmp	r3, r4
 800ff96:	d9fa      	bls.n	800ff8e <_free_r+0x42>
 800ff98:	6811      	ldr	r1, [r2, #0]
 800ff9a:	1850      	adds	r0, r2, r1
 800ff9c:	42a0      	cmp	r0, r4
 800ff9e:	d10b      	bne.n	800ffb8 <_free_r+0x6c>
 800ffa0:	6820      	ldr	r0, [r4, #0]
 800ffa2:	4401      	add	r1, r0
 800ffa4:	1850      	adds	r0, r2, r1
 800ffa6:	4283      	cmp	r3, r0
 800ffa8:	6011      	str	r1, [r2, #0]
 800ffaa:	d1e0      	bne.n	800ff6e <_free_r+0x22>
 800ffac:	6818      	ldr	r0, [r3, #0]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	6053      	str	r3, [r2, #4]
 800ffb2:	4408      	add	r0, r1
 800ffb4:	6010      	str	r0, [r2, #0]
 800ffb6:	e7da      	b.n	800ff6e <_free_r+0x22>
 800ffb8:	d902      	bls.n	800ffc0 <_free_r+0x74>
 800ffba:	230c      	movs	r3, #12
 800ffbc:	602b      	str	r3, [r5, #0]
 800ffbe:	e7d6      	b.n	800ff6e <_free_r+0x22>
 800ffc0:	6820      	ldr	r0, [r4, #0]
 800ffc2:	1821      	adds	r1, r4, r0
 800ffc4:	428b      	cmp	r3, r1
 800ffc6:	bf04      	itt	eq
 800ffc8:	6819      	ldreq	r1, [r3, #0]
 800ffca:	685b      	ldreq	r3, [r3, #4]
 800ffcc:	6063      	str	r3, [r4, #4]
 800ffce:	bf04      	itt	eq
 800ffd0:	1809      	addeq	r1, r1, r0
 800ffd2:	6021      	streq	r1, [r4, #0]
 800ffd4:	6054      	str	r4, [r2, #4]
 800ffd6:	e7ca      	b.n	800ff6e <_free_r+0x22>
 800ffd8:	bd38      	pop	{r3, r4, r5, pc}
 800ffda:	bf00      	nop
 800ffdc:	20014284 	.word	0x20014284

0800ffe0 <malloc>:
 800ffe0:	4b02      	ldr	r3, [pc, #8]	@ (800ffec <malloc+0xc>)
 800ffe2:	4601      	mov	r1, r0
 800ffe4:	6818      	ldr	r0, [r3, #0]
 800ffe6:	f000 b825 	b.w	8010034 <_malloc_r>
 800ffea:	bf00      	nop
 800ffec:	20000138 	.word	0x20000138

0800fff0 <sbrk_aligned>:
 800fff0:	b570      	push	{r4, r5, r6, lr}
 800fff2:	4e0f      	ldr	r6, [pc, #60]	@ (8010030 <sbrk_aligned+0x40>)
 800fff4:	460c      	mov	r4, r1
 800fff6:	6831      	ldr	r1, [r6, #0]
 800fff8:	4605      	mov	r5, r0
 800fffa:	b911      	cbnz	r1, 8010002 <sbrk_aligned+0x12>
 800fffc:	f001 f800 	bl	8011000 <_sbrk_r>
 8010000:	6030      	str	r0, [r6, #0]
 8010002:	4621      	mov	r1, r4
 8010004:	4628      	mov	r0, r5
 8010006:	f000 fffb 	bl	8011000 <_sbrk_r>
 801000a:	1c43      	adds	r3, r0, #1
 801000c:	d103      	bne.n	8010016 <sbrk_aligned+0x26>
 801000e:	f04f 34ff 	mov.w	r4, #4294967295
 8010012:	4620      	mov	r0, r4
 8010014:	bd70      	pop	{r4, r5, r6, pc}
 8010016:	1cc4      	adds	r4, r0, #3
 8010018:	f024 0403 	bic.w	r4, r4, #3
 801001c:	42a0      	cmp	r0, r4
 801001e:	d0f8      	beq.n	8010012 <sbrk_aligned+0x22>
 8010020:	1a21      	subs	r1, r4, r0
 8010022:	4628      	mov	r0, r5
 8010024:	f000 ffec 	bl	8011000 <_sbrk_r>
 8010028:	3001      	adds	r0, #1
 801002a:	d1f2      	bne.n	8010012 <sbrk_aligned+0x22>
 801002c:	e7ef      	b.n	801000e <sbrk_aligned+0x1e>
 801002e:	bf00      	nop
 8010030:	20014280 	.word	0x20014280

08010034 <_malloc_r>:
 8010034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010038:	1ccd      	adds	r5, r1, #3
 801003a:	f025 0503 	bic.w	r5, r5, #3
 801003e:	3508      	adds	r5, #8
 8010040:	2d0c      	cmp	r5, #12
 8010042:	bf38      	it	cc
 8010044:	250c      	movcc	r5, #12
 8010046:	2d00      	cmp	r5, #0
 8010048:	4606      	mov	r6, r0
 801004a:	db01      	blt.n	8010050 <_malloc_r+0x1c>
 801004c:	42a9      	cmp	r1, r5
 801004e:	d904      	bls.n	801005a <_malloc_r+0x26>
 8010050:	230c      	movs	r3, #12
 8010052:	6033      	str	r3, [r6, #0]
 8010054:	2000      	movs	r0, #0
 8010056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801005a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010130 <_malloc_r+0xfc>
 801005e:	f000 f869 	bl	8010134 <__malloc_lock>
 8010062:	f8d8 3000 	ldr.w	r3, [r8]
 8010066:	461c      	mov	r4, r3
 8010068:	bb44      	cbnz	r4, 80100bc <_malloc_r+0x88>
 801006a:	4629      	mov	r1, r5
 801006c:	4630      	mov	r0, r6
 801006e:	f7ff ffbf 	bl	800fff0 <sbrk_aligned>
 8010072:	1c43      	adds	r3, r0, #1
 8010074:	4604      	mov	r4, r0
 8010076:	d158      	bne.n	801012a <_malloc_r+0xf6>
 8010078:	f8d8 4000 	ldr.w	r4, [r8]
 801007c:	4627      	mov	r7, r4
 801007e:	2f00      	cmp	r7, #0
 8010080:	d143      	bne.n	801010a <_malloc_r+0xd6>
 8010082:	2c00      	cmp	r4, #0
 8010084:	d04b      	beq.n	801011e <_malloc_r+0xea>
 8010086:	6823      	ldr	r3, [r4, #0]
 8010088:	4639      	mov	r1, r7
 801008a:	4630      	mov	r0, r6
 801008c:	eb04 0903 	add.w	r9, r4, r3
 8010090:	f000 ffb6 	bl	8011000 <_sbrk_r>
 8010094:	4581      	cmp	r9, r0
 8010096:	d142      	bne.n	801011e <_malloc_r+0xea>
 8010098:	6821      	ldr	r1, [r4, #0]
 801009a:	1a6d      	subs	r5, r5, r1
 801009c:	4629      	mov	r1, r5
 801009e:	4630      	mov	r0, r6
 80100a0:	f7ff ffa6 	bl	800fff0 <sbrk_aligned>
 80100a4:	3001      	adds	r0, #1
 80100a6:	d03a      	beq.n	801011e <_malloc_r+0xea>
 80100a8:	6823      	ldr	r3, [r4, #0]
 80100aa:	442b      	add	r3, r5
 80100ac:	6023      	str	r3, [r4, #0]
 80100ae:	f8d8 3000 	ldr.w	r3, [r8]
 80100b2:	685a      	ldr	r2, [r3, #4]
 80100b4:	bb62      	cbnz	r2, 8010110 <_malloc_r+0xdc>
 80100b6:	f8c8 7000 	str.w	r7, [r8]
 80100ba:	e00f      	b.n	80100dc <_malloc_r+0xa8>
 80100bc:	6822      	ldr	r2, [r4, #0]
 80100be:	1b52      	subs	r2, r2, r5
 80100c0:	d420      	bmi.n	8010104 <_malloc_r+0xd0>
 80100c2:	2a0b      	cmp	r2, #11
 80100c4:	d917      	bls.n	80100f6 <_malloc_r+0xc2>
 80100c6:	1961      	adds	r1, r4, r5
 80100c8:	42a3      	cmp	r3, r4
 80100ca:	6025      	str	r5, [r4, #0]
 80100cc:	bf18      	it	ne
 80100ce:	6059      	strne	r1, [r3, #4]
 80100d0:	6863      	ldr	r3, [r4, #4]
 80100d2:	bf08      	it	eq
 80100d4:	f8c8 1000 	streq.w	r1, [r8]
 80100d8:	5162      	str	r2, [r4, r5]
 80100da:	604b      	str	r3, [r1, #4]
 80100dc:	4630      	mov	r0, r6
 80100de:	f000 f82f 	bl	8010140 <__malloc_unlock>
 80100e2:	f104 000b 	add.w	r0, r4, #11
 80100e6:	1d23      	adds	r3, r4, #4
 80100e8:	f020 0007 	bic.w	r0, r0, #7
 80100ec:	1ac2      	subs	r2, r0, r3
 80100ee:	bf1c      	itt	ne
 80100f0:	1a1b      	subne	r3, r3, r0
 80100f2:	50a3      	strne	r3, [r4, r2]
 80100f4:	e7af      	b.n	8010056 <_malloc_r+0x22>
 80100f6:	6862      	ldr	r2, [r4, #4]
 80100f8:	42a3      	cmp	r3, r4
 80100fa:	bf0c      	ite	eq
 80100fc:	f8c8 2000 	streq.w	r2, [r8]
 8010100:	605a      	strne	r2, [r3, #4]
 8010102:	e7eb      	b.n	80100dc <_malloc_r+0xa8>
 8010104:	4623      	mov	r3, r4
 8010106:	6864      	ldr	r4, [r4, #4]
 8010108:	e7ae      	b.n	8010068 <_malloc_r+0x34>
 801010a:	463c      	mov	r4, r7
 801010c:	687f      	ldr	r7, [r7, #4]
 801010e:	e7b6      	b.n	801007e <_malloc_r+0x4a>
 8010110:	461a      	mov	r2, r3
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	42a3      	cmp	r3, r4
 8010116:	d1fb      	bne.n	8010110 <_malloc_r+0xdc>
 8010118:	2300      	movs	r3, #0
 801011a:	6053      	str	r3, [r2, #4]
 801011c:	e7de      	b.n	80100dc <_malloc_r+0xa8>
 801011e:	230c      	movs	r3, #12
 8010120:	6033      	str	r3, [r6, #0]
 8010122:	4630      	mov	r0, r6
 8010124:	f000 f80c 	bl	8010140 <__malloc_unlock>
 8010128:	e794      	b.n	8010054 <_malloc_r+0x20>
 801012a:	6005      	str	r5, [r0, #0]
 801012c:	e7d6      	b.n	80100dc <_malloc_r+0xa8>
 801012e:	bf00      	nop
 8010130:	20014284 	.word	0x20014284

08010134 <__malloc_lock>:
 8010134:	4801      	ldr	r0, [pc, #4]	@ (801013c <__malloc_lock+0x8>)
 8010136:	f7ff beda 	b.w	800feee <__retarget_lock_acquire_recursive>
 801013a:	bf00      	nop
 801013c:	2001427c 	.word	0x2001427c

08010140 <__malloc_unlock>:
 8010140:	4801      	ldr	r0, [pc, #4]	@ (8010148 <__malloc_unlock+0x8>)
 8010142:	f7ff bed5 	b.w	800fef0 <__retarget_lock_release_recursive>
 8010146:	bf00      	nop
 8010148:	2001427c 	.word	0x2001427c

0801014c <__ssputs_r>:
 801014c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010150:	688e      	ldr	r6, [r1, #8]
 8010152:	461f      	mov	r7, r3
 8010154:	42be      	cmp	r6, r7
 8010156:	680b      	ldr	r3, [r1, #0]
 8010158:	4682      	mov	sl, r0
 801015a:	460c      	mov	r4, r1
 801015c:	4690      	mov	r8, r2
 801015e:	d82d      	bhi.n	80101bc <__ssputs_r+0x70>
 8010160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010164:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010168:	d026      	beq.n	80101b8 <__ssputs_r+0x6c>
 801016a:	6965      	ldr	r5, [r4, #20]
 801016c:	6909      	ldr	r1, [r1, #16]
 801016e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010172:	eba3 0901 	sub.w	r9, r3, r1
 8010176:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801017a:	1c7b      	adds	r3, r7, #1
 801017c:	444b      	add	r3, r9
 801017e:	106d      	asrs	r5, r5, #1
 8010180:	429d      	cmp	r5, r3
 8010182:	bf38      	it	cc
 8010184:	461d      	movcc	r5, r3
 8010186:	0553      	lsls	r3, r2, #21
 8010188:	d527      	bpl.n	80101da <__ssputs_r+0x8e>
 801018a:	4629      	mov	r1, r5
 801018c:	f7ff ff52 	bl	8010034 <_malloc_r>
 8010190:	4606      	mov	r6, r0
 8010192:	b360      	cbz	r0, 80101ee <__ssputs_r+0xa2>
 8010194:	6921      	ldr	r1, [r4, #16]
 8010196:	464a      	mov	r2, r9
 8010198:	f7ff feab 	bl	800fef2 <memcpy>
 801019c:	89a3      	ldrh	r3, [r4, #12]
 801019e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80101a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80101a6:	81a3      	strh	r3, [r4, #12]
 80101a8:	6126      	str	r6, [r4, #16]
 80101aa:	6165      	str	r5, [r4, #20]
 80101ac:	444e      	add	r6, r9
 80101ae:	eba5 0509 	sub.w	r5, r5, r9
 80101b2:	6026      	str	r6, [r4, #0]
 80101b4:	60a5      	str	r5, [r4, #8]
 80101b6:	463e      	mov	r6, r7
 80101b8:	42be      	cmp	r6, r7
 80101ba:	d900      	bls.n	80101be <__ssputs_r+0x72>
 80101bc:	463e      	mov	r6, r7
 80101be:	6820      	ldr	r0, [r4, #0]
 80101c0:	4632      	mov	r2, r6
 80101c2:	4641      	mov	r1, r8
 80101c4:	f000 fef5 	bl	8010fb2 <memmove>
 80101c8:	68a3      	ldr	r3, [r4, #8]
 80101ca:	1b9b      	subs	r3, r3, r6
 80101cc:	60a3      	str	r3, [r4, #8]
 80101ce:	6823      	ldr	r3, [r4, #0]
 80101d0:	4433      	add	r3, r6
 80101d2:	6023      	str	r3, [r4, #0]
 80101d4:	2000      	movs	r0, #0
 80101d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101da:	462a      	mov	r2, r5
 80101dc:	f000 ff27 	bl	801102e <_realloc_r>
 80101e0:	4606      	mov	r6, r0
 80101e2:	2800      	cmp	r0, #0
 80101e4:	d1e0      	bne.n	80101a8 <__ssputs_r+0x5c>
 80101e6:	6921      	ldr	r1, [r4, #16]
 80101e8:	4650      	mov	r0, sl
 80101ea:	f7ff feaf 	bl	800ff4c <_free_r>
 80101ee:	230c      	movs	r3, #12
 80101f0:	f8ca 3000 	str.w	r3, [sl]
 80101f4:	89a3      	ldrh	r3, [r4, #12]
 80101f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101fa:	81a3      	strh	r3, [r4, #12]
 80101fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010200:	e7e9      	b.n	80101d6 <__ssputs_r+0x8a>
	...

08010204 <_svfiprintf_r>:
 8010204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010208:	4698      	mov	r8, r3
 801020a:	898b      	ldrh	r3, [r1, #12]
 801020c:	061b      	lsls	r3, r3, #24
 801020e:	b09d      	sub	sp, #116	@ 0x74
 8010210:	4607      	mov	r7, r0
 8010212:	460d      	mov	r5, r1
 8010214:	4614      	mov	r4, r2
 8010216:	d510      	bpl.n	801023a <_svfiprintf_r+0x36>
 8010218:	690b      	ldr	r3, [r1, #16]
 801021a:	b973      	cbnz	r3, 801023a <_svfiprintf_r+0x36>
 801021c:	2140      	movs	r1, #64	@ 0x40
 801021e:	f7ff ff09 	bl	8010034 <_malloc_r>
 8010222:	6028      	str	r0, [r5, #0]
 8010224:	6128      	str	r0, [r5, #16]
 8010226:	b930      	cbnz	r0, 8010236 <_svfiprintf_r+0x32>
 8010228:	230c      	movs	r3, #12
 801022a:	603b      	str	r3, [r7, #0]
 801022c:	f04f 30ff 	mov.w	r0, #4294967295
 8010230:	b01d      	add	sp, #116	@ 0x74
 8010232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010236:	2340      	movs	r3, #64	@ 0x40
 8010238:	616b      	str	r3, [r5, #20]
 801023a:	2300      	movs	r3, #0
 801023c:	9309      	str	r3, [sp, #36]	@ 0x24
 801023e:	2320      	movs	r3, #32
 8010240:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010244:	f8cd 800c 	str.w	r8, [sp, #12]
 8010248:	2330      	movs	r3, #48	@ 0x30
 801024a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80103e8 <_svfiprintf_r+0x1e4>
 801024e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010252:	f04f 0901 	mov.w	r9, #1
 8010256:	4623      	mov	r3, r4
 8010258:	469a      	mov	sl, r3
 801025a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801025e:	b10a      	cbz	r2, 8010264 <_svfiprintf_r+0x60>
 8010260:	2a25      	cmp	r2, #37	@ 0x25
 8010262:	d1f9      	bne.n	8010258 <_svfiprintf_r+0x54>
 8010264:	ebba 0b04 	subs.w	fp, sl, r4
 8010268:	d00b      	beq.n	8010282 <_svfiprintf_r+0x7e>
 801026a:	465b      	mov	r3, fp
 801026c:	4622      	mov	r2, r4
 801026e:	4629      	mov	r1, r5
 8010270:	4638      	mov	r0, r7
 8010272:	f7ff ff6b 	bl	801014c <__ssputs_r>
 8010276:	3001      	adds	r0, #1
 8010278:	f000 80a7 	beq.w	80103ca <_svfiprintf_r+0x1c6>
 801027c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801027e:	445a      	add	r2, fp
 8010280:	9209      	str	r2, [sp, #36]	@ 0x24
 8010282:	f89a 3000 	ldrb.w	r3, [sl]
 8010286:	2b00      	cmp	r3, #0
 8010288:	f000 809f 	beq.w	80103ca <_svfiprintf_r+0x1c6>
 801028c:	2300      	movs	r3, #0
 801028e:	f04f 32ff 	mov.w	r2, #4294967295
 8010292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010296:	f10a 0a01 	add.w	sl, sl, #1
 801029a:	9304      	str	r3, [sp, #16]
 801029c:	9307      	str	r3, [sp, #28]
 801029e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80102a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80102a4:	4654      	mov	r4, sl
 80102a6:	2205      	movs	r2, #5
 80102a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102ac:	484e      	ldr	r0, [pc, #312]	@ (80103e8 <_svfiprintf_r+0x1e4>)
 80102ae:	f7ef ffa7 	bl	8000200 <memchr>
 80102b2:	9a04      	ldr	r2, [sp, #16]
 80102b4:	b9d8      	cbnz	r0, 80102ee <_svfiprintf_r+0xea>
 80102b6:	06d0      	lsls	r0, r2, #27
 80102b8:	bf44      	itt	mi
 80102ba:	2320      	movmi	r3, #32
 80102bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102c0:	0711      	lsls	r1, r2, #28
 80102c2:	bf44      	itt	mi
 80102c4:	232b      	movmi	r3, #43	@ 0x2b
 80102c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102ca:	f89a 3000 	ldrb.w	r3, [sl]
 80102ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80102d0:	d015      	beq.n	80102fe <_svfiprintf_r+0xfa>
 80102d2:	9a07      	ldr	r2, [sp, #28]
 80102d4:	4654      	mov	r4, sl
 80102d6:	2000      	movs	r0, #0
 80102d8:	f04f 0c0a 	mov.w	ip, #10
 80102dc:	4621      	mov	r1, r4
 80102de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102e2:	3b30      	subs	r3, #48	@ 0x30
 80102e4:	2b09      	cmp	r3, #9
 80102e6:	d94b      	bls.n	8010380 <_svfiprintf_r+0x17c>
 80102e8:	b1b0      	cbz	r0, 8010318 <_svfiprintf_r+0x114>
 80102ea:	9207      	str	r2, [sp, #28]
 80102ec:	e014      	b.n	8010318 <_svfiprintf_r+0x114>
 80102ee:	eba0 0308 	sub.w	r3, r0, r8
 80102f2:	fa09 f303 	lsl.w	r3, r9, r3
 80102f6:	4313      	orrs	r3, r2
 80102f8:	9304      	str	r3, [sp, #16]
 80102fa:	46a2      	mov	sl, r4
 80102fc:	e7d2      	b.n	80102a4 <_svfiprintf_r+0xa0>
 80102fe:	9b03      	ldr	r3, [sp, #12]
 8010300:	1d19      	adds	r1, r3, #4
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	9103      	str	r1, [sp, #12]
 8010306:	2b00      	cmp	r3, #0
 8010308:	bfbb      	ittet	lt
 801030a:	425b      	neglt	r3, r3
 801030c:	f042 0202 	orrlt.w	r2, r2, #2
 8010310:	9307      	strge	r3, [sp, #28]
 8010312:	9307      	strlt	r3, [sp, #28]
 8010314:	bfb8      	it	lt
 8010316:	9204      	strlt	r2, [sp, #16]
 8010318:	7823      	ldrb	r3, [r4, #0]
 801031a:	2b2e      	cmp	r3, #46	@ 0x2e
 801031c:	d10a      	bne.n	8010334 <_svfiprintf_r+0x130>
 801031e:	7863      	ldrb	r3, [r4, #1]
 8010320:	2b2a      	cmp	r3, #42	@ 0x2a
 8010322:	d132      	bne.n	801038a <_svfiprintf_r+0x186>
 8010324:	9b03      	ldr	r3, [sp, #12]
 8010326:	1d1a      	adds	r2, r3, #4
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	9203      	str	r2, [sp, #12]
 801032c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010330:	3402      	adds	r4, #2
 8010332:	9305      	str	r3, [sp, #20]
 8010334:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80103f8 <_svfiprintf_r+0x1f4>
 8010338:	7821      	ldrb	r1, [r4, #0]
 801033a:	2203      	movs	r2, #3
 801033c:	4650      	mov	r0, sl
 801033e:	f7ef ff5f 	bl	8000200 <memchr>
 8010342:	b138      	cbz	r0, 8010354 <_svfiprintf_r+0x150>
 8010344:	9b04      	ldr	r3, [sp, #16]
 8010346:	eba0 000a 	sub.w	r0, r0, sl
 801034a:	2240      	movs	r2, #64	@ 0x40
 801034c:	4082      	lsls	r2, r0
 801034e:	4313      	orrs	r3, r2
 8010350:	3401      	adds	r4, #1
 8010352:	9304      	str	r3, [sp, #16]
 8010354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010358:	4824      	ldr	r0, [pc, #144]	@ (80103ec <_svfiprintf_r+0x1e8>)
 801035a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801035e:	2206      	movs	r2, #6
 8010360:	f7ef ff4e 	bl	8000200 <memchr>
 8010364:	2800      	cmp	r0, #0
 8010366:	d036      	beq.n	80103d6 <_svfiprintf_r+0x1d2>
 8010368:	4b21      	ldr	r3, [pc, #132]	@ (80103f0 <_svfiprintf_r+0x1ec>)
 801036a:	bb1b      	cbnz	r3, 80103b4 <_svfiprintf_r+0x1b0>
 801036c:	9b03      	ldr	r3, [sp, #12]
 801036e:	3307      	adds	r3, #7
 8010370:	f023 0307 	bic.w	r3, r3, #7
 8010374:	3308      	adds	r3, #8
 8010376:	9303      	str	r3, [sp, #12]
 8010378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801037a:	4433      	add	r3, r6
 801037c:	9309      	str	r3, [sp, #36]	@ 0x24
 801037e:	e76a      	b.n	8010256 <_svfiprintf_r+0x52>
 8010380:	fb0c 3202 	mla	r2, ip, r2, r3
 8010384:	460c      	mov	r4, r1
 8010386:	2001      	movs	r0, #1
 8010388:	e7a8      	b.n	80102dc <_svfiprintf_r+0xd8>
 801038a:	2300      	movs	r3, #0
 801038c:	3401      	adds	r4, #1
 801038e:	9305      	str	r3, [sp, #20]
 8010390:	4619      	mov	r1, r3
 8010392:	f04f 0c0a 	mov.w	ip, #10
 8010396:	4620      	mov	r0, r4
 8010398:	f810 2b01 	ldrb.w	r2, [r0], #1
 801039c:	3a30      	subs	r2, #48	@ 0x30
 801039e:	2a09      	cmp	r2, #9
 80103a0:	d903      	bls.n	80103aa <_svfiprintf_r+0x1a6>
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d0c6      	beq.n	8010334 <_svfiprintf_r+0x130>
 80103a6:	9105      	str	r1, [sp, #20]
 80103a8:	e7c4      	b.n	8010334 <_svfiprintf_r+0x130>
 80103aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80103ae:	4604      	mov	r4, r0
 80103b0:	2301      	movs	r3, #1
 80103b2:	e7f0      	b.n	8010396 <_svfiprintf_r+0x192>
 80103b4:	ab03      	add	r3, sp, #12
 80103b6:	9300      	str	r3, [sp, #0]
 80103b8:	462a      	mov	r2, r5
 80103ba:	4b0e      	ldr	r3, [pc, #56]	@ (80103f4 <_svfiprintf_r+0x1f0>)
 80103bc:	a904      	add	r1, sp, #16
 80103be:	4638      	mov	r0, r7
 80103c0:	f3af 8000 	nop.w
 80103c4:	1c42      	adds	r2, r0, #1
 80103c6:	4606      	mov	r6, r0
 80103c8:	d1d6      	bne.n	8010378 <_svfiprintf_r+0x174>
 80103ca:	89ab      	ldrh	r3, [r5, #12]
 80103cc:	065b      	lsls	r3, r3, #25
 80103ce:	f53f af2d 	bmi.w	801022c <_svfiprintf_r+0x28>
 80103d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80103d4:	e72c      	b.n	8010230 <_svfiprintf_r+0x2c>
 80103d6:	ab03      	add	r3, sp, #12
 80103d8:	9300      	str	r3, [sp, #0]
 80103da:	462a      	mov	r2, r5
 80103dc:	4b05      	ldr	r3, [pc, #20]	@ (80103f4 <_svfiprintf_r+0x1f0>)
 80103de:	a904      	add	r1, sp, #16
 80103e0:	4638      	mov	r0, r7
 80103e2:	f000 fa49 	bl	8010878 <_printf_i>
 80103e6:	e7ed      	b.n	80103c4 <_svfiprintf_r+0x1c0>
 80103e8:	080123e2 	.word	0x080123e2
 80103ec:	080123ec 	.word	0x080123ec
 80103f0:	00000000 	.word	0x00000000
 80103f4:	0801014d 	.word	0x0801014d
 80103f8:	080123e8 	.word	0x080123e8

080103fc <_sungetc_r>:
 80103fc:	b538      	push	{r3, r4, r5, lr}
 80103fe:	1c4b      	adds	r3, r1, #1
 8010400:	4614      	mov	r4, r2
 8010402:	d103      	bne.n	801040c <_sungetc_r+0x10>
 8010404:	f04f 35ff 	mov.w	r5, #4294967295
 8010408:	4628      	mov	r0, r5
 801040a:	bd38      	pop	{r3, r4, r5, pc}
 801040c:	8993      	ldrh	r3, [r2, #12]
 801040e:	f023 0320 	bic.w	r3, r3, #32
 8010412:	8193      	strh	r3, [r2, #12]
 8010414:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010416:	6852      	ldr	r2, [r2, #4]
 8010418:	b2cd      	uxtb	r5, r1
 801041a:	b18b      	cbz	r3, 8010440 <_sungetc_r+0x44>
 801041c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801041e:	4293      	cmp	r3, r2
 8010420:	dd08      	ble.n	8010434 <_sungetc_r+0x38>
 8010422:	6823      	ldr	r3, [r4, #0]
 8010424:	1e5a      	subs	r2, r3, #1
 8010426:	6022      	str	r2, [r4, #0]
 8010428:	f803 5c01 	strb.w	r5, [r3, #-1]
 801042c:	6863      	ldr	r3, [r4, #4]
 801042e:	3301      	adds	r3, #1
 8010430:	6063      	str	r3, [r4, #4]
 8010432:	e7e9      	b.n	8010408 <_sungetc_r+0xc>
 8010434:	4621      	mov	r1, r4
 8010436:	f000 fd82 	bl	8010f3e <__submore>
 801043a:	2800      	cmp	r0, #0
 801043c:	d0f1      	beq.n	8010422 <_sungetc_r+0x26>
 801043e:	e7e1      	b.n	8010404 <_sungetc_r+0x8>
 8010440:	6921      	ldr	r1, [r4, #16]
 8010442:	6823      	ldr	r3, [r4, #0]
 8010444:	b151      	cbz	r1, 801045c <_sungetc_r+0x60>
 8010446:	4299      	cmp	r1, r3
 8010448:	d208      	bcs.n	801045c <_sungetc_r+0x60>
 801044a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801044e:	42a9      	cmp	r1, r5
 8010450:	d104      	bne.n	801045c <_sungetc_r+0x60>
 8010452:	3b01      	subs	r3, #1
 8010454:	3201      	adds	r2, #1
 8010456:	6023      	str	r3, [r4, #0]
 8010458:	6062      	str	r2, [r4, #4]
 801045a:	e7d5      	b.n	8010408 <_sungetc_r+0xc>
 801045c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8010460:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010464:	6363      	str	r3, [r4, #52]	@ 0x34
 8010466:	2303      	movs	r3, #3
 8010468:	63a3      	str	r3, [r4, #56]	@ 0x38
 801046a:	4623      	mov	r3, r4
 801046c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010470:	6023      	str	r3, [r4, #0]
 8010472:	2301      	movs	r3, #1
 8010474:	e7dc      	b.n	8010430 <_sungetc_r+0x34>

08010476 <__ssrefill_r>:
 8010476:	b510      	push	{r4, lr}
 8010478:	460c      	mov	r4, r1
 801047a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801047c:	b169      	cbz	r1, 801049a <__ssrefill_r+0x24>
 801047e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010482:	4299      	cmp	r1, r3
 8010484:	d001      	beq.n	801048a <__ssrefill_r+0x14>
 8010486:	f7ff fd61 	bl	800ff4c <_free_r>
 801048a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801048c:	6063      	str	r3, [r4, #4]
 801048e:	2000      	movs	r0, #0
 8010490:	6360      	str	r0, [r4, #52]	@ 0x34
 8010492:	b113      	cbz	r3, 801049a <__ssrefill_r+0x24>
 8010494:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010496:	6023      	str	r3, [r4, #0]
 8010498:	bd10      	pop	{r4, pc}
 801049a:	6923      	ldr	r3, [r4, #16]
 801049c:	6023      	str	r3, [r4, #0]
 801049e:	2300      	movs	r3, #0
 80104a0:	6063      	str	r3, [r4, #4]
 80104a2:	89a3      	ldrh	r3, [r4, #12]
 80104a4:	f043 0320 	orr.w	r3, r3, #32
 80104a8:	81a3      	strh	r3, [r4, #12]
 80104aa:	f04f 30ff 	mov.w	r0, #4294967295
 80104ae:	e7f3      	b.n	8010498 <__ssrefill_r+0x22>

080104b0 <__ssvfiscanf_r>:
 80104b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b4:	460c      	mov	r4, r1
 80104b6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80104ba:	2100      	movs	r1, #0
 80104bc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80104c0:	49a6      	ldr	r1, [pc, #664]	@ (801075c <__ssvfiscanf_r+0x2ac>)
 80104c2:	91a0      	str	r1, [sp, #640]	@ 0x280
 80104c4:	f10d 0804 	add.w	r8, sp, #4
 80104c8:	49a5      	ldr	r1, [pc, #660]	@ (8010760 <__ssvfiscanf_r+0x2b0>)
 80104ca:	4fa6      	ldr	r7, [pc, #664]	@ (8010764 <__ssvfiscanf_r+0x2b4>)
 80104cc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80104d0:	4606      	mov	r6, r0
 80104d2:	91a1      	str	r1, [sp, #644]	@ 0x284
 80104d4:	9300      	str	r3, [sp, #0]
 80104d6:	f892 9000 	ldrb.w	r9, [r2]
 80104da:	f1b9 0f00 	cmp.w	r9, #0
 80104de:	f000 8158 	beq.w	8010792 <__ssvfiscanf_r+0x2e2>
 80104e2:	f817 3009 	ldrb.w	r3, [r7, r9]
 80104e6:	f013 0308 	ands.w	r3, r3, #8
 80104ea:	f102 0501 	add.w	r5, r2, #1
 80104ee:	d019      	beq.n	8010524 <__ssvfiscanf_r+0x74>
 80104f0:	6863      	ldr	r3, [r4, #4]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	dd0f      	ble.n	8010516 <__ssvfiscanf_r+0x66>
 80104f6:	6823      	ldr	r3, [r4, #0]
 80104f8:	781a      	ldrb	r2, [r3, #0]
 80104fa:	5cba      	ldrb	r2, [r7, r2]
 80104fc:	0712      	lsls	r2, r2, #28
 80104fe:	d401      	bmi.n	8010504 <__ssvfiscanf_r+0x54>
 8010500:	462a      	mov	r2, r5
 8010502:	e7e8      	b.n	80104d6 <__ssvfiscanf_r+0x26>
 8010504:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010506:	3201      	adds	r2, #1
 8010508:	9245      	str	r2, [sp, #276]	@ 0x114
 801050a:	6862      	ldr	r2, [r4, #4]
 801050c:	3301      	adds	r3, #1
 801050e:	3a01      	subs	r2, #1
 8010510:	6062      	str	r2, [r4, #4]
 8010512:	6023      	str	r3, [r4, #0]
 8010514:	e7ec      	b.n	80104f0 <__ssvfiscanf_r+0x40>
 8010516:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010518:	4621      	mov	r1, r4
 801051a:	4630      	mov	r0, r6
 801051c:	4798      	blx	r3
 801051e:	2800      	cmp	r0, #0
 8010520:	d0e9      	beq.n	80104f6 <__ssvfiscanf_r+0x46>
 8010522:	e7ed      	b.n	8010500 <__ssvfiscanf_r+0x50>
 8010524:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8010528:	f040 8085 	bne.w	8010636 <__ssvfiscanf_r+0x186>
 801052c:	9341      	str	r3, [sp, #260]	@ 0x104
 801052e:	9343      	str	r3, [sp, #268]	@ 0x10c
 8010530:	7853      	ldrb	r3, [r2, #1]
 8010532:	2b2a      	cmp	r3, #42	@ 0x2a
 8010534:	bf02      	ittt	eq
 8010536:	2310      	moveq	r3, #16
 8010538:	1c95      	addeq	r5, r2, #2
 801053a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801053c:	220a      	movs	r2, #10
 801053e:	46aa      	mov	sl, r5
 8010540:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010544:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8010548:	2b09      	cmp	r3, #9
 801054a:	d91e      	bls.n	801058a <__ssvfiscanf_r+0xda>
 801054c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8010768 <__ssvfiscanf_r+0x2b8>
 8010550:	2203      	movs	r2, #3
 8010552:	4658      	mov	r0, fp
 8010554:	f7ef fe54 	bl	8000200 <memchr>
 8010558:	b138      	cbz	r0, 801056a <__ssvfiscanf_r+0xba>
 801055a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801055c:	eba0 000b 	sub.w	r0, r0, fp
 8010560:	2301      	movs	r3, #1
 8010562:	4083      	lsls	r3, r0
 8010564:	4313      	orrs	r3, r2
 8010566:	9341      	str	r3, [sp, #260]	@ 0x104
 8010568:	4655      	mov	r5, sl
 801056a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801056e:	2b78      	cmp	r3, #120	@ 0x78
 8010570:	d806      	bhi.n	8010580 <__ssvfiscanf_r+0xd0>
 8010572:	2b57      	cmp	r3, #87	@ 0x57
 8010574:	d810      	bhi.n	8010598 <__ssvfiscanf_r+0xe8>
 8010576:	2b25      	cmp	r3, #37	@ 0x25
 8010578:	d05d      	beq.n	8010636 <__ssvfiscanf_r+0x186>
 801057a:	d857      	bhi.n	801062c <__ssvfiscanf_r+0x17c>
 801057c:	2b00      	cmp	r3, #0
 801057e:	d075      	beq.n	801066c <__ssvfiscanf_r+0x1bc>
 8010580:	2303      	movs	r3, #3
 8010582:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010584:	230a      	movs	r3, #10
 8010586:	9342      	str	r3, [sp, #264]	@ 0x108
 8010588:	e088      	b.n	801069c <__ssvfiscanf_r+0x1ec>
 801058a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801058c:	fb02 1103 	mla	r1, r2, r3, r1
 8010590:	3930      	subs	r1, #48	@ 0x30
 8010592:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010594:	4655      	mov	r5, sl
 8010596:	e7d2      	b.n	801053e <__ssvfiscanf_r+0x8e>
 8010598:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801059c:	2a20      	cmp	r2, #32
 801059e:	d8ef      	bhi.n	8010580 <__ssvfiscanf_r+0xd0>
 80105a0:	a101      	add	r1, pc, #4	@ (adr r1, 80105a8 <__ssvfiscanf_r+0xf8>)
 80105a2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80105a6:	bf00      	nop
 80105a8:	0801067b 	.word	0x0801067b
 80105ac:	08010581 	.word	0x08010581
 80105b0:	08010581 	.word	0x08010581
 80105b4:	080106d5 	.word	0x080106d5
 80105b8:	08010581 	.word	0x08010581
 80105bc:	08010581 	.word	0x08010581
 80105c0:	08010581 	.word	0x08010581
 80105c4:	08010581 	.word	0x08010581
 80105c8:	08010581 	.word	0x08010581
 80105cc:	08010581 	.word	0x08010581
 80105d0:	08010581 	.word	0x08010581
 80105d4:	080106eb 	.word	0x080106eb
 80105d8:	080106d1 	.word	0x080106d1
 80105dc:	08010633 	.word	0x08010633
 80105e0:	08010633 	.word	0x08010633
 80105e4:	08010633 	.word	0x08010633
 80105e8:	08010581 	.word	0x08010581
 80105ec:	0801068d 	.word	0x0801068d
 80105f0:	08010581 	.word	0x08010581
 80105f4:	08010581 	.word	0x08010581
 80105f8:	08010581 	.word	0x08010581
 80105fc:	08010581 	.word	0x08010581
 8010600:	080106fb 	.word	0x080106fb
 8010604:	08010695 	.word	0x08010695
 8010608:	08010673 	.word	0x08010673
 801060c:	08010581 	.word	0x08010581
 8010610:	08010581 	.word	0x08010581
 8010614:	080106f7 	.word	0x080106f7
 8010618:	08010581 	.word	0x08010581
 801061c:	080106d1 	.word	0x080106d1
 8010620:	08010581 	.word	0x08010581
 8010624:	08010581 	.word	0x08010581
 8010628:	0801067b 	.word	0x0801067b
 801062c:	3b45      	subs	r3, #69	@ 0x45
 801062e:	2b02      	cmp	r3, #2
 8010630:	d8a6      	bhi.n	8010580 <__ssvfiscanf_r+0xd0>
 8010632:	2305      	movs	r3, #5
 8010634:	e031      	b.n	801069a <__ssvfiscanf_r+0x1ea>
 8010636:	6863      	ldr	r3, [r4, #4]
 8010638:	2b00      	cmp	r3, #0
 801063a:	dd0d      	ble.n	8010658 <__ssvfiscanf_r+0x1a8>
 801063c:	6823      	ldr	r3, [r4, #0]
 801063e:	781a      	ldrb	r2, [r3, #0]
 8010640:	454a      	cmp	r2, r9
 8010642:	f040 80a6 	bne.w	8010792 <__ssvfiscanf_r+0x2e2>
 8010646:	3301      	adds	r3, #1
 8010648:	6862      	ldr	r2, [r4, #4]
 801064a:	6023      	str	r3, [r4, #0]
 801064c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801064e:	3a01      	subs	r2, #1
 8010650:	3301      	adds	r3, #1
 8010652:	6062      	str	r2, [r4, #4]
 8010654:	9345      	str	r3, [sp, #276]	@ 0x114
 8010656:	e753      	b.n	8010500 <__ssvfiscanf_r+0x50>
 8010658:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801065a:	4621      	mov	r1, r4
 801065c:	4630      	mov	r0, r6
 801065e:	4798      	blx	r3
 8010660:	2800      	cmp	r0, #0
 8010662:	d0eb      	beq.n	801063c <__ssvfiscanf_r+0x18c>
 8010664:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010666:	2800      	cmp	r0, #0
 8010668:	f040 808b 	bne.w	8010782 <__ssvfiscanf_r+0x2d2>
 801066c:	f04f 30ff 	mov.w	r0, #4294967295
 8010670:	e08b      	b.n	801078a <__ssvfiscanf_r+0x2da>
 8010672:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010674:	f042 0220 	orr.w	r2, r2, #32
 8010678:	9241      	str	r2, [sp, #260]	@ 0x104
 801067a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801067c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010680:	9241      	str	r2, [sp, #260]	@ 0x104
 8010682:	2210      	movs	r2, #16
 8010684:	2b6e      	cmp	r3, #110	@ 0x6e
 8010686:	9242      	str	r2, [sp, #264]	@ 0x108
 8010688:	d902      	bls.n	8010690 <__ssvfiscanf_r+0x1e0>
 801068a:	e005      	b.n	8010698 <__ssvfiscanf_r+0x1e8>
 801068c:	2300      	movs	r3, #0
 801068e:	9342      	str	r3, [sp, #264]	@ 0x108
 8010690:	2303      	movs	r3, #3
 8010692:	e002      	b.n	801069a <__ssvfiscanf_r+0x1ea>
 8010694:	2308      	movs	r3, #8
 8010696:	9342      	str	r3, [sp, #264]	@ 0x108
 8010698:	2304      	movs	r3, #4
 801069a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801069c:	6863      	ldr	r3, [r4, #4]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	dd39      	ble.n	8010716 <__ssvfiscanf_r+0x266>
 80106a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80106a4:	0659      	lsls	r1, r3, #25
 80106a6:	d404      	bmi.n	80106b2 <__ssvfiscanf_r+0x202>
 80106a8:	6823      	ldr	r3, [r4, #0]
 80106aa:	781a      	ldrb	r2, [r3, #0]
 80106ac:	5cba      	ldrb	r2, [r7, r2]
 80106ae:	0712      	lsls	r2, r2, #28
 80106b0:	d438      	bmi.n	8010724 <__ssvfiscanf_r+0x274>
 80106b2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80106b4:	2b02      	cmp	r3, #2
 80106b6:	dc47      	bgt.n	8010748 <__ssvfiscanf_r+0x298>
 80106b8:	466b      	mov	r3, sp
 80106ba:	4622      	mov	r2, r4
 80106bc:	a941      	add	r1, sp, #260	@ 0x104
 80106be:	4630      	mov	r0, r6
 80106c0:	f000 f9f8 	bl	8010ab4 <_scanf_chars>
 80106c4:	2801      	cmp	r0, #1
 80106c6:	d064      	beq.n	8010792 <__ssvfiscanf_r+0x2e2>
 80106c8:	2802      	cmp	r0, #2
 80106ca:	f47f af19 	bne.w	8010500 <__ssvfiscanf_r+0x50>
 80106ce:	e7c9      	b.n	8010664 <__ssvfiscanf_r+0x1b4>
 80106d0:	220a      	movs	r2, #10
 80106d2:	e7d7      	b.n	8010684 <__ssvfiscanf_r+0x1d4>
 80106d4:	4629      	mov	r1, r5
 80106d6:	4640      	mov	r0, r8
 80106d8:	f000 fbf8 	bl	8010ecc <__sccl>
 80106dc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80106de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106e2:	9341      	str	r3, [sp, #260]	@ 0x104
 80106e4:	4605      	mov	r5, r0
 80106e6:	2301      	movs	r3, #1
 80106e8:	e7d7      	b.n	801069a <__ssvfiscanf_r+0x1ea>
 80106ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80106ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106f0:	9341      	str	r3, [sp, #260]	@ 0x104
 80106f2:	2300      	movs	r3, #0
 80106f4:	e7d1      	b.n	801069a <__ssvfiscanf_r+0x1ea>
 80106f6:	2302      	movs	r3, #2
 80106f8:	e7cf      	b.n	801069a <__ssvfiscanf_r+0x1ea>
 80106fa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80106fc:	06c3      	lsls	r3, r0, #27
 80106fe:	f53f aeff 	bmi.w	8010500 <__ssvfiscanf_r+0x50>
 8010702:	9b00      	ldr	r3, [sp, #0]
 8010704:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010706:	1d19      	adds	r1, r3, #4
 8010708:	9100      	str	r1, [sp, #0]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	07c0      	lsls	r0, r0, #31
 801070e:	bf4c      	ite	mi
 8010710:	801a      	strhmi	r2, [r3, #0]
 8010712:	601a      	strpl	r2, [r3, #0]
 8010714:	e6f4      	b.n	8010500 <__ssvfiscanf_r+0x50>
 8010716:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010718:	4621      	mov	r1, r4
 801071a:	4630      	mov	r0, r6
 801071c:	4798      	blx	r3
 801071e:	2800      	cmp	r0, #0
 8010720:	d0bf      	beq.n	80106a2 <__ssvfiscanf_r+0x1f2>
 8010722:	e79f      	b.n	8010664 <__ssvfiscanf_r+0x1b4>
 8010724:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010726:	3201      	adds	r2, #1
 8010728:	9245      	str	r2, [sp, #276]	@ 0x114
 801072a:	6862      	ldr	r2, [r4, #4]
 801072c:	3a01      	subs	r2, #1
 801072e:	2a00      	cmp	r2, #0
 8010730:	6062      	str	r2, [r4, #4]
 8010732:	dd02      	ble.n	801073a <__ssvfiscanf_r+0x28a>
 8010734:	3301      	adds	r3, #1
 8010736:	6023      	str	r3, [r4, #0]
 8010738:	e7b6      	b.n	80106a8 <__ssvfiscanf_r+0x1f8>
 801073a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801073c:	4621      	mov	r1, r4
 801073e:	4630      	mov	r0, r6
 8010740:	4798      	blx	r3
 8010742:	2800      	cmp	r0, #0
 8010744:	d0b0      	beq.n	80106a8 <__ssvfiscanf_r+0x1f8>
 8010746:	e78d      	b.n	8010664 <__ssvfiscanf_r+0x1b4>
 8010748:	2b04      	cmp	r3, #4
 801074a:	dc0f      	bgt.n	801076c <__ssvfiscanf_r+0x2bc>
 801074c:	466b      	mov	r3, sp
 801074e:	4622      	mov	r2, r4
 8010750:	a941      	add	r1, sp, #260	@ 0x104
 8010752:	4630      	mov	r0, r6
 8010754:	f000 fa08 	bl	8010b68 <_scanf_i>
 8010758:	e7b4      	b.n	80106c4 <__ssvfiscanf_r+0x214>
 801075a:	bf00      	nop
 801075c:	080103fd 	.word	0x080103fd
 8010760:	08010477 	.word	0x08010477
 8010764:	08012235 	.word	0x08012235
 8010768:	080123e8 	.word	0x080123e8
 801076c:	4b0a      	ldr	r3, [pc, #40]	@ (8010798 <__ssvfiscanf_r+0x2e8>)
 801076e:	2b00      	cmp	r3, #0
 8010770:	f43f aec6 	beq.w	8010500 <__ssvfiscanf_r+0x50>
 8010774:	466b      	mov	r3, sp
 8010776:	4622      	mov	r2, r4
 8010778:	a941      	add	r1, sp, #260	@ 0x104
 801077a:	4630      	mov	r0, r6
 801077c:	f3af 8000 	nop.w
 8010780:	e7a0      	b.n	80106c4 <__ssvfiscanf_r+0x214>
 8010782:	89a3      	ldrh	r3, [r4, #12]
 8010784:	065b      	lsls	r3, r3, #25
 8010786:	f53f af71 	bmi.w	801066c <__ssvfiscanf_r+0x1bc>
 801078a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801078e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010792:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010794:	e7f9      	b.n	801078a <__ssvfiscanf_r+0x2da>
 8010796:	bf00      	nop
 8010798:	00000000 	.word	0x00000000

0801079c <_printf_common>:
 801079c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107a0:	4616      	mov	r6, r2
 80107a2:	4698      	mov	r8, r3
 80107a4:	688a      	ldr	r2, [r1, #8]
 80107a6:	690b      	ldr	r3, [r1, #16]
 80107a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80107ac:	4293      	cmp	r3, r2
 80107ae:	bfb8      	it	lt
 80107b0:	4613      	movlt	r3, r2
 80107b2:	6033      	str	r3, [r6, #0]
 80107b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80107b8:	4607      	mov	r7, r0
 80107ba:	460c      	mov	r4, r1
 80107bc:	b10a      	cbz	r2, 80107c2 <_printf_common+0x26>
 80107be:	3301      	adds	r3, #1
 80107c0:	6033      	str	r3, [r6, #0]
 80107c2:	6823      	ldr	r3, [r4, #0]
 80107c4:	0699      	lsls	r1, r3, #26
 80107c6:	bf42      	ittt	mi
 80107c8:	6833      	ldrmi	r3, [r6, #0]
 80107ca:	3302      	addmi	r3, #2
 80107cc:	6033      	strmi	r3, [r6, #0]
 80107ce:	6825      	ldr	r5, [r4, #0]
 80107d0:	f015 0506 	ands.w	r5, r5, #6
 80107d4:	d106      	bne.n	80107e4 <_printf_common+0x48>
 80107d6:	f104 0a19 	add.w	sl, r4, #25
 80107da:	68e3      	ldr	r3, [r4, #12]
 80107dc:	6832      	ldr	r2, [r6, #0]
 80107de:	1a9b      	subs	r3, r3, r2
 80107e0:	42ab      	cmp	r3, r5
 80107e2:	dc26      	bgt.n	8010832 <_printf_common+0x96>
 80107e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80107e8:	6822      	ldr	r2, [r4, #0]
 80107ea:	3b00      	subs	r3, #0
 80107ec:	bf18      	it	ne
 80107ee:	2301      	movne	r3, #1
 80107f0:	0692      	lsls	r2, r2, #26
 80107f2:	d42b      	bmi.n	801084c <_printf_common+0xb0>
 80107f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80107f8:	4641      	mov	r1, r8
 80107fa:	4638      	mov	r0, r7
 80107fc:	47c8      	blx	r9
 80107fe:	3001      	adds	r0, #1
 8010800:	d01e      	beq.n	8010840 <_printf_common+0xa4>
 8010802:	6823      	ldr	r3, [r4, #0]
 8010804:	6922      	ldr	r2, [r4, #16]
 8010806:	f003 0306 	and.w	r3, r3, #6
 801080a:	2b04      	cmp	r3, #4
 801080c:	bf02      	ittt	eq
 801080e:	68e5      	ldreq	r5, [r4, #12]
 8010810:	6833      	ldreq	r3, [r6, #0]
 8010812:	1aed      	subeq	r5, r5, r3
 8010814:	68a3      	ldr	r3, [r4, #8]
 8010816:	bf0c      	ite	eq
 8010818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801081c:	2500      	movne	r5, #0
 801081e:	4293      	cmp	r3, r2
 8010820:	bfc4      	itt	gt
 8010822:	1a9b      	subgt	r3, r3, r2
 8010824:	18ed      	addgt	r5, r5, r3
 8010826:	2600      	movs	r6, #0
 8010828:	341a      	adds	r4, #26
 801082a:	42b5      	cmp	r5, r6
 801082c:	d11a      	bne.n	8010864 <_printf_common+0xc8>
 801082e:	2000      	movs	r0, #0
 8010830:	e008      	b.n	8010844 <_printf_common+0xa8>
 8010832:	2301      	movs	r3, #1
 8010834:	4652      	mov	r2, sl
 8010836:	4641      	mov	r1, r8
 8010838:	4638      	mov	r0, r7
 801083a:	47c8      	blx	r9
 801083c:	3001      	adds	r0, #1
 801083e:	d103      	bne.n	8010848 <_printf_common+0xac>
 8010840:	f04f 30ff 	mov.w	r0, #4294967295
 8010844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010848:	3501      	adds	r5, #1
 801084a:	e7c6      	b.n	80107da <_printf_common+0x3e>
 801084c:	18e1      	adds	r1, r4, r3
 801084e:	1c5a      	adds	r2, r3, #1
 8010850:	2030      	movs	r0, #48	@ 0x30
 8010852:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010856:	4422      	add	r2, r4
 8010858:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801085c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010860:	3302      	adds	r3, #2
 8010862:	e7c7      	b.n	80107f4 <_printf_common+0x58>
 8010864:	2301      	movs	r3, #1
 8010866:	4622      	mov	r2, r4
 8010868:	4641      	mov	r1, r8
 801086a:	4638      	mov	r0, r7
 801086c:	47c8      	blx	r9
 801086e:	3001      	adds	r0, #1
 8010870:	d0e6      	beq.n	8010840 <_printf_common+0xa4>
 8010872:	3601      	adds	r6, #1
 8010874:	e7d9      	b.n	801082a <_printf_common+0x8e>
	...

08010878 <_printf_i>:
 8010878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801087c:	7e0f      	ldrb	r7, [r1, #24]
 801087e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010880:	2f78      	cmp	r7, #120	@ 0x78
 8010882:	4691      	mov	r9, r2
 8010884:	4680      	mov	r8, r0
 8010886:	460c      	mov	r4, r1
 8010888:	469a      	mov	sl, r3
 801088a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801088e:	d807      	bhi.n	80108a0 <_printf_i+0x28>
 8010890:	2f62      	cmp	r7, #98	@ 0x62
 8010892:	d80a      	bhi.n	80108aa <_printf_i+0x32>
 8010894:	2f00      	cmp	r7, #0
 8010896:	f000 80d1 	beq.w	8010a3c <_printf_i+0x1c4>
 801089a:	2f58      	cmp	r7, #88	@ 0x58
 801089c:	f000 80b8 	beq.w	8010a10 <_printf_i+0x198>
 80108a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80108a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80108a8:	e03a      	b.n	8010920 <_printf_i+0xa8>
 80108aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80108ae:	2b15      	cmp	r3, #21
 80108b0:	d8f6      	bhi.n	80108a0 <_printf_i+0x28>
 80108b2:	a101      	add	r1, pc, #4	@ (adr r1, 80108b8 <_printf_i+0x40>)
 80108b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80108b8:	08010911 	.word	0x08010911
 80108bc:	08010925 	.word	0x08010925
 80108c0:	080108a1 	.word	0x080108a1
 80108c4:	080108a1 	.word	0x080108a1
 80108c8:	080108a1 	.word	0x080108a1
 80108cc:	080108a1 	.word	0x080108a1
 80108d0:	08010925 	.word	0x08010925
 80108d4:	080108a1 	.word	0x080108a1
 80108d8:	080108a1 	.word	0x080108a1
 80108dc:	080108a1 	.word	0x080108a1
 80108e0:	080108a1 	.word	0x080108a1
 80108e4:	08010a23 	.word	0x08010a23
 80108e8:	0801094f 	.word	0x0801094f
 80108ec:	080109dd 	.word	0x080109dd
 80108f0:	080108a1 	.word	0x080108a1
 80108f4:	080108a1 	.word	0x080108a1
 80108f8:	08010a45 	.word	0x08010a45
 80108fc:	080108a1 	.word	0x080108a1
 8010900:	0801094f 	.word	0x0801094f
 8010904:	080108a1 	.word	0x080108a1
 8010908:	080108a1 	.word	0x080108a1
 801090c:	080109e5 	.word	0x080109e5
 8010910:	6833      	ldr	r3, [r6, #0]
 8010912:	1d1a      	adds	r2, r3, #4
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	6032      	str	r2, [r6, #0]
 8010918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801091c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010920:	2301      	movs	r3, #1
 8010922:	e09c      	b.n	8010a5e <_printf_i+0x1e6>
 8010924:	6833      	ldr	r3, [r6, #0]
 8010926:	6820      	ldr	r0, [r4, #0]
 8010928:	1d19      	adds	r1, r3, #4
 801092a:	6031      	str	r1, [r6, #0]
 801092c:	0606      	lsls	r6, r0, #24
 801092e:	d501      	bpl.n	8010934 <_printf_i+0xbc>
 8010930:	681d      	ldr	r5, [r3, #0]
 8010932:	e003      	b.n	801093c <_printf_i+0xc4>
 8010934:	0645      	lsls	r5, r0, #25
 8010936:	d5fb      	bpl.n	8010930 <_printf_i+0xb8>
 8010938:	f9b3 5000 	ldrsh.w	r5, [r3]
 801093c:	2d00      	cmp	r5, #0
 801093e:	da03      	bge.n	8010948 <_printf_i+0xd0>
 8010940:	232d      	movs	r3, #45	@ 0x2d
 8010942:	426d      	negs	r5, r5
 8010944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010948:	4858      	ldr	r0, [pc, #352]	@ (8010aac <_printf_i+0x234>)
 801094a:	230a      	movs	r3, #10
 801094c:	e011      	b.n	8010972 <_printf_i+0xfa>
 801094e:	6821      	ldr	r1, [r4, #0]
 8010950:	6833      	ldr	r3, [r6, #0]
 8010952:	0608      	lsls	r0, r1, #24
 8010954:	f853 5b04 	ldr.w	r5, [r3], #4
 8010958:	d402      	bmi.n	8010960 <_printf_i+0xe8>
 801095a:	0649      	lsls	r1, r1, #25
 801095c:	bf48      	it	mi
 801095e:	b2ad      	uxthmi	r5, r5
 8010960:	2f6f      	cmp	r7, #111	@ 0x6f
 8010962:	4852      	ldr	r0, [pc, #328]	@ (8010aac <_printf_i+0x234>)
 8010964:	6033      	str	r3, [r6, #0]
 8010966:	bf14      	ite	ne
 8010968:	230a      	movne	r3, #10
 801096a:	2308      	moveq	r3, #8
 801096c:	2100      	movs	r1, #0
 801096e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010972:	6866      	ldr	r6, [r4, #4]
 8010974:	60a6      	str	r6, [r4, #8]
 8010976:	2e00      	cmp	r6, #0
 8010978:	db05      	blt.n	8010986 <_printf_i+0x10e>
 801097a:	6821      	ldr	r1, [r4, #0]
 801097c:	432e      	orrs	r6, r5
 801097e:	f021 0104 	bic.w	r1, r1, #4
 8010982:	6021      	str	r1, [r4, #0]
 8010984:	d04b      	beq.n	8010a1e <_printf_i+0x1a6>
 8010986:	4616      	mov	r6, r2
 8010988:	fbb5 f1f3 	udiv	r1, r5, r3
 801098c:	fb03 5711 	mls	r7, r3, r1, r5
 8010990:	5dc7      	ldrb	r7, [r0, r7]
 8010992:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010996:	462f      	mov	r7, r5
 8010998:	42bb      	cmp	r3, r7
 801099a:	460d      	mov	r5, r1
 801099c:	d9f4      	bls.n	8010988 <_printf_i+0x110>
 801099e:	2b08      	cmp	r3, #8
 80109a0:	d10b      	bne.n	80109ba <_printf_i+0x142>
 80109a2:	6823      	ldr	r3, [r4, #0]
 80109a4:	07df      	lsls	r7, r3, #31
 80109a6:	d508      	bpl.n	80109ba <_printf_i+0x142>
 80109a8:	6923      	ldr	r3, [r4, #16]
 80109aa:	6861      	ldr	r1, [r4, #4]
 80109ac:	4299      	cmp	r1, r3
 80109ae:	bfde      	ittt	le
 80109b0:	2330      	movle	r3, #48	@ 0x30
 80109b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80109b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80109ba:	1b92      	subs	r2, r2, r6
 80109bc:	6122      	str	r2, [r4, #16]
 80109be:	f8cd a000 	str.w	sl, [sp]
 80109c2:	464b      	mov	r3, r9
 80109c4:	aa03      	add	r2, sp, #12
 80109c6:	4621      	mov	r1, r4
 80109c8:	4640      	mov	r0, r8
 80109ca:	f7ff fee7 	bl	801079c <_printf_common>
 80109ce:	3001      	adds	r0, #1
 80109d0:	d14a      	bne.n	8010a68 <_printf_i+0x1f0>
 80109d2:	f04f 30ff 	mov.w	r0, #4294967295
 80109d6:	b004      	add	sp, #16
 80109d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109dc:	6823      	ldr	r3, [r4, #0]
 80109de:	f043 0320 	orr.w	r3, r3, #32
 80109e2:	6023      	str	r3, [r4, #0]
 80109e4:	4832      	ldr	r0, [pc, #200]	@ (8010ab0 <_printf_i+0x238>)
 80109e6:	2778      	movs	r7, #120	@ 0x78
 80109e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80109ec:	6823      	ldr	r3, [r4, #0]
 80109ee:	6831      	ldr	r1, [r6, #0]
 80109f0:	061f      	lsls	r7, r3, #24
 80109f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80109f6:	d402      	bmi.n	80109fe <_printf_i+0x186>
 80109f8:	065f      	lsls	r7, r3, #25
 80109fa:	bf48      	it	mi
 80109fc:	b2ad      	uxthmi	r5, r5
 80109fe:	6031      	str	r1, [r6, #0]
 8010a00:	07d9      	lsls	r1, r3, #31
 8010a02:	bf44      	itt	mi
 8010a04:	f043 0320 	orrmi.w	r3, r3, #32
 8010a08:	6023      	strmi	r3, [r4, #0]
 8010a0a:	b11d      	cbz	r5, 8010a14 <_printf_i+0x19c>
 8010a0c:	2310      	movs	r3, #16
 8010a0e:	e7ad      	b.n	801096c <_printf_i+0xf4>
 8010a10:	4826      	ldr	r0, [pc, #152]	@ (8010aac <_printf_i+0x234>)
 8010a12:	e7e9      	b.n	80109e8 <_printf_i+0x170>
 8010a14:	6823      	ldr	r3, [r4, #0]
 8010a16:	f023 0320 	bic.w	r3, r3, #32
 8010a1a:	6023      	str	r3, [r4, #0]
 8010a1c:	e7f6      	b.n	8010a0c <_printf_i+0x194>
 8010a1e:	4616      	mov	r6, r2
 8010a20:	e7bd      	b.n	801099e <_printf_i+0x126>
 8010a22:	6833      	ldr	r3, [r6, #0]
 8010a24:	6825      	ldr	r5, [r4, #0]
 8010a26:	6961      	ldr	r1, [r4, #20]
 8010a28:	1d18      	adds	r0, r3, #4
 8010a2a:	6030      	str	r0, [r6, #0]
 8010a2c:	062e      	lsls	r6, r5, #24
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	d501      	bpl.n	8010a36 <_printf_i+0x1be>
 8010a32:	6019      	str	r1, [r3, #0]
 8010a34:	e002      	b.n	8010a3c <_printf_i+0x1c4>
 8010a36:	0668      	lsls	r0, r5, #25
 8010a38:	d5fb      	bpl.n	8010a32 <_printf_i+0x1ba>
 8010a3a:	8019      	strh	r1, [r3, #0]
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	6123      	str	r3, [r4, #16]
 8010a40:	4616      	mov	r6, r2
 8010a42:	e7bc      	b.n	80109be <_printf_i+0x146>
 8010a44:	6833      	ldr	r3, [r6, #0]
 8010a46:	1d1a      	adds	r2, r3, #4
 8010a48:	6032      	str	r2, [r6, #0]
 8010a4a:	681e      	ldr	r6, [r3, #0]
 8010a4c:	6862      	ldr	r2, [r4, #4]
 8010a4e:	2100      	movs	r1, #0
 8010a50:	4630      	mov	r0, r6
 8010a52:	f7ef fbd5 	bl	8000200 <memchr>
 8010a56:	b108      	cbz	r0, 8010a5c <_printf_i+0x1e4>
 8010a58:	1b80      	subs	r0, r0, r6
 8010a5a:	6060      	str	r0, [r4, #4]
 8010a5c:	6863      	ldr	r3, [r4, #4]
 8010a5e:	6123      	str	r3, [r4, #16]
 8010a60:	2300      	movs	r3, #0
 8010a62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a66:	e7aa      	b.n	80109be <_printf_i+0x146>
 8010a68:	6923      	ldr	r3, [r4, #16]
 8010a6a:	4632      	mov	r2, r6
 8010a6c:	4649      	mov	r1, r9
 8010a6e:	4640      	mov	r0, r8
 8010a70:	47d0      	blx	sl
 8010a72:	3001      	adds	r0, #1
 8010a74:	d0ad      	beq.n	80109d2 <_printf_i+0x15a>
 8010a76:	6823      	ldr	r3, [r4, #0]
 8010a78:	079b      	lsls	r3, r3, #30
 8010a7a:	d413      	bmi.n	8010aa4 <_printf_i+0x22c>
 8010a7c:	68e0      	ldr	r0, [r4, #12]
 8010a7e:	9b03      	ldr	r3, [sp, #12]
 8010a80:	4298      	cmp	r0, r3
 8010a82:	bfb8      	it	lt
 8010a84:	4618      	movlt	r0, r3
 8010a86:	e7a6      	b.n	80109d6 <_printf_i+0x15e>
 8010a88:	2301      	movs	r3, #1
 8010a8a:	4632      	mov	r2, r6
 8010a8c:	4649      	mov	r1, r9
 8010a8e:	4640      	mov	r0, r8
 8010a90:	47d0      	blx	sl
 8010a92:	3001      	adds	r0, #1
 8010a94:	d09d      	beq.n	80109d2 <_printf_i+0x15a>
 8010a96:	3501      	adds	r5, #1
 8010a98:	68e3      	ldr	r3, [r4, #12]
 8010a9a:	9903      	ldr	r1, [sp, #12]
 8010a9c:	1a5b      	subs	r3, r3, r1
 8010a9e:	42ab      	cmp	r3, r5
 8010aa0:	dcf2      	bgt.n	8010a88 <_printf_i+0x210>
 8010aa2:	e7eb      	b.n	8010a7c <_printf_i+0x204>
 8010aa4:	2500      	movs	r5, #0
 8010aa6:	f104 0619 	add.w	r6, r4, #25
 8010aaa:	e7f5      	b.n	8010a98 <_printf_i+0x220>
 8010aac:	080123f3 	.word	0x080123f3
 8010ab0:	08012404 	.word	0x08012404

08010ab4 <_scanf_chars>:
 8010ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ab8:	4615      	mov	r5, r2
 8010aba:	688a      	ldr	r2, [r1, #8]
 8010abc:	4680      	mov	r8, r0
 8010abe:	460c      	mov	r4, r1
 8010ac0:	b932      	cbnz	r2, 8010ad0 <_scanf_chars+0x1c>
 8010ac2:	698a      	ldr	r2, [r1, #24]
 8010ac4:	2a00      	cmp	r2, #0
 8010ac6:	bf14      	ite	ne
 8010ac8:	f04f 32ff 	movne.w	r2, #4294967295
 8010acc:	2201      	moveq	r2, #1
 8010ace:	608a      	str	r2, [r1, #8]
 8010ad0:	6822      	ldr	r2, [r4, #0]
 8010ad2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8010b64 <_scanf_chars+0xb0>
 8010ad6:	06d1      	lsls	r1, r2, #27
 8010ad8:	bf5f      	itttt	pl
 8010ada:	681a      	ldrpl	r2, [r3, #0]
 8010adc:	1d11      	addpl	r1, r2, #4
 8010ade:	6019      	strpl	r1, [r3, #0]
 8010ae0:	6816      	ldrpl	r6, [r2, #0]
 8010ae2:	2700      	movs	r7, #0
 8010ae4:	69a0      	ldr	r0, [r4, #24]
 8010ae6:	b188      	cbz	r0, 8010b0c <_scanf_chars+0x58>
 8010ae8:	2801      	cmp	r0, #1
 8010aea:	d107      	bne.n	8010afc <_scanf_chars+0x48>
 8010aec:	682b      	ldr	r3, [r5, #0]
 8010aee:	781a      	ldrb	r2, [r3, #0]
 8010af0:	6963      	ldr	r3, [r4, #20]
 8010af2:	5c9b      	ldrb	r3, [r3, r2]
 8010af4:	b953      	cbnz	r3, 8010b0c <_scanf_chars+0x58>
 8010af6:	2f00      	cmp	r7, #0
 8010af8:	d031      	beq.n	8010b5e <_scanf_chars+0xaa>
 8010afa:	e022      	b.n	8010b42 <_scanf_chars+0x8e>
 8010afc:	2802      	cmp	r0, #2
 8010afe:	d120      	bne.n	8010b42 <_scanf_chars+0x8e>
 8010b00:	682b      	ldr	r3, [r5, #0]
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010b08:	071b      	lsls	r3, r3, #28
 8010b0a:	d41a      	bmi.n	8010b42 <_scanf_chars+0x8e>
 8010b0c:	6823      	ldr	r3, [r4, #0]
 8010b0e:	06da      	lsls	r2, r3, #27
 8010b10:	bf5e      	ittt	pl
 8010b12:	682b      	ldrpl	r3, [r5, #0]
 8010b14:	781b      	ldrbpl	r3, [r3, #0]
 8010b16:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010b1a:	682a      	ldr	r2, [r5, #0]
 8010b1c:	686b      	ldr	r3, [r5, #4]
 8010b1e:	3201      	adds	r2, #1
 8010b20:	602a      	str	r2, [r5, #0]
 8010b22:	68a2      	ldr	r2, [r4, #8]
 8010b24:	3b01      	subs	r3, #1
 8010b26:	3a01      	subs	r2, #1
 8010b28:	606b      	str	r3, [r5, #4]
 8010b2a:	3701      	adds	r7, #1
 8010b2c:	60a2      	str	r2, [r4, #8]
 8010b2e:	b142      	cbz	r2, 8010b42 <_scanf_chars+0x8e>
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	dcd7      	bgt.n	8010ae4 <_scanf_chars+0x30>
 8010b34:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010b38:	4629      	mov	r1, r5
 8010b3a:	4640      	mov	r0, r8
 8010b3c:	4798      	blx	r3
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	d0d0      	beq.n	8010ae4 <_scanf_chars+0x30>
 8010b42:	6823      	ldr	r3, [r4, #0]
 8010b44:	f013 0310 	ands.w	r3, r3, #16
 8010b48:	d105      	bne.n	8010b56 <_scanf_chars+0xa2>
 8010b4a:	68e2      	ldr	r2, [r4, #12]
 8010b4c:	3201      	adds	r2, #1
 8010b4e:	60e2      	str	r2, [r4, #12]
 8010b50:	69a2      	ldr	r2, [r4, #24]
 8010b52:	b102      	cbz	r2, 8010b56 <_scanf_chars+0xa2>
 8010b54:	7033      	strb	r3, [r6, #0]
 8010b56:	6923      	ldr	r3, [r4, #16]
 8010b58:	443b      	add	r3, r7
 8010b5a:	6123      	str	r3, [r4, #16]
 8010b5c:	2000      	movs	r0, #0
 8010b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b62:	bf00      	nop
 8010b64:	08012235 	.word	0x08012235

08010b68 <_scanf_i>:
 8010b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b6c:	4698      	mov	r8, r3
 8010b6e:	4b74      	ldr	r3, [pc, #464]	@ (8010d40 <_scanf_i+0x1d8>)
 8010b70:	460c      	mov	r4, r1
 8010b72:	4682      	mov	sl, r0
 8010b74:	4616      	mov	r6, r2
 8010b76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b7a:	b087      	sub	sp, #28
 8010b7c:	ab03      	add	r3, sp, #12
 8010b7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010b82:	4b70      	ldr	r3, [pc, #448]	@ (8010d44 <_scanf_i+0x1dc>)
 8010b84:	69a1      	ldr	r1, [r4, #24]
 8010b86:	4a70      	ldr	r2, [pc, #448]	@ (8010d48 <_scanf_i+0x1e0>)
 8010b88:	2903      	cmp	r1, #3
 8010b8a:	bf08      	it	eq
 8010b8c:	461a      	moveq	r2, r3
 8010b8e:	68a3      	ldr	r3, [r4, #8]
 8010b90:	9201      	str	r2, [sp, #4]
 8010b92:	1e5a      	subs	r2, r3, #1
 8010b94:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010b98:	bf88      	it	hi
 8010b9a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010b9e:	4627      	mov	r7, r4
 8010ba0:	bf82      	ittt	hi
 8010ba2:	eb03 0905 	addhi.w	r9, r3, r5
 8010ba6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010baa:	60a3      	strhi	r3, [r4, #8]
 8010bac:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010bb0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8010bb4:	bf98      	it	ls
 8010bb6:	f04f 0900 	movls.w	r9, #0
 8010bba:	6023      	str	r3, [r4, #0]
 8010bbc:	463d      	mov	r5, r7
 8010bbe:	f04f 0b00 	mov.w	fp, #0
 8010bc2:	6831      	ldr	r1, [r6, #0]
 8010bc4:	ab03      	add	r3, sp, #12
 8010bc6:	7809      	ldrb	r1, [r1, #0]
 8010bc8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010bcc:	2202      	movs	r2, #2
 8010bce:	f7ef fb17 	bl	8000200 <memchr>
 8010bd2:	b328      	cbz	r0, 8010c20 <_scanf_i+0xb8>
 8010bd4:	f1bb 0f01 	cmp.w	fp, #1
 8010bd8:	d159      	bne.n	8010c8e <_scanf_i+0x126>
 8010bda:	6862      	ldr	r2, [r4, #4]
 8010bdc:	b92a      	cbnz	r2, 8010bea <_scanf_i+0x82>
 8010bde:	6822      	ldr	r2, [r4, #0]
 8010be0:	2108      	movs	r1, #8
 8010be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010be6:	6061      	str	r1, [r4, #4]
 8010be8:	6022      	str	r2, [r4, #0]
 8010bea:	6822      	ldr	r2, [r4, #0]
 8010bec:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8010bf0:	6022      	str	r2, [r4, #0]
 8010bf2:	68a2      	ldr	r2, [r4, #8]
 8010bf4:	1e51      	subs	r1, r2, #1
 8010bf6:	60a1      	str	r1, [r4, #8]
 8010bf8:	b192      	cbz	r2, 8010c20 <_scanf_i+0xb8>
 8010bfa:	6832      	ldr	r2, [r6, #0]
 8010bfc:	1c51      	adds	r1, r2, #1
 8010bfe:	6031      	str	r1, [r6, #0]
 8010c00:	7812      	ldrb	r2, [r2, #0]
 8010c02:	f805 2b01 	strb.w	r2, [r5], #1
 8010c06:	6872      	ldr	r2, [r6, #4]
 8010c08:	3a01      	subs	r2, #1
 8010c0a:	2a00      	cmp	r2, #0
 8010c0c:	6072      	str	r2, [r6, #4]
 8010c0e:	dc07      	bgt.n	8010c20 <_scanf_i+0xb8>
 8010c10:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8010c14:	4631      	mov	r1, r6
 8010c16:	4650      	mov	r0, sl
 8010c18:	4790      	blx	r2
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	f040 8085 	bne.w	8010d2a <_scanf_i+0x1c2>
 8010c20:	f10b 0b01 	add.w	fp, fp, #1
 8010c24:	f1bb 0f03 	cmp.w	fp, #3
 8010c28:	d1cb      	bne.n	8010bc2 <_scanf_i+0x5a>
 8010c2a:	6863      	ldr	r3, [r4, #4]
 8010c2c:	b90b      	cbnz	r3, 8010c32 <_scanf_i+0xca>
 8010c2e:	230a      	movs	r3, #10
 8010c30:	6063      	str	r3, [r4, #4]
 8010c32:	6863      	ldr	r3, [r4, #4]
 8010c34:	4945      	ldr	r1, [pc, #276]	@ (8010d4c <_scanf_i+0x1e4>)
 8010c36:	6960      	ldr	r0, [r4, #20]
 8010c38:	1ac9      	subs	r1, r1, r3
 8010c3a:	f000 f947 	bl	8010ecc <__sccl>
 8010c3e:	f04f 0b00 	mov.w	fp, #0
 8010c42:	68a3      	ldr	r3, [r4, #8]
 8010c44:	6822      	ldr	r2, [r4, #0]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d03d      	beq.n	8010cc6 <_scanf_i+0x15e>
 8010c4a:	6831      	ldr	r1, [r6, #0]
 8010c4c:	6960      	ldr	r0, [r4, #20]
 8010c4e:	f891 c000 	ldrb.w	ip, [r1]
 8010c52:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010c56:	2800      	cmp	r0, #0
 8010c58:	d035      	beq.n	8010cc6 <_scanf_i+0x15e>
 8010c5a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8010c5e:	d124      	bne.n	8010caa <_scanf_i+0x142>
 8010c60:	0510      	lsls	r0, r2, #20
 8010c62:	d522      	bpl.n	8010caa <_scanf_i+0x142>
 8010c64:	f10b 0b01 	add.w	fp, fp, #1
 8010c68:	f1b9 0f00 	cmp.w	r9, #0
 8010c6c:	d003      	beq.n	8010c76 <_scanf_i+0x10e>
 8010c6e:	3301      	adds	r3, #1
 8010c70:	f109 39ff 	add.w	r9, r9, #4294967295
 8010c74:	60a3      	str	r3, [r4, #8]
 8010c76:	6873      	ldr	r3, [r6, #4]
 8010c78:	3b01      	subs	r3, #1
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	6073      	str	r3, [r6, #4]
 8010c7e:	dd1b      	ble.n	8010cb8 <_scanf_i+0x150>
 8010c80:	6833      	ldr	r3, [r6, #0]
 8010c82:	3301      	adds	r3, #1
 8010c84:	6033      	str	r3, [r6, #0]
 8010c86:	68a3      	ldr	r3, [r4, #8]
 8010c88:	3b01      	subs	r3, #1
 8010c8a:	60a3      	str	r3, [r4, #8]
 8010c8c:	e7d9      	b.n	8010c42 <_scanf_i+0xda>
 8010c8e:	f1bb 0f02 	cmp.w	fp, #2
 8010c92:	d1ae      	bne.n	8010bf2 <_scanf_i+0x8a>
 8010c94:	6822      	ldr	r2, [r4, #0]
 8010c96:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8010c9a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8010c9e:	d1c4      	bne.n	8010c2a <_scanf_i+0xc2>
 8010ca0:	2110      	movs	r1, #16
 8010ca2:	6061      	str	r1, [r4, #4]
 8010ca4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010ca8:	e7a2      	b.n	8010bf0 <_scanf_i+0x88>
 8010caa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8010cae:	6022      	str	r2, [r4, #0]
 8010cb0:	780b      	ldrb	r3, [r1, #0]
 8010cb2:	f805 3b01 	strb.w	r3, [r5], #1
 8010cb6:	e7de      	b.n	8010c76 <_scanf_i+0x10e>
 8010cb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010cbc:	4631      	mov	r1, r6
 8010cbe:	4650      	mov	r0, sl
 8010cc0:	4798      	blx	r3
 8010cc2:	2800      	cmp	r0, #0
 8010cc4:	d0df      	beq.n	8010c86 <_scanf_i+0x11e>
 8010cc6:	6823      	ldr	r3, [r4, #0]
 8010cc8:	05d9      	lsls	r1, r3, #23
 8010cca:	d50d      	bpl.n	8010ce8 <_scanf_i+0x180>
 8010ccc:	42bd      	cmp	r5, r7
 8010cce:	d909      	bls.n	8010ce4 <_scanf_i+0x17c>
 8010cd0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010cd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010cd8:	4632      	mov	r2, r6
 8010cda:	4650      	mov	r0, sl
 8010cdc:	4798      	blx	r3
 8010cde:	f105 39ff 	add.w	r9, r5, #4294967295
 8010ce2:	464d      	mov	r5, r9
 8010ce4:	42bd      	cmp	r5, r7
 8010ce6:	d028      	beq.n	8010d3a <_scanf_i+0x1d2>
 8010ce8:	6822      	ldr	r2, [r4, #0]
 8010cea:	f012 0210 	ands.w	r2, r2, #16
 8010cee:	d113      	bne.n	8010d18 <_scanf_i+0x1b0>
 8010cf0:	702a      	strb	r2, [r5, #0]
 8010cf2:	6863      	ldr	r3, [r4, #4]
 8010cf4:	9e01      	ldr	r6, [sp, #4]
 8010cf6:	4639      	mov	r1, r7
 8010cf8:	4650      	mov	r0, sl
 8010cfa:	47b0      	blx	r6
 8010cfc:	f8d8 3000 	ldr.w	r3, [r8]
 8010d00:	6821      	ldr	r1, [r4, #0]
 8010d02:	1d1a      	adds	r2, r3, #4
 8010d04:	f8c8 2000 	str.w	r2, [r8]
 8010d08:	f011 0f20 	tst.w	r1, #32
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	d00f      	beq.n	8010d30 <_scanf_i+0x1c8>
 8010d10:	6018      	str	r0, [r3, #0]
 8010d12:	68e3      	ldr	r3, [r4, #12]
 8010d14:	3301      	adds	r3, #1
 8010d16:	60e3      	str	r3, [r4, #12]
 8010d18:	6923      	ldr	r3, [r4, #16]
 8010d1a:	1bed      	subs	r5, r5, r7
 8010d1c:	445d      	add	r5, fp
 8010d1e:	442b      	add	r3, r5
 8010d20:	6123      	str	r3, [r4, #16]
 8010d22:	2000      	movs	r0, #0
 8010d24:	b007      	add	sp, #28
 8010d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d2a:	f04f 0b00 	mov.w	fp, #0
 8010d2e:	e7ca      	b.n	8010cc6 <_scanf_i+0x15e>
 8010d30:	07ca      	lsls	r2, r1, #31
 8010d32:	bf4c      	ite	mi
 8010d34:	8018      	strhmi	r0, [r3, #0]
 8010d36:	6018      	strpl	r0, [r3, #0]
 8010d38:	e7eb      	b.n	8010d12 <_scanf_i+0x1aa>
 8010d3a:	2001      	movs	r0, #1
 8010d3c:	e7f2      	b.n	8010d24 <_scanf_i+0x1bc>
 8010d3e:	bf00      	nop
 8010d40:	0801211c 	.word	0x0801211c
 8010d44:	0800f949 	.word	0x0800f949
 8010d48:	08011169 	.word	0x08011169
 8010d4c:	08012425 	.word	0x08012425

08010d50 <__sflush_r>:
 8010d50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d58:	0716      	lsls	r6, r2, #28
 8010d5a:	4605      	mov	r5, r0
 8010d5c:	460c      	mov	r4, r1
 8010d5e:	d454      	bmi.n	8010e0a <__sflush_r+0xba>
 8010d60:	684b      	ldr	r3, [r1, #4]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	dc02      	bgt.n	8010d6c <__sflush_r+0x1c>
 8010d66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	dd48      	ble.n	8010dfe <__sflush_r+0xae>
 8010d6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010d6e:	2e00      	cmp	r6, #0
 8010d70:	d045      	beq.n	8010dfe <__sflush_r+0xae>
 8010d72:	2300      	movs	r3, #0
 8010d74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010d78:	682f      	ldr	r7, [r5, #0]
 8010d7a:	6a21      	ldr	r1, [r4, #32]
 8010d7c:	602b      	str	r3, [r5, #0]
 8010d7e:	d030      	beq.n	8010de2 <__sflush_r+0x92>
 8010d80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010d82:	89a3      	ldrh	r3, [r4, #12]
 8010d84:	0759      	lsls	r1, r3, #29
 8010d86:	d505      	bpl.n	8010d94 <__sflush_r+0x44>
 8010d88:	6863      	ldr	r3, [r4, #4]
 8010d8a:	1ad2      	subs	r2, r2, r3
 8010d8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010d8e:	b10b      	cbz	r3, 8010d94 <__sflush_r+0x44>
 8010d90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010d92:	1ad2      	subs	r2, r2, r3
 8010d94:	2300      	movs	r3, #0
 8010d96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010d98:	6a21      	ldr	r1, [r4, #32]
 8010d9a:	4628      	mov	r0, r5
 8010d9c:	47b0      	blx	r6
 8010d9e:	1c43      	adds	r3, r0, #1
 8010da0:	89a3      	ldrh	r3, [r4, #12]
 8010da2:	d106      	bne.n	8010db2 <__sflush_r+0x62>
 8010da4:	6829      	ldr	r1, [r5, #0]
 8010da6:	291d      	cmp	r1, #29
 8010da8:	d82b      	bhi.n	8010e02 <__sflush_r+0xb2>
 8010daa:	4a2a      	ldr	r2, [pc, #168]	@ (8010e54 <__sflush_r+0x104>)
 8010dac:	40ca      	lsrs	r2, r1
 8010dae:	07d6      	lsls	r6, r2, #31
 8010db0:	d527      	bpl.n	8010e02 <__sflush_r+0xb2>
 8010db2:	2200      	movs	r2, #0
 8010db4:	6062      	str	r2, [r4, #4]
 8010db6:	04d9      	lsls	r1, r3, #19
 8010db8:	6922      	ldr	r2, [r4, #16]
 8010dba:	6022      	str	r2, [r4, #0]
 8010dbc:	d504      	bpl.n	8010dc8 <__sflush_r+0x78>
 8010dbe:	1c42      	adds	r2, r0, #1
 8010dc0:	d101      	bne.n	8010dc6 <__sflush_r+0x76>
 8010dc2:	682b      	ldr	r3, [r5, #0]
 8010dc4:	b903      	cbnz	r3, 8010dc8 <__sflush_r+0x78>
 8010dc6:	6560      	str	r0, [r4, #84]	@ 0x54
 8010dc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010dca:	602f      	str	r7, [r5, #0]
 8010dcc:	b1b9      	cbz	r1, 8010dfe <__sflush_r+0xae>
 8010dce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010dd2:	4299      	cmp	r1, r3
 8010dd4:	d002      	beq.n	8010ddc <__sflush_r+0x8c>
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	f7ff f8b8 	bl	800ff4c <_free_r>
 8010ddc:	2300      	movs	r3, #0
 8010dde:	6363      	str	r3, [r4, #52]	@ 0x34
 8010de0:	e00d      	b.n	8010dfe <__sflush_r+0xae>
 8010de2:	2301      	movs	r3, #1
 8010de4:	4628      	mov	r0, r5
 8010de6:	47b0      	blx	r6
 8010de8:	4602      	mov	r2, r0
 8010dea:	1c50      	adds	r0, r2, #1
 8010dec:	d1c9      	bne.n	8010d82 <__sflush_r+0x32>
 8010dee:	682b      	ldr	r3, [r5, #0]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d0c6      	beq.n	8010d82 <__sflush_r+0x32>
 8010df4:	2b1d      	cmp	r3, #29
 8010df6:	d001      	beq.n	8010dfc <__sflush_r+0xac>
 8010df8:	2b16      	cmp	r3, #22
 8010dfa:	d11e      	bne.n	8010e3a <__sflush_r+0xea>
 8010dfc:	602f      	str	r7, [r5, #0]
 8010dfe:	2000      	movs	r0, #0
 8010e00:	e022      	b.n	8010e48 <__sflush_r+0xf8>
 8010e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e06:	b21b      	sxth	r3, r3
 8010e08:	e01b      	b.n	8010e42 <__sflush_r+0xf2>
 8010e0a:	690f      	ldr	r7, [r1, #16]
 8010e0c:	2f00      	cmp	r7, #0
 8010e0e:	d0f6      	beq.n	8010dfe <__sflush_r+0xae>
 8010e10:	0793      	lsls	r3, r2, #30
 8010e12:	680e      	ldr	r6, [r1, #0]
 8010e14:	bf08      	it	eq
 8010e16:	694b      	ldreq	r3, [r1, #20]
 8010e18:	600f      	str	r7, [r1, #0]
 8010e1a:	bf18      	it	ne
 8010e1c:	2300      	movne	r3, #0
 8010e1e:	eba6 0807 	sub.w	r8, r6, r7
 8010e22:	608b      	str	r3, [r1, #8]
 8010e24:	f1b8 0f00 	cmp.w	r8, #0
 8010e28:	dde9      	ble.n	8010dfe <__sflush_r+0xae>
 8010e2a:	6a21      	ldr	r1, [r4, #32]
 8010e2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010e2e:	4643      	mov	r3, r8
 8010e30:	463a      	mov	r2, r7
 8010e32:	4628      	mov	r0, r5
 8010e34:	47b0      	blx	r6
 8010e36:	2800      	cmp	r0, #0
 8010e38:	dc08      	bgt.n	8010e4c <__sflush_r+0xfc>
 8010e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e42:	81a3      	strh	r3, [r4, #12]
 8010e44:	f04f 30ff 	mov.w	r0, #4294967295
 8010e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e4c:	4407      	add	r7, r0
 8010e4e:	eba8 0800 	sub.w	r8, r8, r0
 8010e52:	e7e7      	b.n	8010e24 <__sflush_r+0xd4>
 8010e54:	20400001 	.word	0x20400001

08010e58 <_fflush_r>:
 8010e58:	b538      	push	{r3, r4, r5, lr}
 8010e5a:	690b      	ldr	r3, [r1, #16]
 8010e5c:	4605      	mov	r5, r0
 8010e5e:	460c      	mov	r4, r1
 8010e60:	b913      	cbnz	r3, 8010e68 <_fflush_r+0x10>
 8010e62:	2500      	movs	r5, #0
 8010e64:	4628      	mov	r0, r5
 8010e66:	bd38      	pop	{r3, r4, r5, pc}
 8010e68:	b118      	cbz	r0, 8010e72 <_fflush_r+0x1a>
 8010e6a:	6a03      	ldr	r3, [r0, #32]
 8010e6c:	b90b      	cbnz	r3, 8010e72 <_fflush_r+0x1a>
 8010e6e:	f7fe fe03 	bl	800fa78 <__sinit>
 8010e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d0f3      	beq.n	8010e62 <_fflush_r+0xa>
 8010e7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010e7c:	07d0      	lsls	r0, r2, #31
 8010e7e:	d404      	bmi.n	8010e8a <_fflush_r+0x32>
 8010e80:	0599      	lsls	r1, r3, #22
 8010e82:	d402      	bmi.n	8010e8a <_fflush_r+0x32>
 8010e84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e86:	f7ff f832 	bl	800feee <__retarget_lock_acquire_recursive>
 8010e8a:	4628      	mov	r0, r5
 8010e8c:	4621      	mov	r1, r4
 8010e8e:	f7ff ff5f 	bl	8010d50 <__sflush_r>
 8010e92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010e94:	07da      	lsls	r2, r3, #31
 8010e96:	4605      	mov	r5, r0
 8010e98:	d4e4      	bmi.n	8010e64 <_fflush_r+0xc>
 8010e9a:	89a3      	ldrh	r3, [r4, #12]
 8010e9c:	059b      	lsls	r3, r3, #22
 8010e9e:	d4e1      	bmi.n	8010e64 <_fflush_r+0xc>
 8010ea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ea2:	f7ff f825 	bl	800fef0 <__retarget_lock_release_recursive>
 8010ea6:	e7dd      	b.n	8010e64 <_fflush_r+0xc>

08010ea8 <fiprintf>:
 8010ea8:	b40e      	push	{r1, r2, r3}
 8010eaa:	b503      	push	{r0, r1, lr}
 8010eac:	4601      	mov	r1, r0
 8010eae:	ab03      	add	r3, sp, #12
 8010eb0:	4805      	ldr	r0, [pc, #20]	@ (8010ec8 <fiprintf+0x20>)
 8010eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010eb6:	6800      	ldr	r0, [r0, #0]
 8010eb8:	9301      	str	r3, [sp, #4]
 8010eba:	f000 f981 	bl	80111c0 <_vfiprintf_r>
 8010ebe:	b002      	add	sp, #8
 8010ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ec4:	b003      	add	sp, #12
 8010ec6:	4770      	bx	lr
 8010ec8:	20000138 	.word	0x20000138

08010ecc <__sccl>:
 8010ecc:	b570      	push	{r4, r5, r6, lr}
 8010ece:	780b      	ldrb	r3, [r1, #0]
 8010ed0:	4604      	mov	r4, r0
 8010ed2:	2b5e      	cmp	r3, #94	@ 0x5e
 8010ed4:	bf0b      	itete	eq
 8010ed6:	784b      	ldrbeq	r3, [r1, #1]
 8010ed8:	1c4a      	addne	r2, r1, #1
 8010eda:	1c8a      	addeq	r2, r1, #2
 8010edc:	2100      	movne	r1, #0
 8010ede:	bf08      	it	eq
 8010ee0:	2101      	moveq	r1, #1
 8010ee2:	3801      	subs	r0, #1
 8010ee4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8010ee8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8010eec:	42a8      	cmp	r0, r5
 8010eee:	d1fb      	bne.n	8010ee8 <__sccl+0x1c>
 8010ef0:	b90b      	cbnz	r3, 8010ef6 <__sccl+0x2a>
 8010ef2:	1e50      	subs	r0, r2, #1
 8010ef4:	bd70      	pop	{r4, r5, r6, pc}
 8010ef6:	f081 0101 	eor.w	r1, r1, #1
 8010efa:	54e1      	strb	r1, [r4, r3]
 8010efc:	4610      	mov	r0, r2
 8010efe:	4602      	mov	r2, r0
 8010f00:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010f04:	2d2d      	cmp	r5, #45	@ 0x2d
 8010f06:	d005      	beq.n	8010f14 <__sccl+0x48>
 8010f08:	2d5d      	cmp	r5, #93	@ 0x5d
 8010f0a:	d016      	beq.n	8010f3a <__sccl+0x6e>
 8010f0c:	2d00      	cmp	r5, #0
 8010f0e:	d0f1      	beq.n	8010ef4 <__sccl+0x28>
 8010f10:	462b      	mov	r3, r5
 8010f12:	e7f2      	b.n	8010efa <__sccl+0x2e>
 8010f14:	7846      	ldrb	r6, [r0, #1]
 8010f16:	2e5d      	cmp	r6, #93	@ 0x5d
 8010f18:	d0fa      	beq.n	8010f10 <__sccl+0x44>
 8010f1a:	42b3      	cmp	r3, r6
 8010f1c:	dcf8      	bgt.n	8010f10 <__sccl+0x44>
 8010f1e:	3002      	adds	r0, #2
 8010f20:	461a      	mov	r2, r3
 8010f22:	3201      	adds	r2, #1
 8010f24:	4296      	cmp	r6, r2
 8010f26:	54a1      	strb	r1, [r4, r2]
 8010f28:	dcfb      	bgt.n	8010f22 <__sccl+0x56>
 8010f2a:	1af2      	subs	r2, r6, r3
 8010f2c:	3a01      	subs	r2, #1
 8010f2e:	1c5d      	adds	r5, r3, #1
 8010f30:	42b3      	cmp	r3, r6
 8010f32:	bfa8      	it	ge
 8010f34:	2200      	movge	r2, #0
 8010f36:	18ab      	adds	r3, r5, r2
 8010f38:	e7e1      	b.n	8010efe <__sccl+0x32>
 8010f3a:	4610      	mov	r0, r2
 8010f3c:	e7da      	b.n	8010ef4 <__sccl+0x28>

08010f3e <__submore>:
 8010f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f42:	460c      	mov	r4, r1
 8010f44:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8010f46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010f4a:	4299      	cmp	r1, r3
 8010f4c:	d11d      	bne.n	8010f8a <__submore+0x4c>
 8010f4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8010f52:	f7ff f86f 	bl	8010034 <_malloc_r>
 8010f56:	b918      	cbnz	r0, 8010f60 <__submore+0x22>
 8010f58:	f04f 30ff 	mov.w	r0, #4294967295
 8010f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f64:	63a3      	str	r3, [r4, #56]	@ 0x38
 8010f66:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8010f6a:	6360      	str	r0, [r4, #52]	@ 0x34
 8010f6c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8010f70:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010f74:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8010f78:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010f7c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8010f80:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8010f84:	6020      	str	r0, [r4, #0]
 8010f86:	2000      	movs	r0, #0
 8010f88:	e7e8      	b.n	8010f5c <__submore+0x1e>
 8010f8a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8010f8c:	0077      	lsls	r7, r6, #1
 8010f8e:	463a      	mov	r2, r7
 8010f90:	f000 f84d 	bl	801102e <_realloc_r>
 8010f94:	4605      	mov	r5, r0
 8010f96:	2800      	cmp	r0, #0
 8010f98:	d0de      	beq.n	8010f58 <__submore+0x1a>
 8010f9a:	eb00 0806 	add.w	r8, r0, r6
 8010f9e:	4601      	mov	r1, r0
 8010fa0:	4632      	mov	r2, r6
 8010fa2:	4640      	mov	r0, r8
 8010fa4:	f7fe ffa5 	bl	800fef2 <memcpy>
 8010fa8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8010fac:	f8c4 8000 	str.w	r8, [r4]
 8010fb0:	e7e9      	b.n	8010f86 <__submore+0x48>

08010fb2 <memmove>:
 8010fb2:	4288      	cmp	r0, r1
 8010fb4:	b510      	push	{r4, lr}
 8010fb6:	eb01 0402 	add.w	r4, r1, r2
 8010fba:	d902      	bls.n	8010fc2 <memmove+0x10>
 8010fbc:	4284      	cmp	r4, r0
 8010fbe:	4623      	mov	r3, r4
 8010fc0:	d807      	bhi.n	8010fd2 <memmove+0x20>
 8010fc2:	1e43      	subs	r3, r0, #1
 8010fc4:	42a1      	cmp	r1, r4
 8010fc6:	d008      	beq.n	8010fda <memmove+0x28>
 8010fc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010fcc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010fd0:	e7f8      	b.n	8010fc4 <memmove+0x12>
 8010fd2:	4402      	add	r2, r0
 8010fd4:	4601      	mov	r1, r0
 8010fd6:	428a      	cmp	r2, r1
 8010fd8:	d100      	bne.n	8010fdc <memmove+0x2a>
 8010fda:	bd10      	pop	{r4, pc}
 8010fdc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010fe0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010fe4:	e7f7      	b.n	8010fd6 <memmove+0x24>

08010fe6 <strchr>:
 8010fe6:	b2c9      	uxtb	r1, r1
 8010fe8:	4603      	mov	r3, r0
 8010fea:	4618      	mov	r0, r3
 8010fec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ff0:	b112      	cbz	r2, 8010ff8 <strchr+0x12>
 8010ff2:	428a      	cmp	r2, r1
 8010ff4:	d1f9      	bne.n	8010fea <strchr+0x4>
 8010ff6:	4770      	bx	lr
 8010ff8:	2900      	cmp	r1, #0
 8010ffa:	bf18      	it	ne
 8010ffc:	2000      	movne	r0, #0
 8010ffe:	4770      	bx	lr

08011000 <_sbrk_r>:
 8011000:	b538      	push	{r3, r4, r5, lr}
 8011002:	4d06      	ldr	r5, [pc, #24]	@ (801101c <_sbrk_r+0x1c>)
 8011004:	2300      	movs	r3, #0
 8011006:	4604      	mov	r4, r0
 8011008:	4608      	mov	r0, r1
 801100a:	602b      	str	r3, [r5, #0]
 801100c:	f7f0 fd82 	bl	8001b14 <_sbrk>
 8011010:	1c43      	adds	r3, r0, #1
 8011012:	d102      	bne.n	801101a <_sbrk_r+0x1a>
 8011014:	682b      	ldr	r3, [r5, #0]
 8011016:	b103      	cbz	r3, 801101a <_sbrk_r+0x1a>
 8011018:	6023      	str	r3, [r4, #0]
 801101a:	bd38      	pop	{r3, r4, r5, pc}
 801101c:	20014278 	.word	0x20014278

08011020 <abort>:
 8011020:	b508      	push	{r3, lr}
 8011022:	2006      	movs	r0, #6
 8011024:	f000 faa0 	bl	8011568 <raise>
 8011028:	2001      	movs	r0, #1
 801102a:	f7f0 fcfb 	bl	8001a24 <_exit>

0801102e <_realloc_r>:
 801102e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011032:	4607      	mov	r7, r0
 8011034:	4614      	mov	r4, r2
 8011036:	460d      	mov	r5, r1
 8011038:	b921      	cbnz	r1, 8011044 <_realloc_r+0x16>
 801103a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801103e:	4611      	mov	r1, r2
 8011040:	f7fe bff8 	b.w	8010034 <_malloc_r>
 8011044:	b92a      	cbnz	r2, 8011052 <_realloc_r+0x24>
 8011046:	f7fe ff81 	bl	800ff4c <_free_r>
 801104a:	4625      	mov	r5, r4
 801104c:	4628      	mov	r0, r5
 801104e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011052:	f000 faa5 	bl	80115a0 <_malloc_usable_size_r>
 8011056:	4284      	cmp	r4, r0
 8011058:	4606      	mov	r6, r0
 801105a:	d802      	bhi.n	8011062 <_realloc_r+0x34>
 801105c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011060:	d8f4      	bhi.n	801104c <_realloc_r+0x1e>
 8011062:	4621      	mov	r1, r4
 8011064:	4638      	mov	r0, r7
 8011066:	f7fe ffe5 	bl	8010034 <_malloc_r>
 801106a:	4680      	mov	r8, r0
 801106c:	b908      	cbnz	r0, 8011072 <_realloc_r+0x44>
 801106e:	4645      	mov	r5, r8
 8011070:	e7ec      	b.n	801104c <_realloc_r+0x1e>
 8011072:	42b4      	cmp	r4, r6
 8011074:	4622      	mov	r2, r4
 8011076:	4629      	mov	r1, r5
 8011078:	bf28      	it	cs
 801107a:	4632      	movcs	r2, r6
 801107c:	f7fe ff39 	bl	800fef2 <memcpy>
 8011080:	4629      	mov	r1, r5
 8011082:	4638      	mov	r0, r7
 8011084:	f7fe ff62 	bl	800ff4c <_free_r>
 8011088:	e7f1      	b.n	801106e <_realloc_r+0x40>
	...

0801108c <_strtoul_l.isra.0>:
 801108c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011090:	4e34      	ldr	r6, [pc, #208]	@ (8011164 <_strtoul_l.isra.0+0xd8>)
 8011092:	4686      	mov	lr, r0
 8011094:	460d      	mov	r5, r1
 8011096:	4628      	mov	r0, r5
 8011098:	f815 4b01 	ldrb.w	r4, [r5], #1
 801109c:	5d37      	ldrb	r7, [r6, r4]
 801109e:	f017 0708 	ands.w	r7, r7, #8
 80110a2:	d1f8      	bne.n	8011096 <_strtoul_l.isra.0+0xa>
 80110a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80110a6:	d110      	bne.n	80110ca <_strtoul_l.isra.0+0x3e>
 80110a8:	782c      	ldrb	r4, [r5, #0]
 80110aa:	2701      	movs	r7, #1
 80110ac:	1c85      	adds	r5, r0, #2
 80110ae:	f033 0010 	bics.w	r0, r3, #16
 80110b2:	d115      	bne.n	80110e0 <_strtoul_l.isra.0+0x54>
 80110b4:	2c30      	cmp	r4, #48	@ 0x30
 80110b6:	d10d      	bne.n	80110d4 <_strtoul_l.isra.0+0x48>
 80110b8:	7828      	ldrb	r0, [r5, #0]
 80110ba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80110be:	2858      	cmp	r0, #88	@ 0x58
 80110c0:	d108      	bne.n	80110d4 <_strtoul_l.isra.0+0x48>
 80110c2:	786c      	ldrb	r4, [r5, #1]
 80110c4:	3502      	adds	r5, #2
 80110c6:	2310      	movs	r3, #16
 80110c8:	e00a      	b.n	80110e0 <_strtoul_l.isra.0+0x54>
 80110ca:	2c2b      	cmp	r4, #43	@ 0x2b
 80110cc:	bf04      	itt	eq
 80110ce:	782c      	ldrbeq	r4, [r5, #0]
 80110d0:	1c85      	addeq	r5, r0, #2
 80110d2:	e7ec      	b.n	80110ae <_strtoul_l.isra.0+0x22>
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d1f6      	bne.n	80110c6 <_strtoul_l.isra.0+0x3a>
 80110d8:	2c30      	cmp	r4, #48	@ 0x30
 80110da:	bf14      	ite	ne
 80110dc:	230a      	movne	r3, #10
 80110de:	2308      	moveq	r3, #8
 80110e0:	f04f 38ff 	mov.w	r8, #4294967295
 80110e4:	2600      	movs	r6, #0
 80110e6:	fbb8 f8f3 	udiv	r8, r8, r3
 80110ea:	fb03 f908 	mul.w	r9, r3, r8
 80110ee:	ea6f 0909 	mvn.w	r9, r9
 80110f2:	4630      	mov	r0, r6
 80110f4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80110f8:	f1bc 0f09 	cmp.w	ip, #9
 80110fc:	d810      	bhi.n	8011120 <_strtoul_l.isra.0+0x94>
 80110fe:	4664      	mov	r4, ip
 8011100:	42a3      	cmp	r3, r4
 8011102:	dd1e      	ble.n	8011142 <_strtoul_l.isra.0+0xb6>
 8011104:	f1b6 3fff 	cmp.w	r6, #4294967295
 8011108:	d007      	beq.n	801111a <_strtoul_l.isra.0+0x8e>
 801110a:	4580      	cmp	r8, r0
 801110c:	d316      	bcc.n	801113c <_strtoul_l.isra.0+0xb0>
 801110e:	d101      	bne.n	8011114 <_strtoul_l.isra.0+0x88>
 8011110:	45a1      	cmp	r9, r4
 8011112:	db13      	blt.n	801113c <_strtoul_l.isra.0+0xb0>
 8011114:	fb00 4003 	mla	r0, r0, r3, r4
 8011118:	2601      	movs	r6, #1
 801111a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801111e:	e7e9      	b.n	80110f4 <_strtoul_l.isra.0+0x68>
 8011120:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011124:	f1bc 0f19 	cmp.w	ip, #25
 8011128:	d801      	bhi.n	801112e <_strtoul_l.isra.0+0xa2>
 801112a:	3c37      	subs	r4, #55	@ 0x37
 801112c:	e7e8      	b.n	8011100 <_strtoul_l.isra.0+0x74>
 801112e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011132:	f1bc 0f19 	cmp.w	ip, #25
 8011136:	d804      	bhi.n	8011142 <_strtoul_l.isra.0+0xb6>
 8011138:	3c57      	subs	r4, #87	@ 0x57
 801113a:	e7e1      	b.n	8011100 <_strtoul_l.isra.0+0x74>
 801113c:	f04f 36ff 	mov.w	r6, #4294967295
 8011140:	e7eb      	b.n	801111a <_strtoul_l.isra.0+0x8e>
 8011142:	1c73      	adds	r3, r6, #1
 8011144:	d106      	bne.n	8011154 <_strtoul_l.isra.0+0xc8>
 8011146:	2322      	movs	r3, #34	@ 0x22
 8011148:	f8ce 3000 	str.w	r3, [lr]
 801114c:	4630      	mov	r0, r6
 801114e:	b932      	cbnz	r2, 801115e <_strtoul_l.isra.0+0xd2>
 8011150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011154:	b107      	cbz	r7, 8011158 <_strtoul_l.isra.0+0xcc>
 8011156:	4240      	negs	r0, r0
 8011158:	2a00      	cmp	r2, #0
 801115a:	d0f9      	beq.n	8011150 <_strtoul_l.isra.0+0xc4>
 801115c:	b106      	cbz	r6, 8011160 <_strtoul_l.isra.0+0xd4>
 801115e:	1e69      	subs	r1, r5, #1
 8011160:	6011      	str	r1, [r2, #0]
 8011162:	e7f5      	b.n	8011150 <_strtoul_l.isra.0+0xc4>
 8011164:	08012235 	.word	0x08012235

08011168 <_strtoul_r>:
 8011168:	f7ff bf90 	b.w	801108c <_strtoul_l.isra.0>

0801116c <__sfputc_r>:
 801116c:	6893      	ldr	r3, [r2, #8]
 801116e:	3b01      	subs	r3, #1
 8011170:	2b00      	cmp	r3, #0
 8011172:	b410      	push	{r4}
 8011174:	6093      	str	r3, [r2, #8]
 8011176:	da08      	bge.n	801118a <__sfputc_r+0x1e>
 8011178:	6994      	ldr	r4, [r2, #24]
 801117a:	42a3      	cmp	r3, r4
 801117c:	db01      	blt.n	8011182 <__sfputc_r+0x16>
 801117e:	290a      	cmp	r1, #10
 8011180:	d103      	bne.n	801118a <__sfputc_r+0x1e>
 8011182:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011186:	f000 b933 	b.w	80113f0 <__swbuf_r>
 801118a:	6813      	ldr	r3, [r2, #0]
 801118c:	1c58      	adds	r0, r3, #1
 801118e:	6010      	str	r0, [r2, #0]
 8011190:	7019      	strb	r1, [r3, #0]
 8011192:	4608      	mov	r0, r1
 8011194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011198:	4770      	bx	lr

0801119a <__sfputs_r>:
 801119a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801119c:	4606      	mov	r6, r0
 801119e:	460f      	mov	r7, r1
 80111a0:	4614      	mov	r4, r2
 80111a2:	18d5      	adds	r5, r2, r3
 80111a4:	42ac      	cmp	r4, r5
 80111a6:	d101      	bne.n	80111ac <__sfputs_r+0x12>
 80111a8:	2000      	movs	r0, #0
 80111aa:	e007      	b.n	80111bc <__sfputs_r+0x22>
 80111ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111b0:	463a      	mov	r2, r7
 80111b2:	4630      	mov	r0, r6
 80111b4:	f7ff ffda 	bl	801116c <__sfputc_r>
 80111b8:	1c43      	adds	r3, r0, #1
 80111ba:	d1f3      	bne.n	80111a4 <__sfputs_r+0xa>
 80111bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080111c0 <_vfiprintf_r>:
 80111c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111c4:	460d      	mov	r5, r1
 80111c6:	b09d      	sub	sp, #116	@ 0x74
 80111c8:	4614      	mov	r4, r2
 80111ca:	4698      	mov	r8, r3
 80111cc:	4606      	mov	r6, r0
 80111ce:	b118      	cbz	r0, 80111d8 <_vfiprintf_r+0x18>
 80111d0:	6a03      	ldr	r3, [r0, #32]
 80111d2:	b90b      	cbnz	r3, 80111d8 <_vfiprintf_r+0x18>
 80111d4:	f7fe fc50 	bl	800fa78 <__sinit>
 80111d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80111da:	07d9      	lsls	r1, r3, #31
 80111dc:	d405      	bmi.n	80111ea <_vfiprintf_r+0x2a>
 80111de:	89ab      	ldrh	r3, [r5, #12]
 80111e0:	059a      	lsls	r2, r3, #22
 80111e2:	d402      	bmi.n	80111ea <_vfiprintf_r+0x2a>
 80111e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80111e6:	f7fe fe82 	bl	800feee <__retarget_lock_acquire_recursive>
 80111ea:	89ab      	ldrh	r3, [r5, #12]
 80111ec:	071b      	lsls	r3, r3, #28
 80111ee:	d501      	bpl.n	80111f4 <_vfiprintf_r+0x34>
 80111f0:	692b      	ldr	r3, [r5, #16]
 80111f2:	b99b      	cbnz	r3, 801121c <_vfiprintf_r+0x5c>
 80111f4:	4629      	mov	r1, r5
 80111f6:	4630      	mov	r0, r6
 80111f8:	f000 f938 	bl	801146c <__swsetup_r>
 80111fc:	b170      	cbz	r0, 801121c <_vfiprintf_r+0x5c>
 80111fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011200:	07dc      	lsls	r4, r3, #31
 8011202:	d504      	bpl.n	801120e <_vfiprintf_r+0x4e>
 8011204:	f04f 30ff 	mov.w	r0, #4294967295
 8011208:	b01d      	add	sp, #116	@ 0x74
 801120a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801120e:	89ab      	ldrh	r3, [r5, #12]
 8011210:	0598      	lsls	r0, r3, #22
 8011212:	d4f7      	bmi.n	8011204 <_vfiprintf_r+0x44>
 8011214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011216:	f7fe fe6b 	bl	800fef0 <__retarget_lock_release_recursive>
 801121a:	e7f3      	b.n	8011204 <_vfiprintf_r+0x44>
 801121c:	2300      	movs	r3, #0
 801121e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011220:	2320      	movs	r3, #32
 8011222:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011226:	f8cd 800c 	str.w	r8, [sp, #12]
 801122a:	2330      	movs	r3, #48	@ 0x30
 801122c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80113dc <_vfiprintf_r+0x21c>
 8011230:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011234:	f04f 0901 	mov.w	r9, #1
 8011238:	4623      	mov	r3, r4
 801123a:	469a      	mov	sl, r3
 801123c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011240:	b10a      	cbz	r2, 8011246 <_vfiprintf_r+0x86>
 8011242:	2a25      	cmp	r2, #37	@ 0x25
 8011244:	d1f9      	bne.n	801123a <_vfiprintf_r+0x7a>
 8011246:	ebba 0b04 	subs.w	fp, sl, r4
 801124a:	d00b      	beq.n	8011264 <_vfiprintf_r+0xa4>
 801124c:	465b      	mov	r3, fp
 801124e:	4622      	mov	r2, r4
 8011250:	4629      	mov	r1, r5
 8011252:	4630      	mov	r0, r6
 8011254:	f7ff ffa1 	bl	801119a <__sfputs_r>
 8011258:	3001      	adds	r0, #1
 801125a:	f000 80a7 	beq.w	80113ac <_vfiprintf_r+0x1ec>
 801125e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011260:	445a      	add	r2, fp
 8011262:	9209      	str	r2, [sp, #36]	@ 0x24
 8011264:	f89a 3000 	ldrb.w	r3, [sl]
 8011268:	2b00      	cmp	r3, #0
 801126a:	f000 809f 	beq.w	80113ac <_vfiprintf_r+0x1ec>
 801126e:	2300      	movs	r3, #0
 8011270:	f04f 32ff 	mov.w	r2, #4294967295
 8011274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011278:	f10a 0a01 	add.w	sl, sl, #1
 801127c:	9304      	str	r3, [sp, #16]
 801127e:	9307      	str	r3, [sp, #28]
 8011280:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011284:	931a      	str	r3, [sp, #104]	@ 0x68
 8011286:	4654      	mov	r4, sl
 8011288:	2205      	movs	r2, #5
 801128a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801128e:	4853      	ldr	r0, [pc, #332]	@ (80113dc <_vfiprintf_r+0x21c>)
 8011290:	f7ee ffb6 	bl	8000200 <memchr>
 8011294:	9a04      	ldr	r2, [sp, #16]
 8011296:	b9d8      	cbnz	r0, 80112d0 <_vfiprintf_r+0x110>
 8011298:	06d1      	lsls	r1, r2, #27
 801129a:	bf44      	itt	mi
 801129c:	2320      	movmi	r3, #32
 801129e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80112a2:	0713      	lsls	r3, r2, #28
 80112a4:	bf44      	itt	mi
 80112a6:	232b      	movmi	r3, #43	@ 0x2b
 80112a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80112ac:	f89a 3000 	ldrb.w	r3, [sl]
 80112b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80112b2:	d015      	beq.n	80112e0 <_vfiprintf_r+0x120>
 80112b4:	9a07      	ldr	r2, [sp, #28]
 80112b6:	4654      	mov	r4, sl
 80112b8:	2000      	movs	r0, #0
 80112ba:	f04f 0c0a 	mov.w	ip, #10
 80112be:	4621      	mov	r1, r4
 80112c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112c4:	3b30      	subs	r3, #48	@ 0x30
 80112c6:	2b09      	cmp	r3, #9
 80112c8:	d94b      	bls.n	8011362 <_vfiprintf_r+0x1a2>
 80112ca:	b1b0      	cbz	r0, 80112fa <_vfiprintf_r+0x13a>
 80112cc:	9207      	str	r2, [sp, #28]
 80112ce:	e014      	b.n	80112fa <_vfiprintf_r+0x13a>
 80112d0:	eba0 0308 	sub.w	r3, r0, r8
 80112d4:	fa09 f303 	lsl.w	r3, r9, r3
 80112d8:	4313      	orrs	r3, r2
 80112da:	9304      	str	r3, [sp, #16]
 80112dc:	46a2      	mov	sl, r4
 80112de:	e7d2      	b.n	8011286 <_vfiprintf_r+0xc6>
 80112e0:	9b03      	ldr	r3, [sp, #12]
 80112e2:	1d19      	adds	r1, r3, #4
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	9103      	str	r1, [sp, #12]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	bfbb      	ittet	lt
 80112ec:	425b      	neglt	r3, r3
 80112ee:	f042 0202 	orrlt.w	r2, r2, #2
 80112f2:	9307      	strge	r3, [sp, #28]
 80112f4:	9307      	strlt	r3, [sp, #28]
 80112f6:	bfb8      	it	lt
 80112f8:	9204      	strlt	r2, [sp, #16]
 80112fa:	7823      	ldrb	r3, [r4, #0]
 80112fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80112fe:	d10a      	bne.n	8011316 <_vfiprintf_r+0x156>
 8011300:	7863      	ldrb	r3, [r4, #1]
 8011302:	2b2a      	cmp	r3, #42	@ 0x2a
 8011304:	d132      	bne.n	801136c <_vfiprintf_r+0x1ac>
 8011306:	9b03      	ldr	r3, [sp, #12]
 8011308:	1d1a      	adds	r2, r3, #4
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	9203      	str	r2, [sp, #12]
 801130e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011312:	3402      	adds	r4, #2
 8011314:	9305      	str	r3, [sp, #20]
 8011316:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80113ec <_vfiprintf_r+0x22c>
 801131a:	7821      	ldrb	r1, [r4, #0]
 801131c:	2203      	movs	r2, #3
 801131e:	4650      	mov	r0, sl
 8011320:	f7ee ff6e 	bl	8000200 <memchr>
 8011324:	b138      	cbz	r0, 8011336 <_vfiprintf_r+0x176>
 8011326:	9b04      	ldr	r3, [sp, #16]
 8011328:	eba0 000a 	sub.w	r0, r0, sl
 801132c:	2240      	movs	r2, #64	@ 0x40
 801132e:	4082      	lsls	r2, r0
 8011330:	4313      	orrs	r3, r2
 8011332:	3401      	adds	r4, #1
 8011334:	9304      	str	r3, [sp, #16]
 8011336:	f814 1b01 	ldrb.w	r1, [r4], #1
 801133a:	4829      	ldr	r0, [pc, #164]	@ (80113e0 <_vfiprintf_r+0x220>)
 801133c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011340:	2206      	movs	r2, #6
 8011342:	f7ee ff5d 	bl	8000200 <memchr>
 8011346:	2800      	cmp	r0, #0
 8011348:	d03f      	beq.n	80113ca <_vfiprintf_r+0x20a>
 801134a:	4b26      	ldr	r3, [pc, #152]	@ (80113e4 <_vfiprintf_r+0x224>)
 801134c:	bb1b      	cbnz	r3, 8011396 <_vfiprintf_r+0x1d6>
 801134e:	9b03      	ldr	r3, [sp, #12]
 8011350:	3307      	adds	r3, #7
 8011352:	f023 0307 	bic.w	r3, r3, #7
 8011356:	3308      	adds	r3, #8
 8011358:	9303      	str	r3, [sp, #12]
 801135a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801135c:	443b      	add	r3, r7
 801135e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011360:	e76a      	b.n	8011238 <_vfiprintf_r+0x78>
 8011362:	fb0c 3202 	mla	r2, ip, r2, r3
 8011366:	460c      	mov	r4, r1
 8011368:	2001      	movs	r0, #1
 801136a:	e7a8      	b.n	80112be <_vfiprintf_r+0xfe>
 801136c:	2300      	movs	r3, #0
 801136e:	3401      	adds	r4, #1
 8011370:	9305      	str	r3, [sp, #20]
 8011372:	4619      	mov	r1, r3
 8011374:	f04f 0c0a 	mov.w	ip, #10
 8011378:	4620      	mov	r0, r4
 801137a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801137e:	3a30      	subs	r2, #48	@ 0x30
 8011380:	2a09      	cmp	r2, #9
 8011382:	d903      	bls.n	801138c <_vfiprintf_r+0x1cc>
 8011384:	2b00      	cmp	r3, #0
 8011386:	d0c6      	beq.n	8011316 <_vfiprintf_r+0x156>
 8011388:	9105      	str	r1, [sp, #20]
 801138a:	e7c4      	b.n	8011316 <_vfiprintf_r+0x156>
 801138c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011390:	4604      	mov	r4, r0
 8011392:	2301      	movs	r3, #1
 8011394:	e7f0      	b.n	8011378 <_vfiprintf_r+0x1b8>
 8011396:	ab03      	add	r3, sp, #12
 8011398:	9300      	str	r3, [sp, #0]
 801139a:	462a      	mov	r2, r5
 801139c:	4b12      	ldr	r3, [pc, #72]	@ (80113e8 <_vfiprintf_r+0x228>)
 801139e:	a904      	add	r1, sp, #16
 80113a0:	4630      	mov	r0, r6
 80113a2:	f3af 8000 	nop.w
 80113a6:	4607      	mov	r7, r0
 80113a8:	1c78      	adds	r0, r7, #1
 80113aa:	d1d6      	bne.n	801135a <_vfiprintf_r+0x19a>
 80113ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80113ae:	07d9      	lsls	r1, r3, #31
 80113b0:	d405      	bmi.n	80113be <_vfiprintf_r+0x1fe>
 80113b2:	89ab      	ldrh	r3, [r5, #12]
 80113b4:	059a      	lsls	r2, r3, #22
 80113b6:	d402      	bmi.n	80113be <_vfiprintf_r+0x1fe>
 80113b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80113ba:	f7fe fd99 	bl	800fef0 <__retarget_lock_release_recursive>
 80113be:	89ab      	ldrh	r3, [r5, #12]
 80113c0:	065b      	lsls	r3, r3, #25
 80113c2:	f53f af1f 	bmi.w	8011204 <_vfiprintf_r+0x44>
 80113c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80113c8:	e71e      	b.n	8011208 <_vfiprintf_r+0x48>
 80113ca:	ab03      	add	r3, sp, #12
 80113cc:	9300      	str	r3, [sp, #0]
 80113ce:	462a      	mov	r2, r5
 80113d0:	4b05      	ldr	r3, [pc, #20]	@ (80113e8 <_vfiprintf_r+0x228>)
 80113d2:	a904      	add	r1, sp, #16
 80113d4:	4630      	mov	r0, r6
 80113d6:	f7ff fa4f 	bl	8010878 <_printf_i>
 80113da:	e7e4      	b.n	80113a6 <_vfiprintf_r+0x1e6>
 80113dc:	080123e2 	.word	0x080123e2
 80113e0:	080123ec 	.word	0x080123ec
 80113e4:	00000000 	.word	0x00000000
 80113e8:	0801119b 	.word	0x0801119b
 80113ec:	080123e8 	.word	0x080123e8

080113f0 <__swbuf_r>:
 80113f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113f2:	460e      	mov	r6, r1
 80113f4:	4614      	mov	r4, r2
 80113f6:	4605      	mov	r5, r0
 80113f8:	b118      	cbz	r0, 8011402 <__swbuf_r+0x12>
 80113fa:	6a03      	ldr	r3, [r0, #32]
 80113fc:	b90b      	cbnz	r3, 8011402 <__swbuf_r+0x12>
 80113fe:	f7fe fb3b 	bl	800fa78 <__sinit>
 8011402:	69a3      	ldr	r3, [r4, #24]
 8011404:	60a3      	str	r3, [r4, #8]
 8011406:	89a3      	ldrh	r3, [r4, #12]
 8011408:	071a      	lsls	r2, r3, #28
 801140a:	d501      	bpl.n	8011410 <__swbuf_r+0x20>
 801140c:	6923      	ldr	r3, [r4, #16]
 801140e:	b943      	cbnz	r3, 8011422 <__swbuf_r+0x32>
 8011410:	4621      	mov	r1, r4
 8011412:	4628      	mov	r0, r5
 8011414:	f000 f82a 	bl	801146c <__swsetup_r>
 8011418:	b118      	cbz	r0, 8011422 <__swbuf_r+0x32>
 801141a:	f04f 37ff 	mov.w	r7, #4294967295
 801141e:	4638      	mov	r0, r7
 8011420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011422:	6823      	ldr	r3, [r4, #0]
 8011424:	6922      	ldr	r2, [r4, #16]
 8011426:	1a98      	subs	r0, r3, r2
 8011428:	6963      	ldr	r3, [r4, #20]
 801142a:	b2f6      	uxtb	r6, r6
 801142c:	4283      	cmp	r3, r0
 801142e:	4637      	mov	r7, r6
 8011430:	dc05      	bgt.n	801143e <__swbuf_r+0x4e>
 8011432:	4621      	mov	r1, r4
 8011434:	4628      	mov	r0, r5
 8011436:	f7ff fd0f 	bl	8010e58 <_fflush_r>
 801143a:	2800      	cmp	r0, #0
 801143c:	d1ed      	bne.n	801141a <__swbuf_r+0x2a>
 801143e:	68a3      	ldr	r3, [r4, #8]
 8011440:	3b01      	subs	r3, #1
 8011442:	60a3      	str	r3, [r4, #8]
 8011444:	6823      	ldr	r3, [r4, #0]
 8011446:	1c5a      	adds	r2, r3, #1
 8011448:	6022      	str	r2, [r4, #0]
 801144a:	701e      	strb	r6, [r3, #0]
 801144c:	6962      	ldr	r2, [r4, #20]
 801144e:	1c43      	adds	r3, r0, #1
 8011450:	429a      	cmp	r2, r3
 8011452:	d004      	beq.n	801145e <__swbuf_r+0x6e>
 8011454:	89a3      	ldrh	r3, [r4, #12]
 8011456:	07db      	lsls	r3, r3, #31
 8011458:	d5e1      	bpl.n	801141e <__swbuf_r+0x2e>
 801145a:	2e0a      	cmp	r6, #10
 801145c:	d1df      	bne.n	801141e <__swbuf_r+0x2e>
 801145e:	4621      	mov	r1, r4
 8011460:	4628      	mov	r0, r5
 8011462:	f7ff fcf9 	bl	8010e58 <_fflush_r>
 8011466:	2800      	cmp	r0, #0
 8011468:	d0d9      	beq.n	801141e <__swbuf_r+0x2e>
 801146a:	e7d6      	b.n	801141a <__swbuf_r+0x2a>

0801146c <__swsetup_r>:
 801146c:	b538      	push	{r3, r4, r5, lr}
 801146e:	4b29      	ldr	r3, [pc, #164]	@ (8011514 <__swsetup_r+0xa8>)
 8011470:	4605      	mov	r5, r0
 8011472:	6818      	ldr	r0, [r3, #0]
 8011474:	460c      	mov	r4, r1
 8011476:	b118      	cbz	r0, 8011480 <__swsetup_r+0x14>
 8011478:	6a03      	ldr	r3, [r0, #32]
 801147a:	b90b      	cbnz	r3, 8011480 <__swsetup_r+0x14>
 801147c:	f7fe fafc 	bl	800fa78 <__sinit>
 8011480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011484:	0719      	lsls	r1, r3, #28
 8011486:	d422      	bmi.n	80114ce <__swsetup_r+0x62>
 8011488:	06da      	lsls	r2, r3, #27
 801148a:	d407      	bmi.n	801149c <__swsetup_r+0x30>
 801148c:	2209      	movs	r2, #9
 801148e:	602a      	str	r2, [r5, #0]
 8011490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011494:	81a3      	strh	r3, [r4, #12]
 8011496:	f04f 30ff 	mov.w	r0, #4294967295
 801149a:	e033      	b.n	8011504 <__swsetup_r+0x98>
 801149c:	0758      	lsls	r0, r3, #29
 801149e:	d512      	bpl.n	80114c6 <__swsetup_r+0x5a>
 80114a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80114a2:	b141      	cbz	r1, 80114b6 <__swsetup_r+0x4a>
 80114a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80114a8:	4299      	cmp	r1, r3
 80114aa:	d002      	beq.n	80114b2 <__swsetup_r+0x46>
 80114ac:	4628      	mov	r0, r5
 80114ae:	f7fe fd4d 	bl	800ff4c <_free_r>
 80114b2:	2300      	movs	r3, #0
 80114b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80114b6:	89a3      	ldrh	r3, [r4, #12]
 80114b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80114bc:	81a3      	strh	r3, [r4, #12]
 80114be:	2300      	movs	r3, #0
 80114c0:	6063      	str	r3, [r4, #4]
 80114c2:	6923      	ldr	r3, [r4, #16]
 80114c4:	6023      	str	r3, [r4, #0]
 80114c6:	89a3      	ldrh	r3, [r4, #12]
 80114c8:	f043 0308 	orr.w	r3, r3, #8
 80114cc:	81a3      	strh	r3, [r4, #12]
 80114ce:	6923      	ldr	r3, [r4, #16]
 80114d0:	b94b      	cbnz	r3, 80114e6 <__swsetup_r+0x7a>
 80114d2:	89a3      	ldrh	r3, [r4, #12]
 80114d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80114d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80114dc:	d003      	beq.n	80114e6 <__swsetup_r+0x7a>
 80114de:	4621      	mov	r1, r4
 80114e0:	4628      	mov	r0, r5
 80114e2:	f000 f88b 	bl	80115fc <__smakebuf_r>
 80114e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114ea:	f013 0201 	ands.w	r2, r3, #1
 80114ee:	d00a      	beq.n	8011506 <__swsetup_r+0x9a>
 80114f0:	2200      	movs	r2, #0
 80114f2:	60a2      	str	r2, [r4, #8]
 80114f4:	6962      	ldr	r2, [r4, #20]
 80114f6:	4252      	negs	r2, r2
 80114f8:	61a2      	str	r2, [r4, #24]
 80114fa:	6922      	ldr	r2, [r4, #16]
 80114fc:	b942      	cbnz	r2, 8011510 <__swsetup_r+0xa4>
 80114fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011502:	d1c5      	bne.n	8011490 <__swsetup_r+0x24>
 8011504:	bd38      	pop	{r3, r4, r5, pc}
 8011506:	0799      	lsls	r1, r3, #30
 8011508:	bf58      	it	pl
 801150a:	6962      	ldrpl	r2, [r4, #20]
 801150c:	60a2      	str	r2, [r4, #8]
 801150e:	e7f4      	b.n	80114fa <__swsetup_r+0x8e>
 8011510:	2000      	movs	r0, #0
 8011512:	e7f7      	b.n	8011504 <__swsetup_r+0x98>
 8011514:	20000138 	.word	0x20000138

08011518 <_raise_r>:
 8011518:	291f      	cmp	r1, #31
 801151a:	b538      	push	{r3, r4, r5, lr}
 801151c:	4605      	mov	r5, r0
 801151e:	460c      	mov	r4, r1
 8011520:	d904      	bls.n	801152c <_raise_r+0x14>
 8011522:	2316      	movs	r3, #22
 8011524:	6003      	str	r3, [r0, #0]
 8011526:	f04f 30ff 	mov.w	r0, #4294967295
 801152a:	bd38      	pop	{r3, r4, r5, pc}
 801152c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801152e:	b112      	cbz	r2, 8011536 <_raise_r+0x1e>
 8011530:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011534:	b94b      	cbnz	r3, 801154a <_raise_r+0x32>
 8011536:	4628      	mov	r0, r5
 8011538:	f000 f830 	bl	801159c <_getpid_r>
 801153c:	4622      	mov	r2, r4
 801153e:	4601      	mov	r1, r0
 8011540:	4628      	mov	r0, r5
 8011542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011546:	f000 b817 	b.w	8011578 <_kill_r>
 801154a:	2b01      	cmp	r3, #1
 801154c:	d00a      	beq.n	8011564 <_raise_r+0x4c>
 801154e:	1c59      	adds	r1, r3, #1
 8011550:	d103      	bne.n	801155a <_raise_r+0x42>
 8011552:	2316      	movs	r3, #22
 8011554:	6003      	str	r3, [r0, #0]
 8011556:	2001      	movs	r0, #1
 8011558:	e7e7      	b.n	801152a <_raise_r+0x12>
 801155a:	2100      	movs	r1, #0
 801155c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011560:	4620      	mov	r0, r4
 8011562:	4798      	blx	r3
 8011564:	2000      	movs	r0, #0
 8011566:	e7e0      	b.n	801152a <_raise_r+0x12>

08011568 <raise>:
 8011568:	4b02      	ldr	r3, [pc, #8]	@ (8011574 <raise+0xc>)
 801156a:	4601      	mov	r1, r0
 801156c:	6818      	ldr	r0, [r3, #0]
 801156e:	f7ff bfd3 	b.w	8011518 <_raise_r>
 8011572:	bf00      	nop
 8011574:	20000138 	.word	0x20000138

08011578 <_kill_r>:
 8011578:	b538      	push	{r3, r4, r5, lr}
 801157a:	4d07      	ldr	r5, [pc, #28]	@ (8011598 <_kill_r+0x20>)
 801157c:	2300      	movs	r3, #0
 801157e:	4604      	mov	r4, r0
 8011580:	4608      	mov	r0, r1
 8011582:	4611      	mov	r1, r2
 8011584:	602b      	str	r3, [r5, #0]
 8011586:	f7f0 fa3d 	bl	8001a04 <_kill>
 801158a:	1c43      	adds	r3, r0, #1
 801158c:	d102      	bne.n	8011594 <_kill_r+0x1c>
 801158e:	682b      	ldr	r3, [r5, #0]
 8011590:	b103      	cbz	r3, 8011594 <_kill_r+0x1c>
 8011592:	6023      	str	r3, [r4, #0]
 8011594:	bd38      	pop	{r3, r4, r5, pc}
 8011596:	bf00      	nop
 8011598:	20014278 	.word	0x20014278

0801159c <_getpid_r>:
 801159c:	f7f0 ba2a 	b.w	80019f4 <_getpid>

080115a0 <_malloc_usable_size_r>:
 80115a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115a4:	1f18      	subs	r0, r3, #4
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	bfbc      	itt	lt
 80115aa:	580b      	ldrlt	r3, [r1, r0]
 80115ac:	18c0      	addlt	r0, r0, r3
 80115ae:	4770      	bx	lr

080115b0 <__swhatbuf_r>:
 80115b0:	b570      	push	{r4, r5, r6, lr}
 80115b2:	460c      	mov	r4, r1
 80115b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115b8:	2900      	cmp	r1, #0
 80115ba:	b096      	sub	sp, #88	@ 0x58
 80115bc:	4615      	mov	r5, r2
 80115be:	461e      	mov	r6, r3
 80115c0:	da0d      	bge.n	80115de <__swhatbuf_r+0x2e>
 80115c2:	89a3      	ldrh	r3, [r4, #12]
 80115c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80115c8:	f04f 0100 	mov.w	r1, #0
 80115cc:	bf14      	ite	ne
 80115ce:	2340      	movne	r3, #64	@ 0x40
 80115d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80115d4:	2000      	movs	r0, #0
 80115d6:	6031      	str	r1, [r6, #0]
 80115d8:	602b      	str	r3, [r5, #0]
 80115da:	b016      	add	sp, #88	@ 0x58
 80115dc:	bd70      	pop	{r4, r5, r6, pc}
 80115de:	466a      	mov	r2, sp
 80115e0:	f000 f848 	bl	8011674 <_fstat_r>
 80115e4:	2800      	cmp	r0, #0
 80115e6:	dbec      	blt.n	80115c2 <__swhatbuf_r+0x12>
 80115e8:	9901      	ldr	r1, [sp, #4]
 80115ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80115ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80115f2:	4259      	negs	r1, r3
 80115f4:	4159      	adcs	r1, r3
 80115f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80115fa:	e7eb      	b.n	80115d4 <__swhatbuf_r+0x24>

080115fc <__smakebuf_r>:
 80115fc:	898b      	ldrh	r3, [r1, #12]
 80115fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011600:	079d      	lsls	r5, r3, #30
 8011602:	4606      	mov	r6, r0
 8011604:	460c      	mov	r4, r1
 8011606:	d507      	bpl.n	8011618 <__smakebuf_r+0x1c>
 8011608:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801160c:	6023      	str	r3, [r4, #0]
 801160e:	6123      	str	r3, [r4, #16]
 8011610:	2301      	movs	r3, #1
 8011612:	6163      	str	r3, [r4, #20]
 8011614:	b003      	add	sp, #12
 8011616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011618:	ab01      	add	r3, sp, #4
 801161a:	466a      	mov	r2, sp
 801161c:	f7ff ffc8 	bl	80115b0 <__swhatbuf_r>
 8011620:	9f00      	ldr	r7, [sp, #0]
 8011622:	4605      	mov	r5, r0
 8011624:	4639      	mov	r1, r7
 8011626:	4630      	mov	r0, r6
 8011628:	f7fe fd04 	bl	8010034 <_malloc_r>
 801162c:	b948      	cbnz	r0, 8011642 <__smakebuf_r+0x46>
 801162e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011632:	059a      	lsls	r2, r3, #22
 8011634:	d4ee      	bmi.n	8011614 <__smakebuf_r+0x18>
 8011636:	f023 0303 	bic.w	r3, r3, #3
 801163a:	f043 0302 	orr.w	r3, r3, #2
 801163e:	81a3      	strh	r3, [r4, #12]
 8011640:	e7e2      	b.n	8011608 <__smakebuf_r+0xc>
 8011642:	89a3      	ldrh	r3, [r4, #12]
 8011644:	6020      	str	r0, [r4, #0]
 8011646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801164a:	81a3      	strh	r3, [r4, #12]
 801164c:	9b01      	ldr	r3, [sp, #4]
 801164e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011652:	b15b      	cbz	r3, 801166c <__smakebuf_r+0x70>
 8011654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011658:	4630      	mov	r0, r6
 801165a:	f000 f81d 	bl	8011698 <_isatty_r>
 801165e:	b128      	cbz	r0, 801166c <__smakebuf_r+0x70>
 8011660:	89a3      	ldrh	r3, [r4, #12]
 8011662:	f023 0303 	bic.w	r3, r3, #3
 8011666:	f043 0301 	orr.w	r3, r3, #1
 801166a:	81a3      	strh	r3, [r4, #12]
 801166c:	89a3      	ldrh	r3, [r4, #12]
 801166e:	431d      	orrs	r5, r3
 8011670:	81a5      	strh	r5, [r4, #12]
 8011672:	e7cf      	b.n	8011614 <__smakebuf_r+0x18>

08011674 <_fstat_r>:
 8011674:	b538      	push	{r3, r4, r5, lr}
 8011676:	4d07      	ldr	r5, [pc, #28]	@ (8011694 <_fstat_r+0x20>)
 8011678:	2300      	movs	r3, #0
 801167a:	4604      	mov	r4, r0
 801167c:	4608      	mov	r0, r1
 801167e:	4611      	mov	r1, r2
 8011680:	602b      	str	r3, [r5, #0]
 8011682:	f7f0 fa1f 	bl	8001ac4 <_fstat>
 8011686:	1c43      	adds	r3, r0, #1
 8011688:	d102      	bne.n	8011690 <_fstat_r+0x1c>
 801168a:	682b      	ldr	r3, [r5, #0]
 801168c:	b103      	cbz	r3, 8011690 <_fstat_r+0x1c>
 801168e:	6023      	str	r3, [r4, #0]
 8011690:	bd38      	pop	{r3, r4, r5, pc}
 8011692:	bf00      	nop
 8011694:	20014278 	.word	0x20014278

08011698 <_isatty_r>:
 8011698:	b538      	push	{r3, r4, r5, lr}
 801169a:	4d06      	ldr	r5, [pc, #24]	@ (80116b4 <_isatty_r+0x1c>)
 801169c:	2300      	movs	r3, #0
 801169e:	4604      	mov	r4, r0
 80116a0:	4608      	mov	r0, r1
 80116a2:	602b      	str	r3, [r5, #0]
 80116a4:	f7f0 fa1e 	bl	8001ae4 <_isatty>
 80116a8:	1c43      	adds	r3, r0, #1
 80116aa:	d102      	bne.n	80116b2 <_isatty_r+0x1a>
 80116ac:	682b      	ldr	r3, [r5, #0]
 80116ae:	b103      	cbz	r3, 80116b2 <_isatty_r+0x1a>
 80116b0:	6023      	str	r3, [r4, #0]
 80116b2:	bd38      	pop	{r3, r4, r5, pc}
 80116b4:	20014278 	.word	0x20014278

080116b8 <_init>:
 80116b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ba:	bf00      	nop
 80116bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116be:	bc08      	pop	{r3}
 80116c0:	469e      	mov	lr, r3
 80116c2:	4770      	bx	lr

080116c4 <_fini>:
 80116c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116c6:	bf00      	nop
 80116c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116ca:	bc08      	pop	{r3}
 80116cc:	469e      	mov	lr, r3
 80116ce:	4770      	bx	lr
