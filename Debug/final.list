
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af10  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  0800b0a0  0800b0a0  0000c0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb4c  0800bb4c  0000d17c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bb4c  0800bb4c  0000cb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb54  0800bb54  0000d17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb54  0800bb54  0000cb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb58  0800bb58  0000cb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800bb5c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d17c  2**0
                  CONTENTS
 10 .bss          00013904  2000017c  2000017c  0000d17c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013a80  20013a80  0000d17c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d17c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e8d5  00000000  00000000  0000d1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000504a  00000000  00000000  0002ba81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  00030ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ec  00000000  00000000  000325b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027049  00000000  00000000  00033aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024a91  00000000  00000000  0005aaed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dabb6  00000000  00000000  0007f57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015a134  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007498  00000000  00000000  0015a178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00161610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000017c 	.word	0x2000017c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b088 	.word	0x0800b088

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000180 	.word	0x20000180
 80001cc:	0800b088 	.word	0x0800b088

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f001 f93b 	bl	800184c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f899 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 fb01 	bl	8000be0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005de:	f000 f989 	bl	80008f4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 faa9 	bl	8000b38 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005e6:	f000 fad1 	bl	8000b8c <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80005ea:	f000 f927 	bl	800083c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005ee:	f000 fa79 	bl	8000ae4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80005f2:	f000 f8f5 	bl	80007e0 <MX_I2C1_Init>
  MX_TIM4_Init();
 80005f6:	f000 f9e9 	bl	80009cc <MX_TIM4_Init>
  MX_SPI2_Init();
 80005fa:	f000 f9b1 	bl	8000960 <MX_SPI2_Init>
  MX_FATFS_Init();
 80005fe:	f005 fd1f 	bl	8006040 <MX_FATFS_Init>
  MX_I2S3_Init();
 8000602:	f000 f949 	bl	8000898 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  // init
  MsgHandler_Init(&huart2);
 8000606:	4830      	ldr	r0, [pc, #192]	@ (80006c8 <main+0xfc>)
 8000608:	f000 fbec 	bl	8000de4 <MsgHandler_Init>
  SendMsg(&huart2, "MsgHandler_Init\n\r");
 800060c:	492f      	ldr	r1, [pc, #188]	@ (80006cc <main+0x100>)
 800060e:	482e      	ldr	r0, [pc, #184]	@ (80006c8 <main+0xfc>)
 8000610:	f000 fc26 	bl	8000e60 <SendMsg>
  ESP32_Init(&huart3, &huart2);
 8000614:	492c      	ldr	r1, [pc, #176]	@ (80006c8 <main+0xfc>)
 8000616:	482e      	ldr	r0, [pc, #184]	@ (80006d0 <main+0x104>)
 8000618:	f005 fc84 	bl	8005f24 <ESP32_Init>
  LCD2004_Init(&hi2c1, 0x4E);
 800061c:	214e      	movs	r1, #78	@ 0x4e
 800061e:	482d      	ldr	r0, [pc, #180]	@ (80006d4 <main+0x108>)
 8000620:	f009 fa52 	bl	8009ac8 <LCD2004_Init>
  Shell_Init(&huart2);
 8000624:	4828      	ldr	r0, [pc, #160]	@ (80006c8 <main+0xfc>)
 8000626:	f009 ff93 	bl	800a550 <Shell_Init>
  LED_Init();
 800062a:	f009 faa1 	bl	8009b70 <LED_Init>

// my_WM8978_Init();
  SendMsg(&huart2, "OS Resource\n\r");
 800062e:	492a      	ldr	r1, [pc, #168]	@ (80006d8 <main+0x10c>)
 8000630:	4825      	ldr	r0, [pc, #148]	@ (80006c8 <main+0xfc>)
 8000632:	f000 fc15 	bl	8000e60 <SendMsg>
  //OS Resource
  MsgHandler_OS_Resources_Init();
 8000636:	f000 fbe5 	bl	8000e04 <MsgHandler_OS_Resources_Init>
  ESP32_OS_Resources_Init();
 800063a:	f005 fc89 	bl	8005f50 <ESP32_OS_Resources_Init>
  LCD2004_OS_Resources_Init();
 800063e:	f009 fa59 	bl	8009af4 <LCD2004_OS_Resources_Init>
  LED_OS_Resources_Init();
 8000642:	f009 faa7 	bl	8009b94 <LED_OS_Resources_Init>

// WM8978_Palyer();
  //Task
  xTaskCreate(ESP32Sender, "ESP32Sender", 128, NULL, 1, NULL);
 8000646:	2300      	movs	r3, #0
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2301      	movs	r3, #1
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	2280      	movs	r2, #128	@ 0x80
 8000652:	4922      	ldr	r1, [pc, #136]	@ (80006dc <main+0x110>)
 8000654:	4822      	ldr	r0, [pc, #136]	@ (80006e0 <main+0x114>)
 8000656:	f007 fa2d 	bl	8007ab4 <xTaskCreate>
  xTaskCreate(ESP32Receiver, "ESP32Receiver", 128, NULL, 1, NULL);
 800065a:	2300      	movs	r3, #0
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	2301      	movs	r3, #1
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2300      	movs	r3, #0
 8000664:	2280      	movs	r2, #128	@ 0x80
 8000666:	491f      	ldr	r1, [pc, #124]	@ (80006e4 <main+0x118>)
 8000668:	481f      	ldr	r0, [pc, #124]	@ (80006e8 <main+0x11c>)
 800066a:	f007 fa23 	bl	8007ab4 <xTaskCreate>
  xTaskCreate(LCDHandler, "LCDHandler", 128, NULL, 1, NULL);
 800066e:	2300      	movs	r3, #0
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	2301      	movs	r3, #1
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2300      	movs	r3, #0
 8000678:	2280      	movs	r2, #128	@ 0x80
 800067a:	491c      	ldr	r1, [pc, #112]	@ (80006ec <main+0x120>)
 800067c:	481c      	ldr	r0, [pc, #112]	@ (80006f0 <main+0x124>)
 800067e:	f007 fa19 	bl	8007ab4 <xTaskCreate>
  xTaskCreate(ShellHandler, "ShellHandler", 128, NULL, 2, NULL);
 8000682:	2300      	movs	r3, #0
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2302      	movs	r3, #2
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2300      	movs	r3, #0
 800068c:	2280      	movs	r2, #128	@ 0x80
 800068e:	4919      	ldr	r1, [pc, #100]	@ (80006f4 <main+0x128>)
 8000690:	4819      	ldr	r0, [pc, #100]	@ (80006f8 <main+0x12c>)
 8000692:	f007 fa0f 	bl	8007ab4 <xTaskCreate>
  xTaskCreate(LEDHandler, "LEDHandler", 128, NULL, 1, NULL);
 8000696:	2300      	movs	r3, #0
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	2301      	movs	r3, #1
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2300      	movs	r3, #0
 80006a0:	2280      	movs	r2, #128	@ 0x80
 80006a2:	4916      	ldr	r1, [pc, #88]	@ (80006fc <main+0x130>)
 80006a4:	4816      	ldr	r0, [pc, #88]	@ (8000700 <main+0x134>)
 80006a6:	f007 fa05 	bl	8007ab4 <xTaskCreate>
  xTaskCreate(LEDTask, "LEDTask", 128, NULL, 1, NULL);
 80006aa:	2300      	movs	r3, #0
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	2300      	movs	r3, #0
 80006b4:	2280      	movs	r2, #128	@ 0x80
 80006b6:	4913      	ldr	r1, [pc, #76]	@ (8000704 <main+0x138>)
 80006b8:	4813      	ldr	r0, [pc, #76]	@ (8000708 <main+0x13c>)
 80006ba:	f007 f9fb 	bl	8007ab4 <xTaskCreate>
//  xTaskCreate(SDCARD_Test, "SDCARD_Test", 512, NULL, 1, NULL);
  //xTaskCreate(WM8978_Demo, "WM8978_Demo", 512, NULL, 1, NULL);
  // xTaskCreate(NECHandler, "NECHandler", 128, NULL, 1, NULL);

  vTaskStartScheduler();
 80006be:	f007 fb6f 	bl	8007da0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c2:	bf00      	nop
 80006c4:	e7fd      	b.n	80006c2 <main+0xf6>
 80006c6:	bf00      	nop
 80006c8:	200003c8 	.word	0x200003c8
 80006cc:	0800b134 	.word	0x0800b134
 80006d0:	20000410 	.word	0x20000410
 80006d4:	20000198 	.word	0x20000198
 80006d8:	0800b148 	.word	0x0800b148
 80006dc:	0800b158 	.word	0x0800b158
 80006e0:	08005f7d 	.word	0x08005f7d
 80006e4:	0800b164 	.word	0x0800b164
 80006e8:	08005ff1 	.word	0x08005ff1
 80006ec:	0800b174 	.word	0x0800b174
 80006f0:	08009b21 	.word	0x08009b21
 80006f4:	0800b180 	.word	0x0800b180
 80006f8:	0800a58d 	.word	0x0800a58d
 80006fc:	0800b190 	.word	0x0800b190
 8000700:	08009bfd 	.word	0x08009bfd
 8000704:	0800b19c 	.word	0x0800b19c
 8000708:	08009c85 	.word	0x08009c85

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	@ 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	2230      	movs	r2, #48	@ 0x30
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f00a f822 	bl	800a764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	4b28      	ldr	r3, [pc, #160]	@ (80007d8 <SystemClock_Config+0xcc>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000738:	4a27      	ldr	r2, [pc, #156]	@ (80007d8 <SystemClock_Config+0xcc>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000740:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <SystemClock_Config+0xcc>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <SystemClock_Config+0xd0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a21      	ldr	r2, [pc, #132]	@ (80007dc <SystemClock_Config+0xd0>)
 8000756:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <SystemClock_Config+0xd0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	2310      	movs	r3, #16
 8000772:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000778:	2300      	movs	r3, #0
 800077a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800077c:	2308      	movs	r3, #8
 800077e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000780:	2332      	movs	r3, #50	@ 0x32
 8000782:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000784:	2304      	movs	r3, #4
 8000786:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000788:	2307      	movs	r3, #7
 800078a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	4618      	mov	r0, r3
 8000792:	f002 fc97 	bl	80030c4 <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800079c:	f000 fb1b 	bl	8000dd6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a0:	230f      	movs	r3, #15
 80007a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a4:	2302      	movs	r3, #2
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 fef8 	bl	80035b4 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ca:	f000 fb04 	bl	8000dd6 <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3750      	adds	r7, #80	@ 0x50
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e4:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <MX_I2C1_Init+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007ec:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <MX_I2C1_Init+0x58>)
 80007ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000802:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	@ (8000830 <MX_I2C1_Init+0x50>)
 800081e:	f001 fb13 	bl	8001e48 <HAL_I2C_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000828:	f000 fad5 	bl	8000dd6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000198 	.word	0x20000198
 8000834:	40005400 	.word	0x40005400
 8000838:	000186a0 	.word	0x000186a0

0800083c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <MX_I2C2_Init+0x50>)
 8000842:	4a13      	ldr	r2, [pc, #76]	@ (8000890 <MX_I2C2_Init+0x54>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_I2C2_Init+0x50>)
 8000848:	4a12      	ldr	r2, [pc, #72]	@ (8000894 <MX_I2C2_Init+0x58>)
 800084a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_I2C2_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_I2C2_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_I2C2_Init+0x50>)
 800085a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800085e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000860:	4b0a      	ldr	r3, [pc, #40]	@ (800088c <MX_I2C2_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_I2C2_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086c:	4b07      	ldr	r3, [pc, #28]	@ (800088c <MX_I2C2_Init+0x50>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000872:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_I2C2_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	@ (800088c <MX_I2C2_Init+0x50>)
 800087a:	f001 fae5 	bl	8001e48 <HAL_I2C_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000884:	f000 faa7 	bl	8000dd6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200001ec 	.word	0x200001ec
 8000890:	40005800 	.word	0x40005800
 8000894:	000186a0 	.word	0x000186a0

08000898 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800089c:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_I2S3_Init+0x54>)
 800089e:	4a14      	ldr	r2, [pc, #80]	@ (80008f0 <MX_I2S3_Init+0x58>)
 80008a0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008a2:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_I2S3_Init+0x54>)
 80008a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <MX_I2S3_Init+0x54>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_I2S3_Init+0x54>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008b6:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <MX_I2S3_Init+0x54>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80008bc:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <MX_I2S3_Init+0x54>)
 80008be:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80008c2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_I2S3_Init+0x54>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <MX_I2S3_Init+0x54>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_I2S3_Init+0x54>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_I2S3_Init+0x54>)
 80008d8:	f001 ff54 	bl	8002784 <HAL_I2S_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008e2:	f000 fa78 	bl	8000dd6 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000240 	.word	0x20000240
 80008f0:	40003c00 	.word	0x40003c00

080008f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f8:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <MX_SPI1_Init+0x64>)
 80008fa:	4a18      	ldr	r2, [pc, #96]	@ (800095c <MX_SPI1_Init+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008fe:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <MX_SPI1_Init+0x64>)
 8000900:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MX_SPI1_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <MX_SPI1_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <MX_SPI1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <MX_SPI1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <MX_SPI1_Init+0x64>)
 8000920:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000924:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <MX_SPI1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092c:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <MX_SPI1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <MX_SPI1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000938:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <MX_SPI1_Init+0x64>)
 8000940:	220a      	movs	r2, #10
 8000942:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000944:	4804      	ldr	r0, [pc, #16]	@ (8000958 <MX_SPI1_Init+0x64>)
 8000946:	f003 f9c9 	bl	8003cdc <HAL_SPI_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000950:	f000 fa41 	bl	8000dd6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000288 	.word	0x20000288
 800095c:	40013000 	.word	0x40013000

08000960 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000964:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <MX_SPI2_Init+0x64>)
 8000966:	4a18      	ldr	r2, [pc, #96]	@ (80009c8 <MX_SPI2_Init+0x68>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800096a:	4b16      	ldr	r3, [pc, #88]	@ (80009c4 <MX_SPI2_Init+0x64>)
 800096c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000970:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000972:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <MX_SPI2_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_SPI2_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_SPI2_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000984:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_SPI2_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_SPI2_Init+0x64>)
 800098c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000990:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_SPI2_Init+0x64>)
 8000994:	2230      	movs	r2, #48	@ 0x30
 8000996:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000998:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <MX_SPI2_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_SPI2_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a4:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <MX_SPI2_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_SPI2_Init+0x64>)
 80009ac:	220a      	movs	r2, #10
 80009ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <MX_SPI2_Init+0x64>)
 80009b2:	f003 f993 	bl	8003cdc <HAL_SPI_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009bc:	f000 fa0b 	bl	8000dd6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200002e0 	.word	0x200002e0
 80009c8:	40003800 	.word	0x40003800

080009cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08e      	sub	sp, #56	@ 0x38
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]
 80009fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009fc:	4b37      	ldr	r3, [pc, #220]	@ (8000adc <MX_TIM4_Init+0x110>)
 80009fe:	4a38      	ldr	r2, [pc, #224]	@ (8000ae0 <MX_TIM4_Init+0x114>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000a02:	4b36      	ldr	r3, [pc, #216]	@ (8000adc <MX_TIM4_Init+0x110>)
 8000a04:	2253      	movs	r2, #83	@ 0x53
 8000a06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b34      	ldr	r3, [pc, #208]	@ (8000adc <MX_TIM4_Init+0x110>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8000a0e:	4b33      	ldr	r3, [pc, #204]	@ (8000adc <MX_TIM4_Init+0x110>)
 8000a10:	22ff      	movs	r2, #255	@ 0xff
 8000a12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b31      	ldr	r3, [pc, #196]	@ (8000adc <MX_TIM4_Init+0x110>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1a:	4b30      	ldr	r3, [pc, #192]	@ (8000adc <MX_TIM4_Init+0x110>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a20:	482e      	ldr	r0, [pc, #184]	@ (8000adc <MX_TIM4_Init+0x110>)
 8000a22:	f003 fdad 	bl	8004580 <HAL_TIM_Base_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000a2c:	f000 f9d3 	bl	8000dd6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4827      	ldr	r0, [pc, #156]	@ (8000adc <MX_TIM4_Init+0x110>)
 8000a3e:	f004 f933 	bl	8004ca8 <HAL_TIM_ConfigClockSource>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000a48:	f000 f9c5 	bl	8000dd6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a4c:	4823      	ldr	r0, [pc, #140]	@ (8000adc <MX_TIM4_Init+0x110>)
 8000a4e:	f003 fe57 	bl	8004700 <HAL_TIM_PWM_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000a58:	f000 f9bd 	bl	8000dd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a64:	f107 0320 	add.w	r3, r7, #32
 8000a68:	4619      	mov	r1, r3
 8000a6a:	481c      	ldr	r0, [pc, #112]	@ (8000adc <MX_TIM4_Init+0x110>)
 8000a6c:	f004 fd28 	bl	80054c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000a76:	f000 f9ae 	bl	8000dd6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7a:	2360      	movs	r3, #96	@ 0x60
 8000a7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4812      	ldr	r0, [pc, #72]	@ (8000adc <MX_TIM4_Init+0x110>)
 8000a92:	f004 f847 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000a9c:	f000 f99b 	bl	8000dd6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2208      	movs	r2, #8
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480d      	ldr	r0, [pc, #52]	@ (8000adc <MX_TIM4_Init+0x110>)
 8000aa8:	f004 f83c 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000ab2:	f000 f990 	bl	8000dd6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	220c      	movs	r2, #12
 8000aba:	4619      	mov	r1, r3
 8000abc:	4807      	ldr	r0, [pc, #28]	@ (8000adc <MX_TIM4_Init+0x110>)
 8000abe:	f004 f831 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8000ac8:	f000 f985 	bl	8000dd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000acc:	4803      	ldr	r0, [pc, #12]	@ (8000adc <MX_TIM4_Init+0x110>)
 8000ace:	f000 fcbb 	bl	8001448 <HAL_TIM_MspPostInit>

}
 8000ad2:	bf00      	nop
 8000ad4:	3738      	adds	r7, #56	@ 0x38
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000338 	.word	0x20000338
 8000ae0:	40000800 	.word	0x40000800

08000ae4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	@ (8000b34 <MX_USART1_UART_Init+0x50>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aee:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000b1c:	f004 fd60 	bl	80055e0 <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b26:	f000 f956 	bl	8000dd6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000380 	.word	0x20000380
 8000b34:	40011000 	.word	0x40011000

08000b38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	@ (8000b88 <MX_USART2_UART_Init+0x50>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b70:	f004 fd36 	bl	80055e0 <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b7a:	f000 f92c 	bl	8000dd6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200003c8 	.word	0x200003c8
 8000b88:	40004400 	.word	0x40004400

08000b8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b90:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	@ (8000bdc <MX_USART3_UART_Init+0x50>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b96:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000bc4:	f004 fd0c 	bl	80055e0 <HAL_UART_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bce:	f000 f902 	bl	8000dd6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000410 	.word	0x20000410
 8000bdc:	40004800 	.word	0x40004800

08000be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	@ 0x30
 8000be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a69      	ldr	r2, [pc, #420]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b67      	ldr	r3, [pc, #412]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	61bb      	str	r3, [r7, #24]
 8000c10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	4b63      	ldr	r3, [pc, #396]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a62      	ldr	r2, [pc, #392]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b60      	ldr	r3, [pc, #384]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b5c      	ldr	r3, [pc, #368]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a5b      	ldr	r2, [pc, #364]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b59      	ldr	r3, [pc, #356]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b55      	ldr	r3, [pc, #340]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a54      	ldr	r2, [pc, #336]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b52      	ldr	r3, [pc, #328]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a4d      	ldr	r2, [pc, #308]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b4b      	ldr	r3, [pc, #300]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b47      	ldr	r3, [pc, #284]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a46      	ldr	r2, [pc, #280]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000c8c:	f043 0310 	orr.w	r3, r3, #16
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b44      	ldr	r3, [pc, #272]	@ (8000da4 <MX_GPIO_Init+0x1c4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0310 	and.w	r3, r3, #16
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4841      	ldr	r0, [pc, #260]	@ (8000da8 <MX_GPIO_Init+0x1c8>)
 8000ca4:	f001 f8b6 	bl	8001e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2102      	movs	r1, #2
 8000cac:	483f      	ldr	r0, [pc, #252]	@ (8000dac <MX_GPIO_Init+0x1cc>)
 8000cae:	f001 f8b1 	bl	8001e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2110      	movs	r1, #16
 8000cb6:	483e      	ldr	r0, [pc, #248]	@ (8000db0 <MX_GPIO_Init+0x1d0>)
 8000cb8:	f001 f8ac 	bl	8001e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4835      	ldr	r0, [pc, #212]	@ (8000da8 <MX_GPIO_Init+0x1c8>)
 8000cd4:	f000 ff02 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce8:	2305      	movs	r3, #5
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	482d      	ldr	r0, [pc, #180]	@ (8000da8 <MX_GPIO_Init+0x1c8>)
 8000cf4:	f000 fef2 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4827      	ldr	r0, [pc, #156]	@ (8000dac <MX_GPIO_Init+0x1cc>)
 8000d10:	f000 fee4 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d14:	2304      	movs	r3, #4
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	4821      	ldr	r0, [pc, #132]	@ (8000dac <MX_GPIO_Init+0x1cc>)
 8000d28:	f000 fed8 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000d2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	481c      	ldr	r0, [pc, #112]	@ (8000db4 <MX_GPIO_Init+0x1d4>)
 8000d42:	f000 fecb 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin;
 8000d46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d58:	230a      	movs	r3, #10
 8000d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	4814      	ldr	r0, [pc, #80]	@ (8000db4 <MX_GPIO_Init+0x1d4>)
 8000d64:	f000 feba 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8000d68:	2310      	movs	r3, #16
 8000d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <MX_GPIO_Init+0x1d0>)
 8000d80:	f000 feac 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d84:	2320      	movs	r3, #32
 8000d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	@ (8000db0 <MX_GPIO_Init+0x1d0>)
 8000d98:	f000 fea0 	bl	8001adc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d9c:	bf00      	nop
 8000d9e:	3730      	adds	r7, #48	@ 0x30
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020800 	.word	0x40020800
 8000dac:	40020400 	.word	0x40020400
 8000db0:	40020c00 	.word	0x40020c00
 8000db4:	40020000 	.word	0x40020000

08000db8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dc8:	d101      	bne.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000dca:	f000 fd61 	bl	8001890 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dda:	b672      	cpsid	i
}
 8000ddc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dde:	bf00      	nop
 8000de0:	e7fd      	b.n	8000dde <Error_Handler+0x8>
	...

08000de4 <MsgHandler_Init>:
SemaphoreHandle_t msgHandlerRx;
SemaphoreHandle_t ReceiveMsgTimeoutMutex;
int ReceiveMsgTimeout = 10;

void MsgHandler_Init(UART_HandleTypeDef* shell_huart)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	msgHandler_shell_huart = shell_huart;
 8000dec:	4a04      	ldr	r2, [pc, #16]	@ (8000e00 <MsgHandler_Init+0x1c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000458 	.word	0x20000458

08000e04 <MsgHandler_OS_Resources_Init>:

void MsgHandler_OS_Resources_Init()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	msgHandlerTx = xSemaphoreCreateMutex();
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f006 f925 	bl	8007058 <xQueueCreateMutex>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a07      	ldr	r2, [pc, #28]	@ (8000e30 <MsgHandler_OS_Resources_Init+0x2c>)
 8000e12:	6013      	str	r3, [r2, #0]
	msgHandlerRx = xSemaphoreCreateMutex();
 8000e14:	2001      	movs	r0, #1
 8000e16:	f006 f91f 	bl	8007058 <xQueueCreateMutex>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a05      	ldr	r2, [pc, #20]	@ (8000e34 <MsgHandler_OS_Resources_Init+0x30>)
 8000e1e:	6013      	str	r3, [r2, #0]
	ReceiveMsgTimeoutMutex = xSemaphoreCreateMutex();
 8000e20:	2001      	movs	r0, #1
 8000e22:	f006 f919 	bl	8007058 <xQueueCreateMutex>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4a03      	ldr	r2, [pc, #12]	@ (8000e38 <MsgHandler_OS_Resources_Init+0x34>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	2000045c 	.word	0x2000045c
 8000e34:	20000460 	.word	0x20000460
 8000e38:	20000464 	.word	0x20000464

08000e3c <SendChar>:

void SendChar(UART_HandleTypeDef* huart, const char c)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	70fb      	strb	r3, [r7, #3]
	SendMsg(huart, "%c", c);
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4903      	ldr	r1, [pc, #12]	@ (8000e5c <SendChar+0x20>)
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f000 f806 	bl	8000e60 <SendMsg>
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	0800b1a4 	.word	0x0800b1a4

08000e60 <SendMsg>:

void SendMsg(UART_HandleTypeDef* huart, const char* fmt, ...)
{
 8000e60:	b40e      	push	{r1, r2, r3}
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b085      	sub	sp, #20
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
	if(msgHandlerTx){
 8000e6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <SendMsg+0x98>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d026      	beq.n	8000ec0 <SendMsg+0x60>
		if (xSemaphoreTake(msgHandlerTx, portMAX_DELAY) == pdPASS) {
 8000e72:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <SendMsg+0x98>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f006 fb84 	bl	8007588 <xQueueSemaphoreTake>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d131      	bne.n	8000eea <SendMsg+0x8a>
			static char send_data[256];
			va_list args;
			va_start(args, fmt);
 8000e86:	f107 0320 	add.w	r3, r7, #32
 8000e8a:	60fb      	str	r3, [r7, #12]
			vsnprintf(send_data, sizeof(send_data), fmt, args);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	69fa      	ldr	r2, [r7, #28]
 8000e90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e94:	4819      	ldr	r0, [pc, #100]	@ (8000efc <SendMsg+0x9c>)
 8000e96:	f009 fc57 	bl	800a748 <vsniprintf>
			va_end(args);
			HAL_UART_Transmit(huart, (uint8_t *)send_data, strlen(send_data), HAL_MAX_DELAY);
 8000e9a:	4818      	ldr	r0, [pc, #96]	@ (8000efc <SendMsg+0x9c>)
 8000e9c:	f7ff f9a2 	bl	80001e4 <strlen>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea8:	4914      	ldr	r1, [pc, #80]	@ (8000efc <SendMsg+0x9c>)
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f004 fbe8 	bl	8005680 <HAL_UART_Transmit>

			xSemaphoreGive(msgHandlerTx);
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <SendMsg+0x98>)
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	f006 f8e5 	bl	8007088 <xQueueGenericSend>
		vsnprintf(send_data, sizeof(send_data), fmt, args);
		va_end(args);
		HAL_UART_Transmit(huart, (uint8_t *)send_data, strlen(send_data), HAL_MAX_DELAY);

	}
}
 8000ebe:	e014      	b.n	8000eea <SendMsg+0x8a>
		va_start(args, fmt);
 8000ec0:	f107 0320 	add.w	r3, r7, #32
 8000ec4:	60bb      	str	r3, [r7, #8]
		vsnprintf(send_data, sizeof(send_data), fmt, args);
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ece:	480c      	ldr	r0, [pc, #48]	@ (8000f00 <SendMsg+0xa0>)
 8000ed0:	f009 fc3a 	bl	800a748 <vsniprintf>
		HAL_UART_Transmit(huart, (uint8_t *)send_data, strlen(send_data), HAL_MAX_DELAY);
 8000ed4:	480a      	ldr	r0, [pc, #40]	@ (8000f00 <SendMsg+0xa0>)
 8000ed6:	f7ff f985 	bl	80001e4 <strlen>
 8000eda:	4603      	mov	r3, r0
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	4907      	ldr	r1, [pc, #28]	@ (8000f00 <SendMsg+0xa0>)
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f004 fbcb 	bl	8005680 <HAL_UART_Transmit>
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ef4:	b003      	add	sp, #12
 8000ef6:	4770      	bx	lr
 8000ef8:	2000045c 	.word	0x2000045c
 8000efc:	20000468 	.word	0x20000468
 8000f00:	20000568 	.word	0x20000568

08000f04 <ReceiveChar>:

int ReceiveChar(UART_HandleTypeDef* huart, char* receive_data)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
	if (xSemaphoreTake(msgHandlerRx, portMAX_DELAY) == pdPASS) {
 8000f0e:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <ReceiveChar+0x5c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f04f 31ff 	mov.w	r1, #4294967295
 8000f16:	4618      	mov	r0, r3
 8000f18:	f006 fb36 	bl	8007588 <xQueueSemaphoreTake>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d119      	bne.n	8000f56 <ReceiveChar+0x52>
		if (HAL_UART_Receive(huart, (uint8_t *)receive_data, 1, 500) == HAL_OK) {
 8000f22:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f26:	2201      	movs	r2, #1
 8000f28:	6839      	ldr	r1, [r7, #0]
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f004 fc33 	bl	8005796 <HAL_UART_Receive>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d108      	bne.n	8000f48 <ReceiveChar+0x44>
			xSemaphoreGive(msgHandlerRx);
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <ReceiveChar+0x5c>)
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f006 f8a2 	bl	8007088 <xQueueGenericSend>
			return HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	e007      	b.n	8000f58 <ReceiveChar+0x54>
		}
		xSemaphoreGive(msgHandlerRx);
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <ReceiveChar+0x5c>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	f006 f899 	bl	8007088 <xQueueGenericSend>
	}

	return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000460 	.word	0x20000460

08000f64 <ReceiveMsg>:

int ReceiveMsg(UART_HandleTypeDef* huart, char* receive_data, size_t buffer_size)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
    memset(receive_data, '\0', buffer_size-1);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	461a      	mov	r2, r3
 8000f76:	2100      	movs	r1, #0
 8000f78:	68b8      	ldr	r0, [r7, #8]
 8000f7a:	f009 fbf3 	bl	800a764 <memset>
    if (xSemaphoreTake(msgHandlerRx, portMAX_DELAY) == pdPASS) {
 8000f7e:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <ReceiveMsg+0xa0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f04f 31ff 	mov.w	r1, #4294967295
 8000f86:	4618      	mov	r0, r3
 8000f88:	f006 fafe 	bl	8007588 <xQueueSemaphoreTake>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d133      	bne.n	8000ffa <ReceiveMsg+0x96>


		if (xSemaphoreTake(ReceiveMsgTimeoutMutex, portMAX_DELAY) == pdPASS) {
 8000f92:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <ReceiveMsg+0xa4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f006 faf4 	bl	8007588 <xQueueSemaphoreTake>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d122      	bne.n	8000fec <ReceiveMsg+0x88>
			HAL_StatusTypeDef result = HAL_UART_Receive(huart, (uint8_t *)receive_data, buffer_size-1, ReceiveMsgTimeout);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	3b01      	subs	r3, #1
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	4b17      	ldr	r3, [pc, #92]	@ (800100c <ReceiveMsg+0xa8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f004 fbee 	bl	8005796 <HAL_UART_Receive>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	75fb      	strb	r3, [r7, #23]
			ReceiveMsgTimeout = 500;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	@ (800100c <ReceiveMsg+0xa8>)
 8000fc0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000fc4:	601a      	str	r2, [r3, #0]
			xSemaphoreGive(ReceiveMsgTimeoutMutex);
 8000fc6:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <ReceiveMsg+0xa4>)
 8000fc8:	6818      	ldr	r0, [r3, #0]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	f006 f85a 	bl	8007088 <xQueueGenericSend>
			if (result == HAL_OK) {
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d108      	bne.n	8000fec <ReceiveMsg+0x88>
				xSemaphoreGive(msgHandlerRx);
 8000fda:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <ReceiveMsg+0xa0>)
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	f006 f850 	bl	8007088 <xQueueGenericSend>
				return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e007      	b.n	8000ffc <ReceiveMsg+0x98>
			}
		}

		xSemaphoreGive(msgHandlerRx);
 8000fec:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <ReceiveMsg+0xa0>)
 8000fee:	6818      	ldr	r0, [r3, #0]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	f006 f847 	bl	8007088 <xQueueGenericSend>
    }

	return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000460 	.word	0x20000460
 8001008:	20000464 	.word	0x20000464
 800100c:	20000000 	.word	0x20000000

08001010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <HAL_MspInit+0x4c>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	4a0f      	ldr	r2, [pc, #60]	@ (800105c <HAL_MspInit+0x4c>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001024:	6453      	str	r3, [r2, #68]	@ 0x44
 8001026:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <HAL_MspInit+0x4c>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <HAL_MspInit+0x4c>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	4a08      	ldr	r2, [pc, #32]	@ (800105c <HAL_MspInit+0x4c>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001040:	6413      	str	r3, [r2, #64]	@ 0x40
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_MspInit+0x4c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800

08001060 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	@ 0x30
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a33      	ldr	r2, [pc, #204]	@ (800114c <HAL_I2C_MspInit+0xec>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d12d      	bne.n	80010de <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
 8001086:	4b32      	ldr	r3, [pc, #200]	@ (8001150 <HAL_I2C_MspInit+0xf0>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a31      	ldr	r2, [pc, #196]	@ (8001150 <HAL_I2C_MspInit+0xf0>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b2f      	ldr	r3, [pc, #188]	@ (8001150 <HAL_I2C_MspInit+0xf0>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800109e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a4:	2312      	movs	r3, #18
 80010a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b0:	2304      	movs	r3, #4
 80010b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	4826      	ldr	r0, [pc, #152]	@ (8001154 <HAL_I2C_MspInit+0xf4>)
 80010bc:	f000 fd0e 	bl	8001adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <HAL_I2C_MspInit+0xf0>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	4a21      	ldr	r2, [pc, #132]	@ (8001150 <HAL_I2C_MspInit+0xf0>)
 80010ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <HAL_I2C_MspInit+0xf0>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010dc:	e031      	b.n	8001142 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001158 <HAL_I2C_MspInit+0xf8>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d12c      	bne.n	8001142 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <HAL_I2C_MspInit+0xf0>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f0:	4a17      	ldr	r2, [pc, #92]	@ (8001150 <HAL_I2C_MspInit+0xf0>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f8:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <HAL_I2C_MspInit+0xf0>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001104:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110a:	2312      	movs	r3, #18
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001116:	2304      	movs	r3, #4
 8001118:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	480c      	ldr	r0, [pc, #48]	@ (8001154 <HAL_I2C_MspInit+0xf4>)
 8001122:	f000 fcdb 	bl	8001adc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <HAL_I2C_MspInit+0xf0>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	4a08      	ldr	r2, [pc, #32]	@ (8001150 <HAL_I2C_MspInit+0xf0>)
 8001130:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001134:	6413      	str	r3, [r2, #64]	@ 0x40
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_I2C_MspInit+0xf0>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
}
 8001142:	bf00      	nop
 8001144:	3730      	adds	r7, #48	@ 0x30
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40005400 	.word	0x40005400
 8001150:	40023800 	.word	0x40023800
 8001154:	40020400 	.word	0x40020400
 8001158:	40005800 	.word	0x40005800

0800115c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08e      	sub	sp, #56	@ 0x38
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a39      	ldr	r2, [pc, #228]	@ (800126c <HAL_I2S_MspInit+0x110>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d16b      	bne.n	8001264 <HAL_I2S_MspInit+0x108>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800118c:	2301      	movs	r3, #1
 800118e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001190:	23c0      	movs	r3, #192	@ 0xc0
 8001192:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001194:	2302      	movs	r3, #2
 8001196:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4618      	mov	r0, r3
 800119e:	f002 fc5b 	bl	8003a58 <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80011a8:	f7ff fe15 	bl	8000dd6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001270 <HAL_I2S_MspInit+0x114>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001270 <HAL_I2S_MspInit+0x114>)
 80011b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80011bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001270 <HAL_I2S_MspInit+0x114>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	4b28      	ldr	r3, [pc, #160]	@ (8001270 <HAL_I2S_MspInit+0x114>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d0:	4a27      	ldr	r2, [pc, #156]	@ (8001270 <HAL_I2S_MspInit+0x114>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d8:	4b25      	ldr	r3, [pc, #148]	@ (8001270 <HAL_I2S_MspInit+0x114>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	4b21      	ldr	r3, [pc, #132]	@ (8001270 <HAL_I2S_MspInit+0x114>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ec:	4a20      	ldr	r2, [pc, #128]	@ (8001270 <HAL_I2S_MspInit+0x114>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <HAL_I2S_MspInit+0x114>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001200:	2310      	movs	r3, #16
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001210:	2306      	movs	r3, #6
 8001212:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001218:	4619      	mov	r1, r3
 800121a:	4816      	ldr	r0, [pc, #88]	@ (8001274 <HAL_I2S_MspInit+0x118>)
 800121c:	f000 fc5e 	bl	8001adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001220:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001232:	2306      	movs	r3, #6
 8001234:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001236:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800123a:	4619      	mov	r1, r3
 800123c:	480e      	ldr	r0, [pc, #56]	@ (8001278 <HAL_I2S_MspInit+0x11c>)
 800123e:	f000 fc4d 	bl	8001adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001242:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8001254:	2305      	movs	r3, #5
 8001256:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001258:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	@ (8001278 <HAL_I2S_MspInit+0x11c>)
 8001260:	f000 fc3c 	bl	8001adc <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001264:	bf00      	nop
 8001266:	3738      	adds	r7, #56	@ 0x38
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40003c00 	.word	0x40003c00
 8001270:	40023800 	.word	0x40023800
 8001274:	40020000 	.word	0x40020000
 8001278:	40020800 	.word	0x40020800

0800127c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	@ 0x30
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a32      	ldr	r2, [pc, #200]	@ (8001364 <HAL_SPI_MspInit+0xe8>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d12c      	bne.n	80012f8 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	4b31      	ldr	r3, [pc, #196]	@ (8001368 <HAL_SPI_MspInit+0xec>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	4a30      	ldr	r2, [pc, #192]	@ (8001368 <HAL_SPI_MspInit+0xec>)
 80012a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001368 <HAL_SPI_MspInit+0xec>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	4b2a      	ldr	r3, [pc, #168]	@ (8001368 <HAL_SPI_MspInit+0xec>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a29      	ldr	r2, [pc, #164]	@ (8001368 <HAL_SPI_MspInit+0xec>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b27      	ldr	r3, [pc, #156]	@ (8001368 <HAL_SPI_MspInit+0xec>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80012d6:	23e0      	movs	r3, #224	@ 0xe0
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012e6:	2305      	movs	r3, #5
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	481e      	ldr	r0, [pc, #120]	@ (800136c <HAL_SPI_MspInit+0xf0>)
 80012f2:	f000 fbf3 	bl	8001adc <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012f6:	e031      	b.n	800135c <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001370 <HAL_SPI_MspInit+0xf4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d12c      	bne.n	800135c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b18      	ldr	r3, [pc, #96]	@ (8001368 <HAL_SPI_MspInit+0xec>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	4a17      	ldr	r2, [pc, #92]	@ (8001368 <HAL_SPI_MspInit+0xec>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001310:	6413      	str	r3, [r2, #64]	@ 0x40
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <HAL_SPI_MspInit+0xec>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <HAL_SPI_MspInit+0xec>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a10      	ldr	r2, [pc, #64]	@ (8001368 <HAL_SPI_MspInit+0xec>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <HAL_SPI_MspInit+0xec>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800133a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800133e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800134c:	2305      	movs	r3, #5
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	4807      	ldr	r0, [pc, #28]	@ (8001374 <HAL_SPI_MspInit+0xf8>)
 8001358:	f000 fbc0 	bl	8001adc <HAL_GPIO_Init>
}
 800135c:	bf00      	nop
 800135e:	3730      	adds	r7, #48	@ 0x30
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40013000 	.word	0x40013000
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000
 8001370:	40003800 	.word	0x40003800
 8001374:	40020400 	.word	0x40020400

08001378 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a28      	ldr	r2, [pc, #160]	@ (8001438 <HAL_TIM_Base_MspInit+0xc0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d14a      	bne.n	8001430 <HAL_TIM_Base_MspInit+0xb8>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b27      	ldr	r3, [pc, #156]	@ (800143c <HAL_TIM_Base_MspInit+0xc4>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	4a26      	ldr	r2, [pc, #152]	@ (800143c <HAL_TIM_Base_MspInit+0xc4>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013aa:	4b24      	ldr	r3, [pc, #144]	@ (800143c <HAL_TIM_Base_MspInit+0xc4>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <HAL_TIM_Base_MspInit+0xc4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a1f      	ldr	r2, [pc, #124]	@ (800143c <HAL_TIM_Base_MspInit+0xc4>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <HAL_TIM_Base_MspInit+0xc4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	4b19      	ldr	r3, [pc, #100]	@ (800143c <HAL_TIM_Base_MspInit+0xc4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a18      	ldr	r2, [pc, #96]	@ (800143c <HAL_TIM_Base_MspInit+0xc4>)
 80013dc:	f043 0310 	orr.w	r3, r3, #16
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b16      	ldr	r3, [pc, #88]	@ (800143c <HAL_TIM_Base_MspInit+0xc4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001400:	2302      	movs	r3, #2
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	480d      	ldr	r0, [pc, #52]	@ (8001440 <HAL_TIM_Base_MspInit+0xc8>)
 800140c:	f000 fb66 	bl	8001adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001410:	2301      	movs	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001420:	2302      	movs	r3, #2
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	4806      	ldr	r0, [pc, #24]	@ (8001444 <HAL_TIM_Base_MspInit+0xcc>)
 800142c:	f000 fb56 	bl	8001adc <HAL_GPIO_Init>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	@ 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40000800 	.word	0x40000800
 800143c:	40023800 	.word	0x40023800
 8001440:	40020c00 	.word	0x40020c00
 8001444:	40021000 	.word	0x40021000

08001448 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a12      	ldr	r2, [pc, #72]	@ (80014b0 <HAL_TIM_MspPostInit+0x68>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d11e      	bne.n	80014a8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <HAL_TIM_MspPostInit+0x6c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a10      	ldr	r2, [pc, #64]	@ (80014b4 <HAL_TIM_MspPostInit+0x6c>)
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <HAL_TIM_MspPostInit+0x6c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8001486:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800148a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001498:	2302      	movs	r3, #2
 800149a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	4619      	mov	r1, r3
 80014a2:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <HAL_TIM_MspPostInit+0x70>)
 80014a4:	f000 fb1a 	bl	8001adc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	3720      	adds	r7, #32
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40000800 	.word	0x40000800
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020c00 	.word	0x40020c00

080014bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08e      	sub	sp, #56	@ 0x38
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001608 <HAL_UART_MspInit+0x14c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d12c      	bne.n	8001538 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
 80014e2:	4b4a      	ldr	r3, [pc, #296]	@ (800160c <HAL_UART_MspInit+0x150>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	4a49      	ldr	r2, [pc, #292]	@ (800160c <HAL_UART_MspInit+0x150>)
 80014e8:	f043 0310 	orr.w	r3, r3, #16
 80014ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ee:	4b47      	ldr	r3, [pc, #284]	@ (800160c <HAL_UART_MspInit+0x150>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	623b      	str	r3, [r7, #32]
 80014f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	4b43      	ldr	r3, [pc, #268]	@ (800160c <HAL_UART_MspInit+0x150>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a42      	ldr	r2, [pc, #264]	@ (800160c <HAL_UART_MspInit+0x150>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b40      	ldr	r3, [pc, #256]	@ (800160c <HAL_UART_MspInit+0x150>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001516:	23c0      	movs	r3, #192	@ 0xc0
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001526:	2307      	movs	r3, #7
 8001528:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152e:	4619      	mov	r1, r3
 8001530:	4837      	ldr	r0, [pc, #220]	@ (8001610 <HAL_UART_MspInit+0x154>)
 8001532:	f000 fad3 	bl	8001adc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001536:	e063      	b.n	8001600 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a35      	ldr	r2, [pc, #212]	@ (8001614 <HAL_UART_MspInit+0x158>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d12c      	bne.n	800159c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
 8001546:	4b31      	ldr	r3, [pc, #196]	@ (800160c <HAL_UART_MspInit+0x150>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	4a30      	ldr	r2, [pc, #192]	@ (800160c <HAL_UART_MspInit+0x150>)
 800154c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001550:	6413      	str	r3, [r2, #64]	@ 0x40
 8001552:	4b2e      	ldr	r3, [pc, #184]	@ (800160c <HAL_UART_MspInit+0x150>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	4b2a      	ldr	r3, [pc, #168]	@ (800160c <HAL_UART_MspInit+0x150>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a29      	ldr	r2, [pc, #164]	@ (800160c <HAL_UART_MspInit+0x150>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b27      	ldr	r3, [pc, #156]	@ (800160c <HAL_UART_MspInit+0x150>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800157a:	230c      	movs	r3, #12
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800158a:	2307      	movs	r3, #7
 800158c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	4820      	ldr	r0, [pc, #128]	@ (8001618 <HAL_UART_MspInit+0x15c>)
 8001596:	f000 faa1 	bl	8001adc <HAL_GPIO_Init>
}
 800159a:	e031      	b.n	8001600 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a1e      	ldr	r2, [pc, #120]	@ (800161c <HAL_UART_MspInit+0x160>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d12c      	bne.n	8001600 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b18      	ldr	r3, [pc, #96]	@ (800160c <HAL_UART_MspInit+0x150>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	4a17      	ldr	r2, [pc, #92]	@ (800160c <HAL_UART_MspInit+0x150>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_UART_MspInit+0x150>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b11      	ldr	r3, [pc, #68]	@ (800160c <HAL_UART_MspInit+0x150>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a10      	ldr	r2, [pc, #64]	@ (800160c <HAL_UART_MspInit+0x150>)
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <HAL_UART_MspInit+0x150>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015f0:	2307      	movs	r3, #7
 80015f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f8:	4619      	mov	r1, r3
 80015fa:	4809      	ldr	r0, [pc, #36]	@ (8001620 <HAL_UART_MspInit+0x164>)
 80015fc:	f000 fa6e 	bl	8001adc <HAL_GPIO_Init>
}
 8001600:	bf00      	nop
 8001602:	3738      	adds	r7, #56	@ 0x38
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40011000 	.word	0x40011000
 800160c:	40023800 	.word	0x40023800
 8001610:	40020400 	.word	0x40020400
 8001614:	40004400 	.word	0x40004400
 8001618:	40020000 	.word	0x40020000
 800161c:	40004800 	.word	0x40004800
 8001620:	40020c00 	.word	0x40020c00

08001624 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	@ 0x38
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	4b34      	ldr	r3, [pc, #208]	@ (800170c <HAL_InitTick+0xe8>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	4a33      	ldr	r2, [pc, #204]	@ (800170c <HAL_InitTick+0xe8>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6413      	str	r3, [r2, #64]	@ 0x40
 8001644:	4b31      	ldr	r3, [pc, #196]	@ (800170c <HAL_InitTick+0xe8>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001650:	f107 0210 	add.w	r2, r7, #16
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f002 f9ca 	bl	80039f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001666:	2b00      	cmp	r3, #0
 8001668:	d103      	bne.n	8001672 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800166a:	f002 f99b 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 800166e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001670:	e004      	b.n	800167c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001672:	f002 f997 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 8001676:	4603      	mov	r3, r0
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800167c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800167e:	4a24      	ldr	r2, [pc, #144]	@ (8001710 <HAL_InitTick+0xec>)
 8001680:	fba2 2303 	umull	r2, r3, r2, r3
 8001684:	0c9b      	lsrs	r3, r3, #18
 8001686:	3b01      	subs	r3, #1
 8001688:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800168a:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <HAL_InitTick+0xf0>)
 800168c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001690:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001692:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <HAL_InitTick+0xf0>)
 8001694:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001698:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800169a:	4a1e      	ldr	r2, [pc, #120]	@ (8001714 <HAL_InitTick+0xf0>)
 800169c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800169e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80016a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <HAL_InitTick+0xf0>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <HAL_InitTick+0xf0>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ac:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <HAL_InitTick+0xf0>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80016b2:	4818      	ldr	r0, [pc, #96]	@ (8001714 <HAL_InitTick+0xf0>)
 80016b4:	f002 ff64 	bl	8004580 <HAL_TIM_Base_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d11b      	bne.n	80016fe <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80016c6:	4813      	ldr	r0, [pc, #76]	@ (8001714 <HAL_InitTick+0xf0>)
 80016c8:	f002 ffaa 	bl	8004620 <HAL_TIM_Base_Start_IT>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d111      	bne.n	80016fe <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016da:	201c      	movs	r0, #28
 80016dc:	f000 f9f0 	bl	8001ac0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b0f      	cmp	r3, #15
 80016e4:	d808      	bhi.n	80016f8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80016e6:	2200      	movs	r2, #0
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	201c      	movs	r0, #28
 80016ec:	f000 f9cc 	bl	8001a88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016f0:	4a09      	ldr	r2, [pc, #36]	@ (8001718 <HAL_InitTick+0xf4>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e002      	b.n	80016fe <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016fe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001702:	4618      	mov	r0, r3
 8001704:	3738      	adds	r7, #56	@ 0x38
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	431bde83 	.word	0x431bde83
 8001714:	20000668 	.word	0x20000668
 8001718:	20000008 	.word	0x20000008

0800171c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <NMI_Handler+0x4>

08001724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <MemManage_Handler+0x4>

08001734 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <UsageFault_Handler+0x4>

08001744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001758:	4802      	ldr	r0, [pc, #8]	@ (8001764 <TIM2_IRQHandler+0x10>)
 800175a:	f003 f8f3 	bl	8004944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000668 	.word	0x20000668

08001768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001770:	4a14      	ldr	r2, [pc, #80]	@ (80017c4 <_sbrk+0x5c>)
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <_sbrk+0x60>)
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <_sbrk+0x64>)
 8001786:	4a12      	ldr	r2, [pc, #72]	@ (80017d0 <_sbrk+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d207      	bcs.n	80017a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001798:	f009 f800 	bl	800a79c <__errno>
 800179c:	4603      	mov	r3, r0
 800179e:	220c      	movs	r2, #12
 80017a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e009      	b.n	80017bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ae:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <_sbrk+0x64>)
 80017b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20020000 	.word	0x20020000
 80017c8:	00000400 	.word	0x00000400
 80017cc:	200006b0 	.word	0x200006b0
 80017d0:	20013a80 	.word	0x20013a80

080017d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <SystemInit+0x20>)
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017de:	4a05      	ldr	r2, [pc, #20]	@ (80017f4 <SystemInit+0x20>)
 80017e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001830 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017fc:	f7ff ffea 	bl	80017d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001800:	480c      	ldr	r0, [pc, #48]	@ (8001834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001802:	490d      	ldr	r1, [pc, #52]	@ (8001838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001804:	4a0d      	ldr	r2, [pc, #52]	@ (800183c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001808:	e002      	b.n	8001810 <LoopCopyDataInit>

0800180a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800180c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180e:	3304      	adds	r3, #4

08001810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001814:	d3f9      	bcc.n	800180a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001816:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001818:	4c0a      	ldr	r4, [pc, #40]	@ (8001844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800181c:	e001      	b.n	8001822 <LoopFillZerobss>

0800181e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001820:	3204      	adds	r2, #4

08001822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001824:	d3fb      	bcc.n	800181e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001826:	f008 ffbf 	bl	800a7a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182a:	f7fe fecf 	bl	80005cc <main>
  bx  lr    
 800182e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800183c:	0800bb5c 	.word	0x0800bb5c
  ldr r2, =_sbss
 8001840:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001844:	20013a80 	.word	0x20013a80

08001848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC_IRQHandler>
	...

0800184c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001850:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <HAL_Init+0x40>)
 8001856:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800185a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800185c:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0a      	ldr	r2, [pc, #40]	@ (800188c <HAL_Init+0x40>)
 8001862:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a07      	ldr	r2, [pc, #28]	@ (800188c <HAL_Init+0x40>)
 800186e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001874:	2003      	movs	r0, #3
 8001876:	f000 f8fc 	bl	8001a72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187a:	200f      	movs	r0, #15
 800187c:	f7ff fed2 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001880:	f7ff fbc6 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023c00 	.word	0x40023c00

08001890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_IncTick+0x20>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_IncTick+0x24>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <HAL_IncTick+0x24>)
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2000000c 	.word	0x2000000c
 80018b4:	200006b4 	.word	0x200006b4

080018b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <HAL_GetTick+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	200006b4 	.word	0x200006b4

080018d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff ffee 	bl	80018b8 <HAL_GetTick>
 80018dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d005      	beq.n	80018f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <HAL_Delay+0x44>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018f6:	bf00      	nop
 80018f8:	f7ff ffde 	bl	80018b8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	d8f7      	bhi.n	80018f8 <HAL_Delay+0x28>
  {
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2000000c 	.word	0x2000000c

08001918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001934:	4013      	ands	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001940:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194a:	4a04      	ldr	r2, [pc, #16]	@ (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	60d3      	str	r3, [r2, #12]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001964:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <__NVIC_GetPriorityGrouping+0x18>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	f003 0307 	and.w	r3, r3, #7
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	2b00      	cmp	r3, #0
 800198c:	db0b      	blt.n	80019a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	f003 021f 	and.w	r2, r3, #31
 8001994:	4907      	ldr	r1, [pc, #28]	@ (80019b4 <__NVIC_EnableIRQ+0x38>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	2001      	movs	r0, #1
 800199e:	fa00 f202 	lsl.w	r2, r0, r2
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000e100 	.word	0xe000e100

080019b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	6039      	str	r1, [r7, #0]
 80019c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	db0a      	blt.n	80019e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	490c      	ldr	r1, [pc, #48]	@ (8001a04 <__NVIC_SetPriority+0x4c>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	0112      	lsls	r2, r2, #4
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	440b      	add	r3, r1
 80019dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e0:	e00a      	b.n	80019f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4908      	ldr	r1, [pc, #32]	@ (8001a08 <__NVIC_SetPriority+0x50>)
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	3b04      	subs	r3, #4
 80019f0:	0112      	lsls	r2, r2, #4
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	440b      	add	r3, r1
 80019f6:	761a      	strb	r2, [r3, #24]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000e100 	.word	0xe000e100
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	@ 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f1c3 0307 	rsb	r3, r3, #7
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	bf28      	it	cs
 8001a2a:	2304      	movcs	r3, #4
 8001a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3304      	adds	r3, #4
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d902      	bls.n	8001a3c <NVIC_EncodePriority+0x30>
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3b03      	subs	r3, #3
 8001a3a:	e000      	b.n	8001a3e <NVIC_EncodePriority+0x32>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	f04f 32ff 	mov.w	r2, #4294967295
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	401a      	ands	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a54:	f04f 31ff 	mov.w	r1, #4294967295
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	43d9      	mvns	r1, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	4313      	orrs	r3, r2
         );
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3724      	adds	r7, #36	@ 0x24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ff4c 	bl	8001918 <__NVIC_SetPriorityGrouping>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a9a:	f7ff ff61 	bl	8001960 <__NVIC_GetPriorityGrouping>
 8001a9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	6978      	ldr	r0, [r7, #20]
 8001aa6:	f7ff ffb1 	bl	8001a0c <NVIC_EncodePriority>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff80 	bl	80019b8 <__NVIC_SetPriority>
}
 8001ab8:	bf00      	nop
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff54 	bl	800197c <__NVIC_EnableIRQ>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	@ 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	e16b      	b.n	8001dd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af8:	2201      	movs	r2, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	f040 815a 	bne.w	8001dca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d005      	beq.n	8001b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d130      	bne.n	8001b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b64:	2201      	movs	r2, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 0201 	and.w	r2, r3, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d017      	beq.n	8001bcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d123      	bne.n	8001c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	08da      	lsrs	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3208      	adds	r2, #8
 8001be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	220f      	movs	r2, #15
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	08da      	lsrs	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3208      	adds	r2, #8
 8001c1a:	69b9      	ldr	r1, [r7, #24]
 8001c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0203 	and.w	r2, r3, #3
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80b4 	beq.w	8001dca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b60      	ldr	r3, [pc, #384]	@ (8001de8 <HAL_GPIO_Init+0x30c>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	4a5f      	ldr	r2, [pc, #380]	@ (8001de8 <HAL_GPIO_Init+0x30c>)
 8001c6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c72:	4b5d      	ldr	r3, [pc, #372]	@ (8001de8 <HAL_GPIO_Init+0x30c>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c7e:	4a5b      	ldr	r2, [pc, #364]	@ (8001dec <HAL_GPIO_Init+0x310>)
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	3302      	adds	r3, #2
 8001c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	220f      	movs	r2, #15
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a52      	ldr	r2, [pc, #328]	@ (8001df0 <HAL_GPIO_Init+0x314>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d02b      	beq.n	8001d02 <HAL_GPIO_Init+0x226>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a51      	ldr	r2, [pc, #324]	@ (8001df4 <HAL_GPIO_Init+0x318>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d025      	beq.n	8001cfe <HAL_GPIO_Init+0x222>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a50      	ldr	r2, [pc, #320]	@ (8001df8 <HAL_GPIO_Init+0x31c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d01f      	beq.n	8001cfa <HAL_GPIO_Init+0x21e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4f      	ldr	r2, [pc, #316]	@ (8001dfc <HAL_GPIO_Init+0x320>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d019      	beq.n	8001cf6 <HAL_GPIO_Init+0x21a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4e      	ldr	r2, [pc, #312]	@ (8001e00 <HAL_GPIO_Init+0x324>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d013      	beq.n	8001cf2 <HAL_GPIO_Init+0x216>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4d      	ldr	r2, [pc, #308]	@ (8001e04 <HAL_GPIO_Init+0x328>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00d      	beq.n	8001cee <HAL_GPIO_Init+0x212>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4c      	ldr	r2, [pc, #304]	@ (8001e08 <HAL_GPIO_Init+0x32c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d007      	beq.n	8001cea <HAL_GPIO_Init+0x20e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4b      	ldr	r2, [pc, #300]	@ (8001e0c <HAL_GPIO_Init+0x330>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d101      	bne.n	8001ce6 <HAL_GPIO_Init+0x20a>
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	e00e      	b.n	8001d04 <HAL_GPIO_Init+0x228>
 8001ce6:	2308      	movs	r3, #8
 8001ce8:	e00c      	b.n	8001d04 <HAL_GPIO_Init+0x228>
 8001cea:	2306      	movs	r3, #6
 8001cec:	e00a      	b.n	8001d04 <HAL_GPIO_Init+0x228>
 8001cee:	2305      	movs	r3, #5
 8001cf0:	e008      	b.n	8001d04 <HAL_GPIO_Init+0x228>
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_Init+0x228>
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e004      	b.n	8001d04 <HAL_GPIO_Init+0x228>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_Init+0x228>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_GPIO_Init+0x228>
 8001d02:	2300      	movs	r3, #0
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	f002 0203 	and.w	r2, r2, #3
 8001d0a:	0092      	lsls	r2, r2, #2
 8001d0c:	4093      	lsls	r3, r2
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d14:	4935      	ldr	r1, [pc, #212]	@ (8001dec <HAL_GPIO_Init+0x310>)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d22:	4b3b      	ldr	r3, [pc, #236]	@ (8001e10 <HAL_GPIO_Init+0x334>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d46:	4a32      	ldr	r2, [pc, #200]	@ (8001e10 <HAL_GPIO_Init+0x334>)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d4c:	4b30      	ldr	r3, [pc, #192]	@ (8001e10 <HAL_GPIO_Init+0x334>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d70:	4a27      	ldr	r2, [pc, #156]	@ (8001e10 <HAL_GPIO_Init+0x334>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d76:	4b26      	ldr	r3, [pc, #152]	@ (8001e10 <HAL_GPIO_Init+0x334>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001e10 <HAL_GPIO_Init+0x334>)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <HAL_GPIO_Init+0x334>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc4:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <HAL_GPIO_Init+0x334>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	61fb      	str	r3, [r7, #28]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	2b0f      	cmp	r3, #15
 8001dd4:	f67f ae90 	bls.w	8001af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3724      	adds	r7, #36	@ 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40013800 	.word	0x40013800
 8001df0:	40020000 	.word	0x40020000
 8001df4:	40020400 	.word	0x40020400
 8001df8:	40020800 	.word	0x40020800
 8001dfc:	40020c00 	.word	0x40020c00
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40021400 	.word	0x40021400
 8001e08:	40021800 	.word	0x40021800
 8001e0c:	40021c00 	.word	0x40021c00
 8001e10:	40013c00 	.word	0x40013c00

08001e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	807b      	strh	r3, [r7, #2]
 8001e20:	4613      	mov	r3, r2
 8001e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e24:	787b      	ldrb	r3, [r7, #1]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e30:	e003      	b.n	8001e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e32:	887b      	ldrh	r3, [r7, #2]
 8001e34:	041a      	lsls	r2, r3, #16
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	619a      	str	r2, [r3, #24]
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e12b      	b.n	80020b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff f8f6 	bl	8001060 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2224      	movs	r2, #36	@ 0x24
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001eac:	f001 fd7a 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 8001eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4a81      	ldr	r2, [pc, #516]	@ (80020bc <HAL_I2C_Init+0x274>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d807      	bhi.n	8001ecc <HAL_I2C_Init+0x84>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a80      	ldr	r2, [pc, #512]	@ (80020c0 <HAL_I2C_Init+0x278>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	bf94      	ite	ls
 8001ec4:	2301      	movls	r3, #1
 8001ec6:	2300      	movhi	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	e006      	b.n	8001eda <HAL_I2C_Init+0x92>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4a7d      	ldr	r2, [pc, #500]	@ (80020c4 <HAL_I2C_Init+0x27c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	bf94      	ite	ls
 8001ed4:	2301      	movls	r3, #1
 8001ed6:	2300      	movhi	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0e7      	b.n	80020b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4a78      	ldr	r2, [pc, #480]	@ (80020c8 <HAL_I2C_Init+0x280>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	0c9b      	lsrs	r3, r3, #18
 8001eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a6a      	ldr	r2, [pc, #424]	@ (80020bc <HAL_I2C_Init+0x274>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d802      	bhi.n	8001f1c <HAL_I2C_Init+0xd4>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	e009      	b.n	8001f30 <HAL_I2C_Init+0xe8>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	4a69      	ldr	r2, [pc, #420]	@ (80020cc <HAL_I2C_Init+0x284>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	099b      	lsrs	r3, r3, #6
 8001f2e:	3301      	adds	r3, #1
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f42:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	495c      	ldr	r1, [pc, #368]	@ (80020bc <HAL_I2C_Init+0x274>)
 8001f4c:	428b      	cmp	r3, r1
 8001f4e:	d819      	bhi.n	8001f84 <HAL_I2C_Init+0x13c>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1e59      	subs	r1, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f5e:	1c59      	adds	r1, r3, #1
 8001f60:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f64:	400b      	ands	r3, r1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_I2C_Init+0x138>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1e59      	subs	r1, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7e:	e051      	b.n	8002024 <HAL_I2C_Init+0x1dc>
 8001f80:	2304      	movs	r3, #4
 8001f82:	e04f      	b.n	8002024 <HAL_I2C_Init+0x1dc>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d111      	bne.n	8001fb0 <HAL_I2C_Init+0x168>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1e58      	subs	r0, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	440b      	add	r3, r1
 8001f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf0c      	ite	eq
 8001fa8:	2301      	moveq	r3, #1
 8001faa:	2300      	movne	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	e012      	b.n	8001fd6 <HAL_I2C_Init+0x18e>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1e58      	subs	r0, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6859      	ldr	r1, [r3, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	0099      	lsls	r1, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_Init+0x196>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e022      	b.n	8002024 <HAL_I2C_Init+0x1dc>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10e      	bne.n	8002004 <HAL_I2C_Init+0x1bc>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1e58      	subs	r0, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6859      	ldr	r1, [r3, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	440b      	add	r3, r1
 8001ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002002:	e00f      	b.n	8002024 <HAL_I2C_Init+0x1dc>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1e58      	subs	r0, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	0099      	lsls	r1, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	fbb0 f3f3 	udiv	r3, r0, r3
 800201a:	3301      	adds	r3, #1
 800201c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002020:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	6809      	ldr	r1, [r1, #0]
 8002028:	4313      	orrs	r3, r2
 800202a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69da      	ldr	r2, [r3, #28]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002052:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6911      	ldr	r1, [r2, #16]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68d2      	ldr	r2, [r2, #12]
 800205e:	4311      	orrs	r1, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	430b      	orrs	r3, r1
 8002066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	000186a0 	.word	0x000186a0
 80020c0:	001e847f 	.word	0x001e847f
 80020c4:	003d08ff 	.word	0x003d08ff
 80020c8:	431bde83 	.word	0x431bde83
 80020cc:	10624dd3 	.word	0x10624dd3

080020d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	461a      	mov	r2, r3
 80020dc:	460b      	mov	r3, r1
 80020de:	817b      	strh	r3, [r7, #10]
 80020e0:	4613      	mov	r3, r2
 80020e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020e4:	f7ff fbe8 	bl	80018b8 <HAL_GetTick>
 80020e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b20      	cmp	r3, #32
 80020f4:	f040 80e0 	bne.w	80022b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2319      	movs	r3, #25
 80020fe:	2201      	movs	r2, #1
 8002100:	4970      	ldr	r1, [pc, #448]	@ (80022c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f964 	bl	80023d0 <I2C_WaitOnFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800210e:	2302      	movs	r3, #2
 8002110:	e0d3      	b.n	80022ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_I2C_Master_Transmit+0x50>
 800211c:	2302      	movs	r3, #2
 800211e:	e0cc      	b.n	80022ba <HAL_I2C_Master_Transmit+0x1ea>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b01      	cmp	r3, #1
 8002134:	d007      	beq.n	8002146 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0201 	orr.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002154:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2221      	movs	r2, #33	@ 0x21
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2210      	movs	r2, #16
 8002162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	893a      	ldrh	r2, [r7, #8]
 8002176:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4a50      	ldr	r2, [pc, #320]	@ (80022c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002186:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002188:	8979      	ldrh	r1, [r7, #10]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	6a3a      	ldr	r2, [r7, #32]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f89c 	bl	80022cc <I2C_MasterRequestWrite>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e08d      	b.n	80022ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021b4:	e066      	b.n	8002284 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	6a39      	ldr	r1, [r7, #32]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 fa22 	bl	8002604 <I2C_WaitOnTXEFlagUntilTimeout>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00d      	beq.n	80021e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d107      	bne.n	80021de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e06b      	b.n	80022ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b04      	cmp	r3, #4
 800221e:	d11b      	bne.n	8002258 <HAL_I2C_Master_Transmit+0x188>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002224:	2b00      	cmp	r3, #0
 8002226:	d017      	beq.n	8002258 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222c:	781a      	ldrb	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	6a39      	ldr	r1, [r7, #32]
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 fa19 	bl	8002694 <I2C_WaitOnBTFFlagUntilTimeout>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00d      	beq.n	8002284 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226c:	2b04      	cmp	r3, #4
 800226e:	d107      	bne.n	8002280 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800227e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e01a      	b.n	80022ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002288:	2b00      	cmp	r3, #0
 800228a:	d194      	bne.n	80021b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800229a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e000      	b.n	80022ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022b8:	2302      	movs	r3, #2
  }
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	00100002 	.word	0x00100002
 80022c8:	ffff0000 	.word	0xffff0000

080022cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	460b      	mov	r3, r1
 80022da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d006      	beq.n	80022f6 <I2C_MasterRequestWrite+0x2a>
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d003      	beq.n	80022f6 <I2C_MasterRequestWrite+0x2a>
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022f4:	d108      	bne.n	8002308 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	e00b      	b.n	8002320 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230c:	2b12      	cmp	r3, #18
 800230e:	d107      	bne.n	8002320 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800231e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 f84f 	bl	80023d0 <I2C_WaitOnFlagUntilTimeout>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00d      	beq.n	8002354 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002346:	d103      	bne.n	8002350 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800234e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e035      	b.n	80023c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800235c:	d108      	bne.n	8002370 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800235e:	897b      	ldrh	r3, [r7, #10]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800236c:	611a      	str	r2, [r3, #16]
 800236e:	e01b      	b.n	80023a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002370:	897b      	ldrh	r3, [r7, #10]
 8002372:	11db      	asrs	r3, r3, #7
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f003 0306 	and.w	r3, r3, #6
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f063 030f 	orn	r3, r3, #15
 8002380:	b2da      	uxtb	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	490e      	ldr	r1, [pc, #56]	@ (80023c8 <I2C_MasterRequestWrite+0xfc>)
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f898 	bl	80024c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e010      	b.n	80023c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800239e:	897b      	ldrh	r3, [r7, #10]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4907      	ldr	r1, [pc, #28]	@ (80023cc <I2C_MasterRequestWrite+0x100>)
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f888 	bl	80024c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	00010008 	.word	0x00010008
 80023cc:	00010002 	.word	0x00010002

080023d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023e0:	e048      	b.n	8002474 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d044      	beq.n	8002474 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ea:	f7ff fa65 	bl	80018b8 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d302      	bcc.n	8002400 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d139      	bne.n	8002474 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	0c1b      	lsrs	r3, r3, #16
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d10d      	bne.n	8002426 <I2C_WaitOnFlagUntilTimeout+0x56>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	43da      	mvns	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	4013      	ands	r3, r2
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf0c      	ite	eq
 800241c:	2301      	moveq	r3, #1
 800241e:	2300      	movne	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	e00c      	b.n	8002440 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	43da      	mvns	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	4013      	ands	r3, r2
 8002432:	b29b      	uxth	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf0c      	ite	eq
 8002438:	2301      	moveq	r3, #1
 800243a:	2300      	movne	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	429a      	cmp	r2, r3
 8002444:	d116      	bne.n	8002474 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002460:	f043 0220 	orr.w	r2, r3, #32
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e023      	b.n	80024bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	0c1b      	lsrs	r3, r3, #16
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d10d      	bne.n	800249a <I2C_WaitOnFlagUntilTimeout+0xca>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	43da      	mvns	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	4013      	ands	r3, r2
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	e00c      	b.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	43da      	mvns	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4013      	ands	r3, r2
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	bf0c      	ite	eq
 80024ac:	2301      	moveq	r3, #1
 80024ae:	2300      	movne	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d093      	beq.n	80023e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024d2:	e071      	b.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024e2:	d123      	bne.n	800252c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	f043 0204 	orr.w	r2, r3, #4
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e067      	b.n	80025fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002532:	d041      	beq.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002534:	f7ff f9c0 	bl	80018b8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	429a      	cmp	r2, r3
 8002542:	d302      	bcc.n	800254a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d136      	bne.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d10c      	bne.n	800256e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4013      	ands	r3, r2
 8002560:	b29b      	uxth	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	bf14      	ite	ne
 8002566:	2301      	movne	r3, #1
 8002568:	2300      	moveq	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	e00b      	b.n	8002586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	43da      	mvns	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	4013      	ands	r3, r2
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf14      	ite	ne
 8002580:	2301      	movne	r3, #1
 8002582:	2300      	moveq	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d016      	beq.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	f043 0220 	orr.w	r2, r3, #32
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e021      	b.n	80025fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	0c1b      	lsrs	r3, r3, #16
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d10c      	bne.n	80025dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	43da      	mvns	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	4013      	ands	r3, r2
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf14      	ite	ne
 80025d4:	2301      	movne	r3, #1
 80025d6:	2300      	moveq	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	e00b      	b.n	80025f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	43da      	mvns	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	4013      	ands	r3, r2
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bf14      	ite	ne
 80025ee:	2301      	movne	r3, #1
 80025f0:	2300      	moveq	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f47f af6d 	bne.w	80024d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002610:	e034      	b.n	800267c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f886 	bl	8002724 <I2C_IsAcknowledgeFailed>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e034      	b.n	800268c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d028      	beq.n	800267c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262a:	f7ff f945 	bl	80018b8 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d11d      	bne.n	800267c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264a:	2b80      	cmp	r3, #128	@ 0x80
 800264c:	d016      	beq.n	800267c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	f043 0220 	orr.w	r2, r3, #32
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e007      	b.n	800268c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002686:	2b80      	cmp	r3, #128	@ 0x80
 8002688:	d1c3      	bne.n	8002612 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026a0:	e034      	b.n	800270c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 f83e 	bl	8002724 <I2C_IsAcknowledgeFailed>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e034      	b.n	800271c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d028      	beq.n	800270c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ba:	f7ff f8fd 	bl	80018b8 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d302      	bcc.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d11d      	bne.n	800270c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d016      	beq.n	800270c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	f043 0220 	orr.w	r2, r3, #32
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e007      	b.n	800271c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b04      	cmp	r3, #4
 8002718:	d1c3      	bne.n	80026a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800273a:	d11b      	bne.n	8002774 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002744:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	f043 0204 	orr.w	r2, r3, #4
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e128      	b.n	80029e8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a90      	ldr	r2, [pc, #576]	@ (80029f0 <HAL_I2S_Init+0x26c>)
 80027ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7fe fcd3 	bl	800115c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80027cc:	f023 030f 	bic.w	r3, r3, #15
 80027d0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2202      	movs	r2, #2
 80027d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d060      	beq.n	80028a4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d102      	bne.n	80027f0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80027ea:	2310      	movs	r3, #16
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e001      	b.n	80027f4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80027f0:	2320      	movs	r3, #32
 80027f2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d802      	bhi.n	8002802 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002802:	2001      	movs	r0, #1
 8002804:	f001 fa0a 	bl	8003c1c <HAL_RCCEx_GetPeriphCLKFreq>
 8002808:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002812:	d125      	bne.n	8002860 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d010      	beq.n	800283e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	fbb2 f2f3 	udiv	r2, r2, r3
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	461a      	mov	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	3305      	adds	r3, #5
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	e01f      	b.n	800287e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	fbb2 f2f3 	udiv	r2, r2, r3
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	461a      	mov	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	fbb2 f3f3 	udiv	r3, r2, r3
 800285a:	3305      	adds	r3, #5
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	e00e      	b.n	800287e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	fbb2 f2f3 	udiv	r2, r2, r3
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	461a      	mov	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	fbb2 f3f3 	udiv	r3, r2, r3
 800287a:	3305      	adds	r3, #5
 800287c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4a5c      	ldr	r2, [pc, #368]	@ (80029f4 <HAL_I2S_Init+0x270>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	08db      	lsrs	r3, r3, #3
 8002888:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	e003      	b.n	80028ac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80028a4:	2302      	movs	r3, #2
 80028a6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d902      	bls.n	80028b8 <HAL_I2S_Init+0x134>
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	2bff      	cmp	r3, #255	@ 0xff
 80028b6:	d907      	bls.n	80028c8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028bc:	f043 0210 	orr.w	r2, r3, #16
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e08f      	b.n	80029e8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	ea42 0103 	orr.w	r1, r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	430a      	orrs	r2, r1
 80028da:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80028e6:	f023 030f 	bic.w	r3, r3, #15
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6851      	ldr	r1, [r2, #4]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6892      	ldr	r2, [r2, #8]
 80028f2:	4311      	orrs	r1, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	68d2      	ldr	r2, [r2, #12]
 80028f8:	4311      	orrs	r1, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6992      	ldr	r2, [r2, #24]
 80028fe:	430a      	orrs	r2, r1
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800290a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d161      	bne.n	80029d8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a38      	ldr	r2, [pc, #224]	@ (80029f8 <HAL_I2S_Init+0x274>)
 8002918:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a37      	ldr	r2, [pc, #220]	@ (80029fc <HAL_I2S_Init+0x278>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d101      	bne.n	8002928 <HAL_I2S_Init+0x1a4>
 8002924:	4b36      	ldr	r3, [pc, #216]	@ (8002a00 <HAL_I2S_Init+0x27c>)
 8002926:	e001      	b.n	800292c <HAL_I2S_Init+0x1a8>
 8002928:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	4932      	ldr	r1, [pc, #200]	@ (80029fc <HAL_I2S_Init+0x278>)
 8002934:	428a      	cmp	r2, r1
 8002936:	d101      	bne.n	800293c <HAL_I2S_Init+0x1b8>
 8002938:	4a31      	ldr	r2, [pc, #196]	@ (8002a00 <HAL_I2S_Init+0x27c>)
 800293a:	e001      	b.n	8002940 <HAL_I2S_Init+0x1bc>
 800293c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002940:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002944:	f023 030f 	bic.w	r3, r3, #15
 8002948:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a2b      	ldr	r2, [pc, #172]	@ (80029fc <HAL_I2S_Init+0x278>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d101      	bne.n	8002958 <HAL_I2S_Init+0x1d4>
 8002954:	4b2a      	ldr	r3, [pc, #168]	@ (8002a00 <HAL_I2S_Init+0x27c>)
 8002956:	e001      	b.n	800295c <HAL_I2S_Init+0x1d8>
 8002958:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800295c:	2202      	movs	r2, #2
 800295e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a25      	ldr	r2, [pc, #148]	@ (80029fc <HAL_I2S_Init+0x278>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d101      	bne.n	800296e <HAL_I2S_Init+0x1ea>
 800296a:	4b25      	ldr	r3, [pc, #148]	@ (8002a00 <HAL_I2S_Init+0x27c>)
 800296c:	e001      	b.n	8002972 <HAL_I2S_Init+0x1ee>
 800296e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800297e:	d003      	beq.n	8002988 <HAL_I2S_Init+0x204>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d103      	bne.n	8002990 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002988:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	e001      	b.n	8002994 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002990:	2300      	movs	r3, #0
 8002992:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800299e:	4313      	orrs	r3, r2
 80029a0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80029a8:	4313      	orrs	r3, r2
 80029aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80029b2:	4313      	orrs	r3, r2
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	897b      	ldrh	r3, [r7, #10]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029c0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a0d      	ldr	r2, [pc, #52]	@ (80029fc <HAL_I2S_Init+0x278>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d101      	bne.n	80029d0 <HAL_I2S_Init+0x24c>
 80029cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a00 <HAL_I2S_Init+0x27c>)
 80029ce:	e001      	b.n	80029d4 <HAL_I2S_Init+0x250>
 80029d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029d4:	897a      	ldrh	r2, [r7, #10]
 80029d6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	08002afb 	.word	0x08002afb
 80029f4:	cccccccd 	.word	0xcccccccd
 80029f8:	08002c11 	.word	0x08002c11
 80029fc:	40003800 	.word	0x40003800
 8002a00:	40003400 	.word	0x40003400

08002a04 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	881a      	ldrh	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a58:	1c9a      	adds	r2, r3, #2
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10e      	bne.n	8002a94 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a84:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff ffb8 	bl	8002a04 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aae:	b292      	uxth	r2, r2
 8002ab0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	1c9a      	adds	r2, r3, #2
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10e      	bne.n	8002af2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ae2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ff93 	bl	8002a18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b086      	sub	sp, #24
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d13a      	bne.n	8002b8c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d109      	bne.n	8002b34 <I2S_IRQHandler+0x3a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2a:	2b40      	cmp	r3, #64	@ 0x40
 8002b2c:	d102      	bne.n	8002b34 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff ffb4 	bl	8002a9c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3a:	2b40      	cmp	r3, #64	@ 0x40
 8002b3c:	d126      	bne.n	8002b8c <I2S_IRQHandler+0x92>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d11f      	bne.n	8002b8c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b5a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	f043 0202 	orr.w	r2, r3, #2
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff ff50 	bl	8002a2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d136      	bne.n	8002c06 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d109      	bne.n	8002bb6 <I2S_IRQHandler+0xbc>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bac:	2b80      	cmp	r3, #128	@ 0x80
 8002bae:	d102      	bne.n	8002bb6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff ff45 	bl	8002a40 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d122      	bne.n	8002c06 <I2S_IRQHandler+0x10c>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d11b      	bne.n	8002c06 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002bdc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf8:	f043 0204 	orr.w	r2, r3, #4
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ff13 	bl	8002a2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c06:	bf00      	nop
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a92      	ldr	r2, [pc, #584]	@ (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d101      	bne.n	8002c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002c2a:	4b92      	ldr	r3, [pc, #584]	@ (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c2c:	e001      	b.n	8002c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002c2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a8b      	ldr	r2, [pc, #556]	@ (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d101      	bne.n	8002c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c48:	4b8a      	ldr	r3, [pc, #552]	@ (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c4a:	e001      	b.n	8002c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c5c:	d004      	beq.n	8002c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f040 8099 	bne.w	8002d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d107      	bne.n	8002c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f925 	bl	8002ecc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d107      	bne.n	8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f9c8 	bl	800302c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca2:	2b40      	cmp	r3, #64	@ 0x40
 8002ca4:	d13a      	bne.n	8002d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d035      	beq.n	8002d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a6e      	ldr	r2, [pc, #440]	@ (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d101      	bne.n	8002cbe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002cba:	4b6e      	ldr	r3, [pc, #440]	@ (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cbc:	e001      	b.n	8002cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002cbe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4969      	ldr	r1, [pc, #420]	@ (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cca:	428b      	cmp	r3, r1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002cce:	4b69      	ldr	r3, [pc, #420]	@ (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cd0:	e001      	b.n	8002cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002cd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cd6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002cda:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002cea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0e:	f043 0202 	orr.w	r2, r3, #2
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff fe88 	bl	8002a2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	f040 80c3 	bne.w	8002eae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 80bd 	beq.w	8002eae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a49      	ldr	r2, [pc, #292]	@ (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d4e:	4b49      	ldr	r3, [pc, #292]	@ (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d50:	e001      	b.n	8002d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4944      	ldr	r1, [pc, #272]	@ (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d5e:	428b      	cmp	r3, r1
 8002d60:	d101      	bne.n	8002d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d62:	4b44      	ldr	r3, [pc, #272]	@ (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d64:	e001      	b.n	8002d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	f043 0204 	orr.w	r2, r3, #4
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff fe4a 	bl	8002a2c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d98:	e089      	b.n	8002eae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d107      	bne.n	8002db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f8be 	bl	8002f30 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d107      	bne.n	8002dce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f8fd 	bl	8002fc8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd4:	2b40      	cmp	r3, #64	@ 0x40
 8002dd6:	d12f      	bne.n	8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d02a      	beq.n	8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002df0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a1e      	ldr	r2, [pc, #120]	@ (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d101      	bne.n	8002e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dfe:	e001      	b.n	8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002e00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4919      	ldr	r1, [pc, #100]	@ (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e0c:	428b      	cmp	r3, r1
 8002e0e:	d101      	bne.n	8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002e10:	4b18      	ldr	r3, [pc, #96]	@ (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e12:	e001      	b.n	8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002e14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e18:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2a:	f043 0202 	orr.w	r2, r3, #2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff fdfa 	bl	8002a2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d136      	bne.n	8002eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d031      	beq.n	8002eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a07      	ldr	r2, [pc, #28]	@ (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d101      	bne.n	8002e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002e56:	4b07      	ldr	r3, [pc, #28]	@ (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e58:	e001      	b.n	8002e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002e5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4902      	ldr	r1, [pc, #8]	@ (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e66:	428b      	cmp	r3, r1
 8002e68:	d106      	bne.n	8002e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002e6a:	4b02      	ldr	r3, [pc, #8]	@ (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e6c:	e006      	b.n	8002e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002e6e:	bf00      	nop
 8002e70:	40003800 	.word	0x40003800
 8002e74:	40003400 	.word	0x40003400
 8002e78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e80:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e90:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	f043 0204 	orr.w	r2, r3, #4
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff fdc0 	bl	8002a2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002eac:	e000      	b.n	8002eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002eae:	bf00      	nop
}
 8002eb0:	bf00      	nop
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	1c99      	adds	r1, r3, #2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6251      	str	r1, [r2, #36]	@ 0x24
 8002ede:	881a      	ldrh	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d113      	bne.n	8002f26 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002f0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d106      	bne.n	8002f26 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ffc9 	bl	8002eb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	1c99      	adds	r1, r3, #2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6251      	str	r1, [r2, #36]	@ 0x24
 8002f42:	8819      	ldrh	r1, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc0 <I2SEx_TxISR_I2SExt+0x90>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <I2SEx_TxISR_I2SExt+0x22>
 8002f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc4 <I2SEx_TxISR_I2SExt+0x94>)
 8002f50:	e001      	b.n	8002f56 <I2SEx_TxISR_I2SExt+0x26>
 8002f52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f56:	460a      	mov	r2, r1
 8002f58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d121      	bne.n	8002fb6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a12      	ldr	r2, [pc, #72]	@ (8002fc0 <I2SEx_TxISR_I2SExt+0x90>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d101      	bne.n	8002f80 <I2SEx_TxISR_I2SExt+0x50>
 8002f7c:	4b11      	ldr	r3, [pc, #68]	@ (8002fc4 <I2SEx_TxISR_I2SExt+0x94>)
 8002f7e:	e001      	b.n	8002f84 <I2SEx_TxISR_I2SExt+0x54>
 8002f80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	490d      	ldr	r1, [pc, #52]	@ (8002fc0 <I2SEx_TxISR_I2SExt+0x90>)
 8002f8c:	428b      	cmp	r3, r1
 8002f8e:	d101      	bne.n	8002f94 <I2SEx_TxISR_I2SExt+0x64>
 8002f90:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc4 <I2SEx_TxISR_I2SExt+0x94>)
 8002f92:	e001      	b.n	8002f98 <I2SEx_TxISR_I2SExt+0x68>
 8002f94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f98:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002f9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d106      	bne.n	8002fb6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff ff81 	bl	8002eb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40003800 	.word	0x40003800
 8002fc4:	40003400 	.word	0x40003400

08002fc8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68d8      	ldr	r0, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fda:	1c99      	adds	r1, r3, #2
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002fe0:	b282      	uxth	r2, r0
 8002fe2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d113      	bne.n	8003024 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800300a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff ff4a 	bl	8002eb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a20      	ldr	r2, [pc, #128]	@ (80030bc <I2SEx_RxISR_I2SExt+0x90>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <I2SEx_RxISR_I2SExt+0x16>
 800303e:	4b20      	ldr	r3, [pc, #128]	@ (80030c0 <I2SEx_RxISR_I2SExt+0x94>)
 8003040:	e001      	b.n	8003046 <I2SEx_RxISR_I2SExt+0x1a>
 8003042:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003046:	68d8      	ldr	r0, [r3, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	1c99      	adds	r1, r3, #2
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003052:	b282      	uxth	r2, r0
 8003054:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d121      	bne.n	80030b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a12      	ldr	r2, [pc, #72]	@ (80030bc <I2SEx_RxISR_I2SExt+0x90>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d101      	bne.n	800307c <I2SEx_RxISR_I2SExt+0x50>
 8003078:	4b11      	ldr	r3, [pc, #68]	@ (80030c0 <I2SEx_RxISR_I2SExt+0x94>)
 800307a:	e001      	b.n	8003080 <I2SEx_RxISR_I2SExt+0x54>
 800307c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	490d      	ldr	r1, [pc, #52]	@ (80030bc <I2SEx_RxISR_I2SExt+0x90>)
 8003088:	428b      	cmp	r3, r1
 800308a:	d101      	bne.n	8003090 <I2SEx_RxISR_I2SExt+0x64>
 800308c:	4b0c      	ldr	r3, [pc, #48]	@ (80030c0 <I2SEx_RxISR_I2SExt+0x94>)
 800308e:	e001      	b.n	8003094 <I2SEx_RxISR_I2SExt+0x68>
 8003090:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003094:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003098:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d106      	bne.n	80030b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff ff03 	bl	8002eb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40003800 	.word	0x40003800
 80030c0:	40003400 	.word	0x40003400

080030c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e267      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d075      	beq.n	80031ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030e2:	4b88      	ldr	r3, [pc, #544]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d00c      	beq.n	8003108 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ee:	4b85      	ldr	r3, [pc, #532]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d112      	bne.n	8003120 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fa:	4b82      	ldr	r3, [pc, #520]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003106:	d10b      	bne.n	8003120 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	4b7e      	ldr	r3, [pc, #504]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d05b      	beq.n	80031cc <HAL_RCC_OscConfig+0x108>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d157      	bne.n	80031cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e242      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003128:	d106      	bne.n	8003138 <HAL_RCC_OscConfig+0x74>
 800312a:	4b76      	ldr	r3, [pc, #472]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a75      	ldr	r2, [pc, #468]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e01d      	b.n	8003174 <HAL_RCC_OscConfig+0xb0>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003140:	d10c      	bne.n	800315c <HAL_RCC_OscConfig+0x98>
 8003142:	4b70      	ldr	r3, [pc, #448]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a6f      	ldr	r2, [pc, #444]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	4b6d      	ldr	r3, [pc, #436]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a6c      	ldr	r2, [pc, #432]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e00b      	b.n	8003174 <HAL_RCC_OscConfig+0xb0>
 800315c:	4b69      	ldr	r3, [pc, #420]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a68      	ldr	r2, [pc, #416]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	4b66      	ldr	r3, [pc, #408]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a65      	ldr	r2, [pc, #404]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 800316e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d013      	beq.n	80031a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fe fb9c 	bl	80018b8 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003184:	f7fe fb98 	bl	80018b8 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	@ 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e207      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	4b5b      	ldr	r3, [pc, #364]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0xc0>
 80031a2:	e014      	b.n	80031ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fe fb88 	bl	80018b8 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ac:	f7fe fb84 	bl	80018b8 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b64      	cmp	r3, #100	@ 0x64
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e1f3      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031be:	4b51      	ldr	r3, [pc, #324]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0xe8>
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d063      	beq.n	80032a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031da:	4b4a      	ldr	r3, [pc, #296]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00b      	beq.n	80031fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031e6:	4b47      	ldr	r3, [pc, #284]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d11c      	bne.n	800322c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f2:	4b44      	ldr	r3, [pc, #272]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d116      	bne.n	800322c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fe:	4b41      	ldr	r3, [pc, #260]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d005      	beq.n	8003216 <HAL_RCC_OscConfig+0x152>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d001      	beq.n	8003216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e1c7      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003216:	4b3b      	ldr	r3, [pc, #236]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4937      	ldr	r1, [pc, #220]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322a:	e03a      	b.n	80032a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d020      	beq.n	8003276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003234:	4b34      	ldr	r3, [pc, #208]	@ (8003308 <HAL_RCC_OscConfig+0x244>)
 8003236:	2201      	movs	r2, #1
 8003238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323a:	f7fe fb3d 	bl	80018b8 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003242:	f7fe fb39 	bl	80018b8 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e1a8      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003254:	4b2b      	ldr	r3, [pc, #172]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003260:	4b28      	ldr	r3, [pc, #160]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4925      	ldr	r1, [pc, #148]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003270:	4313      	orrs	r3, r2
 8003272:	600b      	str	r3, [r1, #0]
 8003274:	e015      	b.n	80032a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003276:	4b24      	ldr	r3, [pc, #144]	@ (8003308 <HAL_RCC_OscConfig+0x244>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fe fb1c 	bl	80018b8 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003284:	f7fe fb18 	bl	80018b8 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e187      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003296:	4b1b      	ldr	r3, [pc, #108]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d036      	beq.n	800331c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d016      	beq.n	80032e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032b6:	4b15      	ldr	r3, [pc, #84]	@ (800330c <HAL_RCC_OscConfig+0x248>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032bc:	f7fe fafc 	bl	80018b8 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c4:	f7fe faf8 	bl	80018b8 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e167      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 80032d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x200>
 80032e2:	e01b      	b.n	800331c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e4:	4b09      	ldr	r3, [pc, #36]	@ (800330c <HAL_RCC_OscConfig+0x248>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ea:	f7fe fae5 	bl	80018b8 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	e00e      	b.n	8003310 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f2:	f7fe fae1 	bl	80018b8 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d907      	bls.n	8003310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e150      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
 8003304:	40023800 	.word	0x40023800
 8003308:	42470000 	.word	0x42470000
 800330c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003310:	4b88      	ldr	r3, [pc, #544]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 8003312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1ea      	bne.n	80032f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8097 	beq.w	8003458 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332a:	2300      	movs	r3, #0
 800332c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800332e:	4b81      	ldr	r3, [pc, #516]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10f      	bne.n	800335a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	4b7d      	ldr	r3, [pc, #500]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	4a7c      	ldr	r2, [pc, #496]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 8003344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003348:	6413      	str	r3, [r2, #64]	@ 0x40
 800334a:	4b7a      	ldr	r3, [pc, #488]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003356:	2301      	movs	r3, #1
 8003358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335a:	4b77      	ldr	r3, [pc, #476]	@ (8003538 <HAL_RCC_OscConfig+0x474>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d118      	bne.n	8003398 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003366:	4b74      	ldr	r3, [pc, #464]	@ (8003538 <HAL_RCC_OscConfig+0x474>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a73      	ldr	r2, [pc, #460]	@ (8003538 <HAL_RCC_OscConfig+0x474>)
 800336c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003372:	f7fe faa1 	bl	80018b8 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337a:	f7fe fa9d 	bl	80018b8 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e10c      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338c:	4b6a      	ldr	r3, [pc, #424]	@ (8003538 <HAL_RCC_OscConfig+0x474>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d106      	bne.n	80033ae <HAL_RCC_OscConfig+0x2ea>
 80033a0:	4b64      	ldr	r3, [pc, #400]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a4:	4a63      	ldr	r2, [pc, #396]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ac:	e01c      	b.n	80033e8 <HAL_RCC_OscConfig+0x324>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x30c>
 80033b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ba:	4a5e      	ldr	r2, [pc, #376]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ce:	e00b      	b.n	80033e8 <HAL_RCC_OscConfig+0x324>
 80033d0:	4b58      	ldr	r3, [pc, #352]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d4:	4a57      	ldr	r2, [pc, #348]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033d6:	f023 0301 	bic.w	r3, r3, #1
 80033da:	6713      	str	r3, [r2, #112]	@ 0x70
 80033dc:	4b55      	ldr	r3, [pc, #340]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e0:	4a54      	ldr	r2, [pc, #336]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033e2:	f023 0304 	bic.w	r3, r3, #4
 80033e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d015      	beq.n	800341c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f0:	f7fe fa62 	bl	80018b8 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f6:	e00a      	b.n	800340e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f8:	f7fe fa5e 	bl	80018b8 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e0cb      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340e:	4b49      	ldr	r3, [pc, #292]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0ee      	beq.n	80033f8 <HAL_RCC_OscConfig+0x334>
 800341a:	e014      	b.n	8003446 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341c:	f7fe fa4c 	bl	80018b8 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003422:	e00a      	b.n	800343a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003424:	f7fe fa48 	bl	80018b8 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e0b5      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343a:	4b3e      	ldr	r3, [pc, #248]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1ee      	bne.n	8003424 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003446:	7dfb      	ldrb	r3, [r7, #23]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d105      	bne.n	8003458 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344c:	4b39      	ldr	r3, [pc, #228]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	4a38      	ldr	r2, [pc, #224]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 8003452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003456:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80a1 	beq.w	80035a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003462:	4b34      	ldr	r3, [pc, #208]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b08      	cmp	r3, #8
 800346c:	d05c      	beq.n	8003528 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d141      	bne.n	80034fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003476:	4b31      	ldr	r3, [pc, #196]	@ (800353c <HAL_RCC_OscConfig+0x478>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fe fa1c 	bl	80018b8 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003484:	f7fe fa18 	bl	80018b8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e087      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	4b27      	ldr	r3, [pc, #156]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b0:	019b      	lsls	r3, r3, #6
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b8:	085b      	lsrs	r3, r3, #1
 80034ba:	3b01      	subs	r3, #1
 80034bc:	041b      	lsls	r3, r3, #16
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c4:	061b      	lsls	r3, r3, #24
 80034c6:	491b      	ldr	r1, [pc, #108]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034cc:	4b1b      	ldr	r3, [pc, #108]	@ (800353c <HAL_RCC_OscConfig+0x478>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fe f9f1 	bl	80018b8 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034da:	f7fe f9ed 	bl	80018b8 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e05c      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ec:	4b11      	ldr	r3, [pc, #68]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x416>
 80034f8:	e054      	b.n	80035a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	4b10      	ldr	r3, [pc, #64]	@ (800353c <HAL_RCC_OscConfig+0x478>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7fe f9da 	bl	80018b8 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003508:	f7fe f9d6 	bl	80018b8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e045      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x444>
 8003526:	e03d      	b.n	80035a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d107      	bne.n	8003540 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e038      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
 8003534:	40023800 	.word	0x40023800
 8003538:	40007000 	.word	0x40007000
 800353c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003540:	4b1b      	ldr	r3, [pc, #108]	@ (80035b0 <HAL_RCC_OscConfig+0x4ec>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d028      	beq.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d121      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d11a      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003570:	4013      	ands	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003578:	4293      	cmp	r3, r2
 800357a:	d111      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003586:	085b      	lsrs	r3, r3, #1
 8003588:	3b01      	subs	r3, #1
 800358a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d107      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800

080035b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0cc      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c8:	4b68      	ldr	r3, [pc, #416]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d90c      	bls.n	80035f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b65      	ldr	r3, [pc, #404]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b63      	ldr	r3, [pc, #396]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0b8      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d020      	beq.n	800363e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003608:	4b59      	ldr	r3, [pc, #356]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4a58      	ldr	r2, [pc, #352]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003612:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003620:	4b53      	ldr	r3, [pc, #332]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a52      	ldr	r2, [pc, #328]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800362a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800362c:	4b50      	ldr	r3, [pc, #320]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	494d      	ldr	r1, [pc, #308]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d044      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b47      	ldr	r3, [pc, #284]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d119      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e07f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d003      	beq.n	8003672 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800366e:	2b03      	cmp	r3, #3
 8003670:	d107      	bne.n	8003682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003672:	4b3f      	ldr	r3, [pc, #252]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e06f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003682:	4b3b      	ldr	r3, [pc, #236]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e067      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003692:	4b37      	ldr	r3, [pc, #220]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f023 0203 	bic.w	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4934      	ldr	r1, [pc, #208]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a4:	f7fe f908 	bl	80018b8 <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ac:	f7fe f904 	bl	80018b8 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e04f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 020c 	and.w	r2, r3, #12
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d1eb      	bne.n	80036ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d4:	4b25      	ldr	r3, [pc, #148]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d20c      	bcs.n	80036fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b22      	ldr	r3, [pc, #136]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b20      	ldr	r3, [pc, #128]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e032      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003708:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4916      	ldr	r1, [pc, #88]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003726:	4b12      	ldr	r3, [pc, #72]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	490e      	ldr	r1, [pc, #56]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800373a:	f000 f821 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 800373e:	4602      	mov	r2, r0
 8003740:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	490a      	ldr	r1, [pc, #40]	@ (8003774 <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	5ccb      	ldrb	r3, [r1, r3]
 800374e:	fa22 f303 	lsr.w	r3, r2, r3
 8003752:	4a09      	ldr	r2, [pc, #36]	@ (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003756:	4b09      	ldr	r3, [pc, #36]	@ (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fd ff62 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40023c00 	.word	0x40023c00
 8003770:	40023800 	.word	0x40023800
 8003774:	0800b9b8 	.word	0x0800b9b8
 8003778:	20000004 	.word	0x20000004
 800377c:	20000008 	.word	0x20000008

08003780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003784:	b094      	sub	sp, #80	@ 0x50
 8003786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003798:	4b79      	ldr	r3, [pc, #484]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x200>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d00d      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x40>
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	f200 80e1 	bhi.w	800396c <HAL_RCC_GetSysClockFreq+0x1ec>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x34>
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d003      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x3a>
 80037b2:	e0db      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037b4:	4b73      	ldr	r3, [pc, #460]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x204>)
 80037b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037b8:	e0db      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ba:	4b73      	ldr	r3, [pc, #460]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x208>)
 80037bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037be:	e0d8      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x200>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d063      	beq.n	800389e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	099b      	lsrs	r3, r3, #6
 80037dc:	2200      	movs	r2, #0
 80037de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80037ea:	2300      	movs	r3, #0
 80037ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80037ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037f2:	4622      	mov	r2, r4
 80037f4:	462b      	mov	r3, r5
 80037f6:	f04f 0000 	mov.w	r0, #0
 80037fa:	f04f 0100 	mov.w	r1, #0
 80037fe:	0159      	lsls	r1, r3, #5
 8003800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003804:	0150      	lsls	r0, r2, #5
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4621      	mov	r1, r4
 800380c:	1a51      	subs	r1, r2, r1
 800380e:	6139      	str	r1, [r7, #16]
 8003810:	4629      	mov	r1, r5
 8003812:	eb63 0301 	sbc.w	r3, r3, r1
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003824:	4659      	mov	r1, fp
 8003826:	018b      	lsls	r3, r1, #6
 8003828:	4651      	mov	r1, sl
 800382a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800382e:	4651      	mov	r1, sl
 8003830:	018a      	lsls	r2, r1, #6
 8003832:	4651      	mov	r1, sl
 8003834:	ebb2 0801 	subs.w	r8, r2, r1
 8003838:	4659      	mov	r1, fp
 800383a:	eb63 0901 	sbc.w	r9, r3, r1
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800384a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800384e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003852:	4690      	mov	r8, r2
 8003854:	4699      	mov	r9, r3
 8003856:	4623      	mov	r3, r4
 8003858:	eb18 0303 	adds.w	r3, r8, r3
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	462b      	mov	r3, r5
 8003860:	eb49 0303 	adc.w	r3, r9, r3
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003872:	4629      	mov	r1, r5
 8003874:	024b      	lsls	r3, r1, #9
 8003876:	4621      	mov	r1, r4
 8003878:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800387c:	4621      	mov	r1, r4
 800387e:	024a      	lsls	r2, r1, #9
 8003880:	4610      	mov	r0, r2
 8003882:	4619      	mov	r1, r3
 8003884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003886:	2200      	movs	r2, #0
 8003888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800388a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800388c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003890:	f7fc fd06 	bl	80002a0 <__aeabi_uldivmod>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4613      	mov	r3, r2
 800389a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800389c:	e058      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800389e:	4b38      	ldr	r3, [pc, #224]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	099b      	lsrs	r3, r3, #6
 80038a4:	2200      	movs	r2, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	4611      	mov	r1, r2
 80038aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038ae:	623b      	str	r3, [r7, #32]
 80038b0:	2300      	movs	r3, #0
 80038b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038b8:	4642      	mov	r2, r8
 80038ba:	464b      	mov	r3, r9
 80038bc:	f04f 0000 	mov.w	r0, #0
 80038c0:	f04f 0100 	mov.w	r1, #0
 80038c4:	0159      	lsls	r1, r3, #5
 80038c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ca:	0150      	lsls	r0, r2, #5
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4641      	mov	r1, r8
 80038d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80038d6:	4649      	mov	r1, r9
 80038d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038f0:	ebb2 040a 	subs.w	r4, r2, sl
 80038f4:	eb63 050b 	sbc.w	r5, r3, fp
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	00eb      	lsls	r3, r5, #3
 8003902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003906:	00e2      	lsls	r2, r4, #3
 8003908:	4614      	mov	r4, r2
 800390a:	461d      	mov	r5, r3
 800390c:	4643      	mov	r3, r8
 800390e:	18e3      	adds	r3, r4, r3
 8003910:	603b      	str	r3, [r7, #0]
 8003912:	464b      	mov	r3, r9
 8003914:	eb45 0303 	adc.w	r3, r5, r3
 8003918:	607b      	str	r3, [r7, #4]
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003926:	4629      	mov	r1, r5
 8003928:	028b      	lsls	r3, r1, #10
 800392a:	4621      	mov	r1, r4
 800392c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003930:	4621      	mov	r1, r4
 8003932:	028a      	lsls	r2, r1, #10
 8003934:	4610      	mov	r0, r2
 8003936:	4619      	mov	r1, r3
 8003938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800393a:	2200      	movs	r2, #0
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	61fa      	str	r2, [r7, #28]
 8003940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003944:	f7fc fcac 	bl	80002a0 <__aeabi_uldivmod>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4613      	mov	r3, r2
 800394e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003950:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x200>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	0c1b      	lsrs	r3, r3, #16
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	3301      	adds	r3, #1
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003960:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003964:	fbb2 f3f3 	udiv	r3, r2, r3
 8003968:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800396a:	e002      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800396c:	4b05      	ldr	r3, [pc, #20]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x204>)
 800396e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003974:	4618      	mov	r0, r3
 8003976:	3750      	adds	r7, #80	@ 0x50
 8003978:	46bd      	mov	sp, r7
 800397a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800
 8003984:	00f42400 	.word	0x00f42400
 8003988:	007a1200 	.word	0x007a1200

0800398c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003990:	4b03      	ldr	r3, [pc, #12]	@ (80039a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003992:	681b      	ldr	r3, [r3, #0]
}
 8003994:	4618      	mov	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000004 	.word	0x20000004

080039a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039a8:	f7ff fff0 	bl	800398c <HAL_RCC_GetHCLKFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	0a9b      	lsrs	r3, r3, #10
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4903      	ldr	r1, [pc, #12]	@ (80039c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40023800 	.word	0x40023800
 80039c8:	0800b9c8 	.word	0x0800b9c8

080039cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039d0:	f7ff ffdc 	bl	800398c <HAL_RCC_GetHCLKFreq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b05      	ldr	r3, [pc, #20]	@ (80039ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	0b5b      	lsrs	r3, r3, #13
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	4903      	ldr	r1, [pc, #12]	@ (80039f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40023800 	.word	0x40023800
 80039f0:	0800b9c8 	.word	0x0800b9c8

080039f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	220f      	movs	r2, #15
 8003a02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a04:	4b12      	ldr	r3, [pc, #72]	@ (8003a50 <HAL_RCC_GetClockConfig+0x5c>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 0203 	and.w	r2, r3, #3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a10:	4b0f      	ldr	r3, [pc, #60]	@ (8003a50 <HAL_RCC_GetClockConfig+0x5c>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a50 <HAL_RCC_GetClockConfig+0x5c>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a28:	4b09      	ldr	r3, [pc, #36]	@ (8003a50 <HAL_RCC_GetClockConfig+0x5c>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	08db      	lsrs	r3, r3, #3
 8003a2e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a36:	4b07      	ldr	r3, [pc, #28]	@ (8003a54 <HAL_RCC_GetClockConfig+0x60>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0207 	and.w	r2, r3, #7
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	601a      	str	r2, [r3, #0]
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40023c00 	.word	0x40023c00

08003a58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d105      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d035      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a80:	4b62      	ldr	r3, [pc, #392]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a86:	f7fd ff17 	bl	80018b8 <HAL_GetTick>
 8003a8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a8e:	f7fd ff13 	bl	80018b8 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e0b0      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003aa0:	4b5b      	ldr	r3, [pc, #364]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f0      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	019a      	lsls	r2, r3, #6
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	071b      	lsls	r3, r3, #28
 8003ab8:	4955      	ldr	r1, [pc, #340]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ac0:	4b52      	ldr	r3, [pc, #328]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ac6:	f7fd fef7 	bl	80018b8 <HAL_GetTick>
 8003aca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ace:	f7fd fef3 	bl	80018b8 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e090      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ae0:	4b4b      	ldr	r3, [pc, #300]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0f0      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8083 	beq.w	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	4b44      	ldr	r3, [pc, #272]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b02:	4a43      	ldr	r2, [pc, #268]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b0a:	4b41      	ldr	r3, [pc, #260]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b16:	4b3f      	ldr	r3, [pc, #252]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a3e      	ldr	r2, [pc, #248]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b22:	f7fd fec9 	bl	80018b8 <HAL_GetTick>
 8003b26:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003b28:	e008      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2a:	f7fd fec5 	bl	80018b8 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e062      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003b3c:	4b35      	ldr	r3, [pc, #212]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0f0      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b48:	4b31      	ldr	r3, [pc, #196]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b50:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d02f      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d028      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b66:	4b2a      	ldr	r3, [pc, #168]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b70:	4b29      	ldr	r3, [pc, #164]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b76:	4b28      	ldr	r3, [pc, #160]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b7c:	4a24      	ldr	r2, [pc, #144]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b82:	4b23      	ldr	r3, [pc, #140]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d114      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b8e:	f7fd fe93 	bl	80018b8 <HAL_GetTick>
 8003b92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b94:	e00a      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b96:	f7fd fe8f 	bl	80018b8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e02a      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bac:	4b18      	ldr	r3, [pc, #96]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0ee      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bc4:	d10d      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003bc6:	4b12      	ldr	r3, [pc, #72]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bda:	490d      	ldr	r1, [pc, #52]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	608b      	str	r3, [r1, #8]
 8003be0:	e005      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003be2:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	4a0a      	ldr	r2, [pc, #40]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003be8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003bec:	6093      	str	r3, [r2, #8]
 8003bee:	4b08      	ldr	r3, [pc, #32]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bf0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfa:	4905      	ldr	r1, [pc, #20]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	42470068 	.word	0x42470068
 8003c10:	40023800 	.word	0x40023800
 8003c14:	40007000 	.word	0x40007000
 8003c18:	42470e40 	.word	0x42470e40

08003c1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d13f      	bne.n	8003cba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003c3a:	4b24      	ldr	r3, [pc, #144]	@ (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c42:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d006      	beq.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c50:	d12f      	bne.n	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003c52:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003c54:	617b      	str	r3, [r7, #20]
          break;
 8003c56:	e02f      	b.n	8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c58:	4b1c      	ldr	r3, [pc, #112]	@ (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c64:	d108      	bne.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c66:	4b19      	ldr	r3, [pc, #100]	@ (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c6e:	4a19      	ldr	r2, [pc, #100]	@ (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	e007      	b.n	8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c78:	4b14      	ldr	r3, [pc, #80]	@ (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c80:	4a15      	ldr	r2, [pc, #84]	@ (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c86:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003c88:	4b10      	ldr	r3, [pc, #64]	@ (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c8e:	099b      	lsrs	r3, r3, #6
 8003c90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ca2:	0f1b      	lsrs	r3, r3, #28
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cae:	617b      	str	r3, [r7, #20]
          break;
 8003cb0:	e002      	b.n	8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
          break;
 8003cb6:	bf00      	nop
        }
      }
      break;
 8003cb8:	e000      	b.n	8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8003cba:	bf00      	nop
    }
  }
  return frequency;
 8003cbc:	697b      	ldr	r3, [r7, #20]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	00bb8000 	.word	0x00bb8000
 8003cd4:	007a1200 	.word	0x007a1200
 8003cd8:	00f42400 	.word	0x00f42400

08003cdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e07b      	b.n	8003de6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d108      	bne.n	8003d08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cfe:	d009      	beq.n	8003d14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	61da      	str	r2, [r3, #28]
 8003d06:	e005      	b.n	8003d14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd faa4 	bl	800127c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d98:	ea42 0103 	orr.w	r1, r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	0c1b      	lsrs	r3, r3, #16
 8003db2:	f003 0104 	and.w	r1, r3, #4
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dba:	f003 0210 	and.w	r2, r3, #16
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b088      	sub	sp, #32
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	603b      	str	r3, [r7, #0]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dfe:	f7fd fd5b 	bl	80018b8 <HAL_GetTick>
 8003e02:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d001      	beq.n	8003e18 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003e14:	2302      	movs	r3, #2
 8003e16:	e12a      	b.n	800406e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <HAL_SPI_Transmit+0x36>
 8003e1e:	88fb      	ldrh	r3, [r7, #6]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e122      	b.n	800406e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_SPI_Transmit+0x48>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e11b      	b.n	800406e <HAL_SPI_Transmit+0x280>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2203      	movs	r2, #3
 8003e42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	88fa      	ldrh	r2, [r7, #6]
 8003e56:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	88fa      	ldrh	r2, [r7, #6]
 8003e5c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e84:	d10f      	bne.n	8003ea6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ea4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb0:	2b40      	cmp	r3, #64	@ 0x40
 8003eb2:	d007      	beq.n	8003ec4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ec2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ecc:	d152      	bne.n	8003f74 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_SPI_Transmit+0xee>
 8003ed6:	8b7b      	ldrh	r3, [r7, #26]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d145      	bne.n	8003f68 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee0:	881a      	ldrh	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eec:	1c9a      	adds	r2, r3, #2
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f00:	e032      	b.n	8003f68 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d112      	bne.n	8003f36 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f14:	881a      	ldrh	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f20:	1c9a      	adds	r2, r3, #2
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f34:	e018      	b.n	8003f68 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f36:	f7fd fcbf 	bl	80018b8 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d803      	bhi.n	8003f4e <HAL_SPI_Transmit+0x160>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4c:	d102      	bne.n	8003f54 <HAL_SPI_Transmit+0x166>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d109      	bne.n	8003f68 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e082      	b.n	800406e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1c7      	bne.n	8003f02 <HAL_SPI_Transmit+0x114>
 8003f72:	e053      	b.n	800401c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <HAL_SPI_Transmit+0x194>
 8003f7c:	8b7b      	ldrh	r3, [r7, #26]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d147      	bne.n	8004012 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	330c      	adds	r3, #12
 8003f8c:	7812      	ldrb	r2, [r2, #0]
 8003f8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fa8:	e033      	b.n	8004012 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d113      	bne.n	8003fe0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	7812      	ldrb	r2, [r2, #0]
 8003fc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003fde:	e018      	b.n	8004012 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fe0:	f7fd fc6a 	bl	80018b8 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d803      	bhi.n	8003ff8 <HAL_SPI_Transmit+0x20a>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff6:	d102      	bne.n	8003ffe <HAL_SPI_Transmit+0x210>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e02d      	b.n	800406e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1c6      	bne.n	8003faa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	6839      	ldr	r1, [r7, #0]
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 fa59 	bl	80044d8 <SPI_EndRxTxTransaction>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800406c:	2300      	movs	r3, #0
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	3720      	adds	r7, #32
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b08a      	sub	sp, #40	@ 0x28
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
 8004082:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004084:	2301      	movs	r3, #1
 8004086:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004088:	f7fd fc16 	bl	80018b8 <HAL_GetTick>
 800408c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004094:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800409c:	887b      	ldrh	r3, [r7, #2]
 800409e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040a0:	7ffb      	ldrb	r3, [r7, #31]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d00c      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0x4a>
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ac:	d106      	bne.n	80040bc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <HAL_SPI_TransmitReceive+0x46>
 80040b6:	7ffb      	ldrb	r3, [r7, #31]
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d001      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80040bc:	2302      	movs	r3, #2
 80040be:	e17f      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_SPI_TransmitReceive+0x5c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <HAL_SPI_TransmitReceive+0x5c>
 80040cc:	887b      	ldrh	r3, [r7, #2]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e174      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_SPI_TransmitReceive+0x6e>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e16d      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x34a>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d003      	beq.n	8004100 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2205      	movs	r2, #5
 80040fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	887a      	ldrh	r2, [r7, #2]
 8004110:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	887a      	ldrh	r2, [r7, #2]
 8004116:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	887a      	ldrh	r2, [r7, #2]
 8004122:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	887a      	ldrh	r2, [r7, #2]
 8004128:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004140:	2b40      	cmp	r3, #64	@ 0x40
 8004142:	d007      	beq.n	8004154 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004152:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800415c:	d17e      	bne.n	800425c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_SPI_TransmitReceive+0xf6>
 8004166:	8afb      	ldrh	r3, [r7, #22]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d16c      	bne.n	8004246 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004170:	881a      	ldrh	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417c:	1c9a      	adds	r2, r3, #2
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004190:	e059      	b.n	8004246 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b02      	cmp	r3, #2
 800419e:	d11b      	bne.n	80041d8 <HAL_SPI_TransmitReceive+0x162>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d016      	beq.n	80041d8 <HAL_SPI_TransmitReceive+0x162>
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d113      	bne.n	80041d8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b4:	881a      	ldrh	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c0:	1c9a      	adds	r2, r3, #2
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d119      	bne.n	800421a <HAL_SPI_TransmitReceive+0x1a4>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d014      	beq.n	800421a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fa:	b292      	uxth	r2, r2
 80041fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004202:	1c9a      	adds	r2, r3, #2
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004216:	2301      	movs	r3, #1
 8004218:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800421a:	f7fd fb4d 	bl	80018b8 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004226:	429a      	cmp	r2, r3
 8004228:	d80d      	bhi.n	8004246 <HAL_SPI_TransmitReceive+0x1d0>
 800422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004230:	d009      	beq.n	8004246 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e0bc      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1a0      	bne.n	8004192 <HAL_SPI_TransmitReceive+0x11c>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d19b      	bne.n	8004192 <HAL_SPI_TransmitReceive+0x11c>
 800425a:	e082      	b.n	8004362 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <HAL_SPI_TransmitReceive+0x1f4>
 8004264:	8afb      	ldrh	r3, [r7, #22]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d171      	bne.n	800434e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	7812      	ldrb	r2, [r2, #0]
 8004276:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004290:	e05d      	b.n	800434e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b02      	cmp	r3, #2
 800429e:	d11c      	bne.n	80042da <HAL_SPI_TransmitReceive+0x264>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d017      	beq.n	80042da <HAL_SPI_TransmitReceive+0x264>
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d114      	bne.n	80042da <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330c      	adds	r3, #12
 80042ba:	7812      	ldrb	r2, [r2, #0]
 80042bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d119      	bne.n	800431c <HAL_SPI_TransmitReceive+0x2a6>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d014      	beq.n	800431c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004318:	2301      	movs	r3, #1
 800431a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800431c:	f7fd facc 	bl	80018b8 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004328:	429a      	cmp	r2, r3
 800432a:	d803      	bhi.n	8004334 <HAL_SPI_TransmitReceive+0x2be>
 800432c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004332:	d102      	bne.n	800433a <HAL_SPI_TransmitReceive+0x2c4>
 8004334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e038      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d19c      	bne.n	8004292 <HAL_SPI_TransmitReceive+0x21c>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d197      	bne.n	8004292 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004362:	6a3a      	ldr	r2, [r7, #32]
 8004364:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f8b6 	bl	80044d8 <SPI_EndRxTxTransaction>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e01d      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80043be:	2300      	movs	r3, #0
  }
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3728      	adds	r7, #40	@ 0x28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b088      	sub	sp, #32
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043d8:	f7fd fa6e 	bl	80018b8 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	4413      	add	r3, r2
 80043e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043e8:	f7fd fa66 	bl	80018b8 <HAL_GetTick>
 80043ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043ee:	4b39      	ldr	r3, [pc, #228]	@ (80044d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	015b      	lsls	r3, r3, #5
 80043f4:	0d1b      	lsrs	r3, r3, #20
 80043f6:	69fa      	ldr	r2, [r7, #28]
 80043f8:	fb02 f303 	mul.w	r3, r2, r3
 80043fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043fe:	e054      	b.n	80044aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004406:	d050      	beq.n	80044aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004408:	f7fd fa56 	bl	80018b8 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	429a      	cmp	r2, r3
 8004416:	d902      	bls.n	800441e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d13d      	bne.n	800449a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800442c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004436:	d111      	bne.n	800445c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004440:	d004      	beq.n	800444c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800444a:	d107      	bne.n	800445c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800445a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004464:	d10f      	bne.n	8004486 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004484:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e017      	b.n	80044ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4013      	ands	r3, r2
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	bf0c      	ite	eq
 80044ba:	2301      	moveq	r3, #1
 80044bc:	2300      	movne	r3, #0
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	461a      	mov	r2, r3
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d19b      	bne.n	8004400 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3720      	adds	r7, #32
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000004 	.word	0x20000004

080044d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2201      	movs	r2, #1
 80044ec:	2102      	movs	r1, #2
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff ff6a 	bl	80043c8 <SPI_WaitFlagStateUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d007      	beq.n	800450a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fe:	f043 0220 	orr.w	r2, r3, #32
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e032      	b.n	8004570 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800450a:	4b1b      	ldr	r3, [pc, #108]	@ (8004578 <SPI_EndRxTxTransaction+0xa0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1b      	ldr	r2, [pc, #108]	@ (800457c <SPI_EndRxTxTransaction+0xa4>)
 8004510:	fba2 2303 	umull	r2, r3, r2, r3
 8004514:	0d5b      	lsrs	r3, r3, #21
 8004516:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800451a:	fb02 f303 	mul.w	r3, r2, r3
 800451e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004528:	d112      	bne.n	8004550 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2200      	movs	r2, #0
 8004532:	2180      	movs	r1, #128	@ 0x80
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f7ff ff47 	bl	80043c8 <SPI_WaitFlagStateUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d016      	beq.n	800456e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004544:	f043 0220 	orr.w	r2, r3, #32
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e00f      	b.n	8004570 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	3b01      	subs	r3, #1
 800455a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004566:	2b80      	cmp	r3, #128	@ 0x80
 8004568:	d0f2      	beq.n	8004550 <SPI_EndRxTxTransaction+0x78>
 800456a:	e000      	b.n	800456e <SPI_EndRxTxTransaction+0x96>
        break;
 800456c:	bf00      	nop
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000004 	.word	0x20000004
 800457c:	165e9f81 	.word	0x165e9f81

08004580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e041      	b.n	8004616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fc fee6 	bl	8001378 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f000 fc62 	bl	8004e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b01      	cmp	r3, #1
 8004632:	d001      	beq.n	8004638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e04e      	b.n	80046d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a23      	ldr	r2, [pc, #140]	@ (80046e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d022      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x80>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004662:	d01d      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x80>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a1f      	ldr	r2, [pc, #124]	@ (80046e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d018      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x80>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a1e      	ldr	r2, [pc, #120]	@ (80046ec <HAL_TIM_Base_Start_IT+0xcc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d013      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x80>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1c      	ldr	r2, [pc, #112]	@ (80046f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00e      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x80>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1b      	ldr	r2, [pc, #108]	@ (80046f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d009      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x80>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a19      	ldr	r2, [pc, #100]	@ (80046f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d004      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x80>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a18      	ldr	r2, [pc, #96]	@ (80046fc <HAL_TIM_Base_Start_IT+0xdc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d111      	bne.n	80046c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b06      	cmp	r3, #6
 80046b0:	d010      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0201 	orr.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c2:	e007      	b.n	80046d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800
 80046f0:	40000c00 	.word	0x40000c00
 80046f4:	40010400 	.word	0x40010400
 80046f8:	40014000 	.word	0x40014000
 80046fc:	40001800 	.word	0x40001800

08004700 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e041      	b.n	8004796 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f839 	bl	800479e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3304      	adds	r3, #4
 800473c:	4619      	mov	r1, r3
 800473e:	4610      	mov	r0, r2
 8004740:	f000 fba2 	bl	8004e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
	...

080047b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d109      	bne.n	80047d8 <HAL_TIM_PWM_Start+0x24>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	bf14      	ite	ne
 80047d0:	2301      	movne	r3, #1
 80047d2:	2300      	moveq	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	e022      	b.n	800481e <HAL_TIM_PWM_Start+0x6a>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d109      	bne.n	80047f2 <HAL_TIM_PWM_Start+0x3e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	bf14      	ite	ne
 80047ea:	2301      	movne	r3, #1
 80047ec:	2300      	moveq	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	e015      	b.n	800481e <HAL_TIM_PWM_Start+0x6a>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d109      	bne.n	800480c <HAL_TIM_PWM_Start+0x58>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	bf14      	ite	ne
 8004804:	2301      	movne	r3, #1
 8004806:	2300      	moveq	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	e008      	b.n	800481e <HAL_TIM_PWM_Start+0x6a>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	bf14      	ite	ne
 8004818:	2301      	movne	r3, #1
 800481a:	2300      	moveq	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e07c      	b.n	8004920 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d104      	bne.n	8004836 <HAL_TIM_PWM_Start+0x82>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004834:	e013      	b.n	800485e <HAL_TIM_PWM_Start+0xaa>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b04      	cmp	r3, #4
 800483a:	d104      	bne.n	8004846 <HAL_TIM_PWM_Start+0x92>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004844:	e00b      	b.n	800485e <HAL_TIM_PWM_Start+0xaa>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b08      	cmp	r3, #8
 800484a:	d104      	bne.n	8004856 <HAL_TIM_PWM_Start+0xa2>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004854:	e003      	b.n	800485e <HAL_TIM_PWM_Start+0xaa>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2201      	movs	r2, #1
 8004864:	6839      	ldr	r1, [r7, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fe04 	bl	8005474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a2d      	ldr	r2, [pc, #180]	@ (8004928 <HAL_TIM_PWM_Start+0x174>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d004      	beq.n	8004880 <HAL_TIM_PWM_Start+0xcc>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a2c      	ldr	r2, [pc, #176]	@ (800492c <HAL_TIM_PWM_Start+0x178>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d101      	bne.n	8004884 <HAL_TIM_PWM_Start+0xd0>
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <HAL_TIM_PWM_Start+0xd2>
 8004884:	2300      	movs	r3, #0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004898:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a22      	ldr	r2, [pc, #136]	@ (8004928 <HAL_TIM_PWM_Start+0x174>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d022      	beq.n	80048ea <HAL_TIM_PWM_Start+0x136>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ac:	d01d      	beq.n	80048ea <HAL_TIM_PWM_Start+0x136>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004930 <HAL_TIM_PWM_Start+0x17c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d018      	beq.n	80048ea <HAL_TIM_PWM_Start+0x136>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004934 <HAL_TIM_PWM_Start+0x180>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d013      	beq.n	80048ea <HAL_TIM_PWM_Start+0x136>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004938 <HAL_TIM_PWM_Start+0x184>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d00e      	beq.n	80048ea <HAL_TIM_PWM_Start+0x136>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a16      	ldr	r2, [pc, #88]	@ (800492c <HAL_TIM_PWM_Start+0x178>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d009      	beq.n	80048ea <HAL_TIM_PWM_Start+0x136>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a18      	ldr	r2, [pc, #96]	@ (800493c <HAL_TIM_PWM_Start+0x188>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d004      	beq.n	80048ea <HAL_TIM_PWM_Start+0x136>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a16      	ldr	r2, [pc, #88]	@ (8004940 <HAL_TIM_PWM_Start+0x18c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d111      	bne.n	800490e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b06      	cmp	r3, #6
 80048fa:	d010      	beq.n	800491e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490c:	e007      	b.n	800491e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0201 	orr.w	r2, r2, #1
 800491c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40010000 	.word	0x40010000
 800492c:	40010400 	.word	0x40010400
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800
 8004938:	40000c00 	.word	0x40000c00
 800493c:	40014000 	.word	0x40014000
 8004940:	40001800 	.word	0x40001800

08004944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d020      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01b      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0202 	mvn.w	r2, #2
 8004978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fa5b 	bl	8004e4a <HAL_TIM_IC_CaptureCallback>
 8004994:	e005      	b.n	80049a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa4d 	bl	8004e36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fa5e 	bl	8004e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d020      	beq.n	80049f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01b      	beq.n	80049f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0204 	mvn.w	r2, #4
 80049c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fa35 	bl	8004e4a <HAL_TIM_IC_CaptureCallback>
 80049e0:	e005      	b.n	80049ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fa27 	bl	8004e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fa38 	bl	8004e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d020      	beq.n	8004a40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01b      	beq.n	8004a40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0208 	mvn.w	r2, #8
 8004a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2204      	movs	r2, #4
 8004a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fa0f 	bl	8004e4a <HAL_TIM_IC_CaptureCallback>
 8004a2c:	e005      	b.n	8004a3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fa01 	bl	8004e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fa12 	bl	8004e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d020      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01b      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0210 	mvn.w	r2, #16
 8004a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2208      	movs	r2, #8
 8004a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f9e9 	bl	8004e4a <HAL_TIM_IC_CaptureCallback>
 8004a78:	e005      	b.n	8004a86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f9db 	bl	8004e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f9ec 	bl	8004e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00c      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d007      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0201 	mvn.w	r2, #1
 8004aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc f984 	bl	8000db8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00c      	beq.n	8004ad4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fd7c 	bl	80055cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00c      	beq.n	8004af8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d007      	beq.n	8004af8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f9bd 	bl	8004e72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00c      	beq.n	8004b1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f003 0320 	and.w	r3, r3, #32
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d007      	beq.n	8004b1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0220 	mvn.w	r2, #32
 8004b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fd4e 	bl	80055b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b1c:	bf00      	nop
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e0ae      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b0c      	cmp	r3, #12
 8004b4e:	f200 809f 	bhi.w	8004c90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b52:	a201      	add	r2, pc, #4	@ (adr r2, 8004b58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004b8d 	.word	0x08004b8d
 8004b5c:	08004c91 	.word	0x08004c91
 8004b60:	08004c91 	.word	0x08004c91
 8004b64:	08004c91 	.word	0x08004c91
 8004b68:	08004bcd 	.word	0x08004bcd
 8004b6c:	08004c91 	.word	0x08004c91
 8004b70:	08004c91 	.word	0x08004c91
 8004b74:	08004c91 	.word	0x08004c91
 8004b78:	08004c0f 	.word	0x08004c0f
 8004b7c:	08004c91 	.word	0x08004c91
 8004b80:	08004c91 	.word	0x08004c91
 8004b84:	08004c91 	.word	0x08004c91
 8004b88:	08004c4f 	.word	0x08004c4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fa24 	bl	8004fe0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0208 	orr.w	r2, r2, #8
 8004ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0204 	bic.w	r2, r2, #4
 8004bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6999      	ldr	r1, [r3, #24]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	619a      	str	r2, [r3, #24]
      break;
 8004bca:	e064      	b.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fa74 	bl	80050c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6999      	ldr	r1, [r3, #24]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	021a      	lsls	r2, r3, #8
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	619a      	str	r2, [r3, #24]
      break;
 8004c0c:	e043      	b.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fac9 	bl	80051ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0208 	orr.w	r2, r2, #8
 8004c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0204 	bic.w	r2, r2, #4
 8004c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69d9      	ldr	r1, [r3, #28]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	61da      	str	r2, [r3, #28]
      break;
 8004c4c:	e023      	b.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fb1d 	bl	8005294 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69da      	ldr	r2, [r3, #28]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69d9      	ldr	r1, [r3, #28]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	021a      	lsls	r2, r3, #8
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	61da      	str	r2, [r3, #28]
      break;
 8004c8e:	e002      	b.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	75fb      	strb	r3, [r7, #23]
      break;
 8004c94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIM_ConfigClockSource+0x1c>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e0b4      	b.n	8004e2e <HAL_TIM_ConfigClockSource+0x186>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cfc:	d03e      	beq.n	8004d7c <HAL_TIM_ConfigClockSource+0xd4>
 8004cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d02:	f200 8087 	bhi.w	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d0a:	f000 8086 	beq.w	8004e1a <HAL_TIM_ConfigClockSource+0x172>
 8004d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d12:	d87f      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d14:	2b70      	cmp	r3, #112	@ 0x70
 8004d16:	d01a      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0xa6>
 8004d18:	2b70      	cmp	r3, #112	@ 0x70
 8004d1a:	d87b      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d1c:	2b60      	cmp	r3, #96	@ 0x60
 8004d1e:	d050      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x11a>
 8004d20:	2b60      	cmp	r3, #96	@ 0x60
 8004d22:	d877      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d24:	2b50      	cmp	r3, #80	@ 0x50
 8004d26:	d03c      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0xfa>
 8004d28:	2b50      	cmp	r3, #80	@ 0x50
 8004d2a:	d873      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d2c:	2b40      	cmp	r3, #64	@ 0x40
 8004d2e:	d058      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x13a>
 8004d30:	2b40      	cmp	r3, #64	@ 0x40
 8004d32:	d86f      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d34:	2b30      	cmp	r3, #48	@ 0x30
 8004d36:	d064      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x15a>
 8004d38:	2b30      	cmp	r3, #48	@ 0x30
 8004d3a:	d86b      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d060      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x15a>
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d867      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d05c      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x15a>
 8004d48:	2b10      	cmp	r3, #16
 8004d4a:	d05a      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x15a>
 8004d4c:	e062      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d5e:	f000 fb69 	bl	8005434 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	609a      	str	r2, [r3, #8]
      break;
 8004d7a:	e04f      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d8c:	f000 fb52 	bl	8005434 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d9e:	609a      	str	r2, [r3, #8]
      break;
 8004da0:	e03c      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dae:	461a      	mov	r2, r3
 8004db0:	f000 fac6 	bl	8005340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2150      	movs	r1, #80	@ 0x50
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fb1f 	bl	80053fe <TIM_ITRx_SetConfig>
      break;
 8004dc0:	e02c      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f000 fae5 	bl	800539e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2160      	movs	r1, #96	@ 0x60
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fb0f 	bl	80053fe <TIM_ITRx_SetConfig>
      break;
 8004de0:	e01c      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dee:	461a      	mov	r2, r3
 8004df0:	f000 faa6 	bl	8005340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2140      	movs	r1, #64	@ 0x40
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 faff 	bl	80053fe <TIM_ITRx_SetConfig>
      break;
 8004e00:	e00c      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	f000 faf6 	bl	80053fe <TIM_ITRx_SetConfig>
      break;
 8004e12:	e003      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
      break;
 8004e18:	e000      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a46      	ldr	r2, [pc, #280]	@ (8004fb4 <TIM_Base_SetConfig+0x12c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d013      	beq.n	8004ec8 <TIM_Base_SetConfig+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea6:	d00f      	beq.n	8004ec8 <TIM_Base_SetConfig+0x40>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a43      	ldr	r2, [pc, #268]	@ (8004fb8 <TIM_Base_SetConfig+0x130>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00b      	beq.n	8004ec8 <TIM_Base_SetConfig+0x40>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a42      	ldr	r2, [pc, #264]	@ (8004fbc <TIM_Base_SetConfig+0x134>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d007      	beq.n	8004ec8 <TIM_Base_SetConfig+0x40>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a41      	ldr	r2, [pc, #260]	@ (8004fc0 <TIM_Base_SetConfig+0x138>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_Base_SetConfig+0x40>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a40      	ldr	r2, [pc, #256]	@ (8004fc4 <TIM_Base_SetConfig+0x13c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d108      	bne.n	8004eda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a35      	ldr	r2, [pc, #212]	@ (8004fb4 <TIM_Base_SetConfig+0x12c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d02b      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee8:	d027      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a32      	ldr	r2, [pc, #200]	@ (8004fb8 <TIM_Base_SetConfig+0x130>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d023      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a31      	ldr	r2, [pc, #196]	@ (8004fbc <TIM_Base_SetConfig+0x134>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d01f      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a30      	ldr	r2, [pc, #192]	@ (8004fc0 <TIM_Base_SetConfig+0x138>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d01b      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a2f      	ldr	r2, [pc, #188]	@ (8004fc4 <TIM_Base_SetConfig+0x13c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d017      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a2e      	ldr	r2, [pc, #184]	@ (8004fc8 <TIM_Base_SetConfig+0x140>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a2d      	ldr	r2, [pc, #180]	@ (8004fcc <TIM_Base_SetConfig+0x144>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00f      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2c      	ldr	r2, [pc, #176]	@ (8004fd0 <TIM_Base_SetConfig+0x148>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00b      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a2b      	ldr	r2, [pc, #172]	@ (8004fd4 <TIM_Base_SetConfig+0x14c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d007      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fd8 <TIM_Base_SetConfig+0x150>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d003      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a29      	ldr	r2, [pc, #164]	@ (8004fdc <TIM_Base_SetConfig+0x154>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d108      	bne.n	8004f4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a10      	ldr	r2, [pc, #64]	@ (8004fb4 <TIM_Base_SetConfig+0x12c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d003      	beq.n	8004f80 <TIM_Base_SetConfig+0xf8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a12      	ldr	r2, [pc, #72]	@ (8004fc4 <TIM_Base_SetConfig+0x13c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d103      	bne.n	8004f88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d105      	bne.n	8004fa6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f023 0201 	bic.w	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	611a      	str	r2, [r3, #16]
  }
}
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40010000 	.word	0x40010000
 8004fb8:	40000400 	.word	0x40000400
 8004fbc:	40000800 	.word	0x40000800
 8004fc0:	40000c00 	.word	0x40000c00
 8004fc4:	40010400 	.word	0x40010400
 8004fc8:	40014000 	.word	0x40014000
 8004fcc:	40014400 	.word	0x40014400
 8004fd0:	40014800 	.word	0x40014800
 8004fd4:	40001800 	.word	0x40001800
 8004fd8:	40001c00 	.word	0x40001c00
 8004fdc:	40002000 	.word	0x40002000

08004fe0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	f023 0201 	bic.w	r2, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0303 	bic.w	r3, r3, #3
 8005016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f023 0302 	bic.w	r3, r3, #2
 8005028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a20      	ldr	r2, [pc, #128]	@ (80050b8 <TIM_OC1_SetConfig+0xd8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d003      	beq.n	8005044 <TIM_OC1_SetConfig+0x64>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a1f      	ldr	r2, [pc, #124]	@ (80050bc <TIM_OC1_SetConfig+0xdc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d10c      	bne.n	800505e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f023 0308 	bic.w	r3, r3, #8
 800504a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f023 0304 	bic.w	r3, r3, #4
 800505c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a15      	ldr	r2, [pc, #84]	@ (80050b8 <TIM_OC1_SetConfig+0xd8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_OC1_SetConfig+0x8e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a14      	ldr	r2, [pc, #80]	@ (80050bc <TIM_OC1_SetConfig+0xdc>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d111      	bne.n	8005092 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800507c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	621a      	str	r2, [r3, #32]
}
 80050ac:	bf00      	nop
 80050ae:	371c      	adds	r7, #28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	40010000 	.word	0x40010000
 80050bc:	40010400 	.word	0x40010400

080050c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	f023 0210 	bic.w	r2, r3, #16
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f023 0320 	bic.w	r3, r3, #32
 800510a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a22      	ldr	r2, [pc, #136]	@ (80051a4 <TIM_OC2_SetConfig+0xe4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d003      	beq.n	8005128 <TIM_OC2_SetConfig+0x68>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a21      	ldr	r2, [pc, #132]	@ (80051a8 <TIM_OC2_SetConfig+0xe8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d10d      	bne.n	8005144 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800512e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4313      	orrs	r3, r2
 800513a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005142:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a17      	ldr	r2, [pc, #92]	@ (80051a4 <TIM_OC2_SetConfig+0xe4>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d003      	beq.n	8005154 <TIM_OC2_SetConfig+0x94>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a16      	ldr	r2, [pc, #88]	@ (80051a8 <TIM_OC2_SetConfig+0xe8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d113      	bne.n	800517c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800515a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	621a      	str	r2, [r3, #32]
}
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40010000 	.word	0x40010000
 80051a8:	40010400 	.word	0x40010400

080051ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0303 	bic.w	r3, r3, #3
 80051e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a21      	ldr	r2, [pc, #132]	@ (800528c <TIM_OC3_SetConfig+0xe0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d003      	beq.n	8005212 <TIM_OC3_SetConfig+0x66>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a20      	ldr	r2, [pc, #128]	@ (8005290 <TIM_OC3_SetConfig+0xe4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d10d      	bne.n	800522e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005218:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	021b      	lsls	r3, r3, #8
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800522c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a16      	ldr	r2, [pc, #88]	@ (800528c <TIM_OC3_SetConfig+0xe0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d003      	beq.n	800523e <TIM_OC3_SetConfig+0x92>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a15      	ldr	r2, [pc, #84]	@ (8005290 <TIM_OC3_SetConfig+0xe4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d113      	bne.n	8005266 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800524c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	621a      	str	r2, [r3, #32]
}
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40010000 	.word	0x40010000
 8005290:	40010400 	.word	0x40010400

08005294 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	031b      	lsls	r3, r3, #12
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a12      	ldr	r2, [pc, #72]	@ (8005338 <TIM_OC4_SetConfig+0xa4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_OC4_SetConfig+0x68>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a11      	ldr	r2, [pc, #68]	@ (800533c <TIM_OC4_SetConfig+0xa8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d109      	bne.n	8005310 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005302:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	019b      	lsls	r3, r3, #6
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	621a      	str	r2, [r3, #32]
}
 800532a:	bf00      	nop
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	40010000 	.word	0x40010000
 800533c:	40010400 	.word	0x40010400

08005340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f023 0201 	bic.w	r2, r3, #1
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800536a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f023 030a 	bic.w	r3, r3, #10
 800537c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	621a      	str	r2, [r3, #32]
}
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800539e:	b480      	push	{r7}
 80053a0:	b087      	sub	sp, #28
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f023 0210 	bic.w	r2, r3, #16
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	031b      	lsls	r3, r3, #12
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	621a      	str	r2, [r3, #32]
}
 80053f2:	bf00      	nop
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053fe:	b480      	push	{r7}
 8005400:	b085      	sub	sp, #20
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	f043 0307 	orr.w	r3, r3, #7
 8005420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	609a      	str	r2, [r3, #8]
}
 8005428:	bf00      	nop
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800544e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	021a      	lsls	r2, r3, #8
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	431a      	orrs	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4313      	orrs	r3, r2
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	609a      	str	r2, [r3, #8]
}
 8005468:	bf00      	nop
 800546a:	371c      	adds	r7, #28
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f003 031f 	and.w	r3, r3, #31
 8005486:	2201      	movs	r2, #1
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a1a      	ldr	r2, [r3, #32]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	43db      	mvns	r3, r3
 8005496:	401a      	ands	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a1a      	ldr	r2, [r3, #32]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f003 031f 	and.w	r3, r3, #31
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ac:	431a      	orrs	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	621a      	str	r2, [r3, #32]
}
 80054b2:	bf00      	nop
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054d4:	2302      	movs	r3, #2
 80054d6:	e05a      	b.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a21      	ldr	r2, [pc, #132]	@ (800559c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d022      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005524:	d01d      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a1d      	ldr	r2, [pc, #116]	@ (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d018      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a1b      	ldr	r2, [pc, #108]	@ (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d013      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a1a      	ldr	r2, [pc, #104]	@ (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00e      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a18      	ldr	r2, [pc, #96]	@ (80055ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d009      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a17      	ldr	r2, [pc, #92]	@ (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d004      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a15      	ldr	r2, [pc, #84]	@ (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d10c      	bne.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005568:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	4313      	orrs	r3, r2
 8005572:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40010000 	.word	0x40010000
 80055a0:	40000400 	.word	0x40000400
 80055a4:	40000800 	.word	0x40000800
 80055a8:	40000c00 	.word	0x40000c00
 80055ac:	40010400 	.word	0x40010400
 80055b0:	40014000 	.word	0x40014000
 80055b4:	40001800 	.word	0x40001800

080055b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e042      	b.n	8005678 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fb ff58 	bl	80014bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2224      	movs	r2, #36	@ 0x24
 8005610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fa09 	bl	8005a3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695a      	ldr	r2, [r3, #20]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08a      	sub	sp, #40	@ 0x28
 8005684:	af02      	add	r7, sp, #8
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	4613      	mov	r3, r2
 800568e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b20      	cmp	r3, #32
 800569e:	d175      	bne.n	800578c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_UART_Transmit+0x2c>
 80056a6:	88fb      	ldrh	r3, [r7, #6]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e06e      	b.n	800578e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2221      	movs	r2, #33	@ 0x21
 80056ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056be:	f7fc f8fb 	bl	80018b8 <HAL_GetTick>
 80056c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	88fa      	ldrh	r2, [r7, #6]
 80056c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	88fa      	ldrh	r2, [r7, #6]
 80056ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056d8:	d108      	bne.n	80056ec <HAL_UART_Transmit+0x6c>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d104      	bne.n	80056ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	e003      	b.n	80056f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056f0:	2300      	movs	r3, #0
 80056f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056f4:	e02e      	b.n	8005754 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2200      	movs	r2, #0
 80056fe:	2180      	movs	r1, #128	@ 0x80
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 f8df 	bl	80058c4 <UART_WaitOnFlagUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2220      	movs	r2, #32
 8005710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e03a      	b.n	800578e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10b      	bne.n	8005736 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800572c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	3302      	adds	r3, #2
 8005732:	61bb      	str	r3, [r7, #24]
 8005734:	e007      	b.n	8005746 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	781a      	ldrb	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	3301      	adds	r3, #1
 8005744:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1cb      	bne.n	80056f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2200      	movs	r2, #0
 8005766:	2140      	movs	r1, #64	@ 0x40
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 f8ab 	bl	80058c4 <UART_WaitOnFlagUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e006      	b.n	800578e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	e000      	b.n	800578e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800578c:	2302      	movs	r3, #2
  }
}
 800578e:	4618      	mov	r0, r3
 8005790:	3720      	adds	r7, #32
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b08a      	sub	sp, #40	@ 0x28
 800579a:	af02      	add	r7, sp, #8
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	603b      	str	r3, [r7, #0]
 80057a2:	4613      	mov	r3, r2
 80057a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	f040 8081 	bne.w	80058ba <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_UART_Receive+0x2e>
 80057be:	88fb      	ldrh	r3, [r7, #6]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e079      	b.n	80058bc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2222      	movs	r2, #34	@ 0x22
 80057d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057dc:	f7fc f86c 	bl	80018b8 <HAL_GetTick>
 80057e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	88fa      	ldrh	r2, [r7, #6]
 80057e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	88fa      	ldrh	r2, [r7, #6]
 80057ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057f6:	d108      	bne.n	800580a <HAL_UART_Receive+0x74>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d104      	bne.n	800580a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005800:	2300      	movs	r3, #0
 8005802:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	e003      	b.n	8005812 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005812:	e047      	b.n	80058a4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2200      	movs	r2, #0
 800581c:	2120      	movs	r1, #32
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 f850 	bl	80058c4 <UART_WaitOnFlagUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e042      	b.n	80058bc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10c      	bne.n	8005856 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	b29b      	uxth	r3, r3
 8005844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005848:	b29a      	uxth	r2, r3
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	3302      	adds	r3, #2
 8005852:	61bb      	str	r3, [r7, #24]
 8005854:	e01f      	b.n	8005896 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800585e:	d007      	beq.n	8005870 <HAL_UART_Receive+0xda>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <HAL_UART_Receive+0xe8>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	b2da      	uxtb	r2, r3
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	e008      	b.n	8005890 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	b2db      	uxtb	r3, r3
 8005886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800588a:	b2da      	uxtb	r2, r3
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	3301      	adds	r3, #1
 8005894:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1b2      	bne.n	8005814 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e000      	b.n	80058bc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80058ba:	2302      	movs	r3, #2
  }
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3720      	adds	r7, #32
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	4613      	mov	r3, r2
 80058d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058d4:	e03b      	b.n	800594e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058dc:	d037      	beq.n	800594e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058de:	f7fb ffeb 	bl	80018b8 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	6a3a      	ldr	r2, [r7, #32]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d302      	bcc.n	80058f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e03a      	b.n	800596e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b00      	cmp	r3, #0
 8005904:	d023      	beq.n	800594e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b80      	cmp	r3, #128	@ 0x80
 800590a:	d020      	beq.n	800594e <UART_WaitOnFlagUntilTimeout+0x8a>
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b40      	cmp	r3, #64	@ 0x40
 8005910:	d01d      	beq.n	800594e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b08      	cmp	r3, #8
 800591e:	d116      	bne.n	800594e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f81d 	bl	8005976 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2208      	movs	r2, #8
 8005940:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e00f      	b.n	800596e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4013      	ands	r3, r2
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	429a      	cmp	r2, r3
 800595c:	bf0c      	ite	eq
 800595e:	2301      	moveq	r3, #1
 8005960:	2300      	movne	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	429a      	cmp	r2, r3
 800596a:	d0b4      	beq.n	80058d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005976:	b480      	push	{r7}
 8005978:	b095      	sub	sp, #84	@ 0x54
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	330c      	adds	r3, #12
 8005984:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005994:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	330c      	adds	r3, #12
 800599c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800599e:	643a      	str	r2, [r7, #64]	@ 0x40
 80059a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e5      	bne.n	800597e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3314      	adds	r3, #20
 80059b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3314      	adds	r3, #20
 80059d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1e5      	bne.n	80059b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d119      	bne.n	8005a22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	330c      	adds	r3, #12
 80059f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f023 0310 	bic.w	r3, r3, #16
 8005a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	330c      	adds	r3, #12
 8005a0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a0e:	61ba      	str	r2, [r7, #24]
 8005a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a12:	6979      	ldr	r1, [r7, #20]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1e5      	bne.n	80059ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a30:	bf00      	nop
 8005a32:	3754      	adds	r7, #84	@ 0x54
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a40:	b0c0      	sub	sp, #256	@ 0x100
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a58:	68d9      	ldr	r1, [r3, #12]
 8005a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	ea40 0301 	orr.w	r3, r0, r1
 8005a64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a94:	f021 010c 	bic.w	r1, r1, #12
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005aa2:	430b      	orrs	r3, r1
 8005aa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab6:	6999      	ldr	r1, [r3, #24]
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	ea40 0301 	orr.w	r3, r0, r1
 8005ac2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	4b8f      	ldr	r3, [pc, #572]	@ (8005d08 <UART_SetConfig+0x2cc>)
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d005      	beq.n	8005adc <UART_SetConfig+0xa0>
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	4b8d      	ldr	r3, [pc, #564]	@ (8005d0c <UART_SetConfig+0x2d0>)
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d104      	bne.n	8005ae6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005adc:	f7fd ff76 	bl	80039cc <HAL_RCC_GetPCLK2Freq>
 8005ae0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005ae4:	e003      	b.n	8005aee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ae6:	f7fd ff5d 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 8005aea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005af8:	f040 810c 	bne.w	8005d14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b00:	2200      	movs	r2, #0
 8005b02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b0e:	4622      	mov	r2, r4
 8005b10:	462b      	mov	r3, r5
 8005b12:	1891      	adds	r1, r2, r2
 8005b14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b16:	415b      	adcs	r3, r3
 8005b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b1e:	4621      	mov	r1, r4
 8005b20:	eb12 0801 	adds.w	r8, r2, r1
 8005b24:	4629      	mov	r1, r5
 8005b26:	eb43 0901 	adc.w	r9, r3, r1
 8005b2a:	f04f 0200 	mov.w	r2, #0
 8005b2e:	f04f 0300 	mov.w	r3, #0
 8005b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b3e:	4690      	mov	r8, r2
 8005b40:	4699      	mov	r9, r3
 8005b42:	4623      	mov	r3, r4
 8005b44:	eb18 0303 	adds.w	r3, r8, r3
 8005b48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b4c:	462b      	mov	r3, r5
 8005b4e:	eb49 0303 	adc.w	r3, r9, r3
 8005b52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	18db      	adds	r3, r3, r3
 8005b6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b70:	4613      	mov	r3, r2
 8005b72:	eb42 0303 	adc.w	r3, r2, r3
 8005b76:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b80:	f7fa fb8e 	bl	80002a0 <__aeabi_uldivmod>
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	4b61      	ldr	r3, [pc, #388]	@ (8005d10 <UART_SetConfig+0x2d4>)
 8005b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	011c      	lsls	r4, r3, #4
 8005b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b96:	2200      	movs	r2, #0
 8005b98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ba0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ba4:	4642      	mov	r2, r8
 8005ba6:	464b      	mov	r3, r9
 8005ba8:	1891      	adds	r1, r2, r2
 8005baa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005bac:	415b      	adcs	r3, r3
 8005bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005bb4:	4641      	mov	r1, r8
 8005bb6:	eb12 0a01 	adds.w	sl, r2, r1
 8005bba:	4649      	mov	r1, r9
 8005bbc:	eb43 0b01 	adc.w	fp, r3, r1
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bd4:	4692      	mov	sl, r2
 8005bd6:	469b      	mov	fp, r3
 8005bd8:	4643      	mov	r3, r8
 8005bda:	eb1a 0303 	adds.w	r3, sl, r3
 8005bde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005be2:	464b      	mov	r3, r9
 8005be4:	eb4b 0303 	adc.w	r3, fp, r3
 8005be8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bf8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005bfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c00:	460b      	mov	r3, r1
 8005c02:	18db      	adds	r3, r3, r3
 8005c04:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c06:	4613      	mov	r3, r2
 8005c08:	eb42 0303 	adc.w	r3, r2, r3
 8005c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c16:	f7fa fb43 	bl	80002a0 <__aeabi_uldivmod>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4611      	mov	r1, r2
 8005c20:	4b3b      	ldr	r3, [pc, #236]	@ (8005d10 <UART_SetConfig+0x2d4>)
 8005c22:	fba3 2301 	umull	r2, r3, r3, r1
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	2264      	movs	r2, #100	@ 0x64
 8005c2a:	fb02 f303 	mul.w	r3, r2, r3
 8005c2e:	1acb      	subs	r3, r1, r3
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c36:	4b36      	ldr	r3, [pc, #216]	@ (8005d10 <UART_SetConfig+0x2d4>)
 8005c38:	fba3 2302 	umull	r2, r3, r3, r2
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c44:	441c      	add	r4, r3
 8005c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c58:	4642      	mov	r2, r8
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	1891      	adds	r1, r2, r2
 8005c5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c60:	415b      	adcs	r3, r3
 8005c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c68:	4641      	mov	r1, r8
 8005c6a:	1851      	adds	r1, r2, r1
 8005c6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c6e:	4649      	mov	r1, r9
 8005c70:	414b      	adcs	r3, r1
 8005c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c80:	4659      	mov	r1, fp
 8005c82:	00cb      	lsls	r3, r1, #3
 8005c84:	4651      	mov	r1, sl
 8005c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c8a:	4651      	mov	r1, sl
 8005c8c:	00ca      	lsls	r2, r1, #3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	4619      	mov	r1, r3
 8005c92:	4603      	mov	r3, r0
 8005c94:	4642      	mov	r2, r8
 8005c96:	189b      	adds	r3, r3, r2
 8005c98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	460a      	mov	r2, r1
 8005ca0:	eb42 0303 	adc.w	r3, r2, r3
 8005ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005cb4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005cb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	18db      	adds	r3, r3, r3
 8005cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	eb42 0303 	adc.w	r3, r2, r3
 8005cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005cd2:	f7fa fae5 	bl	80002a0 <__aeabi_uldivmod>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4b0d      	ldr	r3, [pc, #52]	@ (8005d10 <UART_SetConfig+0x2d4>)
 8005cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	2164      	movs	r1, #100	@ 0x64
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	3332      	adds	r3, #50	@ 0x32
 8005cee:	4a08      	ldr	r2, [pc, #32]	@ (8005d10 <UART_SetConfig+0x2d4>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	f003 0207 	and.w	r2, r3, #7
 8005cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4422      	add	r2, r4
 8005d02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d04:	e106      	b.n	8005f14 <UART_SetConfig+0x4d8>
 8005d06:	bf00      	nop
 8005d08:	40011000 	.word	0x40011000
 8005d0c:	40011400 	.word	0x40011400
 8005d10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d26:	4642      	mov	r2, r8
 8005d28:	464b      	mov	r3, r9
 8005d2a:	1891      	adds	r1, r2, r2
 8005d2c:	6239      	str	r1, [r7, #32]
 8005d2e:	415b      	adcs	r3, r3
 8005d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d36:	4641      	mov	r1, r8
 8005d38:	1854      	adds	r4, r2, r1
 8005d3a:	4649      	mov	r1, r9
 8005d3c:	eb43 0501 	adc.w	r5, r3, r1
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	f04f 0300 	mov.w	r3, #0
 8005d48:	00eb      	lsls	r3, r5, #3
 8005d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d4e:	00e2      	lsls	r2, r4, #3
 8005d50:	4614      	mov	r4, r2
 8005d52:	461d      	mov	r5, r3
 8005d54:	4643      	mov	r3, r8
 8005d56:	18e3      	adds	r3, r4, r3
 8005d58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d5c:	464b      	mov	r3, r9
 8005d5e:	eb45 0303 	adc.w	r3, r5, r3
 8005d62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d76:	f04f 0200 	mov.w	r2, #0
 8005d7a:	f04f 0300 	mov.w	r3, #0
 8005d7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d82:	4629      	mov	r1, r5
 8005d84:	008b      	lsls	r3, r1, #2
 8005d86:	4621      	mov	r1, r4
 8005d88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	008a      	lsls	r2, r1, #2
 8005d90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d94:	f7fa fa84 	bl	80002a0 <__aeabi_uldivmod>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4b60      	ldr	r3, [pc, #384]	@ (8005f20 <UART_SetConfig+0x4e4>)
 8005d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	011c      	lsls	r4, r3, #4
 8005da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005db0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005db4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005db8:	4642      	mov	r2, r8
 8005dba:	464b      	mov	r3, r9
 8005dbc:	1891      	adds	r1, r2, r2
 8005dbe:	61b9      	str	r1, [r7, #24]
 8005dc0:	415b      	adcs	r3, r3
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dc8:	4641      	mov	r1, r8
 8005dca:	1851      	adds	r1, r2, r1
 8005dcc:	6139      	str	r1, [r7, #16]
 8005dce:	4649      	mov	r1, r9
 8005dd0:	414b      	adcs	r3, r1
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005de0:	4659      	mov	r1, fp
 8005de2:	00cb      	lsls	r3, r1, #3
 8005de4:	4651      	mov	r1, sl
 8005de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dea:	4651      	mov	r1, sl
 8005dec:	00ca      	lsls	r2, r1, #3
 8005dee:	4610      	mov	r0, r2
 8005df0:	4619      	mov	r1, r3
 8005df2:	4603      	mov	r3, r0
 8005df4:	4642      	mov	r2, r8
 8005df6:	189b      	adds	r3, r3, r2
 8005df8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005dfc:	464b      	mov	r3, r9
 8005dfe:	460a      	mov	r2, r1
 8005e00:	eb42 0303 	adc.w	r3, r2, r3
 8005e04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	f04f 0300 	mov.w	r3, #0
 8005e1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e20:	4649      	mov	r1, r9
 8005e22:	008b      	lsls	r3, r1, #2
 8005e24:	4641      	mov	r1, r8
 8005e26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e2a:	4641      	mov	r1, r8
 8005e2c:	008a      	lsls	r2, r1, #2
 8005e2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e32:	f7fa fa35 	bl	80002a0 <__aeabi_uldivmod>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	4b38      	ldr	r3, [pc, #224]	@ (8005f20 <UART_SetConfig+0x4e4>)
 8005e3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005e42:	095b      	lsrs	r3, r3, #5
 8005e44:	2264      	movs	r2, #100	@ 0x64
 8005e46:	fb02 f303 	mul.w	r3, r2, r3
 8005e4a:	1acb      	subs	r3, r1, r3
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	3332      	adds	r3, #50	@ 0x32
 8005e50:	4a33      	ldr	r2, [pc, #204]	@ (8005f20 <UART_SetConfig+0x4e4>)
 8005e52:	fba2 2303 	umull	r2, r3, r2, r3
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e5c:	441c      	add	r4, r3
 8005e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e62:	2200      	movs	r2, #0
 8005e64:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e66:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e6c:	4642      	mov	r2, r8
 8005e6e:	464b      	mov	r3, r9
 8005e70:	1891      	adds	r1, r2, r2
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	415b      	adcs	r3, r3
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	1851      	adds	r1, r2, r1
 8005e80:	6039      	str	r1, [r7, #0]
 8005e82:	4649      	mov	r1, r9
 8005e84:	414b      	adcs	r3, r1
 8005e86:	607b      	str	r3, [r7, #4]
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e94:	4659      	mov	r1, fp
 8005e96:	00cb      	lsls	r3, r1, #3
 8005e98:	4651      	mov	r1, sl
 8005e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e9e:	4651      	mov	r1, sl
 8005ea0:	00ca      	lsls	r2, r1, #3
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	189b      	adds	r3, r3, r2
 8005eac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eae:	464b      	mov	r3, r9
 8005eb0:	460a      	mov	r2, r1
 8005eb2:	eb42 0303 	adc.w	r3, r2, r3
 8005eb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ec2:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ec4:	f04f 0200 	mov.w	r2, #0
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ed0:	4649      	mov	r1, r9
 8005ed2:	008b      	lsls	r3, r1, #2
 8005ed4:	4641      	mov	r1, r8
 8005ed6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eda:	4641      	mov	r1, r8
 8005edc:	008a      	lsls	r2, r1, #2
 8005ede:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ee2:	f7fa f9dd 	bl	80002a0 <__aeabi_uldivmod>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4b0d      	ldr	r3, [pc, #52]	@ (8005f20 <UART_SetConfig+0x4e4>)
 8005eec:	fba3 1302 	umull	r1, r3, r3, r2
 8005ef0:	095b      	lsrs	r3, r3, #5
 8005ef2:	2164      	movs	r1, #100	@ 0x64
 8005ef4:	fb01 f303 	mul.w	r3, r1, r3
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	3332      	adds	r3, #50	@ 0x32
 8005efe:	4a08      	ldr	r2, [pc, #32]	@ (8005f20 <UART_SetConfig+0x4e4>)
 8005f00:	fba2 2303 	umull	r2, r3, r2, r3
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	f003 020f 	and.w	r2, r3, #15
 8005f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4422      	add	r2, r4
 8005f12:	609a      	str	r2, [r3, #8]
}
 8005f14:	bf00      	nop
 8005f16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f20:	51eb851f 	.word	0x51eb851f

08005f24 <ESP32_Init>:
SemaphoreHandle_t xESP32Mutex;
extern SemaphoreHandle_t ReceiveMsgTimeoutMutex;
char ESP32_reveice_data[100];

void ESP32_Init(UART_HandleTypeDef* eps32_huart, UART_HandleTypeDef* log_huart)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
	eps32_TxRx_huart = eps32_huart;
 8005f2e:	4a06      	ldr	r2, [pc, #24]	@ (8005f48 <ESP32_Init+0x24>)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6013      	str	r3, [r2, #0]
	esp32_log_huart = log_huart;
 8005f34:	4a05      	ldr	r2, [pc, #20]	@ (8005f4c <ESP32_Init+0x28>)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6013      	str	r3, [r2, #0]
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	200006b8 	.word	0x200006b8
 8005f4c:	200006bc 	.word	0x200006bc

08005f50 <ESP32_OS_Resources_Init>:

void ESP32_OS_Resources_Init()
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
	xESP32Queue = xQueueCreate(4, sizeof(ESP32MsgStruct));
 8005f54:	2200      	movs	r2, #0
 8005f56:	2164      	movs	r1, #100	@ 0x64
 8005f58:	2004      	movs	r0, #4
 8005f5a:	f001 f803 	bl	8006f64 <xQueueGenericCreate>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	4a04      	ldr	r2, [pc, #16]	@ (8005f74 <ESP32_OS_Resources_Init+0x24>)
 8005f62:	6013      	str	r3, [r2, #0]
	xESP32Mutex = xSemaphoreCreateMutex();
 8005f64:	2001      	movs	r0, #1
 8005f66:	f001 f877 	bl	8007058 <xQueueCreateMutex>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	4a02      	ldr	r2, [pc, #8]	@ (8005f78 <ESP32_OS_Resources_Init+0x28>)
 8005f6e:	6013      	str	r3, [r2, #0]
}
 8005f70:	bf00      	nop
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	200006c0 	.word	0x200006c0
 8005f78:	200006c4 	.word	0x200006c4

08005f7c <ESP32Sender>:

void ESP32Sender(void *pvParameters)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b09c      	sub	sp, #112	@ 0x70
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  ESP32MsgStruct esp32Msg;
  while (1)
  {
	if (xQueueReceive(xESP32Queue, &esp32Msg, portMAX_DELAY) == pdPASS) {
 8005f84:	4b16      	ldr	r3, [pc, #88]	@ (8005fe0 <ESP32Sender+0x64>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f107 010c 	add.w	r1, r7, #12
 8005f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 fa17 	bl	80073c4 <xQueueReceive>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d11c      	bne.n	8005fd6 <ESP32Sender+0x5a>
	  	if (xSemaphoreTake(ReceiveMsgTimeoutMutex, portMAX_DELAY) == pdPASS) {
 8005f9c:	4b11      	ldr	r3, [pc, #68]	@ (8005fe4 <ESP32Sender+0x68>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f001 faef 	bl	8007588 <xQueueSemaphoreTake>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d10a      	bne.n	8005fc6 <ESP32Sender+0x4a>
			ReceiveMsgTimeout = HAL_MAX_DELAY;
 8005fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe8 <ESP32Sender+0x6c>)
 8005fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb6:	601a      	str	r2, [r3, #0]

			xSemaphoreGive(ReceiveMsgTimeoutMutex);
 8005fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe4 <ESP32Sender+0x68>)
 8005fba:	6818      	ldr	r0, [r3, #0]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	f001 f861 	bl	8007088 <xQueueGenericSend>
		}
	  	SendMsg(eps32_TxRx_huart, esp32Msg.msg);
 8005fc6:	4b09      	ldr	r3, [pc, #36]	@ (8005fec <ESP32Sender+0x70>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f107 020c 	add.w	r2, r7, #12
 8005fce:	4611      	mov	r1, r2
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fa ff45 	bl	8000e60 <SendMsg>
	}

	vTaskDelay(pdMS_TO_TICKS(500));
 8005fd6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005fda:	f001 feab 	bl	8007d34 <vTaskDelay>
	if (xQueueReceive(xESP32Queue, &esp32Msg, portMAX_DELAY) == pdPASS) {
 8005fde:	e7d1      	b.n	8005f84 <ESP32Sender+0x8>
 8005fe0:	200006c0 	.word	0x200006c0
 8005fe4:	20000464 	.word	0x20000464
 8005fe8:	20000000 	.word	0x20000000
 8005fec:	200006b8 	.word	0x200006b8

08005ff0 <ESP32Receiver>:
  }
}

void ESP32Receiver(void *pvParameters)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  while (1)
  {
	memset(ESP32_reveice_data, '\0', sizeof(ESP32_reveice_data));
 8005ff8:	2264      	movs	r2, #100	@ 0x64
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	480c      	ldr	r0, [pc, #48]	@ (8006030 <ESP32Receiver+0x40>)
 8005ffe:	f004 fbb1 	bl	800a764 <memset>
    if (ReceiveMsg(eps32_TxRx_huart, ESP32_reveice_data, sizeof(ESP32_reveice_data)) == HAL_OK)
 8006002:	4b0c      	ldr	r3, [pc, #48]	@ (8006034 <ESP32Receiver+0x44>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2264      	movs	r2, #100	@ 0x64
 8006008:	4909      	ldr	r1, [pc, #36]	@ (8006030 <ESP32Receiver+0x40>)
 800600a:	4618      	mov	r0, r3
 800600c:	f7fa ffaa 	bl	8000f64 <ReceiveMsg>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <ESP32Receiver+0x34>
    {
      SendMsg(esp32_log_huart, "\n\rReceive : ESP32: %s\n\r", ESP32_reveice_data);  // TAG:Debug
 8006016:	4b08      	ldr	r3, [pc, #32]	@ (8006038 <ESP32Receiver+0x48>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a05      	ldr	r2, [pc, #20]	@ (8006030 <ESP32Receiver+0x40>)
 800601c:	4907      	ldr	r1, [pc, #28]	@ (800603c <ESP32Receiver+0x4c>)
 800601e:	4618      	mov	r0, r3
 8006020:	f7fa ff1e 	bl	8000e60 <SendMsg>
//    		  SendMsg(esp32_log_huart, "\\0");
//    	  else
//    		  SendMsg(esp32_log_huart, "%c(%d)", ESP32_reveice_data[i], ESP32_reveice_data[i]);
//      }
    }
    vTaskDelay(pdMS_TO_TICKS(500));
 8006024:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006028:	f001 fe84 	bl	8007d34 <vTaskDelay>
	memset(ESP32_reveice_data, '\0', sizeof(ESP32_reveice_data));
 800602c:	e7e4      	b.n	8005ff8 <ESP32Receiver+0x8>
 800602e:	bf00      	nop
 8006030:	200006c8 	.word	0x200006c8
 8006034:	200006b8 	.word	0x200006b8
 8006038:	200006bc 	.word	0x200006bc
 800603c:	0800b1a8 	.word	0x0800b1a8

08006040 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006044:	4904      	ldr	r1, [pc, #16]	@ (8006058 <MX_FATFS_Init+0x18>)
 8006046:	4805      	ldr	r0, [pc, #20]	@ (800605c <MX_FATFS_Init+0x1c>)
 8006048:	f003 fec6 	bl	8009dd8 <FATFS_LinkDriver>
 800604c:	4603      	mov	r3, r0
 800604e:	461a      	mov	r2, r3
 8006050:	4b03      	ldr	r3, [pc, #12]	@ (8006060 <MX_FATFS_Init+0x20>)
 8006052:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006054:	bf00      	nop
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20000730 	.word	0x20000730
 800605c:	20000010 	.word	0x20000010
 8006060:	2000072c 	.word	0x2000072c

08006064 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	4618      	mov	r0, r3
 8006072:	f000 f9f3 	bl	800645c <USER_SPI_initialize>
 8006076:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	4603      	mov	r3, r0
 8006088:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fbe3 	bl	8006858 <USER_SPI_status>
 8006092:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60b9      	str	r1, [r7, #8]
 80060a4:	607a      	str	r2, [r7, #4]
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	4603      	mov	r3, r0
 80060aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80060ac:	7bf8      	ldrb	r0, [r7, #15]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	f000 fbe6 	bl	8006884 <USER_SPI_read>
 80060b8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
 80060ce:	4603      	mov	r3, r0
 80060d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80060d2:	7bf8      	ldrb	r0, [r7, #15]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	f000 fc39 	bl	8006950 <USER_SPI_write>
 80060de:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	603a      	str	r2, [r7, #0]
 80060f2:	71fb      	strb	r3, [r7, #7]
 80060f4:	460b      	mov	r3, r1
 80060f6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80060f8:	79b9      	ldrb	r1, [r7, #6]
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fca2 	bl	8006a48 <USER_SPI_ioctl>
 8006104:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006106:	4618      	mov	r0, r3
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006118:	f7fb fbce 	bl	80018b8 <HAL_GetTick>
 800611c:	4603      	mov	r3, r0
 800611e:	4a04      	ldr	r2, [pc, #16]	@ (8006130 <SPI_Timer_On+0x20>)
 8006120:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006122:	4a04      	ldr	r2, [pc, #16]	@ (8006134 <SPI_Timer_On+0x24>)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6013      	str	r3, [r2, #0]
}
 8006128:	bf00      	nop
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20000738 	.word	0x20000738
 8006134:	2000073c 	.word	0x2000073c

08006138 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800613c:	f7fb fbbc 	bl	80018b8 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	4b06      	ldr	r3, [pc, #24]	@ (800615c <SPI_Timer_Status+0x24>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	1ad2      	subs	r2, r2, r3
 8006148:	4b05      	ldr	r3, [pc, #20]	@ (8006160 <SPI_Timer_Status+0x28>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	429a      	cmp	r2, r3
 800614e:	bf34      	ite	cc
 8006150:	2301      	movcc	r3, #1
 8006152:	2300      	movcs	r3, #0
 8006154:	b2db      	uxtb	r3, r3
}
 8006156:	4618      	mov	r0, r3
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20000738 	.word	0x20000738
 8006160:	2000073c 	.word	0x2000073c

08006164 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af02      	add	r7, sp, #8
 800616a:	4603      	mov	r3, r0
 800616c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800616e:	f107 020f 	add.w	r2, r7, #15
 8006172:	1df9      	adds	r1, r7, #7
 8006174:	2332      	movs	r3, #50	@ 0x32
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	2301      	movs	r3, #1
 800617a:	4804      	ldr	r0, [pc, #16]	@ (800618c <xchg_spi+0x28>)
 800617c:	f7fd ff7b 	bl	8004076 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006180:	7bfb      	ldrb	r3, [r7, #15]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	200002e0 	.word	0x200002e0

08006190 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006190:	b590      	push	{r4, r7, lr}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	e00a      	b.n	80061b6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	18d4      	adds	r4, r2, r3
 80061a6:	20ff      	movs	r0, #255	@ 0xff
 80061a8:	f7ff ffdc 	bl	8006164 <xchg_spi>
 80061ac:	4603      	mov	r3, r0
 80061ae:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3301      	adds	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d3f0      	bcc.n	80061a0 <rcvr_spi_multi+0x10>
	}
}
 80061be:	bf00      	nop
 80061c0:	bf00      	nop
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd90      	pop	{r4, r7, pc}

080061c8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	f04f 33ff 	mov.w	r3, #4294967295
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	4803      	ldr	r0, [pc, #12]	@ (80061ec <xmit_spi_multi+0x24>)
 80061de:	f7fd fe06 	bl	8003dee <HAL_SPI_Transmit>
}
 80061e2:	bf00      	nop
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	200002e0 	.word	0x200002e0

080061f0 <wait_ready>:

// hong
static int wait_ready (	/* 1:Ready, 0:Timeout */
    UINT wt			/* Timeout [ms] */
)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
    BYTE d;
    uint32_t waitSpiTimerTickStart;
    uint32_t waitSpiTimerTickDelay;
    uint32_t elapsed_time;

    waitSpiTimerTickStart = HAL_GetTick();
 80061f8:	f7fb fb5e 	bl	80018b8 <HAL_GetTick>
 80061fc:	6178      	str	r0, [r7, #20]
    waitSpiTimerTickDelay = (uint32_t)wt;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	613b      	str	r3, [r7, #16]
    do {
        d = xchg_spi(0xFF);
 8006202:	20ff      	movs	r0, #255	@ 0xff
 8006204:	f7ff ffae 	bl	8006164 <xchg_spi>
 8006208:	4603      	mov	r3, r0
 800620a:	73fb      	strb	r3, [r7, #15]
        /* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
    } while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800620c:	7bfb      	ldrb	r3, [r7, #15]
 800620e:	2bff      	cmp	r3, #255	@ 0xff
 8006210:	d007      	beq.n	8006222 <wait_ready+0x32>
 8006212:	f7fb fb51 	bl	80018b8 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	429a      	cmp	r2, r3
 8006220:	d8ef      	bhi.n	8006202 <wait_ready+0x12>

    elapsed_time = HAL_GetTick() - waitSpiTimerTickStart;
 8006222:	f7fb fb49 	bl	80018b8 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	60bb      	str	r3, [r7, #8]
    if (d == 0xFF) {
 800622e:	7bfb      	ldrb	r3, [r7, #15]
 8006230:	2bff      	cmp	r3, #255	@ 0xff
 8006232:	d107      	bne.n	8006244 <wait_ready+0x54>
        // Optionally log success, but can be too verbose:
        SendMsg(&huart2, "wait_ready: OK after %lu ms (limit %u ms)\r\n", elapsed_time, wt);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	4908      	ldr	r1, [pc, #32]	@ (800625c <wait_ready+0x6c>)
 800623a:	4809      	ldr	r0, [pc, #36]	@ (8006260 <wait_ready+0x70>)
 800623c:	f7fa fe10 	bl	8000e60 <SendMsg>
        return 1;
 8006240:	2301      	movs	r3, #1
 8006242:	e006      	b.n	8006252 <wait_ready+0x62>
    } else {
        SendMsg(&huart2, "wait_ready: TIMEOUT after %lu ms (limit %u ms)\r\n", elapsed_time, wt); // DEBUG
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	4906      	ldr	r1, [pc, #24]	@ (8006264 <wait_ready+0x74>)
 800624a:	4805      	ldr	r0, [pc, #20]	@ (8006260 <wait_ready+0x70>)
 800624c:	f7fa fe08 	bl	8000e60 <SendMsg>
        return 0;
 8006250:	2300      	movs	r3, #0
    }
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	0800b1c0 	.word	0x0800b1c0
 8006260:	200003c8 	.word	0x200003c8
 8006264:	0800b1ec 	.word	0x0800b1ec

08006268 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800626c:	2201      	movs	r2, #1
 800626e:	2102      	movs	r1, #2
 8006270:	4803      	ldr	r0, [pc, #12]	@ (8006280 <despiselect+0x18>)
 8006272:	f7fb fdcf 	bl	8001e14 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006276:	20ff      	movs	r0, #255	@ 0xff
 8006278:	f7ff ff74 	bl	8006164 <xchg_spi>

}
 800627c:	bf00      	nop
 800627e:	bd80      	pop	{r7, pc}
 8006280:	40020400 	.word	0x40020400

08006284 <spiselect>:
// 	return 0;	/* Timeout */
// }

// hong
static int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
    CS_LOW();		/* Set CS# low */
 8006288:	2200      	movs	r2, #0
 800628a:	2102      	movs	r1, #2
 800628c:	480b      	ldr	r0, [pc, #44]	@ (80062bc <spiselect+0x38>)
 800628e:	f7fb fdc1 	bl	8001e14 <HAL_GPIO_WritePin>
    xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006292:	20ff      	movs	r0, #255	@ 0xff
 8006294:	f7ff ff66 	bl	8006164 <xchg_spi>
    // SendMsg(&huart2, "spiselect: calling wait_ready(500)\r\n"); // Can be too verbose
    if (wait_ready(5000)) { // Original timeout
 8006298:	f241 3088 	movw	r0, #5000	@ 0x1388
 800629c:	f7ff ffa8 	bl	80061f0 <wait_ready>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <spiselect+0x26>
        // SendMsg(&huart2, "spiselect: wait_ready OK\r\n"); // Can be too verbose
        return 1;	/* Wait for card ready */
 80062a6:	2301      	movs	r3, #1
 80062a8:	e006      	b.n	80062b8 <spiselect+0x34>
    }

    SendMsg(&huart2, "spiselect: wait_ready(500) FAILED\r\n"); // DEBUG
 80062aa:	4905      	ldr	r1, [pc, #20]	@ (80062c0 <spiselect+0x3c>)
 80062ac:	4805      	ldr	r0, [pc, #20]	@ (80062c4 <spiselect+0x40>)
 80062ae:	f7fa fdd7 	bl	8000e60 <SendMsg>
    despiselect();
 80062b2:	f7ff ffd9 	bl	8006268 <despiselect>
    return 0;	/* Timeout */
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	40020400 	.word	0x40020400
 80062c0:	0800b220 	.word	0x0800b220
 80062c4:	200003c8 	.word	0x200003c8

080062c8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80062d2:	20c8      	movs	r0, #200	@ 0xc8
 80062d4:	f7ff ff1c 	bl	8006110 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80062d8:	20ff      	movs	r0, #255	@ 0xff
 80062da:	f7ff ff43 	bl	8006164 <xchg_spi>
 80062de:	4603      	mov	r3, r0
 80062e0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	2bff      	cmp	r3, #255	@ 0xff
 80062e6:	d104      	bne.n	80062f2 <rcvr_datablock+0x2a>
 80062e8:	f7ff ff26 	bl	8006138 <SPI_Timer_Status>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f2      	bne.n	80062d8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
 80062f4:	2bfe      	cmp	r3, #254	@ 0xfe
 80062f6:	d001      	beq.n	80062fc <rcvr_datablock+0x34>
 80062f8:	2300      	movs	r3, #0
 80062fa:	e00a      	b.n	8006312 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7ff ff46 	bl	8006190 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006304:	20ff      	movs	r0, #255	@ 0xff
 8006306:	f7ff ff2d 	bl	8006164 <xchg_spi>
 800630a:	20ff      	movs	r0, #255	@ 0xff
 800630c:	f7ff ff2a 	bl	8006164 <xchg_spi>

	return 1;						/* Function succeeded */
 8006310:	2301      	movs	r3, #1
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	460b      	mov	r3, r1
 8006324:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006326:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800632a:	f7ff ff61 	bl	80061f0 <wait_ready>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <xmit_datablock+0x1e>
 8006334:	2300      	movs	r3, #0
 8006336:	e01e      	b.n	8006376 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff ff12 	bl	8006164 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	2bfd      	cmp	r3, #253	@ 0xfd
 8006344:	d016      	beq.n	8006374 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006346:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff ff3c 	bl	80061c8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006350:	20ff      	movs	r0, #255	@ 0xff
 8006352:	f7ff ff07 	bl	8006164 <xchg_spi>
 8006356:	20ff      	movs	r0, #255	@ 0xff
 8006358:	f7ff ff04 	bl	8006164 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800635c:	20ff      	movs	r0, #255	@ 0xff
 800635e:	f7ff ff01 	bl	8006164 <xchg_spi>
 8006362:	4603      	mov	r3, r0
 8006364:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	f003 031f 	and.w	r3, r3, #31
 800636c:	2b05      	cmp	r3, #5
 800636e:	d001      	beq.n	8006374 <xmit_datablock+0x5a>
 8006370:	2300      	movs	r3, #0
 8006372:	e000      	b.n	8006376 <xmit_datablock+0x5c>
	}
	return 1;
 8006374:	2301      	movs	r3, #1
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
 8006384:	4603      	mov	r3, r0
 8006386:	6039      	str	r1, [r7, #0]
 8006388:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800638a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800638e:	2b00      	cmp	r3, #0
 8006390:	da0e      	bge.n	80063b0 <send_cmd+0x32>
		cmd &= 0x7F;
 8006392:	79fb      	ldrb	r3, [r7, #7]
 8006394:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006398:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800639a:	2100      	movs	r1, #0
 800639c:	2037      	movs	r0, #55	@ 0x37
 800639e:	f7ff ffee 	bl	800637e <send_cmd>
 80063a2:	4603      	mov	r3, r0
 80063a4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80063a6:	7bbb      	ldrb	r3, [r7, #14]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d901      	bls.n	80063b0 <send_cmd+0x32>
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
 80063ae:	e051      	b.n	8006454 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80063b0:	79fb      	ldrb	r3, [r7, #7]
 80063b2:	2b0c      	cmp	r3, #12
 80063b4:	d008      	beq.n	80063c8 <send_cmd+0x4a>
		despiselect();
 80063b6:	f7ff ff57 	bl	8006268 <despiselect>
		if (!spiselect()) return 0xFF;
 80063ba:	f7ff ff63 	bl	8006284 <spiselect>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <send_cmd+0x4a>
 80063c4:	23ff      	movs	r3, #255	@ 0xff
 80063c6:	e045      	b.n	8006454 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff fec7 	bl	8006164 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	0e1b      	lsrs	r3, r3, #24
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff fec1 	bl	8006164 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	0c1b      	lsrs	r3, r3, #16
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff febb 	bl	8006164 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	0a1b      	lsrs	r3, r3, #8
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff feb5 	bl	8006164 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff feb0 	bl	8006164 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006404:	2301      	movs	r3, #1
 8006406:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <send_cmd+0x94>
 800640e:	2395      	movs	r3, #149	@ 0x95
 8006410:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006412:	79fb      	ldrb	r3, [r7, #7]
 8006414:	2b08      	cmp	r3, #8
 8006416:	d101      	bne.n	800641c <send_cmd+0x9e>
 8006418:	2387      	movs	r3, #135	@ 0x87
 800641a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff fea0 	bl	8006164 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006424:	79fb      	ldrb	r3, [r7, #7]
 8006426:	2b0c      	cmp	r3, #12
 8006428:	d102      	bne.n	8006430 <send_cmd+0xb2>
 800642a:	20ff      	movs	r0, #255	@ 0xff
 800642c:	f7ff fe9a 	bl	8006164 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006430:	230a      	movs	r3, #10
 8006432:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006434:	20ff      	movs	r0, #255	@ 0xff
 8006436:	f7ff fe95 	bl	8006164 <xchg_spi>
 800643a:	4603      	mov	r3, r0
 800643c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800643e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006442:	2b00      	cmp	r3, #0
 8006444:	da05      	bge.n	8006452 <send_cmd+0xd4>
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	3b01      	subs	r3, #1
 800644a:	73fb      	strb	r3, [r7, #15]
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1f0      	bne.n	8006434 <send_cmd+0xb6>

	return res;							/* Return received response */
 8006452:	7bbb      	ldrb	r3, [r7, #14]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USER_SPI_initialize>:
// hong

inline DSTATUS USER_SPI_initialize (
    BYTE drv /* Physical drive number (0) */
)
{
 800645c:	b590      	push	{r4, r7, lr}
 800645e:	b089      	sub	sp, #36	@ 0x24
 8006460:	af02      	add	r7, sp, #8
 8006462:	4603      	mov	r3, r0
 8006464:	71fb      	strb	r3, [r7, #7]
    BYTE n, ty, cmd, ocr[4];

    if(drv) return STA_NOINIT;			/* Supports only drive 0 */
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <USER_SPI_initialize+0x14>
 800646c:	2301      	movs	r3, #1
 800646e:	e1da      	b.n	8006826 <USER_SPI_initialize+0x3ca>
    if(Stat & STA_NODISK) return Stat;	/* No card in the socket */
 8006470:	4ba2      	ldr	r3, [pc, #648]	@ (80066fc <USER_SPI_initialize+0x2a0>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <USER_SPI_initialize+0x2a>
 800647e:	4b9f      	ldr	r3, [pc, #636]	@ (80066fc <USER_SPI_initialize+0x2a0>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	e1cf      	b.n	8006826 <USER_SPI_initialize+0x3ca>

    FCLK_SLOW();
 8006486:	4b9e      	ldr	r3, [pc, #632]	@ (8006700 <USER_SPI_initialize+0x2a4>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006490:	4b9b      	ldr	r3, [pc, #620]	@ (8006700 <USER_SPI_initialize+0x2a4>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8006498:	601a      	str	r2, [r3, #0]
    for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800649a:	230a      	movs	r3, #10
 800649c:	75fb      	strb	r3, [r7, #23]
 800649e:	e005      	b.n	80064ac <USER_SPI_initialize+0x50>
 80064a0:	20ff      	movs	r0, #255	@ 0xff
 80064a2:	f7ff fe5f 	bl	8006164 <xchg_spi>
 80064a6:	7dfb      	ldrb	r3, [r7, #23]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	75fb      	strb	r3, [r7, #23]
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1f6      	bne.n	80064a0 <USER_SPI_initialize+0x44>

    ty = 0;
 80064b2:	2300      	movs	r3, #0
 80064b4:	75bb      	strb	r3, [r7, #22]
    SendMsg(&huart2, "CMD0 sent...\r\n"); // DEBUG
 80064b6:	4993      	ldr	r1, [pc, #588]	@ (8006704 <USER_SPI_initialize+0x2a8>)
 80064b8:	4893      	ldr	r0, [pc, #588]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 80064ba:	f7fa fcd1 	bl	8000e60 <SendMsg>
    if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80064be:	2100      	movs	r1, #0
 80064c0:	2000      	movs	r0, #0
 80064c2:	f7ff ff5c 	bl	800637e <send_cmd>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	f040 8178 	bne.w	80067be <USER_SPI_initialize+0x362>
        SendMsg(&huart2, "CMD0 OK (R1=0x01)\r\n"); // DEBUG
 80064ce:	498f      	ldr	r1, [pc, #572]	@ (800670c <USER_SPI_initialize+0x2b0>)
 80064d0:	488d      	ldr	r0, [pc, #564]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 80064d2:	f7fa fcc5 	bl	8000e60 <SendMsg>
        SPI_Timer_On(3000);					/* Initialization timeout = 1 sec */
 80064d6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80064da:	f7ff fe19 	bl	8006110 <SPI_Timer_On>
        SendMsg(&huart2, "CMD8 sent...\r\n"); // DEBUG
 80064de:	498c      	ldr	r1, [pc, #560]	@ (8006710 <USER_SPI_initialize+0x2b4>)
 80064e0:	4889      	ldr	r0, [pc, #548]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 80064e2:	f7fa fcbd 	bl	8000e60 <SendMsg>
        if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80064e6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80064ea:	2008      	movs	r0, #8
 80064ec:	f7ff ff47 	bl	800637e <send_cmd>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	f040 80e4 	bne.w	80066c0 <USER_SPI_initialize+0x264>
            SendMsg(&huart2, "CMD8 OK (R1=0x01)\r\n"); // DEBUG
 80064f8:	4986      	ldr	r1, [pc, #536]	@ (8006714 <USER_SPI_initialize+0x2b8>)
 80064fa:	4883      	ldr	r0, [pc, #524]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 80064fc:	f7fa fcb0 	bl	8000e60 <SendMsg>
            for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006500:	2300      	movs	r3, #0
 8006502:	75fb      	strb	r3, [r7, #23]
 8006504:	e00d      	b.n	8006522 <USER_SPI_initialize+0xc6>
 8006506:	7dfc      	ldrb	r4, [r7, #23]
 8006508:	20ff      	movs	r0, #255	@ 0xff
 800650a:	f7ff fe2b 	bl	8006164 <xchg_spi>
 800650e:	4603      	mov	r3, r0
 8006510:	461a      	mov	r2, r3
 8006512:	f104 0318 	add.w	r3, r4, #24
 8006516:	443b      	add	r3, r7
 8006518:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800651c:	7dfb      	ldrb	r3, [r7, #23]
 800651e:	3301      	adds	r3, #1
 8006520:	75fb      	strb	r3, [r7, #23]
 8006522:	7dfb      	ldrb	r3, [r7, #23]
 8006524:	2b03      	cmp	r3, #3
 8006526:	d9ee      	bls.n	8006506 <USER_SPI_initialize+0xaa>
            SendMsg(&huart2, "CMD8 R7: %02X %02X %02X %02X\r\n", ocr[0], ocr[1], ocr[2], ocr[3]); // DEBUG
 8006528:	7b3b      	ldrb	r3, [r7, #12]
 800652a:	4619      	mov	r1, r3
 800652c:	7b7b      	ldrb	r3, [r7, #13]
 800652e:	4618      	mov	r0, r3
 8006530:	7bbb      	ldrb	r3, [r7, #14]
 8006532:	7bfa      	ldrb	r2, [r7, #15]
 8006534:	9201      	str	r2, [sp, #4]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	4603      	mov	r3, r0
 800653a:	460a      	mov	r2, r1
 800653c:	4976      	ldr	r1, [pc, #472]	@ (8006718 <USER_SPI_initialize+0x2bc>)
 800653e:	4872      	ldr	r0, [pc, #456]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 8006540:	f7fa fc8e 	bl	8000e60 <SendMsg>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006544:	7bbb      	ldrb	r3, [r7, #14]
 8006546:	2b01      	cmp	r3, #1
 8006548:	f040 80b5 	bne.w	80066b6 <USER_SPI_initialize+0x25a>
 800654c:	7bfb      	ldrb	r3, [r7, #15]
 800654e:	2baa      	cmp	r3, #170	@ 0xaa
 8006550:	f040 80b1 	bne.w	80066b6 <USER_SPI_initialize+0x25a>
                SendMsg(&huart2, "CMD8 Voltage OK\r\n"); // DEBUG
 8006554:	4971      	ldr	r1, [pc, #452]	@ (800671c <USER_SPI_initialize+0x2c0>)
 8006556:	486c      	ldr	r0, [pc, #432]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 8006558:	f7fa fc82 	bl	8000e60 <SendMsg>
                BYTE acmd41_r1 = 0xFF; // Initialize with a non-ready state
 800655c:	23ff      	movs	r3, #255	@ 0xff
 800655e:	753b      	strb	r3, [r7, #20]
                SendMsg(&huart2, "Starting ACMD41 polling. Timeout: %lu ms\r\n", spiTimerTickDelay); // DEBUG
 8006560:	4b6f      	ldr	r3, [pc, #444]	@ (8006720 <USER_SPI_initialize+0x2c4>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	461a      	mov	r2, r3
 8006566:	496f      	ldr	r1, [pc, #444]	@ (8006724 <USER_SPI_initialize+0x2c8>)
 8006568:	4867      	ldr	r0, [pc, #412]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 800656a:	f7fa fc79 	bl	8000e60 <SendMsg>
                while (SPI_Timer_Status()) {
 800656e:	e01e      	b.n	80065ae <USER_SPI_initialize+0x152>
                    acmd41_r1 = send_cmd(ACMD41, 1UL << 30); /* Send ACMD41 with HCS bit */
 8006570:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006574:	20a9      	movs	r0, #169	@ 0xa9
 8006576:	f7ff ff02 	bl	800637e <send_cmd>
 800657a:	4603      	mov	r3, r0
 800657c:	753b      	strb	r3, [r7, #20]
                    SendMsg(&huart2, "ACMD41 attempt, R1=0x%02X\r\n", acmd41_r1); // DEBUG
 800657e:	7d3b      	ldrb	r3, [r7, #20]
 8006580:	461a      	mov	r2, r3
 8006582:	4969      	ldr	r1, [pc, #420]	@ (8006728 <USER_SPI_initialize+0x2cc>)
 8006584:	4860      	ldr	r0, [pc, #384]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 8006586:	f7fa fc6b 	bl	8000e60 <SendMsg>
                    if (acmd41_r1 == 0x00 || acmd41_r1 == 0xFF) break; /* Initialization completed */
 800658a:	7d3b      	ldrb	r3, [r7, #20]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d013      	beq.n	80065b8 <USER_SPI_initialize+0x15c>
 8006590:	7d3b      	ldrb	r3, [r7, #20]
 8006592:	2bff      	cmp	r3, #255	@ 0xff
 8006594:	d010      	beq.n	80065b8 <USER_SPI_initialize+0x15c>
                    if (acmd41_r1 != 0x01) {      /* Not busy (0x01) and not ready (0x00) -> error from send_cmd (e.g., 0xFF) */
 8006596:	7d3b      	ldrb	r3, [r7, #20]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d005      	beq.n	80065a8 <USER_SPI_initialize+0x14c>
                        SendMsg(&huart2, "ACMD41 poll: send_cmd returned error 0x%02X. Aborting poll.\r\n", acmd41_r1); // DEBUG
 800659c:	7d3b      	ldrb	r3, [r7, #20]
 800659e:	461a      	mov	r2, r3
 80065a0:	4962      	ldr	r1, [pc, #392]	@ (800672c <USER_SPI_initialize+0x2d0>)
 80065a2:	4859      	ldr	r0, [pc, #356]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 80065a4:	f7fa fc5c 	bl	8000e60 <SendMsg>
                        //break; 
                    }
                    /* Card is busy (R1=0x01), continue polling */
                    HAL_Delay(200); // Increased delay between polls
 80065a8:	20c8      	movs	r0, #200	@ 0xc8
 80065aa:	f7fb f991 	bl	80018d0 <HAL_Delay>
                while (SPI_Timer_Status()) {
 80065ae:	f7ff fdc3 	bl	8006138 <SPI_Timer_Status>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1db      	bne.n	8006570 <USER_SPI_initialize+0x114>
                }

                if ((acmd41_r1 == 0x00 || acmd41_r1 == 0xFF) && SPI_Timer_Status()) { /* Check if ready and timer has not expired */
 80065b8:	7d3b      	ldrb	r3, [r7, #20]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <USER_SPI_initialize+0x168>
 80065be:	7d3b      	ldrb	r3, [r7, #20]
 80065c0:	2bff      	cmp	r3, #255	@ 0xff
 80065c2:	d161      	bne.n	8006688 <USER_SPI_initialize+0x22c>
 80065c4:	f7ff fdb8 	bl	8006138 <SPI_Timer_Status>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d05c      	beq.n	8006688 <USER_SPI_initialize+0x22c>
                    SendMsg(&huart2, "ACMD41 OK (R1=0x00 || 0xFF)\r\n"); // DEBUG
 80065ce:	4958      	ldr	r1, [pc, #352]	@ (8006730 <USER_SPI_initialize+0x2d4>)
 80065d0:	484d      	ldr	r0, [pc, #308]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 80065d2:	f7fa fc45 	bl	8000e60 <SendMsg>
                    BYTE cmd58_r1 = send_cmd(CMD58, 0);
 80065d6:	2100      	movs	r1, #0
 80065d8:	203a      	movs	r0, #58	@ 0x3a
 80065da:	f7ff fed0 	bl	800637e <send_cmd>
 80065de:	4603      	mov	r3, r0
 80065e0:	74fb      	strb	r3, [r7, #19]
					if (cmd58_r1 == 0 || cmd58_r1 == 0xFF) {		/* Check CCS bit in the OCR */
 80065e2:	7cfb      	ldrb	r3, [r7, #19]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <USER_SPI_initialize+0x192>
 80065e8:	7cfb      	ldrb	r3, [r7, #19]
 80065ea:	2bff      	cmp	r3, #255	@ 0xff
 80065ec:	d143      	bne.n	8006676 <USER_SPI_initialize+0x21a>
						SendMsg(&huart2, "CMD58 OK (R1=0x00 || 0xFF)\r\n"); // DEBUG
 80065ee:	4951      	ldr	r1, [pc, #324]	@ (8006734 <USER_SPI_initialize+0x2d8>)
 80065f0:	4845      	ldr	r0, [pc, #276]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 80065f2:	f7fa fc35 	bl	8000e60 <SendMsg>
						SendMsg(&huart2, "Reading OCR bytes...\r\n"); // DEBUG
 80065f6:	4950      	ldr	r1, [pc, #320]	@ (8006738 <USER_SPI_initialize+0x2dc>)
 80065f8:	4843      	ldr	r0, [pc, #268]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 80065fa:	f7fa fc31 	bl	8000e60 <SendMsg>
						for (n = 0; n < 4; n++) {
 80065fe:	2300      	movs	r3, #0
 8006600:	75fb      	strb	r3, [r7, #23]
 8006602:	e017      	b.n	8006634 <USER_SPI_initialize+0x1d8>
							ocr[n] = xchg_spi(0xFF); // Read one byte of OCR
 8006604:	7dfc      	ldrb	r4, [r7, #23]
 8006606:	20ff      	movs	r0, #255	@ 0xff
 8006608:	f7ff fdac 	bl	8006164 <xchg_spi>
 800660c:	4603      	mov	r3, r0
 800660e:	461a      	mov	r2, r3
 8006610:	f104 0318 	add.w	r3, r4, #24
 8006614:	443b      	add	r3, r7
 8006616:	f803 2c0c 	strb.w	r2, [r3, #-12]
							SendMsg(&huart2, "OCR byte %d: 0x%02X\r\n", n, ocr[n]); // DEBUG
 800661a:	7dfa      	ldrb	r2, [r7, #23]
 800661c:	7dfb      	ldrb	r3, [r7, #23]
 800661e:	3318      	adds	r3, #24
 8006620:	443b      	add	r3, r7
 8006622:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006626:	4945      	ldr	r1, [pc, #276]	@ (800673c <USER_SPI_initialize+0x2e0>)
 8006628:	4837      	ldr	r0, [pc, #220]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 800662a:	f7fa fc19 	bl	8000e60 <SendMsg>
						for (n = 0; n < 4; n++) {
 800662e:	7dfb      	ldrb	r3, [r7, #23]
 8006630:	3301      	adds	r3, #1
 8006632:	75fb      	strb	r3, [r7, #23]
 8006634:	7dfb      	ldrb	r3, [r7, #23]
 8006636:	2b03      	cmp	r3, #3
 8006638:	d9e4      	bls.n	8006604 <USER_SPI_initialize+0x1a8>
						}
						SendMsg(&huart2, "OCR raw: %02X %02X %02X %02X\r\n", ocr[0], ocr[1], ocr[2], ocr[3]); // DEBUG
 800663a:	7b3b      	ldrb	r3, [r7, #12]
 800663c:	4619      	mov	r1, r3
 800663e:	7b7b      	ldrb	r3, [r7, #13]
 8006640:	4618      	mov	r0, r3
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	7bfa      	ldrb	r2, [r7, #15]
 8006646:	9201      	str	r2, [sp, #4]
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	4603      	mov	r3, r0
 800664c:	460a      	mov	r2, r1
 800664e:	493c      	ldr	r1, [pc, #240]	@ (8006740 <USER_SPI_initialize+0x2e4>)
 8006650:	482d      	ldr	r0, [pc, #180]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 8006652:	f7fa fc05 	bl	8000e60 <SendMsg>
						ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006656:	7b3b      	ldrb	r3, [r7, #12]
 8006658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <USER_SPI_initialize+0x208>
 8006660:	230c      	movs	r3, #12
 8006662:	e000      	b.n	8006666 <USER_SPI_initialize+0x20a>
 8006664:	2304      	movs	r3, #4
 8006666:	75bb      	strb	r3, [r7, #22]
						SendMsg(&huart2, "Determined ty: 0x%02X based on ocr[0]=0x%02X\r\n", ty, ocr[0]); // DEBUG
 8006668:	7dba      	ldrb	r2, [r7, #22]
 800666a:	7b3b      	ldrb	r3, [r7, #12]
 800666c:	4935      	ldr	r1, [pc, #212]	@ (8006744 <USER_SPI_initialize+0x2e8>)
 800666e:	4826      	ldr	r0, [pc, #152]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 8006670:	f7fa fbf6 	bl	8000e60 <SendMsg>
                if ((acmd41_r1 == 0x00 || acmd41_r1 == 0xFF) && SPI_Timer_Status()) { /* Check if ready and timer has not expired */
 8006674:	e01e      	b.n	80066b4 <USER_SPI_initialize+0x258>
					} else {
                        SendMsg(&huart2, "CMD58 failed after successful ACMD41 (cmd58_r1 : %d)\r\n", cmd58_r1); // DEBUG
 8006676:	7cfb      	ldrb	r3, [r7, #19]
 8006678:	461a      	mov	r2, r3
 800667a:	4933      	ldr	r1, [pc, #204]	@ (8006748 <USER_SPI_initialize+0x2ec>)
 800667c:	4822      	ldr	r0, [pc, #136]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 800667e:	f7fa fbef 	bl	8000e60 <SendMsg>
                        ty = 0;
 8006682:	2300      	movs	r3, #0
 8006684:	75bb      	strb	r3, [r7, #22]
                if ((acmd41_r1 == 0x00 || acmd41_r1 == 0xFF) && SPI_Timer_Status()) { /* Check if ready and timer has not expired */
 8006686:	e015      	b.n	80066b4 <USER_SPI_initialize+0x258>
                    }
                } else { /* ACMD41 timed out or failed with an error */
                    if (!SPI_Timer_Status()) {
 8006688:	f7ff fd56 	bl	8006138 <SPI_Timer_Status>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d107      	bne.n	80066a2 <USER_SPI_initialize+0x246>
                        SendMsg(&huart2, "ACMD41 timed out (main timer %lu ms expired). Last R1=0x%02X\r\n", spiTimerTickDelay, acmd41_r1); // DEBUG
 8006692:	4b23      	ldr	r3, [pc, #140]	@ (8006720 <USER_SPI_initialize+0x2c4>)
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	7d3b      	ldrb	r3, [r7, #20]
 8006698:	492c      	ldr	r1, [pc, #176]	@ (800674c <USER_SPI_initialize+0x2f0>)
 800669a:	481b      	ldr	r0, [pc, #108]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 800669c:	f7fa fbe0 	bl	8000e60 <SendMsg>
 80066a0:	e005      	b.n	80066ae <USER_SPI_initialize+0x252>
                    } else { 
                         SendMsg(&huart2, "ACMD41 poll failed. Last R1=0x%02X (main timer OK)\r\n", acmd41_r1); // DEBUG
 80066a2:	7d3b      	ldrb	r3, [r7, #20]
 80066a4:	461a      	mov	r2, r3
 80066a6:	492a      	ldr	r1, [pc, #168]	@ (8006750 <USER_SPI_initialize+0x2f4>)
 80066a8:	4817      	ldr	r0, [pc, #92]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 80066aa:	f7fa fbd9 	bl	8000e60 <SendMsg>
                    }
                    ty = 0; // Ensure ty is 0 if ACMD41 didn't complete successfully
 80066ae:	2300      	movs	r3, #0
 80066b0:	75bb      	strb	r3, [r7, #22]
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80066b2:	e088      	b.n	80067c6 <USER_SPI_initialize+0x36a>
 80066b4:	e087      	b.n	80067c6 <USER_SPI_initialize+0x36a>
                }
            } else {
                SendMsg(&huart2, "CMD8 Voltage mismatch\r\n"); // DEBUG
 80066b6:	4927      	ldr	r1, [pc, #156]	@ (8006754 <USER_SPI_initialize+0x2f8>)
 80066b8:	4813      	ldr	r0, [pc, #76]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 80066ba:	f7fa fbd1 	bl	8000e60 <SendMsg>
 80066be:	e082      	b.n	80067c6 <USER_SPI_initialize+0x36a>
            }
        } else {	/* Not SDv2 card */
            SendMsg(&huart2, "CMD8 failed (not R1=0x01), could be SDv1/MMC\r\n"); // DEBUG
 80066c0:	4925      	ldr	r1, [pc, #148]	@ (8006758 <USER_SPI_initialize+0x2fc>)
 80066c2:	4811      	ldr	r0, [pc, #68]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 80066c4:	f7fa fbcc 	bl	8000e60 <SendMsg>
            if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80066c8:	2100      	movs	r1, #0
 80066ca:	20a9      	movs	r0, #169	@ 0xa9
 80066cc:	f7ff fe57 	bl	800637e <send_cmd>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d808      	bhi.n	80066e8 <USER_SPI_initialize+0x28c>
                SendMsg(&huart2, "ACMD41 (for SDv1) sent\r\n"); // DEBUG
 80066d6:	4921      	ldr	r1, [pc, #132]	@ (800675c <USER_SPI_initialize+0x300>)
 80066d8:	480b      	ldr	r0, [pc, #44]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 80066da:	f7fa fbc1 	bl	8000e60 <SendMsg>
                ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80066de:	2302      	movs	r3, #2
 80066e0:	75bb      	strb	r3, [r7, #22]
 80066e2:	23a9      	movs	r3, #169	@ 0xa9
 80066e4:	757b      	strb	r3, [r7, #21]
 80066e6:	e044      	b.n	8006772 <USER_SPI_initialize+0x316>
            } else {
                SendMsg(&huart2, "CMD1 (for MMC) sent\r\n"); // DEBUG
 80066e8:	491d      	ldr	r1, [pc, #116]	@ (8006760 <USER_SPI_initialize+0x304>)
 80066ea:	4807      	ldr	r0, [pc, #28]	@ (8006708 <USER_SPI_initialize+0x2ac>)
 80066ec:	f7fa fbb8 	bl	8000e60 <SendMsg>
                ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80066f0:	2301      	movs	r3, #1
 80066f2:	75bb      	strb	r3, [r7, #22]
 80066f4:	2301      	movs	r3, #1
 80066f6:	757b      	strb	r3, [r7, #21]
            }
            while (SPI_Timer_Status() && send_cmd(cmd, 0)) { /* Wait for end of initialization */
 80066f8:	e03b      	b.n	8006772 <USER_SPI_initialize+0x316>
 80066fa:	bf00      	nop
 80066fc:	20000024 	.word	0x20000024
 8006700:	200002e0 	.word	0x200002e0
 8006704:	0800b244 	.word	0x0800b244
 8006708:	200003c8 	.word	0x200003c8
 800670c:	0800b254 	.word	0x0800b254
 8006710:	0800b268 	.word	0x0800b268
 8006714:	0800b278 	.word	0x0800b278
 8006718:	0800b28c 	.word	0x0800b28c
 800671c:	0800b2ac 	.word	0x0800b2ac
 8006720:	2000073c 	.word	0x2000073c
 8006724:	0800b2c0 	.word	0x0800b2c0
 8006728:	0800b2ec 	.word	0x0800b2ec
 800672c:	0800b308 	.word	0x0800b308
 8006730:	0800b348 	.word	0x0800b348
 8006734:	0800b368 	.word	0x0800b368
 8006738:	0800b388 	.word	0x0800b388
 800673c:	0800b3a0 	.word	0x0800b3a0
 8006740:	0800b3b8 	.word	0x0800b3b8
 8006744:	0800b3d8 	.word	0x0800b3d8
 8006748:	0800b408 	.word	0x0800b408
 800674c:	0800b440 	.word	0x0800b440
 8006750:	0800b480 	.word	0x0800b480
 8006754:	0800b4b8 	.word	0x0800b4b8
 8006758:	0800b4d0 	.word	0x0800b4d0
 800675c:	0800b500 	.word	0x0800b500
 8006760:	0800b51c 	.word	0x0800b51c
                SendMsg(&huart2, "SDv1/MMC init pending...\r\n"); // DEBUG
 8006764:	4932      	ldr	r1, [pc, #200]	@ (8006830 <USER_SPI_initialize+0x3d4>)
 8006766:	4833      	ldr	r0, [pc, #204]	@ (8006834 <USER_SPI_initialize+0x3d8>)
 8006768:	f7fa fb7a 	bl	8000e60 <SendMsg>
                HAL_Delay(10); // Small delay
 800676c:	200a      	movs	r0, #10
 800676e:	f7fb f8af 	bl	80018d0 <HAL_Delay>
            while (SPI_Timer_Status() && send_cmd(cmd, 0)) { /* Wait for end of initialization */
 8006772:	f7ff fce1 	bl	8006138 <SPI_Timer_Status>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d007      	beq.n	800678c <USER_SPI_initialize+0x330>
 800677c:	7d7b      	ldrb	r3, [r7, #21]
 800677e:	2100      	movs	r1, #0
 8006780:	4618      	mov	r0, r3
 8006782:	f7ff fdfc 	bl	800637e <send_cmd>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1eb      	bne.n	8006764 <USER_SPI_initialize+0x308>
            }
            if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0) {	/* Set block length: 512 */
 800678c:	f7ff fcd4 	bl	8006138 <SPI_Timer_Status>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d007      	beq.n	80067a6 <USER_SPI_initialize+0x34a>
 8006796:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800679a:	2010      	movs	r0, #16
 800679c:	f7ff fdef 	bl	800637e <send_cmd>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d006      	beq.n	80067b4 <USER_SPI_initialize+0x358>
                SendMsg(&huart2, "SDv1/MMC init timeout or CMD16 failed\r\n"); // DEBUG
 80067a6:	4924      	ldr	r1, [pc, #144]	@ (8006838 <USER_SPI_initialize+0x3dc>)
 80067a8:	4822      	ldr	r0, [pc, #136]	@ (8006834 <USER_SPI_initialize+0x3d8>)
 80067aa:	f7fa fb59 	bl	8000e60 <SendMsg>
                ty = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	75bb      	strb	r3, [r7, #22]
 80067b2:	e008      	b.n	80067c6 <USER_SPI_initialize+0x36a>
            } else {
                SendMsg(&huart2, "SDv1/MMC CMD16 OK\r\n"); // DEBUG
 80067b4:	4921      	ldr	r1, [pc, #132]	@ (800683c <USER_SPI_initialize+0x3e0>)
 80067b6:	481f      	ldr	r0, [pc, #124]	@ (8006834 <USER_SPI_initialize+0x3d8>)
 80067b8:	f7fa fb52 	bl	8000e60 <SendMsg>
 80067bc:	e003      	b.n	80067c6 <USER_SPI_initialize+0x36a>
            }
        }
    } else {
        SendMsg(&huart2, "CMD0 failed (not R1=0x01)\r\n"); // DEBUG
 80067be:	4920      	ldr	r1, [pc, #128]	@ (8006840 <USER_SPI_initialize+0x3e4>)
 80067c0:	481c      	ldr	r0, [pc, #112]	@ (8006834 <USER_SPI_initialize+0x3d8>)
 80067c2:	f7fa fb4d 	bl	8000e60 <SendMsg>
    }

    CardType = ty;
 80067c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006844 <USER_SPI_initialize+0x3e8>)
 80067c8:	7dbb      	ldrb	r3, [r7, #22]
 80067ca:	7013      	strb	r3, [r2, #0]
    despiselect();
 80067cc:	f7ff fd4c 	bl	8006268 <despiselect>

    if (ty) {			/* OK */
 80067d0:	7dbb      	ldrb	r3, [r7, #22]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d018      	beq.n	8006808 <USER_SPI_initialize+0x3ac>
        SendMsg(&huart2, "SD Card Initialized. Type: %02X\r\n", ty); // DEBUG
 80067d6:	7dbb      	ldrb	r3, [r7, #22]
 80067d8:	461a      	mov	r2, r3
 80067da:	491b      	ldr	r1, [pc, #108]	@ (8006848 <USER_SPI_initialize+0x3ec>)
 80067dc:	4815      	ldr	r0, [pc, #84]	@ (8006834 <USER_SPI_initialize+0x3d8>)
 80067de:	f7fa fb3f 	bl	8000e60 <SendMsg>
        FCLK_FAST();			/* Set fast clock */
 80067e2:	4b1a      	ldr	r3, [pc, #104]	@ (800684c <USER_SPI_initialize+0x3f0>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80067ec:	4b17      	ldr	r3, [pc, #92]	@ (800684c <USER_SPI_initialize+0x3f0>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f042 0210 	orr.w	r2, r2, #16
 80067f4:	601a      	str	r2, [r3, #0]
        Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80067f6:	4b16      	ldr	r3, [pc, #88]	@ (8006850 <USER_SPI_initialize+0x3f4>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	f023 0301 	bic.w	r3, r3, #1
 8006800:	b2da      	uxtb	r2, r3
 8006802:	4b13      	ldr	r3, [pc, #76]	@ (8006850 <USER_SPI_initialize+0x3f4>)
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	e00b      	b.n	8006820 <USER_SPI_initialize+0x3c4>
    } else {			/* Failed */
        SendMsg(&huart2, "SD Card Initialization FAILED. ty=0\r\n"); // DEBUG
 8006808:	4912      	ldr	r1, [pc, #72]	@ (8006854 <USER_SPI_initialize+0x3f8>)
 800680a:	480a      	ldr	r0, [pc, #40]	@ (8006834 <USER_SPI_initialize+0x3d8>)
 800680c:	f7fa fb28 	bl	8000e60 <SendMsg>
        Stat |= STA_NOINIT;
 8006810:	4b0f      	ldr	r3, [pc, #60]	@ (8006850 <USER_SPI_initialize+0x3f4>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	b2db      	uxtb	r3, r3
 8006816:	f043 0301 	orr.w	r3, r3, #1
 800681a:	b2da      	uxtb	r2, r3
 800681c:	4b0c      	ldr	r3, [pc, #48]	@ (8006850 <USER_SPI_initialize+0x3f4>)
 800681e:	701a      	strb	r2, [r3, #0]
    }

    return Stat;
 8006820:	4b0b      	ldr	r3, [pc, #44]	@ (8006850 <USER_SPI_initialize+0x3f4>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	b2db      	uxtb	r3, r3
}
 8006826:	4618      	mov	r0, r3
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	bd90      	pop	{r4, r7, pc}
 800682e:	bf00      	nop
 8006830:	0800b534 	.word	0x0800b534
 8006834:	200003c8 	.word	0x200003c8
 8006838:	0800b550 	.word	0x0800b550
 800683c:	0800b578 	.word	0x0800b578
 8006840:	0800b58c 	.word	0x0800b58c
 8006844:	20000734 	.word	0x20000734
 8006848:	0800b5a8 	.word	0x0800b5a8
 800684c:	200002e0 	.word	0x200002e0
 8006850:	20000024 	.word	0x20000024
 8006854:	0800b5cc 	.word	0x0800b5cc

08006858 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	4603      	mov	r3, r0
 8006860:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006862:	79fb      	ldrb	r3, [r7, #7]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <USER_SPI_status+0x14>
 8006868:	2301      	movs	r3, #1
 800686a:	e002      	b.n	8006872 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800686c:	4b04      	ldr	r3, [pc, #16]	@ (8006880 <USER_SPI_status+0x28>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	b2db      	uxtb	r3, r3
}
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	20000024 	.word	0x20000024

08006884 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
 800688e:	603b      	str	r3, [r7, #0]
 8006890:	4603      	mov	r3, r0
 8006892:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d102      	bne.n	80068a0 <USER_SPI_read+0x1c>
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <USER_SPI_read+0x20>
 80068a0:	2304      	movs	r3, #4
 80068a2:	e04d      	b.n	8006940 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80068a4:	4b28      	ldr	r3, [pc, #160]	@ (8006948 <USER_SPI_read+0xc4>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <USER_SPI_read+0x32>
 80068b2:	2303      	movs	r3, #3
 80068b4:	e044      	b.n	8006940 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80068b6:	4b25      	ldr	r3, [pc, #148]	@ (800694c <USER_SPI_read+0xc8>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	f003 0308 	and.w	r3, r3, #8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d102      	bne.n	80068c8 <USER_SPI_read+0x44>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	025b      	lsls	r3, r3, #9
 80068c6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d111      	bne.n	80068f2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	2011      	movs	r0, #17
 80068d2:	f7ff fd54 	bl	800637e <send_cmd>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d129      	bne.n	8006930 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80068dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80068e0:	68b8      	ldr	r0, [r7, #8]
 80068e2:	f7ff fcf1 	bl	80062c8 <rcvr_datablock>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d021      	beq.n	8006930 <USER_SPI_read+0xac>
			count = 0;
 80068ec:	2300      	movs	r3, #0
 80068ee:	603b      	str	r3, [r7, #0]
 80068f0:	e01e      	b.n	8006930 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	2012      	movs	r0, #18
 80068f6:	f7ff fd42 	bl	800637e <send_cmd>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d117      	bne.n	8006930 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006900:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006904:	68b8      	ldr	r0, [r7, #8]
 8006906:	f7ff fcdf 	bl	80062c8 <rcvr_datablock>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00a      	beq.n	8006926 <USER_SPI_read+0xa2>
				buff += 512;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006916:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	3b01      	subs	r3, #1
 800691c:	603b      	str	r3, [r7, #0]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1ed      	bne.n	8006900 <USER_SPI_read+0x7c>
 8006924:	e000      	b.n	8006928 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006926:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006928:	2100      	movs	r1, #0
 800692a:	200c      	movs	r0, #12
 800692c:	f7ff fd27 	bl	800637e <send_cmd>
		}
	}
	despiselect();
 8006930:	f7ff fc9a 	bl	8006268 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	bf14      	ite	ne
 800693a:	2301      	movne	r3, #1
 800693c:	2300      	moveq	r3, #0
 800693e:	b2db      	uxtb	r3, r3
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	20000024 	.word	0x20000024
 800694c:	20000734 	.word	0x20000734

08006950 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	603b      	str	r3, [r7, #0]
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d102      	bne.n	800696c <USER_SPI_write+0x1c>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <USER_SPI_write+0x20>
 800696c:	2304      	movs	r3, #4
 800696e:	e063      	b.n	8006a38 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006970:	4b33      	ldr	r3, [pc, #204]	@ (8006a40 <USER_SPI_write+0xf0>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <USER_SPI_write+0x32>
 800697e:	2303      	movs	r3, #3
 8006980:	e05a      	b.n	8006a38 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006982:	4b2f      	ldr	r3, [pc, #188]	@ (8006a40 <USER_SPI_write+0xf0>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	b2db      	uxtb	r3, r3
 8006988:	f003 0304 	and.w	r3, r3, #4
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <USER_SPI_write+0x44>
 8006990:	2302      	movs	r3, #2
 8006992:	e051      	b.n	8006a38 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006994:	4b2b      	ldr	r3, [pc, #172]	@ (8006a44 <USER_SPI_write+0xf4>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	f003 0308 	and.w	r3, r3, #8
 800699c:	2b00      	cmp	r3, #0
 800699e:	d102      	bne.n	80069a6 <USER_SPI_write+0x56>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	025b      	lsls	r3, r3, #9
 80069a4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d110      	bne.n	80069ce <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	2018      	movs	r0, #24
 80069b0:	f7ff fce5 	bl	800637e <send_cmd>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d136      	bne.n	8006a28 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80069ba:	21fe      	movs	r1, #254	@ 0xfe
 80069bc:	68b8      	ldr	r0, [r7, #8]
 80069be:	f7ff fcac 	bl	800631a <xmit_datablock>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d02f      	beq.n	8006a28 <USER_SPI_write+0xd8>
			count = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	603b      	str	r3, [r7, #0]
 80069cc:	e02c      	b.n	8006a28 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80069ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006a44 <USER_SPI_write+0xf4>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	f003 0306 	and.w	r3, r3, #6
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <USER_SPI_write+0x92>
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	2097      	movs	r0, #151	@ 0x97
 80069de:	f7ff fcce 	bl	800637e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	2019      	movs	r0, #25
 80069e6:	f7ff fcca 	bl	800637e <send_cmd>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d11b      	bne.n	8006a28 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80069f0:	21fc      	movs	r1, #252	@ 0xfc
 80069f2:	68b8      	ldr	r0, [r7, #8]
 80069f4:	f7ff fc91 	bl	800631a <xmit_datablock>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <USER_SPI_write+0xc4>
				buff += 512;
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006a04:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	603b      	str	r3, [r7, #0]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1ee      	bne.n	80069f0 <USER_SPI_write+0xa0>
 8006a12:	e000      	b.n	8006a16 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006a14:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006a16:	21fd      	movs	r1, #253	@ 0xfd
 8006a18:	2000      	movs	r0, #0
 8006a1a:	f7ff fc7e 	bl	800631a <xmit_datablock>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <USER_SPI_write+0xd8>
 8006a24:	2301      	movs	r3, #1
 8006a26:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006a28:	f7ff fc1e 	bl	8006268 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	bf14      	ite	ne
 8006a32:	2301      	movne	r3, #1
 8006a34:	2300      	moveq	r3, #0
 8006a36:	b2db      	uxtb	r3, r3
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	20000024 	.word	0x20000024
 8006a44:	20000734 	.word	0x20000734

08006a48 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08c      	sub	sp, #48	@ 0x30
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	603a      	str	r2, [r7, #0]
 8006a52:	71fb      	strb	r3, [r7, #7]
 8006a54:	460b      	mov	r3, r1
 8006a56:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006a58:	79fb      	ldrb	r3, [r7, #7]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <USER_SPI_ioctl+0x1a>
 8006a5e:	2304      	movs	r3, #4
 8006a60:	e15a      	b.n	8006d18 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006a62:	4baf      	ldr	r3, [pc, #700]	@ (8006d20 <USER_SPI_ioctl+0x2d8>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <USER_SPI_ioctl+0x2c>
 8006a70:	2303      	movs	r3, #3
 8006a72:	e151      	b.n	8006d18 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8006a7a:	79bb      	ldrb	r3, [r7, #6]
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	f200 8136 	bhi.w	8006cee <USER_SPI_ioctl+0x2a6>
 8006a82:	a201      	add	r2, pc, #4	@ (adr r2, 8006a88 <USER_SPI_ioctl+0x40>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006a9d 	.word	0x08006a9d
 8006a8c:	08006ab1 	.word	0x08006ab1
 8006a90:	08006cef 	.word	0x08006cef
 8006a94:	08006b5d 	.word	0x08006b5d
 8006a98:	08006c53 	.word	0x08006c53
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006a9c:	f7ff fbf2 	bl	8006284 <spiselect>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 8127 	beq.w	8006cf6 <USER_SPI_ioctl+0x2ae>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006aae:	e122      	b.n	8006cf6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	2009      	movs	r0, #9
 8006ab4:	f7ff fc63 	bl	800637e <send_cmd>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f040 811d 	bne.w	8006cfa <USER_SPI_ioctl+0x2b2>
 8006ac0:	f107 030c 	add.w	r3, r7, #12
 8006ac4:	2110      	movs	r1, #16
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff fbfe 	bl	80062c8 <rcvr_datablock>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 8113 	beq.w	8006cfa <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006ad4:	7b3b      	ldrb	r3, [r7, #12]
 8006ad6:	099b      	lsrs	r3, r3, #6
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d111      	bne.n	8006b02 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006ade:	7d7b      	ldrb	r3, [r7, #21]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	7d3b      	ldrb	r3, [r7, #20]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	4413      	add	r3, r2
 8006ae8:	461a      	mov	r2, r3
 8006aea:	7cfb      	ldrb	r3, [r7, #19]
 8006aec:	041b      	lsls	r3, r3, #16
 8006aee:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8006af2:	4413      	add	r3, r2
 8006af4:	3301      	adds	r3, #1
 8006af6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	029a      	lsls	r2, r3, #10
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	e028      	b.n	8006b54 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006b02:	7c7b      	ldrb	r3, [r7, #17]
 8006b04:	f003 030f 	and.w	r3, r3, #15
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	7dbb      	ldrb	r3, [r7, #22]
 8006b0c:	09db      	lsrs	r3, r3, #7
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	4413      	add	r3, r2
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	7d7b      	ldrb	r3, [r7, #21]
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	f003 0306 	and.w	r3, r3, #6
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	4413      	add	r3, r2
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	3302      	adds	r3, #2
 8006b26:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006b2a:	7d3b      	ldrb	r3, [r7, #20]
 8006b2c:	099b      	lsrs	r3, r3, #6
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	461a      	mov	r2, r3
 8006b32:	7cfb      	ldrb	r3, [r7, #19]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	441a      	add	r2, r3
 8006b38:	7cbb      	ldrb	r3, [r7, #18]
 8006b3a:	029b      	lsls	r3, r3, #10
 8006b3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b40:	4413      	add	r3, r2
 8006b42:	3301      	adds	r3, #1
 8006b44:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006b46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b4a:	3b09      	subs	r3, #9
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	409a      	lsls	r2, r3
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006b5a:	e0ce      	b.n	8006cfa <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006b5c:	4b71      	ldr	r3, [pc, #452]	@ (8006d24 <USER_SPI_ioctl+0x2dc>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d031      	beq.n	8006bcc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006b68:	2100      	movs	r1, #0
 8006b6a:	208d      	movs	r0, #141	@ 0x8d
 8006b6c:	f7ff fc07 	bl	800637e <send_cmd>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f040 80c3 	bne.w	8006cfe <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006b78:	20ff      	movs	r0, #255	@ 0xff
 8006b7a:	f7ff faf3 	bl	8006164 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006b7e:	f107 030c 	add.w	r3, r7, #12
 8006b82:	2110      	movs	r1, #16
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff fb9f 	bl	80062c8 <rcvr_datablock>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 80b6 	beq.w	8006cfe <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006b92:	2330      	movs	r3, #48	@ 0x30
 8006b94:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006b98:	e007      	b.n	8006baa <USER_SPI_ioctl+0x162>
 8006b9a:	20ff      	movs	r0, #255	@ 0xff
 8006b9c:	f7ff fae2 	bl	8006164 <xchg_spi>
 8006ba0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006baa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1f3      	bne.n	8006b9a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006bb2:	7dbb      	ldrb	r3, [r7, #22]
 8006bb4:	091b      	lsrs	r3, r3, #4
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	461a      	mov	r2, r3
 8006bba:	2310      	movs	r3, #16
 8006bbc:	fa03 f202 	lsl.w	r2, r3, r2
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006bca:	e098      	b.n	8006cfe <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006bcc:	2100      	movs	r1, #0
 8006bce:	2009      	movs	r0, #9
 8006bd0:	f7ff fbd5 	bl	800637e <send_cmd>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f040 8091 	bne.w	8006cfe <USER_SPI_ioctl+0x2b6>
 8006bdc:	f107 030c 	add.w	r3, r7, #12
 8006be0:	2110      	movs	r1, #16
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff fb70 	bl	80062c8 <rcvr_datablock>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 8087 	beq.w	8006cfe <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006bf0:	4b4c      	ldr	r3, [pc, #304]	@ (8006d24 <USER_SPI_ioctl+0x2dc>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d012      	beq.n	8006c22 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006bfc:	7dbb      	ldrb	r3, [r7, #22]
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8006c04:	7dfa      	ldrb	r2, [r7, #23]
 8006c06:	09d2      	lsrs	r2, r2, #7
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	7e7b      	ldrb	r3, [r7, #25]
 8006c10:	099b      	lsrs	r3, r3, #6
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	e013      	b.n	8006c4a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006c22:	7dbb      	ldrb	r3, [r7, #22]
 8006c24:	109b      	asrs	r3, r3, #2
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	f003 031f 	and.w	r3, r3, #31
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	7dfa      	ldrb	r2, [r7, #23]
 8006c30:	00d2      	lsls	r2, r2, #3
 8006c32:	f002 0218 	and.w	r2, r2, #24
 8006c36:	7df9      	ldrb	r1, [r7, #23]
 8006c38:	0949      	lsrs	r1, r1, #5
 8006c3a:	b2c9      	uxtb	r1, r1
 8006c3c:	440a      	add	r2, r1
 8006c3e:	3201      	adds	r2, #1
 8006c40:	fb02 f303 	mul.w	r3, r2, r3
 8006c44:	461a      	mov	r2, r3
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006c50:	e055      	b.n	8006cfe <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006c52:	4b34      	ldr	r3, [pc, #208]	@ (8006d24 <USER_SPI_ioctl+0x2dc>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	f003 0306 	and.w	r3, r3, #6
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d051      	beq.n	8006d02 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006c5e:	f107 020c 	add.w	r2, r7, #12
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	210b      	movs	r1, #11
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7ff feee 	bl	8006a48 <USER_SPI_ioctl>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d149      	bne.n	8006d06 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006c72:	7b3b      	ldrb	r3, [r7, #12]
 8006c74:	099b      	lsrs	r3, r3, #6
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d104      	bne.n	8006c86 <USER_SPI_ioctl+0x23e>
 8006c7c:	7dbb      	ldrb	r3, [r7, #22]
 8006c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d041      	beq.n	8006d0a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	623b      	str	r3, [r7, #32]
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8006c96:	4b23      	ldr	r3, [pc, #140]	@ (8006d24 <USER_SPI_ioctl+0x2dc>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	f003 0308 	and.w	r3, r3, #8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d105      	bne.n	8006cae <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca4:	025b      	lsls	r3, r3, #9
 8006ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006caa:	025b      	lsls	r3, r3, #9
 8006cac:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006cae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cb0:	2020      	movs	r0, #32
 8006cb2:	f7ff fb64 	bl	800637e <send_cmd>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d128      	bne.n	8006d0e <USER_SPI_ioctl+0x2c6>
 8006cbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006cbe:	2021      	movs	r0, #33	@ 0x21
 8006cc0:	f7ff fb5d 	bl	800637e <send_cmd>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d121      	bne.n	8006d0e <USER_SPI_ioctl+0x2c6>
 8006cca:	2100      	movs	r1, #0
 8006ccc:	2026      	movs	r0, #38	@ 0x26
 8006cce:	f7ff fb56 	bl	800637e <send_cmd>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d11a      	bne.n	8006d0e <USER_SPI_ioctl+0x2c6>
 8006cd8:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006cdc:	f7ff fa88 	bl	80061f0 <wait_ready>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d013      	beq.n	8006d0e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006cec:	e00f      	b.n	8006d0e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006cee:	2304      	movs	r3, #4
 8006cf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006cf4:	e00c      	b.n	8006d10 <USER_SPI_ioctl+0x2c8>
		break;
 8006cf6:	bf00      	nop
 8006cf8:	e00a      	b.n	8006d10 <USER_SPI_ioctl+0x2c8>
		break;
 8006cfa:	bf00      	nop
 8006cfc:	e008      	b.n	8006d10 <USER_SPI_ioctl+0x2c8>
		break;
 8006cfe:	bf00      	nop
 8006d00:	e006      	b.n	8006d10 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006d02:	bf00      	nop
 8006d04:	e004      	b.n	8006d10 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006d06:	bf00      	nop
 8006d08:	e002      	b.n	8006d10 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006d0a:	bf00      	nop
 8006d0c:	e000      	b.n	8006d10 <USER_SPI_ioctl+0x2c8>
		break;
 8006d0e:	bf00      	nop
	}

	despiselect();
 8006d10:	f7ff faaa 	bl	8006268 <despiselect>

	return res;
 8006d14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3730      	adds	r7, #48	@ 0x30
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20000024 	.word	0x20000024
 8006d24:	20000734 	.word	0x20000734

08006d28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f103 0208 	add.w	r2, r3, #8
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f103 0208 	add.w	r2, r3, #8
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f103 0208 	add.w	r2, r3, #8
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d82:	b480      	push	{r7}
 8006d84:	b085      	sub	sp, #20
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	601a      	str	r2, [r3, #0]
}
 8006dbe:	bf00      	nop
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b085      	sub	sp, #20
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de0:	d103      	bne.n	8006dea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	e00c      	b.n	8006e04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	3308      	adds	r3, #8
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	e002      	b.n	8006df8 <vListInsert+0x2e>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d2f6      	bcs.n	8006df2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	601a      	str	r2, [r3, #0]
}
 8006e30:	bf00      	nop
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6892      	ldr	r2, [r2, #8]
 8006e52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	6852      	ldr	r2, [r2, #4]
 8006e5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d103      	bne.n	8006e70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689a      	ldr	r2, [r3, #8]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	1e5a      	subs	r2, r3, #1
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10b      	bne.n	8006ebc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006eb6:	bf00      	nop
 8006eb8:	bf00      	nop
 8006eba:	e7fd      	b.n	8006eb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ebc:	f002 fa0c 	bl	80092d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ec8:	68f9      	ldr	r1, [r7, #12]
 8006eca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ecc:	fb01 f303 	mul.w	r3, r1, r3
 8006ed0:	441a      	add	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eec:	3b01      	subs	r3, #1
 8006eee:	68f9      	ldr	r1, [r7, #12]
 8006ef0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ef2:	fb01 f303 	mul.w	r3, r1, r3
 8006ef6:	441a      	add	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	22ff      	movs	r2, #255	@ 0xff
 8006f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	22ff      	movs	r2, #255	@ 0xff
 8006f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d114      	bne.n	8006f3c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d01a      	beq.n	8006f50 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3310      	adds	r3, #16
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f001 f9b0 	bl	8008284 <xTaskRemoveFromEventList>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d012      	beq.n	8006f50 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f60 <xQueueGenericReset+0xd0>)
 8006f2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	e009      	b.n	8006f50 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3310      	adds	r3, #16
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff fef1 	bl	8006d28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3324      	adds	r3, #36	@ 0x24
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff feec 	bl	8006d28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f50:	f002 f9f4 	bl	800933c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f54:	2301      	movs	r3, #1
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08a      	sub	sp, #40	@ 0x28
 8006f68:	af02      	add	r7, sp, #8
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10b      	bne.n	8006f90 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	613b      	str	r3, [r7, #16]
}
 8006f8a:	bf00      	nop
 8006f8c:	bf00      	nop
 8006f8e:	e7fd      	b.n	8006f8c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d102      	bne.n	8006f9c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	61fb      	str	r3, [r7, #28]
 8006f9a:	e004      	b.n	8006fa6 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	fb02 f303 	mul.w	r3, r2, r3
 8006fa4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	3350      	adds	r3, #80	@ 0x50
 8006faa:	4618      	mov	r0, r3
 8006fac:	f002 fab6 	bl	800951c <pvPortMalloc>
 8006fb0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00d      	beq.n	8006fd4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	3350      	adds	r3, #80	@ 0x50
 8006fc0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fc2:	79fa      	ldrb	r2, [r7, #7]
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 f805 	bl	8006fde <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fd4:	69bb      	ldr	r3, [r7, #24]
	}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3720      	adds	r7, #32
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	607a      	str	r2, [r7, #4]
 8006fea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d103      	bne.n	8006ffa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	e002      	b.n	8007000 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800700c:	2101      	movs	r1, #1
 800700e:	69b8      	ldr	r0, [r7, #24]
 8007010:	f7ff ff3e 	bl	8006e90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	78fa      	ldrb	r2, [r7, #3]
 8007018:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800701c:	bf00      	nop
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00e      	beq.n	8007050 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007044:	2300      	movs	r3, #0
 8007046:	2200      	movs	r2, #0
 8007048:	2100      	movs	r1, #0
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f81c 	bl	8007088 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007050:	bf00      	nop
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	4603      	mov	r3, r0
 8007060:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007062:	2301      	movs	r3, #1
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	2300      	movs	r3, #0
 8007068:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800706a:	79fb      	ldrb	r3, [r7, #7]
 800706c:	461a      	mov	r2, r3
 800706e:	6939      	ldr	r1, [r7, #16]
 8007070:	6978      	ldr	r0, [r7, #20]
 8007072:	f7ff ff77 	bl	8006f64 <xQueueGenericCreate>
 8007076:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7ff ffd3 	bl	8007024 <prvInitialiseMutex>

		return xNewQueue;
 800707e:	68fb      	ldr	r3, [r7, #12]
	}
 8007080:	4618      	mov	r0, r3
 8007082:	3718      	adds	r7, #24
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08e      	sub	sp, #56	@ 0x38
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007096:	2300      	movs	r3, #0
 8007098:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10b      	bne.n	80070bc <xQueueGenericSend+0x34>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80070b6:	bf00      	nop
 80070b8:	bf00      	nop
 80070ba:	e7fd      	b.n	80070b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d103      	bne.n	80070ca <xQueueGenericSend+0x42>
 80070c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <xQueueGenericSend+0x46>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e000      	b.n	80070d0 <xQueueGenericSend+0x48>
 80070ce:	2300      	movs	r3, #0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10b      	bne.n	80070ec <xQueueGenericSend+0x64>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070e6:	bf00      	nop
 80070e8:	bf00      	nop
 80070ea:	e7fd      	b.n	80070e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d103      	bne.n	80070fa <xQueueGenericSend+0x72>
 80070f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d101      	bne.n	80070fe <xQueueGenericSend+0x76>
 80070fa:	2301      	movs	r3, #1
 80070fc:	e000      	b.n	8007100 <xQueueGenericSend+0x78>
 80070fe:	2300      	movs	r3, #0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10b      	bne.n	800711c <xQueueGenericSend+0x94>
	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	623b      	str	r3, [r7, #32]
}
 8007116:	bf00      	nop
 8007118:	bf00      	nop
 800711a:	e7fd      	b.n	8007118 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800711c:	f001 fa52 	bl	80085c4 <xTaskGetSchedulerState>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d102      	bne.n	800712c <xQueueGenericSend+0xa4>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <xQueueGenericSend+0xa8>
 800712c:	2301      	movs	r3, #1
 800712e:	e000      	b.n	8007132 <xQueueGenericSend+0xaa>
 8007130:	2300      	movs	r3, #0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10b      	bne.n	800714e <xQueueGenericSend+0xc6>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	61fb      	str	r3, [r7, #28]
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	e7fd      	b.n	800714a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800714e:	f002 f8c3 	bl	80092d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007154:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800715a:	429a      	cmp	r2, r3
 800715c:	d302      	bcc.n	8007164 <xQueueGenericSend+0xdc>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b02      	cmp	r3, #2
 8007162:	d129      	bne.n	80071b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	68b9      	ldr	r1, [r7, #8]
 8007168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800716a:	f000 fb35 	bl	80077d8 <prvCopyDataToQueue>
 800716e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007174:	2b00      	cmp	r3, #0
 8007176:	d010      	beq.n	800719a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717a:	3324      	adds	r3, #36	@ 0x24
 800717c:	4618      	mov	r0, r3
 800717e:	f001 f881 	bl	8008284 <xTaskRemoveFromEventList>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d013      	beq.n	80071b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007188:	4b3f      	ldr	r3, [pc, #252]	@ (8007288 <xQueueGenericSend+0x200>)
 800718a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	e00a      	b.n	80071b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800719a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719c:	2b00      	cmp	r3, #0
 800719e:	d007      	beq.n	80071b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071a0:	4b39      	ldr	r3, [pc, #228]	@ (8007288 <xQueueGenericSend+0x200>)
 80071a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071b0:	f002 f8c4 	bl	800933c <vPortExitCritical>
				return pdPASS;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e063      	b.n	8007280 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d103      	bne.n	80071c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071be:	f002 f8bd 	bl	800933c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	e05c      	b.n	8007280 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d106      	bne.n	80071da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071cc:	f107 0314 	add.w	r3, r7, #20
 80071d0:	4618      	mov	r0, r3
 80071d2:	f001 f8bb 	bl	800834c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071d6:	2301      	movs	r3, #1
 80071d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071da:	f002 f8af 	bl	800933c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071de:	f000 fe2d 	bl	8007e3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071e2:	f002 f879 	bl	80092d8 <vPortEnterCritical>
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071ec:	b25b      	sxtb	r3, r3
 80071ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f2:	d103      	bne.n	80071fc <xQueueGenericSend+0x174>
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007202:	b25b      	sxtb	r3, r3
 8007204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007208:	d103      	bne.n	8007212 <xQueueGenericSend+0x18a>
 800720a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007212:	f002 f893 	bl	800933c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007216:	1d3a      	adds	r2, r7, #4
 8007218:	f107 0314 	add.w	r3, r7, #20
 800721c:	4611      	mov	r1, r2
 800721e:	4618      	mov	r0, r3
 8007220:	f001 f8aa 	bl	8008378 <xTaskCheckForTimeOut>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d124      	bne.n	8007274 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800722a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800722c:	f000 fbcc 	bl	80079c8 <prvIsQueueFull>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d018      	beq.n	8007268 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	3310      	adds	r3, #16
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	4611      	mov	r1, r2
 800723e:	4618      	mov	r0, r3
 8007240:	f000 ffce 	bl	80081e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007244:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007246:	f000 fb57 	bl	80078f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800724a:	f000 fe05 	bl	8007e58 <xTaskResumeAll>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	f47f af7c 	bne.w	800714e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007256:	4b0c      	ldr	r3, [pc, #48]	@ (8007288 <xQueueGenericSend+0x200>)
 8007258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	e772      	b.n	800714e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007268:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800726a:	f000 fb45 	bl	80078f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800726e:	f000 fdf3 	bl	8007e58 <xTaskResumeAll>
 8007272:	e76c      	b.n	800714e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007274:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007276:	f000 fb3f 	bl	80078f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800727a:	f000 fded 	bl	8007e58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800727e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007280:	4618      	mov	r0, r3
 8007282:	3738      	adds	r7, #56	@ 0x38
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	e000ed04 	.word	0xe000ed04

0800728c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b08e      	sub	sp, #56	@ 0x38
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
 8007298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800729e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10b      	bne.n	80072bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80072b6:	bf00      	nop
 80072b8:	bf00      	nop
 80072ba:	e7fd      	b.n	80072b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d103      	bne.n	80072ca <xQueueGenericSendFromISR+0x3e>
 80072c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <xQueueGenericSendFromISR+0x42>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e000      	b.n	80072d0 <xQueueGenericSendFromISR+0x44>
 80072ce:	2300      	movs	r3, #0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10b      	bne.n	80072ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	623b      	str	r3, [r7, #32]
}
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
 80072ea:	e7fd      	b.n	80072e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d103      	bne.n	80072fa <xQueueGenericSendFromISR+0x6e>
 80072f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d101      	bne.n	80072fe <xQueueGenericSendFromISR+0x72>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <xQueueGenericSendFromISR+0x74>
 80072fe:	2300      	movs	r3, #0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10b      	bne.n	800731c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	61fb      	str	r3, [r7, #28]
}
 8007316:	bf00      	nop
 8007318:	bf00      	nop
 800731a:	e7fd      	b.n	8007318 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800731c:	f002 f8bc 	bl	8009498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007320:	f3ef 8211 	mrs	r2, BASEPRI
 8007324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	61ba      	str	r2, [r7, #24]
 8007336:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007338:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800733a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800733c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007344:	429a      	cmp	r2, r3
 8007346:	d302      	bcc.n	800734e <xQueueGenericSendFromISR+0xc2>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b02      	cmp	r3, #2
 800734c:	d12c      	bne.n	80073a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800734e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007350:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007354:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	68b9      	ldr	r1, [r7, #8]
 800735c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800735e:	f000 fa3b 	bl	80077d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007362:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736a:	d112      	bne.n	8007392 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800736c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007370:	2b00      	cmp	r3, #0
 8007372:	d016      	beq.n	80073a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007376:	3324      	adds	r3, #36	@ 0x24
 8007378:	4618      	mov	r0, r3
 800737a:	f000 ff83 	bl	8008284 <xTaskRemoveFromEventList>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00e      	beq.n	80073a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00b      	beq.n	80073a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	e007      	b.n	80073a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007392:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007396:	3301      	adds	r3, #1
 8007398:	b2db      	uxtb	r3, r3
 800739a:	b25a      	sxtb	r2, r3
 800739c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80073a2:	2301      	movs	r3, #1
 80073a4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80073a6:	e001      	b.n	80073ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073a8:	2300      	movs	r3, #0
 80073aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3738      	adds	r7, #56	@ 0x38
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08c      	sub	sp, #48	@ 0x30
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073d0:	2300      	movs	r3, #0
 80073d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10b      	bne.n	80073f6 <xQueueReceive+0x32>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	623b      	str	r3, [r7, #32]
}
 80073f0:	bf00      	nop
 80073f2:	bf00      	nop
 80073f4:	e7fd      	b.n	80073f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d103      	bne.n	8007404 <xQueueReceive+0x40>
 80073fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <xQueueReceive+0x44>
 8007404:	2301      	movs	r3, #1
 8007406:	e000      	b.n	800740a <xQueueReceive+0x46>
 8007408:	2300      	movs	r3, #0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10b      	bne.n	8007426 <xQueueReceive+0x62>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	61fb      	str	r3, [r7, #28]
}
 8007420:	bf00      	nop
 8007422:	bf00      	nop
 8007424:	e7fd      	b.n	8007422 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007426:	f001 f8cd 	bl	80085c4 <xTaskGetSchedulerState>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <xQueueReceive+0x72>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <xQueueReceive+0x76>
 8007436:	2301      	movs	r3, #1
 8007438:	e000      	b.n	800743c <xQueueReceive+0x78>
 800743a:	2300      	movs	r3, #0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10b      	bne.n	8007458 <xQueueReceive+0x94>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	61bb      	str	r3, [r7, #24]
}
 8007452:	bf00      	nop
 8007454:	bf00      	nop
 8007456:	e7fd      	b.n	8007454 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007458:	f001 ff3e 	bl	80092d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800745c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007460:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007464:	2b00      	cmp	r3, #0
 8007466:	d01f      	beq.n	80074a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007468:	68b9      	ldr	r1, [r7, #8]
 800746a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800746c:	f000 fa1e 	bl	80078ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007472:	1e5a      	subs	r2, r3, #1
 8007474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007476:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00f      	beq.n	80074a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007482:	3310      	adds	r3, #16
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fefd 	bl	8008284 <xTaskRemoveFromEventList>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d007      	beq.n	80074a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007490:	4b3c      	ldr	r3, [pc, #240]	@ (8007584 <xQueueReceive+0x1c0>)
 8007492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074a0:	f001 ff4c 	bl	800933c <vPortExitCritical>
				return pdPASS;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e069      	b.n	800757c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d103      	bne.n	80074b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074ae:	f001 ff45 	bl	800933c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e062      	b.n	800757c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d106      	bne.n	80074ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074bc:	f107 0310 	add.w	r3, r7, #16
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 ff43 	bl	800834c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074c6:	2301      	movs	r3, #1
 80074c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074ca:	f001 ff37 	bl	800933c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074ce:	f000 fcb5 	bl	8007e3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074d2:	f001 ff01 	bl	80092d8 <vPortEnterCritical>
 80074d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074dc:	b25b      	sxtb	r3, r3
 80074de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e2:	d103      	bne.n	80074ec <xQueueReceive+0x128>
 80074e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074f2:	b25b      	sxtb	r3, r3
 80074f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f8:	d103      	bne.n	8007502 <xQueueReceive+0x13e>
 80074fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007502:	f001 ff1b 	bl	800933c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007506:	1d3a      	adds	r2, r7, #4
 8007508:	f107 0310 	add.w	r3, r7, #16
 800750c:	4611      	mov	r1, r2
 800750e:	4618      	mov	r0, r3
 8007510:	f000 ff32 	bl	8008378 <xTaskCheckForTimeOut>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d123      	bne.n	8007562 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800751a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800751c:	f000 fa3e 	bl	800799c <prvIsQueueEmpty>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d017      	beq.n	8007556 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007528:	3324      	adds	r3, #36	@ 0x24
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	4611      	mov	r1, r2
 800752e:	4618      	mov	r0, r3
 8007530:	f000 fe56 	bl	80081e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007534:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007536:	f000 f9df 	bl	80078f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800753a:	f000 fc8d 	bl	8007e58 <xTaskResumeAll>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d189      	bne.n	8007458 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007544:	4b0f      	ldr	r3, [pc, #60]	@ (8007584 <xQueueReceive+0x1c0>)
 8007546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	e780      	b.n	8007458 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007556:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007558:	f000 f9ce 	bl	80078f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800755c:	f000 fc7c 	bl	8007e58 <xTaskResumeAll>
 8007560:	e77a      	b.n	8007458 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007564:	f000 f9c8 	bl	80078f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007568:	f000 fc76 	bl	8007e58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800756c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800756e:	f000 fa15 	bl	800799c <prvIsQueueEmpty>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	f43f af6f 	beq.w	8007458 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800757a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800757c:	4618      	mov	r0, r3
 800757e:	3730      	adds	r7, #48	@ 0x30
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	e000ed04 	.word	0xe000ed04

08007588 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08e      	sub	sp, #56	@ 0x38
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007592:	2300      	movs	r3, #0
 8007594:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800759a:	2300      	movs	r3, #0
 800759c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800759e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10b      	bne.n	80075bc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	623b      	str	r3, [r7, #32]
}
 80075b6:	bf00      	nop
 80075b8:	bf00      	nop
 80075ba:	e7fd      	b.n	80075b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80075bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00b      	beq.n	80075dc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	61fb      	str	r3, [r7, #28]
}
 80075d6:	bf00      	nop
 80075d8:	bf00      	nop
 80075da:	e7fd      	b.n	80075d8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075dc:	f000 fff2 	bl	80085c4 <xTaskGetSchedulerState>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d102      	bne.n	80075ec <xQueueSemaphoreTake+0x64>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <xQueueSemaphoreTake+0x68>
 80075ec:	2301      	movs	r3, #1
 80075ee:	e000      	b.n	80075f2 <xQueueSemaphoreTake+0x6a>
 80075f0:	2300      	movs	r3, #0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10b      	bne.n	800760e <xQueueSemaphoreTake+0x86>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	61bb      	str	r3, [r7, #24]
}
 8007608:	bf00      	nop
 800760a:	bf00      	nop
 800760c:	e7fd      	b.n	800760a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800760e:	f001 fe63 	bl	80092d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007616:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761a:	2b00      	cmp	r3, #0
 800761c:	d024      	beq.n	8007668 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800761e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007620:	1e5a      	subs	r2, r3, #1
 8007622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007624:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d104      	bne.n	8007638 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800762e:	f001 f98b 	bl	8008948 <pvTaskIncrementMutexHeldCount>
 8007632:	4602      	mov	r2, r0
 8007634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007636:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00f      	beq.n	8007660 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007642:	3310      	adds	r3, #16
 8007644:	4618      	mov	r0, r3
 8007646:	f000 fe1d 	bl	8008284 <xTaskRemoveFromEventList>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d007      	beq.n	8007660 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007650:	4b54      	ldr	r3, [pc, #336]	@ (80077a4 <xQueueSemaphoreTake+0x21c>)
 8007652:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007660:	f001 fe6c 	bl	800933c <vPortExitCritical>
				return pdPASS;
 8007664:	2301      	movs	r3, #1
 8007666:	e098      	b.n	800779a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d112      	bne.n	8007694 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800766e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00b      	beq.n	800768c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	617b      	str	r3, [r7, #20]
}
 8007686:	bf00      	nop
 8007688:	bf00      	nop
 800768a:	e7fd      	b.n	8007688 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800768c:	f001 fe56 	bl	800933c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007690:	2300      	movs	r3, #0
 8007692:	e082      	b.n	800779a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007696:	2b00      	cmp	r3, #0
 8007698:	d106      	bne.n	80076a8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800769a:	f107 030c 	add.w	r3, r7, #12
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 fe54 	bl	800834c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076a4:	2301      	movs	r3, #1
 80076a6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076a8:	f001 fe48 	bl	800933c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076ac:	f000 fbc6 	bl	8007e3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076b0:	f001 fe12 	bl	80092d8 <vPortEnterCritical>
 80076b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076ba:	b25b      	sxtb	r3, r3
 80076bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c0:	d103      	bne.n	80076ca <xQueueSemaphoreTake+0x142>
 80076c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076d0:	b25b      	sxtb	r3, r3
 80076d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d6:	d103      	bne.n	80076e0 <xQueueSemaphoreTake+0x158>
 80076d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076e0:	f001 fe2c 	bl	800933c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076e4:	463a      	mov	r2, r7
 80076e6:	f107 030c 	add.w	r3, r7, #12
 80076ea:	4611      	mov	r1, r2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 fe43 	bl	8008378 <xTaskCheckForTimeOut>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d132      	bne.n	800775e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80076fa:	f000 f94f 	bl	800799c <prvIsQueueEmpty>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d026      	beq.n	8007752 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d109      	bne.n	8007720 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800770c:	f001 fde4 	bl	80092d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	4618      	mov	r0, r3
 8007716:	f000 ff73 	bl	8008600 <xTaskPriorityInherit>
 800771a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800771c:	f001 fe0e 	bl	800933c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007722:	3324      	adds	r3, #36	@ 0x24
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	4611      	mov	r1, r2
 8007728:	4618      	mov	r0, r3
 800772a:	f000 fd59 	bl	80081e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800772e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007730:	f000 f8e2 	bl	80078f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007734:	f000 fb90 	bl	8007e58 <xTaskResumeAll>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	f47f af67 	bne.w	800760e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007740:	4b18      	ldr	r3, [pc, #96]	@ (80077a4 <xQueueSemaphoreTake+0x21c>)
 8007742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	e75d      	b.n	800760e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007752:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007754:	f000 f8d0 	bl	80078f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007758:	f000 fb7e 	bl	8007e58 <xTaskResumeAll>
 800775c:	e757      	b.n	800760e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800775e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007760:	f000 f8ca 	bl	80078f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007764:	f000 fb78 	bl	8007e58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007768:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800776a:	f000 f917 	bl	800799c <prvIsQueueEmpty>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	f43f af4c 	beq.w	800760e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00d      	beq.n	8007798 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800777c:	f001 fdac 	bl	80092d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007780:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007782:	f000 f811 	bl	80077a8 <prvGetDisinheritPriorityAfterTimeout>
 8007786:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800778e:	4618      	mov	r0, r3
 8007790:	f001 f83e 	bl	8008810 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007794:	f001 fdd2 	bl	800933c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007798:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800779a:	4618      	mov	r0, r3
 800779c:	3738      	adds	r7, #56	@ 0x38
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	e000ed04 	.word	0xe000ed04

080077a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d006      	beq.n	80077c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f1c3 0305 	rsb	r3, r3, #5
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	e001      	b.n	80077ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80077ca:	68fb      	ldr	r3, [r7, #12]
	}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b086      	sub	sp, #24
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077e4:	2300      	movs	r3, #0
 80077e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10d      	bne.n	8007812 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d14d      	bne.n	800789a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	4618      	mov	r0, r3
 8007804:	f000 ff7c 	bl	8008700 <xTaskPriorityDisinherit>
 8007808:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	609a      	str	r2, [r3, #8]
 8007810:	e043      	b.n	800789a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d119      	bne.n	800784c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6858      	ldr	r0, [r3, #4]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007820:	461a      	mov	r2, r3
 8007822:	68b9      	ldr	r1, [r7, #8]
 8007824:	f002 ffe6 	bl	800a7f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007830:	441a      	add	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	429a      	cmp	r2, r3
 8007840:	d32b      	bcc.n	800789a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	605a      	str	r2, [r3, #4]
 800784a:	e026      	b.n	800789a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	68d8      	ldr	r0, [r3, #12]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007854:	461a      	mov	r2, r3
 8007856:	68b9      	ldr	r1, [r7, #8]
 8007858:	f002 ffcc 	bl	800a7f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	68da      	ldr	r2, [r3, #12]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007864:	425b      	negs	r3, r3
 8007866:	441a      	add	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	68da      	ldr	r2, [r3, #12]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	429a      	cmp	r2, r3
 8007876:	d207      	bcs.n	8007888 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	689a      	ldr	r2, [r3, #8]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007880:	425b      	negs	r3, r3
 8007882:	441a      	add	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b02      	cmp	r3, #2
 800788c:	d105      	bne.n	800789a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	3b01      	subs	r3, #1
 8007898:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	1c5a      	adds	r2, r3, #1
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80078a2:	697b      	ldr	r3, [r7, #20]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d018      	beq.n	80078f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68da      	ldr	r2, [r3, #12]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c6:	441a      	add	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d303      	bcc.n	80078e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68d9      	ldr	r1, [r3, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e8:	461a      	mov	r2, r3
 80078ea:	6838      	ldr	r0, [r7, #0]
 80078ec:	f002 ff82 	bl	800a7f4 <memcpy>
	}
}
 80078f0:	bf00      	nop
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007900:	f001 fcea 	bl	80092d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800790a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800790c:	e011      	b.n	8007932 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007912:	2b00      	cmp	r3, #0
 8007914:	d012      	beq.n	800793c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3324      	adds	r3, #36	@ 0x24
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fcb2 	bl	8008284 <xTaskRemoveFromEventList>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007926:	f000 fd8b 	bl	8008440 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800792a:	7bfb      	ldrb	r3, [r7, #15]
 800792c:	3b01      	subs	r3, #1
 800792e:	b2db      	uxtb	r3, r3
 8007930:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007936:	2b00      	cmp	r3, #0
 8007938:	dce9      	bgt.n	800790e <prvUnlockQueue+0x16>
 800793a:	e000      	b.n	800793e <prvUnlockQueue+0x46>
					break;
 800793c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	22ff      	movs	r2, #255	@ 0xff
 8007942:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007946:	f001 fcf9 	bl	800933c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800794a:	f001 fcc5 	bl	80092d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007954:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007956:	e011      	b.n	800797c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d012      	beq.n	8007986 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3310      	adds	r3, #16
 8007964:	4618      	mov	r0, r3
 8007966:	f000 fc8d 	bl	8008284 <xTaskRemoveFromEventList>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007970:	f000 fd66 	bl	8008440 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	3b01      	subs	r3, #1
 8007978:	b2db      	uxtb	r3, r3
 800797a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800797c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007980:	2b00      	cmp	r3, #0
 8007982:	dce9      	bgt.n	8007958 <prvUnlockQueue+0x60>
 8007984:	e000      	b.n	8007988 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007986:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	22ff      	movs	r2, #255	@ 0xff
 800798c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007990:	f001 fcd4 	bl	800933c <vPortExitCritical>
}
 8007994:	bf00      	nop
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079a4:	f001 fc98 	bl	80092d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d102      	bne.n	80079b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80079b0:	2301      	movs	r3, #1
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e001      	b.n	80079ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079b6:	2300      	movs	r3, #0
 80079b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079ba:	f001 fcbf 	bl	800933c <vPortExitCritical>

	return xReturn;
 80079be:	68fb      	ldr	r3, [r7, #12]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079d0:	f001 fc82 	bl	80092d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079dc:	429a      	cmp	r2, r3
 80079de:	d102      	bne.n	80079e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079e0:	2301      	movs	r3, #1
 80079e2:	60fb      	str	r3, [r7, #12]
 80079e4:	e001      	b.n	80079ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079e6:	2300      	movs	r3, #0
 80079e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079ea:	f001 fca7 	bl	800933c <vPortExitCritical>

	return xReturn;
 80079ee:	68fb      	ldr	r3, [r7, #12]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a02:	2300      	movs	r3, #0
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	e014      	b.n	8007a32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a08:	4a0f      	ldr	r2, [pc, #60]	@ (8007a48 <vQueueAddToRegistry+0x50>)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10b      	bne.n	8007a2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a14:	490c      	ldr	r1, [pc, #48]	@ (8007a48 <vQueueAddToRegistry+0x50>)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8007a48 <vQueueAddToRegistry+0x50>)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	4413      	add	r3, r2
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a2a:	e006      	b.n	8007a3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	60fb      	str	r3, [r7, #12]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2b07      	cmp	r3, #7
 8007a36:	d9e7      	bls.n	8007a08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a38:	bf00      	nop
 8007a3a:	bf00      	nop
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	20000740 	.word	0x20000740

08007a4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a5c:	f001 fc3c 	bl	80092d8 <vPortEnterCritical>
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a66:	b25b      	sxtb	r3, r3
 8007a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6c:	d103      	bne.n	8007a76 <vQueueWaitForMessageRestricted+0x2a>
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a7c:	b25b      	sxtb	r3, r3
 8007a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a82:	d103      	bne.n	8007a8c <vQueueWaitForMessageRestricted+0x40>
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a8c:	f001 fc56 	bl	800933c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d106      	bne.n	8007aa6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	3324      	adds	r3, #36	@ 0x24
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 fbc3 	bl	800822c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007aa6:	6978      	ldr	r0, [r7, #20]
 8007aa8:	f7ff ff26 	bl	80078f8 <prvUnlockQueue>
	}
 8007aac:	bf00      	nop
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08c      	sub	sp, #48	@ 0x30
 8007ab8:	af04      	add	r7, sp, #16
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	603b      	str	r3, [r7, #0]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ac4:	88fb      	ldrh	r3, [r7, #6]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f001 fd27 	bl	800951c <pvPortMalloc>
 8007ace:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00e      	beq.n	8007af4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ad6:	2058      	movs	r0, #88	@ 0x58
 8007ad8:	f001 fd20 	bl	800951c <pvPortMalloc>
 8007adc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	631a      	str	r2, [r3, #48]	@ 0x30
 8007aea:	e005      	b.n	8007af8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007aec:	6978      	ldr	r0, [r7, #20]
 8007aee:	f001 fddd 	bl	80096ac <vPortFree>
 8007af2:	e001      	b.n	8007af8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007af4:	2300      	movs	r3, #0
 8007af6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d013      	beq.n	8007b26 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007afe:	88fa      	ldrh	r2, [r7, #6]
 8007b00:	2300      	movs	r3, #0
 8007b02:	9303      	str	r3, [sp, #12]
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	9302      	str	r3, [sp, #8]
 8007b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b0a:	9301      	str	r3, [sp, #4]
 8007b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	68b9      	ldr	r1, [r7, #8]
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 f80e 	bl	8007b36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b1a:	69f8      	ldr	r0, [r7, #28]
 8007b1c:	f000 f89c 	bl	8007c58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b20:	2301      	movs	r3, #1
 8007b22:	61bb      	str	r3, [r7, #24]
 8007b24:	e002      	b.n	8007b2c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b26:	f04f 33ff 	mov.w	r3, #4294967295
 8007b2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b2c:	69bb      	ldr	r3, [r7, #24]
	}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3720      	adds	r7, #32
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b088      	sub	sp, #32
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	607a      	str	r2, [r7, #4]
 8007b42:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b46:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	21a5      	movs	r1, #165	@ 0xa5
 8007b50:	f002 fe08 	bl	800a764 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	f023 0307 	bic.w	r3, r3, #7
 8007b6c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	f003 0307 	and.w	r3, r3, #7
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00b      	beq.n	8007b90 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	617b      	str	r3, [r7, #20]
}
 8007b8a:	bf00      	nop
 8007b8c:	bf00      	nop
 8007b8e:	e7fd      	b.n	8007b8c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d01f      	beq.n	8007bd6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b96:	2300      	movs	r3, #0
 8007b98:	61fb      	str	r3, [r7, #28]
 8007b9a:	e012      	b.n	8007bc2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	7819      	ldrb	r1, [r3, #0]
 8007ba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	4413      	add	r3, r2
 8007baa:	3334      	adds	r3, #52	@ 0x34
 8007bac:	460a      	mov	r2, r1
 8007bae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d006      	beq.n	8007bca <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	61fb      	str	r3, [r7, #28]
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	2b09      	cmp	r3, #9
 8007bc6:	d9e9      	bls.n	8007b9c <prvInitialiseNewTask+0x66>
 8007bc8:	e000      	b.n	8007bcc <prvInitialiseNewTask+0x96>
			{
				break;
 8007bca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007bd4:	e003      	b.n	8007bde <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be0:	2b04      	cmp	r3, #4
 8007be2:	d901      	bls.n	8007be8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007be4:	2304      	movs	r3, #4
 8007be6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bf2:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7ff f8b2 	bl	8006d68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c06:	3318      	adds	r3, #24
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7ff f8ad 	bl	8006d68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c16:	f1c3 0205 	rsb	r2, r3, #5
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c22:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c26:	2200      	movs	r2, #0
 8007c28:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	68f9      	ldr	r1, [r7, #12]
 8007c36:	69b8      	ldr	r0, [r7, #24]
 8007c38:	f001 fa1e 	bl	8009078 <pxPortInitialiseStack>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c4e:	bf00      	nop
 8007c50:	3720      	adds	r7, #32
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c60:	f001 fb3a 	bl	80092d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c64:	4b2c      	ldr	r3, [pc, #176]	@ (8007d18 <prvAddNewTaskToReadyList+0xc0>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	4a2b      	ldr	r2, [pc, #172]	@ (8007d18 <prvAddNewTaskToReadyList+0xc0>)
 8007c6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8007d1c <prvAddNewTaskToReadyList+0xc4>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d109      	bne.n	8007c8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c76:	4a29      	ldr	r2, [pc, #164]	@ (8007d1c <prvAddNewTaskToReadyList+0xc4>)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c7c:	4b26      	ldr	r3, [pc, #152]	@ (8007d18 <prvAddNewTaskToReadyList+0xc0>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d110      	bne.n	8007ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c84:	f000 fc00 	bl	8008488 <prvInitialiseTaskLists>
 8007c88:	e00d      	b.n	8007ca6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c8a:	4b25      	ldr	r3, [pc, #148]	@ (8007d20 <prvAddNewTaskToReadyList+0xc8>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d109      	bne.n	8007ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c92:	4b22      	ldr	r3, [pc, #136]	@ (8007d1c <prvAddNewTaskToReadyList+0xc4>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d802      	bhi.n	8007ca6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8007d1c <prvAddNewTaskToReadyList+0xc4>)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8007d24 <prvAddNewTaskToReadyList+0xcc>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3301      	adds	r3, #1
 8007cac:	4a1d      	ldr	r2, [pc, #116]	@ (8007d24 <prvAddNewTaskToReadyList+0xcc>)
 8007cae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8007d24 <prvAddNewTaskToReadyList+0xcc>)
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	409a      	lsls	r2, r3
 8007cc0:	4b19      	ldr	r3, [pc, #100]	@ (8007d28 <prvAddNewTaskToReadyList+0xd0>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	4a18      	ldr	r2, [pc, #96]	@ (8007d28 <prvAddNewTaskToReadyList+0xd0>)
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cce:	4613      	mov	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4a15      	ldr	r2, [pc, #84]	@ (8007d2c <prvAddNewTaskToReadyList+0xd4>)
 8007cd8:	441a      	add	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3304      	adds	r3, #4
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	f7ff f84e 	bl	8006d82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ce6:	f001 fb29 	bl	800933c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007cea:	4b0d      	ldr	r3, [pc, #52]	@ (8007d20 <prvAddNewTaskToReadyList+0xc8>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00e      	beq.n	8007d10 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8007d1c <prvAddNewTaskToReadyList+0xc4>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d207      	bcs.n	8007d10 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d00:	4b0b      	ldr	r3, [pc, #44]	@ (8007d30 <prvAddNewTaskToReadyList+0xd8>)
 8007d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	20000858 	.word	0x20000858
 8007d1c:	20000780 	.word	0x20000780
 8007d20:	20000864 	.word	0x20000864
 8007d24:	20000874 	.word	0x20000874
 8007d28:	20000860 	.word	0x20000860
 8007d2c:	20000784 	.word	0x20000784
 8007d30:	e000ed04 	.word	0xe000ed04

08007d34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d018      	beq.n	8007d78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d46:	4b14      	ldr	r3, [pc, #80]	@ (8007d98 <vTaskDelay+0x64>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00b      	beq.n	8007d66 <vTaskDelay+0x32>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	60bb      	str	r3, [r7, #8]
}
 8007d60:	bf00      	nop
 8007d62:	bf00      	nop
 8007d64:	e7fd      	b.n	8007d62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d66:	f000 f869 	bl	8007e3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fdff 	bl	8008970 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d72:	f000 f871 	bl	8007e58 <xTaskResumeAll>
 8007d76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d107      	bne.n	8007d8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007d7e:	4b07      	ldr	r3, [pc, #28]	@ (8007d9c <vTaskDelay+0x68>)
 8007d80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d84:	601a      	str	r2, [r3, #0]
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d8e:	bf00      	nop
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	20000880 	.word	0x20000880
 8007d9c:	e000ed04 	.word	0xe000ed04

08007da0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8007da6:	4b1f      	ldr	r3, [pc, #124]	@ (8007e24 <vTaskStartScheduler+0x84>)
 8007da8:	9301      	str	r3, [sp, #4]
 8007daa:	2300      	movs	r3, #0
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	2300      	movs	r3, #0
 8007db0:	2282      	movs	r2, #130	@ 0x82
 8007db2:	491d      	ldr	r1, [pc, #116]	@ (8007e28 <vTaskStartScheduler+0x88>)
 8007db4:	481d      	ldr	r0, [pc, #116]	@ (8007e2c <vTaskStartScheduler+0x8c>)
 8007db6:	f7ff fe7d 	bl	8007ab4 <xTaskCreate>
 8007dba:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d102      	bne.n	8007dc8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8007dc2:	f000 fe3b 	bl	8008a3c <xTimerCreateTimerTask>
 8007dc6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d116      	bne.n	8007dfc <vTaskStartScheduler+0x5c>
	__asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	60bb      	str	r3, [r7, #8]
}
 8007de0:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007de2:	4b13      	ldr	r3, [pc, #76]	@ (8007e30 <vTaskStartScheduler+0x90>)
 8007de4:	f04f 32ff 	mov.w	r2, #4294967295
 8007de8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007dea:	4b12      	ldr	r3, [pc, #72]	@ (8007e34 <vTaskStartScheduler+0x94>)
 8007dec:	2201      	movs	r2, #1
 8007dee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007df0:	4b11      	ldr	r3, [pc, #68]	@ (8007e38 <vTaskStartScheduler+0x98>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007df6:	f001 f9cb 	bl	8009190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007dfa:	e00f      	b.n	8007e1c <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e02:	d10b      	bne.n	8007e1c <vTaskStartScheduler+0x7c>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	607b      	str	r3, [r7, #4]
}
 8007e16:	bf00      	nop
 8007e18:	bf00      	nop
 8007e1a:	e7fd      	b.n	8007e18 <vTaskStartScheduler+0x78>
}
 8007e1c:	bf00      	nop
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	2000087c 	.word	0x2000087c
 8007e28:	0800b5f4 	.word	0x0800b5f4
 8007e2c:	08008459 	.word	0x08008459
 8007e30:	20000878 	.word	0x20000878
 8007e34:	20000864 	.word	0x20000864
 8007e38:	2000085c 	.word	0x2000085c

08007e3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007e40:	4b04      	ldr	r3, [pc, #16]	@ (8007e54 <vTaskSuspendAll+0x18>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3301      	adds	r3, #1
 8007e46:	4a03      	ldr	r2, [pc, #12]	@ (8007e54 <vTaskSuspendAll+0x18>)
 8007e48:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007e4a:	bf00      	nop
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	20000880 	.word	0x20000880

08007e58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e66:	4b42      	ldr	r3, [pc, #264]	@ (8007f70 <xTaskResumeAll+0x118>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10b      	bne.n	8007e86 <xTaskResumeAll+0x2e>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	603b      	str	r3, [r7, #0]
}
 8007e80:	bf00      	nop
 8007e82:	bf00      	nop
 8007e84:	e7fd      	b.n	8007e82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e86:	f001 fa27 	bl	80092d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e8a:	4b39      	ldr	r3, [pc, #228]	@ (8007f70 <xTaskResumeAll+0x118>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	4a37      	ldr	r2, [pc, #220]	@ (8007f70 <xTaskResumeAll+0x118>)
 8007e92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e94:	4b36      	ldr	r3, [pc, #216]	@ (8007f70 <xTaskResumeAll+0x118>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d161      	bne.n	8007f60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e9c:	4b35      	ldr	r3, [pc, #212]	@ (8007f74 <xTaskResumeAll+0x11c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d05d      	beq.n	8007f60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ea4:	e02e      	b.n	8007f04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ea6:	4b34      	ldr	r3, [pc, #208]	@ (8007f78 <xTaskResumeAll+0x120>)
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3318      	adds	r3, #24
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe ffc2 	bl	8006e3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3304      	adds	r3, #4
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fe ffbd 	bl	8006e3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	409a      	lsls	r2, r3
 8007eca:	4b2c      	ldr	r3, [pc, #176]	@ (8007f7c <xTaskResumeAll+0x124>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8007f7c <xTaskResumeAll+0x124>)
 8007ed2:	6013      	str	r3, [r2, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4a27      	ldr	r2, [pc, #156]	@ (8007f80 <xTaskResumeAll+0x128>)
 8007ee2:	441a      	add	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4610      	mov	r0, r2
 8007eec:	f7fe ff49 	bl	8006d82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ef4:	4b23      	ldr	r3, [pc, #140]	@ (8007f84 <xTaskResumeAll+0x12c>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d302      	bcc.n	8007f04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007efe:	4b22      	ldr	r3, [pc, #136]	@ (8007f88 <xTaskResumeAll+0x130>)
 8007f00:	2201      	movs	r2, #1
 8007f02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f04:	4b1c      	ldr	r3, [pc, #112]	@ (8007f78 <xTaskResumeAll+0x120>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1cc      	bne.n	8007ea6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f12:	f000 fb37 	bl	8008584 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007f16:	4b1d      	ldr	r3, [pc, #116]	@ (8007f8c <xTaskResumeAll+0x134>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d010      	beq.n	8007f44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f22:	f000 f847 	bl	8007fb4 <xTaskIncrementTick>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d002      	beq.n	8007f32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007f2c:	4b16      	ldr	r3, [pc, #88]	@ (8007f88 <xTaskResumeAll+0x130>)
 8007f2e:	2201      	movs	r2, #1
 8007f30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1f1      	bne.n	8007f22 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007f3e:	4b13      	ldr	r3, [pc, #76]	@ (8007f8c <xTaskResumeAll+0x134>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f44:	4b10      	ldr	r3, [pc, #64]	@ (8007f88 <xTaskResumeAll+0x130>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d009      	beq.n	8007f60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f50:	4b0f      	ldr	r3, [pc, #60]	@ (8007f90 <xTaskResumeAll+0x138>)
 8007f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f60:	f001 f9ec 	bl	800933c <vPortExitCritical>

	return xAlreadyYielded;
 8007f64:	68bb      	ldr	r3, [r7, #8]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20000880 	.word	0x20000880
 8007f74:	20000858 	.word	0x20000858
 8007f78:	20000818 	.word	0x20000818
 8007f7c:	20000860 	.word	0x20000860
 8007f80:	20000784 	.word	0x20000784
 8007f84:	20000780 	.word	0x20000780
 8007f88:	2000086c 	.word	0x2000086c
 8007f8c:	20000868 	.word	0x20000868
 8007f90:	e000ed04 	.word	0xe000ed04

08007f94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f9a:	4b05      	ldr	r3, [pc, #20]	@ (8007fb0 <xTaskGetTickCount+0x1c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007fa0:	687b      	ldr	r3, [r7, #4]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	2000085c 	.word	0x2000085c

08007fb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fbe:	4b4f      	ldr	r3, [pc, #316]	@ (80080fc <xTaskIncrementTick+0x148>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f040 8089 	bne.w	80080da <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007fc8:	4b4d      	ldr	r3, [pc, #308]	@ (8008100 <xTaskIncrementTick+0x14c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007fd0:	4a4b      	ldr	r2, [pc, #300]	@ (8008100 <xTaskIncrementTick+0x14c>)
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d121      	bne.n	8008020 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fdc:	4b49      	ldr	r3, [pc, #292]	@ (8008104 <xTaskIncrementTick+0x150>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00b      	beq.n	8007ffe <xTaskIncrementTick+0x4a>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	603b      	str	r3, [r7, #0]
}
 8007ff8:	bf00      	nop
 8007ffa:	bf00      	nop
 8007ffc:	e7fd      	b.n	8007ffa <xTaskIncrementTick+0x46>
 8007ffe:	4b41      	ldr	r3, [pc, #260]	@ (8008104 <xTaskIncrementTick+0x150>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	60fb      	str	r3, [r7, #12]
 8008004:	4b40      	ldr	r3, [pc, #256]	@ (8008108 <xTaskIncrementTick+0x154>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a3e      	ldr	r2, [pc, #248]	@ (8008104 <xTaskIncrementTick+0x150>)
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	4a3e      	ldr	r2, [pc, #248]	@ (8008108 <xTaskIncrementTick+0x154>)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6013      	str	r3, [r2, #0]
 8008012:	4b3e      	ldr	r3, [pc, #248]	@ (800810c <xTaskIncrementTick+0x158>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3301      	adds	r3, #1
 8008018:	4a3c      	ldr	r2, [pc, #240]	@ (800810c <xTaskIncrementTick+0x158>)
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	f000 fab2 	bl	8008584 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008020:	4b3b      	ldr	r3, [pc, #236]	@ (8008110 <xTaskIncrementTick+0x15c>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	429a      	cmp	r2, r3
 8008028:	d348      	bcc.n	80080bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800802a:	4b36      	ldr	r3, [pc, #216]	@ (8008104 <xTaskIncrementTick+0x150>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d104      	bne.n	800803e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008034:	4b36      	ldr	r3, [pc, #216]	@ (8008110 <xTaskIncrementTick+0x15c>)
 8008036:	f04f 32ff 	mov.w	r2, #4294967295
 800803a:	601a      	str	r2, [r3, #0]
					break;
 800803c:	e03e      	b.n	80080bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800803e:	4b31      	ldr	r3, [pc, #196]	@ (8008104 <xTaskIncrementTick+0x150>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	429a      	cmp	r2, r3
 8008054:	d203      	bcs.n	800805e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008056:	4a2e      	ldr	r2, [pc, #184]	@ (8008110 <xTaskIncrementTick+0x15c>)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800805c:	e02e      	b.n	80080bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	3304      	adds	r3, #4
 8008062:	4618      	mov	r0, r3
 8008064:	f7fe feea 	bl	8006e3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806c:	2b00      	cmp	r3, #0
 800806e:	d004      	beq.n	800807a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	3318      	adds	r3, #24
 8008074:	4618      	mov	r0, r3
 8008076:	f7fe fee1 	bl	8006e3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807e:	2201      	movs	r2, #1
 8008080:	409a      	lsls	r2, r3
 8008082:	4b24      	ldr	r3, [pc, #144]	@ (8008114 <xTaskIncrementTick+0x160>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4313      	orrs	r3, r2
 8008088:	4a22      	ldr	r2, [pc, #136]	@ (8008114 <xTaskIncrementTick+0x160>)
 800808a:	6013      	str	r3, [r2, #0]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008090:	4613      	mov	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4a1f      	ldr	r2, [pc, #124]	@ (8008118 <xTaskIncrementTick+0x164>)
 800809a:	441a      	add	r2, r3
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	3304      	adds	r3, #4
 80080a0:	4619      	mov	r1, r3
 80080a2:	4610      	mov	r0, r2
 80080a4:	f7fe fe6d 	bl	8006d82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ac:	4b1b      	ldr	r3, [pc, #108]	@ (800811c <xTaskIncrementTick+0x168>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d3b9      	bcc.n	800802a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80080b6:	2301      	movs	r3, #1
 80080b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080ba:	e7b6      	b.n	800802a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080bc:	4b17      	ldr	r3, [pc, #92]	@ (800811c <xTaskIncrementTick+0x168>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080c2:	4915      	ldr	r1, [pc, #84]	@ (8008118 <xTaskIncrementTick+0x164>)
 80080c4:	4613      	mov	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	440b      	add	r3, r1
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d907      	bls.n	80080e4 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80080d4:	2301      	movs	r3, #1
 80080d6:	617b      	str	r3, [r7, #20]
 80080d8:	e004      	b.n	80080e4 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80080da:	4b11      	ldr	r3, [pc, #68]	@ (8008120 <xTaskIncrementTick+0x16c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	3301      	adds	r3, #1
 80080e0:	4a0f      	ldr	r2, [pc, #60]	@ (8008120 <xTaskIncrementTick+0x16c>)
 80080e2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80080e4:	4b0f      	ldr	r3, [pc, #60]	@ (8008124 <xTaskIncrementTick+0x170>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80080ec:	2301      	movs	r3, #1
 80080ee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80080f0:	697b      	ldr	r3, [r7, #20]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	20000880 	.word	0x20000880
 8008100:	2000085c 	.word	0x2000085c
 8008104:	20000810 	.word	0x20000810
 8008108:	20000814 	.word	0x20000814
 800810c:	20000870 	.word	0x20000870
 8008110:	20000878 	.word	0x20000878
 8008114:	20000860 	.word	0x20000860
 8008118:	20000784 	.word	0x20000784
 800811c:	20000780 	.word	0x20000780
 8008120:	20000868 	.word	0x20000868
 8008124:	2000086c 	.word	0x2000086c

08008128 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008128:	b480      	push	{r7}
 800812a:	b087      	sub	sp, #28
 800812c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800812e:	4b27      	ldr	r3, [pc, #156]	@ (80081cc <vTaskSwitchContext+0xa4>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d003      	beq.n	800813e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008136:	4b26      	ldr	r3, [pc, #152]	@ (80081d0 <vTaskSwitchContext+0xa8>)
 8008138:	2201      	movs	r2, #1
 800813a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800813c:	e040      	b.n	80081c0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800813e:	4b24      	ldr	r3, [pc, #144]	@ (80081d0 <vTaskSwitchContext+0xa8>)
 8008140:	2200      	movs	r2, #0
 8008142:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008144:	4b23      	ldr	r3, [pc, #140]	@ (80081d4 <vTaskSwitchContext+0xac>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	fab3 f383 	clz	r3, r3
 8008150:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008152:	7afb      	ldrb	r3, [r7, #11]
 8008154:	f1c3 031f 	rsb	r3, r3, #31
 8008158:	617b      	str	r3, [r7, #20]
 800815a:	491f      	ldr	r1, [pc, #124]	@ (80081d8 <vTaskSwitchContext+0xb0>)
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	4613      	mov	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	440b      	add	r3, r1
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10b      	bne.n	8008186 <vTaskSwitchContext+0x5e>
	__asm volatile
 800816e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	607b      	str	r3, [r7, #4]
}
 8008180:	bf00      	nop
 8008182:	bf00      	nop
 8008184:	e7fd      	b.n	8008182 <vTaskSwitchContext+0x5a>
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4a11      	ldr	r2, [pc, #68]	@ (80081d8 <vTaskSwitchContext+0xb0>)
 8008192:	4413      	add	r3, r2
 8008194:	613b      	str	r3, [r7, #16]
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	605a      	str	r2, [r3, #4]
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	685a      	ldr	r2, [r3, #4]
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	3308      	adds	r3, #8
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d104      	bne.n	80081b6 <vTaskSwitchContext+0x8e>
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	605a      	str	r2, [r3, #4]
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	4a07      	ldr	r2, [pc, #28]	@ (80081dc <vTaskSwitchContext+0xb4>)
 80081be:	6013      	str	r3, [r2, #0]
}
 80081c0:	bf00      	nop
 80081c2:	371c      	adds	r7, #28
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	20000880 	.word	0x20000880
 80081d0:	2000086c 	.word	0x2000086c
 80081d4:	20000860 	.word	0x20000860
 80081d8:	20000784 	.word	0x20000784
 80081dc:	20000780 	.word	0x20000780

080081e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10b      	bne.n	8008208 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	60fb      	str	r3, [r7, #12]
}
 8008202:	bf00      	nop
 8008204:	bf00      	nop
 8008206:	e7fd      	b.n	8008204 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008208:	4b07      	ldr	r3, [pc, #28]	@ (8008228 <vTaskPlaceOnEventList+0x48>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3318      	adds	r3, #24
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7fe fdda 	bl	8006dca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008216:	2101      	movs	r1, #1
 8008218:	6838      	ldr	r0, [r7, #0]
 800821a:	f000 fba9 	bl	8008970 <prvAddCurrentTaskToDelayedList>
}
 800821e:	bf00      	nop
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	20000780 	.word	0x20000780

0800822c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10b      	bne.n	8008256 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	617b      	str	r3, [r7, #20]
}
 8008250:	bf00      	nop
 8008252:	bf00      	nop
 8008254:	e7fd      	b.n	8008252 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008256:	4b0a      	ldr	r3, [pc, #40]	@ (8008280 <vTaskPlaceOnEventListRestricted+0x54>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3318      	adds	r3, #24
 800825c:	4619      	mov	r1, r3
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f7fe fd8f 	bl	8006d82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d002      	beq.n	8008270 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800826a:	f04f 33ff 	mov.w	r3, #4294967295
 800826e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	68b8      	ldr	r0, [r7, #8]
 8008274:	f000 fb7c 	bl	8008970 <prvAddCurrentTaskToDelayedList>
	}
 8008278:	bf00      	nop
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20000780 	.word	0x20000780

08008284 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10b      	bne.n	80082b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	60fb      	str	r3, [r7, #12]
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	e7fd      	b.n	80082ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	3318      	adds	r3, #24
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe fdc0 	bl	8006e3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008334 <xTaskRemoveFromEventList+0xb0>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d11c      	bne.n	80082fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	3304      	adds	r3, #4
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fe fdb7 	bl	8006e3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d2:	2201      	movs	r2, #1
 80082d4:	409a      	lsls	r2, r3
 80082d6:	4b18      	ldr	r3, [pc, #96]	@ (8008338 <xTaskRemoveFromEventList+0xb4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4313      	orrs	r3, r2
 80082dc:	4a16      	ldr	r2, [pc, #88]	@ (8008338 <xTaskRemoveFromEventList+0xb4>)
 80082de:	6013      	str	r3, [r2, #0]
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082e4:	4613      	mov	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4a13      	ldr	r2, [pc, #76]	@ (800833c <xTaskRemoveFromEventList+0xb8>)
 80082ee:	441a      	add	r2, r3
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	3304      	adds	r3, #4
 80082f4:	4619      	mov	r1, r3
 80082f6:	4610      	mov	r0, r2
 80082f8:	f7fe fd43 	bl	8006d82 <vListInsertEnd>
 80082fc:	e005      	b.n	800830a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	3318      	adds	r3, #24
 8008302:	4619      	mov	r1, r3
 8008304:	480e      	ldr	r0, [pc, #56]	@ (8008340 <xTaskRemoveFromEventList+0xbc>)
 8008306:	f7fe fd3c 	bl	8006d82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800830e:	4b0d      	ldr	r3, [pc, #52]	@ (8008344 <xTaskRemoveFromEventList+0xc0>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008314:	429a      	cmp	r2, r3
 8008316:	d905      	bls.n	8008324 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008318:	2301      	movs	r3, #1
 800831a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800831c:	4b0a      	ldr	r3, [pc, #40]	@ (8008348 <xTaskRemoveFromEventList+0xc4>)
 800831e:	2201      	movs	r2, #1
 8008320:	601a      	str	r2, [r3, #0]
 8008322:	e001      	b.n	8008328 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008324:	2300      	movs	r3, #0
 8008326:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008328:	697b      	ldr	r3, [r7, #20]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3718      	adds	r7, #24
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	20000880 	.word	0x20000880
 8008338:	20000860 	.word	0x20000860
 800833c:	20000784 	.word	0x20000784
 8008340:	20000818 	.word	0x20000818
 8008344:	20000780 	.word	0x20000780
 8008348:	2000086c 	.word	0x2000086c

0800834c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008354:	4b06      	ldr	r3, [pc, #24]	@ (8008370 <vTaskInternalSetTimeOutState+0x24>)
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800835c:	4b05      	ldr	r3, [pc, #20]	@ (8008374 <vTaskInternalSetTimeOutState+0x28>)
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	605a      	str	r2, [r3, #4]
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	20000870 	.word	0x20000870
 8008374:	2000085c 	.word	0x2000085c

08008378 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10b      	bne.n	80083a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	613b      	str	r3, [r7, #16]
}
 800839a:	bf00      	nop
 800839c:	bf00      	nop
 800839e:	e7fd      	b.n	800839c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10b      	bne.n	80083be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	60fb      	str	r3, [r7, #12]
}
 80083b8:	bf00      	nop
 80083ba:	bf00      	nop
 80083bc:	e7fd      	b.n	80083ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80083be:	f000 ff8b 	bl	80092d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80083c2:	4b1d      	ldr	r3, [pc, #116]	@ (8008438 <xTaskCheckForTimeOut+0xc0>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083da:	d102      	bne.n	80083e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80083dc:	2300      	movs	r3, #0
 80083de:	61fb      	str	r3, [r7, #28]
 80083e0:	e023      	b.n	800842a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	4b15      	ldr	r3, [pc, #84]	@ (800843c <xTaskCheckForTimeOut+0xc4>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d007      	beq.n	80083fe <xTaskCheckForTimeOut+0x86>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	69ba      	ldr	r2, [r7, #24]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d302      	bcc.n	80083fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80083f8:	2301      	movs	r3, #1
 80083fa:	61fb      	str	r3, [r7, #28]
 80083fc:	e015      	b.n	800842a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	429a      	cmp	r2, r3
 8008406:	d20b      	bcs.n	8008420 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	1ad2      	subs	r2, r2, r3
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7ff ff99 	bl	800834c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800841a:	2300      	movs	r3, #0
 800841c:	61fb      	str	r3, [r7, #28]
 800841e:	e004      	b.n	800842a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008426:	2301      	movs	r3, #1
 8008428:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800842a:	f000 ff87 	bl	800933c <vPortExitCritical>

	return xReturn;
 800842e:	69fb      	ldr	r3, [r7, #28]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3720      	adds	r7, #32
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	2000085c 	.word	0x2000085c
 800843c:	20000870 	.word	0x20000870

08008440 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008444:	4b03      	ldr	r3, [pc, #12]	@ (8008454 <vTaskMissedYield+0x14>)
 8008446:	2201      	movs	r2, #1
 8008448:	601a      	str	r2, [r3, #0]
}
 800844a:	bf00      	nop
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	2000086c 	.word	0x2000086c

08008458 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008460:	f000 f852 	bl	8008508 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008464:	4b06      	ldr	r3, [pc, #24]	@ (8008480 <prvIdleTask+0x28>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d9f9      	bls.n	8008460 <prvIdleTask+0x8>
			{
				taskYIELD();
 800846c:	4b05      	ldr	r3, [pc, #20]	@ (8008484 <prvIdleTask+0x2c>)
 800846e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800847c:	e7f0      	b.n	8008460 <prvIdleTask+0x8>
 800847e:	bf00      	nop
 8008480:	20000784 	.word	0x20000784
 8008484:	e000ed04 	.word	0xe000ed04

08008488 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800848e:	2300      	movs	r3, #0
 8008490:	607b      	str	r3, [r7, #4]
 8008492:	e00c      	b.n	80084ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	4613      	mov	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4a12      	ldr	r2, [pc, #72]	@ (80084e8 <prvInitialiseTaskLists+0x60>)
 80084a0:	4413      	add	r3, r2
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe fc40 	bl	8006d28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3301      	adds	r3, #1
 80084ac:	607b      	str	r3, [r7, #4]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b04      	cmp	r3, #4
 80084b2:	d9ef      	bls.n	8008494 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80084b4:	480d      	ldr	r0, [pc, #52]	@ (80084ec <prvInitialiseTaskLists+0x64>)
 80084b6:	f7fe fc37 	bl	8006d28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80084ba:	480d      	ldr	r0, [pc, #52]	@ (80084f0 <prvInitialiseTaskLists+0x68>)
 80084bc:	f7fe fc34 	bl	8006d28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084c0:	480c      	ldr	r0, [pc, #48]	@ (80084f4 <prvInitialiseTaskLists+0x6c>)
 80084c2:	f7fe fc31 	bl	8006d28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084c6:	480c      	ldr	r0, [pc, #48]	@ (80084f8 <prvInitialiseTaskLists+0x70>)
 80084c8:	f7fe fc2e 	bl	8006d28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084cc:	480b      	ldr	r0, [pc, #44]	@ (80084fc <prvInitialiseTaskLists+0x74>)
 80084ce:	f7fe fc2b 	bl	8006d28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008500 <prvInitialiseTaskLists+0x78>)
 80084d4:	4a05      	ldr	r2, [pc, #20]	@ (80084ec <prvInitialiseTaskLists+0x64>)
 80084d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008504 <prvInitialiseTaskLists+0x7c>)
 80084da:	4a05      	ldr	r2, [pc, #20]	@ (80084f0 <prvInitialiseTaskLists+0x68>)
 80084dc:	601a      	str	r2, [r3, #0]
}
 80084de:	bf00      	nop
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20000784 	.word	0x20000784
 80084ec:	200007e8 	.word	0x200007e8
 80084f0:	200007fc 	.word	0x200007fc
 80084f4:	20000818 	.word	0x20000818
 80084f8:	2000082c 	.word	0x2000082c
 80084fc:	20000844 	.word	0x20000844
 8008500:	20000810 	.word	0x20000810
 8008504:	20000814 	.word	0x20000814

08008508 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800850e:	e019      	b.n	8008544 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008510:	f000 fee2 	bl	80092d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008514:	4b10      	ldr	r3, [pc, #64]	@ (8008558 <prvCheckTasksWaitingTermination+0x50>)
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3304      	adds	r3, #4
 8008520:	4618      	mov	r0, r3
 8008522:	f7fe fc8b 	bl	8006e3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008526:	4b0d      	ldr	r3, [pc, #52]	@ (800855c <prvCheckTasksWaitingTermination+0x54>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3b01      	subs	r3, #1
 800852c:	4a0b      	ldr	r2, [pc, #44]	@ (800855c <prvCheckTasksWaitingTermination+0x54>)
 800852e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008530:	4b0b      	ldr	r3, [pc, #44]	@ (8008560 <prvCheckTasksWaitingTermination+0x58>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3b01      	subs	r3, #1
 8008536:	4a0a      	ldr	r2, [pc, #40]	@ (8008560 <prvCheckTasksWaitingTermination+0x58>)
 8008538:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800853a:	f000 feff 	bl	800933c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f810 	bl	8008564 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008544:	4b06      	ldr	r3, [pc, #24]	@ (8008560 <prvCheckTasksWaitingTermination+0x58>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e1      	bne.n	8008510 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800854c:	bf00      	nop
 800854e:	bf00      	nop
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	2000082c 	.word	0x2000082c
 800855c:	20000858 	.word	0x20000858
 8008560:	20000840 	.word	0x20000840

08008564 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008570:	4618      	mov	r0, r3
 8008572:	f001 f89b 	bl	80096ac <vPortFree>
			vPortFree( pxTCB );
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 f898 	bl	80096ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800857c:	bf00      	nop
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800858a:	4b0c      	ldr	r3, [pc, #48]	@ (80085bc <prvResetNextTaskUnblockTime+0x38>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d104      	bne.n	800859e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008594:	4b0a      	ldr	r3, [pc, #40]	@ (80085c0 <prvResetNextTaskUnblockTime+0x3c>)
 8008596:	f04f 32ff 	mov.w	r2, #4294967295
 800859a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800859c:	e008      	b.n	80085b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800859e:	4b07      	ldr	r3, [pc, #28]	@ (80085bc <prvResetNextTaskUnblockTime+0x38>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	4a04      	ldr	r2, [pc, #16]	@ (80085c0 <prvResetNextTaskUnblockTime+0x3c>)
 80085ae:	6013      	str	r3, [r2, #0]
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	20000810 	.word	0x20000810
 80085c0:	20000878 	.word	0x20000878

080085c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085ca:	4b0b      	ldr	r3, [pc, #44]	@ (80085f8 <xTaskGetSchedulerState+0x34>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d102      	bne.n	80085d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085d2:	2301      	movs	r3, #1
 80085d4:	607b      	str	r3, [r7, #4]
 80085d6:	e008      	b.n	80085ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085d8:	4b08      	ldr	r3, [pc, #32]	@ (80085fc <xTaskGetSchedulerState+0x38>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d102      	bne.n	80085e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085e0:	2302      	movs	r3, #2
 80085e2:	607b      	str	r3, [r7, #4]
 80085e4:	e001      	b.n	80085ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085e6:	2300      	movs	r3, #0
 80085e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80085ea:	687b      	ldr	r3, [r7, #4]
	}
 80085ec:	4618      	mov	r0, r3
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	20000864 	.word	0x20000864
 80085fc:	20000880 	.word	0x20000880

08008600 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800860c:	2300      	movs	r3, #0
 800860e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d069      	beq.n	80086ea <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800861a:	4b36      	ldr	r3, [pc, #216]	@ (80086f4 <xTaskPriorityInherit+0xf4>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008620:	429a      	cmp	r2, r3
 8008622:	d259      	bcs.n	80086d8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	2b00      	cmp	r3, #0
 800862a:	db06      	blt.n	800863a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800862c:	4b31      	ldr	r3, [pc, #196]	@ (80086f4 <xTaskPriorityInherit+0xf4>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008632:	f1c3 0205 	rsb	r2, r3, #5
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	6959      	ldr	r1, [r3, #20]
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008642:	4613      	mov	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4a2b      	ldr	r2, [pc, #172]	@ (80086f8 <xTaskPriorityInherit+0xf8>)
 800864c:	4413      	add	r3, r2
 800864e:	4299      	cmp	r1, r3
 8008650:	d13a      	bne.n	80086c8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	3304      	adds	r3, #4
 8008656:	4618      	mov	r0, r3
 8008658:	f7fe fbf0 	bl	8006e3c <uxListRemove>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d115      	bne.n	800868e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008666:	4924      	ldr	r1, [pc, #144]	@ (80086f8 <xTaskPriorityInherit+0xf8>)
 8008668:	4613      	mov	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	440b      	add	r3, r1
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10a      	bne.n	800868e <xTaskPriorityInherit+0x8e>
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800867c:	2201      	movs	r2, #1
 800867e:	fa02 f303 	lsl.w	r3, r2, r3
 8008682:	43da      	mvns	r2, r3
 8008684:	4b1d      	ldr	r3, [pc, #116]	@ (80086fc <xTaskPriorityInherit+0xfc>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4013      	ands	r3, r2
 800868a:	4a1c      	ldr	r2, [pc, #112]	@ (80086fc <xTaskPriorityInherit+0xfc>)
 800868c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800868e:	4b19      	ldr	r3, [pc, #100]	@ (80086f4 <xTaskPriorityInherit+0xf4>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800869c:	2201      	movs	r2, #1
 800869e:	409a      	lsls	r2, r3
 80086a0:	4b16      	ldr	r3, [pc, #88]	@ (80086fc <xTaskPriorityInherit+0xfc>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	4a15      	ldr	r2, [pc, #84]	@ (80086fc <xTaskPriorityInherit+0xfc>)
 80086a8:	6013      	str	r3, [r2, #0]
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ae:	4613      	mov	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4a10      	ldr	r2, [pc, #64]	@ (80086f8 <xTaskPriorityInherit+0xf8>)
 80086b8:	441a      	add	r2, r3
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	3304      	adds	r3, #4
 80086be:	4619      	mov	r1, r3
 80086c0:	4610      	mov	r0, r2
 80086c2:	f7fe fb5e 	bl	8006d82 <vListInsertEnd>
 80086c6:	e004      	b.n	80086d2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086c8:	4b0a      	ldr	r3, [pc, #40]	@ (80086f4 <xTaskPriorityInherit+0xf4>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80086d2:	2301      	movs	r3, #1
 80086d4:	60fb      	str	r3, [r7, #12]
 80086d6:	e008      	b.n	80086ea <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80086dc:	4b05      	ldr	r3, [pc, #20]	@ (80086f4 <xTaskPriorityInherit+0xf4>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d201      	bcs.n	80086ea <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80086e6:	2301      	movs	r3, #1
 80086e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086ea:	68fb      	ldr	r3, [r7, #12]
	}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20000780 	.word	0x20000780
 80086f8:	20000784 	.word	0x20000784
 80086fc:	20000860 	.word	0x20000860

08008700 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800870c:	2300      	movs	r3, #0
 800870e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d070      	beq.n	80087f8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008716:	4b3b      	ldr	r3, [pc, #236]	@ (8008804 <xTaskPriorityDisinherit+0x104>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	429a      	cmp	r2, r3
 800871e:	d00b      	beq.n	8008738 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	60fb      	str	r3, [r7, #12]
}
 8008732:	bf00      	nop
 8008734:	bf00      	nop
 8008736:	e7fd      	b.n	8008734 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10b      	bne.n	8008758 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	60bb      	str	r3, [r7, #8]
}
 8008752:	bf00      	nop
 8008754:	bf00      	nop
 8008756:	e7fd      	b.n	8008754 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800875c:	1e5a      	subs	r2, r3, #1
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800876a:	429a      	cmp	r2, r3
 800876c:	d044      	beq.n	80087f8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008772:	2b00      	cmp	r3, #0
 8008774:	d140      	bne.n	80087f8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	3304      	adds	r3, #4
 800877a:	4618      	mov	r0, r3
 800877c:	f7fe fb5e 	bl	8006e3c <uxListRemove>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d115      	bne.n	80087b2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800878a:	491f      	ldr	r1, [pc, #124]	@ (8008808 <xTaskPriorityDisinherit+0x108>)
 800878c:	4613      	mov	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	440b      	add	r3, r1
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10a      	bne.n	80087b2 <xTaskPriorityDisinherit+0xb2>
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a0:	2201      	movs	r2, #1
 80087a2:	fa02 f303 	lsl.w	r3, r2, r3
 80087a6:	43da      	mvns	r2, r3
 80087a8:	4b18      	ldr	r3, [pc, #96]	@ (800880c <xTaskPriorityDisinherit+0x10c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4013      	ands	r3, r2
 80087ae:	4a17      	ldr	r2, [pc, #92]	@ (800880c <xTaskPriorityDisinherit+0x10c>)
 80087b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087be:	f1c3 0205 	rsb	r2, r3, #5
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ca:	2201      	movs	r2, #1
 80087cc:	409a      	lsls	r2, r3
 80087ce:	4b0f      	ldr	r3, [pc, #60]	@ (800880c <xTaskPriorityDisinherit+0x10c>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	4a0d      	ldr	r2, [pc, #52]	@ (800880c <xTaskPriorityDisinherit+0x10c>)
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087dc:	4613      	mov	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4a08      	ldr	r2, [pc, #32]	@ (8008808 <xTaskPriorityDisinherit+0x108>)
 80087e6:	441a      	add	r2, r3
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	3304      	adds	r3, #4
 80087ec:	4619      	mov	r1, r3
 80087ee:	4610      	mov	r0, r2
 80087f0:	f7fe fac7 	bl	8006d82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80087f4:	2301      	movs	r3, #1
 80087f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087f8:	697b      	ldr	r3, [r7, #20]
	}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000780 	.word	0x20000780
 8008808:	20000784 	.word	0x20000784
 800880c:	20000860 	.word	0x20000860

08008810 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008810:	b580      	push	{r7, lr}
 8008812:	b088      	sub	sp, #32
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800881e:	2301      	movs	r3, #1
 8008820:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 8085 	beq.w	8008934 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10b      	bne.n	800884a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8008832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	60fb      	str	r3, [r7, #12]
}
 8008844:	bf00      	nop
 8008846:	bf00      	nop
 8008848:	e7fd      	b.n	8008846 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	429a      	cmp	r2, r3
 8008852:	d902      	bls.n	800885a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	61fb      	str	r3, [r7, #28]
 8008858:	e002      	b.n	8008860 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800885e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008864:	69fa      	ldr	r2, [r7, #28]
 8008866:	429a      	cmp	r2, r3
 8008868:	d064      	beq.n	8008934 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	429a      	cmp	r2, r3
 8008872:	d15f      	bne.n	8008934 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008874:	4b31      	ldr	r3, [pc, #196]	@ (800893c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	69ba      	ldr	r2, [r7, #24]
 800887a:	429a      	cmp	r2, r3
 800887c:	d10b      	bne.n	8008896 <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	60bb      	str	r3, [r7, #8]
}
 8008890:	bf00      	nop
 8008892:	bf00      	nop
 8008894:	e7fd      	b.n	8008892 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	69fa      	ldr	r2, [r7, #28]
 80088a0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	db04      	blt.n	80088b4 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	f1c3 0205 	rsb	r2, r3, #5
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	6959      	ldr	r1, [r3, #20]
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4a1f      	ldr	r2, [pc, #124]	@ (8008940 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80088c4:	4413      	add	r3, r2
 80088c6:	4299      	cmp	r1, r3
 80088c8:	d134      	bne.n	8008934 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	3304      	adds	r3, #4
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe fab4 	bl	8006e3c <uxListRemove>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d115      	bne.n	8008906 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088de:	4918      	ldr	r1, [pc, #96]	@ (8008940 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80088e0:	4613      	mov	r3, r2
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	4413      	add	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	440b      	add	r3, r1
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10a      	bne.n	8008906 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f4:	2201      	movs	r2, #1
 80088f6:	fa02 f303 	lsl.w	r3, r2, r3
 80088fa:	43da      	mvns	r2, r3
 80088fc:	4b11      	ldr	r3, [pc, #68]	@ (8008944 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4013      	ands	r3, r2
 8008902:	4a10      	ldr	r2, [pc, #64]	@ (8008944 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008904:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890a:	2201      	movs	r2, #1
 800890c:	409a      	lsls	r2, r3
 800890e:	4b0d      	ldr	r3, [pc, #52]	@ (8008944 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4313      	orrs	r3, r2
 8008914:	4a0b      	ldr	r2, [pc, #44]	@ (8008944 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008916:	6013      	str	r3, [r2, #0]
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800891c:	4613      	mov	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4a06      	ldr	r2, [pc, #24]	@ (8008940 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008926:	441a      	add	r2, r3
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	3304      	adds	r3, #4
 800892c:	4619      	mov	r1, r3
 800892e:	4610      	mov	r0, r2
 8008930:	f7fe fa27 	bl	8006d82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008934:	bf00      	nop
 8008936:	3720      	adds	r7, #32
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	20000780 	.word	0x20000780
 8008940:	20000784 	.word	0x20000784
 8008944:	20000860 	.word	0x20000860

08008948 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008948:	b480      	push	{r7}
 800894a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800894c:	4b07      	ldr	r3, [pc, #28]	@ (800896c <pvTaskIncrementMutexHeldCount+0x24>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d004      	beq.n	800895e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008954:	4b05      	ldr	r3, [pc, #20]	@ (800896c <pvTaskIncrementMutexHeldCount+0x24>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800895a:	3201      	adds	r2, #1
 800895c:	64da      	str	r2, [r3, #76]	@ 0x4c
		}

		return pxCurrentTCB;
 800895e:	4b03      	ldr	r3, [pc, #12]	@ (800896c <pvTaskIncrementMutexHeldCount+0x24>)
 8008960:	681b      	ldr	r3, [r3, #0]
	}
 8008962:	4618      	mov	r0, r3
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	20000780 	.word	0x20000780

08008970 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800897a:	4b29      	ldr	r3, [pc, #164]	@ (8008a20 <prvAddCurrentTaskToDelayedList+0xb0>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008980:	4b28      	ldr	r3, [pc, #160]	@ (8008a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3304      	adds	r3, #4
 8008986:	4618      	mov	r0, r3
 8008988:	f7fe fa58 	bl	8006e3c <uxListRemove>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10b      	bne.n	80089aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008992:	4b24      	ldr	r3, [pc, #144]	@ (8008a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008998:	2201      	movs	r2, #1
 800899a:	fa02 f303 	lsl.w	r3, r2, r3
 800899e:	43da      	mvns	r2, r3
 80089a0:	4b21      	ldr	r3, [pc, #132]	@ (8008a28 <prvAddCurrentTaskToDelayedList+0xb8>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4013      	ands	r3, r2
 80089a6:	4a20      	ldr	r2, [pc, #128]	@ (8008a28 <prvAddCurrentTaskToDelayedList+0xb8>)
 80089a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b0:	d10a      	bne.n	80089c8 <prvAddCurrentTaskToDelayedList+0x58>
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d007      	beq.n	80089c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3304      	adds	r3, #4
 80089be:	4619      	mov	r1, r3
 80089c0:	481a      	ldr	r0, [pc, #104]	@ (8008a2c <prvAddCurrentTaskToDelayedList+0xbc>)
 80089c2:	f7fe f9de 	bl	8006d82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089c6:	e026      	b.n	8008a16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4413      	add	r3, r2
 80089ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089d0:	4b14      	ldr	r3, [pc, #80]	@ (8008a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d209      	bcs.n	80089f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089e0:	4b13      	ldr	r3, [pc, #76]	@ (8008a30 <prvAddCurrentTaskToDelayedList+0xc0>)
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	4b0f      	ldr	r3, [pc, #60]	@ (8008a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	3304      	adds	r3, #4
 80089ea:	4619      	mov	r1, r3
 80089ec:	4610      	mov	r0, r2
 80089ee:	f7fe f9ec 	bl	8006dca <vListInsert>
}
 80089f2:	e010      	b.n	8008a16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008a34 <prvAddCurrentTaskToDelayedList+0xc4>)
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3304      	adds	r3, #4
 80089fe:	4619      	mov	r1, r3
 8008a00:	4610      	mov	r0, r2
 8008a02:	f7fe f9e2 	bl	8006dca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a06:	4b0c      	ldr	r3, [pc, #48]	@ (8008a38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d202      	bcs.n	8008a16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008a10:	4a09      	ldr	r2, [pc, #36]	@ (8008a38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	6013      	str	r3, [r2, #0]
}
 8008a16:	bf00      	nop
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	2000085c 	.word	0x2000085c
 8008a24:	20000780 	.word	0x20000780
 8008a28:	20000860 	.word	0x20000860
 8008a2c:	20000844 	.word	0x20000844
 8008a30:	20000814 	.word	0x20000814
 8008a34:	20000810 	.word	0x20000810
 8008a38:	20000878 	.word	0x20000878

08008a3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008a46:	f000 fae1 	bl	800900c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008a4a:	4b12      	ldr	r3, [pc, #72]	@ (8008a94 <xTimerCreateTimerTask+0x58>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00b      	beq.n	8008a6a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8008a52:	4b11      	ldr	r3, [pc, #68]	@ (8008a98 <xTimerCreateTimerTask+0x5c>)
 8008a54:	9301      	str	r3, [sp, #4]
 8008a56:	2302      	movs	r3, #2
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008a60:	490e      	ldr	r1, [pc, #56]	@ (8008a9c <xTimerCreateTimerTask+0x60>)
 8008a62:	480f      	ldr	r0, [pc, #60]	@ (8008aa0 <xTimerCreateTimerTask+0x64>)
 8008a64:	f7ff f826 	bl	8007ab4 <xTaskCreate>
 8008a68:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10b      	bne.n	8008a88 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	603b      	str	r3, [r7, #0]
}
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	e7fd      	b.n	8008a84 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8008a88:	687b      	ldr	r3, [r7, #4]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	200008b4 	.word	0x200008b4
 8008a98:	200008b8 	.word	0x200008b8
 8008a9c:	0800b5fc 	.word	0x0800b5fc
 8008aa0:	08008bdd 	.word	0x08008bdd

08008aa4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b08a      	sub	sp, #40	@ 0x28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
 8008ab0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10b      	bne.n	8008ad4 <xTimerGenericCommand+0x30>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	623b      	str	r3, [r7, #32]
}
 8008ace:	bf00      	nop
 8008ad0:	bf00      	nop
 8008ad2:	e7fd      	b.n	8008ad0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ad4:	4b19      	ldr	r3, [pc, #100]	@ (8008b3c <xTimerGenericCommand+0x98>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d02a      	beq.n	8008b32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2b05      	cmp	r3, #5
 8008aec:	dc18      	bgt.n	8008b20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008aee:	f7ff fd69 	bl	80085c4 <xTaskGetSchedulerState>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d109      	bne.n	8008b0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008af8:	4b10      	ldr	r3, [pc, #64]	@ (8008b3c <xTimerGenericCommand+0x98>)
 8008afa:	6818      	ldr	r0, [r3, #0]
 8008afc:	f107 0114 	add.w	r1, r7, #20
 8008b00:	2300      	movs	r3, #0
 8008b02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b04:	f7fe fac0 	bl	8007088 <xQueueGenericSend>
 8008b08:	6278      	str	r0, [r7, #36]	@ 0x24
 8008b0a:	e012      	b.n	8008b32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008b3c <xTimerGenericCommand+0x98>)
 8008b0e:	6818      	ldr	r0, [r3, #0]
 8008b10:	f107 0114 	add.w	r1, r7, #20
 8008b14:	2300      	movs	r3, #0
 8008b16:	2200      	movs	r2, #0
 8008b18:	f7fe fab6 	bl	8007088 <xQueueGenericSend>
 8008b1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008b1e:	e008      	b.n	8008b32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b20:	4b06      	ldr	r3, [pc, #24]	@ (8008b3c <xTimerGenericCommand+0x98>)
 8008b22:	6818      	ldr	r0, [r3, #0]
 8008b24:	f107 0114 	add.w	r1, r7, #20
 8008b28:	2300      	movs	r3, #0
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	f7fe fbae 	bl	800728c <xQueueGenericSendFromISR>
 8008b30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3728      	adds	r7, #40	@ 0x28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	200008b4 	.word	0x200008b4

08008b40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b088      	sub	sp, #32
 8008b44:	af02      	add	r7, sp, #8
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b4a:	4b23      	ldr	r3, [pc, #140]	@ (8008bd8 <prvProcessExpiredTimer+0x98>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	3304      	adds	r3, #4
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7fe f96f 	bl	8006e3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b64:	f003 0304 	and.w	r3, r3, #4
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d023      	beq.n	8008bb4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	699a      	ldr	r2, [r3, #24]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	18d1      	adds	r1, r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	6978      	ldr	r0, [r7, #20]
 8008b7a:	f000 f8d5 	bl	8008d28 <prvInsertTimerInActiveList>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d020      	beq.n	8008bc6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b84:	2300      	movs	r3, #0
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	2300      	movs	r3, #0
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	6978      	ldr	r0, [r7, #20]
 8008b90:	f7ff ff88 	bl	8008aa4 <xTimerGenericCommand>
 8008b94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d114      	bne.n	8008bc6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba0:	f383 8811 	msr	BASEPRI, r3
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	60fb      	str	r3, [r7, #12]
}
 8008bae:	bf00      	nop
 8008bb0:	bf00      	nop
 8008bb2:	e7fd      	b.n	8008bb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bba:	f023 0301 	bic.w	r3, r3, #1
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	6978      	ldr	r0, [r7, #20]
 8008bcc:	4798      	blx	r3
}
 8008bce:	bf00      	nop
 8008bd0:	3718      	adds	r7, #24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	200008ac 	.word	0x200008ac

08008bdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008be4:	f107 0308 	add.w	r3, r7, #8
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 f859 	bl	8008ca0 <prvGetNextExpireTime>
 8008bee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 f805 	bl	8008c04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008bfa:	f000 f8d7 	bl	8008dac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bfe:	bf00      	nop
 8008c00:	e7f0      	b.n	8008be4 <prvTimerTask+0x8>
	...

08008c04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008c0e:	f7ff f915 	bl	8007e3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c12:	f107 0308 	add.w	r3, r7, #8
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 f866 	bl	8008ce8 <prvSampleTimeNow>
 8008c1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d130      	bne.n	8008c86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10a      	bne.n	8008c40 <prvProcessTimerOrBlockTask+0x3c>
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d806      	bhi.n	8008c40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008c32:	f7ff f911 	bl	8007e58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008c36:	68f9      	ldr	r1, [r7, #12]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f7ff ff81 	bl	8008b40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008c3e:	e024      	b.n	8008c8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d008      	beq.n	8008c58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008c46:	4b13      	ldr	r3, [pc, #76]	@ (8008c94 <prvProcessTimerOrBlockTask+0x90>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <prvProcessTimerOrBlockTask+0x50>
 8008c50:	2301      	movs	r3, #1
 8008c52:	e000      	b.n	8008c56 <prvProcessTimerOrBlockTask+0x52>
 8008c54:	2300      	movs	r3, #0
 8008c56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c58:	4b0f      	ldr	r3, [pc, #60]	@ (8008c98 <prvProcessTimerOrBlockTask+0x94>)
 8008c5a:	6818      	ldr	r0, [r3, #0]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	4619      	mov	r1, r3
 8008c66:	f7fe fef1 	bl	8007a4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c6a:	f7ff f8f5 	bl	8007e58 <xTaskResumeAll>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c74:	4b09      	ldr	r3, [pc, #36]	@ (8008c9c <prvProcessTimerOrBlockTask+0x98>)
 8008c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c7a:	601a      	str	r2, [r3, #0]
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	f3bf 8f6f 	isb	sy
}
 8008c84:	e001      	b.n	8008c8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c86:	f7ff f8e7 	bl	8007e58 <xTaskResumeAll>
}
 8008c8a:	bf00      	nop
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	200008b0 	.word	0x200008b0
 8008c98:	200008b4 	.word	0x200008b4
 8008c9c:	e000ed04 	.word	0xe000ed04

08008ca0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8008ce4 <prvGetNextExpireTime+0x44>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d101      	bne.n	8008cb6 <prvGetNextExpireTime+0x16>
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	e000      	b.n	8008cb8 <prvGetNextExpireTime+0x18>
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d105      	bne.n	8008cd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cc4:	4b07      	ldr	r3, [pc, #28]	@ (8008ce4 <prvGetNextExpireTime+0x44>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	60fb      	str	r3, [r7, #12]
 8008cce:	e001      	b.n	8008cd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	200008ac 	.word	0x200008ac

08008ce8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008cf0:	f7ff f950 	bl	8007f94 <xTaskGetTickCount>
 8008cf4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8008d24 <prvSampleTimeNow+0x3c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d205      	bcs.n	8008d0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008d00:	f000 f91e 	bl	8008f40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	e002      	b.n	8008d12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008d12:	4a04      	ldr	r2, [pc, #16]	@ (8008d24 <prvSampleTimeNow+0x3c>)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008d18:	68fb      	ldr	r3, [r7, #12]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	200008bc 	.word	0x200008bc

08008d28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
 8008d34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008d36:	2300      	movs	r3, #0
 8008d38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d812      	bhi.n	8008d74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	1ad2      	subs	r2, r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d302      	bcc.n	8008d62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	617b      	str	r3, [r7, #20]
 8008d60:	e01b      	b.n	8008d9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d62:	4b10      	ldr	r3, [pc, #64]	@ (8008da4 <prvInsertTimerInActiveList+0x7c>)
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	3304      	adds	r3, #4
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	f7fe f82c 	bl	8006dca <vListInsert>
 8008d72:	e012      	b.n	8008d9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d206      	bcs.n	8008d8a <prvInsertTimerInActiveList+0x62>
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d302      	bcc.n	8008d8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d84:	2301      	movs	r3, #1
 8008d86:	617b      	str	r3, [r7, #20]
 8008d88:	e007      	b.n	8008d9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d8a:	4b07      	ldr	r3, [pc, #28]	@ (8008da8 <prvInsertTimerInActiveList+0x80>)
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	3304      	adds	r3, #4
 8008d92:	4619      	mov	r1, r3
 8008d94:	4610      	mov	r0, r2
 8008d96:	f7fe f818 	bl	8006dca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d9a:	697b      	ldr	r3, [r7, #20]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3718      	adds	r7, #24
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	200008b0 	.word	0x200008b0
 8008da8:	200008ac 	.word	0x200008ac

08008dac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b08c      	sub	sp, #48	@ 0x30
 8008db0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008db2:	e0b2      	b.n	8008f1a <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f2c0 80af 	blt.w	8008f1a <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d004      	beq.n	8008dd2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dca:	3304      	adds	r3, #4
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fe f835 	bl	8006e3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dd2:	1d3b      	adds	r3, r7, #4
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7ff ff87 	bl	8008ce8 <prvSampleTimeNow>
 8008dda:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2b09      	cmp	r3, #9
 8008de0:	f200 8098 	bhi.w	8008f14 <prvProcessReceivedCommands+0x168>
 8008de4:	a201      	add	r2, pc, #4	@ (adr r2, 8008dec <prvProcessReceivedCommands+0x40>)
 8008de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dea:	bf00      	nop
 8008dec:	08008e15 	.word	0x08008e15
 8008df0:	08008e15 	.word	0x08008e15
 8008df4:	08008e15 	.word	0x08008e15
 8008df8:	08008e8b 	.word	0x08008e8b
 8008dfc:	08008e9f 	.word	0x08008e9f
 8008e00:	08008eeb 	.word	0x08008eeb
 8008e04:	08008e15 	.word	0x08008e15
 8008e08:	08008e15 	.word	0x08008e15
 8008e0c:	08008e8b 	.word	0x08008e8b
 8008e10:	08008e9f 	.word	0x08008e9f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e1a:	f043 0301 	orr.w	r3, r3, #1
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	18d1      	adds	r1, r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6a3a      	ldr	r2, [r7, #32]
 8008e32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008e34:	f7ff ff78 	bl	8008d28 <prvInsertTimerInActiveList>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d06c      	beq.n	8008f18 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008e44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e4c:	f003 0304 	and.w	r3, r3, #4
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d061      	beq.n	8008f18 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	441a      	add	r2, r3
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	2300      	movs	r3, #0
 8008e62:	2100      	movs	r1, #0
 8008e64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008e66:	f7ff fe1d 	bl	8008aa4 <xTimerGenericCommand>
 8008e6a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d152      	bne.n	8008f18 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	61bb      	str	r3, [r7, #24]
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop
 8008e88:	e7fd      	b.n	8008e86 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e90:	f023 0301 	bic.w	r3, r3, #1
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008e9c:	e03d      	b.n	8008f1a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ea4:	f043 0301 	orr.w	r3, r3, #1
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d10b      	bne.n	8008ed6 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	617b      	str	r3, [r7, #20]
}
 8008ed0:	bf00      	nop
 8008ed2:	bf00      	nop
 8008ed4:	e7fd      	b.n	8008ed2 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed8:	699a      	ldr	r2, [r3, #24]
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	18d1      	adds	r1, r2, r3
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	6a3a      	ldr	r2, [r7, #32]
 8008ee2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008ee4:	f7ff ff20 	bl	8008d28 <prvInsertTimerInActiveList>
					break;
 8008ee8:	e017      	b.n	8008f1a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ef0:	f003 0302 	and.w	r3, r3, #2
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d103      	bne.n	8008f00 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8008ef8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008efa:	f000 fbd7 	bl	80096ac <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008efe:	e00c      	b.n	8008f1a <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f06:	f023 0301 	bic.w	r3, r3, #1
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008f12:	e002      	b.n	8008f1a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8008f14:	bf00      	nop
 8008f16:	e000      	b.n	8008f1a <prvProcessReceivedCommands+0x16e>
					break;
 8008f18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f1a:	4b08      	ldr	r3, [pc, #32]	@ (8008f3c <prvProcessReceivedCommands+0x190>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f107 0108 	add.w	r1, r7, #8
 8008f22:	2200      	movs	r2, #0
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7fe fa4d 	bl	80073c4 <xQueueReceive>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f47f af41 	bne.w	8008db4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008f32:	bf00      	nop
 8008f34:	bf00      	nop
 8008f36:	3728      	adds	r7, #40	@ 0x28
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	200008b4 	.word	0x200008b4

08008f40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f46:	e049      	b.n	8008fdc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f48:	4b2e      	ldr	r3, [pc, #184]	@ (8009004 <prvSwitchTimerLists+0xc4>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f52:	4b2c      	ldr	r3, [pc, #176]	@ (8009004 <prvSwitchTimerLists+0xc4>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3304      	adds	r3, #4
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fd ff6b 	bl	8006e3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f74:	f003 0304 	and.w	r3, r3, #4
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d02f      	beq.n	8008fdc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	4413      	add	r3, r2
 8008f84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d90e      	bls.n	8008fac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8009004 <prvSwitchTimerLists+0xc4>)
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	f7fd ff10 	bl	8006dca <vListInsert>
 8008faa:	e017      	b.n	8008fdc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fac:	2300      	movs	r3, #0
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f7ff fd74 	bl	8008aa4 <xTimerGenericCommand>
 8008fbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10b      	bne.n	8008fdc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	603b      	str	r3, [r7, #0]
}
 8008fd6:	bf00      	nop
 8008fd8:	bf00      	nop
 8008fda:	e7fd      	b.n	8008fd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fdc:	4b09      	ldr	r3, [pc, #36]	@ (8009004 <prvSwitchTimerLists+0xc4>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1b0      	bne.n	8008f48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008fe6:	4b07      	ldr	r3, [pc, #28]	@ (8009004 <prvSwitchTimerLists+0xc4>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008fec:	4b06      	ldr	r3, [pc, #24]	@ (8009008 <prvSwitchTimerLists+0xc8>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a04      	ldr	r2, [pc, #16]	@ (8009004 <prvSwitchTimerLists+0xc4>)
 8008ff2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ff4:	4a04      	ldr	r2, [pc, #16]	@ (8009008 <prvSwitchTimerLists+0xc8>)
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	6013      	str	r3, [r2, #0]
}
 8008ffa:	bf00      	nop
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	200008ac 	.word	0x200008ac
 8009008:	200008b0 	.word	0x200008b0

0800900c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009010:	f000 f962 	bl	80092d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009014:	4b12      	ldr	r3, [pc, #72]	@ (8009060 <prvCheckForValidListAndQueue+0x54>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d11d      	bne.n	8009058 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800901c:	4811      	ldr	r0, [pc, #68]	@ (8009064 <prvCheckForValidListAndQueue+0x58>)
 800901e:	f7fd fe83 	bl	8006d28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009022:	4811      	ldr	r0, [pc, #68]	@ (8009068 <prvCheckForValidListAndQueue+0x5c>)
 8009024:	f7fd fe80 	bl	8006d28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009028:	4b10      	ldr	r3, [pc, #64]	@ (800906c <prvCheckForValidListAndQueue+0x60>)
 800902a:	4a0e      	ldr	r2, [pc, #56]	@ (8009064 <prvCheckForValidListAndQueue+0x58>)
 800902c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800902e:	4b10      	ldr	r3, [pc, #64]	@ (8009070 <prvCheckForValidListAndQueue+0x64>)
 8009030:	4a0d      	ldr	r2, [pc, #52]	@ (8009068 <prvCheckForValidListAndQueue+0x5c>)
 8009032:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8009034:	2200      	movs	r2, #0
 8009036:	210c      	movs	r1, #12
 8009038:	200a      	movs	r0, #10
 800903a:	f7fd ff93 	bl	8006f64 <xQueueGenericCreate>
 800903e:	4603      	mov	r3, r0
 8009040:	4a07      	ldr	r2, [pc, #28]	@ (8009060 <prvCheckForValidListAndQueue+0x54>)
 8009042:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009044:	4b06      	ldr	r3, [pc, #24]	@ (8009060 <prvCheckForValidListAndQueue+0x54>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d005      	beq.n	8009058 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800904c:	4b04      	ldr	r3, [pc, #16]	@ (8009060 <prvCheckForValidListAndQueue+0x54>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4908      	ldr	r1, [pc, #32]	@ (8009074 <prvCheckForValidListAndQueue+0x68>)
 8009052:	4618      	mov	r0, r3
 8009054:	f7fe fcd0 	bl	80079f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009058:	f000 f970 	bl	800933c <vPortExitCritical>
}
 800905c:	bf00      	nop
 800905e:	bd80      	pop	{r7, pc}
 8009060:	200008b4 	.word	0x200008b4
 8009064:	20000884 	.word	0x20000884
 8009068:	20000898 	.word	0x20000898
 800906c:	200008ac 	.word	0x200008ac
 8009070:	200008b0 	.word	0x200008b0
 8009074:	0800b604 	.word	0x0800b604

08009078 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	3b04      	subs	r3, #4
 8009088:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	3b04      	subs	r3, #4
 8009096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f023 0201 	bic.w	r2, r3, #1
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	3b04      	subs	r3, #4
 80090a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090a8:	4a0c      	ldr	r2, [pc, #48]	@ (80090dc <pxPortInitialiseStack+0x64>)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3b14      	subs	r3, #20
 80090b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3b04      	subs	r3, #4
 80090be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f06f 0202 	mvn.w	r2, #2
 80090c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	3b20      	subs	r3, #32
 80090cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090ce:	68fb      	ldr	r3, [r7, #12]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3714      	adds	r7, #20
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	080090e1 	.word	0x080090e1

080090e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80090ea:	4b13      	ldr	r3, [pc, #76]	@ (8009138 <prvTaskExitError+0x58>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f2:	d00b      	beq.n	800910c <prvTaskExitError+0x2c>
	__asm volatile
 80090f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	60fb      	str	r3, [r7, #12]
}
 8009106:	bf00      	nop
 8009108:	bf00      	nop
 800910a:	e7fd      	b.n	8009108 <prvTaskExitError+0x28>
	__asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	60bb      	str	r3, [r7, #8]
}
 800911e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009120:	bf00      	nop
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d0fc      	beq.n	8009122 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009128:	bf00      	nop
 800912a:	bf00      	nop
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	20000028 	.word	0x20000028
 800913c:	00000000 	.word	0x00000000

08009140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009140:	4b07      	ldr	r3, [pc, #28]	@ (8009160 <pxCurrentTCBConst2>)
 8009142:	6819      	ldr	r1, [r3, #0]
 8009144:	6808      	ldr	r0, [r1, #0]
 8009146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914a:	f380 8809 	msr	PSP, r0
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f04f 0000 	mov.w	r0, #0
 8009156:	f380 8811 	msr	BASEPRI, r0
 800915a:	4770      	bx	lr
 800915c:	f3af 8000 	nop.w

08009160 <pxCurrentTCBConst2>:
 8009160:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop

08009168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009168:	4808      	ldr	r0, [pc, #32]	@ (800918c <prvPortStartFirstTask+0x24>)
 800916a:	6800      	ldr	r0, [r0, #0]
 800916c:	6800      	ldr	r0, [r0, #0]
 800916e:	f380 8808 	msr	MSP, r0
 8009172:	f04f 0000 	mov.w	r0, #0
 8009176:	f380 8814 	msr	CONTROL, r0
 800917a:	b662      	cpsie	i
 800917c:	b661      	cpsie	f
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	df00      	svc	0
 8009188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800918a:	bf00      	nop
 800918c:	e000ed08 	.word	0xe000ed08

08009190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009196:	4b47      	ldr	r3, [pc, #284]	@ (80092b4 <xPortStartScheduler+0x124>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a47      	ldr	r2, [pc, #284]	@ (80092b8 <xPortStartScheduler+0x128>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d10b      	bne.n	80091b8 <xPortStartScheduler+0x28>
	__asm volatile
 80091a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	60fb      	str	r3, [r7, #12]
}
 80091b2:	bf00      	nop
 80091b4:	bf00      	nop
 80091b6:	e7fd      	b.n	80091b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80091b8:	4b3e      	ldr	r3, [pc, #248]	@ (80092b4 <xPortStartScheduler+0x124>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a3f      	ldr	r2, [pc, #252]	@ (80092bc <xPortStartScheduler+0x12c>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d10b      	bne.n	80091da <xPortStartScheduler+0x4a>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	613b      	str	r3, [r7, #16]
}
 80091d4:	bf00      	nop
 80091d6:	bf00      	nop
 80091d8:	e7fd      	b.n	80091d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80091da:	4b39      	ldr	r3, [pc, #228]	@ (80092c0 <xPortStartScheduler+0x130>)
 80091dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	22ff      	movs	r2, #255	@ 0xff
 80091ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091f4:	78fb      	ldrb	r3, [r7, #3]
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	4b31      	ldr	r3, [pc, #196]	@ (80092c4 <xPortStartScheduler+0x134>)
 8009200:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009202:	4b31      	ldr	r3, [pc, #196]	@ (80092c8 <xPortStartScheduler+0x138>)
 8009204:	2207      	movs	r2, #7
 8009206:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009208:	e009      	b.n	800921e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800920a:	4b2f      	ldr	r3, [pc, #188]	@ (80092c8 <xPortStartScheduler+0x138>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3b01      	subs	r3, #1
 8009210:	4a2d      	ldr	r2, [pc, #180]	@ (80092c8 <xPortStartScheduler+0x138>)
 8009212:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009214:	78fb      	ldrb	r3, [r7, #3]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	b2db      	uxtb	r3, r3
 800921c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800921e:	78fb      	ldrb	r3, [r7, #3]
 8009220:	b2db      	uxtb	r3, r3
 8009222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009226:	2b80      	cmp	r3, #128	@ 0x80
 8009228:	d0ef      	beq.n	800920a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800922a:	4b27      	ldr	r3, [pc, #156]	@ (80092c8 <xPortStartScheduler+0x138>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f1c3 0307 	rsb	r3, r3, #7
 8009232:	2b04      	cmp	r3, #4
 8009234:	d00b      	beq.n	800924e <xPortStartScheduler+0xbe>
	__asm volatile
 8009236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	60bb      	str	r3, [r7, #8]
}
 8009248:	bf00      	nop
 800924a:	bf00      	nop
 800924c:	e7fd      	b.n	800924a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800924e:	4b1e      	ldr	r3, [pc, #120]	@ (80092c8 <xPortStartScheduler+0x138>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	021b      	lsls	r3, r3, #8
 8009254:	4a1c      	ldr	r2, [pc, #112]	@ (80092c8 <xPortStartScheduler+0x138>)
 8009256:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009258:	4b1b      	ldr	r3, [pc, #108]	@ (80092c8 <xPortStartScheduler+0x138>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009260:	4a19      	ldr	r2, [pc, #100]	@ (80092c8 <xPortStartScheduler+0x138>)
 8009262:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	b2da      	uxtb	r2, r3
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800926c:	4b17      	ldr	r3, [pc, #92]	@ (80092cc <xPortStartScheduler+0x13c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a16      	ldr	r2, [pc, #88]	@ (80092cc <xPortStartScheduler+0x13c>)
 8009272:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009276:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009278:	4b14      	ldr	r3, [pc, #80]	@ (80092cc <xPortStartScheduler+0x13c>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a13      	ldr	r2, [pc, #76]	@ (80092cc <xPortStartScheduler+0x13c>)
 800927e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009282:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009284:	f000 f8da 	bl	800943c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009288:	4b11      	ldr	r3, [pc, #68]	@ (80092d0 <xPortStartScheduler+0x140>)
 800928a:	2200      	movs	r2, #0
 800928c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800928e:	f000 f8f9 	bl	8009484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009292:	4b10      	ldr	r3, [pc, #64]	@ (80092d4 <xPortStartScheduler+0x144>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a0f      	ldr	r2, [pc, #60]	@ (80092d4 <xPortStartScheduler+0x144>)
 8009298:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800929c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800929e:	f7ff ff63 	bl	8009168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80092a2:	f7fe ff41 	bl	8008128 <vTaskSwitchContext>
	prvTaskExitError();
 80092a6:	f7ff ff1b 	bl	80090e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	e000ed00 	.word	0xe000ed00
 80092b8:	410fc271 	.word	0x410fc271
 80092bc:	410fc270 	.word	0x410fc270
 80092c0:	e000e400 	.word	0xe000e400
 80092c4:	200008c0 	.word	0x200008c0
 80092c8:	200008c4 	.word	0x200008c4
 80092cc:	e000ed20 	.word	0xe000ed20
 80092d0:	20000028 	.word	0x20000028
 80092d4:	e000ef34 	.word	0xe000ef34

080092d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	607b      	str	r3, [r7, #4]
}
 80092f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80092f2:	4b10      	ldr	r3, [pc, #64]	@ (8009334 <vPortEnterCritical+0x5c>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	3301      	adds	r3, #1
 80092f8:	4a0e      	ldr	r2, [pc, #56]	@ (8009334 <vPortEnterCritical+0x5c>)
 80092fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009334 <vPortEnterCritical+0x5c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d110      	bne.n	8009326 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009304:	4b0c      	ldr	r3, [pc, #48]	@ (8009338 <vPortEnterCritical+0x60>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00b      	beq.n	8009326 <vPortEnterCritical+0x4e>
	__asm volatile
 800930e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	603b      	str	r3, [r7, #0]
}
 8009320:	bf00      	nop
 8009322:	bf00      	nop
 8009324:	e7fd      	b.n	8009322 <vPortEnterCritical+0x4a>
	}
}
 8009326:	bf00      	nop
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	20000028 	.word	0x20000028
 8009338:	e000ed04 	.word	0xe000ed04

0800933c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009342:	4b12      	ldr	r3, [pc, #72]	@ (800938c <vPortExitCritical+0x50>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10b      	bne.n	8009362 <vPortExitCritical+0x26>
	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	607b      	str	r3, [r7, #4]
}
 800935c:	bf00      	nop
 800935e:	bf00      	nop
 8009360:	e7fd      	b.n	800935e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009362:	4b0a      	ldr	r3, [pc, #40]	@ (800938c <vPortExitCritical+0x50>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3b01      	subs	r3, #1
 8009368:	4a08      	ldr	r2, [pc, #32]	@ (800938c <vPortExitCritical+0x50>)
 800936a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800936c:	4b07      	ldr	r3, [pc, #28]	@ (800938c <vPortExitCritical+0x50>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d105      	bne.n	8009380 <vPortExitCritical+0x44>
 8009374:	2300      	movs	r3, #0
 8009376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	f383 8811 	msr	BASEPRI, r3
}
 800937e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	20000028 	.word	0x20000028

08009390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009390:	f3ef 8009 	mrs	r0, PSP
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	4b15      	ldr	r3, [pc, #84]	@ (80093f0 <pxCurrentTCBConst>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	f01e 0f10 	tst.w	lr, #16
 80093a0:	bf08      	it	eq
 80093a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80093a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093aa:	6010      	str	r0, [r2, #0]
 80093ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80093b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80093b4:	f380 8811 	msr	BASEPRI, r0
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	f3bf 8f6f 	isb	sy
 80093c0:	f7fe feb2 	bl	8008128 <vTaskSwitchContext>
 80093c4:	f04f 0000 	mov.w	r0, #0
 80093c8:	f380 8811 	msr	BASEPRI, r0
 80093cc:	bc09      	pop	{r0, r3}
 80093ce:	6819      	ldr	r1, [r3, #0]
 80093d0:	6808      	ldr	r0, [r1, #0]
 80093d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d6:	f01e 0f10 	tst.w	lr, #16
 80093da:	bf08      	it	eq
 80093dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80093e0:	f380 8809 	msr	PSP, r0
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	f3af 8000 	nop.w

080093f0 <pxCurrentTCBConst>:
 80093f0:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093f4:	bf00      	nop
 80093f6:	bf00      	nop

080093f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
	__asm volatile
 80093fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	607b      	str	r3, [r7, #4]
}
 8009410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009412:	f7fe fdcf 	bl	8007fb4 <xTaskIncrementTick>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d003      	beq.n	8009424 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800941c:	4b06      	ldr	r3, [pc, #24]	@ (8009438 <SysTick_Handler+0x40>)
 800941e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	2300      	movs	r3, #0
 8009426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	f383 8811 	msr	BASEPRI, r3
}
 800942e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009430:	bf00      	nop
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	e000ed04 	.word	0xe000ed04

0800943c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800943c:	b480      	push	{r7}
 800943e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009440:	4b0b      	ldr	r3, [pc, #44]	@ (8009470 <vPortSetupTimerInterrupt+0x34>)
 8009442:	2200      	movs	r2, #0
 8009444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009446:	4b0b      	ldr	r3, [pc, #44]	@ (8009474 <vPortSetupTimerInterrupt+0x38>)
 8009448:	2200      	movs	r2, #0
 800944a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800944c:	4b0a      	ldr	r3, [pc, #40]	@ (8009478 <vPortSetupTimerInterrupt+0x3c>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a0a      	ldr	r2, [pc, #40]	@ (800947c <vPortSetupTimerInterrupt+0x40>)
 8009452:	fba2 2303 	umull	r2, r3, r2, r3
 8009456:	099b      	lsrs	r3, r3, #6
 8009458:	4a09      	ldr	r2, [pc, #36]	@ (8009480 <vPortSetupTimerInterrupt+0x44>)
 800945a:	3b01      	subs	r3, #1
 800945c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800945e:	4b04      	ldr	r3, [pc, #16]	@ (8009470 <vPortSetupTimerInterrupt+0x34>)
 8009460:	2207      	movs	r2, #7
 8009462:	601a      	str	r2, [r3, #0]
}
 8009464:	bf00      	nop
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	e000e010 	.word	0xe000e010
 8009474:	e000e018 	.word	0xe000e018
 8009478:	20000004 	.word	0x20000004
 800947c:	10624dd3 	.word	0x10624dd3
 8009480:	e000e014 	.word	0xe000e014

08009484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009484:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009494 <vPortEnableVFP+0x10>
 8009488:	6801      	ldr	r1, [r0, #0]
 800948a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800948e:	6001      	str	r1, [r0, #0]
 8009490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009492:	bf00      	nop
 8009494:	e000ed88 	.word	0xe000ed88

08009498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800949e:	f3ef 8305 	mrs	r3, IPSR
 80094a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2b0f      	cmp	r3, #15
 80094a8:	d915      	bls.n	80094d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80094aa:	4a18      	ldr	r2, [pc, #96]	@ (800950c <vPortValidateInterruptPriority+0x74>)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	4413      	add	r3, r2
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80094b4:	4b16      	ldr	r3, [pc, #88]	@ (8009510 <vPortValidateInterruptPriority+0x78>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	7afa      	ldrb	r2, [r7, #11]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d20b      	bcs.n	80094d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	607b      	str	r3, [r7, #4]
}
 80094d0:	bf00      	nop
 80094d2:	bf00      	nop
 80094d4:	e7fd      	b.n	80094d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80094d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009514 <vPortValidateInterruptPriority+0x7c>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80094de:	4b0e      	ldr	r3, [pc, #56]	@ (8009518 <vPortValidateInterruptPriority+0x80>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d90b      	bls.n	80094fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	603b      	str	r3, [r7, #0]
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	e7fd      	b.n	80094fa <vPortValidateInterruptPriority+0x62>
	}
 80094fe:	bf00      	nop
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	e000e3f0 	.word	0xe000e3f0
 8009510:	200008c0 	.word	0x200008c0
 8009514:	e000ed0c 	.word	0xe000ed0c
 8009518:	200008c4 	.word	0x200008c4

0800951c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b08a      	sub	sp, #40	@ 0x28
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009524:	2300      	movs	r3, #0
 8009526:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009528:	f7fe fc88 	bl	8007e3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800952c:	4b5a      	ldr	r3, [pc, #360]	@ (8009698 <pvPortMalloc+0x17c>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009534:	f000 f916 	bl	8009764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009538:	4b58      	ldr	r3, [pc, #352]	@ (800969c <pvPortMalloc+0x180>)
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4013      	ands	r3, r2
 8009540:	2b00      	cmp	r3, #0
 8009542:	f040 8090 	bne.w	8009666 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d01e      	beq.n	800958a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800954c:	2208      	movs	r2, #8
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4413      	add	r3, r2
 8009552:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f003 0307 	and.w	r3, r3, #7
 800955a:	2b00      	cmp	r3, #0
 800955c:	d015      	beq.n	800958a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f023 0307 	bic.w	r3, r3, #7
 8009564:	3308      	adds	r3, #8
 8009566:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f003 0307 	and.w	r3, r3, #7
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00b      	beq.n	800958a <pvPortMalloc+0x6e>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	617b      	str	r3, [r7, #20]
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop
 8009588:	e7fd      	b.n	8009586 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d06a      	beq.n	8009666 <pvPortMalloc+0x14a>
 8009590:	4b43      	ldr	r3, [pc, #268]	@ (80096a0 <pvPortMalloc+0x184>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	429a      	cmp	r2, r3
 8009598:	d865      	bhi.n	8009666 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800959a:	4b42      	ldr	r3, [pc, #264]	@ (80096a4 <pvPortMalloc+0x188>)
 800959c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800959e:	4b41      	ldr	r3, [pc, #260]	@ (80096a4 <pvPortMalloc+0x188>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095a4:	e004      	b.n	80095b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80095a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d903      	bls.n	80095c2 <pvPortMalloc+0xa6>
 80095ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1f1      	bne.n	80095a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095c2:	4b35      	ldr	r3, [pc, #212]	@ (8009698 <pvPortMalloc+0x17c>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d04c      	beq.n	8009666 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80095cc:	6a3b      	ldr	r3, [r7, #32]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2208      	movs	r2, #8
 80095d2:	4413      	add	r3, r2
 80095d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	6a3b      	ldr	r3, [r7, #32]
 80095dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80095de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	1ad2      	subs	r2, r2, r3
 80095e6:	2308      	movs	r3, #8
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d920      	bls.n	8009630 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80095ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4413      	add	r3, r2
 80095f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	f003 0307 	and.w	r3, r3, #7
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00b      	beq.n	8009618 <pvPortMalloc+0xfc>
	__asm volatile
 8009600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	613b      	str	r3, [r7, #16]
}
 8009612:	bf00      	nop
 8009614:	bf00      	nop
 8009616:	e7fd      	b.n	8009614 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961a:	685a      	ldr	r2, [r3, #4]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	1ad2      	subs	r2, r2, r3
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800962a:	69b8      	ldr	r0, [r7, #24]
 800962c:	f000 f8fc 	bl	8009828 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009630:	4b1b      	ldr	r3, [pc, #108]	@ (80096a0 <pvPortMalloc+0x184>)
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	1ad3      	subs	r3, r2, r3
 800963a:	4a19      	ldr	r2, [pc, #100]	@ (80096a0 <pvPortMalloc+0x184>)
 800963c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800963e:	4b18      	ldr	r3, [pc, #96]	@ (80096a0 <pvPortMalloc+0x184>)
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	4b19      	ldr	r3, [pc, #100]	@ (80096a8 <pvPortMalloc+0x18c>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	429a      	cmp	r2, r3
 8009648:	d203      	bcs.n	8009652 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800964a:	4b15      	ldr	r3, [pc, #84]	@ (80096a0 <pvPortMalloc+0x184>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a16      	ldr	r2, [pc, #88]	@ (80096a8 <pvPortMalloc+0x18c>)
 8009650:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009654:	685a      	ldr	r2, [r3, #4]
 8009656:	4b11      	ldr	r3, [pc, #68]	@ (800969c <pvPortMalloc+0x180>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	431a      	orrs	r2, r3
 800965c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800965e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009662:	2200      	movs	r2, #0
 8009664:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009666:	f7fe fbf7 	bl	8007e58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	f003 0307 	and.w	r3, r3, #7
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00b      	beq.n	800968c <pvPortMalloc+0x170>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	60fb      	str	r3, [r7, #12]
}
 8009686:	bf00      	nop
 8009688:	bf00      	nop
 800968a:	e7fd      	b.n	8009688 <pvPortMalloc+0x16c>
	return pvReturn;
 800968c:	69fb      	ldr	r3, [r7, #28]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3728      	adds	r7, #40	@ 0x28
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	200134d0 	.word	0x200134d0
 800969c:	200134dc 	.word	0x200134dc
 80096a0:	200134d4 	.word	0x200134d4
 80096a4:	200134c8 	.word	0x200134c8
 80096a8:	200134d8 	.word	0x200134d8

080096ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d04a      	beq.n	8009754 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80096be:	2308      	movs	r3, #8
 80096c0:	425b      	negs	r3, r3
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	4413      	add	r3, r2
 80096c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	685a      	ldr	r2, [r3, #4]
 80096d0:	4b22      	ldr	r3, [pc, #136]	@ (800975c <vPortFree+0xb0>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4013      	ands	r3, r2
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10b      	bne.n	80096f2 <vPortFree+0x46>
	__asm volatile
 80096da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	60fb      	str	r3, [r7, #12]
}
 80096ec:	bf00      	nop
 80096ee:	bf00      	nop
 80096f0:	e7fd      	b.n	80096ee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00b      	beq.n	8009712 <vPortFree+0x66>
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	60bb      	str	r3, [r7, #8]
}
 800970c:	bf00      	nop
 800970e:	bf00      	nop
 8009710:	e7fd      	b.n	800970e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	4b11      	ldr	r3, [pc, #68]	@ (800975c <vPortFree+0xb0>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4013      	ands	r3, r2
 800971c:	2b00      	cmp	r3, #0
 800971e:	d019      	beq.n	8009754 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d115      	bne.n	8009754 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	4b0b      	ldr	r3, [pc, #44]	@ (800975c <vPortFree+0xb0>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	43db      	mvns	r3, r3
 8009732:	401a      	ands	r2, r3
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009738:	f7fe fb80 	bl	8007e3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	4b07      	ldr	r3, [pc, #28]	@ (8009760 <vPortFree+0xb4>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4413      	add	r3, r2
 8009746:	4a06      	ldr	r2, [pc, #24]	@ (8009760 <vPortFree+0xb4>)
 8009748:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800974a:	6938      	ldr	r0, [r7, #16]
 800974c:	f000 f86c 	bl	8009828 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009750:	f7fe fb82 	bl	8007e58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009754:	bf00      	nop
 8009756:	3718      	adds	r7, #24
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	200134dc 	.word	0x200134dc
 8009760:	200134d4 	.word	0x200134d4

08009764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800976a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800976e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009770:	4b27      	ldr	r3, [pc, #156]	@ (8009810 <prvHeapInit+0xac>)
 8009772:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00c      	beq.n	8009798 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3307      	adds	r3, #7
 8009782:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f023 0307 	bic.w	r3, r3, #7
 800978a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	4a1f      	ldr	r2, [pc, #124]	@ (8009810 <prvHeapInit+0xac>)
 8009794:	4413      	add	r3, r2
 8009796:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800979c:	4a1d      	ldr	r2, [pc, #116]	@ (8009814 <prvHeapInit+0xb0>)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097a2:	4b1c      	ldr	r3, [pc, #112]	@ (8009814 <prvHeapInit+0xb0>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	4413      	add	r3, r2
 80097ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097b0:	2208      	movs	r2, #8
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	1a9b      	subs	r3, r3, r2
 80097b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f023 0307 	bic.w	r3, r3, #7
 80097be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	4a15      	ldr	r2, [pc, #84]	@ (8009818 <prvHeapInit+0xb4>)
 80097c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097c6:	4b14      	ldr	r3, [pc, #80]	@ (8009818 <prvHeapInit+0xb4>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2200      	movs	r2, #0
 80097cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80097ce:	4b12      	ldr	r3, [pc, #72]	@ (8009818 <prvHeapInit+0xb4>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2200      	movs	r2, #0
 80097d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	1ad2      	subs	r2, r2, r3
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009818 <prvHeapInit+0xb4>)
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	4a0a      	ldr	r2, [pc, #40]	@ (800981c <prvHeapInit+0xb8>)
 80097f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	4a09      	ldr	r2, [pc, #36]	@ (8009820 <prvHeapInit+0xbc>)
 80097fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097fc:	4b09      	ldr	r3, [pc, #36]	@ (8009824 <prvHeapInit+0xc0>)
 80097fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009802:	601a      	str	r2, [r3, #0]
}
 8009804:	bf00      	nop
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	200008c8 	.word	0x200008c8
 8009814:	200134c8 	.word	0x200134c8
 8009818:	200134d0 	.word	0x200134d0
 800981c:	200134d8 	.word	0x200134d8
 8009820:	200134d4 	.word	0x200134d4
 8009824:	200134dc 	.word	0x200134dc

08009828 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009830:	4b28      	ldr	r3, [pc, #160]	@ (80098d4 <prvInsertBlockIntoFreeList+0xac>)
 8009832:	60fb      	str	r3, [r7, #12]
 8009834:	e002      	b.n	800983c <prvInsertBlockIntoFreeList+0x14>
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	60fb      	str	r3, [r7, #12]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	429a      	cmp	r2, r3
 8009844:	d8f7      	bhi.n	8009836 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	4413      	add	r3, r2
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	429a      	cmp	r2, r3
 8009856:	d108      	bne.n	800986a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	441a      	add	r2, r3
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	441a      	add	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	429a      	cmp	r2, r3
 800987c:	d118      	bne.n	80098b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	4b15      	ldr	r3, [pc, #84]	@ (80098d8 <prvInsertBlockIntoFreeList+0xb0>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	429a      	cmp	r2, r3
 8009888:	d00d      	beq.n	80098a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	441a      	add	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	e008      	b.n	80098b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098a6:	4b0c      	ldr	r3, [pc, #48]	@ (80098d8 <prvInsertBlockIntoFreeList+0xb0>)
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	e003      	b.n	80098b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d002      	beq.n	80098c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098c6:	bf00      	nop
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	200134c8 	.word	0x200134c8
 80098d8:	200134d0 	.word	0x200134d0

080098dc <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af02      	add	r7, sp, #8
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	460b      	mov	r3, r1
 80098e6:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 80098e8:	78fb      	ldrb	r3, [r7, #3]
 80098ea:	f023 030f 	bic.w	r3, r3, #15
 80098ee:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 80098f0:	78fb      	ldrb	r3, [r7, #3]
 80098f2:	011b      	lsls	r3, r3, #4
 80098f4:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 80098f6:	7bfb      	ldrb	r3, [r7, #15]
 80098f8:	f043 030c 	orr.w	r3, r3, #12
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8009900:	7bfb      	ldrb	r3, [r7, #15]
 8009902:	f043 0308 	orr.w	r3, r3, #8
 8009906:	b2db      	uxtb	r3, r3
 8009908:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 800990a:	7bbb      	ldrb	r3, [r7, #14]
 800990c:	f043 030c 	orr.w	r3, r3, #12
 8009910:	b2db      	uxtb	r3, r3
 8009912:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8009914:	7bbb      	ldrb	r3, [r7, #14]
 8009916:	f043 0308 	orr.w	r3, r3, #8
 800991a:	b2db      	uxtb	r3, r3
 800991c:	72fb      	strb	r3, [r7, #11]


    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6818      	ldr	r0, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	791b      	ldrb	r3, [r3, #4]
 8009926:	4619      	mov	r1, r3
 8009928:	f107 0208 	add.w	r2, r7, #8
 800992c:	2364      	movs	r3, #100	@ 0x64
 800992e:	9300      	str	r3, [sp, #0]
 8009930:	2304      	movs	r3, #4
 8009932:	f7f8 fbcd 	bl	80020d0 <HAL_I2C_Master_Transmit>
 8009936:	4603      	mov	r3, r0
 8009938:	737b      	strb	r3, [r7, #13]
    if (ret != HAL_OK) {

    }
}
 800993a:	bf00      	nop
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b086      	sub	sp, #24
 8009946:	af02      	add	r7, sp, #8
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	460b      	mov	r3, r1
 800994c:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 800994e:	78fb      	ldrb	r3, [r7, #3]
 8009950:	f023 030f 	bic.w	r3, r3, #15
 8009954:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8009956:	78fb      	ldrb	r3, [r7, #3]
 8009958:	011b      	lsls	r3, r3, #4
 800995a:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	f043 030d 	orr.w	r3, r3, #13
 8009962:	b2db      	uxtb	r3, r3
 8009964:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8009966:	7bfb      	ldrb	r3, [r7, #15]
 8009968:	f043 0309 	orr.w	r3, r3, #9
 800996c:	b2db      	uxtb	r3, r3
 800996e:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	f043 030d 	orr.w	r3, r3, #13
 8009976:	b2db      	uxtb	r3, r3
 8009978:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 800997a:	7bbb      	ldrb	r3, [r7, #14]
 800997c:	f043 0309 	orr.w	r3, r3, #9
 8009980:	b2db      	uxtb	r3, r3
 8009982:	72fb      	strb	r3, [r7, #11]

    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6818      	ldr	r0, [r3, #0]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	791b      	ldrb	r3, [r3, #4]
 800998c:	4619      	mov	r1, r3
 800998e:	f107 0208 	add.w	r2, r7, #8
 8009992:	2364      	movs	r3, #100	@ 0x64
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	2304      	movs	r3, #4
 8009998:	f7f8 fb9a 	bl	80020d0 <HAL_I2C_Master_Transmit>
 800999c:	4603      	mov	r3, r0
 800999e:	737b      	strb	r3, [r7, #13]
    if (ret != HAL_OK) {

	}
}
 80099a0:	bf00      	nop
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b03      	cmp	r3, #3
 80099b8:	d824      	bhi.n	8009a04 <lcd_gotoxy+0x5c>
 80099ba:	a201      	add	r2, pc, #4	@ (adr r2, 80099c0 <lcd_gotoxy+0x18>)
 80099bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c0:	080099d1 	.word	0x080099d1
 80099c4:	080099db 	.word	0x080099db
 80099c8:	080099e5 	.word	0x080099e5
 80099cc:	080099ef 	.word	0x080099ef
    {
        case 0: address = 0x80 + col; break;  // First row
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	3b80      	subs	r3, #128	@ 0x80
 80099d6:	75fb      	strb	r3, [r7, #23]
 80099d8:	e00e      	b.n	80099f8 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	3b40      	subs	r3, #64	@ 0x40
 80099e0:	75fb      	strb	r3, [r7, #23]
 80099e2:	e009      	b.n	80099f8 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	3b6c      	subs	r3, #108	@ 0x6c
 80099ea:	75fb      	strb	r3, [r7, #23]
 80099ec:	e004      	b.n	80099f8 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	3b2c      	subs	r3, #44	@ 0x2c
 80099f4:	75fb      	strb	r3, [r7, #23]
 80099f6:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	4619      	mov	r1, r3
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f7ff ff6d 	bl	80098dc <lcd_send_cmd>
 8009a02:	e000      	b.n	8009a06 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 8009a04:	bf00      	nop
}
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8009a14:	2032      	movs	r0, #50	@ 0x32
 8009a16:	f7f7 ff5b 	bl	80018d0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8009a1a:	2130      	movs	r1, #48	@ 0x30
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f7ff ff5d 	bl	80098dc <lcd_send_cmd>
    HAL_Delay(5);
 8009a22:	2005      	movs	r0, #5
 8009a24:	f7f7 ff54 	bl	80018d0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8009a28:	2130      	movs	r1, #48	@ 0x30
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7ff ff56 	bl	80098dc <lcd_send_cmd>
    HAL_Delay(1);
 8009a30:	2001      	movs	r0, #1
 8009a32:	f7f7 ff4d 	bl	80018d0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8009a36:	2130      	movs	r1, #48	@ 0x30
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7ff ff4f 	bl	80098dc <lcd_send_cmd>
    HAL_Delay(10);
 8009a3e:	200a      	movs	r0, #10
 8009a40:	f7f7 ff46 	bl	80018d0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8009a44:	2120      	movs	r1, #32
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f7ff ff48 	bl	80098dc <lcd_send_cmd>
    HAL_Delay(10);
 8009a4c:	200a      	movs	r0, #10
 8009a4e:	f7f7 ff3f 	bl	80018d0 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 8009a52:	2128      	movs	r1, #40	@ 0x28
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f7ff ff41 	bl	80098dc <lcd_send_cmd>
    HAL_Delay(1);
 8009a5a:	2001      	movs	r0, #1
 8009a5c:	f7f7 ff38 	bl	80018d0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 8009a60:	2108      	movs	r1, #8
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7ff ff3a 	bl	80098dc <lcd_send_cmd>
    HAL_Delay(1);
 8009a68:	2001      	movs	r0, #1
 8009a6a:	f7f7 ff31 	bl	80018d0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 8009a6e:	2101      	movs	r1, #1
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7ff ff33 	bl	80098dc <lcd_send_cmd>
    HAL_Delay(2);
 8009a76:	2002      	movs	r0, #2
 8009a78:	f7f7 ff2a 	bl	80018d0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8009a7c:	2106      	movs	r1, #6
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7ff ff2c 	bl	80098dc <lcd_send_cmd>
    HAL_Delay(1);
 8009a84:	2001      	movs	r0, #1
 8009a86:	f7f7 ff23 	bl	80018d0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8009a8a:	210c      	movs	r1, #12
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7ff ff25 	bl	80098dc <lcd_send_cmd>
}
 8009a92:	bf00      	nop
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b082      	sub	sp, #8
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 8009aa4:	e007      	b.n	8009ab6 <lcd_puts+0x1c>
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	1c5a      	adds	r2, r3, #1
 8009aaa:	603a      	str	r2, [r7, #0]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	4619      	mov	r1, r3
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f7ff ff46 	bl	8009942 <lcd_send_data>
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1f3      	bne.n	8009aa6 <lcd_puts+0xc>
}
 8009abe:	bf00      	nop
 8009ac0:	bf00      	nop
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <LCD2004_Init>:
SemaphoreHandle_t xLCDMutex;
I2C_LCD_HandleTypeDef lcd;
extern UART_HandleTypeDef huart2;

void LCD2004_Init(I2C_HandleTypeDef *hi2c, uint8_t address)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	70fb      	strb	r3, [r7, #3]
  lcd.hi2c = hi2c;
 8009ad4:	4a06      	ldr	r2, [pc, #24]	@ (8009af0 <LCD2004_Init+0x28>)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6013      	str	r3, [r2, #0]
  lcd.address = address; //0x4E（0x27 << 1）
 8009ada:	4a05      	ldr	r2, [pc, #20]	@ (8009af0 <LCD2004_Init+0x28>)
 8009adc:	78fb      	ldrb	r3, [r7, #3]
 8009ade:	7113      	strb	r3, [r2, #4]
  lcd_init(&lcd);
 8009ae0:	4803      	ldr	r0, [pc, #12]	@ (8009af0 <LCD2004_Init+0x28>)
 8009ae2:	f7ff ff93 	bl	8009a0c <lcd_init>
}
 8009ae6:	bf00      	nop
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	200134e8 	.word	0x200134e8

08009af4 <LCD2004_OS_Resources_Init>:

void LCD2004_OS_Resources_Init()
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	af00      	add	r7, sp, #0
  xLCDQueue = xQueueCreate(4, sizeof(LCDMsgStruct));
 8009af8:	2200      	movs	r2, #0
 8009afa:	2122      	movs	r1, #34	@ 0x22
 8009afc:	2004      	movs	r0, #4
 8009afe:	f7fd fa31 	bl	8006f64 <xQueueGenericCreate>
 8009b02:	4603      	mov	r3, r0
 8009b04:	4a04      	ldr	r2, [pc, #16]	@ (8009b18 <LCD2004_OS_Resources_Init+0x24>)
 8009b06:	6013      	str	r3, [r2, #0]
  xLCDMutex = xSemaphoreCreateMutex();
 8009b08:	2001      	movs	r0, #1
 8009b0a:	f7fd faa5 	bl	8007058 <xQueueCreateMutex>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	4a02      	ldr	r2, [pc, #8]	@ (8009b1c <LCD2004_OS_Resources_Init+0x28>)
 8009b12:	6013      	str	r3, [r2, #0]
}
 8009b14:	bf00      	nop
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	200134e0 	.word	0x200134e0
 8009b1c:	200134e4 	.word	0x200134e4

08009b20 <LCDHandler>:

void LCDHandler(void *pvParameters)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08c      	sub	sp, #48	@ 0x30
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  LCDMsgStruct lcdMsg;
  while (1)
  {
      if (xQueueReceive(xLCDQueue, &lcdMsg, portMAX_DELAY) == pdPASS) {
 8009b28:	4b0f      	ldr	r3, [pc, #60]	@ (8009b68 <LCDHandler+0x48>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f107 010c 	add.w	r1, r7, #12
 8009b30:	f04f 32ff 	mov.w	r2, #4294967295
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7fd fc45 	bl	80073c4 <xQueueReceive>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d10d      	bne.n	8009b5c <LCDHandler+0x3c>
//          }
//
//          xSemaphoreGive(xLCDMutex);
//	    }
    	  //SendMsg(&huart2, "\n\r LCDReceiveHandler : %d %d %s\n\r", lcdMsg.row, lcdMsg.col, lcdMsg.msg);
          lcd_gotoxy(&lcd, lcdMsg.col, lcdMsg.row);
 8009b40:	7b7b      	ldrb	r3, [r7, #13]
 8009b42:	4619      	mov	r1, r3
 8009b44:	7b3b      	ldrb	r3, [r7, #12]
 8009b46:	461a      	mov	r2, r3
 8009b48:	4808      	ldr	r0, [pc, #32]	@ (8009b6c <LCDHandler+0x4c>)
 8009b4a:	f7ff ff2d 	bl	80099a8 <lcd_gotoxy>
          lcd_puts(&lcd, lcdMsg.msg);
 8009b4e:	f107 030c 	add.w	r3, r7, #12
 8009b52:	3302      	adds	r3, #2
 8009b54:	4619      	mov	r1, r3
 8009b56:	4805      	ldr	r0, [pc, #20]	@ (8009b6c <LCDHandler+0x4c>)
 8009b58:	f7ff ff9f 	bl	8009a9a <lcd_puts>
      }
      vTaskDelay(pdMS_TO_TICKS(500));
 8009b5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009b60:	f7fe f8e8 	bl	8007d34 <vTaskDelay>
      if (xQueueReceive(xLCDQueue, &lcdMsg, portMAX_DELAY) == pdPASS) {
 8009b64:	e7e0      	b.n	8009b28 <LCDHandler+0x8>
 8009b66:	bf00      	nop
 8009b68:	200134e0 	.word	0x200134e0
 8009b6c:	200134e8 	.word	0x200134e8

08009b70 <LED_Init>:
extern TIM_HandleTypeDef htim4;
QueueHandle_t xLEDQueue;
SemaphoreHandle_t xLEDMutex;

void LED_Init()
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8009b74:	2100      	movs	r1, #0
 8009b76:	4806      	ldr	r0, [pc, #24]	@ (8009b90 <LED_Init+0x20>)
 8009b78:	f7fa fe1c 	bl	80047b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8009b7c:	2108      	movs	r1, #8
 8009b7e:	4804      	ldr	r0, [pc, #16]	@ (8009b90 <LED_Init+0x20>)
 8009b80:	f7fa fe18 	bl	80047b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8009b84:	210c      	movs	r1, #12
 8009b86:	4802      	ldr	r0, [pc, #8]	@ (8009b90 <LED_Init+0x20>)
 8009b88:	f7fa fe14 	bl	80047b4 <HAL_TIM_PWM_Start>
}
 8009b8c:	bf00      	nop
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	20000338 	.word	0x20000338

08009b94 <LED_OS_Resources_Init>:

void LED_OS_Resources_Init()
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	af00      	add	r7, sp, #0
	xLEDQueue = xQueueCreate(4, sizeof(LEDMsgStruct));
 8009b98:	2200      	movs	r2, #0
 8009b9a:	210c      	movs	r1, #12
 8009b9c:	2004      	movs	r0, #4
 8009b9e:	f7fd f9e1 	bl	8006f64 <xQueueGenericCreate>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	4a04      	ldr	r2, [pc, #16]	@ (8009bb8 <LED_OS_Resources_Init+0x24>)
 8009ba6:	6013      	str	r3, [r2, #0]
	xLEDMutex = xSemaphoreCreateMutex();
 8009ba8:	2001      	movs	r0, #1
 8009baa:	f7fd fa55 	bl	8007058 <xQueueCreateMutex>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	4a02      	ldr	r2, [pc, #8]	@ (8009bbc <LED_OS_Resources_Init+0x28>)
 8009bb2:	6013      	str	r3, [r2, #0]
}
 8009bb4:	bf00      	nop
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	200134f0 	.word	0x200134f0
 8009bbc:	200134f4 	.word	0x200134f4

08009bc0 <setColor>:

void setColor(uint8_t r, uint8_t g, uint8_t b) {
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	71fb      	strb	r3, [r7, #7]
 8009bca:	460b      	mov	r3, r1
 8009bcc:	71bb      	strb	r3, [r7, #6]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, r);
 8009bd2:	4b09      	ldr	r3, [pc, #36]	@ (8009bf8 <setColor+0x38>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	79fa      	ldrb	r2, [r7, #7]
 8009bd8:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, g);
 8009bda:	4b07      	ldr	r3, [pc, #28]	@ (8009bf8 <setColor+0x38>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	79ba      	ldrb	r2, [r7, #6]
 8009be0:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, b);
 8009be2:	4b05      	ldr	r3, [pc, #20]	@ (8009bf8 <setColor+0x38>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	797a      	ldrb	r2, [r7, #5]
 8009be8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009bea:	bf00      	nop
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	20000338 	.word	0x20000338

08009bfc <LEDHandler>:

bool auto_mode = false;
void LEDHandler()
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
	LEDMsgStruct LEDMsg;
	while(1)
	{
		if (xQueueReceive(xLEDQueue, &LEDMsg, portMAX_DELAY) == pdPASS) {
 8009c02:	4b1d      	ldr	r3, [pc, #116]	@ (8009c78 <LEDHandler+0x7c>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	1d39      	adds	r1, r7, #4
 8009c08:	f04f 32ff 	mov.w	r2, #4294967295
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7fd fbd9 	bl	80073c4 <xQueueReceive>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d129      	bne.n	8009c6c <LEDHandler+0x70>
			if(LEDMsg.r < 0 || LEDMsg.g < 0 || LEDMsg.b < 0) {
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	db05      	blt.n	8009c2a <LEDHandler+0x2e>
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	db02      	blt.n	8009c2a <LEDHandler+0x2e>
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	da03      	bge.n	8009c32 <LEDHandler+0x36>
				auto_mode = true;
 8009c2a:	4b14      	ldr	r3, [pc, #80]	@ (8009c7c <LEDHandler+0x80>)
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	701a      	strb	r2, [r3, #0]
 8009c30:	e01c      	b.n	8009c6c <LEDHandler+0x70>
			}
			else {
				auto_mode = false;
 8009c32:	4b12      	ldr	r3, [pc, #72]	@ (8009c7c <LEDHandler+0x80>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	701a      	strb	r2, [r3, #0]
				if (xSemaphoreTake(xLEDMutex, portMAX_DELAY) == pdPASS) {
 8009c38:	4b11      	ldr	r3, [pc, #68]	@ (8009c80 <LEDHandler+0x84>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fd fca1 	bl	8007588 <xQueueSemaphoreTake>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d10f      	bne.n	8009c6c <LEDHandler+0x70>
					setColor(LEDMsg.r, LEDMsg.g, LEDMsg.b);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	b2d1      	uxtb	r1, r2
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	b2d2      	uxtb	r2, r2
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7ff ffb1 	bl	8009bc0 <setColor>
					xSemaphoreGive(xLEDMutex);
 8009c5e:	4b08      	ldr	r3, [pc, #32]	@ (8009c80 <LEDHandler+0x84>)
 8009c60:	6818      	ldr	r0, [r3, #0]
 8009c62:	2300      	movs	r3, #0
 8009c64:	2200      	movs	r2, #0
 8009c66:	2100      	movs	r1, #0
 8009c68:	f7fd fa0e 	bl	8007088 <xQueueGenericSend>
				}

			}
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 8009c6c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009c70:	f7fe f860 	bl	8007d34 <vTaskDelay>
		if (xQueueReceive(xLEDQueue, &LEDMsg, portMAX_DELAY) == pdPASS) {
 8009c74:	e7c5      	b.n	8009c02 <LEDHandler+0x6>
 8009c76:	bf00      	nop
 8009c78:	200134f0 	.word	0x200134f0
 8009c7c:	200134f8 	.word	0x200134f8
 8009c80:	200134f4 	.word	0x200134f4

08009c84 <LEDTask>:
	}
}

void LEDTask()
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	af00      	add	r7, sp, #0
	setColor(100, 100, 100);
 8009c88:	2264      	movs	r2, #100	@ 0x64
 8009c8a:	2164      	movs	r1, #100	@ 0x64
 8009c8c:	2064      	movs	r0, #100	@ 0x64
 8009c8e:	f7ff ff97 	bl	8009bc0 <setColor>
	while(1)
	{
		if (xSemaphoreTake(xLEDMutex, portMAX_DELAY) == pdPASS) {
 8009c92:	4b29      	ldr	r3, [pc, #164]	@ (8009d38 <LEDTask+0xb4>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f04f 31ff 	mov.w	r1, #4294967295
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fd fc74 	bl	8007588 <xQueueSemaphoreTake>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d142      	bne.n	8009d2c <LEDTask+0xa8>
			if(auto_mode) {
 8009ca6:	4b25      	ldr	r3, [pc, #148]	@ (8009d3c <LEDTask+0xb8>)
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d037      	beq.n	8009d1e <LEDTask+0x9a>
				setColor(255, 0, 0);     // 紅
 8009cae:	2200      	movs	r2, #0
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	20ff      	movs	r0, #255	@ 0xff
 8009cb4:	f7ff ff84 	bl	8009bc0 <setColor>
				HAL_Delay(100);
 8009cb8:	2064      	movs	r0, #100	@ 0x64
 8009cba:	f7f7 fe09 	bl	80018d0 <HAL_Delay>
				setColor(255, 165, 0);   // 橙
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	21a5      	movs	r1, #165	@ 0xa5
 8009cc2:	20ff      	movs	r0, #255	@ 0xff
 8009cc4:	f7ff ff7c 	bl	8009bc0 <setColor>
				HAL_Delay(100);
 8009cc8:	2064      	movs	r0, #100	@ 0x64
 8009cca:	f7f7 fe01 	bl	80018d0 <HAL_Delay>
				setColor(255, 255, 0);   // 黃
 8009cce:	2200      	movs	r2, #0
 8009cd0:	21ff      	movs	r1, #255	@ 0xff
 8009cd2:	20ff      	movs	r0, #255	@ 0xff
 8009cd4:	f7ff ff74 	bl	8009bc0 <setColor>
				HAL_Delay(100);
 8009cd8:	2064      	movs	r0, #100	@ 0x64
 8009cda:	f7f7 fdf9 	bl	80018d0 <HAL_Delay>
				setColor(0, 255, 0);     // 綠
 8009cde:	2200      	movs	r2, #0
 8009ce0:	21ff      	movs	r1, #255	@ 0xff
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	f7ff ff6c 	bl	8009bc0 <setColor>
				HAL_Delay(100);
 8009ce8:	2064      	movs	r0, #100	@ 0x64
 8009cea:	f7f7 fdf1 	bl	80018d0 <HAL_Delay>
				setColor(0, 127, 255);     // 藍
 8009cee:	22ff      	movs	r2, #255	@ 0xff
 8009cf0:	217f      	movs	r1, #127	@ 0x7f
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	f7ff ff64 	bl	8009bc0 <setColor>
				HAL_Delay(100);
 8009cf8:	2064      	movs	r0, #100	@ 0x64
 8009cfa:	f7f7 fde9 	bl	80018d0 <HAL_Delay>
				setColor(0, 0, 255);    // 靛
 8009cfe:	22ff      	movs	r2, #255	@ 0xff
 8009d00:	2100      	movs	r1, #0
 8009d02:	2000      	movs	r0, #0
 8009d04:	f7ff ff5c 	bl	8009bc0 <setColor>
				HAL_Delay(100);
 8009d08:	2064      	movs	r0, #100	@ 0x64
 8009d0a:	f7f7 fde1 	bl	80018d0 <HAL_Delay>
				setColor(50, 0, 255);   // 紫
 8009d0e:	22ff      	movs	r2, #255	@ 0xff
 8009d10:	2100      	movs	r1, #0
 8009d12:	2032      	movs	r0, #50	@ 0x32
 8009d14:	f7ff ff54 	bl	8009bc0 <setColor>
				HAL_Delay(100);
 8009d18:	2064      	movs	r0, #100	@ 0x64
 8009d1a:	f7f7 fdd9 	bl	80018d0 <HAL_Delay>
			}
			xSemaphoreGive(xLEDMutex);
 8009d1e:	4b06      	ldr	r3, [pc, #24]	@ (8009d38 <LEDTask+0xb4>)
 8009d20:	6818      	ldr	r0, [r3, #0]
 8009d22:	2300      	movs	r3, #0
 8009d24:	2200      	movs	r2, #0
 8009d26:	2100      	movs	r1, #0
 8009d28:	f7fd f9ae 	bl	8007088 <xQueueGenericSend>
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 8009d2c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009d30:	f7fe f800 	bl	8007d34 <vTaskDelay>
		if (xSemaphoreTake(xLEDMutex, portMAX_DELAY) == pdPASS) {
 8009d34:	e7ad      	b.n	8009c92 <LEDTask+0xe>
 8009d36:	bf00      	nop
 8009d38:	200134f4 	.word	0x200134f4
 8009d3c:	200134f8 	.word	0x200134f8

08009d40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b087      	sub	sp, #28
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009d52:	2300      	movs	r3, #0
 8009d54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009d56:	4b1f      	ldr	r3, [pc, #124]	@ (8009dd4 <FATFS_LinkDriverEx+0x94>)
 8009d58:	7a5b      	ldrb	r3, [r3, #9]
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d131      	bne.n	8009dc4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009d60:	4b1c      	ldr	r3, [pc, #112]	@ (8009dd4 <FATFS_LinkDriverEx+0x94>)
 8009d62:	7a5b      	ldrb	r3, [r3, #9]
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	461a      	mov	r2, r3
 8009d68:	4b1a      	ldr	r3, [pc, #104]	@ (8009dd4 <FATFS_LinkDriverEx+0x94>)
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009d6e:	4b19      	ldr	r3, [pc, #100]	@ (8009dd4 <FATFS_LinkDriverEx+0x94>)
 8009d70:	7a5b      	ldrb	r3, [r3, #9]
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	4a17      	ldr	r2, [pc, #92]	@ (8009dd4 <FATFS_LinkDriverEx+0x94>)
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009d7e:	4b15      	ldr	r3, [pc, #84]	@ (8009dd4 <FATFS_LinkDriverEx+0x94>)
 8009d80:	7a5b      	ldrb	r3, [r3, #9]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	461a      	mov	r2, r3
 8009d86:	4b13      	ldr	r3, [pc, #76]	@ (8009dd4 <FATFS_LinkDriverEx+0x94>)
 8009d88:	4413      	add	r3, r2
 8009d8a:	79fa      	ldrb	r2, [r7, #7]
 8009d8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009d8e:	4b11      	ldr	r3, [pc, #68]	@ (8009dd4 <FATFS_LinkDriverEx+0x94>)
 8009d90:	7a5b      	ldrb	r3, [r3, #9]
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	b2d1      	uxtb	r1, r2
 8009d98:	4a0e      	ldr	r2, [pc, #56]	@ (8009dd4 <FATFS_LinkDriverEx+0x94>)
 8009d9a:	7251      	strb	r1, [r2, #9]
 8009d9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009d9e:	7dbb      	ldrb	r3, [r7, #22]
 8009da0:	3330      	adds	r3, #48	@ 0x30
 8009da2:	b2da      	uxtb	r2, r3
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	3301      	adds	r3, #1
 8009dac:	223a      	movs	r2, #58	@ 0x3a
 8009dae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	3302      	adds	r3, #2
 8009db4:	222f      	movs	r2, #47	@ 0x2f
 8009db6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	3303      	adds	r3, #3
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	371c      	adds	r7, #28
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	200134fc 	.word	0x200134fc

08009dd8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009de2:	2200      	movs	r2, #0
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7ff ffaa 	bl	8009d40 <FATFS_LinkDriverEx>
 8009dec:	4603      	mov	r3, r0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3708      	adds	r7, #8
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
	...

08009df8 <command_Init>:
	{"led", "Change LED color (Command => led red green blue)", LEDChangeColor},
	{NULL, NULL, NULL},
};

void command_Init(UART_HandleTypeDef* huart)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
	shell_huart = huart;
 8009e00:	4a04      	ldr	r2, [pc, #16]	@ (8009e14 <command_Init+0x1c>)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6013      	str	r3, [r2, #0]
}
 8009e06:	bf00      	nop
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	20013908 	.word	0x20013908

08009e18 <LEDChangeColor>:

void LEDChangeColor(uint8_t argc, char **argv)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	6039      	str	r1, [r7, #0]
 8009e22:	71fb      	strb	r3, [r7, #7]
	if(argc < 4) {
 8009e24:	79fb      	ldrb	r3, [r7, #7]
 8009e26:	2b03      	cmp	r3, #3
 8009e28:	d806      	bhi.n	8009e38 <LEDChangeColor+0x20>
		SendMsg(shell_huart, "\r\ESP32SendMsg: Not enough arguments for this command.\r\n");
 8009e2a:	4b19      	ldr	r3, [pc, #100]	@ (8009e90 <LEDChangeColor+0x78>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4919      	ldr	r1, [pc, #100]	@ (8009e94 <LEDChangeColor+0x7c>)
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7f7 f815 	bl	8000e60 <SendMsg>
 8009e36:	e028      	b.n	8009e8a <LEDChangeColor+0x72>
		return;
	}

	LEDMsgStruct LEDMsg;
	LEDMsg.r = (int)atoi(argv[1]);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 fbcc 	bl	800a5dc <atoi>
 8009e44:	4603      	mov	r3, r0
 8009e46:	60fb      	str	r3, [r7, #12]
	LEDMsg.g = (int)atoi(argv[2]);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	3308      	adds	r3, #8
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 fbc4 	bl	800a5dc <atoi>
 8009e54:	4603      	mov	r3, r0
 8009e56:	613b      	str	r3, [r7, #16]
	LEDMsg.b = (int)atoi(argv[3]);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	330c      	adds	r3, #12
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 fbbc 	bl	800a5dc <atoi>
 8009e64:	4603      	mov	r3, r0
 8009e66:	617b      	str	r3, [r7, #20]

	if (xQueueSend(xLEDQueue, &LEDMsg, 0) != pdPASS) {
 8009e68:	4b0b      	ldr	r3, [pc, #44]	@ (8009e98 <LEDChangeColor+0x80>)
 8009e6a:	6818      	ldr	r0, [r3, #0]
 8009e6c:	f107 010c 	add.w	r1, r7, #12
 8009e70:	2300      	movs	r3, #0
 8009e72:	2200      	movs	r2, #0
 8009e74:	f7fd f908 	bl	8007088 <xQueueGenericSend>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d005      	beq.n	8009e8a <LEDChangeColor+0x72>
		SendMsg(shell_huart, "\r\LEDMsg: Queue full or error.\r\n");
 8009e7e:	4b04      	ldr	r3, [pc, #16]	@ (8009e90 <LEDChangeColor+0x78>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4906      	ldr	r1, [pc, #24]	@ (8009e9c <LEDChangeColor+0x84>)
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7f6 ffeb 	bl	8000e60 <SendMsg>
	}
}
 8009e8a:	3718      	adds	r7, #24
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	20013908 	.word	0x20013908
 8009e94:	0800b6f8 	.word	0x0800b6f8
 8009e98:	200134f0 	.word	0x200134f0
 8009e9c:	0800b730 	.word	0x0800b730

08009ea0 <ESP32SendMsg>:

void ESP32SendMsg(uint8_t argc, char **argv)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b09c      	sub	sp, #112	@ 0x70
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	6039      	str	r1, [r7, #0]
 8009eaa:	71fb      	strb	r3, [r7, #7]
	if(argc < 2) {
 8009eac:	79fb      	ldrb	r3, [r7, #7]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d806      	bhi.n	8009ec0 <ESP32SendMsg+0x20>
		SendMsg(shell_huart, "\r\ESP32SendMsg: Not enough arguments for this command.\r\n");
 8009eb2:	4b13      	ldr	r3, [pc, #76]	@ (8009f00 <ESP32SendMsg+0x60>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4913      	ldr	r1, [pc, #76]	@ (8009f04 <ESP32SendMsg+0x64>)
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7f6 ffd1 	bl	8000e60 <SendMsg>
 8009ebe:	e01c      	b.n	8009efa <ESP32SendMsg+0x5a>
		return;
	}

	ESP32MsgStruct esp32Msg;
	strncpy(esp32Msg.msg, argv[1], sizeof(esp32Msg.msg)-1);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	3304      	adds	r3, #4
 8009ec4:	6819      	ldr	r1, [r3, #0]
 8009ec6:	f107 030c 	add.w	r3, r7, #12
 8009eca:	2263      	movs	r2, #99	@ 0x63
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 fc51 	bl	800a774 <strncpy>
	esp32Msg.msg[sizeof(esp32Msg.msg)-1] = '\0';
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	if (xQueueSend(xESP32Queue, &esp32Msg, 0) != pdPASS) {
 8009ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8009f08 <ESP32SendMsg+0x68>)
 8009eda:	6818      	ldr	r0, [r3, #0]
 8009edc:	f107 010c 	add.w	r1, r7, #12
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f7fd f8d0 	bl	8007088 <xQueueGenericSend>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d005      	beq.n	8009efa <ESP32SendMsg+0x5a>
		SendMsg(shell_huart, "\r\ESP32SendMsg: Queue full or error.\r\n");
 8009eee:	4b04      	ldr	r3, [pc, #16]	@ (8009f00 <ESP32SendMsg+0x60>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4906      	ldr	r1, [pc, #24]	@ (8009f0c <ESP32SendMsg+0x6c>)
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7f6 ffb3 	bl	8000e60 <SendMsg>
	}
}
 8009efa:	3770      	adds	r7, #112	@ 0x70
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	20013908 	.word	0x20013908
 8009f04:	0800b6f8 	.word	0x0800b6f8
 8009f08:	200006c0 	.word	0x200006c0
 8009f0c:	0800b750 	.word	0x0800b750

08009f10 <LCDShowMsg>:

void LCDShowMsg(uint8_t argc, char **argv)
{
 8009f10:	b590      	push	{r4, r7, lr}
 8009f12:	b08f      	sub	sp, #60	@ 0x3c
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	4603      	mov	r3, r0
 8009f18:	6039      	str	r1, [r7, #0]
 8009f1a:	71fb      	strb	r3, [r7, #7]
	if(argc < 4) {
 8009f1c:	79fb      	ldrb	r3, [r7, #7]
 8009f1e:	2b03      	cmp	r3, #3
 8009f20:	d806      	bhi.n	8009f30 <LCDShowMsg+0x20>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Not enough arguments for this command.\r\n");
 8009f22:	4b52      	ldr	r3, [pc, #328]	@ (800a06c <LCDShowMsg+0x15c>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4952      	ldr	r1, [pc, #328]	@ (800a070 <LCDShowMsg+0x160>)
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7f6 ff99 	bl	8000e60 <SendMsg>
        return;
 8009f2e:	e099      	b.n	800a064 <LCDShowMsg+0x154>
    }
	for(int j = 1; j <= 2; j++) {
 8009f30:	2301      	movs	r3, #1
 8009f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f34:	e027      	b.n	8009f86 <LCDShowMsg+0x76>
		for (int i = 0; argv[1][i]; i++) {
 8009f36:	2300      	movs	r3, #0
 8009f38:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f3a:	e019      	b.n	8009f70 <LCDShowMsg+0x60>
			if (argv[1][i] < '0' || argv[1][i] > '9') {
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	3304      	adds	r3, #4
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f44:	4413      	add	r3, r2
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	2b2f      	cmp	r3, #47	@ 0x2f
 8009f4a:	d907      	bls.n	8009f5c <LCDShowMsg+0x4c>
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	3304      	adds	r3, #4
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f54:	4413      	add	r3, r2
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b39      	cmp	r3, #57	@ 0x39
 8009f5a:	d906      	bls.n	8009f6a <LCDShowMsg+0x5a>
				SendMsg(shell_huart, "\r\nLCDShowMsg: Row and Column must be a number.\r\n");
 8009f5c:	4b43      	ldr	r3, [pc, #268]	@ (800a06c <LCDShowMsg+0x15c>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4944      	ldr	r1, [pc, #272]	@ (800a074 <LCDShowMsg+0x164>)
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7f6 ff7c 	bl	8000e60 <SendMsg>
				return;
 8009f68:	e07c      	b.n	800a064 <LCDShowMsg+0x154>
		for (int i = 0; argv[1][i]; i++) {
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	3304      	adds	r3, #4
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f78:	4413      	add	r3, r2
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d1dd      	bne.n	8009f3c <LCDShowMsg+0x2c>
	for(int j = 1; j <= 2; j++) {
 8009f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f82:	3301      	adds	r3, #1
 8009f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f88:	2b02      	cmp	r3, #2
 8009f8a:	ddd4      	ble.n	8009f36 <LCDShowMsg+0x26>
			}
		}
	}
	if ((uint8_t)atoi(argv[1]) > 3) {
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	3304      	adds	r3, #4
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f000 fb22 	bl	800a5dc <atoi>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	d906      	bls.n	8009fae <LCDShowMsg+0x9e>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Row out of range (0-3).\r\n");
 8009fa0:	4b32      	ldr	r3, [pc, #200]	@ (800a06c <LCDShowMsg+0x15c>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4934      	ldr	r1, [pc, #208]	@ (800a078 <LCDShowMsg+0x168>)
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7f6 ff5a 	bl	8000e60 <SendMsg>
        return;
 8009fac:	e05a      	b.n	800a064 <LCDShowMsg+0x154>
    }
    if ((uint8_t)atoi(argv[2]) > 19) {
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 fb11 	bl	800a5dc <atoi>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	2b13      	cmp	r3, #19
 8009fc0:	d906      	bls.n	8009fd0 <LCDShowMsg+0xc0>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Column out of range (0-19).\r\n");
 8009fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800a06c <LCDShowMsg+0x15c>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	492d      	ldr	r1, [pc, #180]	@ (800a07c <LCDShowMsg+0x16c>)
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7f6 ff49 	bl	8000e60 <SendMsg>
        return;
 8009fce:	e049      	b.n	800a064 <LCDShowMsg+0x154>
    }
	if (strlen(argv[3]) > (20 - (uint8_t)atoi(argv[2]))) {
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	330c      	adds	r3, #12
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7f6 f904 	bl	80001e4 <strlen>
 8009fdc:	4604      	mov	r4, r0
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	3308      	adds	r3, #8
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 faf9 	bl	800a5dc <atoi>
 8009fea:	4603      	mov	r3, r0
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	f1c3 0314 	rsb	r3, r3, #20
 8009ff2:	429c      	cmp	r4, r3
 8009ff4:	d906      	bls.n	800a004 <LCDShowMsg+0xf4>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Message too long for this column.\r\n");
 8009ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800a06c <LCDShowMsg+0x15c>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4921      	ldr	r1, [pc, #132]	@ (800a080 <LCDShowMsg+0x170>)
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7f6 ff2f 	bl	8000e60 <SendMsg>
        return;
 800a002:	e02f      	b.n	800a064 <LCDShowMsg+0x154>
    }

    LCDMsgStruct lcdMsg;
    lcdMsg.row = (uint8_t)atoi(argv[1]);
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	3304      	adds	r3, #4
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 fae6 	bl	800a5dc <atoi>
 800a010:	4603      	mov	r3, r0
 800a012:	b2db      	uxtb	r3, r3
 800a014:	733b      	strb	r3, [r7, #12]
    lcdMsg.col = (uint8_t)atoi(argv[2]);
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	3308      	adds	r3, #8
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f000 fadd 	bl	800a5dc <atoi>
 800a022:	4603      	mov	r3, r0
 800a024:	b2db      	uxtb	r3, r3
 800a026:	737b      	strb	r3, [r7, #13]
    strncpy(lcdMsg.msg, argv[3], sizeof(lcdMsg.msg)-1);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	330c      	adds	r3, #12
 800a02c:	6819      	ldr	r1, [r3, #0]
 800a02e:	f107 030c 	add.w	r3, r7, #12
 800a032:	3302      	adds	r3, #2
 800a034:	221f      	movs	r2, #31
 800a036:	4618      	mov	r0, r3
 800a038:	f000 fb9c 	bl	800a774 <strncpy>
    lcdMsg.msg[sizeof(lcdMsg.msg)-1] = '\0';
 800a03c:	2300      	movs	r3, #0
 800a03e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (xQueueSend(xLCDQueue, &lcdMsg, 0) != pdPASS) {
 800a042:	4b10      	ldr	r3, [pc, #64]	@ (800a084 <LCDShowMsg+0x174>)
 800a044:	6818      	ldr	r0, [r3, #0]
 800a046:	f107 010c 	add.w	r1, r7, #12
 800a04a:	2300      	movs	r3, #0
 800a04c:	2200      	movs	r2, #0
 800a04e:	f7fd f81b 	bl	8007088 <xQueueGenericSend>
 800a052:	4603      	mov	r3, r0
 800a054:	2b01      	cmp	r3, #1
 800a056:	d005      	beq.n	800a064 <LCDShowMsg+0x154>
        SendMsg(shell_huart, "\r\nLCDShowMsg: Queue full or error.\r\n");
 800a058:	4b04      	ldr	r3, [pc, #16]	@ (800a06c <LCDShowMsg+0x15c>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	490a      	ldr	r1, [pc, #40]	@ (800a088 <LCDShowMsg+0x178>)
 800a05e:	4618      	mov	r0, r3
 800a060:	f7f6 fefe 	bl	8000e60 <SendMsg>
    }
}
 800a064:	373c      	adds	r7, #60	@ 0x3c
 800a066:	46bd      	mov	sp, r7
 800a068:	bd90      	pop	{r4, r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20013908 	.word	0x20013908
 800a070:	0800b778 	.word	0x0800b778
 800a074:	0800b7b0 	.word	0x0800b7b0
 800a078:	0800b7e4 	.word	0x0800b7e4
 800a07c:	0800b80c 	.word	0x0800b80c
 800a080:	0800b838 	.word	0x0800b838
 800a084:	200134e0 	.word	0x200134e0
 800a088:	0800b86c 	.word	0x0800b86c

0800a08c <CommandPrint>:

static void CommandPrint(uint8_t argc, char **argv)
{
 800a08c:	b590      	push	{r4, r7, lr}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	4603      	mov	r3, r0
 800a094:	6039      	str	r1, [r7, #0]
 800a096:	71fb      	strb	r3, [r7, #7]
	SendMsg(shell_huart, "\r\n------------------------------------------------------------------\r\n");
 800a098:	4b1b      	ldr	r3, [pc, #108]	@ (800a108 <CommandPrint+0x7c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	491b      	ldr	r1, [pc, #108]	@ (800a10c <CommandPrint+0x80>)
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7f6 fede 	bl	8000e60 <SendMsg>
	for (uint8_t i=0; CommandList[i].name != NULL; i++)
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	73fb      	strb	r3, [r7, #15]
 800a0a8:	e019      	b.n	800a0de <CommandPrint+0x52>
	{
		SendMsg(shell_huart, "    %5s  %s \r\n", CommandList[i].name, CommandList[i].help);
 800a0aa:	4b17      	ldr	r3, [pc, #92]	@ (800a108 <CommandPrint+0x7c>)
 800a0ac:	6818      	ldr	r0, [r3, #0]
 800a0ae:	7bfa      	ldrb	r2, [r7, #15]
 800a0b0:	4917      	ldr	r1, [pc, #92]	@ (800a110 <CommandPrint+0x84>)
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	005b      	lsls	r3, r3, #1
 800a0b6:	4413      	add	r3, r2
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	440b      	add	r3, r1
 800a0bc:	6819      	ldr	r1, [r3, #0]
 800a0be:	7bfa      	ldrb	r2, [r7, #15]
 800a0c0:	4c13      	ldr	r4, [pc, #76]	@ (800a110 <CommandPrint+0x84>)
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	005b      	lsls	r3, r3, #1
 800a0c6:	4413      	add	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4423      	add	r3, r4
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	460a      	mov	r2, r1
 800a0d2:	4910      	ldr	r1, [pc, #64]	@ (800a114 <CommandPrint+0x88>)
 800a0d4:	f7f6 fec4 	bl	8000e60 <SendMsg>
	for (uint8_t i=0; CommandList[i].name != NULL; i++)
 800a0d8:	7bfb      	ldrb	r3, [r7, #15]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	73fb      	strb	r3, [r7, #15]
 800a0de:	7bfa      	ldrb	r2, [r7, #15]
 800a0e0:	490b      	ldr	r1, [pc, #44]	@ (800a110 <CommandPrint+0x84>)
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	005b      	lsls	r3, r3, #1
 800a0e6:	4413      	add	r3, r2
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	440b      	add	r3, r1
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1db      	bne.n	800a0aa <CommandPrint+0x1e>
	}
	SendMsg(shell_huart, "------------------------------------------------------------------\r\n");
 800a0f2:	4b05      	ldr	r3, [pc, #20]	@ (800a108 <CommandPrint+0x7c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4908      	ldr	r1, [pc, #32]	@ (800a118 <CommandPrint+0x8c>)
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7f6 feb1 	bl	8000e60 <SendMsg>
}
 800a0fe:	bf00      	nop
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	bd90      	pop	{r4, r7, pc}
 800a106:	bf00      	nop
 800a108:	20013908 	.word	0x20013908
 800a10c:	0800b894 	.word	0x0800b894
 800a110:	0800b9d0 	.word	0x0800b9d0
 800a114:	0800b8dc 	.word	0x0800b8dc
 800a118:	0800b8ec 	.word	0x0800b8ec

0800a11c <PrintArgs>:


static uint8_t PrintArgs(uint8_t argc, char **argv)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	4603      	mov	r3, r0
 800a124:	6039      	str	r1, [r7, #0]
 800a126:	71fb      	strb	r3, [r7, #7]
	SendMsg(shell_huart, "\r\n");
 800a128:	4b10      	ldr	r3, [pc, #64]	@ (800a16c <PrintArgs+0x50>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4910      	ldr	r1, [pc, #64]	@ (800a170 <PrintArgs+0x54>)
 800a12e:	4618      	mov	r0, r3
 800a130:	f7f6 fe96 	bl	8000e60 <SendMsg>
	for (uint8_t i=0; i<argc; i++)
 800a134:	2300      	movs	r3, #0
 800a136:	73fb      	strb	r3, [r7, #15]
 800a138:	e00e      	b.n	800a158 <PrintArgs+0x3c>
	{
		SendMsg(shell_huart, "%d: %s \r\n", i, argv[i]);
 800a13a:	4b0c      	ldr	r3, [pc, #48]	@ (800a16c <PrintArgs+0x50>)
 800a13c:	6818      	ldr	r0, [r3, #0]
 800a13e:	7bf9      	ldrb	r1, [r7, #15]
 800a140:	7bfb      	ldrb	r3, [r7, #15]
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	683a      	ldr	r2, [r7, #0]
 800a146:	4413      	add	r3, r2
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	460a      	mov	r2, r1
 800a14c:	4909      	ldr	r1, [pc, #36]	@ (800a174 <PrintArgs+0x58>)
 800a14e:	f7f6 fe87 	bl	8000e60 <SendMsg>
	for (uint8_t i=0; i<argc; i++)
 800a152:	7bfb      	ldrb	r3, [r7, #15]
 800a154:	3301      	adds	r3, #1
 800a156:	73fb      	strb	r3, [r7, #15]
 800a158:	7bfa      	ldrb	r2, [r7, #15]
 800a15a:	79fb      	ldrb	r3, [r7, #7]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d3ec      	bcc.n	800a13a <PrintArgs+0x1e>
	}
	return 0;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20013908 	.word	0x20013908
 800a170:	0800b934 	.word	0x0800b934
 800a174:	0800b938 	.word	0x0800b938

0800a178 <CommandExecute>:

bool CommandExecute(uint8_t argc, char **argv)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	4603      	mov	r3, r0
 800a180:	6039      	str	r1, [r7, #0]
 800a182:	71fb      	strb	r3, [r7, #7]
	if (argc != 0 && argv != NULL)
 800a184:	79fb      	ldrb	r3, [r7, #7]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d043      	beq.n	800a212 <CommandExecute+0x9a>
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d040      	beq.n	800a212 <CommandExecute+0x9a>
	{
		for (uint8_t i=0; CommandList[i].name != NULL; i++)
 800a190:	2300      	movs	r3, #0
 800a192:	73fb      	strb	r3, [r7, #15]
 800a194:	e02d      	b.n	800a1f2 <CommandExecute+0x7a>
		{
			if(strcmp(CommandList[i].name, argv[0]) == 0)
 800a196:	7bfa      	ldrb	r2, [r7, #15]
 800a198:	4920      	ldr	r1, [pc, #128]	@ (800a21c <CommandExecute+0xa4>)
 800a19a:	4613      	mov	r3, r2
 800a19c:	005b      	lsls	r3, r3, #1
 800a19e:	4413      	add	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	440b      	add	r3, r1
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	f7f6 f80f 	bl	80001d0 <strcmp>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d119      	bne.n	800a1ec <CommandExecute+0x74>
			{
				if(CommandList[i].func != NULL)
 800a1b8:	7bfa      	ldrb	r2, [r7, #15]
 800a1ba:	4918      	ldr	r1, [pc, #96]	@ (800a21c <CommandExecute+0xa4>)
 800a1bc:	4613      	mov	r3, r2
 800a1be:	005b      	lsls	r3, r3, #1
 800a1c0:	4413      	add	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	440b      	add	r3, r1
 800a1c6:	3308      	adds	r3, #8
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00e      	beq.n	800a1ec <CommandExecute+0x74>
				{
					(CommandList[i].func)(argc, argv);
 800a1ce:	7bfa      	ldrb	r2, [r7, #15]
 800a1d0:	4912      	ldr	r1, [pc, #72]	@ (800a21c <CommandExecute+0xa4>)
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	4413      	add	r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	440b      	add	r3, r1
 800a1dc:	3308      	adds	r3, #8
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	79fa      	ldrb	r2, [r7, #7]
 800a1e2:	6839      	ldr	r1, [r7, #0]
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	4798      	blx	r3
					return true;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e013      	b.n	800a214 <CommandExecute+0x9c>
		for (uint8_t i=0; CommandList[i].name != NULL; i++)
 800a1ec:	7bfb      	ldrb	r3, [r7, #15]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	73fb      	strb	r3, [r7, #15]
 800a1f2:	7bfa      	ldrb	r2, [r7, #15]
 800a1f4:	4909      	ldr	r1, [pc, #36]	@ (800a21c <CommandExecute+0xa4>)
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	4413      	add	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	440b      	add	r3, r1
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1c7      	bne.n	800a196 <CommandExecute+0x1e>
				}
			}
		}
		SendMsg(shell_huart, "\r\nUnknown command. Type 'help' for commands.\r\n");
 800a206:	4b06      	ldr	r3, [pc, #24]	@ (800a220 <CommandExecute+0xa8>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4906      	ldr	r1, [pc, #24]	@ (800a224 <CommandExecute+0xac>)
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7f6 fe27 	bl	8000e60 <SendMsg>
	}
	return false;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	0800b9d0 	.word	0x0800b9d0
 800a220:	20013908 	.word	0x20013908
 800a224:	0800b944 	.word	0x0800b944

0800a228 <ReadLine_Init>:
static char prompt[PROMPT_LEN] = "> ";
static char readBuffer[READBUF_LEN] = {0};
extern UART_HandleTypeDef* shell_huart;

void ReadLine_Init(UART_HandleTypeDef* huart)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
	shell_huart = huart;
 800a230:	4a04      	ldr	r2, [pc, #16]	@ (800a244 <ReadLine_Init+0x1c>)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6013      	str	r3, [r2, #0]
}
 800a236:	bf00      	nop
 800a238:	370c      	adds	r7, #12
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	20013908 	.word	0x20013908

0800a248 <GetChar>:

static bool GetChar(char *out_char)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
	if(ReceiveChar(shell_huart, out_char) == HAL_OK)
 800a250:	4b07      	ldr	r3, [pc, #28]	@ (800a270 <GetChar+0x28>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	6879      	ldr	r1, [r7, #4]
 800a256:	4618      	mov	r0, r3
 800a258:	f7f6 fe54 	bl	8000f04 <ReceiveChar>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <GetChar+0x1e>
		return true;
 800a262:	2301      	movs	r3, #1
 800a264:	e000      	b.n	800a268 <GetChar+0x20>
	return false;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	20013908 	.word	0x20013908

0800a274 <PutChar>:

static void PutChar(char cChar)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	4603      	mov	r3, r0
 800a27c:	71fb      	strb	r3, [r7, #7]
	SendChar(shell_huart, cChar);
 800a27e:	4b05      	ldr	r3, [pc, #20]	@ (800a294 <PutChar+0x20>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	79fa      	ldrb	r2, [r7, #7]
 800a284:	4611      	mov	r1, r2
 800a286:	4618      	mov	r0, r3
 800a288:	f7f6 fdd8 	bl	8000e3c <SendChar>
}
 800a28c:	bf00      	nop
 800a28e:	3708      	adds	r7, #8
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	20013908 	.word	0x20013908

0800a298 <PutString>:

static void PutString(const char *const pcChar)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
	SendMsg(shell_huart, pcChar);
 800a2a0:	4b04      	ldr	r3, [pc, #16]	@ (800a2b4 <PutString+0x1c>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6879      	ldr	r1, [r7, #4]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7f6 fdda 	bl	8000e60 <SendMsg>
}
 800a2ac:	bf00      	nop
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	20013908 	.word	0x20013908

0800a2b8 <ReadLine>:

uint32_t ReadLine()
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0

	char *pCur = readBuffer; /* the point to ready receive. */
 800a2be:	4b6f      	ldr	r3, [pc, #444]	@ (800a47c <ReadLine+0x1c4>)
 800a2c0:	617b      	str	r3, [r7, #20]
	char cChar = 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	71bb      	strb	r3, [r7, #6]
	uint32_t receiveCharCnt = 0;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	613b      	str	r3, [r7, #16]
	uint32_t PromptLen = 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	60fb      	str	r3, [r7, #12]
	uint32_t outputColumnCnt = 0;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	60bb      	str	r3, [r7, #8]
	memset(readBuffer, 0, sizeof(readBuffer));
 800a2d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	4868      	ldr	r0, [pc, #416]	@ (800a47c <ReadLine+0x1c4>)
 800a2da:	f000 fa43 	bl	800a764 <memset>
	/* print Prompt */
	if (*prompt)
 800a2de:	4b68      	ldr	r3, [pc, #416]	@ (800a480 <ReadLine+0x1c8>)
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00b      	beq.n	800a2fe <ReadLine+0x46>
	{
		PutString("\n\r");
 800a2e6:	4867      	ldr	r0, [pc, #412]	@ (800a484 <ReadLine+0x1cc>)
 800a2e8:	f7ff ffd6 	bl	800a298 <PutString>
		PromptLen = strlen(prompt);
 800a2ec:	4864      	ldr	r0, [pc, #400]	@ (800a480 <ReadLine+0x1c8>)
 800a2ee:	f7f5 ff79 	bl	80001e4 <strlen>
 800a2f2:	60f8      	str	r0, [r7, #12]
		outputColumnCnt = PromptLen;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	60bb      	str	r3, [r7, #8]
		PutString(prompt);
 800a2f8:	4861      	ldr	r0, [pc, #388]	@ (800a480 <ReadLine+0x1c8>)
 800a2fa:	f7ff ffcd 	bl	800a298 <PutString>
	}
	for (;;)
	{
		bool isGotChar = GetChar(&cChar);
 800a2fe:	1dbb      	adds	r3, r7, #6
 800a300:	4618      	mov	r0, r3
 800a302:	f7ff ffa1 	bl	800a248 <GetChar>
 800a306:	4603      	mov	r3, r0
 800a308:	71fb      	strb	r3, [r7, #7]

		if(isGotChar) {
 800a30a:	79fb      	ldrb	r3, [r7, #7]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 80ad 	beq.w	800a46c <ReadLine+0x1b4>
			switch (cChar)
 800a312:	79bb      	ldrb	r3, [r7, #6]
 800a314:	2b15      	cmp	r3, #21
 800a316:	dc2d      	bgt.n	800a374 <ReadLine+0xbc>
 800a318:	2b03      	cmp	r3, #3
 800a31a:	db7b      	blt.n	800a414 <ReadLine+0x15c>
 800a31c:	3b03      	subs	r3, #3
 800a31e:	2b12      	cmp	r3, #18
 800a320:	d878      	bhi.n	800a414 <ReadLine+0x15c>
 800a322:	a201      	add	r2, pc, #4	@ (adr r2, 800a328 <ReadLine+0x70>)
 800a324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a328:	0800a37b 	.word	0x0800a37b
 800a32c:	0800a415 	.word	0x0800a415
 800a330:	0800a415 	.word	0x0800a415
 800a334:	0800a415 	.word	0x0800a415
 800a338:	0800a415 	.word	0x0800a415
 800a33c:	0800a415 	.word	0x0800a415
 800a340:	0800a415 	.word	0x0800a415
 800a344:	0800a37f 	.word	0x0800a37f
 800a348:	0800a415 	.word	0x0800a415
 800a34c:	0800a415 	.word	0x0800a415
 800a350:	0800a37f 	.word	0x0800a37f
 800a354:	0800a415 	.word	0x0800a415
 800a358:	0800a415 	.word	0x0800a415
 800a35c:	0800a415 	.word	0x0800a415
 800a360:	0800a415 	.word	0x0800a415
 800a364:	0800a415 	.word	0x0800a415
 800a368:	0800a415 	.word	0x0800a415
 800a36c:	0800a415 	.word	0x0800a415
 800a370:	0800a3b5 	.word	0x0800a3b5
 800a374:	2b7f      	cmp	r3, #127	@ 0x7f
 800a376:	d02f      	beq.n	800a3d8 <ReadLine+0x120>
 800a378:	e04c      	b.n	800a414 <ReadLine+0x15c>
			{
			case 0x03: /* ^C - break */
				return 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	e07a      	b.n	800a474 <ReadLine+0x1bc>
			case '\r': /*\r*/
			case '\n': /*\n*/
				if ((pCur >= &readBuffer[0]) &&
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	4a3e      	ldr	r2, [pc, #248]	@ (800a47c <ReadLine+0x1c4>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d30b      	bcc.n	800a39e <ReadLine+0xe6>
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	4a3f      	ldr	r2, [pc, #252]	@ (800a488 <ReadLine+0x1d0>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d807      	bhi.n	800a39e <ReadLine+0xe6>
					(pCur <= &readBuffer[READBUF_LEN]))
				{
					*(pCur + 1) = '\0';
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	3301      	adds	r3, #1
 800a392:	2200      	movs	r2, #0
 800a394:	701a      	strb	r2, [r3, #0]
	//				PutString("\n\r");
	//				PutString(readBuffer);
					return (pCur - readBuffer);
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	4a38      	ldr	r2, [pc, #224]	@ (800a47c <ReadLine+0x1c4>)
 800a39a:	1a9b      	subs	r3, r3, r2
 800a39c:	e06a      	b.n	800a474 <ReadLine+0x1bc>
				}
				else /* Buffer full (Overflow) */
				{
					memset(readBuffer, 0, sizeof(readBuffer));
 800a39e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	4835      	ldr	r0, [pc, #212]	@ (800a47c <ReadLine+0x1c4>)
 800a3a6:	f000 f9dd 	bl	800a764 <memset>
					return 0;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	e062      	b.n	800a474 <ReadLine+0x1bc>
				}

			case 0x15: /* ^U - erase line */
				while (outputColumnCnt > PromptLen)
				{
					outputColumnCnt--;
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	60bb      	str	r3, [r7, #8]
				while (outputColumnCnt > PromptLen)
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d8f8      	bhi.n	800a3ae <ReadLine+0xf6>
				}
				memset(readBuffer, 0, sizeof(readBuffer));
 800a3bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	482e      	ldr	r0, [pc, #184]	@ (800a47c <ReadLine+0x1c4>)
 800a3c4:	f000 f9ce 	bl	800a764 <memset>
				pCur = readBuffer;
 800a3c8:	4b2c      	ldr	r3, [pc, #176]	@ (800a47c <ReadLine+0x1c4>)
 800a3ca:	617b      	str	r3, [r7, #20]
				receiveCharCnt = 0x00;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	613b      	str	r3, [r7, #16]
				PutString("\n\r> ");
 800a3d0:	482e      	ldr	r0, [pc, #184]	@ (800a48c <ReadLine+0x1d4>)
 800a3d2:	f7ff ff61 	bl	800a298 <PutString>
				break;
 800a3d6:	e045      	b.n	800a464 <ReadLine+0x1ac>

			case 0x7F: /* DEL - backspace	*/
				// 鼠標位置大於 promote
				if ((outputColumnCnt > PromptLen) && (pCur > &readBuffer[0]) && (receiveCharCnt > 0x00))
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d940      	bls.n	800a462 <ReadLine+0x1aa>
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	4a26      	ldr	r2, [pc, #152]	@ (800a47c <ReadLine+0x1c4>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d93c      	bls.n	800a462 <ReadLine+0x1aa>
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d039      	beq.n	800a462 <ReadLine+0x1aa>
				{
					outputColumnCnt--;
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	60bb      	str	r3, [r7, #8]
					pCur--;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	617b      	str	r3, [r7, #20]
					receiveCharCnt--;
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	613b      	str	r3, [r7, #16]
					*pCur = '\0'; /* earse the receice char */
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	2200      	movs	r2, #0
 800a404:	701a      	strb	r2, [r3, #0]
					PutString("\n\r> ");
 800a406:	4821      	ldr	r0, [pc, #132]	@ (800a48c <ReadLine+0x1d4>)
 800a408:	f7ff ff46 	bl	800a298 <PutString>
					PutString(readBuffer);
 800a40c:	481b      	ldr	r0, [pc, #108]	@ (800a47c <ReadLine+0x1c4>)
 800a40e:	f7ff ff43 	bl	800a298 <PutString>
				}
				break;
 800a412:	e026      	b.n	800a462 <ReadLine+0x1aa>

			default:
				if (receiveCharCnt < sizeof(readBuffer) &&
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a41a:	d21e      	bcs.n	800a45a <ReadLine+0x1a2>
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	4a17      	ldr	r2, [pc, #92]	@ (800a47c <ReadLine+0x1c4>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d31a      	bcc.n	800a45a <ReadLine+0x1a2>
					(pCur >= &readBuffer[0]) &&
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	4a18      	ldr	r2, [pc, #96]	@ (800a488 <ReadLine+0x1d0>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d816      	bhi.n	800a45a <ReadLine+0x1a2>
					(pCur <= &readBuffer[READBUF_LEN]) &&
					(cChar > 0x19 && cChar < 0x7F))
 800a42c:	79bb      	ldrb	r3, [r7, #6]
					(pCur <= &readBuffer[READBUF_LEN]) &&
 800a42e:	2b19      	cmp	r3, #25
 800a430:	d913      	bls.n	800a45a <ReadLine+0x1a2>
					(cChar > 0x19 && cChar < 0x7F))
 800a432:	79bb      	ldrb	r3, [r7, #6]
 800a434:	2b7e      	cmp	r3, #126	@ 0x7e
 800a436:	d810      	bhi.n	800a45a <ReadLine+0x1a2>
				{
					outputColumnCnt++;
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	3301      	adds	r3, #1
 800a43c:	60bb      	str	r3, [r7, #8]
					PutChar(cChar);
 800a43e:	79bb      	ldrb	r3, [r7, #6]
 800a440:	4618      	mov	r0, r3
 800a442:	f7ff ff17 	bl	800a274 <PutChar>
					*pCur = cChar;
 800a446:	79ba      	ldrb	r2, [r7, #6]
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	701a      	strb	r2, [r3, #0]
					pCur++;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	3301      	adds	r3, #1
 800a450:	617b      	str	r3, [r7, #20]
					receiveCharCnt++;
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	3301      	adds	r3, #1
 800a456:	613b      	str	r3, [r7, #16]
 800a458:	e004      	b.n	800a464 <ReadLine+0x1ac>
				}
				else /* Buffer full (Overflow) */
				{
					PutChar('\a');
 800a45a:	2007      	movs	r0, #7
 800a45c:	f7ff ff0a 	bl	800a274 <PutChar>
 800a460:	e000      	b.n	800a464 <ReadLine+0x1ac>
				break;
 800a462:	bf00      	nop
				}
			}
			vTaskDelay(pdMS_TO_TICKS(0));
 800a464:	2000      	movs	r0, #0
 800a466:	f7fd fc65 	bl	8007d34 <vTaskDelay>
 800a46a:	e748      	b.n	800a2fe <ReadLine+0x46>
		}
		else {
			vTaskDelay(pdMS_TO_TICKS(50));
 800a46c:	2032      	movs	r0, #50	@ 0x32
 800a46e:	f7fd fc61 	bl	8007d34 <vTaskDelay>
	{
 800a472:	e744      	b.n	800a2fe <ReadLine+0x46>
		}
	}
	return 0;
}
 800a474:	4618      	mov	r0, r3
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	20013508 	.word	0x20013508
 800a480:	2000002c 	.word	0x2000002c
 800a484:	0800b974 	.word	0x0800b974
 800a488:	20013908 	.word	0x20013908
 800a48c:	0800b978 	.word	0x0800b978

0800a490 <ArgAnalyze>:

bool ArgAnalyze(uint8_t *argc, char *argv[])
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	60fb      	str	r3, [r7, #12]

	while (*argc < MAX_ARGS)
 800a49e:	e049      	b.n	800a534 <ArgAnalyze+0xa4>
	{
		/* skip any separator */
		while (readBuffer[i] == ' ')
		{
			i++;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	60fb      	str	r3, [r7, #12]
		while (readBuffer[i] == ' ')
 800a4a6:	4a29      	ldr	r2, [pc, #164]	@ (800a54c <ArgAnalyze+0xbc>)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	2b20      	cmp	r3, #32
 800a4b0:	d0f6      	beq.n	800a4a0 <ArgAnalyze+0x10>
		}
		/* end of line, no more args	*/
		if (readBuffer[i] == '\0')
 800a4b2:	4a26      	ldr	r2, [pc, #152]	@ (800a54c <ArgAnalyze+0xbc>)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d108      	bne.n	800a4d0 <ArgAnalyze+0x40>
		{
			argv[*argc] = NULL;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	601a      	str	r2, [r3, #0]
			return true;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e036      	b.n	800a53e <ArgAnalyze+0xae>
		}
		/* begin of argument string */
		argv[(*argc)++] = &readBuffer[i];
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	1c5a      	adds	r2, r3, #1
 800a4d6:	b2d1      	uxtb	r1, r2
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	7011      	strb	r1, [r2, #0]
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	4919      	ldr	r1, [pc, #100]	@ (800a54c <ArgAnalyze+0xbc>)
 800a4e6:	440a      	add	r2, r1
 800a4e8:	601a      	str	r2, [r3, #0]
		/* find end of argument string */
		while (readBuffer[i] && readBuffer[i] != ' ')
 800a4ea:	e002      	b.n	800a4f2 <ArgAnalyze+0x62>
		{
			i++;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	60fb      	str	r3, [r7, #12]
		while (readBuffer[i] && readBuffer[i] != ' ')
 800a4f2:	4a16      	ldr	r2, [pc, #88]	@ (800a54c <ArgAnalyze+0xbc>)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d005      	beq.n	800a50a <ArgAnalyze+0x7a>
 800a4fe:	4a13      	ldr	r2, [pc, #76]	@ (800a54c <ArgAnalyze+0xbc>)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	4413      	add	r3, r2
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	2b20      	cmp	r3, #32
 800a508:	d1f0      	bne.n	800a4ec <ArgAnalyze+0x5c>
		}
		/* end of line, no more args */
		if (readBuffer[i] == '\0')
 800a50a:	4a10      	ldr	r2, [pc, #64]	@ (800a54c <ArgAnalyze+0xbc>)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4413      	add	r3, r2
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d108      	bne.n	800a528 <ArgAnalyze+0x98>
		{
			argv[*argc] = NULL;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	683a      	ldr	r2, [r7, #0]
 800a51e:	4413      	add	r3, r2
 800a520:	2200      	movs	r2, #0
 800a522:	601a      	str	r2, [r3, #0]
			return true;
 800a524:	2301      	movs	r3, #1
 800a526:	e00a      	b.n	800a53e <ArgAnalyze+0xae>
		}
		readBuffer[i++] = '\0';
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	1c5a      	adds	r2, r3, #1
 800a52c:	60fa      	str	r2, [r7, #12]
 800a52e:	4a07      	ldr	r2, [pc, #28]	@ (800a54c <ArgAnalyze+0xbc>)
 800a530:	2100      	movs	r1, #0
 800a532:	54d1      	strb	r1, [r2, r3]
	while (*argc < MAX_ARGS)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	2b09      	cmp	r3, #9
 800a53a:	d9b4      	bls.n	800a4a6 <ArgAnalyze+0x16>
	}
	return false;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	20013508 	.word	0x20013508

0800a550 <Shell_Init>:
#include "msgHandler.h"
#define MAX_ARGS 10
UART_HandleTypeDef* shell_huart;

void Shell_Init(UART_HandleTypeDef *huart)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
	shell_huart = huart;
 800a558:	4a0a      	ldr	r2, [pc, #40]	@ (800a584 <Shell_Init+0x34>)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6013      	str	r3, [r2, #0]
	ReadLine_Init(huart);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f7ff fe62 	bl	800a228 <ReadLine_Init>
	command_Init(huart);
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f7ff fc47 	bl	8009df8 <command_Init>

	const char *welcome_msg = "\r\nSTM32 Shell Initialized. Type 'help' for commands.\r\n";
 800a56a:	4b07      	ldr	r3, [pc, #28]	@ (800a588 <Shell_Init+0x38>)
 800a56c:	60fb      	str	r3, [r7, #12]
	SendMsg(shell_huart, welcome_msg);
 800a56e:	4b05      	ldr	r3, [pc, #20]	@ (800a584 <Shell_Init+0x34>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68f9      	ldr	r1, [r7, #12]
 800a574:	4618      	mov	r0, r3
 800a576:	f7f6 fc73 	bl	8000e60 <SendMsg>
}
 800a57a:	bf00      	nop
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	20013908 	.word	0x20013908
 800a588:	0800b980 	.word	0x0800b980

0800a58c <ShellHandler>:

void ShellHandler(void *pvParameters)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
	static uint8_t argc = 0;
	static char *argv[MAX_ARGS] = {0};

	while (1)
	{
		if (ReadLine())
 800a594:	f7ff fe90 	bl	800a2b8 <ReadLine>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d014      	beq.n	800a5c8 <ShellHandler+0x3c>
		{
			memset(&argc, 0, sizeof(argc));
 800a59e:	4b0d      	ldr	r3, [pc, #52]	@ (800a5d4 <ShellHandler+0x48>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	701a      	strb	r2, [r3, #0]
			memset(argv, 0, sizeof(argv));
 800a5a4:	2228      	movs	r2, #40	@ 0x28
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	480b      	ldr	r0, [pc, #44]	@ (800a5d8 <ShellHandler+0x4c>)
 800a5aa:	f000 f8db 	bl	800a764 <memset>

			if (ArgAnalyze(&argc, argv))
 800a5ae:	490a      	ldr	r1, [pc, #40]	@ (800a5d8 <ShellHandler+0x4c>)
 800a5b0:	4808      	ldr	r0, [pc, #32]	@ (800a5d4 <ShellHandler+0x48>)
 800a5b2:	f7ff ff6d 	bl	800a490 <ArgAnalyze>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d005      	beq.n	800a5c8 <ShellHandler+0x3c>
			{
				CommandExecute(argc, argv);
 800a5bc:	4b05      	ldr	r3, [pc, #20]	@ (800a5d4 <ShellHandler+0x48>)
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	4905      	ldr	r1, [pc, #20]	@ (800a5d8 <ShellHandler+0x4c>)
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7ff fdd8 	bl	800a178 <CommandExecute>
			}
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 800a5c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a5cc:	f7fd fbb2 	bl	8007d34 <vTaskDelay>
		if (ReadLine())
 800a5d0:	e7e0      	b.n	800a594 <ShellHandler+0x8>
 800a5d2:	bf00      	nop
 800a5d4:	2001390c 	.word	0x2001390c
 800a5d8:	20013910 	.word	0x20013910

0800a5dc <atoi>:
 800a5dc:	220a      	movs	r2, #10
 800a5de:	2100      	movs	r1, #0
 800a5e0:	f000 b87a 	b.w	800a6d8 <strtol>

0800a5e4 <_strtol_l.isra.0>:
 800a5e4:	2b24      	cmp	r3, #36	@ 0x24
 800a5e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ea:	4686      	mov	lr, r0
 800a5ec:	4690      	mov	r8, r2
 800a5ee:	d801      	bhi.n	800a5f4 <_strtol_l.isra.0+0x10>
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d106      	bne.n	800a602 <_strtol_l.isra.0+0x1e>
 800a5f4:	f000 f8d2 	bl	800a79c <__errno>
 800a5f8:	2316      	movs	r3, #22
 800a5fa:	6003      	str	r3, [r0, #0]
 800a5fc:	2000      	movs	r0, #0
 800a5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a602:	4834      	ldr	r0, [pc, #208]	@ (800a6d4 <_strtol_l.isra.0+0xf0>)
 800a604:	460d      	mov	r5, r1
 800a606:	462a      	mov	r2, r5
 800a608:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a60c:	5d06      	ldrb	r6, [r0, r4]
 800a60e:	f016 0608 	ands.w	r6, r6, #8
 800a612:	d1f8      	bne.n	800a606 <_strtol_l.isra.0+0x22>
 800a614:	2c2d      	cmp	r4, #45	@ 0x2d
 800a616:	d110      	bne.n	800a63a <_strtol_l.isra.0+0x56>
 800a618:	782c      	ldrb	r4, [r5, #0]
 800a61a:	2601      	movs	r6, #1
 800a61c:	1c95      	adds	r5, r2, #2
 800a61e:	f033 0210 	bics.w	r2, r3, #16
 800a622:	d115      	bne.n	800a650 <_strtol_l.isra.0+0x6c>
 800a624:	2c30      	cmp	r4, #48	@ 0x30
 800a626:	d10d      	bne.n	800a644 <_strtol_l.isra.0+0x60>
 800a628:	782a      	ldrb	r2, [r5, #0]
 800a62a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a62e:	2a58      	cmp	r2, #88	@ 0x58
 800a630:	d108      	bne.n	800a644 <_strtol_l.isra.0+0x60>
 800a632:	786c      	ldrb	r4, [r5, #1]
 800a634:	3502      	adds	r5, #2
 800a636:	2310      	movs	r3, #16
 800a638:	e00a      	b.n	800a650 <_strtol_l.isra.0+0x6c>
 800a63a:	2c2b      	cmp	r4, #43	@ 0x2b
 800a63c:	bf04      	itt	eq
 800a63e:	782c      	ldrbeq	r4, [r5, #0]
 800a640:	1c95      	addeq	r5, r2, #2
 800a642:	e7ec      	b.n	800a61e <_strtol_l.isra.0+0x3a>
 800a644:	2b00      	cmp	r3, #0
 800a646:	d1f6      	bne.n	800a636 <_strtol_l.isra.0+0x52>
 800a648:	2c30      	cmp	r4, #48	@ 0x30
 800a64a:	bf14      	ite	ne
 800a64c:	230a      	movne	r3, #10
 800a64e:	2308      	moveq	r3, #8
 800a650:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a654:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a658:	2200      	movs	r2, #0
 800a65a:	fbbc f9f3 	udiv	r9, ip, r3
 800a65e:	4610      	mov	r0, r2
 800a660:	fb03 ca19 	mls	sl, r3, r9, ip
 800a664:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a668:	2f09      	cmp	r7, #9
 800a66a:	d80f      	bhi.n	800a68c <_strtol_l.isra.0+0xa8>
 800a66c:	463c      	mov	r4, r7
 800a66e:	42a3      	cmp	r3, r4
 800a670:	dd1b      	ble.n	800a6aa <_strtol_l.isra.0+0xc6>
 800a672:	1c57      	adds	r7, r2, #1
 800a674:	d007      	beq.n	800a686 <_strtol_l.isra.0+0xa2>
 800a676:	4581      	cmp	r9, r0
 800a678:	d314      	bcc.n	800a6a4 <_strtol_l.isra.0+0xc0>
 800a67a:	d101      	bne.n	800a680 <_strtol_l.isra.0+0x9c>
 800a67c:	45a2      	cmp	sl, r4
 800a67e:	db11      	blt.n	800a6a4 <_strtol_l.isra.0+0xc0>
 800a680:	fb00 4003 	mla	r0, r0, r3, r4
 800a684:	2201      	movs	r2, #1
 800a686:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a68a:	e7eb      	b.n	800a664 <_strtol_l.isra.0+0x80>
 800a68c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a690:	2f19      	cmp	r7, #25
 800a692:	d801      	bhi.n	800a698 <_strtol_l.isra.0+0xb4>
 800a694:	3c37      	subs	r4, #55	@ 0x37
 800a696:	e7ea      	b.n	800a66e <_strtol_l.isra.0+0x8a>
 800a698:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a69c:	2f19      	cmp	r7, #25
 800a69e:	d804      	bhi.n	800a6aa <_strtol_l.isra.0+0xc6>
 800a6a0:	3c57      	subs	r4, #87	@ 0x57
 800a6a2:	e7e4      	b.n	800a66e <_strtol_l.isra.0+0x8a>
 800a6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a8:	e7ed      	b.n	800a686 <_strtol_l.isra.0+0xa2>
 800a6aa:	1c53      	adds	r3, r2, #1
 800a6ac:	d108      	bne.n	800a6c0 <_strtol_l.isra.0+0xdc>
 800a6ae:	2322      	movs	r3, #34	@ 0x22
 800a6b0:	f8ce 3000 	str.w	r3, [lr]
 800a6b4:	4660      	mov	r0, ip
 800a6b6:	f1b8 0f00 	cmp.w	r8, #0
 800a6ba:	d0a0      	beq.n	800a5fe <_strtol_l.isra.0+0x1a>
 800a6bc:	1e69      	subs	r1, r5, #1
 800a6be:	e006      	b.n	800a6ce <_strtol_l.isra.0+0xea>
 800a6c0:	b106      	cbz	r6, 800a6c4 <_strtol_l.isra.0+0xe0>
 800a6c2:	4240      	negs	r0, r0
 800a6c4:	f1b8 0f00 	cmp.w	r8, #0
 800a6c8:	d099      	beq.n	800a5fe <_strtol_l.isra.0+0x1a>
 800a6ca:	2a00      	cmp	r2, #0
 800a6cc:	d1f6      	bne.n	800a6bc <_strtol_l.isra.0+0xd8>
 800a6ce:	f8c8 1000 	str.w	r1, [r8]
 800a6d2:	e794      	b.n	800a5fe <_strtol_l.isra.0+0x1a>
 800a6d4:	0800ba19 	.word	0x0800ba19

0800a6d8 <strtol>:
 800a6d8:	4613      	mov	r3, r2
 800a6da:	460a      	mov	r2, r1
 800a6dc:	4601      	mov	r1, r0
 800a6de:	4802      	ldr	r0, [pc, #8]	@ (800a6e8 <strtol+0x10>)
 800a6e0:	6800      	ldr	r0, [r0, #0]
 800a6e2:	f7ff bf7f 	b.w	800a5e4 <_strtol_l.isra.0>
 800a6e6:	bf00      	nop
 800a6e8:	2000012c 	.word	0x2000012c

0800a6ec <_vsniprintf_r>:
 800a6ec:	b530      	push	{r4, r5, lr}
 800a6ee:	4614      	mov	r4, r2
 800a6f0:	2c00      	cmp	r4, #0
 800a6f2:	b09b      	sub	sp, #108	@ 0x6c
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	da05      	bge.n	800a706 <_vsniprintf_r+0x1a>
 800a6fa:	238b      	movs	r3, #139	@ 0x8b
 800a6fc:	6003      	str	r3, [r0, #0]
 800a6fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a702:	b01b      	add	sp, #108	@ 0x6c
 800a704:	bd30      	pop	{r4, r5, pc}
 800a706:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a70a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a70e:	f04f 0300 	mov.w	r3, #0
 800a712:	9319      	str	r3, [sp, #100]	@ 0x64
 800a714:	bf14      	ite	ne
 800a716:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a71a:	4623      	moveq	r3, r4
 800a71c:	9302      	str	r3, [sp, #8]
 800a71e:	9305      	str	r3, [sp, #20]
 800a720:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a724:	9100      	str	r1, [sp, #0]
 800a726:	9104      	str	r1, [sp, #16]
 800a728:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a72c:	4669      	mov	r1, sp
 800a72e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a730:	f000 f9c2 	bl	800aab8 <_svfiprintf_r>
 800a734:	1c43      	adds	r3, r0, #1
 800a736:	bfbc      	itt	lt
 800a738:	238b      	movlt	r3, #139	@ 0x8b
 800a73a:	602b      	strlt	r3, [r5, #0]
 800a73c:	2c00      	cmp	r4, #0
 800a73e:	d0e0      	beq.n	800a702 <_vsniprintf_r+0x16>
 800a740:	9b00      	ldr	r3, [sp, #0]
 800a742:	2200      	movs	r2, #0
 800a744:	701a      	strb	r2, [r3, #0]
 800a746:	e7dc      	b.n	800a702 <_vsniprintf_r+0x16>

0800a748 <vsniprintf>:
 800a748:	b507      	push	{r0, r1, r2, lr}
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	4613      	mov	r3, r2
 800a74e:	460a      	mov	r2, r1
 800a750:	4601      	mov	r1, r0
 800a752:	4803      	ldr	r0, [pc, #12]	@ (800a760 <vsniprintf+0x18>)
 800a754:	6800      	ldr	r0, [r0, #0]
 800a756:	f7ff ffc9 	bl	800a6ec <_vsniprintf_r>
 800a75a:	b003      	add	sp, #12
 800a75c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a760:	2000012c 	.word	0x2000012c

0800a764 <memset>:
 800a764:	4402      	add	r2, r0
 800a766:	4603      	mov	r3, r0
 800a768:	4293      	cmp	r3, r2
 800a76a:	d100      	bne.n	800a76e <memset+0xa>
 800a76c:	4770      	bx	lr
 800a76e:	f803 1b01 	strb.w	r1, [r3], #1
 800a772:	e7f9      	b.n	800a768 <memset+0x4>

0800a774 <strncpy>:
 800a774:	b510      	push	{r4, lr}
 800a776:	3901      	subs	r1, #1
 800a778:	4603      	mov	r3, r0
 800a77a:	b132      	cbz	r2, 800a78a <strncpy+0x16>
 800a77c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a780:	f803 4b01 	strb.w	r4, [r3], #1
 800a784:	3a01      	subs	r2, #1
 800a786:	2c00      	cmp	r4, #0
 800a788:	d1f7      	bne.n	800a77a <strncpy+0x6>
 800a78a:	441a      	add	r2, r3
 800a78c:	2100      	movs	r1, #0
 800a78e:	4293      	cmp	r3, r2
 800a790:	d100      	bne.n	800a794 <strncpy+0x20>
 800a792:	bd10      	pop	{r4, pc}
 800a794:	f803 1b01 	strb.w	r1, [r3], #1
 800a798:	e7f9      	b.n	800a78e <strncpy+0x1a>
	...

0800a79c <__errno>:
 800a79c:	4b01      	ldr	r3, [pc, #4]	@ (800a7a4 <__errno+0x8>)
 800a79e:	6818      	ldr	r0, [r3, #0]
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	2000012c 	.word	0x2000012c

0800a7a8 <__libc_init_array>:
 800a7a8:	b570      	push	{r4, r5, r6, lr}
 800a7aa:	4d0d      	ldr	r5, [pc, #52]	@ (800a7e0 <__libc_init_array+0x38>)
 800a7ac:	4c0d      	ldr	r4, [pc, #52]	@ (800a7e4 <__libc_init_array+0x3c>)
 800a7ae:	1b64      	subs	r4, r4, r5
 800a7b0:	10a4      	asrs	r4, r4, #2
 800a7b2:	2600      	movs	r6, #0
 800a7b4:	42a6      	cmp	r6, r4
 800a7b6:	d109      	bne.n	800a7cc <__libc_init_array+0x24>
 800a7b8:	4d0b      	ldr	r5, [pc, #44]	@ (800a7e8 <__libc_init_array+0x40>)
 800a7ba:	4c0c      	ldr	r4, [pc, #48]	@ (800a7ec <__libc_init_array+0x44>)
 800a7bc:	f000 fc64 	bl	800b088 <_init>
 800a7c0:	1b64      	subs	r4, r4, r5
 800a7c2:	10a4      	asrs	r4, r4, #2
 800a7c4:	2600      	movs	r6, #0
 800a7c6:	42a6      	cmp	r6, r4
 800a7c8:	d105      	bne.n	800a7d6 <__libc_init_array+0x2e>
 800a7ca:	bd70      	pop	{r4, r5, r6, pc}
 800a7cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7d0:	4798      	blx	r3
 800a7d2:	3601      	adds	r6, #1
 800a7d4:	e7ee      	b.n	800a7b4 <__libc_init_array+0xc>
 800a7d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7da:	4798      	blx	r3
 800a7dc:	3601      	adds	r6, #1
 800a7de:	e7f2      	b.n	800a7c6 <__libc_init_array+0x1e>
 800a7e0:	0800bb54 	.word	0x0800bb54
 800a7e4:	0800bb54 	.word	0x0800bb54
 800a7e8:	0800bb54 	.word	0x0800bb54
 800a7ec:	0800bb58 	.word	0x0800bb58

0800a7f0 <__retarget_lock_acquire_recursive>:
 800a7f0:	4770      	bx	lr

0800a7f2 <__retarget_lock_release_recursive>:
 800a7f2:	4770      	bx	lr

0800a7f4 <memcpy>:
 800a7f4:	440a      	add	r2, r1
 800a7f6:	4291      	cmp	r1, r2
 800a7f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7fc:	d100      	bne.n	800a800 <memcpy+0xc>
 800a7fe:	4770      	bx	lr
 800a800:	b510      	push	{r4, lr}
 800a802:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a806:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a80a:	4291      	cmp	r1, r2
 800a80c:	d1f9      	bne.n	800a802 <memcpy+0xe>
 800a80e:	bd10      	pop	{r4, pc}

0800a810 <_free_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	4605      	mov	r5, r0
 800a814:	2900      	cmp	r1, #0
 800a816:	d041      	beq.n	800a89c <_free_r+0x8c>
 800a818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a81c:	1f0c      	subs	r4, r1, #4
 800a81e:	2b00      	cmp	r3, #0
 800a820:	bfb8      	it	lt
 800a822:	18e4      	addlt	r4, r4, r3
 800a824:	f000 f8e0 	bl	800a9e8 <__malloc_lock>
 800a828:	4a1d      	ldr	r2, [pc, #116]	@ (800a8a0 <_free_r+0x90>)
 800a82a:	6813      	ldr	r3, [r2, #0]
 800a82c:	b933      	cbnz	r3, 800a83c <_free_r+0x2c>
 800a82e:	6063      	str	r3, [r4, #4]
 800a830:	6014      	str	r4, [r2, #0]
 800a832:	4628      	mov	r0, r5
 800a834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a838:	f000 b8dc 	b.w	800a9f4 <__malloc_unlock>
 800a83c:	42a3      	cmp	r3, r4
 800a83e:	d908      	bls.n	800a852 <_free_r+0x42>
 800a840:	6820      	ldr	r0, [r4, #0]
 800a842:	1821      	adds	r1, r4, r0
 800a844:	428b      	cmp	r3, r1
 800a846:	bf01      	itttt	eq
 800a848:	6819      	ldreq	r1, [r3, #0]
 800a84a:	685b      	ldreq	r3, [r3, #4]
 800a84c:	1809      	addeq	r1, r1, r0
 800a84e:	6021      	streq	r1, [r4, #0]
 800a850:	e7ed      	b.n	800a82e <_free_r+0x1e>
 800a852:	461a      	mov	r2, r3
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	b10b      	cbz	r3, 800a85c <_free_r+0x4c>
 800a858:	42a3      	cmp	r3, r4
 800a85a:	d9fa      	bls.n	800a852 <_free_r+0x42>
 800a85c:	6811      	ldr	r1, [r2, #0]
 800a85e:	1850      	adds	r0, r2, r1
 800a860:	42a0      	cmp	r0, r4
 800a862:	d10b      	bne.n	800a87c <_free_r+0x6c>
 800a864:	6820      	ldr	r0, [r4, #0]
 800a866:	4401      	add	r1, r0
 800a868:	1850      	adds	r0, r2, r1
 800a86a:	4283      	cmp	r3, r0
 800a86c:	6011      	str	r1, [r2, #0]
 800a86e:	d1e0      	bne.n	800a832 <_free_r+0x22>
 800a870:	6818      	ldr	r0, [r3, #0]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	6053      	str	r3, [r2, #4]
 800a876:	4408      	add	r0, r1
 800a878:	6010      	str	r0, [r2, #0]
 800a87a:	e7da      	b.n	800a832 <_free_r+0x22>
 800a87c:	d902      	bls.n	800a884 <_free_r+0x74>
 800a87e:	230c      	movs	r3, #12
 800a880:	602b      	str	r3, [r5, #0]
 800a882:	e7d6      	b.n	800a832 <_free_r+0x22>
 800a884:	6820      	ldr	r0, [r4, #0]
 800a886:	1821      	adds	r1, r4, r0
 800a888:	428b      	cmp	r3, r1
 800a88a:	bf04      	itt	eq
 800a88c:	6819      	ldreq	r1, [r3, #0]
 800a88e:	685b      	ldreq	r3, [r3, #4]
 800a890:	6063      	str	r3, [r4, #4]
 800a892:	bf04      	itt	eq
 800a894:	1809      	addeq	r1, r1, r0
 800a896:	6021      	streq	r1, [r4, #0]
 800a898:	6054      	str	r4, [r2, #4]
 800a89a:	e7ca      	b.n	800a832 <_free_r+0x22>
 800a89c:	bd38      	pop	{r3, r4, r5, pc}
 800a89e:	bf00      	nop
 800a8a0:	20013a7c 	.word	0x20013a7c

0800a8a4 <sbrk_aligned>:
 800a8a4:	b570      	push	{r4, r5, r6, lr}
 800a8a6:	4e0f      	ldr	r6, [pc, #60]	@ (800a8e4 <sbrk_aligned+0x40>)
 800a8a8:	460c      	mov	r4, r1
 800a8aa:	6831      	ldr	r1, [r6, #0]
 800a8ac:	4605      	mov	r5, r0
 800a8ae:	b911      	cbnz	r1, 800a8b6 <sbrk_aligned+0x12>
 800a8b0:	f000 fba4 	bl	800affc <_sbrk_r>
 800a8b4:	6030      	str	r0, [r6, #0]
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	f000 fb9f 	bl	800affc <_sbrk_r>
 800a8be:	1c43      	adds	r3, r0, #1
 800a8c0:	d103      	bne.n	800a8ca <sbrk_aligned+0x26>
 800a8c2:	f04f 34ff 	mov.w	r4, #4294967295
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	bd70      	pop	{r4, r5, r6, pc}
 800a8ca:	1cc4      	adds	r4, r0, #3
 800a8cc:	f024 0403 	bic.w	r4, r4, #3
 800a8d0:	42a0      	cmp	r0, r4
 800a8d2:	d0f8      	beq.n	800a8c6 <sbrk_aligned+0x22>
 800a8d4:	1a21      	subs	r1, r4, r0
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	f000 fb90 	bl	800affc <_sbrk_r>
 800a8dc:	3001      	adds	r0, #1
 800a8de:	d1f2      	bne.n	800a8c6 <sbrk_aligned+0x22>
 800a8e0:	e7ef      	b.n	800a8c2 <sbrk_aligned+0x1e>
 800a8e2:	bf00      	nop
 800a8e4:	20013a78 	.word	0x20013a78

0800a8e8 <_malloc_r>:
 800a8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8ec:	1ccd      	adds	r5, r1, #3
 800a8ee:	f025 0503 	bic.w	r5, r5, #3
 800a8f2:	3508      	adds	r5, #8
 800a8f4:	2d0c      	cmp	r5, #12
 800a8f6:	bf38      	it	cc
 800a8f8:	250c      	movcc	r5, #12
 800a8fa:	2d00      	cmp	r5, #0
 800a8fc:	4606      	mov	r6, r0
 800a8fe:	db01      	blt.n	800a904 <_malloc_r+0x1c>
 800a900:	42a9      	cmp	r1, r5
 800a902:	d904      	bls.n	800a90e <_malloc_r+0x26>
 800a904:	230c      	movs	r3, #12
 800a906:	6033      	str	r3, [r6, #0]
 800a908:	2000      	movs	r0, #0
 800a90a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a90e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9e4 <_malloc_r+0xfc>
 800a912:	f000 f869 	bl	800a9e8 <__malloc_lock>
 800a916:	f8d8 3000 	ldr.w	r3, [r8]
 800a91a:	461c      	mov	r4, r3
 800a91c:	bb44      	cbnz	r4, 800a970 <_malloc_r+0x88>
 800a91e:	4629      	mov	r1, r5
 800a920:	4630      	mov	r0, r6
 800a922:	f7ff ffbf 	bl	800a8a4 <sbrk_aligned>
 800a926:	1c43      	adds	r3, r0, #1
 800a928:	4604      	mov	r4, r0
 800a92a:	d158      	bne.n	800a9de <_malloc_r+0xf6>
 800a92c:	f8d8 4000 	ldr.w	r4, [r8]
 800a930:	4627      	mov	r7, r4
 800a932:	2f00      	cmp	r7, #0
 800a934:	d143      	bne.n	800a9be <_malloc_r+0xd6>
 800a936:	2c00      	cmp	r4, #0
 800a938:	d04b      	beq.n	800a9d2 <_malloc_r+0xea>
 800a93a:	6823      	ldr	r3, [r4, #0]
 800a93c:	4639      	mov	r1, r7
 800a93e:	4630      	mov	r0, r6
 800a940:	eb04 0903 	add.w	r9, r4, r3
 800a944:	f000 fb5a 	bl	800affc <_sbrk_r>
 800a948:	4581      	cmp	r9, r0
 800a94a:	d142      	bne.n	800a9d2 <_malloc_r+0xea>
 800a94c:	6821      	ldr	r1, [r4, #0]
 800a94e:	1a6d      	subs	r5, r5, r1
 800a950:	4629      	mov	r1, r5
 800a952:	4630      	mov	r0, r6
 800a954:	f7ff ffa6 	bl	800a8a4 <sbrk_aligned>
 800a958:	3001      	adds	r0, #1
 800a95a:	d03a      	beq.n	800a9d2 <_malloc_r+0xea>
 800a95c:	6823      	ldr	r3, [r4, #0]
 800a95e:	442b      	add	r3, r5
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	f8d8 3000 	ldr.w	r3, [r8]
 800a966:	685a      	ldr	r2, [r3, #4]
 800a968:	bb62      	cbnz	r2, 800a9c4 <_malloc_r+0xdc>
 800a96a:	f8c8 7000 	str.w	r7, [r8]
 800a96e:	e00f      	b.n	800a990 <_malloc_r+0xa8>
 800a970:	6822      	ldr	r2, [r4, #0]
 800a972:	1b52      	subs	r2, r2, r5
 800a974:	d420      	bmi.n	800a9b8 <_malloc_r+0xd0>
 800a976:	2a0b      	cmp	r2, #11
 800a978:	d917      	bls.n	800a9aa <_malloc_r+0xc2>
 800a97a:	1961      	adds	r1, r4, r5
 800a97c:	42a3      	cmp	r3, r4
 800a97e:	6025      	str	r5, [r4, #0]
 800a980:	bf18      	it	ne
 800a982:	6059      	strne	r1, [r3, #4]
 800a984:	6863      	ldr	r3, [r4, #4]
 800a986:	bf08      	it	eq
 800a988:	f8c8 1000 	streq.w	r1, [r8]
 800a98c:	5162      	str	r2, [r4, r5]
 800a98e:	604b      	str	r3, [r1, #4]
 800a990:	4630      	mov	r0, r6
 800a992:	f000 f82f 	bl	800a9f4 <__malloc_unlock>
 800a996:	f104 000b 	add.w	r0, r4, #11
 800a99a:	1d23      	adds	r3, r4, #4
 800a99c:	f020 0007 	bic.w	r0, r0, #7
 800a9a0:	1ac2      	subs	r2, r0, r3
 800a9a2:	bf1c      	itt	ne
 800a9a4:	1a1b      	subne	r3, r3, r0
 800a9a6:	50a3      	strne	r3, [r4, r2]
 800a9a8:	e7af      	b.n	800a90a <_malloc_r+0x22>
 800a9aa:	6862      	ldr	r2, [r4, #4]
 800a9ac:	42a3      	cmp	r3, r4
 800a9ae:	bf0c      	ite	eq
 800a9b0:	f8c8 2000 	streq.w	r2, [r8]
 800a9b4:	605a      	strne	r2, [r3, #4]
 800a9b6:	e7eb      	b.n	800a990 <_malloc_r+0xa8>
 800a9b8:	4623      	mov	r3, r4
 800a9ba:	6864      	ldr	r4, [r4, #4]
 800a9bc:	e7ae      	b.n	800a91c <_malloc_r+0x34>
 800a9be:	463c      	mov	r4, r7
 800a9c0:	687f      	ldr	r7, [r7, #4]
 800a9c2:	e7b6      	b.n	800a932 <_malloc_r+0x4a>
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	42a3      	cmp	r3, r4
 800a9ca:	d1fb      	bne.n	800a9c4 <_malloc_r+0xdc>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	6053      	str	r3, [r2, #4]
 800a9d0:	e7de      	b.n	800a990 <_malloc_r+0xa8>
 800a9d2:	230c      	movs	r3, #12
 800a9d4:	6033      	str	r3, [r6, #0]
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	f000 f80c 	bl	800a9f4 <__malloc_unlock>
 800a9dc:	e794      	b.n	800a908 <_malloc_r+0x20>
 800a9de:	6005      	str	r5, [r0, #0]
 800a9e0:	e7d6      	b.n	800a990 <_malloc_r+0xa8>
 800a9e2:	bf00      	nop
 800a9e4:	20013a7c 	.word	0x20013a7c

0800a9e8 <__malloc_lock>:
 800a9e8:	4801      	ldr	r0, [pc, #4]	@ (800a9f0 <__malloc_lock+0x8>)
 800a9ea:	f7ff bf01 	b.w	800a7f0 <__retarget_lock_acquire_recursive>
 800a9ee:	bf00      	nop
 800a9f0:	20013a74 	.word	0x20013a74

0800a9f4 <__malloc_unlock>:
 800a9f4:	4801      	ldr	r0, [pc, #4]	@ (800a9fc <__malloc_unlock+0x8>)
 800a9f6:	f7ff befc 	b.w	800a7f2 <__retarget_lock_release_recursive>
 800a9fa:	bf00      	nop
 800a9fc:	20013a74 	.word	0x20013a74

0800aa00 <__ssputs_r>:
 800aa00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa04:	688e      	ldr	r6, [r1, #8]
 800aa06:	461f      	mov	r7, r3
 800aa08:	42be      	cmp	r6, r7
 800aa0a:	680b      	ldr	r3, [r1, #0]
 800aa0c:	4682      	mov	sl, r0
 800aa0e:	460c      	mov	r4, r1
 800aa10:	4690      	mov	r8, r2
 800aa12:	d82d      	bhi.n	800aa70 <__ssputs_r+0x70>
 800aa14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa1c:	d026      	beq.n	800aa6c <__ssputs_r+0x6c>
 800aa1e:	6965      	ldr	r5, [r4, #20]
 800aa20:	6909      	ldr	r1, [r1, #16]
 800aa22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa26:	eba3 0901 	sub.w	r9, r3, r1
 800aa2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa2e:	1c7b      	adds	r3, r7, #1
 800aa30:	444b      	add	r3, r9
 800aa32:	106d      	asrs	r5, r5, #1
 800aa34:	429d      	cmp	r5, r3
 800aa36:	bf38      	it	cc
 800aa38:	461d      	movcc	r5, r3
 800aa3a:	0553      	lsls	r3, r2, #21
 800aa3c:	d527      	bpl.n	800aa8e <__ssputs_r+0x8e>
 800aa3e:	4629      	mov	r1, r5
 800aa40:	f7ff ff52 	bl	800a8e8 <_malloc_r>
 800aa44:	4606      	mov	r6, r0
 800aa46:	b360      	cbz	r0, 800aaa2 <__ssputs_r+0xa2>
 800aa48:	6921      	ldr	r1, [r4, #16]
 800aa4a:	464a      	mov	r2, r9
 800aa4c:	f7ff fed2 	bl	800a7f4 <memcpy>
 800aa50:	89a3      	ldrh	r3, [r4, #12]
 800aa52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa5a:	81a3      	strh	r3, [r4, #12]
 800aa5c:	6126      	str	r6, [r4, #16]
 800aa5e:	6165      	str	r5, [r4, #20]
 800aa60:	444e      	add	r6, r9
 800aa62:	eba5 0509 	sub.w	r5, r5, r9
 800aa66:	6026      	str	r6, [r4, #0]
 800aa68:	60a5      	str	r5, [r4, #8]
 800aa6a:	463e      	mov	r6, r7
 800aa6c:	42be      	cmp	r6, r7
 800aa6e:	d900      	bls.n	800aa72 <__ssputs_r+0x72>
 800aa70:	463e      	mov	r6, r7
 800aa72:	6820      	ldr	r0, [r4, #0]
 800aa74:	4632      	mov	r2, r6
 800aa76:	4641      	mov	r1, r8
 800aa78:	f000 faa6 	bl	800afc8 <memmove>
 800aa7c:	68a3      	ldr	r3, [r4, #8]
 800aa7e:	1b9b      	subs	r3, r3, r6
 800aa80:	60a3      	str	r3, [r4, #8]
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	4433      	add	r3, r6
 800aa86:	6023      	str	r3, [r4, #0]
 800aa88:	2000      	movs	r0, #0
 800aa8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa8e:	462a      	mov	r2, r5
 800aa90:	f000 fac4 	bl	800b01c <_realloc_r>
 800aa94:	4606      	mov	r6, r0
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d1e0      	bne.n	800aa5c <__ssputs_r+0x5c>
 800aa9a:	6921      	ldr	r1, [r4, #16]
 800aa9c:	4650      	mov	r0, sl
 800aa9e:	f7ff feb7 	bl	800a810 <_free_r>
 800aaa2:	230c      	movs	r3, #12
 800aaa4:	f8ca 3000 	str.w	r3, [sl]
 800aaa8:	89a3      	ldrh	r3, [r4, #12]
 800aaaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaae:	81a3      	strh	r3, [r4, #12]
 800aab0:	f04f 30ff 	mov.w	r0, #4294967295
 800aab4:	e7e9      	b.n	800aa8a <__ssputs_r+0x8a>
	...

0800aab8 <_svfiprintf_r>:
 800aab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aabc:	4698      	mov	r8, r3
 800aabe:	898b      	ldrh	r3, [r1, #12]
 800aac0:	061b      	lsls	r3, r3, #24
 800aac2:	b09d      	sub	sp, #116	@ 0x74
 800aac4:	4607      	mov	r7, r0
 800aac6:	460d      	mov	r5, r1
 800aac8:	4614      	mov	r4, r2
 800aaca:	d510      	bpl.n	800aaee <_svfiprintf_r+0x36>
 800aacc:	690b      	ldr	r3, [r1, #16]
 800aace:	b973      	cbnz	r3, 800aaee <_svfiprintf_r+0x36>
 800aad0:	2140      	movs	r1, #64	@ 0x40
 800aad2:	f7ff ff09 	bl	800a8e8 <_malloc_r>
 800aad6:	6028      	str	r0, [r5, #0]
 800aad8:	6128      	str	r0, [r5, #16]
 800aada:	b930      	cbnz	r0, 800aaea <_svfiprintf_r+0x32>
 800aadc:	230c      	movs	r3, #12
 800aade:	603b      	str	r3, [r7, #0]
 800aae0:	f04f 30ff 	mov.w	r0, #4294967295
 800aae4:	b01d      	add	sp, #116	@ 0x74
 800aae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaea:	2340      	movs	r3, #64	@ 0x40
 800aaec:	616b      	str	r3, [r5, #20]
 800aaee:	2300      	movs	r3, #0
 800aaf0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaf2:	2320      	movs	r3, #32
 800aaf4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aaf8:	f8cd 800c 	str.w	r8, [sp, #12]
 800aafc:	2330      	movs	r3, #48	@ 0x30
 800aafe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ac9c <_svfiprintf_r+0x1e4>
 800ab02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab06:	f04f 0901 	mov.w	r9, #1
 800ab0a:	4623      	mov	r3, r4
 800ab0c:	469a      	mov	sl, r3
 800ab0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab12:	b10a      	cbz	r2, 800ab18 <_svfiprintf_r+0x60>
 800ab14:	2a25      	cmp	r2, #37	@ 0x25
 800ab16:	d1f9      	bne.n	800ab0c <_svfiprintf_r+0x54>
 800ab18:	ebba 0b04 	subs.w	fp, sl, r4
 800ab1c:	d00b      	beq.n	800ab36 <_svfiprintf_r+0x7e>
 800ab1e:	465b      	mov	r3, fp
 800ab20:	4622      	mov	r2, r4
 800ab22:	4629      	mov	r1, r5
 800ab24:	4638      	mov	r0, r7
 800ab26:	f7ff ff6b 	bl	800aa00 <__ssputs_r>
 800ab2a:	3001      	adds	r0, #1
 800ab2c:	f000 80a7 	beq.w	800ac7e <_svfiprintf_r+0x1c6>
 800ab30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab32:	445a      	add	r2, fp
 800ab34:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab36:	f89a 3000 	ldrb.w	r3, [sl]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	f000 809f 	beq.w	800ac7e <_svfiprintf_r+0x1c6>
 800ab40:	2300      	movs	r3, #0
 800ab42:	f04f 32ff 	mov.w	r2, #4294967295
 800ab46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab4a:	f10a 0a01 	add.w	sl, sl, #1
 800ab4e:	9304      	str	r3, [sp, #16]
 800ab50:	9307      	str	r3, [sp, #28]
 800ab52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab56:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab58:	4654      	mov	r4, sl
 800ab5a:	2205      	movs	r2, #5
 800ab5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab60:	484e      	ldr	r0, [pc, #312]	@ (800ac9c <_svfiprintf_r+0x1e4>)
 800ab62:	f7f5 fb4d 	bl	8000200 <memchr>
 800ab66:	9a04      	ldr	r2, [sp, #16]
 800ab68:	b9d8      	cbnz	r0, 800aba2 <_svfiprintf_r+0xea>
 800ab6a:	06d0      	lsls	r0, r2, #27
 800ab6c:	bf44      	itt	mi
 800ab6e:	2320      	movmi	r3, #32
 800ab70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab74:	0711      	lsls	r1, r2, #28
 800ab76:	bf44      	itt	mi
 800ab78:	232b      	movmi	r3, #43	@ 0x2b
 800ab7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ab82:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab84:	d015      	beq.n	800abb2 <_svfiprintf_r+0xfa>
 800ab86:	9a07      	ldr	r2, [sp, #28]
 800ab88:	4654      	mov	r4, sl
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	f04f 0c0a 	mov.w	ip, #10
 800ab90:	4621      	mov	r1, r4
 800ab92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab96:	3b30      	subs	r3, #48	@ 0x30
 800ab98:	2b09      	cmp	r3, #9
 800ab9a:	d94b      	bls.n	800ac34 <_svfiprintf_r+0x17c>
 800ab9c:	b1b0      	cbz	r0, 800abcc <_svfiprintf_r+0x114>
 800ab9e:	9207      	str	r2, [sp, #28]
 800aba0:	e014      	b.n	800abcc <_svfiprintf_r+0x114>
 800aba2:	eba0 0308 	sub.w	r3, r0, r8
 800aba6:	fa09 f303 	lsl.w	r3, r9, r3
 800abaa:	4313      	orrs	r3, r2
 800abac:	9304      	str	r3, [sp, #16]
 800abae:	46a2      	mov	sl, r4
 800abb0:	e7d2      	b.n	800ab58 <_svfiprintf_r+0xa0>
 800abb2:	9b03      	ldr	r3, [sp, #12]
 800abb4:	1d19      	adds	r1, r3, #4
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	9103      	str	r1, [sp, #12]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	bfbb      	ittet	lt
 800abbe:	425b      	neglt	r3, r3
 800abc0:	f042 0202 	orrlt.w	r2, r2, #2
 800abc4:	9307      	strge	r3, [sp, #28]
 800abc6:	9307      	strlt	r3, [sp, #28]
 800abc8:	bfb8      	it	lt
 800abca:	9204      	strlt	r2, [sp, #16]
 800abcc:	7823      	ldrb	r3, [r4, #0]
 800abce:	2b2e      	cmp	r3, #46	@ 0x2e
 800abd0:	d10a      	bne.n	800abe8 <_svfiprintf_r+0x130>
 800abd2:	7863      	ldrb	r3, [r4, #1]
 800abd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800abd6:	d132      	bne.n	800ac3e <_svfiprintf_r+0x186>
 800abd8:	9b03      	ldr	r3, [sp, #12]
 800abda:	1d1a      	adds	r2, r3, #4
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	9203      	str	r2, [sp, #12]
 800abe0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abe4:	3402      	adds	r4, #2
 800abe6:	9305      	str	r3, [sp, #20]
 800abe8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800acac <_svfiprintf_r+0x1f4>
 800abec:	7821      	ldrb	r1, [r4, #0]
 800abee:	2203      	movs	r2, #3
 800abf0:	4650      	mov	r0, sl
 800abf2:	f7f5 fb05 	bl	8000200 <memchr>
 800abf6:	b138      	cbz	r0, 800ac08 <_svfiprintf_r+0x150>
 800abf8:	9b04      	ldr	r3, [sp, #16]
 800abfa:	eba0 000a 	sub.w	r0, r0, sl
 800abfe:	2240      	movs	r2, #64	@ 0x40
 800ac00:	4082      	lsls	r2, r0
 800ac02:	4313      	orrs	r3, r2
 800ac04:	3401      	adds	r4, #1
 800ac06:	9304      	str	r3, [sp, #16]
 800ac08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac0c:	4824      	ldr	r0, [pc, #144]	@ (800aca0 <_svfiprintf_r+0x1e8>)
 800ac0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac12:	2206      	movs	r2, #6
 800ac14:	f7f5 faf4 	bl	8000200 <memchr>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d036      	beq.n	800ac8a <_svfiprintf_r+0x1d2>
 800ac1c:	4b21      	ldr	r3, [pc, #132]	@ (800aca4 <_svfiprintf_r+0x1ec>)
 800ac1e:	bb1b      	cbnz	r3, 800ac68 <_svfiprintf_r+0x1b0>
 800ac20:	9b03      	ldr	r3, [sp, #12]
 800ac22:	3307      	adds	r3, #7
 800ac24:	f023 0307 	bic.w	r3, r3, #7
 800ac28:	3308      	adds	r3, #8
 800ac2a:	9303      	str	r3, [sp, #12]
 800ac2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac2e:	4433      	add	r3, r6
 800ac30:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac32:	e76a      	b.n	800ab0a <_svfiprintf_r+0x52>
 800ac34:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac38:	460c      	mov	r4, r1
 800ac3a:	2001      	movs	r0, #1
 800ac3c:	e7a8      	b.n	800ab90 <_svfiprintf_r+0xd8>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	3401      	adds	r4, #1
 800ac42:	9305      	str	r3, [sp, #20]
 800ac44:	4619      	mov	r1, r3
 800ac46:	f04f 0c0a 	mov.w	ip, #10
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac50:	3a30      	subs	r2, #48	@ 0x30
 800ac52:	2a09      	cmp	r2, #9
 800ac54:	d903      	bls.n	800ac5e <_svfiprintf_r+0x1a6>
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d0c6      	beq.n	800abe8 <_svfiprintf_r+0x130>
 800ac5a:	9105      	str	r1, [sp, #20]
 800ac5c:	e7c4      	b.n	800abe8 <_svfiprintf_r+0x130>
 800ac5e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac62:	4604      	mov	r4, r0
 800ac64:	2301      	movs	r3, #1
 800ac66:	e7f0      	b.n	800ac4a <_svfiprintf_r+0x192>
 800ac68:	ab03      	add	r3, sp, #12
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	462a      	mov	r2, r5
 800ac6e:	4b0e      	ldr	r3, [pc, #56]	@ (800aca8 <_svfiprintf_r+0x1f0>)
 800ac70:	a904      	add	r1, sp, #16
 800ac72:	4638      	mov	r0, r7
 800ac74:	f3af 8000 	nop.w
 800ac78:	1c42      	adds	r2, r0, #1
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	d1d6      	bne.n	800ac2c <_svfiprintf_r+0x174>
 800ac7e:	89ab      	ldrh	r3, [r5, #12]
 800ac80:	065b      	lsls	r3, r3, #25
 800ac82:	f53f af2d 	bmi.w	800aae0 <_svfiprintf_r+0x28>
 800ac86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac88:	e72c      	b.n	800aae4 <_svfiprintf_r+0x2c>
 800ac8a:	ab03      	add	r3, sp, #12
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	462a      	mov	r2, r5
 800ac90:	4b05      	ldr	r3, [pc, #20]	@ (800aca8 <_svfiprintf_r+0x1f0>)
 800ac92:	a904      	add	r1, sp, #16
 800ac94:	4638      	mov	r0, r7
 800ac96:	f000 f879 	bl	800ad8c <_printf_i>
 800ac9a:	e7ed      	b.n	800ac78 <_svfiprintf_r+0x1c0>
 800ac9c:	0800bb19 	.word	0x0800bb19
 800aca0:	0800bb23 	.word	0x0800bb23
 800aca4:	00000000 	.word	0x00000000
 800aca8:	0800aa01 	.word	0x0800aa01
 800acac:	0800bb1f 	.word	0x0800bb1f

0800acb0 <_printf_common>:
 800acb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acb4:	4616      	mov	r6, r2
 800acb6:	4698      	mov	r8, r3
 800acb8:	688a      	ldr	r2, [r1, #8]
 800acba:	690b      	ldr	r3, [r1, #16]
 800acbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800acc0:	4293      	cmp	r3, r2
 800acc2:	bfb8      	it	lt
 800acc4:	4613      	movlt	r3, r2
 800acc6:	6033      	str	r3, [r6, #0]
 800acc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800accc:	4607      	mov	r7, r0
 800acce:	460c      	mov	r4, r1
 800acd0:	b10a      	cbz	r2, 800acd6 <_printf_common+0x26>
 800acd2:	3301      	adds	r3, #1
 800acd4:	6033      	str	r3, [r6, #0]
 800acd6:	6823      	ldr	r3, [r4, #0]
 800acd8:	0699      	lsls	r1, r3, #26
 800acda:	bf42      	ittt	mi
 800acdc:	6833      	ldrmi	r3, [r6, #0]
 800acde:	3302      	addmi	r3, #2
 800ace0:	6033      	strmi	r3, [r6, #0]
 800ace2:	6825      	ldr	r5, [r4, #0]
 800ace4:	f015 0506 	ands.w	r5, r5, #6
 800ace8:	d106      	bne.n	800acf8 <_printf_common+0x48>
 800acea:	f104 0a19 	add.w	sl, r4, #25
 800acee:	68e3      	ldr	r3, [r4, #12]
 800acf0:	6832      	ldr	r2, [r6, #0]
 800acf2:	1a9b      	subs	r3, r3, r2
 800acf4:	42ab      	cmp	r3, r5
 800acf6:	dc26      	bgt.n	800ad46 <_printf_common+0x96>
 800acf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800acfc:	6822      	ldr	r2, [r4, #0]
 800acfe:	3b00      	subs	r3, #0
 800ad00:	bf18      	it	ne
 800ad02:	2301      	movne	r3, #1
 800ad04:	0692      	lsls	r2, r2, #26
 800ad06:	d42b      	bmi.n	800ad60 <_printf_common+0xb0>
 800ad08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad0c:	4641      	mov	r1, r8
 800ad0e:	4638      	mov	r0, r7
 800ad10:	47c8      	blx	r9
 800ad12:	3001      	adds	r0, #1
 800ad14:	d01e      	beq.n	800ad54 <_printf_common+0xa4>
 800ad16:	6823      	ldr	r3, [r4, #0]
 800ad18:	6922      	ldr	r2, [r4, #16]
 800ad1a:	f003 0306 	and.w	r3, r3, #6
 800ad1e:	2b04      	cmp	r3, #4
 800ad20:	bf02      	ittt	eq
 800ad22:	68e5      	ldreq	r5, [r4, #12]
 800ad24:	6833      	ldreq	r3, [r6, #0]
 800ad26:	1aed      	subeq	r5, r5, r3
 800ad28:	68a3      	ldr	r3, [r4, #8]
 800ad2a:	bf0c      	ite	eq
 800ad2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad30:	2500      	movne	r5, #0
 800ad32:	4293      	cmp	r3, r2
 800ad34:	bfc4      	itt	gt
 800ad36:	1a9b      	subgt	r3, r3, r2
 800ad38:	18ed      	addgt	r5, r5, r3
 800ad3a:	2600      	movs	r6, #0
 800ad3c:	341a      	adds	r4, #26
 800ad3e:	42b5      	cmp	r5, r6
 800ad40:	d11a      	bne.n	800ad78 <_printf_common+0xc8>
 800ad42:	2000      	movs	r0, #0
 800ad44:	e008      	b.n	800ad58 <_printf_common+0xa8>
 800ad46:	2301      	movs	r3, #1
 800ad48:	4652      	mov	r2, sl
 800ad4a:	4641      	mov	r1, r8
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	47c8      	blx	r9
 800ad50:	3001      	adds	r0, #1
 800ad52:	d103      	bne.n	800ad5c <_printf_common+0xac>
 800ad54:	f04f 30ff 	mov.w	r0, #4294967295
 800ad58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad5c:	3501      	adds	r5, #1
 800ad5e:	e7c6      	b.n	800acee <_printf_common+0x3e>
 800ad60:	18e1      	adds	r1, r4, r3
 800ad62:	1c5a      	adds	r2, r3, #1
 800ad64:	2030      	movs	r0, #48	@ 0x30
 800ad66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad6a:	4422      	add	r2, r4
 800ad6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad74:	3302      	adds	r3, #2
 800ad76:	e7c7      	b.n	800ad08 <_printf_common+0x58>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	4622      	mov	r2, r4
 800ad7c:	4641      	mov	r1, r8
 800ad7e:	4638      	mov	r0, r7
 800ad80:	47c8      	blx	r9
 800ad82:	3001      	adds	r0, #1
 800ad84:	d0e6      	beq.n	800ad54 <_printf_common+0xa4>
 800ad86:	3601      	adds	r6, #1
 800ad88:	e7d9      	b.n	800ad3e <_printf_common+0x8e>
	...

0800ad8c <_printf_i>:
 800ad8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad90:	7e0f      	ldrb	r7, [r1, #24]
 800ad92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad94:	2f78      	cmp	r7, #120	@ 0x78
 800ad96:	4691      	mov	r9, r2
 800ad98:	4680      	mov	r8, r0
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	469a      	mov	sl, r3
 800ad9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ada2:	d807      	bhi.n	800adb4 <_printf_i+0x28>
 800ada4:	2f62      	cmp	r7, #98	@ 0x62
 800ada6:	d80a      	bhi.n	800adbe <_printf_i+0x32>
 800ada8:	2f00      	cmp	r7, #0
 800adaa:	f000 80d1 	beq.w	800af50 <_printf_i+0x1c4>
 800adae:	2f58      	cmp	r7, #88	@ 0x58
 800adb0:	f000 80b8 	beq.w	800af24 <_printf_i+0x198>
 800adb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800adbc:	e03a      	b.n	800ae34 <_printf_i+0xa8>
 800adbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800adc2:	2b15      	cmp	r3, #21
 800adc4:	d8f6      	bhi.n	800adb4 <_printf_i+0x28>
 800adc6:	a101      	add	r1, pc, #4	@ (adr r1, 800adcc <_printf_i+0x40>)
 800adc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800adcc:	0800ae25 	.word	0x0800ae25
 800add0:	0800ae39 	.word	0x0800ae39
 800add4:	0800adb5 	.word	0x0800adb5
 800add8:	0800adb5 	.word	0x0800adb5
 800addc:	0800adb5 	.word	0x0800adb5
 800ade0:	0800adb5 	.word	0x0800adb5
 800ade4:	0800ae39 	.word	0x0800ae39
 800ade8:	0800adb5 	.word	0x0800adb5
 800adec:	0800adb5 	.word	0x0800adb5
 800adf0:	0800adb5 	.word	0x0800adb5
 800adf4:	0800adb5 	.word	0x0800adb5
 800adf8:	0800af37 	.word	0x0800af37
 800adfc:	0800ae63 	.word	0x0800ae63
 800ae00:	0800aef1 	.word	0x0800aef1
 800ae04:	0800adb5 	.word	0x0800adb5
 800ae08:	0800adb5 	.word	0x0800adb5
 800ae0c:	0800af59 	.word	0x0800af59
 800ae10:	0800adb5 	.word	0x0800adb5
 800ae14:	0800ae63 	.word	0x0800ae63
 800ae18:	0800adb5 	.word	0x0800adb5
 800ae1c:	0800adb5 	.word	0x0800adb5
 800ae20:	0800aef9 	.word	0x0800aef9
 800ae24:	6833      	ldr	r3, [r6, #0]
 800ae26:	1d1a      	adds	r2, r3, #4
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	6032      	str	r2, [r6, #0]
 800ae2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae34:	2301      	movs	r3, #1
 800ae36:	e09c      	b.n	800af72 <_printf_i+0x1e6>
 800ae38:	6833      	ldr	r3, [r6, #0]
 800ae3a:	6820      	ldr	r0, [r4, #0]
 800ae3c:	1d19      	adds	r1, r3, #4
 800ae3e:	6031      	str	r1, [r6, #0]
 800ae40:	0606      	lsls	r6, r0, #24
 800ae42:	d501      	bpl.n	800ae48 <_printf_i+0xbc>
 800ae44:	681d      	ldr	r5, [r3, #0]
 800ae46:	e003      	b.n	800ae50 <_printf_i+0xc4>
 800ae48:	0645      	lsls	r5, r0, #25
 800ae4a:	d5fb      	bpl.n	800ae44 <_printf_i+0xb8>
 800ae4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae50:	2d00      	cmp	r5, #0
 800ae52:	da03      	bge.n	800ae5c <_printf_i+0xd0>
 800ae54:	232d      	movs	r3, #45	@ 0x2d
 800ae56:	426d      	negs	r5, r5
 800ae58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae5c:	4858      	ldr	r0, [pc, #352]	@ (800afc0 <_printf_i+0x234>)
 800ae5e:	230a      	movs	r3, #10
 800ae60:	e011      	b.n	800ae86 <_printf_i+0xfa>
 800ae62:	6821      	ldr	r1, [r4, #0]
 800ae64:	6833      	ldr	r3, [r6, #0]
 800ae66:	0608      	lsls	r0, r1, #24
 800ae68:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae6c:	d402      	bmi.n	800ae74 <_printf_i+0xe8>
 800ae6e:	0649      	lsls	r1, r1, #25
 800ae70:	bf48      	it	mi
 800ae72:	b2ad      	uxthmi	r5, r5
 800ae74:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae76:	4852      	ldr	r0, [pc, #328]	@ (800afc0 <_printf_i+0x234>)
 800ae78:	6033      	str	r3, [r6, #0]
 800ae7a:	bf14      	ite	ne
 800ae7c:	230a      	movne	r3, #10
 800ae7e:	2308      	moveq	r3, #8
 800ae80:	2100      	movs	r1, #0
 800ae82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae86:	6866      	ldr	r6, [r4, #4]
 800ae88:	60a6      	str	r6, [r4, #8]
 800ae8a:	2e00      	cmp	r6, #0
 800ae8c:	db05      	blt.n	800ae9a <_printf_i+0x10e>
 800ae8e:	6821      	ldr	r1, [r4, #0]
 800ae90:	432e      	orrs	r6, r5
 800ae92:	f021 0104 	bic.w	r1, r1, #4
 800ae96:	6021      	str	r1, [r4, #0]
 800ae98:	d04b      	beq.n	800af32 <_printf_i+0x1a6>
 800ae9a:	4616      	mov	r6, r2
 800ae9c:	fbb5 f1f3 	udiv	r1, r5, r3
 800aea0:	fb03 5711 	mls	r7, r3, r1, r5
 800aea4:	5dc7      	ldrb	r7, [r0, r7]
 800aea6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aeaa:	462f      	mov	r7, r5
 800aeac:	42bb      	cmp	r3, r7
 800aeae:	460d      	mov	r5, r1
 800aeb0:	d9f4      	bls.n	800ae9c <_printf_i+0x110>
 800aeb2:	2b08      	cmp	r3, #8
 800aeb4:	d10b      	bne.n	800aece <_printf_i+0x142>
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	07df      	lsls	r7, r3, #31
 800aeba:	d508      	bpl.n	800aece <_printf_i+0x142>
 800aebc:	6923      	ldr	r3, [r4, #16]
 800aebe:	6861      	ldr	r1, [r4, #4]
 800aec0:	4299      	cmp	r1, r3
 800aec2:	bfde      	ittt	le
 800aec4:	2330      	movle	r3, #48	@ 0x30
 800aec6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aeca:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aece:	1b92      	subs	r2, r2, r6
 800aed0:	6122      	str	r2, [r4, #16]
 800aed2:	f8cd a000 	str.w	sl, [sp]
 800aed6:	464b      	mov	r3, r9
 800aed8:	aa03      	add	r2, sp, #12
 800aeda:	4621      	mov	r1, r4
 800aedc:	4640      	mov	r0, r8
 800aede:	f7ff fee7 	bl	800acb0 <_printf_common>
 800aee2:	3001      	adds	r0, #1
 800aee4:	d14a      	bne.n	800af7c <_printf_i+0x1f0>
 800aee6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeea:	b004      	add	sp, #16
 800aeec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef0:	6823      	ldr	r3, [r4, #0]
 800aef2:	f043 0320 	orr.w	r3, r3, #32
 800aef6:	6023      	str	r3, [r4, #0]
 800aef8:	4832      	ldr	r0, [pc, #200]	@ (800afc4 <_printf_i+0x238>)
 800aefa:	2778      	movs	r7, #120	@ 0x78
 800aefc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	6831      	ldr	r1, [r6, #0]
 800af04:	061f      	lsls	r7, r3, #24
 800af06:	f851 5b04 	ldr.w	r5, [r1], #4
 800af0a:	d402      	bmi.n	800af12 <_printf_i+0x186>
 800af0c:	065f      	lsls	r7, r3, #25
 800af0e:	bf48      	it	mi
 800af10:	b2ad      	uxthmi	r5, r5
 800af12:	6031      	str	r1, [r6, #0]
 800af14:	07d9      	lsls	r1, r3, #31
 800af16:	bf44      	itt	mi
 800af18:	f043 0320 	orrmi.w	r3, r3, #32
 800af1c:	6023      	strmi	r3, [r4, #0]
 800af1e:	b11d      	cbz	r5, 800af28 <_printf_i+0x19c>
 800af20:	2310      	movs	r3, #16
 800af22:	e7ad      	b.n	800ae80 <_printf_i+0xf4>
 800af24:	4826      	ldr	r0, [pc, #152]	@ (800afc0 <_printf_i+0x234>)
 800af26:	e7e9      	b.n	800aefc <_printf_i+0x170>
 800af28:	6823      	ldr	r3, [r4, #0]
 800af2a:	f023 0320 	bic.w	r3, r3, #32
 800af2e:	6023      	str	r3, [r4, #0]
 800af30:	e7f6      	b.n	800af20 <_printf_i+0x194>
 800af32:	4616      	mov	r6, r2
 800af34:	e7bd      	b.n	800aeb2 <_printf_i+0x126>
 800af36:	6833      	ldr	r3, [r6, #0]
 800af38:	6825      	ldr	r5, [r4, #0]
 800af3a:	6961      	ldr	r1, [r4, #20]
 800af3c:	1d18      	adds	r0, r3, #4
 800af3e:	6030      	str	r0, [r6, #0]
 800af40:	062e      	lsls	r6, r5, #24
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	d501      	bpl.n	800af4a <_printf_i+0x1be>
 800af46:	6019      	str	r1, [r3, #0]
 800af48:	e002      	b.n	800af50 <_printf_i+0x1c4>
 800af4a:	0668      	lsls	r0, r5, #25
 800af4c:	d5fb      	bpl.n	800af46 <_printf_i+0x1ba>
 800af4e:	8019      	strh	r1, [r3, #0]
 800af50:	2300      	movs	r3, #0
 800af52:	6123      	str	r3, [r4, #16]
 800af54:	4616      	mov	r6, r2
 800af56:	e7bc      	b.n	800aed2 <_printf_i+0x146>
 800af58:	6833      	ldr	r3, [r6, #0]
 800af5a:	1d1a      	adds	r2, r3, #4
 800af5c:	6032      	str	r2, [r6, #0]
 800af5e:	681e      	ldr	r6, [r3, #0]
 800af60:	6862      	ldr	r2, [r4, #4]
 800af62:	2100      	movs	r1, #0
 800af64:	4630      	mov	r0, r6
 800af66:	f7f5 f94b 	bl	8000200 <memchr>
 800af6a:	b108      	cbz	r0, 800af70 <_printf_i+0x1e4>
 800af6c:	1b80      	subs	r0, r0, r6
 800af6e:	6060      	str	r0, [r4, #4]
 800af70:	6863      	ldr	r3, [r4, #4]
 800af72:	6123      	str	r3, [r4, #16]
 800af74:	2300      	movs	r3, #0
 800af76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af7a:	e7aa      	b.n	800aed2 <_printf_i+0x146>
 800af7c:	6923      	ldr	r3, [r4, #16]
 800af7e:	4632      	mov	r2, r6
 800af80:	4649      	mov	r1, r9
 800af82:	4640      	mov	r0, r8
 800af84:	47d0      	blx	sl
 800af86:	3001      	adds	r0, #1
 800af88:	d0ad      	beq.n	800aee6 <_printf_i+0x15a>
 800af8a:	6823      	ldr	r3, [r4, #0]
 800af8c:	079b      	lsls	r3, r3, #30
 800af8e:	d413      	bmi.n	800afb8 <_printf_i+0x22c>
 800af90:	68e0      	ldr	r0, [r4, #12]
 800af92:	9b03      	ldr	r3, [sp, #12]
 800af94:	4298      	cmp	r0, r3
 800af96:	bfb8      	it	lt
 800af98:	4618      	movlt	r0, r3
 800af9a:	e7a6      	b.n	800aeea <_printf_i+0x15e>
 800af9c:	2301      	movs	r3, #1
 800af9e:	4632      	mov	r2, r6
 800afa0:	4649      	mov	r1, r9
 800afa2:	4640      	mov	r0, r8
 800afa4:	47d0      	blx	sl
 800afa6:	3001      	adds	r0, #1
 800afa8:	d09d      	beq.n	800aee6 <_printf_i+0x15a>
 800afaa:	3501      	adds	r5, #1
 800afac:	68e3      	ldr	r3, [r4, #12]
 800afae:	9903      	ldr	r1, [sp, #12]
 800afb0:	1a5b      	subs	r3, r3, r1
 800afb2:	42ab      	cmp	r3, r5
 800afb4:	dcf2      	bgt.n	800af9c <_printf_i+0x210>
 800afb6:	e7eb      	b.n	800af90 <_printf_i+0x204>
 800afb8:	2500      	movs	r5, #0
 800afba:	f104 0619 	add.w	r6, r4, #25
 800afbe:	e7f5      	b.n	800afac <_printf_i+0x220>
 800afc0:	0800bb2a 	.word	0x0800bb2a
 800afc4:	0800bb3b 	.word	0x0800bb3b

0800afc8 <memmove>:
 800afc8:	4288      	cmp	r0, r1
 800afca:	b510      	push	{r4, lr}
 800afcc:	eb01 0402 	add.w	r4, r1, r2
 800afd0:	d902      	bls.n	800afd8 <memmove+0x10>
 800afd2:	4284      	cmp	r4, r0
 800afd4:	4623      	mov	r3, r4
 800afd6:	d807      	bhi.n	800afe8 <memmove+0x20>
 800afd8:	1e43      	subs	r3, r0, #1
 800afda:	42a1      	cmp	r1, r4
 800afdc:	d008      	beq.n	800aff0 <memmove+0x28>
 800afde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afe6:	e7f8      	b.n	800afda <memmove+0x12>
 800afe8:	4402      	add	r2, r0
 800afea:	4601      	mov	r1, r0
 800afec:	428a      	cmp	r2, r1
 800afee:	d100      	bne.n	800aff2 <memmove+0x2a>
 800aff0:	bd10      	pop	{r4, pc}
 800aff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800affa:	e7f7      	b.n	800afec <memmove+0x24>

0800affc <_sbrk_r>:
 800affc:	b538      	push	{r3, r4, r5, lr}
 800affe:	4d06      	ldr	r5, [pc, #24]	@ (800b018 <_sbrk_r+0x1c>)
 800b000:	2300      	movs	r3, #0
 800b002:	4604      	mov	r4, r0
 800b004:	4608      	mov	r0, r1
 800b006:	602b      	str	r3, [r5, #0]
 800b008:	f7f6 fbae 	bl	8001768 <_sbrk>
 800b00c:	1c43      	adds	r3, r0, #1
 800b00e:	d102      	bne.n	800b016 <_sbrk_r+0x1a>
 800b010:	682b      	ldr	r3, [r5, #0]
 800b012:	b103      	cbz	r3, 800b016 <_sbrk_r+0x1a>
 800b014:	6023      	str	r3, [r4, #0]
 800b016:	bd38      	pop	{r3, r4, r5, pc}
 800b018:	20013a70 	.word	0x20013a70

0800b01c <_realloc_r>:
 800b01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b020:	4607      	mov	r7, r0
 800b022:	4614      	mov	r4, r2
 800b024:	460d      	mov	r5, r1
 800b026:	b921      	cbnz	r1, 800b032 <_realloc_r+0x16>
 800b028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b02c:	4611      	mov	r1, r2
 800b02e:	f7ff bc5b 	b.w	800a8e8 <_malloc_r>
 800b032:	b92a      	cbnz	r2, 800b040 <_realloc_r+0x24>
 800b034:	f7ff fbec 	bl	800a810 <_free_r>
 800b038:	4625      	mov	r5, r4
 800b03a:	4628      	mov	r0, r5
 800b03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b040:	f000 f81a 	bl	800b078 <_malloc_usable_size_r>
 800b044:	4284      	cmp	r4, r0
 800b046:	4606      	mov	r6, r0
 800b048:	d802      	bhi.n	800b050 <_realloc_r+0x34>
 800b04a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b04e:	d8f4      	bhi.n	800b03a <_realloc_r+0x1e>
 800b050:	4621      	mov	r1, r4
 800b052:	4638      	mov	r0, r7
 800b054:	f7ff fc48 	bl	800a8e8 <_malloc_r>
 800b058:	4680      	mov	r8, r0
 800b05a:	b908      	cbnz	r0, 800b060 <_realloc_r+0x44>
 800b05c:	4645      	mov	r5, r8
 800b05e:	e7ec      	b.n	800b03a <_realloc_r+0x1e>
 800b060:	42b4      	cmp	r4, r6
 800b062:	4622      	mov	r2, r4
 800b064:	4629      	mov	r1, r5
 800b066:	bf28      	it	cs
 800b068:	4632      	movcs	r2, r6
 800b06a:	f7ff fbc3 	bl	800a7f4 <memcpy>
 800b06e:	4629      	mov	r1, r5
 800b070:	4638      	mov	r0, r7
 800b072:	f7ff fbcd 	bl	800a810 <_free_r>
 800b076:	e7f1      	b.n	800b05c <_realloc_r+0x40>

0800b078 <_malloc_usable_size_r>:
 800b078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b07c:	1f18      	subs	r0, r3, #4
 800b07e:	2b00      	cmp	r3, #0
 800b080:	bfbc      	itt	lt
 800b082:	580b      	ldrlt	r3, [r1, r0]
 800b084:	18c0      	addlt	r0, r0, r3
 800b086:	4770      	bx	lr

0800b088 <_init>:
 800b088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b08a:	bf00      	nop
 800b08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b08e:	bc08      	pop	{r3}
 800b090:	469e      	mov	lr, r3
 800b092:	4770      	bx	lr

0800b094 <_fini>:
 800b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b096:	bf00      	nop
 800b098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b09a:	bc08      	pop	{r3}
 800b09c:	469e      	mov	lr, r3
 800b09e:	4770      	bx	lr
